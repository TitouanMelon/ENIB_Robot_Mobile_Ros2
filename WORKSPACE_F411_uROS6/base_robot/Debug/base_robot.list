
base_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b1d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f50  0801b378  0801b378  0002b378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c2c8  0801c2c8  000300f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801c2c8  0801c2c8  0002c2c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c2d0  0801c2d0  000300f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c2d0  0801c2d0  0002c2d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c2d4  0801c2d4  0002c2d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  0801c2d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e788  200000f0  0801c3c8  000300f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000e878  0801c3c8  0003e878  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY
 12 .comment      0000009c  00000000  00000000  00030120  2**0
                  CONTENTS, READONLY
 13 .debug_info   000e5c97  00000000  00000000  000301bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000182a1  00000000  00000000  00115e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004350  00000000  00000000  0012e0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016eb  00000000  00000000  00132448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b46  00000000  00000000  00133b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00070f46  00000000  00000000  00159679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8e63  00000000  00000000  001ca5bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00010b20  00000000  00000000  00283424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  00293f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00057b45  00000000  00000000  00293fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00009b50  00000000  00000000  002ebb0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f0 	.word	0x200000f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801b35c 	.word	0x0801b35c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f4 	.word	0x200000f4
 80001dc:	0801b35c 	.word	0x0801b35c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_ldivmod>:
 8000bfc:	b97b      	cbnz	r3, 8000c1e <__aeabi_ldivmod+0x22>
 8000bfe:	b972      	cbnz	r2, 8000c1e <__aeabi_ldivmod+0x22>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bfbe      	ittt	lt
 8000c04:	2000      	movlt	r0, #0
 8000c06:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c0a:	e006      	blt.n	8000c1a <__aeabi_ldivmod+0x1e>
 8000c0c:	bf08      	it	eq
 8000c0e:	2800      	cmpeq	r0, #0
 8000c10:	bf1c      	itt	ne
 8000c12:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c16:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c1a:	f000 b9bb 	b.w	8000f94 <__aeabi_idiv0>
 8000c1e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c22:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c26:	2900      	cmp	r1, #0
 8000c28:	db09      	blt.n	8000c3e <__aeabi_ldivmod+0x42>
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db1a      	blt.n	8000c64 <__aeabi_ldivmod+0x68>
 8000c2e:	f000 f84d 	bl	8000ccc <__udivmoddi4>
 8000c32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3a:	b004      	add	sp, #16
 8000c3c:	4770      	bx	lr
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db1b      	blt.n	8000c80 <__aeabi_ldivmod+0x84>
 8000c48:	f000 f840 	bl	8000ccc <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4240      	negs	r0, r0
 8000c58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c5c:	4252      	negs	r2, r2
 8000c5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c62:	4770      	bx	lr
 8000c64:	4252      	negs	r2, r2
 8000c66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6a:	f000 f82f 	bl	8000ccc <__udivmoddi4>
 8000c6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c76:	b004      	add	sp, #16
 8000c78:	4240      	negs	r0, r0
 8000c7a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7e:	4770      	bx	lr
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	f000 f821 	bl	8000ccc <__udivmoddi4>
 8000c8a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c92:	b004      	add	sp, #16
 8000c94:	4252      	negs	r2, r2
 8000c96:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_uldivmod>:
 8000c9c:	b953      	cbnz	r3, 8000cb4 <__aeabi_uldivmod+0x18>
 8000c9e:	b94a      	cbnz	r2, 8000cb4 <__aeabi_uldivmod+0x18>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	2800      	cmpeq	r0, #0
 8000ca6:	bf1c      	itt	ne
 8000ca8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cb0:	f000 b970 	b.w	8000f94 <__aeabi_idiv0>
 8000cb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cbc:	f000 f806 	bl	8000ccc <__udivmoddi4>
 8000cc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc8:	b004      	add	sp, #16
 8000cca:	4770      	bx	lr

08000ccc <__udivmoddi4>:
 8000ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd0:	9e08      	ldr	r6, [sp, #32]
 8000cd2:	460d      	mov	r5, r1
 8000cd4:	4604      	mov	r4, r0
 8000cd6:	460f      	mov	r7, r1
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d14a      	bne.n	8000d72 <__udivmoddi4+0xa6>
 8000cdc:	428a      	cmp	r2, r1
 8000cde:	4694      	mov	ip, r2
 8000ce0:	d965      	bls.n	8000dae <__udivmoddi4+0xe2>
 8000ce2:	fab2 f382 	clz	r3, r2
 8000ce6:	b143      	cbz	r3, 8000cfa <__udivmoddi4+0x2e>
 8000ce8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cec:	f1c3 0220 	rsb	r2, r3, #32
 8000cf0:	409f      	lsls	r7, r3
 8000cf2:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf6:	4317      	orrs	r7, r2
 8000cf8:	409c      	lsls	r4, r3
 8000cfa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfe:	fa1f f58c 	uxth.w	r5, ip
 8000d02:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d06:	0c22      	lsrs	r2, r4, #16
 8000d08:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d0c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d10:	fb01 f005 	mul.w	r0, r1, r5
 8000d14:	4290      	cmp	r0, r2
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x62>
 8000d18:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d20:	f080 811c 	bcs.w	8000f5c <__udivmoddi4+0x290>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f240 8119 	bls.w	8000f5c <__udivmoddi4+0x290>
 8000d2a:	3902      	subs	r1, #2
 8000d2c:	4462      	add	r2, ip
 8000d2e:	1a12      	subs	r2, r2, r0
 8000d30:	b2a4      	uxth	r4, r4
 8000d32:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d36:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d3a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3e:	fb00 f505 	mul.w	r5, r0, r5
 8000d42:	42a5      	cmp	r5, r4
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x90>
 8000d46:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d4e:	f080 8107 	bcs.w	8000f60 <__udivmoddi4+0x294>
 8000d52:	42a5      	cmp	r5, r4
 8000d54:	f240 8104 	bls.w	8000f60 <__udivmoddi4+0x294>
 8000d58:	4464      	add	r4, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d60:	1b64      	subs	r4, r4, r5
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11e      	cbz	r6, 8000d6e <__udivmoddi4+0xa2>
 8000d66:	40dc      	lsrs	r4, r3
 8000d68:	2300      	movs	r3, #0
 8000d6a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0xbc>
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	f000 80ed 	beq.w	8000f56 <__udivmoddi4+0x28a>
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d82:	4608      	mov	r0, r1
 8000d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d88:	fab3 f183 	clz	r1, r3
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	d149      	bne.n	8000e24 <__udivmoddi4+0x158>
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	d302      	bcc.n	8000d9a <__udivmoddi4+0xce>
 8000d94:	4282      	cmp	r2, r0
 8000d96:	f200 80f8 	bhi.w	8000f8a <__udivmoddi4+0x2be>
 8000d9a:	1a84      	subs	r4, r0, r2
 8000d9c:	eb65 0203 	sbc.w	r2, r5, r3
 8000da0:	2001      	movs	r0, #1
 8000da2:	4617      	mov	r7, r2
 8000da4:	2e00      	cmp	r6, #0
 8000da6:	d0e2      	beq.n	8000d6e <__udivmoddi4+0xa2>
 8000da8:	e9c6 4700 	strd	r4, r7, [r6]
 8000dac:	e7df      	b.n	8000d6e <__udivmoddi4+0xa2>
 8000dae:	b902      	cbnz	r2, 8000db2 <__udivmoddi4+0xe6>
 8000db0:	deff      	udf	#255	; 0xff
 8000db2:	fab2 f382 	clz	r3, r2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x210>
 8000dbc:	1a8a      	subs	r2, r1, r2
 8000dbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc2:	fa1f fe8c 	uxth.w	lr, ip
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dcc:	fb07 2015 	mls	r0, r7, r5, r2
 8000dd0:	0c22      	lsrs	r2, r4, #16
 8000dd2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd6:	fb0e f005 	mul.w	r0, lr, r5
 8000dda:	4290      	cmp	r0, r2
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x124>
 8000dde:	eb1c 0202 	adds.w	r2, ip, r2
 8000de2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x122>
 8000de8:	4290      	cmp	r0, r2
 8000dea:	f200 80cb 	bhi.w	8000f84 <__udivmoddi4+0x2b8>
 8000dee:	4645      	mov	r5, r8
 8000df0:	1a12      	subs	r2, r2, r0
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dfc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e00:	fb0e fe00 	mul.w	lr, lr, r0
 8000e04:	45a6      	cmp	lr, r4
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x14e>
 8000e08:	eb1c 0404 	adds.w	r4, ip, r4
 8000e0c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e10:	d202      	bcs.n	8000e18 <__udivmoddi4+0x14c>
 8000e12:	45a6      	cmp	lr, r4
 8000e14:	f200 80bb 	bhi.w	8000f8e <__udivmoddi4+0x2c2>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	eba4 040e 	sub.w	r4, r4, lr
 8000e1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e22:	e79f      	b.n	8000d64 <__udivmoddi4+0x98>
 8000e24:	f1c1 0720 	rsb	r7, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e32:	fa05 f401 	lsl.w	r4, r5, r1
 8000e36:	fa20 f307 	lsr.w	r3, r0, r7
 8000e3a:	40fd      	lsrs	r5, r7
 8000e3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e40:	4323      	orrs	r3, r4
 8000e42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e46:	fa1f fe8c 	uxth.w	lr, ip
 8000e4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4e:	0c1c      	lsrs	r4, r3, #16
 8000e50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e54:	fb08 f50e 	mul.w	r5, r8, lr
 8000e58:	42a5      	cmp	r5, r4
 8000e5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000e62:	d90b      	bls.n	8000e7c <__udivmoddi4+0x1b0>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e6c:	f080 8088 	bcs.w	8000f80 <__udivmoddi4+0x2b4>
 8000e70:	42a5      	cmp	r5, r4
 8000e72:	f240 8085 	bls.w	8000f80 <__udivmoddi4+0x2b4>
 8000e76:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7a:	4464      	add	r4, ip
 8000e7c:	1b64      	subs	r4, r4, r5
 8000e7e:	b29d      	uxth	r5, r3
 8000e80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e84:	fb09 4413 	mls	r4, r9, r3, r4
 8000e88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e90:	45a6      	cmp	lr, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x1da>
 8000e94:	eb1c 0404 	adds.w	r4, ip, r4
 8000e98:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e9c:	d26c      	bcs.n	8000f78 <__udivmoddi4+0x2ac>
 8000e9e:	45a6      	cmp	lr, r4
 8000ea0:	d96a      	bls.n	8000f78 <__udivmoddi4+0x2ac>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	4464      	add	r4, ip
 8000ea6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eaa:	fba3 9502 	umull	r9, r5, r3, r2
 8000eae:	eba4 040e 	sub.w	r4, r4, lr
 8000eb2:	42ac      	cmp	r4, r5
 8000eb4:	46c8      	mov	r8, r9
 8000eb6:	46ae      	mov	lr, r5
 8000eb8:	d356      	bcc.n	8000f68 <__udivmoddi4+0x29c>
 8000eba:	d053      	beq.n	8000f64 <__udivmoddi4+0x298>
 8000ebc:	b156      	cbz	r6, 8000ed4 <__udivmoddi4+0x208>
 8000ebe:	ebb0 0208 	subs.w	r2, r0, r8
 8000ec2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec6:	fa04 f707 	lsl.w	r7, r4, r7
 8000eca:	40ca      	lsrs	r2, r1
 8000ecc:	40cc      	lsrs	r4, r1
 8000ece:	4317      	orrs	r7, r2
 8000ed0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000edc:	f1c3 0120 	rsb	r1, r3, #32
 8000ee0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee8:	fa25 f101 	lsr.w	r1, r5, r1
 8000eec:	409d      	lsls	r5, r3
 8000eee:	432a      	orrs	r2, r5
 8000ef0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef4:	fa1f fe8c 	uxth.w	lr, ip
 8000ef8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000efc:	fb07 1510 	mls	r5, r7, r0, r1
 8000f00:	0c11      	lsrs	r1, r2, #16
 8000f02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f06:	fb00 f50e 	mul.w	r5, r0, lr
 8000f0a:	428d      	cmp	r5, r1
 8000f0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x258>
 8000f12:	eb1c 0101 	adds.w	r1, ip, r1
 8000f16:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f1a:	d22f      	bcs.n	8000f7c <__udivmoddi4+0x2b0>
 8000f1c:	428d      	cmp	r5, r1
 8000f1e:	d92d      	bls.n	8000f7c <__udivmoddi4+0x2b0>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4461      	add	r1, ip
 8000f24:	1b49      	subs	r1, r1, r5
 8000f26:	b292      	uxth	r2, r2
 8000f28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000f30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f34:	fb05 f10e 	mul.w	r1, r5, lr
 8000f38:	4291      	cmp	r1, r2
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x282>
 8000f3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000f40:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f44:	d216      	bcs.n	8000f74 <__udivmoddi4+0x2a8>
 8000f46:	4291      	cmp	r1, r2
 8000f48:	d914      	bls.n	8000f74 <__udivmoddi4+0x2a8>
 8000f4a:	3d02      	subs	r5, #2
 8000f4c:	4462      	add	r2, ip
 8000f4e:	1a52      	subs	r2, r2, r1
 8000f50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f54:	e738      	b.n	8000dc8 <__udivmoddi4+0xfc>
 8000f56:	4631      	mov	r1, r6
 8000f58:	4630      	mov	r0, r6
 8000f5a:	e708      	b.n	8000d6e <__udivmoddi4+0xa2>
 8000f5c:	4639      	mov	r1, r7
 8000f5e:	e6e6      	b.n	8000d2e <__udivmoddi4+0x62>
 8000f60:	4610      	mov	r0, r2
 8000f62:	e6fb      	b.n	8000d5c <__udivmoddi4+0x90>
 8000f64:	4548      	cmp	r0, r9
 8000f66:	d2a9      	bcs.n	8000ebc <__udivmoddi4+0x1f0>
 8000f68:	ebb9 0802 	subs.w	r8, r9, r2
 8000f6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f70:	3b01      	subs	r3, #1
 8000f72:	e7a3      	b.n	8000ebc <__udivmoddi4+0x1f0>
 8000f74:	4645      	mov	r5, r8
 8000f76:	e7ea      	b.n	8000f4e <__udivmoddi4+0x282>
 8000f78:	462b      	mov	r3, r5
 8000f7a:	e794      	b.n	8000ea6 <__udivmoddi4+0x1da>
 8000f7c:	4640      	mov	r0, r8
 8000f7e:	e7d1      	b.n	8000f24 <__udivmoddi4+0x258>
 8000f80:	46d0      	mov	r8, sl
 8000f82:	e77b      	b.n	8000e7c <__udivmoddi4+0x1b0>
 8000f84:	3d02      	subs	r5, #2
 8000f86:	4462      	add	r2, ip
 8000f88:	e732      	b.n	8000df0 <__udivmoddi4+0x124>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e70a      	b.n	8000da4 <__udivmoddi4+0xd8>
 8000f8e:	4464      	add	r4, ip
 8000f90:	3802      	subs	r0, #2
 8000f92:	e742      	b.n	8000e1a <__udivmoddi4+0x14e>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <writeReg>:
uint8_t performSingleRefCalibration(uint8_t vhv_init_byte);
//---------------------------------------------------------
// I2C communication Functions
//---------------------------------------------------------
// Write an 8-bit register
void writeReg(uint8_t reg, uint8_t value) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	71bb      	strb	r3, [r7, #6]
	i2c1_WriteRegBuffer(g_i2cAddr,reg,&value,1);
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <writeReg+0x28>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b298      	uxth	r0, r3
 8000fae:	1dba      	adds	r2, r7, #6
 8000fb0:	79f9      	ldrb	r1, [r7, #7]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	f000 ff38 	bl	8001e28 <i2c1_WriteRegBuffer>
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000000 	.word	0x20000000

08000fc4 <writeReg16Bit>:

// Write a 16-bit register
void writeReg16Bit(uint8_t reg, uint16_t value){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	460a      	mov	r2, r1
 8000fce:	71fb      	strb	r3, [r7, #7]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	80bb      	strh	r3, [r7, #4]
	uint8_t tab[2];
	tab[0]= ((value >> 8));
 8000fd4:	88bb      	ldrh	r3, [r7, #4]
 8000fd6:	0a1b      	lsrs	r3, r3, #8
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	733b      	strb	r3, [r7, #12]
	tab[1] = ((value ) & 0xFF);
 8000fde:	88bb      	ldrh	r3, [r7, #4]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	737b      	strb	r3, [r7, #13]
	i2c1_WriteRegBuffer(g_i2cAddr,reg,tab,2);
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <writeReg16Bit+0x3c>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b298      	uxth	r0, r3
 8000fea:	f107 020c 	add.w	r2, r7, #12
 8000fee:	79f9      	ldrb	r1, [r7, #7]
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	f000 ff19 	bl	8001e28 <i2c1_WriteRegBuffer>
}
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000000 	.word	0x20000000

08001004 <readReg>:
		tab[0] = ((value ) & 0xFF);
		i2c1_WriteRegBuffer(g_i2cAddr,reg,tab,4);
}

// Read an 8-bit register
uint8_t readReg(uint8_t reg) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  	uint8_t value=0;
 800100e:	2300      	movs	r3, #0
 8001010:	73fb      	strb	r3, [r7, #15]
  	i2c1_WriteBuffer(g_i2cAddr, &reg, 1);
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <readReg+0x40>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b29b      	uxth	r3, r3
 8001018:	1df9      	adds	r1, r7, #7
 800101a:	2201      	movs	r2, #1
 800101c:	4618      	mov	r0, r3
 800101e:	f000 fecf 	bl	8001dc0 <i2c1_WriteBuffer>
	i2c1_ReadBuffer(g_i2cAddr|0x01, &value, 1);
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <readReg+0x40>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	b2db      	uxtb	r3, r3
 800102c:	b29b      	uxth	r3, r3
 800102e:	f107 010f 	add.w	r1, r7, #15
 8001032:	2201      	movs	r2, #1
 8001034:	4618      	mov	r0, r3
 8001036:	f000 fedd 	bl	8001df4 <i2c1_ReadBuffer>
  	return value;
 800103a:	7bfb      	ldrb	r3, [r7, #15]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000000 	.word	0x20000000

08001048 <readReg16Bit>:

// Read a 16-bit register
uint16_t readReg16Bit(uint8_t reg) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
	uint8_t tab[2];
	i2c1_WriteBuffer(g_i2cAddr, &reg, 1);
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <readReg16Bit+0x4c>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	b29b      	uxth	r3, r3
 8001058:	1df9      	adds	r1, r7, #7
 800105a:	2201      	movs	r2, #1
 800105c:	4618      	mov	r0, r3
 800105e:	f000 feaf 	bl	8001dc0 <i2c1_WriteBuffer>
	i2c1_ReadBuffer(g_i2cAddr|0x01, tab, 2);
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <readReg16Bit+0x4c>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	b2db      	uxtb	r3, r3
 800106c:	b29b      	uxth	r3, r3
 800106e:	f107 010c 	add.w	r1, r7, #12
 8001072:	2202      	movs	r2, #2
 8001074:	4618      	mov	r0, r3
 8001076:	f000 febd 	bl	8001df4 <i2c1_ReadBuffer>
  	uint16_t value= ((uint16_t)tab[0] << 8) | (uint16_t)tab[1];
 800107a:	7b3b      	ldrb	r3, [r7, #12]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	b21a      	sxth	r2, r3
 8001080:	7b7b      	ldrb	r3, [r7, #13]
 8001082:	b21b      	sxth	r3, r3
 8001084:	4313      	orrs	r3, r2
 8001086:	b21b      	sxth	r3, r3
 8001088:	81fb      	strh	r3, [r7, #14]
  	return value;
 800108a:	89fb      	ldrh	r3, [r7, #14]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000000 	.word	0x20000000

08001098 <initVL53L0X>:
// (VL53L0X_PerformRefSpadManagement()), since the API user manual says that it
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
uint8_t initVL53L0X( ){
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (IO_2V8)
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
    readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 800109c:	2089      	movs	r0, #137	; 0x89
 800109e:	f7ff ffb1 	bl	8001004 <readReg>
 80010a2:	4603      	mov	r3, r0
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	4619      	mov	r1, r3
 80010ac:	2089      	movs	r0, #137	; 0x89
 80010ae:	f7ff ff73 	bl	8000f98 <writeReg>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 80010b2:	2100      	movs	r1, #0
 80010b4:	2088      	movs	r0, #136	; 0x88
 80010b6:	f7ff ff6f 	bl	8000f98 <writeReg>

  writeReg(0x80, 0x01);
 80010ba:	2101      	movs	r1, #1
 80010bc:	2080      	movs	r0, #128	; 0x80
 80010be:	f7ff ff6b 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x01);
 80010c2:	2101      	movs	r1, #1
 80010c4:	20ff      	movs	r0, #255	; 0xff
 80010c6:	f7ff ff67 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x00);
 80010ca:	2100      	movs	r1, #0
 80010cc:	2000      	movs	r0, #0
 80010ce:	f7ff ff63 	bl	8000f98 <writeReg>
  g_stopVariable = readReg(0x91);
 80010d2:	2091      	movs	r0, #145	; 0x91
 80010d4:	f7ff ff96 	bl	8001004 <readReg>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	4bd5      	ldr	r3, [pc, #852]	; (8001434 <initVL53L0X+0x39c>)
 80010de:	701a      	strb	r2, [r3, #0]
  writeReg(0x00, 0x01);
 80010e0:	2101      	movs	r1, #1
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff ff58 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x00);
 80010e8:	2100      	movs	r1, #0
 80010ea:	20ff      	movs	r0, #255	; 0xff
 80010ec:	f7ff ff54 	bl	8000f98 <writeReg>
  writeReg(0x80, 0x00);
 80010f0:	2100      	movs	r1, #0
 80010f2:	2080      	movs	r0, #128	; 0x80
 80010f4:	f7ff ff50 	bl	8000f98 <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 80010f8:	2060      	movs	r0, #96	; 0x60
 80010fa:	f7ff ff83 	bl	8001004 <readReg>
 80010fe:	4603      	mov	r3, r0
 8001100:	f043 0312 	orr.w	r3, r3, #18
 8001104:	b2db      	uxtb	r3, r3
 8001106:	4619      	mov	r1, r3
 8001108:	2060      	movs	r0, #96	; 0x60
 800110a:	f7ff ff45 	bl	8000f98 <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 800110e:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8001112:	f000 f991 	bl	8001438 <setSignalRateLimit>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8001116:	21ff      	movs	r1, #255	; 0xff
 8001118:	2001      	movs	r0, #1
 800111a:	f7ff ff3d 	bl	8000f98 <writeReg>
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 800111e:	2101      	movs	r1, #1
 8001120:	20ff      	movs	r0, #255	; 0xff
 8001122:	f7ff ff39 	bl	8000f98 <writeReg>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8001126:	2100      	movs	r1, #0
 8001128:	204f      	movs	r0, #79	; 0x4f
 800112a:	f7ff ff35 	bl	8000f98 <writeReg>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 800112e:	212c      	movs	r1, #44	; 0x2c
 8001130:	204e      	movs	r0, #78	; 0x4e
 8001132:	f7ff ff31 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x00);
 8001136:	2100      	movs	r1, #0
 8001138:	20ff      	movs	r0, #255	; 0xff
 800113a:	f7ff ff2d 	bl	8000f98 <writeReg>
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 800113e:	21b4      	movs	r1, #180	; 0xb4
 8001140:	20b6      	movs	r0, #182	; 0xb6
 8001142:	f7ff ff29 	bl	8000f98 <writeReg>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 8001146:	2101      	movs	r1, #1
 8001148:	20ff      	movs	r0, #255	; 0xff
 800114a:	f7ff ff25 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x00);
 800114e:	2100      	movs	r1, #0
 8001150:	2000      	movs	r0, #0
 8001152:	f7ff ff21 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 8001156:	2100      	movs	r1, #0
 8001158:	20ff      	movs	r0, #255	; 0xff
 800115a:	f7ff ff1d 	bl	8000f98 <writeReg>
  writeReg(0x09, 0x00);
 800115e:	2100      	movs	r1, #0
 8001160:	2009      	movs	r0, #9
 8001162:	f7ff ff19 	bl	8000f98 <writeReg>
  writeReg(0x10, 0x00);
 8001166:	2100      	movs	r1, #0
 8001168:	2010      	movs	r0, #16
 800116a:	f7ff ff15 	bl	8000f98 <writeReg>
  writeReg(0x11, 0x00);
 800116e:	2100      	movs	r1, #0
 8001170:	2011      	movs	r0, #17
 8001172:	f7ff ff11 	bl	8000f98 <writeReg>

  writeReg(0x24, 0x01);
 8001176:	2101      	movs	r1, #1
 8001178:	2024      	movs	r0, #36	; 0x24
 800117a:	f7ff ff0d 	bl	8000f98 <writeReg>
  writeReg(0x25, 0xFF);
 800117e:	21ff      	movs	r1, #255	; 0xff
 8001180:	2025      	movs	r0, #37	; 0x25
 8001182:	f7ff ff09 	bl	8000f98 <writeReg>
  writeReg(0x75, 0x00);
 8001186:	2100      	movs	r1, #0
 8001188:	2075      	movs	r0, #117	; 0x75
 800118a:	f7ff ff05 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 800118e:	2101      	movs	r1, #1
 8001190:	20ff      	movs	r0, #255	; 0xff
 8001192:	f7ff ff01 	bl	8000f98 <writeReg>
  writeReg(0x4E, 0x2C);
 8001196:	212c      	movs	r1, #44	; 0x2c
 8001198:	204e      	movs	r0, #78	; 0x4e
 800119a:	f7ff fefd 	bl	8000f98 <writeReg>
  writeReg(0x48, 0x00);
 800119e:	2100      	movs	r1, #0
 80011a0:	2048      	movs	r0, #72	; 0x48
 80011a2:	f7ff fef9 	bl	8000f98 <writeReg>
  writeReg(0x30, 0x20);
 80011a6:	2120      	movs	r1, #32
 80011a8:	2030      	movs	r0, #48	; 0x30
 80011aa:	f7ff fef5 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 80011ae:	2100      	movs	r1, #0
 80011b0:	20ff      	movs	r0, #255	; 0xff
 80011b2:	f7ff fef1 	bl	8000f98 <writeReg>
  writeReg(0x30, 0x09);
 80011b6:	2109      	movs	r1, #9
 80011b8:	2030      	movs	r0, #48	; 0x30
 80011ba:	f7ff feed 	bl	8000f98 <writeReg>
  writeReg(0x54, 0x00);
 80011be:	2100      	movs	r1, #0
 80011c0:	2054      	movs	r0, #84	; 0x54
 80011c2:	f7ff fee9 	bl	8000f98 <writeReg>
  writeReg(0x31, 0x04);
 80011c6:	2104      	movs	r1, #4
 80011c8:	2031      	movs	r0, #49	; 0x31
 80011ca:	f7ff fee5 	bl	8000f98 <writeReg>
  writeReg(0x32, 0x03);
 80011ce:	2103      	movs	r1, #3
 80011d0:	2032      	movs	r0, #50	; 0x32
 80011d2:	f7ff fee1 	bl	8000f98 <writeReg>
  writeReg(0x40, 0x83);
 80011d6:	2183      	movs	r1, #131	; 0x83
 80011d8:	2040      	movs	r0, #64	; 0x40
 80011da:	f7ff fedd 	bl	8000f98 <writeReg>
  writeReg(0x46, 0x25);
 80011de:	2125      	movs	r1, #37	; 0x25
 80011e0:	2046      	movs	r0, #70	; 0x46
 80011e2:	f7ff fed9 	bl	8000f98 <writeReg>
  writeReg(0x60, 0x00);
 80011e6:	2100      	movs	r1, #0
 80011e8:	2060      	movs	r0, #96	; 0x60
 80011ea:	f7ff fed5 	bl	8000f98 <writeReg>
  writeReg(0x27, 0x00);
 80011ee:	2100      	movs	r1, #0
 80011f0:	2027      	movs	r0, #39	; 0x27
 80011f2:	f7ff fed1 	bl	8000f98 <writeReg>
  writeReg(0x50, 0x06);
 80011f6:	2106      	movs	r1, #6
 80011f8:	2050      	movs	r0, #80	; 0x50
 80011fa:	f7ff fecd 	bl	8000f98 <writeReg>
  writeReg(0x51, 0x00);
 80011fe:	2100      	movs	r1, #0
 8001200:	2051      	movs	r0, #81	; 0x51
 8001202:	f7ff fec9 	bl	8000f98 <writeReg>
  writeReg(0x52, 0x96);
 8001206:	2196      	movs	r1, #150	; 0x96
 8001208:	2052      	movs	r0, #82	; 0x52
 800120a:	f7ff fec5 	bl	8000f98 <writeReg>
  writeReg(0x56, 0x08);
 800120e:	2108      	movs	r1, #8
 8001210:	2056      	movs	r0, #86	; 0x56
 8001212:	f7ff fec1 	bl	8000f98 <writeReg>
  writeReg(0x57, 0x30);
 8001216:	2130      	movs	r1, #48	; 0x30
 8001218:	2057      	movs	r0, #87	; 0x57
 800121a:	f7ff febd 	bl	8000f98 <writeReg>
  writeReg(0x61, 0x00);
 800121e:	2100      	movs	r1, #0
 8001220:	2061      	movs	r0, #97	; 0x61
 8001222:	f7ff feb9 	bl	8000f98 <writeReg>
  writeReg(0x62, 0x00);
 8001226:	2100      	movs	r1, #0
 8001228:	2062      	movs	r0, #98	; 0x62
 800122a:	f7ff feb5 	bl	8000f98 <writeReg>
  writeReg(0x64, 0x00);
 800122e:	2100      	movs	r1, #0
 8001230:	2064      	movs	r0, #100	; 0x64
 8001232:	f7ff feb1 	bl	8000f98 <writeReg>
  writeReg(0x65, 0x00);
 8001236:	2100      	movs	r1, #0
 8001238:	2065      	movs	r0, #101	; 0x65
 800123a:	f7ff fead 	bl	8000f98 <writeReg>
  writeReg(0x66, 0xA0);
 800123e:	21a0      	movs	r1, #160	; 0xa0
 8001240:	2066      	movs	r0, #102	; 0x66
 8001242:	f7ff fea9 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 8001246:	2101      	movs	r1, #1
 8001248:	20ff      	movs	r0, #255	; 0xff
 800124a:	f7ff fea5 	bl	8000f98 <writeReg>
  writeReg(0x22, 0x32);
 800124e:	2132      	movs	r1, #50	; 0x32
 8001250:	2022      	movs	r0, #34	; 0x22
 8001252:	f7ff fea1 	bl	8000f98 <writeReg>
  writeReg(0x47, 0x14);
 8001256:	2114      	movs	r1, #20
 8001258:	2047      	movs	r0, #71	; 0x47
 800125a:	f7ff fe9d 	bl	8000f98 <writeReg>
  writeReg(0x49, 0xFF);
 800125e:	21ff      	movs	r1, #255	; 0xff
 8001260:	2049      	movs	r0, #73	; 0x49
 8001262:	f7ff fe99 	bl	8000f98 <writeReg>
  writeReg(0x4A, 0x00);
 8001266:	2100      	movs	r1, #0
 8001268:	204a      	movs	r0, #74	; 0x4a
 800126a:	f7ff fe95 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 800126e:	2100      	movs	r1, #0
 8001270:	20ff      	movs	r0, #255	; 0xff
 8001272:	f7ff fe91 	bl	8000f98 <writeReg>
  writeReg(0x7A, 0x0A);
 8001276:	210a      	movs	r1, #10
 8001278:	207a      	movs	r0, #122	; 0x7a
 800127a:	f7ff fe8d 	bl	8000f98 <writeReg>
  writeReg(0x7B, 0x00);
 800127e:	2100      	movs	r1, #0
 8001280:	207b      	movs	r0, #123	; 0x7b
 8001282:	f7ff fe89 	bl	8000f98 <writeReg>
  writeReg(0x78, 0x21);
 8001286:	2121      	movs	r1, #33	; 0x21
 8001288:	2078      	movs	r0, #120	; 0x78
 800128a:	f7ff fe85 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 800128e:	2101      	movs	r1, #1
 8001290:	20ff      	movs	r0, #255	; 0xff
 8001292:	f7ff fe81 	bl	8000f98 <writeReg>
  writeReg(0x23, 0x34);
 8001296:	2134      	movs	r1, #52	; 0x34
 8001298:	2023      	movs	r0, #35	; 0x23
 800129a:	f7ff fe7d 	bl	8000f98 <writeReg>
  writeReg(0x42, 0x00);
 800129e:	2100      	movs	r1, #0
 80012a0:	2042      	movs	r0, #66	; 0x42
 80012a2:	f7ff fe79 	bl	8000f98 <writeReg>
  writeReg(0x44, 0xFF);
 80012a6:	21ff      	movs	r1, #255	; 0xff
 80012a8:	2044      	movs	r0, #68	; 0x44
 80012aa:	f7ff fe75 	bl	8000f98 <writeReg>
  writeReg(0x45, 0x26);
 80012ae:	2126      	movs	r1, #38	; 0x26
 80012b0:	2045      	movs	r0, #69	; 0x45
 80012b2:	f7ff fe71 	bl	8000f98 <writeReg>
  writeReg(0x46, 0x05);
 80012b6:	2105      	movs	r1, #5
 80012b8:	2046      	movs	r0, #70	; 0x46
 80012ba:	f7ff fe6d 	bl	8000f98 <writeReg>
  writeReg(0x40, 0x40);
 80012be:	2140      	movs	r1, #64	; 0x40
 80012c0:	2040      	movs	r0, #64	; 0x40
 80012c2:	f7ff fe69 	bl	8000f98 <writeReg>
  writeReg(0x0E, 0x06);
 80012c6:	2106      	movs	r1, #6
 80012c8:	200e      	movs	r0, #14
 80012ca:	f7ff fe65 	bl	8000f98 <writeReg>
  writeReg(0x20, 0x1A);
 80012ce:	211a      	movs	r1, #26
 80012d0:	2020      	movs	r0, #32
 80012d2:	f7ff fe61 	bl	8000f98 <writeReg>
  writeReg(0x43, 0x40);
 80012d6:	2140      	movs	r1, #64	; 0x40
 80012d8:	2043      	movs	r0, #67	; 0x43
 80012da:	f7ff fe5d 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 80012de:	2100      	movs	r1, #0
 80012e0:	20ff      	movs	r0, #255	; 0xff
 80012e2:	f7ff fe59 	bl	8000f98 <writeReg>
  writeReg(0x34, 0x03);
 80012e6:	2103      	movs	r1, #3
 80012e8:	2034      	movs	r0, #52	; 0x34
 80012ea:	f7ff fe55 	bl	8000f98 <writeReg>
  writeReg(0x35, 0x44);
 80012ee:	2144      	movs	r1, #68	; 0x44
 80012f0:	2035      	movs	r0, #53	; 0x35
 80012f2:	f7ff fe51 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 80012f6:	2101      	movs	r1, #1
 80012f8:	20ff      	movs	r0, #255	; 0xff
 80012fa:	f7ff fe4d 	bl	8000f98 <writeReg>
  writeReg(0x31, 0x04);
 80012fe:	2104      	movs	r1, #4
 8001300:	2031      	movs	r0, #49	; 0x31
 8001302:	f7ff fe49 	bl	8000f98 <writeReg>
  writeReg(0x4B, 0x09);
 8001306:	2109      	movs	r1, #9
 8001308:	204b      	movs	r0, #75	; 0x4b
 800130a:	f7ff fe45 	bl	8000f98 <writeReg>
  writeReg(0x4C, 0x05);
 800130e:	2105      	movs	r1, #5
 8001310:	204c      	movs	r0, #76	; 0x4c
 8001312:	f7ff fe41 	bl	8000f98 <writeReg>
  writeReg(0x4D, 0x04);
 8001316:	2104      	movs	r1, #4
 8001318:	204d      	movs	r0, #77	; 0x4d
 800131a:	f7ff fe3d 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 800131e:	2100      	movs	r1, #0
 8001320:	20ff      	movs	r0, #255	; 0xff
 8001322:	f7ff fe39 	bl	8000f98 <writeReg>
  writeReg(0x44, 0x00);
 8001326:	2100      	movs	r1, #0
 8001328:	2044      	movs	r0, #68	; 0x44
 800132a:	f7ff fe35 	bl	8000f98 <writeReg>
  writeReg(0x45, 0x20);
 800132e:	2120      	movs	r1, #32
 8001330:	2045      	movs	r0, #69	; 0x45
 8001332:	f7ff fe31 	bl	8000f98 <writeReg>
  writeReg(0x47, 0x08);
 8001336:	2108      	movs	r1, #8
 8001338:	2047      	movs	r0, #71	; 0x47
 800133a:	f7ff fe2d 	bl	8000f98 <writeReg>
  writeReg(0x48, 0x28);
 800133e:	2128      	movs	r1, #40	; 0x28
 8001340:	2048      	movs	r0, #72	; 0x48
 8001342:	f7ff fe29 	bl	8000f98 <writeReg>
  writeReg(0x67, 0x00);
 8001346:	2100      	movs	r1, #0
 8001348:	2067      	movs	r0, #103	; 0x67
 800134a:	f7ff fe25 	bl	8000f98 <writeReg>
  writeReg(0x70, 0x04);
 800134e:	2104      	movs	r1, #4
 8001350:	2070      	movs	r0, #112	; 0x70
 8001352:	f7ff fe21 	bl	8000f98 <writeReg>
  writeReg(0x71, 0x01);
 8001356:	2101      	movs	r1, #1
 8001358:	2071      	movs	r0, #113	; 0x71
 800135a:	f7ff fe1d 	bl	8000f98 <writeReg>
  writeReg(0x72, 0xFE);
 800135e:	21fe      	movs	r1, #254	; 0xfe
 8001360:	2072      	movs	r0, #114	; 0x72
 8001362:	f7ff fe19 	bl	8000f98 <writeReg>
  writeReg(0x76, 0x00);
 8001366:	2100      	movs	r1, #0
 8001368:	2076      	movs	r0, #118	; 0x76
 800136a:	f7ff fe15 	bl	8000f98 <writeReg>
  writeReg(0x77, 0x00);
 800136e:	2100      	movs	r1, #0
 8001370:	2077      	movs	r0, #119	; 0x77
 8001372:	f7ff fe11 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 8001376:	2101      	movs	r1, #1
 8001378:	20ff      	movs	r0, #255	; 0xff
 800137a:	f7ff fe0d 	bl	8000f98 <writeReg>
  writeReg(0x0D, 0x01);
 800137e:	2101      	movs	r1, #1
 8001380:	200d      	movs	r0, #13
 8001382:	f7ff fe09 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 8001386:	2100      	movs	r1, #0
 8001388:	20ff      	movs	r0, #255	; 0xff
 800138a:	f7ff fe05 	bl	8000f98 <writeReg>
  writeReg(0x80, 0x01);
 800138e:	2101      	movs	r1, #1
 8001390:	2080      	movs	r0, #128	; 0x80
 8001392:	f7ff fe01 	bl	8000f98 <writeReg>
  writeReg(0x01, 0xF8);
 8001396:	21f8      	movs	r1, #248	; 0xf8
 8001398:	2001      	movs	r0, #1
 800139a:	f7ff fdfd 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 800139e:	2101      	movs	r1, #1
 80013a0:	20ff      	movs	r0, #255	; 0xff
 80013a2:	f7ff fdf9 	bl	8000f98 <writeReg>
  writeReg(0x8E, 0x01);
 80013a6:	2101      	movs	r1, #1
 80013a8:	208e      	movs	r0, #142	; 0x8e
 80013aa:	f7ff fdf5 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x01);
 80013ae:	2101      	movs	r1, #1
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff fdf1 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x00);
 80013b6:	2100      	movs	r1, #0
 80013b8:	20ff      	movs	r0, #255	; 0xff
 80013ba:	f7ff fded 	bl	8000f98 <writeReg>
  writeReg(0x80, 0x00);
 80013be:	2100      	movs	r1, #0
 80013c0:	2080      	movs	r0, #128	; 0x80
 80013c2:	f7ff fde9 	bl	8000f98 <writeReg>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80013c6:	2104      	movs	r1, #4
 80013c8:	200a      	movs	r0, #10
 80013ca:	f7ff fde5 	bl	8000f98 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80013ce:	2084      	movs	r0, #132	; 0x84
 80013d0:	f7ff fe18 	bl	8001004 <readReg>
 80013d4:	4603      	mov	r3, r0
 80013d6:	f023 0310 	bic.w	r3, r3, #16
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	4619      	mov	r1, r3
 80013de:	2084      	movs	r0, #132	; 0x84
 80013e0:	f7ff fdda 	bl	8000f98 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80013e4:	2101      	movs	r1, #1
 80013e6:	200b      	movs	r0, #11
 80013e8:	f7ff fdd6 	bl	8000f98 <writeReg>
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80013ec:	21e8      	movs	r1, #232	; 0xe8
 80013ee:	2001      	movs	r0, #1
 80013f0:	f7ff fdd2 	bl	8000f98 <writeReg>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 80013f4:	2101      	movs	r1, #1
 80013f6:	2001      	movs	r0, #1
 80013f8:	f7ff fdce 	bl	8000f98 <writeReg>
  if (performSingleRefCalibration(0x40)) { return 1; }
 80013fc:	2040      	movs	r0, #64	; 0x40
 80013fe:	f000 f883 	bl	8001508 <performSingleRefCalibration>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <initVL53L0X+0x374>
 8001408:	2301      	movs	r3, #1
 800140a:	e010      	b.n	800142e <initVL53L0X+0x396>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 800140c:	2102      	movs	r1, #2
 800140e:	2001      	movs	r0, #1
 8001410:	f7ff fdc2 	bl	8000f98 <writeReg>
  if (performSingleRefCalibration(0x00)) { return 1; }
 8001414:	2000      	movs	r0, #0
 8001416:	f000 f877 	bl	8001508 <performSingleRefCalibration>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <initVL53L0X+0x38c>
 8001420:	2301      	movs	r3, #1
 8001422:	e004      	b.n	800142e <initVL53L0X+0x396>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8001424:	21e8      	movs	r1, #232	; 0xe8
 8001426:	2001      	movs	r0, #1
 8001428:	f7ff fdb6 	bl	8000f98 <writeReg>

  // VL53L0X_PerformRefCalibration() end

  return 0;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2000010c 	.word	0x2000010c

08001438 <setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
uint8_t setSignalRateLimit(float limit_Mcps)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	ed87 0a01 	vstr	s0, [r7, #4]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 8001442:	edd7 7a01 	vldr	s15, [r7, #4]
 8001446:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800144a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144e:	d40a      	bmi.n	8001466 <setSignalRateLimit+0x2e>
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff f891 	bl	8000578 <__aeabi_f2d>
 8001456:	a311      	add	r3, pc, #68	; (adr r3, 800149c <setSignalRateLimit+0x64>)
 8001458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145c:	f7ff fb74 	bl	8000b48 <__aeabi_dcmpgt>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <setSignalRateLimit+0x32>
 8001466:	2300      	movs	r3, #0
 8001468:	e00f      	b.n	800148a <setSignalRateLimit+0x52>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 800146a:	edd7 7a01 	vldr	s15, [r7, #4]
 800146e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001498 <setSignalRateLimit+0x60>
 8001472:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800147a:	ee17 3a90 	vmov	r3, s15
 800147e:	b29b      	uxth	r3, r3
 8001480:	4619      	mov	r1, r3
 8001482:	2044      	movs	r0, #68	; 0x44
 8001484:	f7ff fd9e 	bl	8000fc4 <writeReg16Bit>
  return 0;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	f3af 8000 	nop.w
 8001498:	43000000 	.word	0x43000000
 800149c:	0a3d70a4 	.word	0x0a3d70a4
 80014a0:	407fffd7 	.word	0x407fffd7

080014a4 <readRangeSingleMillimeters>:

// Performs a single-shot range measurement and returns the reading in
// millimeters
// based on VL53L0X_PerformSingleRangingMeasurement()
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t readRangeSingleMillimeters( /*statInfo_t *extraStats */) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
  writeReg(0x80, 0x01);
 80014aa:	2101      	movs	r1, #1
 80014ac:	2080      	movs	r0, #128	; 0x80
 80014ae:	f7ff fd73 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x01);
 80014b2:	2101      	movs	r1, #1
 80014b4:	20ff      	movs	r0, #255	; 0xff
 80014b6:	f7ff fd6f 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x00);
 80014ba:	2100      	movs	r1, #0
 80014bc:	2000      	movs	r0, #0
 80014be:	f7ff fd6b 	bl	8000f98 <writeReg>
  writeReg(0x91, g_stopVariable);
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <readRangeSingleMillimeters+0x60>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	4619      	mov	r1, r3
 80014c8:	2091      	movs	r0, #145	; 0x91
 80014ca:	f7ff fd65 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x01);
 80014ce:	2101      	movs	r1, #1
 80014d0:	2000      	movs	r0, #0
 80014d2:	f7ff fd61 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x00);
 80014d6:	2100      	movs	r1, #0
 80014d8:	20ff      	movs	r0, #255	; 0xff
 80014da:	f7ff fd5d 	bl	8000f98 <writeReg>
  writeReg(0x80, 0x00);
 80014de:	2100      	movs	r1, #0
 80014e0:	2080      	movs	r0, #128	; 0x80
 80014e2:	f7ff fd59 	bl	8000f98 <writeReg>
  writeReg(SYSRANGE_START, 0x01);
 80014e6:	2101      	movs	r1, #1
 80014e8:	2000      	movs	r0, #0
 80014ea:	f7ff fd55 	bl	8000f98 <writeReg>
	  while (readReg(SYSRANGE_START) & 0x01){};
	  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0){};
  }
  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  temp = readReg16Bit(RESULT_RANGE_STATUS + 10);
 80014ee:	201e      	movs	r0, #30
 80014f0:	f7ff fdaa 	bl	8001048 <readReg16Bit>
 80014f4:	4603      	mov	r3, r0
 80014f6:	80fb      	strh	r3, [r7, #6]
  temp+=0;

  return temp;
 80014f8:	88fb      	ldrh	r3, [r7, #6]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000010c 	.word	0x2000010c

08001508 <performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
uint8_t performSingleRefCalibration(uint8_t vhv_init_byte)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	b2db      	uxtb	r3, r3
 800151a:	4619      	mov	r1, r3
 800151c:	2000      	movs	r0, #0
 800151e:	f7ff fd3b 	bl	8000f98 <writeReg>

  if (ACTIVE_WHILE)
	  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0){};

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001522:	2101      	movs	r1, #1
 8001524:	200b      	movs	r0, #11
 8001526:	f7ff fd37 	bl	8000f98 <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 800152a:	2100      	movs	r1, #0
 800152c:	2000      	movs	r0, #0
 800152e:	f7ff fd33 	bl	8000f98 <writeReg>

  return 0;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <captDistIR_Init>:
//=================================================================
//			ADC INIT FOR IR SENSOR SHARP GP2D12
//=================================================================

void  captDistIR_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	adcHandle.Instance		= ADC1;
 8001540:	4b15      	ldr	r3, [pc, #84]	; (8001598 <captDistIR_Init+0x5c>)
 8001542:	4a16      	ldr	r2, [pc, #88]	; (800159c <captDistIR_Init+0x60>)
 8001544:	601a      	str	r2, [r3, #0]

	adcHandle.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV2;
 8001546:	4b14      	ldr	r3, [pc, #80]	; (8001598 <captDistIR_Init+0x5c>)
 8001548:	2200      	movs	r2, #0
 800154a:	605a      	str	r2, [r3, #4]
	adcHandle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <captDistIR_Init+0x5c>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
	adcHandle.Init.Resolution = ADC_RESOLUTION12b;
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <captDistIR_Init+0x5c>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
	// Don't do continuous conversions - do them on demand
	adcHandle.Init.ContinuousConvMode    = DISABLE;  // Continuous mode disabled to have only 1 conversion at each conversion trig
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <captDistIR_Init+0x5c>)
 800155a:	2200      	movs	r2, #0
 800155c:	619a      	str	r2, [r3, #24]
	// Disable the scan conversion so we do one at a time */
	adcHandle.Init.ScanConvMode = DISABLE;
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <captDistIR_Init+0x5c>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
	//Say how many channels would be used by the sequencer
	adcHandle.Init.NbrOfConversion = 2;
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <captDistIR_Init+0x5c>)
 8001566:	2202      	movs	r2, #2
 8001568:	621a      	str	r2, [r3, #32]
	adcHandle.Init.DiscontinuousConvMode = DISABLE;  // Parameter discarded because sequencer is disabled
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <captDistIR_Init+0x5c>)
 800156c:	2200      	movs	r2, #0
 800156e:	625a      	str	r2, [r3, #36]	; 0x24
	adcHandle.Init.NbrOfDiscConversion = 2;
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <captDistIR_Init+0x5c>)
 8001572:	2202      	movs	r2, #2
 8001574:	629a      	str	r2, [r3, #40]	; 0x28
	adcHandle.Init.ExternalTrigConvEdge =  ADC_EXTERNALTRIGCONVEDGE_NONE ;
 8001576:	4b08      	ldr	r3, [pc, #32]	; (8001598 <captDistIR_Init+0x5c>)
 8001578:	2200      	movs	r2, #0
 800157a:	62da      	str	r2, [r3, #44]	; 0x2c
	//Start conversion by software, not an external trigger
	adcHandle.Init.ExternalTrigConv = 0;
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <captDistIR_Init+0x5c>)
 800157e:	2200      	movs	r2, #0
 8001580:	631a      	str	r2, [r3, #48]	; 0x30
	adcHandle.Init.DMAContinuousRequests = DISABLE;
 8001582:	4b05      	ldr	r3, [pc, #20]	; (8001598 <captDistIR_Init+0x5c>)
 8001584:	2200      	movs	r2, #0
 8001586:	61da      	str	r2, [r3, #28]
	adcHandle.Init.EOCSelection = DISABLE;
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <captDistIR_Init+0x5c>)
 800158a:	2200      	movs	r2, #0
 800158c:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&adcHandle);
 800158e:	4802      	ldr	r0, [pc, #8]	; (8001598 <captDistIR_Init+0x5c>)
 8001590:	f003 fbf0 	bl	8004d74 <HAL_ADC_Init>
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000110 	.word	0x20000110
 800159c:	40012000 	.word	0x40012000

080015a0 <captDistIR_Get>:
//=================================================================
//			IR GET (POLL METHOD)
//=================================================================

int  captDistIR_Get(int* tab)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	sConfig.Channel      = ADC_CHANNEL_4;
 80015a8:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <captDistIR_Get+0x80>)
 80015aa:	2204      	movs	r2, #4
 80015ac:	601a      	str	r2, [r3, #0]
	sConfig.Rank         = 1;
 80015ae:	4b1c      	ldr	r3, [pc, #112]	; (8001620 <captDistIR_Get+0x80>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80015b4:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <captDistIR_Get+0x80>)
 80015b6:	2203      	movs	r2, #3
 80015b8:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 80015ba:	4919      	ldr	r1, [pc, #100]	; (8001620 <captDistIR_Get+0x80>)
 80015bc:	4819      	ldr	r0, [pc, #100]	; (8001624 <captDistIR_Get+0x84>)
 80015be:	f003 fcc5 	bl	8004f4c <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&adcHandle);					//Start the conversion
 80015c2:	4818      	ldr	r0, [pc, #96]	; (8001624 <captDistIR_Get+0x84>)
 80015c4:	f003 fc0a 	bl	8004ddc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&adcHandle,10);	//Processing the conversion
 80015c8:	210a      	movs	r1, #10
 80015ca:	4816      	ldr	r0, [pc, #88]	; (8001624 <captDistIR_Get+0x84>)
 80015cc:	f003 fc72 	bl	8004eb4 <HAL_ADC_PollForConversion>
	tab[0]=HAL_ADC_GetValue(&adcHandle); 		//Return the converted data
 80015d0:	4814      	ldr	r0, [pc, #80]	; (8001624 <captDistIR_Get+0x84>)
 80015d2:	f003 fcae 	bl	8004f32 <HAL_ADC_GetValue>
 80015d6:	4603      	mov	r3, r0
 80015d8:	461a      	mov	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	601a      	str	r2, [r3, #0]

	sConfig.Channel      = ADC_CHANNEL_8;
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <captDistIR_Get+0x80>)
 80015e0:	2208      	movs	r2, #8
 80015e2:	601a      	str	r2, [r3, #0]
	sConfig.Rank         = 1;
 80015e4:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <captDistIR_Get+0x80>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <captDistIR_Get+0x80>)
 80015ec:	2203      	movs	r2, #3
 80015ee:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 80015f0:	490b      	ldr	r1, [pc, #44]	; (8001620 <captDistIR_Get+0x80>)
 80015f2:	480c      	ldr	r0, [pc, #48]	; (8001624 <captDistIR_Get+0x84>)
 80015f4:	f003 fcaa 	bl	8004f4c <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&adcHandle);						//Start the conversion
 80015f8:	480a      	ldr	r0, [pc, #40]	; (8001624 <captDistIR_Get+0x84>)
 80015fa:	f003 fbef 	bl	8004ddc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&adcHandle,10);		//Processing the conversion
 80015fe:	210a      	movs	r1, #10
 8001600:	4808      	ldr	r0, [pc, #32]	; (8001624 <captDistIR_Get+0x84>)
 8001602:	f003 fc57 	bl	8004eb4 <HAL_ADC_PollForConversion>
	tab[1]=HAL_ADC_GetValue(&adcHandle); 			//Return the converted data
 8001606:	4807      	ldr	r0, [pc, #28]	; (8001624 <captDistIR_Get+0x84>)
 8001608:	f003 fc93 	bl	8004f32 <HAL_ADC_GetValue>
 800160c:	4602      	mov	r2, r0
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3304      	adds	r3, #4
 8001612:	601a      	str	r2, [r3, #0]

	return 0;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000154 	.word	0x20000154
 8001624:	20000110 	.word	0x20000110

08001628 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001634:	f00b fb70 	bl	800cd18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001638:	4b58      	ldr	r3, [pc, #352]	; (800179c <pvPortMallocMicroROS+0x174>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001640:	f000 f98c 	bl	800195c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001644:	4b56      	ldr	r3, [pc, #344]	; (80017a0 <pvPortMallocMicroROS+0x178>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4013      	ands	r3, r2
 800164c:	2b00      	cmp	r3, #0
 800164e:	f040 808e 	bne.w	800176e <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d01d      	beq.n	8001694 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8001658:	2208      	movs	r2, #8
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	2b00      	cmp	r3, #0
 8001668:	d014      	beq.n	8001694 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f023 0307 	bic.w	r3, r3, #7
 8001670:	3308      	adds	r3, #8
 8001672:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00a      	beq.n	8001694 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800167e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001682:	f383 8811 	msr	BASEPRI, r3
 8001686:	f3bf 8f6f 	isb	sy
 800168a:	f3bf 8f4f 	dsb	sy
 800168e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001690:	bf00      	nop
 8001692:	e7fe      	b.n	8001692 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d069      	beq.n	800176e <pvPortMallocMicroROS+0x146>
 800169a:	4b42      	ldr	r3, [pc, #264]	; (80017a4 <pvPortMallocMicroROS+0x17c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d864      	bhi.n	800176e <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80016a4:	4b40      	ldr	r3, [pc, #256]	; (80017a8 <pvPortMallocMicroROS+0x180>)
 80016a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80016a8:	4b3f      	ldr	r3, [pc, #252]	; (80017a8 <pvPortMallocMicroROS+0x180>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80016ae:	e004      	b.n	80016ba <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d903      	bls.n	80016cc <pvPortMallocMicroROS+0xa4>
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1f1      	bne.n	80016b0 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80016cc:	4b33      	ldr	r3, [pc, #204]	; (800179c <pvPortMallocMicroROS+0x174>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d04b      	beq.n	800176e <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80016d6:	6a3b      	ldr	r3, [r7, #32]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2208      	movs	r2, #8
 80016dc:	4413      	add	r3, r2
 80016de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	6a3b      	ldr	r3, [r7, #32]
 80016e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	1ad2      	subs	r2, r2, r3
 80016f0:	2308      	movs	r3, #8
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d91f      	bls.n	8001738 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80016f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00a      	beq.n	8001720 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 800170a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800170e:	f383 8811 	msr	BASEPRI, r3
 8001712:	f3bf 8f6f 	isb	sy
 8001716:	f3bf 8f4f 	dsb	sy
 800171a:	613b      	str	r3, [r7, #16]
}
 800171c:	bf00      	nop
 800171e:	e7fe      	b.n	800171e <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	1ad2      	subs	r2, r2, r3
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001732:	69b8      	ldr	r0, [r7, #24]
 8001734:	f000 f974 	bl	8001a20 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001738:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <pvPortMallocMicroROS+0x17c>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	4a18      	ldr	r2, [pc, #96]	; (80017a4 <pvPortMallocMicroROS+0x17c>)
 8001744:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <pvPortMallocMicroROS+0x17c>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <pvPortMallocMicroROS+0x184>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	429a      	cmp	r2, r3
 8001750:	d203      	bcs.n	800175a <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001752:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <pvPortMallocMicroROS+0x17c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a15      	ldr	r2, [pc, #84]	; (80017ac <pvPortMallocMicroROS+0x184>)
 8001758:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <pvPortMallocMicroROS+0x178>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	431a      	orrs	r2, r3
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800176e:	f00b fae1 	bl	800cd34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	f003 0307 	and.w	r3, r3, #7
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00a      	beq.n	8001792 <pvPortMallocMicroROS+0x16a>
	__asm volatile
 800177c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001780:	f383 8811 	msr	BASEPRI, r3
 8001784:	f3bf 8f6f 	isb	sy
 8001788:	f3bf 8f4f 	dsb	sy
 800178c:	60fb      	str	r3, [r7, #12]
}
 800178e:	bf00      	nop
 8001790:	e7fe      	b.n	8001790 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 8001792:	69fb      	ldr	r3, [r7, #28]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3728      	adds	r7, #40	; 0x28
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	2000416c 	.word	0x2000416c
 80017a0:	20004178 	.word	0x20004178
 80017a4:	20004170 	.word	0x20004170
 80017a8:	20004164 	.word	0x20004164
 80017ac:	20004174 	.word	0x20004174

080017b0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d048      	beq.n	8001854 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80017c2:	2308      	movs	r3, #8
 80017c4:	425b      	negs	r3, r3
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	4413      	add	r3, r2
 80017ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	4b21      	ldr	r3, [pc, #132]	; (800185c <vPortFreeMicroROS+0xac>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4013      	ands	r3, r2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10a      	bne.n	80017f4 <vPortFreeMicroROS+0x44>
	__asm volatile
 80017de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017e2:	f383 8811 	msr	BASEPRI, r3
 80017e6:	f3bf 8f6f 	isb	sy
 80017ea:	f3bf 8f4f 	dsb	sy
 80017ee:	60fb      	str	r3, [r7, #12]
}
 80017f0:	bf00      	nop
 80017f2:	e7fe      	b.n	80017f2 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00a      	beq.n	8001812 <vPortFreeMicroROS+0x62>
	__asm volatile
 80017fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001800:	f383 8811 	msr	BASEPRI, r3
 8001804:	f3bf 8f6f 	isb	sy
 8001808:	f3bf 8f4f 	dsb	sy
 800180c:	60bb      	str	r3, [r7, #8]
}
 800180e:	bf00      	nop
 8001810:	e7fe      	b.n	8001810 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <vPortFreeMicroROS+0xac>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4013      	ands	r3, r2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d019      	beq.n	8001854 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d115      	bne.n	8001854 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <vPortFreeMicroROS+0xac>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	43db      	mvns	r3, r3
 8001832:	401a      	ands	r2, r3
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001838:	f00b fa6e 	bl	800cd18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	4b07      	ldr	r3, [pc, #28]	; (8001860 <vPortFreeMicroROS+0xb0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4413      	add	r3, r2
 8001846:	4a06      	ldr	r2, [pc, #24]	; (8001860 <vPortFreeMicroROS+0xb0>)
 8001848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800184a:	6938      	ldr	r0, [r7, #16]
 800184c:	f000 f8e8 	bl	8001a20 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001850:	f00b fa70 	bl	800cd34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001854:	bf00      	nop
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20004178 	.word	0x20004178
 8001860:	20004170 	.word	0x20004170

08001864 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001864:	b480      	push	{r7}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001870:	2308      	movs	r3, #8
 8001872:	425b      	negs	r3, r3
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	4413      	add	r3, r2
 8001878:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <getBlockSize+0x38>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	43db      	mvns	r3, r3
 8001888:	4013      	ands	r3, r2
 800188a:	60fb      	str	r3, [r7, #12]

	return count;
 800188c:	68fb      	ldr	r3, [r7, #12]
}
 800188e:	4618      	mov	r0, r3
 8001890:	371c      	adds	r7, #28
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	20004178 	.word	0x20004178

080018a0 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80018aa:	f00b fa35 	bl	800cd18 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80018ae:	6838      	ldr	r0, [r7, #0]
 80018b0:	f7ff feba 	bl	8001628 <pvPortMallocMicroROS>
 80018b4:	6138      	str	r0, [r7, #16]

	uint8_t *puc = ( uint8_t * ) pv;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	60fb      	str	r3, [r7, #12]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80018ba:	2308      	movs	r3, #8
 80018bc:	425b      	negs	r3, r3
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	4413      	add	r3, r2
 80018c2:	60fb      	str	r3, [r7, #12]
	pxLink = ( void * ) puc;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	60bb      	str	r3, [r7, #8]


	char *in_src = (char*)pv;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	61fb      	str	r3, [r7, #28]
  	char *in_dest = (char*)newmem;
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	61bb      	str	r3, [r7, #24]
	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <pvPortReallocMicroROS+0x70>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	43db      	mvns	r3, r3
 80018da:	4013      	ands	r3, r2
 80018dc:	617b      	str	r3, [r7, #20]

  	while(count--)
 80018de:	e007      	b.n	80018f0 <pvPortReallocMicroROS+0x50>
    	*in_dest++ = *in_src++;
 80018e0:	69fa      	ldr	r2, [r7, #28]
 80018e2:	1c53      	adds	r3, r2, #1
 80018e4:	61fb      	str	r3, [r7, #28]
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	1c59      	adds	r1, r3, #1
 80018ea:	61b9      	str	r1, [r7, #24]
 80018ec:	7812      	ldrb	r2, [r2, #0]
 80018ee:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	1e5a      	subs	r2, r3, #1
 80018f4:	617a      	str	r2, [r7, #20]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f2      	bne.n	80018e0 <pvPortReallocMicroROS+0x40>

	vPortFreeMicroROS(pv);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ff58 	bl	80017b0 <vPortFreeMicroROS>

	( void ) xTaskResumeAll();
 8001900:	f00b fa18 	bl	800cd34 <xTaskResumeAll>

	return newmem;
 8001904:	693b      	ldr	r3, [r7, #16]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3720      	adds	r7, #32
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20004178 	.word	0x20004178

08001914 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800191e:	f00b f9fb 	bl	800cd18 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	fb02 f303 	mul.w	r3, r2, r3
 800192a:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800192c:	6978      	ldr	r0, [r7, #20]
 800192e:	f7ff fe7b 	bl	8001628 <pvPortMallocMicroROS>
 8001932:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001938:	e004      	b.n	8001944 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	613a      	str	r2, [r7, #16]
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	1e5a      	subs	r2, r3, #1
 8001948:	617a      	str	r2, [r7, #20]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f5      	bne.n	800193a <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 800194e:	f00b f9f1 	bl	800cd34 <xTaskResumeAll>
  	return mem;
 8001952:	68fb      	ldr	r3, [r7, #12]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001962:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001966:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001968:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <prvHeapInit+0xac>)
 800196a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00c      	beq.n	8001990 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	3307      	adds	r3, #7
 800197a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f023 0307 	bic.w	r3, r3, #7
 8001982:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	4a1f      	ldr	r2, [pc, #124]	; (8001a08 <prvHeapInit+0xac>)
 800198c:	4413      	add	r3, r2
 800198e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001994:	4a1d      	ldr	r2, [pc, #116]	; (8001a0c <prvHeapInit+0xb0>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800199a:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <prvHeapInit+0xb0>)
 800199c:	2200      	movs	r2, #0
 800199e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	4413      	add	r3, r2
 80019a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80019a8:	2208      	movs	r2, #8
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	1a9b      	subs	r3, r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f023 0307 	bic.w	r3, r3, #7
 80019b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4a15      	ldr	r2, [pc, #84]	; (8001a10 <prvHeapInit+0xb4>)
 80019bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80019be:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <prvHeapInit+0xb4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2200      	movs	r2, #0
 80019c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80019c6:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <prvHeapInit+0xb4>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	1ad2      	subs	r2, r2, r3
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <prvHeapInit+0xb4>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <prvHeapInit+0xb8>)
 80019ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	4a09      	ldr	r2, [pc, #36]	; (8001a18 <prvHeapInit+0xbc>)
 80019f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <prvHeapInit+0xc0>)
 80019f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019fa:	601a      	str	r2, [r3, #0]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	20000164 	.word	0x20000164
 8001a0c:	20004164 	.word	0x20004164
 8001a10:	2000416c 	.word	0x2000416c
 8001a14:	20004174 	.word	0x20004174
 8001a18:	20004170 	.word	0x20004170
 8001a1c:	20004178 	.word	0x20004178

08001a20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001a28:	4b28      	ldr	r3, [pc, #160]	; (8001acc <prvInsertBlockIntoFreeList+0xac>)
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	e002      	b.n	8001a34 <prvInsertBlockIntoFreeList+0x14>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d8f7      	bhi.n	8001a2e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	4413      	add	r3, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d108      	bne.n	8001a62 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	441a      	add	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	441a      	add	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d118      	bne.n	8001aa8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <prvInsertBlockIntoFreeList+0xb0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d00d      	beq.n	8001a9e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	441a      	add	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	e008      	b.n	8001ab0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <prvInsertBlockIntoFreeList+0xb0>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	e003      	b.n	8001ab0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d002      	beq.n	8001abe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	20004164 	.word	0x20004164
 8001ad0:	2000416c 	.word	0x2000416c

08001ad4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001ae2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ae8:	4904      	ldr	r1, [pc, #16]	; (8001afc <cubemx_transport_open+0x28>)
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f008 fcac 	bl	800a448 <HAL_UART_Receive_DMA>
    return true;
 8001af0:	2301      	movs	r3, #1
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	2000417c 	.word	0x2000417c

08001b00 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001b0e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f008 fcc9 	bl	800a4a8 <HAL_UART_DMAStop>
    return true;
 8001b16:	2301      	movs	r3, #1
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
 8001b2c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001b34:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b20      	cmp	r3, #32
 8001b40:	d11c      	bne.n	8001b7c <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	461a      	mov	r2, r3
 8001b48:	68b9      	ldr	r1, [r7, #8]
 8001b4a:	6978      	ldr	r0, [r7, #20]
 8001b4c:	f008 fbfe 	bl	800a34c <HAL_UART_Transmit_DMA>
 8001b50:	4603      	mov	r3, r0
 8001b52:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001b54:	e002      	b.n	8001b5c <cubemx_transport_write+0x3c>
            osDelay(1);
 8001b56:	2001      	movs	r0, #1
 8001b58:	f009 ff16 	bl	800b988 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001b5c:	7cfb      	ldrb	r3, [r7, #19]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d105      	bne.n	8001b6e <cubemx_transport_write+0x4e>
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b20      	cmp	r3, #32
 8001b6c:	d1f3      	bne.n	8001b56 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001b6e:	7cfb      	ldrb	r3, [r7, #19]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <cubemx_transport_write+0x58>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	e002      	b.n	8001b7e <cubemx_transport_write+0x5e>
 8001b78:	2300      	movs	r3, #0
 8001b7a:	e000      	b.n	8001b7e <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001b7c:	2300      	movs	r3, #0
    }
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
 8001b94:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001b9c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba2:	b672      	cpsid	i
}
 8001ba4:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001bb2:	4a1c      	ldr	r2, [pc, #112]	; (8001c24 <cubemx_transport_read+0x9c>)
 8001bb4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001bb6:	b662      	cpsie	i
}
 8001bb8:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f009 fee1 	bl	800b988 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001bc6:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <cubemx_transport_read+0xa0>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <cubemx_transport_read+0x9c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d103      	bne.n	8001bda <cubemx_transport_read+0x52>
 8001bd2:	69fa      	ldr	r2, [r7, #28]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	dbe3      	blt.n	8001ba2 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001bde:	e011      	b.n	8001c04 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <cubemx_transport_read+0xa0>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	68b9      	ldr	r1, [r7, #8]
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	440b      	add	r3, r1
 8001bea:	4910      	ldr	r1, [pc, #64]	; (8001c2c <cubemx_transport_read+0xa4>)
 8001bec:	5c8a      	ldrb	r2, [r1, r2]
 8001bee:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <cubemx_transport_read+0xa0>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bfa:	4a0b      	ldr	r2, [pc, #44]	; (8001c28 <cubemx_transport_read+0xa0>)
 8001bfc:	6013      	str	r3, [r2, #0]
        wrote++;
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	3301      	adds	r3, #1
 8001c02:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <cubemx_transport_read+0xa0>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <cubemx_transport_read+0x9c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d003      	beq.n	8001c18 <cubemx_transport_read+0x90>
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d3e3      	bcc.n	8001be0 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001c18:	69bb      	ldr	r3, [r7, #24]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3720      	adds	r7, #32
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20004980 	.word	0x20004980
 8001c28:	2000497c 	.word	0x2000497c
 8001c2c:	2000417c 	.word	0x2000417c

08001c30 <MX_GPIO_Init>:
#include "main.h"
#include "drv_gpio.h"

void MX_GPIO_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	; 0x28
 8001c34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	609a      	str	r2, [r3, #8]
 8001c42:	60da      	str	r2, [r3, #12]
 8001c44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <MX_GPIO_Init+0xd0>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a2c      	ldr	r2, [pc, #176]	; (8001d00 <MX_GPIO_Init+0xd0>)
 8001c50:	f043 0304 	orr.w	r3, r3, #4
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <MX_GPIO_Init+0xd0>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <MX_GPIO_Init+0xd0>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4a25      	ldr	r2, [pc, #148]	; (8001d00 <MX_GPIO_Init+0xd0>)
 8001c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
 8001c72:	4b23      	ldr	r3, [pc, #140]	; (8001d00 <MX_GPIO_Init+0xd0>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	4b1f      	ldr	r3, [pc, #124]	; (8001d00 <MX_GPIO_Init+0xd0>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	4a1e      	ldr	r2, [pc, #120]	; (8001d00 <MX_GPIO_Init+0xd0>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <MX_GPIO_Init+0xd0>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <MX_GPIO_Init+0xd0>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a17      	ldr	r2, [pc, #92]	; (8001d00 <MX_GPIO_Init+0xd0>)
 8001ca4:	f043 0302 	orr.w	r3, r3, #2
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <MX_GPIO_Init+0xd0>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2120      	movs	r1, #32
 8001cba:	4812      	ldr	r0, [pc, #72]	; (8001d04 <MX_GPIO_Init+0xd4>)
 8001cbc:	f004 f9a0 	bl	8006000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cc6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	480c      	ldr	r0, [pc, #48]	; (8001d08 <MX_GPIO_Init+0xd8>)
 8001cd8:	f004 f80e 	bl	8005cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001cdc:	2320      	movs	r3, #32
 8001cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4804      	ldr	r0, [pc, #16]	; (8001d04 <MX_GPIO_Init+0xd4>)
 8001cf4:	f004 f800 	bl	8005cf8 <HAL_GPIO_Init>

}
 8001cf8:	bf00      	nop
 8001cfa:	3728      	adds	r7, #40	; 0x28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40020000 	.word	0x40020000
 8001d08:	40020800 	.word	0x40020800

08001d0c <HAL_GPIO_EXTI_Callback>:

extern void quadEncoder_CallbackIndexL(void);
extern void quadEncoder_CallbackIndexR(void);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d1c:	d017      	beq.n	8001d4e <HAL_GPIO_EXTI_Callback+0x42>
 8001d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d22:	dc16      	bgt.n	8001d52 <HAL_GPIO_EXTI_Callback+0x46>
 8001d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d28:	d00e      	beq.n	8001d48 <HAL_GPIO_EXTI_Callback+0x3c>
 8001d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d2e:	dc10      	bgt.n	8001d52 <HAL_GPIO_EXTI_Callback+0x46>
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d010      	beq.n	8001d56 <HAL_GPIO_EXTI_Callback+0x4a>
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	dc0c      	bgt.n	8001d52 <HAL_GPIO_EXTI_Callback+0x46>
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d002      	beq.n	8001d42 <HAL_GPIO_EXTI_Callback+0x36>
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d00c      	beq.n	8001d5a <HAL_GPIO_EXTI_Callback+0x4e>
					break;

	case GPIO_PIN_13 :		// USER BUTTON
					break;

	default : 		break;
 8001d40:	e007      	b.n	8001d52 <HAL_GPIO_EXTI_Callback+0x46>
		quadEncoder_CallbackIndexR();
 8001d42:	f001 ffc1 	bl	8003cc8 <quadEncoder_CallbackIndexR>
					break;
 8001d46:	e009      	b.n	8001d5c <HAL_GPIO_EXTI_Callback+0x50>
		quadEncoder_CallbackIndexL();
 8001d48:	f001 ff98 	bl	8003c7c <quadEncoder_CallbackIndexL>
					break;
 8001d4c:	e006      	b.n	8001d5c <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8001d4e:	bf00      	nop
 8001d50:	e004      	b.n	8001d5c <HAL_GPIO_EXTI_Callback+0x50>
	default : 		break;
 8001d52:	bf00      	nop
 8001d54:	e002      	b.n	8001d5c <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8001d56:	bf00      	nop
 8001d58:	e000      	b.n	8001d5c <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8001d5a:	bf00      	nop


	}
}
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <MX_I2C1_Init>:


I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d6a:	4a13      	ldr	r2, [pc, #76]	; (8001db8 <MX_I2C1_Init+0x54>)
 8001d6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d70:	4a12      	ldr	r2, [pc, #72]	; (8001dbc <MX_I2C1_Init+0x58>)
 8001d72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d74:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d94:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001da0:	4804      	ldr	r0, [pc, #16]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001da2:	f004 f95f 	bl	8006064 <HAL_I2C_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001dac:	f001 fbe2 	bl	8003574 <Error_Handler>
  }

}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20004984 	.word	0x20004984
 8001db8:	40005400 	.word	0x40005400
 8001dbc:	000186a0 	.word	0x000186a0

08001dc0 <i2c1_WriteBuffer>:

//======================================================================
// Transmit n_data bytes to i2c slave
//======================================================================
int i2c1_WriteBuffer(uint16_t addrSlave, uint8_t *data, int n_data)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af02      	add	r7, sp, #8
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
 8001dcc:	81fb      	strh	r3, [r7, #14]
	int status;
	status = HAL_I2C_Master_Transmit(&hi2c1, addrSlave, data, n_data , 100);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	89f9      	ldrh	r1, [r7, #14]
 8001dd4:	2264      	movs	r2, #100	; 0x64
 8001dd6:	9200      	str	r2, [sp, #0]
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	4805      	ldr	r0, [pc, #20]	; (8001df0 <i2c1_WriteBuffer+0x30>)
 8001ddc:	f004 fa86 	bl	80062ec <HAL_I2C_Master_Transmit>
 8001de0:	4603      	mov	r3, r0
 8001de2:	617b      	str	r3, [r7, #20]
	return status;
 8001de4:	697b      	ldr	r3, [r7, #20]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20004984 	.word	0x20004984

08001df4 <i2c1_ReadBuffer>:
//======================================================================
// Receive n_data bytes from i2c slave
//======================================================================
int i2c1_ReadBuffer(uint16_t addrSlave, uint8_t *data, int n_data)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af02      	add	r7, sp, #8
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
 8001e00:	81fb      	strh	r3, [r7, #14]
	int status;
	status = HAL_I2C_Master_Receive(&hi2c1, addrSlave, data, n_data , 100);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	89f9      	ldrh	r1, [r7, #14]
 8001e08:	2264      	movs	r2, #100	; 0x64
 8001e0a:	9200      	str	r2, [sp, #0]
 8001e0c:	68ba      	ldr	r2, [r7, #8]
 8001e0e:	4805      	ldr	r0, [pc, #20]	; (8001e24 <i2c1_ReadBuffer+0x30>)
 8001e10:	f004 fb6a 	bl	80064e8 <HAL_I2C_Master_Receive>
 8001e14:	4603      	mov	r3, r0
 8001e16:	617b      	str	r3, [r7, #20]
	return status;
 8001e18:	697b      	ldr	r3, [r7, #20]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20004984 	.word	0x20004984

08001e28 <i2c1_WriteRegBuffer>:

//======================================================================
// Write n_data bytes - have to be written at regAddr - to i2c slave
//======================================================================
int i2c1_WriteRegBuffer(uint16_t addrSlave, uint8_t  regAddr,  uint8_t *data, int n_data)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08c      	sub	sp, #48	; 0x30
 8001e2c:	af02      	add	r7, sp, #8
 8001e2e:	60ba      	str	r2, [r7, #8]
 8001e30:	607b      	str	r3, [r7, #4]
 8001e32:	4603      	mov	r3, r0
 8001e34:	81fb      	strh	r3, [r7, #14]
 8001e36:	460b      	mov	r3, r1
 8001e38:	737b      	strb	r3, [r7, #13]
    int status;
    uint8_t RegAddr[0x10];
    RegAddr[0]=regAddr;
 8001e3a:	7b7b      	ldrb	r3, [r7, #13]
 8001e3c:	753b      	strb	r3, [r7, #20]
    memcpy(RegAddr+1, data, n_data);
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	3301      	adds	r3, #1
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	68b9      	ldr	r1, [r7, #8]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f018 fc3c 	bl	801a6c6 <memcpy>
   status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, RegAddr, n_data+1, 100);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	3301      	adds	r3, #1
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	f107 0214 	add.w	r2, r7, #20
 8001e5a:	89f9      	ldrh	r1, [r7, #14]
 8001e5c:	2064      	movs	r0, #100	; 0x64
 8001e5e:	9000      	str	r0, [sp, #0]
 8001e60:	4804      	ldr	r0, [pc, #16]	; (8001e74 <i2c1_WriteRegBuffer+0x4c>)
 8001e62:	f004 fa43 	bl	80062ec <HAL_I2C_Master_Transmit>
 8001e66:	4603      	mov	r3, r0
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
     return status;
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3728      	adds	r7, #40	; 0x28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20004984 	.word	0x20004984

08001e78 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;


void MX_USART1_UART_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e7e:	4a12      	ldr	r2, [pc, #72]	; (8001ec8 <MX_USART1_UART_Init+0x50>)
 8001e80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e9c:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eae:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001eb0:	f008 f8cb 	bl	800a04a <HAL_UART_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001eba:	f001 fb5b 	bl	8003574 <Error_Handler>
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200049d8 	.word	0x200049d8
 8001ec8:	40011000 	.word	0x40011000

08001ecc <MX_USART2_UART_Init>:


void MX_USART2_UART_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ed2:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <MX_USART2_UART_Init+0x50>)
 8001ed4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ed8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001edc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eea:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ef0:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f02:	4805      	ldr	r0, [pc, #20]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001f04:	f008 f8a1 	bl	800a04a <HAL_UART_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f0e:	f001 fb31 	bl	8003574 <Error_Handler>
  }
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20004a1c 	.word	0x20004a1c
 8001f1c:	40004400 	.word	0x40004400

08001f20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	607b      	str	r3, [r7, #4]
 8001f2a:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <MX_DMA_Init+0x88>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a1e      	ldr	r2, [pc, #120]	; (8001fa8 <MX_DMA_Init+0x88>)
 8001f30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <MX_DMA_Init+0x88>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3e:	607b      	str	r3, [r7, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	603b      	str	r3, [r7, #0]
 8001f46:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <MX_DMA_Init+0x88>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a17      	ldr	r2, [pc, #92]	; (8001fa8 <MX_DMA_Init+0x88>)
 8001f4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <MX_DMA_Init+0x88>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f5a:	603b      	str	r3, [r7, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2105      	movs	r1, #5
 8001f62:	2010      	movs	r0, #16
 8001f64:	f003 fa8e 	bl	8005484 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001f68:	2010      	movs	r0, #16
 8001f6a:	f003 faa7 	bl	80054bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2105      	movs	r1, #5
 8001f72:	2011      	movs	r0, #17
 8001f74:	f003 fa86 	bl	8005484 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001f78:	2011      	movs	r0, #17
 8001f7a:	f003 fa9f 	bl	80054bc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2105      	movs	r1, #5
 8001f82:	203a      	movs	r0, #58	; 0x3a
 8001f84:	f003 fa7e 	bl	8005484 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001f88:	203a      	movs	r0, #58	; 0x3a
 8001f8a:	f003 fa97 	bl	80054bc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2105      	movs	r1, #5
 8001f92:	2046      	movs	r0, #70	; 0x46
 8001f94:	f003 fa76 	bl	8005484 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001f98:	2046      	movs	r0, #70	; 0x46
 8001f9a:	f003 fa8f 	bl	80054bc <HAL_NVIC_EnableIRQ>

}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800

08001fac <i2c_send_byteS>:
{
	i2c1_WriteBuffer(LCD_ADDRESS, &dta, 1);
}
//=================================================================
void i2c_send_byteS(unsigned char *dta, unsigned char len)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	70fb      	strb	r3, [r7, #3]
	i2c1_WriteBuffer(LCD_ADDRESS, dta, len);
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	207c      	movs	r0, #124	; 0x7c
 8001fc0:	f7ff fefe 	bl	8001dc0 <i2c1_WriteBuffer>
}
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <groveLCD_begin>:
//=================================================================
void groveLCD_begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	71bb      	strb	r3, [r7, #6]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	717b      	strb	r3, [r7, #5]
    if (lines > 1) {
 8001fde:	79bb      	ldrb	r3, [r7, #6]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d906      	bls.n	8001ff2 <groveLCD_begin+0x26>
        _displayfunction |= LCD_2LINE;
 8001fe4:	4b33      	ldr	r3, [pc, #204]	; (80020b4 <groveLCD_begin+0xe8>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	f043 0308 	orr.w	r3, r3, #8
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4b31      	ldr	r3, [pc, #196]	; (80020b4 <groveLCD_begin+0xe8>)
 8001ff0:	701a      	strb	r2, [r3, #0]
    }
    _numlines = lines;
 8001ff2:	4a31      	ldr	r2, [pc, #196]	; (80020b8 <groveLCD_begin+0xec>)
 8001ff4:	79bb      	ldrb	r3, [r7, #6]
 8001ff6:	7013      	strb	r3, [r2, #0]
    _currline = 0;
 8001ff8:	4b30      	ldr	r3, [pc, #192]	; (80020bc <groveLCD_begin+0xf0>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]

    // for some 1 line displays you can select a 10 pixel high font
    if ((dotsize != 0) && (lines == 1)) {
 8001ffe:	797b      	ldrb	r3, [r7, #5]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d009      	beq.n	8002018 <groveLCD_begin+0x4c>
 8002004:	79bb      	ldrb	r3, [r7, #6]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d106      	bne.n	8002018 <groveLCD_begin+0x4c>
        _displayfunction |= LCD_5x10DOTS;
 800200a:	4b2a      	ldr	r3, [pc, #168]	; (80020b4 <groveLCD_begin+0xe8>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	f043 0304 	orr.w	r3, r3, #4
 8002012:	b2da      	uxtb	r2, r3
 8002014:	4b27      	ldr	r3, [pc, #156]	; (80020b4 <groveLCD_begin+0xe8>)
 8002016:	701a      	strb	r2, [r3, #0]
    }

    // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
    // according to datasheet, we need at least 40ms after power rises above 2.7V
    // before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
    HAL_Delay(50);
 8002018:	2032      	movs	r0, #50	; 0x32
 800201a:	f002 fe87 	bl	8004d2c <HAL_Delay>

    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 800201e:	4b25      	ldr	r3, [pc, #148]	; (80020b4 <groveLCD_begin+0xe8>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	f043 0320 	orr.w	r3, r3, #32
 8002026:	b2db      	uxtb	r3, r3
 8002028:	4618      	mov	r0, r3
 800202a:	f000 f89b 	bl	8002164 <groveLCD_command>
    HAL_Delay(5);  // wait more than 4.1ms
 800202e:	2005      	movs	r0, #5
 8002030:	f002 fe7c 	bl	8004d2c <HAL_Delay>

    // second try
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8002034:	4b1f      	ldr	r3, [pc, #124]	; (80020b4 <groveLCD_begin+0xe8>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	f043 0320 	orr.w	r3, r3, #32
 800203c:	b2db      	uxtb	r3, r3
 800203e:	4618      	mov	r0, r3
 8002040:	f000 f890 	bl	8002164 <groveLCD_command>
    HAL_Delay(5);
 8002044:	2005      	movs	r0, #5
 8002046:	f002 fe71 	bl	8004d2c <HAL_Delay>

    // third go
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 800204a:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <groveLCD_begin+0xe8>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	f043 0320 	orr.w	r3, r3, #32
 8002052:	b2db      	uxtb	r3, r3
 8002054:	4618      	mov	r0, r3
 8002056:	f000 f885 	bl	8002164 <groveLCD_command>


    // finally, set # lines, font size, etc.
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 800205a:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <groveLCD_begin+0xe8>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	f043 0320 	orr.w	r3, r3, #32
 8002062:	b2db      	uxtb	r3, r3
 8002064:	4618      	mov	r0, r3
 8002066:	f000 f87d 	bl	8002164 <groveLCD_command>

    // turn the display on with no cursor or blinking default
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <groveLCD_begin+0xf4>)
 800206c:	2204      	movs	r2, #4
 800206e:	701a      	strb	r2, [r3, #0]
    groveLCD_display();
 8002070:	f000 f862 	bl	8002138 <groveLCD_display>

    // clear it off
    groveLCD_clear();
 8002074:	f000 f831 	bl	80020da <groveLCD_clear>

    // Initialize to default text direction (for romance languages)
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <groveLCD_begin+0xf8>)
 800207a:	2202      	movs	r2, #2
 800207c:	701a      	strb	r2, [r3, #0]
    // set the entry mode
    groveLCD_command(LCD_ENTRYMODESET | _displaymode);
 800207e:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <groveLCD_begin+0xf8>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	f043 0304 	orr.w	r3, r3, #4
 8002086:	b2db      	uxtb	r3, r3
 8002088:	4618      	mov	r0, r3
 800208a:	f000 f86b 	bl	8002164 <groveLCD_command>


    // backlight init
    groveLCD_setReg(REG_MODE1, 0);
 800208e:	2100      	movs	r1, #0
 8002090:	2000      	movs	r0, #0
 8002092:	f000 f8a4 	bl	80021de <groveLCD_setReg>
    // set LEDs controllable by both PWM and GRPPWM registers
    groveLCD_setReg(REG_OUTPUT, 0xFF);
 8002096:	21ff      	movs	r1, #255	; 0xff
 8002098:	2008      	movs	r0, #8
 800209a:	f000 f8a0 	bl	80021de <groveLCD_setReg>
    // set MODE2 values
    // 0010 0000 -> 0x20  (DMBLNK to 1, ie blinky mode)
    groveLCD_setReg(REG_MODE2, 0x20);
 800209e:	2120      	movs	r1, #32
 80020a0:	2001      	movs	r0, #1
 80020a2:	f000 f89c 	bl	80021de <groveLCD_setReg>

    groveLCD_setColorWhite();
 80020a6:	f000 f80f 	bl	80020c8 <groveLCD_setColorWhite>

}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20004be0 	.word	0x20004be0
 80020b8:	20004be3 	.word	0x20004be3
 80020bc:	20004be4 	.word	0x20004be4
 80020c0:	20004be1 	.word	0x20004be1
 80020c4:	20004be2 	.word	0x20004be2

080020c8 <groveLCD_setColorWhite>:
//=================================================================
void groveLCD_setColorAll(){groveLCD_setRGB(0, 0, 0);}
void groveLCD_setColorWhite(){groveLCD_setRGB(255, 255, 255);}
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	22ff      	movs	r2, #255	; 0xff
 80020ce:	21ff      	movs	r1, #255	; 0xff
 80020d0:	20ff      	movs	r0, #255	; 0xff
 80020d2:	f000 f896 	bl	8002202 <groveLCD_setRGB>
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}

080020da <groveLCD_clear>:
//=================================================================

/********** high level commands, for the user! */
void groveLCD_clear()
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	af00      	add	r7, sp, #0
	groveLCD_command(LCD_CLEARDISPLAY);        // clear display, set cursor position to zero
 80020de:	2001      	movs	r0, #1
 80020e0:	f000 f840 	bl	8002164 <groveLCD_command>
    HAL_Delay(2000);          // this command takes a long time!
 80020e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80020e8:	f002 fe20 	bl	8004d2c <HAL_Delay>
}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <groveLCD_setCursor>:
	groveLCD_command(LCD_RETURNHOME);        // set cursor position to zero
    HAL_Delay(2000);        // this command takes a long time!
}
//=================================================================
void groveLCD_setCursor(uint8_t col, uint8_t row)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	460a      	mov	r2, r1
 80020fa:	71fb      	strb	r3, [r7, #7]
 80020fc:	4613      	mov	r3, r2
 80020fe:	71bb      	strb	r3, [r7, #6]
    col = (row == 0 ? col|0x80 : col|0xc0);
 8002100:	79bb      	ldrb	r3, [r7, #6]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d104      	bne.n	8002110 <groveLCD_setCursor+0x20>
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800210c:	b2db      	uxtb	r3, r3
 800210e:	e003      	b.n	8002118 <groveLCD_setCursor+0x28>
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002116:	b2db      	uxtb	r3, r3
 8002118:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, col};
 800211a:	2380      	movs	r3, #128	; 0x80
 800211c:	733b      	strb	r3, [r7, #12]
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 8002122:	f107 030c 	add.w	r3, r7, #12
 8002126:	2102      	movs	r1, #2
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff3f 	bl	8001fac <i2c_send_byteS>
}
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <groveLCD_display>:
{
    _displaycontrol &= ~LCD_DISPLAYON;
    groveLCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
}
//=================================================================
void groveLCD_display() {
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
    _displaycontrol |= LCD_DISPLAYON;
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <groveLCD_display+0x28>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	f043 0304 	orr.w	r3, r3, #4
 8002144:	b2da      	uxtb	r2, r3
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <groveLCD_display+0x28>)
 8002148:	701a      	strb	r2, [r3, #0]
    groveLCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
 800214a:	4b05      	ldr	r3, [pc, #20]	; (8002160 <groveLCD_display+0x28>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	f043 0308 	orr.w	r3, r3, #8
 8002152:	b2db      	uxtb	r3, r3
 8002154:	4618      	mov	r0, r3
 8002156:	f000 f805 	bl	8002164 <groveLCD_command>
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20004be1 	.word	0x20004be1

08002164 <groveLCD_command>:
//=================================================================
/*********** mid level commands, for sending data/cmds */

// send command
void groveLCD_command(uint8_t value)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, value};
 800216e:	2380      	movs	r3, #128	; 0x80
 8002170:	733b      	strb	r3, [r7, #12]
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 8002176:	f107 030c 	add.w	r3, r7, #12
 800217a:	2102      	movs	r1, #2
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff15 	bl	8001fac <i2c_send_byteS>
}
 8002182:	bf00      	nop
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <groveLCD_write>:
//=================================================================
// send data
int groveLCD_write(uint8_t value)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b084      	sub	sp, #16
 800218e:	af00      	add	r7, sp, #0
 8002190:	4603      	mov	r3, r0
 8002192:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x40, value};
 8002194:	2340      	movs	r3, #64	; 0x40
 8002196:	733b      	strb	r3, [r7, #12]
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	2102      	movs	r1, #2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff ff02 	bl	8001fac <i2c_send_byteS>
    return 1; // assume sucess
 80021a8:	2301      	movs	r3, #1
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <groveLCD_putString>:
//=================================================================
void groveLCD_putString(char* s)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
	while(*s != '\0')
 80021ba:	e007      	b.n	80021cc <groveLCD_putString+0x1a>
	{
		groveLCD_write(*s);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ffe2 	bl	800218a <groveLCD_write>
		s++;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3301      	adds	r3, #1
 80021ca:	607b      	str	r3, [r7, #4]
	while(*s != '\0')
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1f3      	bne.n	80021bc <groveLCD_putString+0xa>
	}
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <groveLCD_setReg>:
//=================================================================
void groveLCD_setReg(unsigned char addr, unsigned char dta)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	460a      	mov	r2, r1
 80021e8:	71fb      	strb	r3, [r7, #7]
 80021ea:	4613      	mov	r3, r2
 80021ec:	71bb      	strb	r3, [r7, #6]
    i2c1_WriteRegBuffer(RGB_ADDRESS, addr,  &dta, 1);
 80021ee:	1dba      	adds	r2, r7, #6
 80021f0:	79f9      	ldrb	r1, [r7, #7]
 80021f2:	2301      	movs	r3, #1
 80021f4:	20c4      	movs	r0, #196	; 0xc4
 80021f6:	f7ff fe17 	bl	8001e28 <i2c1_WriteRegBuffer>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <groveLCD_setRGB>:
//=================================================================
void groveLCD_setRGB(unsigned char r, unsigned char g, unsigned char b)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	4603      	mov	r3, r0
 800220a:	71fb      	strb	r3, [r7, #7]
 800220c:	460b      	mov	r3, r1
 800220e:	71bb      	strb	r3, [r7, #6]
 8002210:	4613      	mov	r3, r2
 8002212:	717b      	strb	r3, [r7, #5]
	groveLCD_setReg(REG_RED, r);
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	4619      	mov	r1, r3
 8002218:	2004      	movs	r0, #4
 800221a:	f7ff ffe0 	bl	80021de <groveLCD_setReg>
	groveLCD_setReg(REG_GREEN, g);
 800221e:	79bb      	ldrb	r3, [r7, #6]
 8002220:	4619      	mov	r1, r3
 8002222:	2003      	movs	r0, #3
 8002224:	f7ff ffdb 	bl	80021de <groveLCD_setReg>
	groveLCD_setReg(REG_BLUE, b);
 8002228:	797b      	ldrb	r3, [r7, #5]
 800222a:	4619      	mov	r1, r3
 800222c:	2002      	movs	r0, #2
 800222e:	f7ff ffd6 	bl	80021de <groveLCD_setReg>
}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <groveLCD_setColor>:
    {0, 255, 0},                // green
    {0, 0, 255},                // blue
};
//=================================================================
void groveLCD_setColor(unsigned char color)
{
 800223c:	b590      	push	{r4, r7, lr}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	71fb      	strb	r3, [r7, #7]
    if(color > 3)return ;
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	2b03      	cmp	r3, #3
 800224a:	d81a      	bhi.n	8002282 <groveLCD_setColor+0x46>
    groveLCD_setRGB(color_define[color][0], color_define[color][1], color_define[color][2]);
 800224c:	79fa      	ldrb	r2, [r7, #7]
 800224e:	490f      	ldr	r1, [pc, #60]	; (800228c <groveLCD_setColor+0x50>)
 8002250:	4613      	mov	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4413      	add	r3, r2
 8002256:	440b      	add	r3, r1
 8002258:	7818      	ldrb	r0, [r3, #0]
 800225a:	79fa      	ldrb	r2, [r7, #7]
 800225c:	490b      	ldr	r1, [pc, #44]	; (800228c <groveLCD_setColor+0x50>)
 800225e:	4613      	mov	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4413      	add	r3, r2
 8002264:	440b      	add	r3, r1
 8002266:	3301      	adds	r3, #1
 8002268:	7819      	ldrb	r1, [r3, #0]
 800226a:	79fa      	ldrb	r2, [r7, #7]
 800226c:	4c07      	ldr	r4, [pc, #28]	; (800228c <groveLCD_setColor+0x50>)
 800226e:	4613      	mov	r3, r2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	4413      	add	r3, r2
 8002274:	4423      	add	r3, r4
 8002276:	3302      	adds	r3, #2
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	f7ff ffc1 	bl	8002202 <groveLCD_setRGB>
 8002280:	e000      	b.n	8002284 <groveLCD_setColor+0x48>
    if(color > 3)return ;
 8002282:	bf00      	nop
}
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	bd90      	pop	{r4, r7, pc}
 800228a:	bf00      	nop
 800228c:	0801b77c 	.word	0x0801b77c

08002290 <groveLCD_term_printf>:
//============================================================
void groveLCD_term_printf(const char* fmt, ...)
{
 8002290:	b40f      	push	{r0, r1, r2, r3}
 8002292:	b5b0      	push	{r4, r5, r7, lr}
 8002294:	b0a4      	sub	sp, #144	; 0x90
 8002296:	af02      	add	r7, sp, #8
	unsigned long  ul;
	unsigned long long ull;
	unsigned long  size;
	unsigned int   sp;
	char           s[60];
	int first=0;
 8002298:	2300      	movs	r3, #0
 800229a:	677b      	str	r3, [r7, #116]	; 0x74

	va_start(ap, fmt);
 800229c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022a0:	64bb      	str	r3, [r7, #72]	; 0x48

	while (*fmt != '\0') {
 80022a2:	e1cd      	b.n	8002640 <groveLCD_term_printf+0x3b0>
		if (*fmt =='%') {
 80022a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b25      	cmp	r3, #37	; 0x25
 80022ac:	f040 81bd 	bne.w	800262a <groveLCD_term_printf+0x39a>
			size=0; sp=1;
 80022b0:	2300      	movs	r3, #0
 80022b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80022b4:	2301      	movs	r3, #1
 80022b6:	67bb      	str	r3, [r7, #120]	; 0x78
			if (*++fmt=='0') {fmt++; sp=0;}	// parse %04d --> sp=0
 80022b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022bc:	3301      	adds	r3, #1
 80022be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b30      	cmp	r3, #48	; 0x30
 80022ca:	d106      	bne.n	80022da <groveLCD_term_printf+0x4a>
 80022cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022d0:	3301      	adds	r3, #1
 80022d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022d6:	2300      	movs	r3, #0
 80022d8:	67bb      	str	r3, [r7, #120]	; 0x78
			ch=*fmt;
 80022da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if ((ch>'0') && (ch<='9')) {	// parse %4d --> size=4
 80022e4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80022e8:	2b30      	cmp	r3, #48	; 0x30
 80022ea:	d92c      	bls.n	8002346 <groveLCD_term_printf+0xb6>
 80022ec:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80022f0:	2b39      	cmp	r3, #57	; 0x39
 80022f2:	d828      	bhi.n	8002346 <groveLCD_term_printf+0xb6>
				char tmp[10];
				int i=0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	673b      	str	r3, [r7, #112]	; 0x70
				while ((ch>='0') && (ch<='9')) {
 80022f8:	e012      	b.n	8002320 <groveLCD_term_printf+0x90>
					tmp[i++]=ch;
 80022fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	673a      	str	r2, [r7, #112]	; 0x70
 8002300:	3388      	adds	r3, #136	; 0x88
 8002302:	443b      	add	r3, r7
 8002304:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8002308:	f803 2c88 	strb.w	r2, [r3, #-136]
					ch=*++fmt;
 800230c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002310:	3301      	adds	r3, #1
 8002312:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002316:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				while ((ch>='0') && (ch<='9')) {
 8002320:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002324:	2b2f      	cmp	r3, #47	; 0x2f
 8002326:	d903      	bls.n	8002330 <groveLCD_term_printf+0xa0>
 8002328:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800232c:	2b39      	cmp	r3, #57	; 0x39
 800232e:	d9e4      	bls.n	80022fa <groveLCD_term_printf+0x6a>
				}
				tmp[i]='\0';
 8002330:	463a      	mov	r2, r7
 8002332:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002334:	4413      	add	r3, r2
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
				size=str2num(tmp,10);
 800233a:	463b      	mov	r3, r7
 800233c:	210a      	movs	r1, #10
 800233e:	4618      	mov	r0, r3
 8002340:	f002 fb30 	bl	80049a4 <str2num>
 8002344:	67f8      	str	r0, [r7, #124]	; 0x7c
			}
			switch (ch) {
 8002346:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800234a:	2b25      	cmp	r3, #37	; 0x25
 800234c:	d03c      	beq.n	80023c8 <groveLCD_term_printf+0x138>
 800234e:	2b25      	cmp	r3, #37	; 0x25
 8002350:	f2c0 8164 	blt.w	800261c <groveLCD_term_printf+0x38c>
 8002354:	2b78      	cmp	r3, #120	; 0x78
 8002356:	f300 8161 	bgt.w	800261c <groveLCD_term_printf+0x38c>
 800235a:	2b63      	cmp	r3, #99	; 0x63
 800235c:	f2c0 815e 	blt.w	800261c <groveLCD_term_printf+0x38c>
 8002360:	3b63      	subs	r3, #99	; 0x63
 8002362:	2b15      	cmp	r3, #21
 8002364:	f200 815a 	bhi.w	800261c <groveLCD_term_printf+0x38c>
 8002368:	a201      	add	r2, pc, #4	; (adr r2, 8002370 <groveLCD_term_printf+0xe0>)
 800236a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236e:	bf00      	nop
 8002370:	080023d1 	.word	0x080023d1
 8002374:	080023fb 	.word	0x080023fb
 8002378:	0800261d 	.word	0x0800261d
 800237c:	080024fb 	.word	0x080024fb
 8002380:	0800261d 	.word	0x0800261d
 8002384:	0800261d 	.word	0x0800261d
 8002388:	0800261d 	.word	0x0800261d
 800238c:	0800261d 	.word	0x0800261d
 8002390:	0800261d 	.word	0x0800261d
 8002394:	0800261d 	.word	0x0800261d
 8002398:	0800261d 	.word	0x0800261d
 800239c:	0800261d 	.word	0x0800261d
 80023a0:	0800246b 	.word	0x0800246b
 80023a4:	08002497 	.word	0x08002497
 80023a8:	0800261d 	.word	0x0800261d
 80023ac:	0800261d 	.word	0x0800261d
 80023b0:	080023e9 	.word	0x080023e9
 80023b4:	0800261d 	.word	0x0800261d
 80023b8:	0800243f 	.word	0x0800243f
 80023bc:	0800261d 	.word	0x0800261d
 80023c0:	0800261d 	.word	0x0800261d
 80023c4:	080024cf 	.word	0x080024cf
				case '%':
					groveLCD_write('%');
 80023c8:	2025      	movs	r0, #37	; 0x25
 80023ca:	f7ff fede 	bl	800218a <groveLCD_write>
					break;
 80023ce:	e132      	b.n	8002636 <groveLCD_term_printf+0x3a6>
				case 'c':
					ch = va_arg(ap, int);
 80023d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023d2:	1d1a      	adds	r2, r3, #4
 80023d4:	64ba      	str	r2, [r7, #72]	; 0x48
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					groveLCD_write(ch);
 80023dc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fed2 	bl	800218a <groveLCD_write>
					break;
 80023e6:	e126      	b.n	8002636 <groveLCD_term_printf+0x3a6>
				case 's':
					p = va_arg(ap, char *);
 80023e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ea:	1d1a      	adds	r2, r3, #4
 80023ec:	64ba      	str	r2, [r7, #72]	; 0x48
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	66fb      	str	r3, [r7, #108]	; 0x6c
					groveLCD_putString(p);
 80023f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80023f4:	f7ff fedd 	bl	80021b2 <groveLCD_putString>
					break;
 80023f8:	e11d      	b.n	8002636 <groveLCD_term_printf+0x3a6>
				case 'd':
					ul = va_arg(ap, long);
 80023fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023fc:	1d1a      	adds	r2, r3, #4
 80023fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					if ((long)ul < 0) {
 8002406:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800240a:	2b00      	cmp	r3, #0
 800240c:	da07      	bge.n	800241e <groveLCD_term_printf+0x18e>
						groveLCD_write('-');
 800240e:	202d      	movs	r0, #45	; 0x2d
 8002410:	f7ff febb 	bl	800218a <groveLCD_write>
						ul = -(long)ul;
 8002414:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002418:	425b      	negs	r3, r3
 800241a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
						//size--;
					}
					num2str(s, ul, 10, size, sp);
 800241e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002420:	f107 000c 	add.w	r0, r7, #12
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002428:	220a      	movs	r2, #10
 800242a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800242e:	f002 fa35 	bl	800489c <num2str>
					groveLCD_putString(s);
 8002432:	f107 030c 	add.w	r3, r7, #12
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff febb 	bl	80021b2 <groveLCD_putString>
					break;
 800243c:	e0fb      	b.n	8002636 <groveLCD_term_printf+0x3a6>
				case 'u':
					ul = va_arg(ap, unsigned int);
 800243e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002440:	1d1a      	adds	r2, r3, #4
 8002442:	64ba      	str	r2, [r7, #72]	; 0x48
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 10, size, sp);
 800244a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800244c:	f107 000c 	add.w	r0, r7, #12
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002454:	220a      	movs	r2, #10
 8002456:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800245a:	f002 fa1f 	bl	800489c <num2str>
					groveLCD_putString(s);
 800245e:	f107 030c 	add.w	r3, r7, #12
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fea5 	bl	80021b2 <groveLCD_putString>
					break;
 8002468:	e0e5      	b.n	8002636 <groveLCD_term_printf+0x3a6>
				case 'o':
					ul = va_arg(ap, unsigned int);
 800246a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800246c:	1d1a      	adds	r2, r3, #4
 800246e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 8, size, sp);
 8002476:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002478:	f107 000c 	add.w	r0, r7, #12
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002480:	2208      	movs	r2, #8
 8002482:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002486:	f002 fa09 	bl	800489c <num2str>
					groveLCD_putString(s);
 800248a:	f107 030c 	add.w	r3, r7, #12
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fe8f 	bl	80021b2 <groveLCD_putString>
					break;
 8002494:	e0cf      	b.n	8002636 <groveLCD_term_printf+0x3a6>
				case 'p':
					groveLCD_write('0');
 8002496:	2030      	movs	r0, #48	; 0x30
 8002498:	f7ff fe77 	bl	800218a <groveLCD_write>
					groveLCD_write('x');
 800249c:	2078      	movs	r0, #120	; 0x78
 800249e:	f7ff fe74 	bl	800218a <groveLCD_write>
					ul = va_arg(ap, unsigned int);
 80024a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024a4:	1d1a      	adds	r2, r3, #4
 80024a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 16, size, sp);
 80024ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024b0:	f107 000c 	add.w	r0, r7, #12
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024b8:	2210      	movs	r2, #16
 80024ba:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80024be:	f002 f9ed 	bl	800489c <num2str>
					groveLCD_putString(s);
 80024c2:	f107 030c 	add.w	r3, r7, #12
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fe73 	bl	80021b2 <groveLCD_putString>
					break;
 80024cc:	e0b3      	b.n	8002636 <groveLCD_term_printf+0x3a6>
				case 'x':
					ul = va_arg(ap, unsigned int);
 80024ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024d0:	1d1a      	adds	r2, r3, #4
 80024d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 16, size, sp);
 80024da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024dc:	f107 000c 	add.w	r0, r7, #12
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024e4:	2210      	movs	r2, #16
 80024e6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80024ea:	f002 f9d7 	bl	800489c <num2str>
					groveLCD_putString(s);
 80024ee:	f107 030c 	add.w	r3, r7, #12
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fe5d 	bl	80021b2 <groveLCD_putString>
					break;
 80024f8:	e09d      	b.n	8002636 <groveLCD_term_printf+0x3a6>
				case 'f':
					if(first==0){ ull = va_arg(ap, long long unsigned int); first = 1;}
 80024fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10c      	bne.n	800251a <groveLCD_term_printf+0x28a>
 8002500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002502:	3307      	adds	r3, #7
 8002504:	f023 0307 	bic.w	r3, r3, #7
 8002508:	f103 0208 	add.w	r2, r3, #8
 800250c:	64ba      	str	r2, [r7, #72]	; 0x48
 800250e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002512:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8002516:	2301      	movs	r3, #1
 8002518:	677b      	str	r3, [r7, #116]	; 0x74
					ull = va_arg(ap, long long unsigned int);
 800251a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800251c:	3307      	adds	r3, #7
 800251e:	f023 0307 	bic.w	r3, r3, #7
 8002522:	f103 0208 	add.w	r2, r3, #8
 8002526:	64ba      	str	r2, [r7, #72]	; 0x48
 8002528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
					int sign = ( ull & 0x80000000 ) >> 31;
 8002530:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	f04f 0300 	mov.w	r3, #0
 800253c:	0fc2      	lsrs	r2, r0, #31
 800253e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8002542:	0fcb      	lsrs	r3, r1, #31
 8002544:	4613      	mov	r3, r2
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	65fb      	str	r3, [r7, #92]	; 0x5c
					int m = (ull & 0x000FFFFF) ; // should be 0x007FFFFF
 800254c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800254e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002552:	65bb      	str	r3, [r7, #88]	; 0x58
					float mf = (float)m ;
 8002554:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002556:	ee07 3a90 	vmov	s15, r3
 800255a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800255e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					mf = mf / pow(2.0,20.0);
 8002562:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002566:	eddf 6a40 	vldr	s13, [pc, #256]	; 8002668 <groveLCD_term_printf+0x3d8>
 800256a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800256e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					mf = mf + 1.0;
 8002572:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002576:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800257a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800257e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					int e = ( ull & 0x78000000 ) >> 23 ; // should be int e = ( ul & 0x7F800000 ) >> 23;
 8002582:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	0dc2      	lsrs	r2, r0, #23
 8002590:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8002594:	0dcb      	lsrs	r3, r1, #23
 8002596:	4613      	mov	r3, r2
 8002598:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800259c:	653b      	str	r3, [r7, #80]	; 0x50
					e = e | (( ull & 0x000F00000 ) >> 20);
 800259e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	0d02      	lsrs	r2, r0, #20
 80025ac:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 80025b0:	0d0b      	lsrs	r3, r1, #20
 80025b2:	4613      	mov	r3, r2
 80025b4:	f003 020f 	and.w	r2, r3, #15
 80025b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025ba:	4313      	orrs	r3, r2
 80025bc:	653b      	str	r3, [r7, #80]	; 0x50
					e = e - 127;
 80025be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025c0:	3b7f      	subs	r3, #127	; 0x7f
 80025c2:	653b      	str	r3, [r7, #80]	; 0x50
					float f = mf*myPow(2.0,e);
 80025c4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80025c6:	f7fd ffd7 	bl	8000578 <__aeabi_f2d>
 80025ca:	4604      	mov	r4, r0
 80025cc:	460d      	mov	r5, r1
 80025ce:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80025d0:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8002660 <groveLCD_term_printf+0x3d0>
 80025d4:	f002 faf4 	bl	8004bc0 <myPow>
 80025d8:	ec53 2b10 	vmov	r2, r3, d0
 80025dc:	4620      	mov	r0, r4
 80025de:	4629      	mov	r1, r5
 80025e0:	f7fe f822 	bl	8000628 <__aeabi_dmul>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4610      	mov	r0, r2
 80025ea:	4619      	mov	r1, r3
 80025ec:	f7fe fab6 	bl	8000b5c <__aeabi_d2f>
 80025f0:	4603      	mov	r3, r0
 80025f2:	64fb      	str	r3, [r7, #76]	; 0x4c
					if(sign==1){ groveLCD_write('-'); }
 80025f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d102      	bne.n	8002600 <groveLCD_term_printf+0x370>
 80025fa:	202d      	movs	r0, #45	; 0x2d
 80025fc:	f7ff fdc5 	bl	800218a <groveLCD_write>
					float2str((char*)s, f, 5);
 8002600:	f107 030c 	add.w	r3, r7, #12
 8002604:	2105      	movs	r1, #5
 8002606:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 800260a:	4618      	mov	r0, r3
 800260c:	f002 fa88 	bl	8004b20 <float2str>
					groveLCD_putString((char*)s);
 8002610:	f107 030c 	add.w	r3, r7, #12
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff fdcc 	bl	80021b2 <groveLCD_putString>
					break;
 800261a:	e00c      	b.n	8002636 <groveLCD_term_printf+0x3a6>

				default:
					groveLCD_write(*fmt);
 800261c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fdb1 	bl	800218a <groveLCD_write>
 8002628:	e005      	b.n	8002636 <groveLCD_term_printf+0x3a6>
			}
		} else groveLCD_write(*fmt);
 800262a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff fdaa 	bl	800218a <groveLCD_write>
		fmt++;
 8002636:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800263a:	3301      	adds	r3, #1
 800263c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	while (*fmt != '\0') {
 8002640:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	f47f ae2c 	bne.w	80022a4 <groveLCD_term_printf+0x14>
	}
	va_end(ap);
}
 800264c:	bf00      	nop
 800264e:	bf00      	nop
 8002650:	3788      	adds	r7, #136	; 0x88
 8002652:	46bd      	mov	sp, r7
 8002654:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002658:	b004      	add	sp, #16
 800265a:	4770      	bx	lr
 800265c:	f3af 8000 	nop.w
 8002660:	00000000 	.word	0x00000000
 8002664:	40000000 	.word	0x40000000
 8002668:	49800000 	.word	0x49800000

0800266c <CHECKMRRET>:
void * microros_allocate(size_t size, void * state);
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void CHECKMRRET(rcl_ret_t ret, char* msg){if (ret != RCL_RET_OK){ if (DEBUG_PRINTF){printf("Error : %d\r\nMsg : %s\r\n", (int)ret, msg); }}}
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <SubscriberCallbackFunction>:

void SubscriberCallbackFunction(const void *msgin){
 8002682:	b480      	push	{r7}
 8002684:	b085      	sub	sp, #20
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
#if SYNCHRO_EX == EXTEST_MICROROS
	std_msgs__msg__String * msg = (std_msgs__msg__String * )msgin;
	printf("\r\nMessage recue : %s\r\n", msg->data->data);
#elif SYNCHRO_EX == EXFINAL
	std_msgs__msg__Int32 * msg = (std_msgs__msg__Int32 * )msgin;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	60fb      	str	r3, [r7, #12]
	if (DEBUG_PRINTF)
		printf("\r\nMessage recue : %ld\r\n", msg->data);
#endif //SYNCHRO_EX
}
 800268e:	bf00      	nop
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
	...

0800269c <microros_task>:

// https://github.com/lFatality/stm32_micro_ros_setup
void microros_task(void *argument)
{
 800269c:	b5b0      	push	{r4, r5, r7, lr}
 800269e:	b0ec      	sub	sp, #432	; 0x1b0
 80026a0:	af02      	add	r7, sp, #8
 80026a2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80026a6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80026aa:	6018      	str	r0, [r3, #0]
	rcl_node_t node; //microRos structure wich represent a node ROS
	rcl_node_options_t node_opt; //microRos structure wich represent option of a node ROS
	rclc_executor_t executor; //microRos structure wich represent an executor wich can be use to receive message

	// micro-ROS configuration with freertos
	rmw_uros_set_custom_transport(
 80026ac:	4bd5      	ldr	r3, [pc, #852]	; (8002a04 <microros_task+0x368>)
 80026ae:	9301      	str	r3, [sp, #4]
 80026b0:	4bd5      	ldr	r3, [pc, #852]	; (8002a08 <microros_task+0x36c>)
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	4bd5      	ldr	r3, [pc, #852]	; (8002a0c <microros_task+0x370>)
 80026b6:	4ad6      	ldr	r2, [pc, #856]	; (8002a10 <microros_task+0x374>)
 80026b8:	49d6      	ldr	r1, [pc, #856]	; (8002a14 <microros_task+0x378>)
 80026ba:	2001      	movs	r0, #1
 80026bc:	f00d fa70 	bl	800fba0 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80026c0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80026c4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026c8:	4618      	mov	r0, r3
 80026ca:	f00c ffd3 	bl	800f674 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 80026ce:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80026d2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026d6:	4ad0      	ldr	r2, [pc, #832]	; (8002a18 <microros_task+0x37c>)
 80026d8:	601a      	str	r2, [r3, #0]
	freeRTOS_allocator.deallocate = microros_deallocate;
 80026da:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80026de:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026e2:	4ace      	ldr	r2, [pc, #824]	; (8002a1c <microros_task+0x380>)
 80026e4:	605a      	str	r2, [r3, #4]
	freeRTOS_allocator.reallocate = microros_reallocate;
 80026e6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80026ea:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026ee:	4acc      	ldr	r2, [pc, #816]	; (8002a20 <microros_task+0x384>)
 80026f0:	609a      	str	r2, [r3, #8]
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80026f2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80026f6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026fa:	4aca      	ldr	r2, [pc, #808]	; (8002a24 <microros_task+0x388>)
 80026fc:	60da      	str	r2, [r3, #12]

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80026fe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002702:	4618      	mov	r0, r3
 8002704:	f00c ffc4 	bl	800f690 <rcutils_set_default_allocator>
 8002708:	4603      	mov	r3, r0
 800270a:	f083 0301 	eor.w	r3, r3, #1
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <microros_task+0x80>
		printf("Error on default allocators (line %d)\r\n", __LINE__);
 8002714:	21c1      	movs	r1, #193	; 0xc1
 8002716:	48c4      	ldr	r0, [pc, #784]	; (8002a28 <microros_task+0x38c>)
 8002718:	f017 fc96 	bl	801a048 <iprintf>
	}

	allocator = rcl_get_default_allocator();
 800271c:	463b      	mov	r3, r7
 800271e:	4618      	mov	r0, r3
 8002720:	f00c ffd6 	bl	800f6d0 <rcutils_get_default_allocator>
 8002724:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002728:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800272c:	f507 749e 	add.w	r4, r7, #316	; 0x13c
 8002730:	461d      	mov	r5, r3
 8002732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002736:	682b      	ldr	r3, [r5, #0]
 8002738:	6023      	str	r3, [r4, #0]

	//create init_options
	CHECKMRRET(rclc_support_init(&support, 0, NULL, &allocator), "error on init support");
 800273a:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800273e:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8002742:	2200      	movs	r2, #0
 8002744:	2100      	movs	r1, #0
 8002746:	f00c fea9 	bl	800f49c <rclc_support_init>
 800274a:	4603      	mov	r3, r0
 800274c:	49b7      	ldr	r1, [pc, #732]	; (8002a2c <microros_task+0x390>)
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff ff8c 	bl	800266c <CHECKMRRET>
	// create node
	node_opt = rcl_node_get_default_options(); //Get default node options
 8002754:	463b      	mov	r3, r7
 8002756:	4618      	mov	r0, r3
 8002758:	f00c f858 	bl	800e80c <rcl_node_get_default_options>
 800275c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002760:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002764:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8002768:	461d      	mov	r5, r3
 800276a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800276c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800276e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002772:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	node_opt.domain_id = ROS_DOMAIN_ID; //Set the ROS_DOMAIN_ID
 8002776:	2300      	movs	r3, #0
 8002778:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	CHECKMRRET(rclc_node_init_with_options(&node, "STM32_node", "", &support, &node_opt), "error on init node");
 800277c:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8002780:	f507 709a 	add.w	r0, r7, #308	; 0x134
 8002784:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	4613      	mov	r3, r2
 800278c:	4aa8      	ldr	r2, [pc, #672]	; (8002a30 <microros_task+0x394>)
 800278e:	49a9      	ldr	r1, [pc, #676]	; (8002a34 <microros_task+0x398>)
 8002790:	f00c fed2 	bl	800f538 <rclc_node_init_with_options>
 8002794:	4603      	mov	r3, r0
 8002796:	49a8      	ldr	r1, [pc, #672]	; (8002a38 <microros_task+0x39c>)
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ff67 	bl	800266c <CHECKMRRET>
		ret = rclc_executor_spin_some(&executor, 100*1000*1000);
		vTaskDelay(SAMPLING_PERIOD_ms);
	}
#elif SYNCHRO_EX == EXFINAL
	//Init the queue mesage
	MicroRosPubMsg MsgToPub = {'N', 0, 0};
 800279e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80027a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80027a6:	224e      	movs	r2, #78	; 0x4e
 80027a8:	701a      	strb	r2, [r3, #0]
 80027aa:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80027ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80027b2:	2200      	movs	r2, #0
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80027ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80027be:	2200      	movs	r2, #0
 80027c0:	609a      	str	r2, [r3, #8]
	MicroRosSubMsg SubToMsg = {DEFAULT_DIR, 0, 0, DEFAULT_MODE, DEFAULT_SPEED};
 80027c2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80027c6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80027ca:	4a9c      	ldr	r2, [pc, #624]	; (8002a3c <microros_task+0x3a0>)
 80027cc:	461c      	mov	r4, r3
 80027ce:	4615      	mov	r5, r2
 80027d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027d4:	682b      	ldr	r3, [r5, #0]
 80027d6:	6023      	str	r3, [r4, #0]
	/* PUBLISHER */
	//Use to publish the direction of robot in sensor mode
	rcl_publisher_t capteur_dir_pub;
	char* capteur_dir_topic = CAPTEUR_DIR_TOPIC;
 80027d8:	4b99      	ldr	r3, [pc, #612]	; (8002a40 <microros_task+0x3a4>)
 80027da:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	std_msgs__msg__Int32 capteur_dir_msg;
	//Use to publish the actual mode of the robot
	rcl_publisher_t etat_mode_pub;
	char* etat_mode_topic = ETAT_MODE_TOPIC;
 80027de:	4b99      	ldr	r3, [pc, #612]	; (8002a44 <microros_task+0x3a8>)
 80027e0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	std_msgs__msg__Int32 etat_mode_msg;
	//Use to publish the actual speed of the robot
	rcl_publisher_t etat_speed_pub;
	char* etat_speed_topic = ETAT_SPEED_TOPIC;
 80027e4:	4b98      	ldr	r3, [pc, #608]	; (8002a48 <microros_task+0x3ac>)
 80027e6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	std_msgs__msg__Int32 etat_speed_msg;
	/* SUBSCRIBER */
	//Use to receive the x position of object see by the camera
	rcl_subscription_t camera_x_sub;
	char* camera_x_topic = CAMERA_X_TOPIC;
 80027ea:	4b98      	ldr	r3, [pc, #608]	; (8002a4c <microros_task+0x3b0>)
 80027ec:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	std_msgs__msg__Int32 camera_x_msg;
	//Use to receive the y position of object see by the camera
	rcl_subscription_t camera_y_sub;
	char* camera_y_topic = CAMERA_Y_TOPIC;
 80027f0:	4b97      	ldr	r3, [pc, #604]	; (8002a50 <microros_task+0x3b4>)
 80027f2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	std_msgs__msg__Int32 camera_y_msg;
	//Use to receive the remote control in remote mode
	rcl_subscription_t telecommande_dir_sub;
	char* telecommande_dir_topic = TELECOMMANDE_DIR_TOPIC;
 80027f6:	4b97      	ldr	r3, [pc, #604]	; (8002a54 <microros_task+0x3b8>)
 80027f8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	std_msgs__msg__Int32 telecommande_dir_msg;
	//Use to receive the mode config
	rcl_subscription_t config_mode_sub;
	char* config_mode_topic = CONFIG_MODE_TOPIC;
 80027fc:	4b96      	ldr	r3, [pc, #600]	; (8002a58 <microros_task+0x3bc>)
 80027fe:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	std_msgs__msg__Int32 config_mode_msg;
	//Use to receive the speed config
	rcl_subscription_t config_speed_sub;
	char* config_speed_topic = CONFIG_SPEED_TOPIC;
 8002802:	4b96      	ldr	r3, [pc, #600]	; (8002a5c <microros_task+0x3c0>)
 8002804:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	std_msgs__msg__Int32 config_speed_msg;

	// create publisher
	createPublisher(&capteur_dir_pub, &node,
 8002808:	f00e f83c 	bl	8010884 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 800280c:	4602      	mov	r2, r0
 800280e:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8002812:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8002816:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002820:	f000 feae 	bl	8003580 <createPublisher>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		capteur_dir_topic, &capteur_dir_msg);

	createPublisher(&etat_mode_pub, &node,
 8002824:	f00e f82e 	bl	8010884 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8002828:	4602      	mov	r2, r0
 800282a:	f507 719a 	add.w	r1, r7, #308	; 0x134
 800282e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002832:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800283c:	f000 fea0 	bl	8003580 <createPublisher>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		etat_mode_topic, &etat_mode_msg);

	createPublisher(&etat_speed_pub, &node,
 8002840:	f00e f820 	bl	8010884 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8002844:	4602      	mov	r2, r0
 8002846:	f507 719a 	add.w	r1, r7, #308	; 0x134
 800284a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800284e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002858:	f000 fe92 	bl	8003580 <createPublisher>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		etat_speed_topic, &etat_speed_msg);

	//create subscriber
	createSubscriber(&camera_x_sub, &node,
 800285c:	f00e f812 	bl	8010884 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8002860:	4602      	mov	r2, r0
 8002862:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8002866:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800286a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002874:	f000 fea0 	bl	80035b8 <createSubscriber>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		camera_x_topic, &camera_x_msg);

	createSubscriber(&camera_y_sub, &node,
 8002878:	f00e f804 	bl	8010884 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 800287c:	4602      	mov	r2, r0
 800287e:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8002882:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8002886:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002890:	f000 fe92 	bl	80035b8 <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			camera_y_topic, &camera_y_msg);

	createSubscriber(&telecommande_dir_sub, &node,
 8002894:	f00d fff6 	bl	8010884 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8002898:	4602      	mov	r2, r0
 800289a:	f507 719a 	add.w	r1, r7, #308	; 0x134
 800289e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80028a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80028ac:	f000 fe84 	bl	80035b8 <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			telecommande_dir_topic, &telecommande_dir_msg);

	createSubscriber(&config_mode_sub, &node,
 80028b0:	f00d ffe8 	bl	8010884 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80028b4:	4602      	mov	r2, r0
 80028b6:	f507 719a 	add.w	r1, r7, #308	; 0x134
 80028ba:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80028be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80028c8:	f000 fe76 	bl	80035b8 <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			config_mode_topic, &config_mode_msg);

	createSubscriber(&config_speed_sub, &node,
 80028cc:	f00d ffda 	bl	8010884 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80028d0:	4602      	mov	r2, r0
 80028d2:	f507 719a 	add.w	r1, r7, #308	; 0x134
 80028d6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80028da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80028e4:	f000 fe68 	bl	80035b8 <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			config_speed_topic, &config_speed_msg);

	//Init the executor
	CHECKMRRET(rclc_executor_init(&executor, &support.context, 5, &allocator), "Error on init executor");
 80028e8:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80028ec:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80028f0:	1d19      	adds	r1, r3, #4
 80028f2:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80028f6:	4613      	mov	r3, r2
 80028f8:	2205      	movs	r2, #5
 80028fa:	f00c fb71 	bl	800efe0 <rclc_executor_init>
 80028fe:	4603      	mov	r3, r0
 8002900:	4957      	ldr	r1, [pc, #348]	; (8002a60 <microros_task+0x3c4>)
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff feb2 	bl	800266c <CHECKMRRET>
	/*Add subscriber to executor to let it check if message is receive on this
	topic and store the data on the message structure after call the callback*/
	CHECKMRRET(rclc_executor_add_subscription(&executor, &camera_x_sub, &camera_x_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add camera_x_sub");
 8002908:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800290c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002910:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8002914:	2300      	movs	r3, #0
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	4b52      	ldr	r3, [pc, #328]	; (8002a64 <microros_task+0x3c8>)
 800291a:	f00c fbd5 	bl	800f0c8 <rclc_executor_add_subscription>
 800291e:	4603      	mov	r3, r0
 8002920:	4951      	ldr	r1, [pc, #324]	; (8002a68 <microros_task+0x3cc>)
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fea2 	bl	800266c <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &camera_y_sub, &camera_y_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add camera_y_sub");
 8002928:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800292c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002930:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8002934:	2300      	movs	r3, #0
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	4b4a      	ldr	r3, [pc, #296]	; (8002a64 <microros_task+0x3c8>)
 800293a:	f00c fbc5 	bl	800f0c8 <rclc_executor_add_subscription>
 800293e:	4603      	mov	r3, r0
 8002940:	494a      	ldr	r1, [pc, #296]	; (8002a6c <microros_task+0x3d0>)
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fe92 	bl	800266c <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &telecommande_dir_sub, &telecommande_dir_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add telecommande_dir_sub");
 8002948:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800294c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002950:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8002954:	2300      	movs	r3, #0
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	4b42      	ldr	r3, [pc, #264]	; (8002a64 <microros_task+0x3c8>)
 800295a:	f00c fbb5 	bl	800f0c8 <rclc_executor_add_subscription>
 800295e:	4603      	mov	r3, r0
 8002960:	4943      	ldr	r1, [pc, #268]	; (8002a70 <microros_task+0x3d4>)
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fe82 	bl	800266c <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &config_mode_sub, &config_mode_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add config_mode_sub");
 8002968:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800296c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002970:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8002974:	2300      	movs	r3, #0
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	4b3a      	ldr	r3, [pc, #232]	; (8002a64 <microros_task+0x3c8>)
 800297a:	f00c fba5 	bl	800f0c8 <rclc_executor_add_subscription>
 800297e:	4603      	mov	r3, r0
 8002980:	493c      	ldr	r1, [pc, #240]	; (8002a74 <microros_task+0x3d8>)
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff fe72 	bl	800266c <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &config_speed_sub, &config_speed_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add config_speed_sub");
 8002988:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800298c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002990:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8002994:	2300      	movs	r3, #0
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	4b32      	ldr	r3, [pc, #200]	; (8002a64 <microros_task+0x3c8>)
 800299a:	f00c fb95 	bl	800f0c8 <rclc_executor_add_subscription>
 800299e:	4603      	mov	r3, r0
 80029a0:	4935      	ldr	r1, [pc, #212]	; (8002a78 <microros_task+0x3dc>)
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fe62 	bl	800266c <CHECKMRRET>

	for(;;)
	{
		if (!uxQueueMessagesWaiting(qhMR_sub)) //If no message in 'output' queue
 80029a8:	4b34      	ldr	r3, [pc, #208]	; (8002a7c <microros_task+0x3e0>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f009 fdb3 	bl	800c518 <uxQueueMessagesWaiting>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d108      	bne.n	80029ca <microros_task+0x32e>
			xQueueSend(qhMR_sub, ( void * ) &SubToMsg, portMAX_DELAY); //Send queue message
 80029b8:	4b30      	ldr	r3, [pc, #192]	; (8002a7c <microros_task+0x3e0>)
 80029ba:	6818      	ldr	r0, [r3, #0]
 80029bc:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80029c0:	2300      	movs	r3, #0
 80029c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029c6:	f009 fa21 	bl	800be0c <xQueueGenericSend>
		rclc_executor_spin_some(&executor, 1*1000*1000); //Execute executor
 80029ca:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80029ce:	4a2c      	ldr	r2, [pc, #176]	; (8002a80 <microros_task+0x3e4>)
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	4608      	mov	r0, r1
 80029d6:	f00c fd2b 	bl	800f430 <rclc_executor_spin_some>

		//Put the receive data into the queue message structure
		SubToMsg.dir = telecommande_dir_msg.data;
 80029da:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80029de:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80029e8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80029ec:	601a      	str	r2, [r3, #0]
		SubToMsg.x = camera_x_msg.data;
 80029ee:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80029f2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80029fc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	e03f      	b.n	8002a84 <microros_task+0x3e8>
 8002a04:	08001b89 	.word	0x08001b89
 8002a08:	08001b21 	.word	0x08001b21
 8002a0c:	08001b01 	.word	0x08001b01
 8002a10:	08001ad5 	.word	0x08001ad5
 8002a14:	200049d8 	.word	0x200049d8
 8002a18:	080035fd 	.word	0x080035fd
 8002a1c:	08003641 	.word	0x08003641
 8002a20:	08003679 	.word	0x08003679
 8002a24:	080036e5 	.word	0x080036e5
 8002a28:	0801b384 	.word	0x0801b384
 8002a2c:	0801b3ac 	.word	0x0801b3ac
 8002a30:	0801b3c4 	.word	0x0801b3c4
 8002a34:	0801b3c8 	.word	0x0801b3c8
 8002a38:	0801b3d4 	.word	0x0801b3d4
 8002a3c:	0801b540 	.word	0x0801b540
 8002a40:	0801b3e8 	.word	0x0801b3e8
 8002a44:	0801b3f4 	.word	0x0801b3f4
 8002a48:	0801b400 	.word	0x0801b400
 8002a4c:	0801b40c 	.word	0x0801b40c
 8002a50:	0801b418 	.word	0x0801b418
 8002a54:	0801b424 	.word	0x0801b424
 8002a58:	0801b430 	.word	0x0801b430
 8002a5c:	0801b438 	.word	0x0801b438
 8002a60:	0801b440 	.word	0x0801b440
 8002a64:	08002683 	.word	0x08002683
 8002a68:	0801b458 	.word	0x0801b458
 8002a6c:	0801b470 	.word	0x0801b470
 8002a70:	0801b488 	.word	0x0801b488
 8002a74:	0801b4a8 	.word	0x0801b4a8
 8002a78:	0801b4c4 	.word	0x0801b4c4
 8002a7c:	20004bf4 	.word	0x20004bf4
 8002a80:	000f4240 	.word	0x000f4240
		SubToMsg.y = camera_y_msg.data;
 8002a84:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002a88:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002a92:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002a96:	609a      	str	r2, [r3, #8]
		SubToMsg.mode = config_mode_msg.data;
 8002a98:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002a9c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002aa6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002aaa:	60da      	str	r2, [r3, #12]
		SubToMsg.speed = config_speed_msg.data;
 8002aac:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002ab0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002aba:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002abe:	611a      	str	r2, [r3, #16]

		if (uxQueueMessagesWaiting(qhMR_pub)) //If no message in 'input' queue
 8002ac0:	4b2d      	ldr	r3, [pc, #180]	; (8002b78 <microros_task+0x4dc>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f009 fd27 	bl	800c518 <uxQueueMessagesWaiting>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d04e      	beq.n	8002b6e <microros_task+0x4d2>
		{
			xQueueReceive(qhMR_pub, &MsgToPub, portMAX_DELAY); //Receive data
 8002ad0:	4b29      	ldr	r3, [pc, #164]	; (8002b78 <microros_task+0x4dc>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8002ad8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002adc:	4618      	mov	r0, r3
 8002ade:	f009 fb2f 	bl	800c140 <xQueueReceive>
			capteur_dir_msg.data = (int)MsgToPub.dir;
 8002ae2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002ae6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002af2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002af6:	601a      	str	r2, [r3, #0]
			etat_mode_msg.data = MsgToPub.mode;
 8002af8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002afc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002b06:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002b0a:	601a      	str	r2, [r3, #0]
			etat_speed_msg.data = MsgToPub.speed;
 8002b0c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002b10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002b1a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002b1e:	601a      	str	r2, [r3, #0]

			//Publish data
			CHECKMRRET(rcl_publish(&capteur_dir_pub, &capteur_dir_msg, NULL), "erreur publish capteur_dir_pub");
 8002b20:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002b24:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002b28:	2200      	movs	r2, #0
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f00b ffc6 	bl	800eabc <rcl_publish>
 8002b30:	4603      	mov	r3, r0
 8002b32:	4912      	ldr	r1, [pc, #72]	; (8002b7c <microros_task+0x4e0>)
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff fd99 	bl	800266c <CHECKMRRET>
			CHECKMRRET(rcl_publish(&etat_mode_pub, &etat_mode_msg, NULL), "erreur publish etat_mode_pub");
 8002b3a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002b3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b42:	2200      	movs	r2, #0
 8002b44:	4618      	mov	r0, r3
 8002b46:	f00b ffb9 	bl	800eabc <rcl_publish>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	490c      	ldr	r1, [pc, #48]	; (8002b80 <microros_task+0x4e4>)
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fd8c 	bl	800266c <CHECKMRRET>
			CHECKMRRET(rcl_publish(&etat_speed_pub, &etat_speed_msg, NULL), "erreur publish etat_speed_pub");
 8002b54:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002b58:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f00b ffac 	bl	800eabc <rcl_publish>
 8002b64:	4603      	mov	r3, r0
 8002b66:	4907      	ldr	r1, [pc, #28]	; (8002b84 <microros_task+0x4e8>)
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fd7f 	bl	800266c <CHECKMRRET>

			#if DEBUG_PRINTF
			printf("\r\nReceive from decision :\r\nDirection : %d\r\nMode : %d\r\nSpeed : %d\r\n", capteur_dir_msg.data, etat_mode_msg.data, etat_speed_msg.data);
			#endif //DEBUG_PRINTF
		}
		vTaskDelay(SAMPLING_PERIOD_ms);
 8002b6e:	2005      	movs	r0, #5
 8002b70:	f00a f82e 	bl	800cbd0 <vTaskDelay>
		if (!uxQueueMessagesWaiting(qhMR_sub)) //If no message in 'output' queue
 8002b74:	e718      	b.n	80029a8 <microros_task+0x30c>
 8002b76:	bf00      	nop
 8002b78:	20004bf8 	.word	0x20004bf8
 8002b7c:	0801b4e0 	.word	0x0801b4e0
 8002b80:	0801b500 	.word	0x0801b500
 8002b84:	0801b520 	.word	0x0801b520

08002b88 <task_Motor_Left>:
	}
#endif //SYNCHRO_EX
}

void task_Motor_Left(void *pvParameters)
{
 8002b88:	b5b0      	push	{r4, r5, r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
	int16_t consigne = 0; //Store the desirate speed
 8002b90:	2300      	movs	r3, #0
 8002b92:	81fb      	strh	r3, [r7, #14]

	float ui = 0.0; //Integral term of the correcteur
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
	float up = 0.0; //Proportionnal term of the correcteur
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	61bb      	str	r3, [r7, #24]
	int err = 0; //Error term of the correcteur
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
	int speed = 0; //Actual speed of motor
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	613b      	str	r3, [r7, #16]

	for (;;)
	{
		xQueueReceive(q_mot_L, &consigne, portMAX_DELAY); //receive wanted speed
 8002ba8:	4b35      	ldr	r3, [pc, #212]	; (8002c80 <task_Motor_Left+0xf8>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f107 010e 	add.w	r1, r7, #14
 8002bb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f009 fac3 	bl	800c140 <xQueueReceive>

		speed = quadEncoder_GetSpeedL(); //Get actual speed
 8002bba:	f000 ffbb 	bl	8003b34 <quadEncoder_GetSpeedL>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	613b      	str	r3, [r7, #16]
		//Calculate term of correcteur
		err=consigne-speed;
 8002bc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	617b      	str	r3, [r7, #20]
		up=LKp*(float)err;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	ee07 3a90 	vmov	s15, r3
 8002bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bd8:	ee17 0a90 	vmov	r0, s15
 8002bdc:	f7fd fccc 	bl	8000578 <__aeabi_f2d>
 8002be0:	a323      	add	r3, pc, #140	; (adr r3, 8002c70 <task_Motor_Left+0xe8>)
 8002be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be6:	f7fd fd1f 	bl	8000628 <__aeabi_dmul>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4610      	mov	r0, r2
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f7fd ffb3 	bl	8000b5c <__aeabi_d2f>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	61bb      	str	r3, [r7, #24]
		ui=ui+LKp*LKi*(float)err;
 8002bfa:	69f8      	ldr	r0, [r7, #28]
 8002bfc:	f7fd fcbc 	bl	8000578 <__aeabi_f2d>
 8002c00:	4604      	mov	r4, r0
 8002c02:	460d      	mov	r5, r1
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	ee07 3a90 	vmov	s15, r3
 8002c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c0e:	ee17 0a90 	vmov	r0, s15
 8002c12:	f7fd fcb1 	bl	8000578 <__aeabi_f2d>
 8002c16:	a318      	add	r3, pc, #96	; (adr r3, 8002c78 <task_Motor_Left+0xf0>)
 8002c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1c:	f7fd fd04 	bl	8000628 <__aeabi_dmul>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4620      	mov	r0, r4
 8002c26:	4629      	mov	r1, r5
 8002c28:	f7fd fb48 	bl	80002bc <__adddf3>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4610      	mov	r0, r2
 8002c32:	4619      	mov	r1, r3
 8002c34:	f7fd ff92 	bl	8000b5c <__aeabi_d2f>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	61fb      	str	r3, [r7, #28]

		motorLeft_SetDuty(100+(int)(up+ui)); //Set duty cycle of the motor
 8002c3c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002c40:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c4c:	ee17 3a90 	vmov	r3, s15
 8002c50:	3364      	adds	r3, #100	; 0x64
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 fe92 	bl	800397c <motorLeft_SetDuty>

		xSemaphoreGive(xSem_Supervision); //Give semaphore to liberate the decision task
 8002c58:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <task_Motor_Left+0xfc>)
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2100      	movs	r1, #0
 8002c62:	f009 f8d3 	bl	800be0c <xQueueGenericSend>
		vTaskDelay(SAMPLING_PERIOD_ms);
 8002c66:	2005      	movs	r0, #5
 8002c68:	f009 ffb2 	bl	800cbd0 <vTaskDelay>
		xQueueReceive(q_mot_L, &consigne, portMAX_DELAY); //receive wanted speed
 8002c6c:	e79c      	b.n	8002ba8 <task_Motor_Left+0x20>
 8002c6e:	bf00      	nop
 8002c70:	d2f1a9fc 	.word	0xd2f1a9fc
 8002c74:	3f50624d 	.word	0x3f50624d
 8002c78:	47ae147b 	.word	0x47ae147b
 8002c7c:	3f547ae1 	.word	0x3f547ae1
 8002c80:	20004bec 	.word	0x20004bec
 8002c84:	20004be8 	.word	0x20004be8

08002c88 <task_Motor_Right>:
	}
}

void task_Motor_Right(void *pvParameters)
{
 8002c88:	b5b0      	push	{r4, r5, r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
	int16_t consigne = 0; //Store the desirate speed
 8002c90:	2300      	movs	r3, #0
 8002c92:	81fb      	strh	r3, [r7, #14]

	float ui = 0.0; //Integral term of the correcteur
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
	float up = 0.0; //Proportionnal term of the correcteur
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	61bb      	str	r3, [r7, #24]
	int err = 0; //Error term of the correcteur
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
	int speed = 0; //Actual speed of motor
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	613b      	str	r3, [r7, #16]

	for (;;)
	{
		xQueueReceive(q_mot_R, &consigne, portMAX_DELAY); //receive wanted speed
 8002ca8:	4b35      	ldr	r3, [pc, #212]	; (8002d80 <task_Motor_Right+0xf8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f107 010e 	add.w	r1, r7, #14
 8002cb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f009 fa43 	bl	800c140 <xQueueReceive>

		speed = quadEncoder_GetSpeedR(); //Get actual speed
 8002cba:	f000 ff8d 	bl	8003bd8 <quadEncoder_GetSpeedR>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	613b      	str	r3, [r7, #16]
		//Calculate term of correcteur
		err=consigne-speed;
 8002cc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	617b      	str	r3, [r7, #20]
		up=RKp*(float)err;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	ee07 3a90 	vmov	s15, r3
 8002cd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cd8:	ee17 0a90 	vmov	r0, s15
 8002cdc:	f7fd fc4c 	bl	8000578 <__aeabi_f2d>
 8002ce0:	a323      	add	r3, pc, #140	; (adr r3, 8002d70 <task_Motor_Right+0xe8>)
 8002ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce6:	f7fd fc9f 	bl	8000628 <__aeabi_dmul>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	4610      	mov	r0, r2
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	f7fd ff33 	bl	8000b5c <__aeabi_d2f>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	61bb      	str	r3, [r7, #24]
		ui=ui+RKp*RKi*(float)err;
 8002cfa:	69f8      	ldr	r0, [r7, #28]
 8002cfc:	f7fd fc3c 	bl	8000578 <__aeabi_f2d>
 8002d00:	4604      	mov	r4, r0
 8002d02:	460d      	mov	r5, r1
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	ee07 3a90 	vmov	s15, r3
 8002d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d0e:	ee17 0a90 	vmov	r0, s15
 8002d12:	f7fd fc31 	bl	8000578 <__aeabi_f2d>
 8002d16:	a318      	add	r3, pc, #96	; (adr r3, 8002d78 <task_Motor_Right+0xf0>)
 8002d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1c:	f7fd fc84 	bl	8000628 <__aeabi_dmul>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4620      	mov	r0, r4
 8002d26:	4629      	mov	r1, r5
 8002d28:	f7fd fac8 	bl	80002bc <__adddf3>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4610      	mov	r0, r2
 8002d32:	4619      	mov	r1, r3
 8002d34:	f7fd ff12 	bl	8000b5c <__aeabi_d2f>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	61fb      	str	r3, [r7, #28]

		motorRight_SetDuty(100+(int)(up+ui)); //Set duty cycle of the motor
 8002d3c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d40:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d4c:	ee17 3a90 	vmov	r3, s15
 8002d50:	3364      	adds	r3, #100	; 0x64
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 fe22 	bl	800399c <motorRight_SetDuty>

		xSemaphoreGive(xSem_Supervision);//Give semaphore to liberate the decision task
 8002d58:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <task_Motor_Right+0xfc>)
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2100      	movs	r1, #0
 8002d62:	f009 f853 	bl	800be0c <xQueueGenericSend>
		vTaskDelay(SAMPLING_PERIOD_ms);
 8002d66:	2005      	movs	r0, #5
 8002d68:	f009 ff32 	bl	800cbd0 <vTaskDelay>
		xQueueReceive(q_mot_R, &consigne, portMAX_DELAY); //receive wanted speed
 8002d6c:	e79c      	b.n	8002ca8 <task_Motor_Right+0x20>
 8002d6e:	bf00      	nop
 8002d70:	d2f1a9fc 	.word	0xd2f1a9fc
 8002d74:	3f50624d 	.word	0x3f50624d
 8002d78:	47ae147b 	.word	0x47ae147b
 8002d7c:	3f547ae1 	.word	0x3f547ae1
 8002d80:	20004bf0 	.word	0x20004bf0
 8002d84:	20004be8 	.word	0x20004be8

08002d88 <task_VL53>:
	}
}

#if VL53
void task_VL53(void *pvParameters)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
	static uint16_t dist;
	static const int SEUIL = 20; //Trigger
	int obs = 0; //Bool to indicate if we detect an obstacle or not
 8002d90:	2300      	movs	r3, #0
 8002d92:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		dist = readRangeSingleMillimeters()/10; //Get the distance from the sensor
 8002d94:	f7fe fb86 	bl	80014a4 <readRangeSingleMillimeters>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <task_VL53+0x6c>)
 8002d9e:	fba3 2302 	umull	r2, r3, r3, r2
 8002da2:	08db      	lsrs	r3, r3, #3
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	4b14      	ldr	r3, [pc, #80]	; (8002df8 <task_VL53+0x70>)
 8002da8:	801a      	strh	r2, [r3, #0]

		if (dist < SEUIL && dist != 0) //If distance is less than the trigger
 8002daa:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <task_VL53+0x70>)
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <task_VL53+0x74>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	da06      	bge.n	8002dc6 <task_VL53+0x3e>
 8002db8:	4b0f      	ldr	r3, [pc, #60]	; (8002df8 <task_VL53+0x70>)
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <task_VL53+0x3e>
			obs = 1; //We detect an obstacle
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	e001      	b.n	8002dca <task_VL53+0x42>
		else
			obs = 0; //We do not detect an obstacle
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]

		if (!uxQueueMessagesWaiting(qhVl53)) //If no data in queue
 8002dca:	4b0d      	ldr	r3, [pc, #52]	; (8002e00 <task_VL53+0x78>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f009 fba2 	bl	800c518 <uxQueueMessagesWaiting>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d108      	bne.n	8002dec <task_VL53+0x64>
			xQueueSend(qhVl53, (void *)&obs, portMAX_DELAY); //Send data
 8002dda:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <task_VL53+0x78>)
 8002ddc:	6818      	ldr	r0, [r3, #0]
 8002dde:	f107 010c 	add.w	r1, r7, #12
 8002de2:	2300      	movs	r3, #0
 8002de4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002de8:	f009 f810 	bl	800be0c <xQueueGenericSend>

		vTaskDelay(SAMPLING_PERIOD_ms);
 8002dec:	2005      	movs	r0, #5
 8002dee:	f009 feef 	bl	800cbd0 <vTaskDelay>
		dist = readRangeSingleMillimeters()/10; //Get the distance from the sensor
 8002df2:	e7cf      	b.n	8002d94 <task_VL53+0xc>
 8002df4:	cccccccd 	.word	0xcccccccd
 8002df8:	20004c04 	.word	0x20004c04
 8002dfc:	0801b788 	.word	0x0801b788
 8002e00:	20004c00 	.word	0x20004c00

08002e04 <task_Grove_LCD>:
#endif //VL53


#if LCD
void task_Grove_LCD(void *pvParameters)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
#elif SYNCHRO_EX == EXFINAL
	AMessage pxRxedMessage;

	for(;;)
	{
		if (uxQueueMessagesWaiting(qhLCD)) //If data in the queue
 8002e0c:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <task_Grove_LCD+0x70>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f009 fb81 	bl	800c518 <uxQueueMessagesWaiting>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d026      	beq.n	8002e6a <task_Grove_LCD+0x66>
		{
			xQueueReceive(qhLCD, &pxRxedMessage, portMAX_DELAY); //Receive data
 8002e1c:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <task_Grove_LCD+0x70>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f107 0108 	add.w	r1, r7, #8
 8002e24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f009 f989 	bl	800c140 <xQueueReceive>
			int mode = pxRxedMessage.data;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	617b      	str	r3, [r7, #20]
			char direction=pxRxedMessage.command;
 8002e32:	7a3b      	ldrb	r3, [r7, #8]
 8002e34:	74fb      	strb	r3, [r7, #19]
			groveLCD_setCursor(0,0);
 8002e36:	2100      	movs	r1, #0
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f7ff f959 	bl	80020f0 <groveLCD_setCursor>
			//Write on screen information about mode
			if (mode == MODE_OBS)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d105      	bne.n	8002e50 <task_Grove_LCD+0x4c>
				groveLCD_term_printf("M:Obstacle  D:%c", direction);
 8002e44:	7cfb      	ldrb	r3, [r7, #19]
 8002e46:	4619      	mov	r1, r3
 8002e48:	480b      	ldr	r0, [pc, #44]	; (8002e78 <task_Grove_LCD+0x74>)
 8002e4a:	f7ff fa21 	bl	8002290 <groveLCD_term_printf>
 8002e4e:	e00c      	b.n	8002e6a <task_Grove_LCD+0x66>
			else if (mode == MODE_ZIG)
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d103      	bne.n	8002e5e <task_Grove_LCD+0x5a>
				groveLCD_term_printf("M:Manuel        ");
 8002e56:	4809      	ldr	r0, [pc, #36]	; (8002e7c <task_Grove_LCD+0x78>)
 8002e58:	f7ff fa1a 	bl	8002290 <groveLCD_term_printf>
 8002e5c:	e005      	b.n	8002e6a <task_Grove_LCD+0x66>
			else if (mode == MODE_CAM)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d102      	bne.n	8002e6a <task_Grove_LCD+0x66>
				groveLCD_term_printf("M:Camera        ");
 8002e64:	4806      	ldr	r0, [pc, #24]	; (8002e80 <task_Grove_LCD+0x7c>)
 8002e66:	f7ff fa13 	bl	8002290 <groveLCD_term_printf>
		}

		vTaskDelay(SAMPLING_PERIOD_ms);
 8002e6a:	2005      	movs	r0, #5
 8002e6c:	f009 feb0 	bl	800cbd0 <vTaskDelay>
		if (uxQueueMessagesWaiting(qhLCD)) //If data in the queue
 8002e70:	e7cc      	b.n	8002e0c <task_Grove_LCD+0x8>
 8002e72:	bf00      	nop
 8002e74:	20004bfc 	.word	0x20004bfc
 8002e78:	0801b554 	.word	0x0801b554
 8002e7c:	0801b568 	.word	0x0801b568
 8002e80:	0801b57c 	.word	0x0801b57c

08002e84 <task_Supervision>:
#endif //SYNCHRO_EX
}
#endif //LCD

void task_Supervision(void *pvParameters)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b090      	sub	sp, #64	; 0x40
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
	int16_t speedLeft; //Motor left speed
	int16_t speedRight; //Motor rigth speed

	int table[2]; //VL53L0X sensors values
	#if VL53
	int vl53 = 0; //VL530X detect an obstacle or not
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	633b      	str	r3, [r7, #48]	; 0x30
#endif //MICROROS

	for (;;)
	{
		#if MICROROS
		if (uxQueueMessagesWaiting(qhMR_sub)) //If data  are in the the queue
 8002e90:	4b9a      	ldr	r3, [pc, #616]	; (80030fc <task_Supervision+0x278>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f009 fb3f 	bl	800c518 <uxQueueMessagesWaiting>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d029      	beq.n	8002ef4 <task_Supervision+0x70>
		{
			xQueueReceive(qhMR_sub, &SubToMsg, portMAX_DELAY); //Receive data
 8002ea0:	4b96      	ldr	r3, [pc, #600]	; (80030fc <task_Supervision+0x278>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f107 0114 	add.w	r1, r7, #20
 8002ea8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002eac:	4618      	mov	r0, r3
 8002eae:	f009 f947 	bl	800c140 <xQueueReceive>
			//Set mode, speed and direction if the data is correct
			if (SubToMsg.mode >= 0 && SubToMsg.mode < LAST_MODE)
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	db05      	blt.n	8002ec4 <task_Supervision+0x40>
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	dc02      	bgt.n	8002ec4 <task_Supervision+0x40>
				mode = SubToMsg.mode;
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	4a8f      	ldr	r2, [pc, #572]	; (8003100 <task_Supervision+0x27c>)
 8002ec2:	6013      	str	r3, [r2, #0]
			if (SubToMsg.dir >= 0 && SubToMsg.dir < LAST_DIR)
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	db05      	blt.n	8002ed6 <task_Supervision+0x52>
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	dc02      	bgt.n	8002ed6 <task_Supervision+0x52>
				direction = SubToMsg.dir;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	4a8c      	ldr	r2, [pc, #560]	; (8003104 <task_Supervision+0x280>)
 8002ed4:	6013      	str	r3, [r2, #0]
			if (SubToMsg.speed > 0 && SubToMsg.speed < LAST_SPEED)
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	dd05      	ble.n	8002ee8 <task_Supervision+0x64>
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	2b63      	cmp	r3, #99	; 0x63
 8002ee0:	dc02      	bgt.n	8002ee8 <task_Supervision+0x64>
				speed = SubToMsg.speed;
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	4a88      	ldr	r2, [pc, #544]	; (8003108 <task_Supervision+0x284>)
 8002ee6:	6013      	str	r3, [r2, #0]
			//Set x and y position
			x = SubToMsg.x;
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	4a88      	ldr	r2, [pc, #544]	; (800310c <task_Supervision+0x288>)
 8002eec:	6013      	str	r3, [r2, #0]
			y = SubToMsg.y;
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	4a87      	ldr	r2, [pc, #540]	; (8003110 <task_Supervision+0x28c>)
 8002ef2:	6013      	str	r3, [r2, #0]
			printf("%cc%c[2J%c[0;0HVariable to make decision : \n\rDirection : %d\r\nMode: %d\r\nSpeed : %d\r\nX: %d\r\nY : %d\r\n", 0x1b, 0x1b, 0x1b, direction, mode, speed, x, y);
			#endif //DEBUG_PRINTF
		}
		#endif //MICROROS

		if (mode == MODE_ZIG) //Mode manual
 8002ef4:	4b82      	ldr	r3, [pc, #520]	; (8003100 <task_Supervision+0x27c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	f040 80e3 	bne.w	80030c4 <task_Supervision+0x240>
		{
			dir = 'N'; //No direction information
 8002efe:	4b85      	ldr	r3, [pc, #532]	; (8003114 <task_Supervision+0x290>)
 8002f00:	224e      	movs	r2, #78	; 0x4e
 8002f02:	701a      	strb	r2, [r3, #0]
			obs = 0; //No obstacle
 8002f04:	4b84      	ldr	r3, [pc, #528]	; (8003118 <task_Supervision+0x294>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
			switch(direction) //Set the motor speed depending of the direction variable
 8002f0a:	4b7e      	ldr	r3, [pc, #504]	; (8003104 <task_Supervision+0x280>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	f200 80d3 	bhi.w	80030ba <task_Supervision+0x236>
 8002f14:	a201      	add	r2, pc, #4	; (adr r2, 8002f1c <task_Supervision+0x98>)
 8002f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1a:	bf00      	nop
 8002f1c:	08002f4b 	.word	0x08002f4b
 8002f20:	08002fd5 	.word	0x08002fd5
 8002f24:	08002f79 	.word	0x08002f79
 8002f28:	08002fa7 	.word	0x08002fa7
 8002f2c:	08002f41 	.word	0x08002f41
 8002f30:	08003003 	.word	0x08003003
 8002f34:	0800302f 	.word	0x0800302f
 8002f38:	0800305b 	.word	0x0800305b
 8002f3c:	0800308b 	.word	0x0800308b
			{
				case STOP:
					speedLeft = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8002f48:	e19f      	b.n	800328a <task_Supervision+0x406>
				case AVANT:
					speedLeft = VITESSE_KART+(8*(speed-50));
 8002f4a:	4b6f      	ldr	r3, [pc, #444]	; (8003108 <task_Supervision+0x284>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	3b32      	subs	r3, #50	; 0x32
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	b21b      	sxth	r3, r3
 8002f5e:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = VITESSE_KART+(8*(speed-50));
 8002f60:	4b69      	ldr	r3, [pc, #420]	; (8003108 <task_Supervision+0x284>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	3b32      	subs	r3, #50	; 0x32
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	b21b      	sxth	r3, r3
 8002f74:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8002f76:	e188      	b.n	800328a <task_Supervision+0x406>
				case RECULE:
					speedLeft = -(VITESSE_KART+(8*(speed-50)));
 8002f78:	4b63      	ldr	r3, [pc, #396]	; (8003108 <task_Supervision+0x284>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	3b32      	subs	r3, #50	; 0x32
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	4b65      	ldr	r3, [pc, #404]	; (800311c <task_Supervision+0x298>)
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	b21b      	sxth	r3, r3
 8002f8c:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = -(VITESSE_KART+(8*(speed-50)));
 8002f8e:	4b5e      	ldr	r3, [pc, #376]	; (8003108 <task_Supervision+0x284>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	3b32      	subs	r3, #50	; 0x32
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	4b60      	ldr	r3, [pc, #384]	; (800311c <task_Supervision+0x298>)
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	b21b      	sxth	r3, r3
 8002fa2:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8002fa4:	e171      	b.n	800328a <task_Supervision+0x406>
				case DROITE:
					speedLeft = VITESSE_KART+(8*(speed-50));
 8002fa6:	4b58      	ldr	r3, [pc, #352]	; (8003108 <task_Supervision+0x284>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	3b32      	subs	r3, #50	; 0x32
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	b21b      	sxth	r3, r3
 8002fba:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = -(VITESSE_KART+(8*(speed-50)));
 8002fbc:	4b52      	ldr	r3, [pc, #328]	; (8003108 <task_Supervision+0x284>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	3b32      	subs	r3, #50	; 0x32
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	4b54      	ldr	r3, [pc, #336]	; (800311c <task_Supervision+0x298>)
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	b21b      	sxth	r3, r3
 8002fd0:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8002fd2:	e15a      	b.n	800328a <task_Supervision+0x406>
				case GAUCHE:
					speedLeft = -(VITESSE_KART+(8*(speed-50)));
 8002fd4:	4b4c      	ldr	r3, [pc, #304]	; (8003108 <task_Supervision+0x284>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3b32      	subs	r3, #50	; 0x32
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	4b4e      	ldr	r3, [pc, #312]	; (800311c <task_Supervision+0x298>)
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	b21b      	sxth	r3, r3
 8002fe8:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = VITESSE_KART+(8*(speed-50));
 8002fea:	4b47      	ldr	r3, [pc, #284]	; (8003108 <task_Supervision+0x284>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	3b32      	subs	r3, #50	; 0x32
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	b21b      	sxth	r3, r3
 8002ffe:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8003000:	e143      	b.n	800328a <task_Supervision+0x406>
				case AVANT_GAUCHE:
					speedLeft = (VITESSE_KART/2)+(8*(speed-50));
 8003002:	4b41      	ldr	r3, [pc, #260]	; (8003108 <task_Supervision+0x284>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	3b32      	subs	r3, #50	; 0x32
 8003008:	b29b      	uxth	r3, r3
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	b29b      	uxth	r3, r3
 800300e:	33fa      	adds	r3, #250	; 0xfa
 8003010:	b29b      	uxth	r3, r3
 8003012:	b21b      	sxth	r3, r3
 8003014:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = VITESSE_KART+(8*(speed-50));
 8003016:	4b3c      	ldr	r3, [pc, #240]	; (8003108 <task_Supervision+0x284>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	3b32      	subs	r3, #50	; 0x32
 800301c:	b29b      	uxth	r3, r3
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	b29b      	uxth	r3, r3
 8003022:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003026:	b29b      	uxth	r3, r3
 8003028:	b21b      	sxth	r3, r3
 800302a:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 800302c:	e12d      	b.n	800328a <task_Supervision+0x406>
				case AVANT_DROITE:
					speedLeft = VITESSE_KART+(8*(speed-50));
 800302e:	4b36      	ldr	r3, [pc, #216]	; (8003108 <task_Supervision+0x284>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	3b32      	subs	r3, #50	; 0x32
 8003034:	b29b      	uxth	r3, r3
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	b29b      	uxth	r3, r3
 800303a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800303e:	b29b      	uxth	r3, r3
 8003040:	b21b      	sxth	r3, r3
 8003042:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = (VITESSE_KART/2)+(8*(speed-50));
 8003044:	4b30      	ldr	r3, [pc, #192]	; (8003108 <task_Supervision+0x284>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	3b32      	subs	r3, #50	; 0x32
 800304a:	b29b      	uxth	r3, r3
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	b29b      	uxth	r3, r3
 8003050:	33fa      	adds	r3, #250	; 0xfa
 8003052:	b29b      	uxth	r3, r3
 8003054:	b21b      	sxth	r3, r3
 8003056:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8003058:	e117      	b.n	800328a <task_Supervision+0x406>
				case RECULE_GAUCHE:
					speedLeft = -(VITESSE_KART+(8*(speed-50)));
 800305a:	4b2b      	ldr	r3, [pc, #172]	; (8003108 <task_Supervision+0x284>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3b32      	subs	r3, #50	; 0x32
 8003060:	b29b      	uxth	r3, r3
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	b29a      	uxth	r2, r3
 8003066:	4b2d      	ldr	r3, [pc, #180]	; (800311c <task_Supervision+0x298>)
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	b29b      	uxth	r3, r3
 800306c:	b21b      	sxth	r3, r3
 800306e:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = -((VITESSE_KART/2)+(8*(speed-50)));
 8003070:	4b25      	ldr	r3, [pc, #148]	; (8003108 <task_Supervision+0x284>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3b32      	subs	r3, #50	; 0x32
 8003076:	b29b      	uxth	r3, r3
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	b29a      	uxth	r2, r3
 800307c:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8003080:	1a9b      	subs	r3, r3, r2
 8003082:	b29b      	uxth	r3, r3
 8003084:	b21b      	sxth	r3, r3
 8003086:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8003088:	e0ff      	b.n	800328a <task_Supervision+0x406>
				case RECULE_DROITE:
					speedLeft = -((VITESSE_KART/2)+(8*(speed-50)));
 800308a:	4b1f      	ldr	r3, [pc, #124]	; (8003108 <task_Supervision+0x284>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	3b32      	subs	r3, #50	; 0x32
 8003090:	b29b      	uxth	r3, r3
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	b29a      	uxth	r2, r3
 8003096:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 800309a:	1a9b      	subs	r3, r3, r2
 800309c:	b29b      	uxth	r3, r3
 800309e:	b21b      	sxth	r3, r3
 80030a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = -(VITESSE_KART+(8*(speed-50)));
 80030a2:	4b19      	ldr	r3, [pc, #100]	; (8003108 <task_Supervision+0x284>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3b32      	subs	r3, #50	; 0x32
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	4b1b      	ldr	r3, [pc, #108]	; (800311c <task_Supervision+0x298>)
 80030b0:	1a9b      	subs	r3, r3, r2
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	b21b      	sxth	r3, r3
 80030b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 80030b8:	e0e7      	b.n	800328a <task_Supervision+0x406>
				default:
					speedLeft = 0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = 0;
 80030be:	2300      	movs	r3, #0
 80030c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 80030c2:	e0e2      	b.n	800328a <task_Supervision+0x406>
			}
		}
		else if (mode == MODE_OBS) //Mode obstacle
 80030c4:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <task_Supervision+0x27c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f040 80a7 	bne.w	800321c <task_Supervision+0x398>
		{
			//Get sensors informations
			captDistIR_Get(table);
 80030ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fe fa64 	bl	80015a0 <captDistIR_Get>
			#if VL53
			if (uxQueueMessagesWaiting(qhVl53))
 80030d8:	4b11      	ldr	r3, [pc, #68]	; (8003120 <task_Supervision+0x29c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f009 fa1b 	bl	800c518 <uxQueueMessagesWaiting>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d01d      	beq.n	8003124 <task_Supervision+0x2a0>
				xQueueReceive(qhVl53, &vl53, portMAX_DELAY);
 80030e8:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <task_Supervision+0x29c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80030f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030f4:	4618      	mov	r0, r3
 80030f6:	f009 f823 	bl	800c140 <xQueueReceive>
 80030fa:	e015      	b.n	8003128 <task_Supervision+0x2a4>
 80030fc:	20004bf4 	.word	0x20004bf4
 8003100:	20000004 	.word	0x20000004
 8003104:	20000008 	.word	0x20000008
 8003108:	2000000c 	.word	0x2000000c
 800310c:	20004c08 	.word	0x20004c08
 8003110:	20004c0c 	.word	0x20004c0c
 8003114:	20000010 	.word	0x20000010
 8003118:	20004c10 	.word	0x20004c10
 800311c:	fffffe0c 	.word	0xfffffe0c
 8003120:	20004c00 	.word	0x20004c00
			else
				vl53 = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	633b      	str	r3, [r7, #48]	; 0x30

			if (vl53 == 1) //if an obstacle is detected on the back we stop
 8003128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312a:	2b01      	cmp	r3, #1
 800312c:	d111      	bne.n	8003152 <task_Supervision+0x2ce>
			{
				if (dir != 'S')
 800312e:	4b82      	ldr	r3, [pc, #520]	; (8003338 <task_Supervision+0x4b4>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b53      	cmp	r3, #83	; 0x53
 8003134:	d002      	beq.n	800313c <task_Supervision+0x2b8>
					printf("Detection d'un obstacle à l'arrièrre");
 8003136:	4881      	ldr	r0, [pc, #516]	; (800333c <task_Supervision+0x4b8>)
 8003138:	f016 ff86 	bl	801a048 <iprintf>
				speedLeft = 0;
 800313c:	2300      	movs	r3, #0
 800313e:	87fb      	strh	r3, [r7, #62]	; 0x3e
				speedRight = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	87bb      	strh	r3, [r7, #60]	; 0x3c
				dir = 'S';
 8003144:	4b7c      	ldr	r3, [pc, #496]	; (8003338 <task_Supervision+0x4b4>)
 8003146:	2253      	movs	r2, #83	; 0x53
 8003148:	701a      	strb	r2, [r3, #0]
				obs = 1;
 800314a:	4b7d      	ldr	r3, [pc, #500]	; (8003340 <task_Supervision+0x4bc>)
 800314c:	2201      	movs	r2, #1
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	e09b      	b.n	800328a <task_Supervision+0x406>
			}
			else
			#endif //VL53
			if (table[0] > SEUIL_DIST_SENSOR || table[1] > SEUIL_DIST_SENSOR) //We have an obstacle in front of the robot
 8003152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003154:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003158:	dc03      	bgt.n	8003162 <task_Supervision+0x2de>
 800315a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003160:	dd4f      	ble.n	8003202 <task_Supervision+0x37e>
			{
				if (obs > 10) //If we detect more than 10 different obstacle we turn on the left until they are no more obstacle
 8003162:	4b77      	ldr	r3, [pc, #476]	; (8003340 <task_Supervision+0x4bc>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b0a      	cmp	r3, #10
 8003168:	dd09      	ble.n	800317e <task_Supervision+0x2fa>
				{
					speedLeft = VITESSE_OBS/2;
 800316a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800316e:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = -VITESSE_OBS/2;
 8003170:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 8003174:	87bb      	strh	r3, [r7, #60]	; 0x3c
					dir = 'G';
 8003176:	4b70      	ldr	r3, [pc, #448]	; (8003338 <task_Supervision+0x4b4>)
 8003178:	2247      	movs	r2, #71	; 0x47
 800317a:	701a      	strb	r2, [r3, #0]
				if (obs > 10) //If we detect more than 10 different obstacle we turn on the left until they are no more obstacle
 800317c:	e084      	b.n	8003288 <task_Supervision+0x404>
				}
				else
				{
					speedLeft = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = 0;
 8003182:	2300      	movs	r3, #0
 8003184:	87bb      	strh	r3, [r7, #60]	; 0x3c

					if (table[0] > table[1] && table[0] > SEUIL_DIST_SENSOR) //We have an obstacle on our right
 8003186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318a:	429a      	cmp	r2, r3
 800318c:	dd18      	ble.n	80031c0 <task_Supervision+0x33c>
 800318e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003190:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003194:	dd14      	ble.n	80031c0 <task_Supervision+0x33c>
					{
						dir = 'G';
 8003196:	4b68      	ldr	r3, [pc, #416]	; (8003338 <task_Supervision+0x4b4>)
 8003198:	2247      	movs	r2, #71	; 0x47
 800319a:	701a      	strb	r2, [r3, #0]
						speedLeft = -VITESSE_OBS/2;
 800319c:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 80031a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
						speedRight = VITESSE_OBS/2;
 80031a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80031a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
						if (obs%2 == 0)
 80031a8:	4b65      	ldr	r3, [pc, #404]	; (8003340 <task_Supervision+0x4bc>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d125      	bne.n	8003200 <task_Supervision+0x37c>
							obs++;
 80031b4:	4b62      	ldr	r3, [pc, #392]	; (8003340 <task_Supervision+0x4bc>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	3301      	adds	r3, #1
 80031ba:	4a61      	ldr	r2, [pc, #388]	; (8003340 <task_Supervision+0x4bc>)
 80031bc:	6013      	str	r3, [r2, #0]
						if (obs%2 == 0)
 80031be:	e01f      	b.n	8003200 <task_Supervision+0x37c>
					}
					else if (table[0] < table[1] && table[1] > SEUIL_DIST_SENSOR) //We have an obstacle on left right
 80031c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c4:	429a      	cmp	r2, r3
 80031c6:	da5f      	bge.n	8003288 <task_Supervision+0x404>
 80031c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ca:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80031ce:	dd5b      	ble.n	8003288 <task_Supervision+0x404>
					{
						dir = 'D';
 80031d0:	4b59      	ldr	r3, [pc, #356]	; (8003338 <task_Supervision+0x4b4>)
 80031d2:	2244      	movs	r2, #68	; 0x44
 80031d4:	701a      	strb	r2, [r3, #0]
						speedLeft = VITESSE_OBS/2;
 80031d6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80031da:	87fb      	strh	r3, [r7, #62]	; 0x3e
						speedRight = -VITESSE_OBS/2;
 80031dc:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 80031e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
						if (obs%2 == 1)
 80031e2:	4b57      	ldr	r3, [pc, #348]	; (8003340 <task_Supervision+0x4bc>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	bfb8      	it	lt
 80031ee:	425b      	neglt	r3, r3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d149      	bne.n	8003288 <task_Supervision+0x404>
							obs++;
 80031f4:	4b52      	ldr	r3, [pc, #328]	; (8003340 <task_Supervision+0x4bc>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3301      	adds	r3, #1
 80031fa:	4a51      	ldr	r2, [pc, #324]	; (8003340 <task_Supervision+0x4bc>)
 80031fc:	6013      	str	r3, [r2, #0]
				if (obs > 10) //If we detect more than 10 different obstacle we turn on the left until they are no more obstacle
 80031fe:	e043      	b.n	8003288 <task_Supervision+0x404>
 8003200:	e042      	b.n	8003288 <task_Supervision+0x404>
					}
				}
			}
			else //No obstacle
			{
				speedLeft = VITESSE_OBS;
 8003202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003206:	87fb      	strh	r3, [r7, #62]	; 0x3e
				speedRight = VITESSE_OBS;
 8003208:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800320c:	87bb      	strh	r3, [r7, #60]	; 0x3c
				dir = 'F';
 800320e:	4b4a      	ldr	r3, [pc, #296]	; (8003338 <task_Supervision+0x4b4>)
 8003210:	2246      	movs	r2, #70	; 0x46
 8003212:	701a      	strb	r2, [r3, #0]
				obs = 0;
 8003214:	4b4a      	ldr	r3, [pc, #296]	; (8003340 <task_Supervision+0x4bc>)
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	e036      	b.n	800328a <task_Supervision+0x406>
			}
		}
		else if (mode == MODE_CAM) //Mode camera
 800321c:	4b49      	ldr	r3, [pc, #292]	; (8003344 <task_Supervision+0x4c0>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d132      	bne.n	800328a <task_Supervision+0x406>
		{
			dir = 'N';
 8003224:	4b44      	ldr	r3, [pc, #272]	; (8003338 <task_Supervision+0x4b4>)
 8003226:	224e      	movs	r2, #78	; 0x4e
 8003228:	701a      	strb	r2, [r3, #0]
			obs = 0;
 800322a:	4b45      	ldr	r3, [pc, #276]	; (8003340 <task_Supervision+0x4bc>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]

			if(x < 0 || y < 0) //No object
 8003230:	4b45      	ldr	r3, [pc, #276]	; (8003348 <task_Supervision+0x4c4>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	db03      	blt.n	8003240 <task_Supervision+0x3bc>
 8003238:	4b44      	ldr	r3, [pc, #272]	; (800334c <task_Supervision+0x4c8>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	da04      	bge.n	800324a <task_Supervision+0x3c6>
			{
				speedLeft = 0;
 8003240:	2300      	movs	r3, #0
 8003242:	87fb      	strh	r3, [r7, #62]	; 0x3e
				speedRight = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003248:	e01f      	b.n	800328a <task_Supervision+0x406>
			}
			else //Try to keep the object on the center
			{
				speedLeft = VITESSE_CAM - ((CAMERA_X_MAX/2 - x))/3; // (int) (((float) ((x-CAMERA_X_MAX/2)/CAMERA_X_MAX))*500);
 800324a:	4b3f      	ldr	r3, [pc, #252]	; (8003348 <task_Supervision+0x4c4>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8003252:	4a3f      	ldr	r2, [pc, #252]	; (8003350 <task_Supervision+0x4cc>)
 8003254:	fb82 1203 	smull	r1, r2, r2, r3
 8003258:	17db      	asrs	r3, r3, #31
 800325a:	1a9b      	subs	r3, r3, r2
 800325c:	b29b      	uxth	r3, r3
 800325e:	f203 134d 	addw	r3, r3, #333	; 0x14d
 8003262:	b29b      	uxth	r3, r3
 8003264:	b21b      	sxth	r3, r3
 8003266:	87fb      	strh	r3, [r7, #62]	; 0x3e
				speedRight = VITESSE_CAM + ((CAMERA_X_MAX/2 - x))/3; // (int) (((float) (x/CAMERA_X_MAX))*500);
 8003268:	4b37      	ldr	r3, [pc, #220]	; (8003348 <task_Supervision+0x4c4>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8003270:	4a37      	ldr	r2, [pc, #220]	; (8003350 <task_Supervision+0x4cc>)
 8003272:	fb82 1203 	smull	r1, r2, r2, r3
 8003276:	17db      	asrs	r3, r3, #31
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	b29b      	uxth	r3, r3
 800327c:	f203 134d 	addw	r3, r3, #333	; 0x14d
 8003280:	b29b      	uxth	r3, r3
 8003282:	b21b      	sxth	r3, r3
 8003284:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003286:	e000      	b.n	800328a <task_Supervision+0x406>
				if (obs > 10) //If we detect more than 10 different obstacle we turn on the left until they are no more obstacle
 8003288:	bf00      	nop

		#if DEBUG_MOTOR
		printf("Motor L : %d || R : %d\r\n", speedLeft, speedRight);
		#endif

		xQueueSend( q_mot_L, ( void * ) &speedLeft,  portMAX_DELAY ); //Send motor left speed
 800328a:	4b32      	ldr	r3, [pc, #200]	; (8003354 <task_Supervision+0x4d0>)
 800328c:	6818      	ldr	r0, [r3, #0]
 800328e:	f107 013e 	add.w	r1, r7, #62	; 0x3e
 8003292:	2300      	movs	r3, #0
 8003294:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003298:	f008 fdb8 	bl	800be0c <xQueueGenericSend>
		xSemaphoreTake( xSem_Supervision, portMAX_DELAY );
 800329c:	4b2e      	ldr	r3, [pc, #184]	; (8003358 <task_Supervision+0x4d4>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032a4:	4618      	mov	r0, r3
 80032a6:	f009 f82b 	bl	800c300 <xQueueSemaphoreTake>

		xQueueSend( q_mot_R, ( void * ) &speedRight,  portMAX_DELAY ); //Send motor right speed
 80032aa:	4b2c      	ldr	r3, [pc, #176]	; (800335c <task_Supervision+0x4d8>)
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80032b2:	2300      	movs	r3, #0
 80032b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032b8:	f008 fda8 	bl	800be0c <xQueueGenericSend>
		xSemaphoreTake( xSem_Supervision, portMAX_DELAY );
 80032bc:	4b26      	ldr	r3, [pc, #152]	; (8003358 <task_Supervision+0x4d4>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032c4:	4618      	mov	r0, r3
 80032c6:	f009 f81b 	bl	800c300 <xQueueSemaphoreTake>

	#if MICROROS
		MsgToPub.dir = dir;
 80032ca:	4b1b      	ldr	r3, [pc, #108]	; (8003338 <task_Supervision+0x4b4>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	723b      	strb	r3, [r7, #8]
		MsgToPub.mode = mode;
 80032d0:	4b1c      	ldr	r3, [pc, #112]	; (8003344 <task_Supervision+0x4c0>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	60fb      	str	r3, [r7, #12]
		MsgToPub.speed = speed;
 80032d6:	4b22      	ldr	r3, [pc, #136]	; (8003360 <task_Supervision+0x4dc>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	613b      	str	r3, [r7, #16]
		if (!uxQueueMessagesWaiting(qhMR_pub)) //If no data in queue
 80032dc:	4b21      	ldr	r3, [pc, #132]	; (8003364 <task_Supervision+0x4e0>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f009 f919 	bl	800c518 <uxQueueMessagesWaiting>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d108      	bne.n	80032fe <task_Supervision+0x47a>
			xQueueSend(qhMR_pub, ( void * ) &MsgToPub, portMAX_DELAY); //Send data
 80032ec:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <task_Supervision+0x4e0>)
 80032ee:	6818      	ldr	r0, [r3, #0]
 80032f0:	f107 0108 	add.w	r1, r7, #8
 80032f4:	2300      	movs	r3, #0
 80032f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032fa:	f008 fd87 	bl	800be0c <xQueueGenericSend>
	#endif //MICROROS

	#if LCD
		if (!uxQueueMessagesWaiting(qhLCD)) //If no data in queue
 80032fe:	4b1a      	ldr	r3, [pc, #104]	; (8003368 <task_Supervision+0x4e4>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f009 f908 	bl	800c518 <uxQueueMessagesWaiting>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10f      	bne.n	800332e <task_Supervision+0x4aa>
		{
			pxMessage.data=mode;
 800330e:	4b0d      	ldr	r3, [pc, #52]	; (8003344 <task_Supervision+0x4c0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	62fb      	str	r3, [r7, #44]	; 0x2c
			pxMessage.command=dir;
 8003314:	4b08      	ldr	r3, [pc, #32]	; (8003338 <task_Supervision+0x4b4>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			xQueueSend( qhLCD, ( void * ) &pxMessage, portMAX_DELAY); //Send data
 800331c:	4b12      	ldr	r3, [pc, #72]	; (8003368 <task_Supervision+0x4e4>)
 800331e:	6818      	ldr	r0, [r3, #0]
 8003320:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003324:	2300      	movs	r3, #0
 8003326:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800332a:	f008 fd6f 	bl	800be0c <xQueueGenericSend>
		}
	#endif //LCD

		vTaskDelay(SAMPLING_PERIOD_ms);
 800332e:	2005      	movs	r0, #5
 8003330:	f009 fc4e 	bl	800cbd0 <vTaskDelay>
		if (uxQueueMessagesWaiting(qhMR_sub)) //If data  are in the the queue
 8003334:	e5ac      	b.n	8002e90 <task_Supervision+0xc>
 8003336:	bf00      	nop
 8003338:	20000010 	.word	0x20000010
 800333c:	0801b590 	.word	0x0801b590
 8003340:	20004c10 	.word	0x20004c10
 8003344:	20000004 	.word	0x20000004
 8003348:	20004c08 	.word	0x20004c08
 800334c:	20004c0c 	.word	0x20004c0c
 8003350:	55555556 	.word	0x55555556
 8003354:	20004bec 	.word	0x20004bec
 8003358:	20004be8 	.word	0x20004be8
 800335c:	20004bf0 	.word	0x20004bf0
 8003360:	2000000c 	.word	0x2000000c
 8003364:	20004bf8 	.word	0x20004bf8
 8003368:	20004bfc 	.word	0x20004bfc

0800336c <main>:
	}
#endif //SYNCHRO_EX
}

int main(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af02      	add	r7, sp, #8
  HAL_Init();
 8003372:	f001 fc99 	bl	8004ca8 <HAL_Init>
  SystemClock_Config();
 8003376:	f001 fa27 	bl	80047c8 <SystemClock_Config>
  MX_GPIO_Init();
 800337a:	f7fe fc59 	bl	8001c30 <MX_GPIO_Init>
  MX_DMA_Init();
 800337e:	f7fe fdcf 	bl	8001f20 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003382:	f7fe fda3 	bl	8001ecc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003386:	f7fe fced 	bl	8001d64 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800338a:	f7fe fd75 	bl	8001e78 <MX_USART1_UART_Init>

  RetargetInit(&huart2); //make printf and scanf work with uart2
 800338e:	485a      	ldr	r0, [pc, #360]	; (80034f8 <main+0x18c>)
 8003390:	f000 fcc0 	bl	8003d14 <RetargetInit>
  printf("%cc%c[2J%c[0;0HTitouan//Jeremy//Louanne//Donald\r\n", 0x1b, 0x1b, 0x1b);
 8003394:	231b      	movs	r3, #27
 8003396:	221b      	movs	r2, #27
 8003398:	211b      	movs	r1, #27
 800339a:	4858      	ldr	r0, [pc, #352]	; (80034fc <main+0x190>)
 800339c:	f016 fe54 	bl	801a048 <iprintf>

  motorCommand_Init();
 80033a0:	f000 fa92 	bl	80038c8 <motorCommand_Init>
  quadEncoder_Init();
 80033a4:	f000 fb0a 	bl	80039bc <quadEncoder_Init>
  captDistIR_Init();
 80033a8:	f7fe f8c8 	bl	800153c <captDistIR_Init>

  HAL_Delay(500);
 80033ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033b0:	f001 fcbc 	bl	8004d2c <HAL_Delay>

#if VL53
  initVL53L0X();
 80033b4:	f7fd fe70 	bl	8001098 <initVL53L0X>
  HAL_Delay(500);
 80033b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033bc:	f001 fcb6 	bl	8004d2c <HAL_Delay>
#endif //VL53

  // Test Ecran LCD
#if LCD
  groveLCD_begin(16,2,0); // !! cette fonction prend du temps
 80033c0:	2200      	movs	r2, #0
 80033c2:	2102      	movs	r1, #2
 80033c4:	2010      	movs	r0, #16
 80033c6:	f7fe fe01 	bl	8001fcc <groveLCD_begin>
  HAL_Delay(100);
 80033ca:	2064      	movs	r0, #100	; 0x64
 80033cc:	f001 fcae 	bl	8004d2c <HAL_Delay>
  groveLCD_setCursor(0,0);
 80033d0:	2100      	movs	r1, #0
 80033d2:	2000      	movs	r0, #0
 80033d4:	f7fe fe8c 	bl	80020f0 <groveLCD_setCursor>
  groveLCD_setColor(1);
 80033d8:	2001      	movs	r0, #1
 80033da:	f7fe ff2f 	bl	800223c <groveLCD_setColor>
  groveLCD_term_printf("Titouan//Jeremy//Louanne");
 80033de:	4848      	ldr	r0, [pc, #288]	; (8003500 <main+0x194>)
 80033e0:	f7fe ff56 	bl	8002290 <groveLCD_term_printf>
  HAL_Delay(1000);
 80033e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033e8:	f001 fca0 	bl	8004d2c <HAL_Delay>
#endif //LCD

  osKernelInitialize();
 80033ec:	f008 fa82 	bl	800b8f4 <osKernelInitialize>
	xTaskCreate(test_vl53, ( const portCHAR * ) "test_vl53", 128 /* stack size */, NULL, tskIDLE_PRIORITY, NULL);
#elif SYNCHRO_EX == EXTEST_MICROROS
    xTaskCreate(microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL, tskIDLE_PRIORITY, NULL);
#elif SYNCHRO_EX == EXFINAL
	#if MICROROS
    xTaskCreate(microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL, 24, NULL);
 80033f0:	2300      	movs	r3, #0
 80033f2:	9301      	str	r3, [sp, #4]
 80033f4:	2318      	movs	r3, #24
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	2300      	movs	r3, #0
 80033fa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80033fe:	4941      	ldr	r1, [pc, #260]	; (8003504 <main+0x198>)
 8003400:	4841      	ldr	r0, [pc, #260]	; (8003508 <main+0x19c>)
 8003402:	f009 fa8a 	bl	800c91a <xTaskCreate>
	#endif //MICROROS
    xTaskCreate(task_Supervision, ( const portCHAR * ) "task Supervision", 128 /* stack size */, NULL, 27, NULL);
 8003406:	2300      	movs	r3, #0
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	231b      	movs	r3, #27
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	2300      	movs	r3, #0
 8003410:	2280      	movs	r2, #128	; 0x80
 8003412:	493e      	ldr	r1, [pc, #248]	; (800350c <main+0x1a0>)
 8003414:	483e      	ldr	r0, [pc, #248]	; (8003510 <main+0x1a4>)
 8003416:	f009 fa80 	bl	800c91a <xTaskCreate>
	xTaskCreate(task_Motor_Left, ( const portCHAR * ) "task Motor Left", 128 /* stack size */, NULL, 25, NULL);
 800341a:	2300      	movs	r3, #0
 800341c:	9301      	str	r3, [sp, #4]
 800341e:	2319      	movs	r3, #25
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	2300      	movs	r3, #0
 8003424:	2280      	movs	r2, #128	; 0x80
 8003426:	493b      	ldr	r1, [pc, #236]	; (8003514 <main+0x1a8>)
 8003428:	483b      	ldr	r0, [pc, #236]	; (8003518 <main+0x1ac>)
 800342a:	f009 fa76 	bl	800c91a <xTaskCreate>
	xTaskCreate(task_Motor_Right, ( const portCHAR * ) "task Motor Right", 128 /* stack size */, NULL, 26, NULL);
 800342e:	2300      	movs	r3, #0
 8003430:	9301      	str	r3, [sp, #4]
 8003432:	231a      	movs	r3, #26
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	2300      	movs	r3, #0
 8003438:	2280      	movs	r2, #128	; 0x80
 800343a:	4938      	ldr	r1, [pc, #224]	; (800351c <main+0x1b0>)
 800343c:	4838      	ldr	r0, [pc, #224]	; (8003520 <main+0x1b4>)
 800343e:	f009 fa6c 	bl	800c91a <xTaskCreate>

	#if VL53
	xTaskCreate(task_VL53, ( const portCHAR * ) "task VL53", 128 /* stack size */, NULL, 23, NULL);
 8003442:	2300      	movs	r3, #0
 8003444:	9301      	str	r3, [sp, #4]
 8003446:	2317      	movs	r3, #23
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	2300      	movs	r3, #0
 800344c:	2280      	movs	r2, #128	; 0x80
 800344e:	4935      	ldr	r1, [pc, #212]	; (8003524 <main+0x1b8>)
 8003450:	4835      	ldr	r0, [pc, #212]	; (8003528 <main+0x1bc>)
 8003452:	f009 fa62 	bl	800c91a <xTaskCreate>
	#endif //VL53

	#if LCD
	xTaskCreate(task_Grove_LCD, ( const portCHAR * ) "task LCD", 128 /* stack size */, NULL, 23, NULL);
 8003456:	2300      	movs	r3, #0
 8003458:	9301      	str	r3, [sp, #4]
 800345a:	2317      	movs	r3, #23
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	2300      	movs	r3, #0
 8003460:	2280      	movs	r2, #128	; 0x80
 8003462:	4932      	ldr	r1, [pc, #200]	; (800352c <main+0x1c0>)
 8003464:	4832      	ldr	r0, [pc, #200]	; (8003530 <main+0x1c4>)
 8003466:	f009 fa58 	bl	800c91a <xTaskCreate>
	#endif //LCD
#endif //SYNCHRO_EX

	//Create the semaphore
    vSemaphoreCreateBinary(xSem_Supervision);
 800346a:	2203      	movs	r2, #3
 800346c:	2100      	movs	r1, #0
 800346e:	2001      	movs	r0, #1
 8003470:	f008 fc6e 	bl	800bd50 <xQueueGenericCreate>
 8003474:	4603      	mov	r3, r0
 8003476:	4a2f      	ldr	r2, [pc, #188]	; (8003534 <main+0x1c8>)
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	4b2e      	ldr	r3, [pc, #184]	; (8003534 <main+0x1c8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d006      	beq.n	8003490 <main+0x124>
 8003482:	4b2c      	ldr	r3, [pc, #176]	; (8003534 <main+0x1c8>)
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	2300      	movs	r3, #0
 8003488:	2200      	movs	r2, #0
 800348a:	2100      	movs	r1, #0
 800348c:	f008 fcbe 	bl	800be0c <xQueueGenericSend>

    //Init all the queue
    q_mot_L = xQueueCreate(1, sizeof(int16_t));
 8003490:	2200      	movs	r2, #0
 8003492:	2102      	movs	r1, #2
 8003494:	2001      	movs	r0, #1
 8003496:	f008 fc5b 	bl	800bd50 <xQueueGenericCreate>
 800349a:	4603      	mov	r3, r0
 800349c:	4a26      	ldr	r2, [pc, #152]	; (8003538 <main+0x1cc>)
 800349e:	6013      	str	r3, [r2, #0]
    q_mot_R = xQueueCreate(1, sizeof(int16_t));
 80034a0:	2200      	movs	r2, #0
 80034a2:	2102      	movs	r1, #2
 80034a4:	2001      	movs	r0, #1
 80034a6:	f008 fc53 	bl	800bd50 <xQueueGenericCreate>
 80034aa:	4603      	mov	r3, r0
 80034ac:	4a23      	ldr	r2, [pc, #140]	; (800353c <main+0x1d0>)
 80034ae:	6013      	str	r3, [r2, #0]
    qhVl53 = xQueueCreate(1, sizeof(int));
 80034b0:	2200      	movs	r2, #0
 80034b2:	2104      	movs	r1, #4
 80034b4:	2001      	movs	r0, #1
 80034b6:	f008 fc4b 	bl	800bd50 <xQueueGenericCreate>
 80034ba:	4603      	mov	r3, r0
 80034bc:	4a20      	ldr	r2, [pc, #128]	; (8003540 <main+0x1d4>)
 80034be:	6013      	str	r3, [r2, #0]

    qhMR_sub = xQueueCreate(1, sizeof(MicroRosSubMsg));
 80034c0:	2200      	movs	r2, #0
 80034c2:	2114      	movs	r1, #20
 80034c4:	2001      	movs	r0, #1
 80034c6:	f008 fc43 	bl	800bd50 <xQueueGenericCreate>
 80034ca:	4603      	mov	r3, r0
 80034cc:	4a1d      	ldr	r2, [pc, #116]	; (8003544 <main+0x1d8>)
 80034ce:	6013      	str	r3, [r2, #0]
    qhMR_pub = xQueueCreate(1, sizeof(MicroRosPubMsg));
 80034d0:	2200      	movs	r2, #0
 80034d2:	210c      	movs	r1, #12
 80034d4:	2001      	movs	r0, #1
 80034d6:	f008 fc3b 	bl	800bd50 <xQueueGenericCreate>
 80034da:	4603      	mov	r3, r0
 80034dc:	4a1a      	ldr	r2, [pc, #104]	; (8003548 <main+0x1dc>)
 80034de:	6013      	str	r3, [r2, #0]
    qhLCD = xQueueCreate(1, sizeof(AMessage));
 80034e0:	2200      	movs	r2, #0
 80034e2:	2108      	movs	r1, #8
 80034e4:	2001      	movs	r0, #1
 80034e6:	f008 fc33 	bl	800bd50 <xQueueGenericCreate>
 80034ea:	4603      	mov	r3, r0
 80034ec:	4a17      	ldr	r2, [pc, #92]	; (800354c <main+0x1e0>)
 80034ee:	6013      	str	r3, [r2, #0]

    osKernelStart();
 80034f0:	f008 fa24 	bl	800b93c <osKernelStart>
    while(1){}
 80034f4:	e7fe      	b.n	80034f4 <main+0x188>
 80034f6:	bf00      	nop
 80034f8:	20004a1c 	.word	0x20004a1c
 80034fc:	0801b5b8 	.word	0x0801b5b8
 8003500:	0801b5ec 	.word	0x0801b5ec
 8003504:	0801b608 	.word	0x0801b608
 8003508:	0800269d 	.word	0x0800269d
 800350c:	0801b618 	.word	0x0801b618
 8003510:	08002e85 	.word	0x08002e85
 8003514:	0801b62c 	.word	0x0801b62c
 8003518:	08002b89 	.word	0x08002b89
 800351c:	0801b63c 	.word	0x0801b63c
 8003520:	08002c89 	.word	0x08002c89
 8003524:	0801b650 	.word	0x0801b650
 8003528:	08002d89 	.word	0x08002d89
 800352c:	0801b65c 	.word	0x0801b65c
 8003530:	08002e05 	.word	0x08002e05
 8003534:	20004be8 	.word	0x20004be8
 8003538:	20004bec 	.word	0x20004bec
 800353c:	20004bf0 	.word	0x20004bf0
 8003540:	20004c00 	.word	0x20004c00
 8003544:	20004bf4 	.word	0x20004bf4
 8003548:	20004bf8 	.word	0x20004bf8
 800354c:	20004bfc 	.word	0x20004bfc

08003550 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a04      	ldr	r2, [pc, #16]	; (8003570 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d101      	bne.n	8003566 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8003562:	f001 fbc3 	bl	8004cec <HAL_IncTick>
  }
}
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40000800 	.word	0x40000800

08003574 <Error_Handler>:
//=========================================================================
void Error_Handler(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003578:	b672      	cpsid	i
}
 800357a:	bf00      	nop
  __disable_irq();
  while (1)
 800357c:	e7fe      	b.n	800357c <Error_Handler+0x8>
	...

08003580 <createPublisher>:
void createPublisher(rcl_publisher_t* publisher,
	const rcl_node_t* node,
	const rosidl_message_type_support_t* type_support,
	const char* topic_name,
	std_msgs__msg__Int32* msg)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	603b      	str	r3, [r7, #0]
	rcl_ret_t ret = rclc_publisher_init_default(publisher, node, type_support, topic_name);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	68b9      	ldr	r1, [r7, #8]
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f00b fffd 	bl	800f594 <rclc_publisher_init_default>
 800359a:	6178      	str	r0, [r7, #20]
	printf("Publisher %s is created with result %d\r\n", topic_name, (int)ret);
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	6839      	ldr	r1, [r7, #0]
 80035a0:	4804      	ldr	r0, [pc, #16]	; (80035b4 <createPublisher+0x34>)
 80035a2:	f016 fd51 	bl	801a048 <iprintf>
#if STRING == 1
	(*msg).data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
	(*msg).data.size = 0;
	(*msg).data.capacity = ARRAY_LEN;
#else
	(*msg).data = 0;
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
#endif

}
 80035ac:	bf00      	nop
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	0801b6d0 	.word	0x0801b6d0

080035b8 <createSubscriber>:
void createSubscriber(rcl_subscription_t* subscription,
	rcl_node_t* node,
	const rosidl_message_type_support_t* type_support,
	const char* topic_name,
	std_msgs__msg__Int32* msg)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
	*subscription = rcl_get_zero_initialized_subscription();
 80035c6:	f00b fa9d 	bl	800eb04 <rcl_get_zero_initialized_subscription>
 80035ca:	4602      	mov	r2, r0
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	601a      	str	r2, [r3, #0]

	rcl_ret_t ret = rclc_subscription_init_default(subscription, node,
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f00c f810 	bl	800f5fc <rclc_subscription_init_default>
 80035dc:	6178      	str	r0, [r7, #20]
		type_support, topic_name);
	printf("Subscription %s is created with result %d\r\n", topic_name, (int)ret);
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	6839      	ldr	r1, [r7, #0]
 80035e2:	4805      	ldr	r0, [pc, #20]	; (80035f8 <createSubscriber+0x40>)
 80035e4:	f016 fd30 	bl	801a048 <iprintf>
#if STRING == 1
	(*msg).data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
	(*msg).data.size = 0;
	(*msg).data.capacity = ARRAY_LEN;
#else
	(*msg).data = 0;
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
#endif
}
 80035ee:	bf00      	nop
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	0801b6fc 	.word	0x0801b6fc

080035fc <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003606:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <microros_allocate+0x3c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	461a      	mov	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4413      	add	r3, r2
 8003610:	461a      	mov	r2, r3
 8003612:	4b09      	ldr	r3, [pc, #36]	; (8003638 <microros_allocate+0x3c>)
 8003614:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003616:	4b09      	ldr	r3, [pc, #36]	; (800363c <microros_allocate+0x40>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4413      	add	r3, r2
 8003620:	461a      	mov	r2, r3
 8003622:	4b06      	ldr	r3, [pc, #24]	; (800363c <microros_allocate+0x40>)
 8003624:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7fd fffe 	bl	8001628 <pvPortMallocMicroROS>
 800362c:	4603      	mov	r3, r0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20004c14 	.word	0x20004c14
 800363c:	20004c18 	.word	0x20004c18

08003640 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00c      	beq.n	800366a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7fe f907 	bl	8001864 <getBlockSize>
 8003656:	4603      	mov	r3, r0
 8003658:	4a06      	ldr	r2, [pc, #24]	; (8003674 <microros_deallocate+0x34>)
 800365a:	6812      	ldr	r2, [r2, #0]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	461a      	mov	r2, r3
 8003660:	4b04      	ldr	r3, [pc, #16]	; (8003674 <microros_deallocate+0x34>)
 8003662:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7fe f8a3 	bl	80017b0 <vPortFreeMicroROS>
  }
}
 800366a:	bf00      	nop
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	20004c18 	.word	0x20004c18

08003678 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003684:	4b15      	ldr	r3, [pc, #84]	; (80036dc <microros_reallocate+0x64>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	4413      	add	r3, r2
 800368e:	461a      	mov	r2, r3
 8003690:	4b12      	ldr	r3, [pc, #72]	; (80036dc <microros_reallocate+0x64>)
 8003692:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003694:	4b12      	ldr	r3, [pc, #72]	; (80036e0 <microros_reallocate+0x68>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	4413      	add	r3, r2
 800369e:	461a      	mov	r2, r3
 80036a0:	4b0f      	ldr	r3, [pc, #60]	; (80036e0 <microros_reallocate+0x68>)
 80036a2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d104      	bne.n	80036b4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80036aa:	68b8      	ldr	r0, [r7, #8]
 80036ac:	f7fd ffbc 	bl	8001628 <pvPortMallocMicroROS>
 80036b0:	4603      	mov	r3, r0
 80036b2:	e00e      	b.n	80036d2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f7fe f8d5 	bl	8001864 <getBlockSize>
 80036ba:	4603      	mov	r3, r0
 80036bc:	4a08      	ldr	r2, [pc, #32]	; (80036e0 <microros_reallocate+0x68>)
 80036be:	6812      	ldr	r2, [r2, #0]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	461a      	mov	r2, r3
 80036c4:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <microros_reallocate+0x68>)
 80036c6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80036c8:	68b9      	ldr	r1, [r7, #8]
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f7fe f8e8 	bl	80018a0 <pvPortReallocMicroROS>
 80036d0:	4603      	mov	r3, r0
  }
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20004c14 	.word	0x20004c14
 80036e0:	20004c18 	.word	0x20004c18

080036e4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	fb02 f303 	mul.w	r3, r2, r3
 80036f8:	4a0c      	ldr	r2, [pc, #48]	; (800372c <microros_zero_allocate+0x48>)
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	4413      	add	r3, r2
 80036fe:	461a      	mov	r2, r3
 8003700:	4b0a      	ldr	r3, [pc, #40]	; (800372c <microros_zero_allocate+0x48>)
 8003702:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	fb02 f303 	mul.w	r3, r2, r3
 800370c:	4a08      	ldr	r2, [pc, #32]	; (8003730 <microros_zero_allocate+0x4c>)
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	4413      	add	r3, r2
 8003712:	461a      	mov	r2, r3
 8003714:	4b06      	ldr	r3, [pc, #24]	; (8003730 <microros_zero_allocate+0x4c>)
 8003716:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8003718:	68b9      	ldr	r1, [r7, #8]
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f7fe f8fa 	bl	8001914 <pvPortCallocMicroROS>
 8003720:	4603      	mov	r3, r0
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20004c14 	.word	0x20004c14
 8003730:	20004c18 	.word	0x20004c18
 8003734:	00000000 	.word	0x00000000

08003738 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8003738:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800373c:	b086      	sub	sp, #24
 800373e:	af00      	add	r7, sp, #0
 8003740:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003744:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8003746:	2300      	movs	r3, #0
 8003748:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800374a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800374e:	a320      	add	r3, pc, #128	; (adr r3, 80037d0 <UTILS_NanosecondsToTimespec+0x98>)
 8003750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003754:	f7fd fa52 	bl	8000bfc <__aeabi_ldivmod>
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8003762:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003766:	a31a      	add	r3, pc, #104	; (adr r3, 80037d0 <UTILS_NanosecondsToTimespec+0x98>)
 8003768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376c:	f7fd fa46 	bl	8000bfc <__aeabi_ldivmod>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	2b00      	cmp	r3, #0
 800377a:	da20      	bge.n	80037be <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	4a11      	ldr	r2, [pc, #68]	; (80037c8 <UTILS_NanosecondsToTimespec+0x90>)
 8003782:	fb82 1203 	smull	r1, r2, r2, r3
 8003786:	1712      	asrs	r2, r2, #28
 8003788:	17db      	asrs	r3, r3, #31
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	3301      	adds	r3, #1
 800378e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003796:	6979      	ldr	r1, [r7, #20]
 8003798:	17c8      	asrs	r0, r1, #31
 800379a:	460c      	mov	r4, r1
 800379c:	4605      	mov	r5, r0
 800379e:	ebb2 0804 	subs.w	r8, r2, r4
 80037a2:	eb63 0905 	sbc.w	r9, r3, r5
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	4906      	ldr	r1, [pc, #24]	; (80037cc <UTILS_NanosecondsToTimespec+0x94>)
 80037b4:	fb01 f303 	mul.w	r3, r1, r3
 80037b8:	441a      	add	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	609a      	str	r2, [r3, #8]
    }
}
 80037be:	bf00      	nop
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037c8:	44b82fa1 	.word	0x44b82fa1
 80037cc:	3b9aca00 	.word	0x3b9aca00
 80037d0:	3b9aca00 	.word	0x3b9aca00
 80037d4:	00000000 	.word	0x00000000

080037d8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80037d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037dc:	b08e      	sub	sp, #56	; 0x38
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6278      	str	r0, [r7, #36]	; 0x24
 80037e2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80037e4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037e8:	2300      	movs	r3, #0
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	f04f 0300 	mov.w	r3, #0
 80037f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80037fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037fe:	4618      	mov	r0, r3
 8003800:	f009 fd18 	bl	800d234 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8003804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003806:	17da      	asrs	r2, r3, #31
 8003808:	61bb      	str	r3, [r7, #24]
 800380a:	61fa      	str	r2, [r7, #28]
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	f04f 0300 	mov.w	r3, #0
 8003814:	69b9      	ldr	r1, [r7, #24]
 8003816:	000b      	movs	r3, r1
 8003818:	2200      	movs	r2, #0
 800381a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800381e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003820:	2200      	movs	r2, #0
 8003822:	461c      	mov	r4, r3
 8003824:	4615      	mov	r5, r2
 8003826:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800382a:	1911      	adds	r1, r2, r4
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	416b      	adcs	r3, r5
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003836:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800383a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	f04f 0400 	mov.w	r4, #0
 8003846:	f04f 0500 	mov.w	r5, #0
 800384a:	015d      	lsls	r5, r3, #5
 800384c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003850:	0154      	lsls	r4, r2, #5
 8003852:	4622      	mov	r2, r4
 8003854:	462b      	mov	r3, r5
 8003856:	ebb2 0800 	subs.w	r8, r2, r0
 800385a:	eb63 0901 	sbc.w	r9, r3, r1
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	f04f 0300 	mov.w	r3, #0
 8003866:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800386a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800386e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8003872:	4690      	mov	r8, r2
 8003874:	4699      	mov	r9, r3
 8003876:	eb18 0a00 	adds.w	sl, r8, r0
 800387a:	eb49 0b01 	adc.w	fp, r9, r1
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	f04f 0300 	mov.w	r3, #0
 8003886:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800388a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800388e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003892:	ebb2 040a 	subs.w	r4, r2, sl
 8003896:	603c      	str	r4, [r7, #0]
 8003898:	eb63 030b 	sbc.w	r3, r3, fp
 800389c:	607b      	str	r3, [r7, #4]
 800389e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038a2:	4623      	mov	r3, r4
 80038a4:	181b      	adds	r3, r3, r0
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	462b      	mov	r3, r5
 80038aa:	eb41 0303 	adc.w	r3, r1, r3
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	6a3a      	ldr	r2, [r7, #32]
 80038b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038b6:	f7ff ff3f 	bl	8003738 <UTILS_NanosecondsToTimespec>

    return 0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	4618      	mov	r0, r3
 80038be:	3738      	adds	r7, #56	; 0x38
 80038c0:	46bd      	mov	sp, r7
 80038c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080038c8 <motorCommand_Init>:
// TIMER 3 (PWM)  : CH1 et CH2
// ENABLE : Sortie Logique (GPIO) PA7
//=================================================================

void motorCommand_Init(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
	unsigned int uwPrescalerValue = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	607b      	str	r3, [r7, #4]

	/* Compute the prescaler value to have TIM4 counter clock equal to 10MHz */
	  uwPrescalerValue = (unsigned int) ((SystemCoreClock / 10000000) - 1);
 80038d2:	4b24      	ldr	r3, [pc, #144]	; (8003964 <motorCommand_Init+0x9c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a24      	ldr	r2, [pc, #144]	; (8003968 <motorCommand_Init+0xa0>)
 80038d8:	fba2 2303 	umull	r2, r3, r2, r3
 80038dc:	0d9b      	lsrs	r3, r3, #22
 80038de:	3b01      	subs	r3, #1
 80038e0:	607b      	str	r3, [r7, #4]
	  TimHandle.Instance = TIM3;
 80038e2:	4b22      	ldr	r3, [pc, #136]	; (800396c <motorCommand_Init+0xa4>)
 80038e4:	4a22      	ldr	r2, [pc, #136]	; (8003970 <motorCommand_Init+0xa8>)
 80038e6:	601a      	str	r2, [r3, #0]
	  TimHandle.Init.Period = 200 - 1; // 100MHz/200=50kHz
 80038e8:	4b20      	ldr	r3, [pc, #128]	; (800396c <motorCommand_Init+0xa4>)
 80038ea:	22c7      	movs	r2, #199	; 0xc7
 80038ec:	60da      	str	r2, [r3, #12]
	  TimHandle.Init.Prescaler = uwPrescalerValue;
 80038ee:	4a1f      	ldr	r2, [pc, #124]	; (800396c <motorCommand_Init+0xa4>)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6053      	str	r3, [r2, #4]
	  TimHandle.Init.ClockDivision = 0;
 80038f4:	4b1d      	ldr	r3, [pc, #116]	; (800396c <motorCommand_Init+0xa4>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	611a      	str	r2, [r3, #16]
	  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038fa:	4b1c      	ldr	r3, [pc, #112]	; (800396c <motorCommand_Init+0xa4>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	609a      	str	r2, [r3, #8]

	  HAL_TIM_Base_Init(&TimHandle);
 8003900:	481a      	ldr	r0, [pc, #104]	; (800396c <motorCommand_Init+0xa4>)
 8003902:	f005 fcc1 	bl	8009288 <HAL_TIM_Base_Init>

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003906:	4b1b      	ldr	r3, [pc, #108]	; (8003974 <motorCommand_Init+0xac>)
 8003908:	2260      	movs	r2, #96	; 0x60
 800390a:	601a      	str	r2, [r3, #0]
	  sConfigOC.Pulse = 0x5;// Specifies the pulse value to be loaded into the Capture Compare Register. This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF */
 800390c:	4b19      	ldr	r3, [pc, #100]	; (8003974 <motorCommand_Init+0xac>)
 800390e:	2205      	movs	r2, #5
 8003910:	605a      	str	r2, [r3, #4]

	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003912:	4b18      	ldr	r3, [pc, #96]	; (8003974 <motorCommand_Init+0xac>)
 8003914:	2200      	movs	r2, #0
 8003916:	609a      	str	r2, [r3, #8]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003918:	4b16      	ldr	r3, [pc, #88]	; (8003974 <motorCommand_Init+0xac>)
 800391a:	2200      	movs	r2, #0
 800391c:	611a      	str	r2, [r3, #16]

	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_1);
 800391e:	2200      	movs	r2, #0
 8003920:	4914      	ldr	r1, [pc, #80]	; (8003974 <motorCommand_Init+0xac>)
 8003922:	4812      	ldr	r0, [pc, #72]	; (800396c <motorCommand_Init+0xa4>)
 8003924:	f006 f862 	bl	80099ec <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_2);
 8003928:	2204      	movs	r2, #4
 800392a:	4912      	ldr	r1, [pc, #72]	; (8003974 <motorCommand_Init+0xac>)
 800392c:	480f      	ldr	r0, [pc, #60]	; (800396c <motorCommand_Init+0xa4>)
 800392e:	f006 f85d 	bl	80099ec <HAL_TIM_PWM_ConfigChannel>

	 // CHANGEMENT DU RAPPORT CYCLIQUE
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, 100);	// 100 : moteurs au repos
 8003932:	4b0e      	ldr	r3, [pc, #56]	; (800396c <motorCommand_Init+0xa4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2264      	movs	r2, #100	; 0x64
 8003938:	635a      	str	r2, [r3, #52]	; 0x34
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, 100);
 800393a:	4b0c      	ldr	r3, [pc, #48]	; (800396c <motorCommand_Init+0xa4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2264      	movs	r2, #100	; 0x64
 8003940:	639a      	str	r2, [r3, #56]	; 0x38

	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_1);	// MOTOR RIGHT
 8003942:	2100      	movs	r1, #0
 8003944:	4809      	ldr	r0, [pc, #36]	; (800396c <motorCommand_Init+0xa4>)
 8003946:	f005 fd5b 	bl	8009400 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_2); // MOTOR LEFT
 800394a:	2104      	movs	r1, #4
 800394c:	4807      	ldr	r0, [pc, #28]	; (800396c <motorCommand_Init+0xa4>)
 800394e:	f005 fd57 	bl	8009400 <HAL_TIM_PWM_Start>

	  // ENABLE MOTEUR (SI INVERSEUR)
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8003952:	2200      	movs	r2, #0
 8003954:	2108      	movs	r1, #8
 8003956:	4808      	ldr	r0, [pc, #32]	; (8003978 <motorCommand_Init+0xb0>)
 8003958:	f002 fb52 	bl	8006000 <HAL_GPIO_WritePin>
}
 800395c:	bf00      	nop
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	20000014 	.word	0x20000014
 8003968:	6b5fca6b 	.word	0x6b5fca6b
 800396c:	20004c1c 	.word	0x20004c1c
 8003970:	40000400 	.word	0x40000400
 8003974:	20004c64 	.word	0x20004c64
 8003978:	40020400 	.word	0x40020400

0800397c <motorLeft_SetDuty>:

//=================================================================
//			SET DUTY CYCLE LEFT
//=================================================================
void motorLeft_SetDuty(int duty)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, duty);
 8003984:	4b04      	ldr	r3, [pc, #16]	; (8003998 <motorLeft_SetDuty+0x1c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	20004c1c 	.word	0x20004c1c

0800399c <motorRight_SetDuty>:
//=================================================================
//			SET DUTY CYCLE RIGHT
//=================================================================
void motorRight_SetDuty(int duty)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, duty);
 80039a4:	4b04      	ldr	r3, [pc, #16]	; (80039b8 <motorRight_SetDuty+0x1c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	639a      	str	r2, [r3, #56]	; 0x38
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	20004c1c 	.word	0x20004c1c

080039bc <quadEncoder_Init>:
//================================================================
//		TIMER INIT
//================================================================

void quadEncoder_Init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08a      	sub	sp, #40	; 0x28
 80039c0:	af00      	add	r7, sp, #0
	TIM_Encoder_InitTypeDef sConfig;
	//--------------------------------------------------
	// TIMER 1
	//--------------------------------------------------
	TimEncoderHandleLeft.Instance = TIM1;
 80039c2:	4b35      	ldr	r3, [pc, #212]	; (8003a98 <quadEncoder_Init+0xdc>)
 80039c4:	4a35      	ldr	r2, [pc, #212]	; (8003a9c <quadEncoder_Init+0xe0>)
 80039c6:	601a      	str	r2, [r3, #0]
	TimEncoderHandleLeft.Init.Prescaler = 0;
 80039c8:	4b33      	ldr	r3, [pc, #204]	; (8003a98 <quadEncoder_Init+0xdc>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	605a      	str	r2, [r3, #4]
	TimEncoderHandleLeft.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039ce:	4b32      	ldr	r3, [pc, #200]	; (8003a98 <quadEncoder_Init+0xdc>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	609a      	str	r2, [r3, #8]
	TimEncoderHandleLeft.Init.Period = COUNT_PER_ROUND*4;
 80039d4:	4b30      	ldr	r3, [pc, #192]	; (8003a98 <quadEncoder_Init+0xdc>)
 80039d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039da:	60da      	str	r2, [r3, #12]
	TimEncoderHandleLeft.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039dc:	4b2e      	ldr	r3, [pc, #184]	; (8003a98 <quadEncoder_Init+0xdc>)
 80039de:	2200      	movs	r2, #0
 80039e0:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80039e2:	2303      	movs	r3, #3
 80039e4:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80039e6:	2300      	movs	r3, #0
 80039e8:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80039ea:	2301      	movs	r3, #1
 80039ec:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 80039ee:	2308      	movs	r3, #8
 80039f0:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 80039f2:	230f      	movs	r3, #15
 80039f4:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80039f6:	2300      	movs	r3, #0
 80039f8:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 80039fa:	2301      	movs	r3, #1
 80039fc:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 80039fe:	2308      	movs	r3, #8
 8003a00:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 8003a02:	230f      	movs	r3, #15
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleLeft, &sConfig);
 8003a06:	1d3b      	adds	r3, r7, #4
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4823      	ldr	r0, [pc, #140]	; (8003a98 <quadEncoder_Init+0xdc>)
 8003a0c:	f005 fda8 	bl	8009560 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);
 8003a10:	4b21      	ldr	r3, [pc, #132]	; (8003a98 <quadEncoder_Init+0xdc>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2200      	movs	r2, #0
 8003a16:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 8003a18:	2100      	movs	r1, #0
 8003a1a:	481f      	ldr	r0, [pc, #124]	; (8003a98 <quadEncoder_Init+0xdc>)
 8003a1c:	f005 fe50 	bl	80096c0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 8003a20:	2104      	movs	r1, #4
 8003a22:	481d      	ldr	r0, [pc, #116]	; (8003a98 <quadEncoder_Init+0xdc>)
 8003a24:	f005 fe4c 	bl	80096c0 <HAL_TIM_Encoder_Start>

	//--------------------------------------------------
	// TIMER 2
	//--------------------------------------------------
	TimEncoderHandleRight.Instance = TIM2;
 8003a28:	4b1d      	ldr	r3, [pc, #116]	; (8003aa0 <quadEncoder_Init+0xe4>)
 8003a2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a2e:	601a      	str	r2, [r3, #0]
	TimEncoderHandleRight.Init.Prescaler = 0;
 8003a30:	4b1b      	ldr	r3, [pc, #108]	; (8003aa0 <quadEncoder_Init+0xe4>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	605a      	str	r2, [r3, #4]
	TimEncoderHandleRight.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a36:	4b1a      	ldr	r3, [pc, #104]	; (8003aa0 <quadEncoder_Init+0xe4>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	609a      	str	r2, [r3, #8]
	TimEncoderHandleRight.Init.Period = COUNT_PER_ROUND*4;
 8003a3c:	4b18      	ldr	r3, [pc, #96]	; (8003aa0 <quadEncoder_Init+0xe4>)
 8003a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a42:	60da      	str	r2, [r3, #12]
	TimEncoderHandleRight.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a44:	4b16      	ldr	r3, [pc, #88]	; (8003aa0 <quadEncoder_Init+0xe4>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003a52:	2301      	movs	r3, #1
 8003a54:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8003a56:	2308      	movs	r3, #8
 8003a58:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 8003a5a:	230f      	movs	r3, #15
 8003a5c:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 8003a62:	2301      	movs	r3, #1
 8003a64:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8003a66:	2308      	movs	r3, #8
 8003a68:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 8003a6a:	230f      	movs	r3, #15
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleRight, &sConfig);
 8003a6e:	1d3b      	adds	r3, r7, #4
 8003a70:	4619      	mov	r1, r3
 8003a72:	480b      	ldr	r0, [pc, #44]	; (8003aa0 <quadEncoder_Init+0xe4>)
 8003a74:	f005 fd74 	bl	8009560 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);
 8003a78:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <quadEncoder_Init+0xe4>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 8003a80:	2100      	movs	r1, #0
 8003a82:	4807      	ldr	r0, [pc, #28]	; (8003aa0 <quadEncoder_Init+0xe4>)
 8003a84:	f005 fe1c 	bl	80096c0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 8003a88:	2104      	movs	r1, #4
 8003a8a:	4805      	ldr	r0, [pc, #20]	; (8003aa0 <quadEncoder_Init+0xe4>)
 8003a8c:	f005 fe18 	bl	80096c0 <HAL_TIM_Encoder_Start>
}
 8003a90:	bf00      	nop
 8003a92:	3728      	adds	r7, #40	; 0x28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	20004c80 	.word	0x20004c80
 8003a9c:	40010000 	.word	0x40010000
 8003aa0:	20004cc8 	.word	0x20004cc8

08003aa4 <quadEncoder_PosCalcL>:
//================================================================
//		POSITION LEFT CALC
//================================================================

void quadEncoder_PosCalcL(int* AngPos)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]

int POSCNTcopy = 0;
 8003aac:	2300      	movs	r3, #0
 8003aae:	60fb      	str	r3, [r7, #12]
POSCNTcopy = (int)TIM1->CNT;
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <quadEncoder_PosCalcL+0x40>)
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	60fb      	str	r3, [r7, #12]
AngPos[1] = AngPos[0];
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	601a      	str	r2, [r3, #0]
AngPos[0] = (unsigned int)(((unsigned long)POSCNTcopy * COEFF)/1000); // 0 <= POSCNT <= 4999 to 0 <= AngPos <= 32767
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f641 129b 	movw	r2, #6555	; 0x199b
 8003ac6:	fb02 f303 	mul.w	r3, r2, r3
 8003aca:	4a07      	ldr	r2, [pc, #28]	; (8003ae8 <quadEncoder_PosCalcL+0x44>)
 8003acc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad0:	099b      	lsrs	r3, r3, #6
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	601a      	str	r2, [r3, #0]
}
 8003ad8:	bf00      	nop
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	40010000 	.word	0x40010000
 8003ae8:	10624dd3 	.word	0x10624dd3

08003aec <quadEncoder_PosCalcR>:
//================================================================
//		POSITION RIGHT CALC
//================================================================

void quadEncoder_PosCalcR(int* AngPos)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]

int POSCNTcopy = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	60fb      	str	r3, [r7, #12]
POSCNTcopy = (int)TIM2->CNT;
 8003af8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	60fb      	str	r3, [r7, #12]
AngPos[1] = AngPos[0];
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3304      	adds	r3, #4
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6812      	ldr	r2, [r2, #0]
 8003b08:	601a      	str	r2, [r3, #0]
AngPos[0] = (unsigned int)(((unsigned long)POSCNTcopy * COEFF)/1000); // 0 <= POSCNT <= 4999 to 0 <= AngPos <= 32767
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f641 129b 	movw	r2, #6555	; 0x199b
 8003b10:	fb02 f303 	mul.w	r3, r2, r3
 8003b14:	4a06      	ldr	r2, [pc, #24]	; (8003b30 <quadEncoder_PosCalcR+0x44>)
 8003b16:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1a:	099b      	lsrs	r3, r3, #6
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	601a      	str	r2, [r3, #0]
}
 8003b22:	bf00      	nop
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	10624dd3 	.word	0x10624dd3

08003b34 <quadEncoder_GetSpeedL>:
//		SPEED LEFT
//--> must be called every Te
//================================================================

int16_t quadEncoder_GetSpeedL(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
	static int AngPos[2] = {0,0};
	static int16_t SpeedL=0;

	quadEncoder_PosCalcL(AngPos);
 8003b38:	4824      	ldr	r0, [pc, #144]	; (8003bcc <quadEncoder_GetSpeedL+0x98>)
 8003b3a:	f7ff ffb3 	bl	8003aa4 <quadEncoder_PosCalcL>
	SpeedL = AngPos[0] - AngPos[1];
 8003b3e:	4b23      	ldr	r3, [pc, #140]	; (8003bcc <quadEncoder_GetSpeedL+0x98>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	4b21      	ldr	r3, [pc, #132]	; (8003bcc <quadEncoder_GetSpeedL+0x98>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	b21a      	sxth	r2, r3
 8003b50:	4b1f      	ldr	r3, [pc, #124]	; (8003bd0 <quadEncoder_GetSpeedL+0x9c>)
 8003b52:	801a      	strh	r2, [r3, #0]
	if (SpeedL >= 0)
 8003b54:	4b1e      	ldr	r3, [pc, #120]	; (8003bd0 <quadEncoder_GetSpeedL+0x9c>)
 8003b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	db10      	blt.n	8003b80 <quadEncoder_GetSpeedL+0x4c>
	{
		if (SpeedL >= HALF_MAX_COUNT)
 8003b5e:	4b1c      	ldr	r3, [pc, #112]	; (8003bd0 <quadEncoder_GetSpeedL+0x9c>)
 8003b60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b68:	db1a      	blt.n	8003ba0 <quadEncoder_GetSpeedL+0x6c>
			{
			SpeedL = SpeedL - MAX_COUNT;
 8003b6a:	4b19      	ldr	r3, [pc, #100]	; (8003bd0 <quadEncoder_GetSpeedL+0x9c>)
 8003b6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	b21a      	sxth	r2, r3
 8003b7a:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <quadEncoder_GetSpeedL+0x9c>)
 8003b7c:	801a      	strh	r2, [r3, #0]
 8003b7e:	e00f      	b.n	8003ba0 <quadEncoder_GetSpeedL+0x6c>
			}
	}
	else
	{
		if (SpeedL < -HALF_MAX_COUNT)
 8003b80:	4b13      	ldr	r3, [pc, #76]	; (8003bd0 <quadEncoder_GetSpeedL+0x9c>)
 8003b82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b86:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8003b8a:	da09      	bge.n	8003ba0 <quadEncoder_GetSpeedL+0x6c>
			{
			SpeedL = SpeedL + MAX_COUNT;
 8003b8c:	4b10      	ldr	r3, [pc, #64]	; (8003bd0 <quadEncoder_GetSpeedL+0x9c>)
 8003b8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	b21a      	sxth	r2, r3
 8003b9c:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <quadEncoder_GetSpeedL+0x9c>)
 8003b9e:	801a      	strh	r2, [r3, #0]
	// 1 tour = 32767
	// Nbre de Tours pendant Te: DELTA_pos/32767
	// Nbre de Tours pendant 1s (Te en ms) : (DELTA_pos/32767)*(1000/Te)
	// Nbre de Tours par minute : : (DELTA_pos/32767)*((60*1000)/Te)

	SpeedL=(SpeedL*60*1000)/(32767*TE_ms);
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <quadEncoder_GetSpeedL+0x9c>)
 8003ba2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003bac:	fb02 f303 	mul.w	r3, r2, r3
 8003bb0:	4a08      	ldr	r2, [pc, #32]	; (8003bd4 <quadEncoder_GetSpeedL+0xa0>)
 8003bb2:	fb82 1203 	smull	r1, r2, r2, r3
 8003bb6:	1412      	asrs	r2, r2, #16
 8003bb8:	17db      	asrs	r3, r3, #31
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	b21a      	sxth	r2, r3
 8003bbe:	4b04      	ldr	r3, [pc, #16]	; (8003bd0 <quadEncoder_GetSpeedL+0x9c>)
 8003bc0:	801a      	strh	r2, [r3, #0]
	return SpeedL;
 8003bc2:	4b03      	ldr	r3, [pc, #12]	; (8003bd0 <quadEncoder_GetSpeedL+0x9c>)
 8003bc4:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	20004d18 	.word	0x20004d18
 8003bd0:	20004d20 	.word	0x20004d20
 8003bd4:	66673335 	.word	0x66673335

08003bd8 <quadEncoder_GetSpeedR>:
//		SPEED RIGHT
//-->  must be called every Te
//================================================================

int16_t quadEncoder_GetSpeedR(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
	static int AngPos[2] = {0,0};
	static int16_t SpeedR=0;


	quadEncoder_PosCalcR(AngPos);
 8003bdc:	4824      	ldr	r0, [pc, #144]	; (8003c70 <quadEncoder_GetSpeedR+0x98>)
 8003bde:	f7ff ff85 	bl	8003aec <quadEncoder_PosCalcR>
	SpeedR = AngPos[0] - AngPos[1];
 8003be2:	4b23      	ldr	r3, [pc, #140]	; (8003c70 <quadEncoder_GetSpeedR+0x98>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	4b21      	ldr	r3, [pc, #132]	; (8003c70 <quadEncoder_GetSpeedR+0x98>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	b21a      	sxth	r2, r3
 8003bf4:	4b1f      	ldr	r3, [pc, #124]	; (8003c74 <quadEncoder_GetSpeedR+0x9c>)
 8003bf6:	801a      	strh	r2, [r3, #0]
	if (SpeedR >= 0)
 8003bf8:	4b1e      	ldr	r3, [pc, #120]	; (8003c74 <quadEncoder_GetSpeedR+0x9c>)
 8003bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	db10      	blt.n	8003c24 <quadEncoder_GetSpeedR+0x4c>
	{
		if (SpeedR >= HALF_MAX_COUNT)
 8003c02:	4b1c      	ldr	r3, [pc, #112]	; (8003c74 <quadEncoder_GetSpeedR+0x9c>)
 8003c04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c0c:	db1a      	blt.n	8003c44 <quadEncoder_GetSpeedR+0x6c>
			{
			SpeedR = SpeedR - MAX_COUNT;
 8003c0e:	4b19      	ldr	r3, [pc, #100]	; (8003c74 <quadEncoder_GetSpeedR+0x9c>)
 8003c10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	b21a      	sxth	r2, r3
 8003c1e:	4b15      	ldr	r3, [pc, #84]	; (8003c74 <quadEncoder_GetSpeedR+0x9c>)
 8003c20:	801a      	strh	r2, [r3, #0]
 8003c22:	e00f      	b.n	8003c44 <quadEncoder_GetSpeedR+0x6c>
			}
	}
	else
	{
		if (SpeedR < -HALF_MAX_COUNT)
 8003c24:	4b13      	ldr	r3, [pc, #76]	; (8003c74 <quadEncoder_GetSpeedR+0x9c>)
 8003c26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c2a:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8003c2e:	da09      	bge.n	8003c44 <quadEncoder_GetSpeedR+0x6c>
			{
			SpeedR = SpeedR + MAX_COUNT;
 8003c30:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <quadEncoder_GetSpeedR+0x9c>)
 8003c32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	b21a      	sxth	r2, r3
 8003c40:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <quadEncoder_GetSpeedR+0x9c>)
 8003c42:	801a      	strh	r2, [r3, #0]
	// 1 tour = 32767
	// Nbre de Tours pendant Te: DELTA_pos/32767
	// Nbre de Tours pendant 1s (Te en ms) : (DELTA_pos/32767)*(1000/Te)
	// Nbre de Tours par minute : : (DELTA_pos/32767)*((60*1000)/Te)

	SpeedR=(SpeedR*60*1000)/(32767*TE_ms);
 8003c44:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <quadEncoder_GetSpeedR+0x9c>)
 8003c46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003c50:	fb02 f303 	mul.w	r3, r2, r3
 8003c54:	4a08      	ldr	r2, [pc, #32]	; (8003c78 <quadEncoder_GetSpeedR+0xa0>)
 8003c56:	fb82 1203 	smull	r1, r2, r2, r3
 8003c5a:	1412      	asrs	r2, r2, #16
 8003c5c:	17db      	asrs	r3, r3, #31
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	b21a      	sxth	r2, r3
 8003c62:	4b04      	ldr	r3, [pc, #16]	; (8003c74 <quadEncoder_GetSpeedR+0x9c>)
 8003c64:	801a      	strh	r2, [r3, #0]
	return SpeedR;
 8003c66:	4b03      	ldr	r3, [pc, #12]	; (8003c74 <quadEncoder_GetSpeedR+0x9c>)
 8003c68:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	20004d24 	.word	0x20004d24
 8003c74:	20004d2c 	.word	0x20004d2c
 8003c78:	66673335 	.word	0x66673335

08003c7c <quadEncoder_CallbackIndexL>:
//================================================================
//		MAJ index Left
//================================================================

void quadEncoder_CallbackIndexL()
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleLeft)==1)
 8003c80:	4b0f      	ldr	r3, [pc, #60]	; (8003cc0 <quadEncoder_CallbackIndexL+0x44>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0310 	and.w	r3, r3, #16
 8003c8a:	2b10      	cmp	r3, #16
 8003c8c:	d105      	bne.n	8003c9a <quadEncoder_CallbackIndexL+0x1e>
				{
					indexL--;
 8003c8e:	4b0d      	ldr	r3, [pc, #52]	; (8003cc4 <quadEncoder_CallbackIndexL+0x48>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	4a0b      	ldr	r2, [pc, #44]	; (8003cc4 <quadEncoder_CallbackIndexL+0x48>)
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	e004      	b.n	8003ca4 <quadEncoder_CallbackIndexL+0x28>
				}
				else
				{
					indexL++;
 8003c9a:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <quadEncoder_CallbackIndexL+0x48>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	4a08      	ldr	r2, [pc, #32]	; (8003cc4 <quadEncoder_CallbackIndexL+0x48>)
 8003ca2:	6013      	str	r3, [r2, #0]
				}


				__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);		// RAZ Counter
 8003ca4:	4b06      	ldr	r3, [pc, #24]	; (8003cc0 <quadEncoder_CallbackIndexL+0x44>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 8003cac:	2100      	movs	r1, #0
 8003cae:	4804      	ldr	r0, [pc, #16]	; (8003cc0 <quadEncoder_CallbackIndexL+0x44>)
 8003cb0:	f005 fd06 	bl	80096c0 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 8003cb4:	2104      	movs	r1, #4
 8003cb6:	4802      	ldr	r0, [pc, #8]	; (8003cc0 <quadEncoder_CallbackIndexL+0x44>)
 8003cb8:	f005 fd02 	bl	80096c0 <HAL_TIM_Encoder_Start>

}
 8003cbc:	bf00      	nop
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	20004c80 	.word	0x20004c80
 8003cc4:	20004d10 	.word	0x20004d10

08003cc8 <quadEncoder_CallbackIndexR>:
//================================================================
//		MAJ index Right
//================================================================

void quadEncoder_CallbackIndexR()
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleRight)==1)
 8003ccc:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <quadEncoder_CallbackIndexR+0x44>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0310 	and.w	r3, r3, #16
 8003cd6:	2b10      	cmp	r3, #16
 8003cd8:	d105      	bne.n	8003ce6 <quadEncoder_CallbackIndexR+0x1e>
				{
					indexR--;
 8003cda:	4b0d      	ldr	r3, [pc, #52]	; (8003d10 <quadEncoder_CallbackIndexR+0x48>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	4a0b      	ldr	r2, [pc, #44]	; (8003d10 <quadEncoder_CallbackIndexR+0x48>)
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	e004      	b.n	8003cf0 <quadEncoder_CallbackIndexR+0x28>

				}
				else
				{
					indexR++;
 8003ce6:	4b0a      	ldr	r3, [pc, #40]	; (8003d10 <quadEncoder_CallbackIndexR+0x48>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	3301      	adds	r3, #1
 8003cec:	4a08      	ldr	r2, [pc, #32]	; (8003d10 <quadEncoder_CallbackIndexR+0x48>)
 8003cee:	6013      	str	r3, [r2, #0]
				}

				__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);			// RAZ Counter
 8003cf0:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <quadEncoder_CallbackIndexR+0x44>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4804      	ldr	r0, [pc, #16]	; (8003d0c <quadEncoder_CallbackIndexR+0x44>)
 8003cfc:	f005 fce0 	bl	80096c0 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 8003d00:	2104      	movs	r1, #4
 8003d02:	4802      	ldr	r0, [pc, #8]	; (8003d0c <quadEncoder_CallbackIndexR+0x44>)
 8003d04:	f005 fcdc 	bl	80096c0 <HAL_TIM_Encoder_Start>

}
 8003d08:	bf00      	nop
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	20004cc8 	.word	0x20004cc8
 8003d10:	20004d14 	.word	0x20004d14

08003d14 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8003d1c:	4a07      	ldr	r2, [pc, #28]	; (8003d3c <RetargetInit+0x28>)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8003d22:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <RetargetInit+0x2c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6898      	ldr	r0, [r3, #8]
 8003d28:	2300      	movs	r3, #0
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	f016 f99d 	bl	801a06c <setvbuf>
}
 8003d32:	bf00      	nop
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20004d30 	.word	0x20004d30
 8003d40:	200000e8 	.word	0x200000e8

08003d44 <_isatty>:

int _isatty(int fd) {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	db04      	blt.n	8003d5c <_isatty+0x18>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	dc01      	bgt.n	8003d5c <_isatty+0x18>
    return 1;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e005      	b.n	8003d68 <_isatty+0x24>

  errno = EBADF;
 8003d5c:	f016 fc7e 	bl	801a65c <__errno>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2209      	movs	r2, #9
 8003d64:	601a      	str	r2, [r3, #0]
  return 0;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <_write>:

int _write(int fd, char* ptr, int len) {
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d002      	beq.n	8003d88 <_write+0x18>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d111      	bne.n	8003dac <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8003d88:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <_write+0x54>)
 8003d8a:	6818      	ldr	r0, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	f006 f9a5 	bl	800a0e4 <HAL_UART_Transmit>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003d9e:	7dfb      	ldrb	r3, [r7, #23]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <_write+0x38>
      return len;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	e008      	b.n	8003dba <_write+0x4a>
    else
      return EIO;
 8003da8:	2305      	movs	r3, #5
 8003daa:	e006      	b.n	8003dba <_write+0x4a>
  }
  errno = EBADF;
 8003dac:	f016 fc56 	bl	801a65c <__errno>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2209      	movs	r2, #9
 8003db4:	601a      	str	r2, [r3, #0]
  return -1;
 8003db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20004d30 	.word	0x20004d30

08003dc8 <_close>:

int _close(int fd) {
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	db04      	blt.n	8003de0 <_close+0x18>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	dc01      	bgt.n	8003de0 <_close+0x18>
    return 0;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e006      	b.n	8003dee <_close+0x26>

  errno = EBADF;
 8003de0:	f016 fc3c 	bl	801a65c <__errno>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2209      	movs	r2, #9
 8003de8:	601a      	str	r2, [r3, #0]
  return -1;
 8003dea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	60f8      	str	r0, [r7, #12]
 8003dfe:	60b9      	str	r1, [r7, #8]
 8003e00:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8003e02:	f016 fc2b 	bl	801a65c <__errno>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2209      	movs	r2, #9
 8003e0a:	601a      	str	r2, [r3, #0]
  return -1;
 8003e0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <_read>:

int _read(int fd, char* ptr, int len) {
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d110      	bne.n	8003e4c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8003e2a:	4b0e      	ldr	r3, [pc, #56]	; (8003e64 <_read+0x4c>)
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e32:	2201      	movs	r2, #1
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	f006 f9e7 	bl	800a208 <HAL_UART_Receive>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003e3e:	7dfb      	ldrb	r3, [r7, #23]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <_read+0x30>
      return 1;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e008      	b.n	8003e5a <_read+0x42>
    else
      return EIO;
 8003e48:	2305      	movs	r3, #5
 8003e4a:	e006      	b.n	8003e5a <_read+0x42>
  }
  errno = EBADF;
 8003e4c:	f016 fc06 	bl	801a65c <__errno>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2209      	movs	r2, #9
 8003e54:	601a      	str	r2, [r3, #0]
  return -1;
 8003e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3718      	adds	r7, #24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20004d30 	.word	0x20004d30

08003e68 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	db08      	blt.n	8003e8a <_fstat+0x22>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	dc05      	bgt.n	8003e8a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e84:	605a      	str	r2, [r3, #4]
    return 0;
 8003e86:	2300      	movs	r3, #0
 8003e88:	e005      	b.n	8003e96 <_fstat+0x2e>
  }

  errno = EBADF;
 8003e8a:	f016 fbe7 	bl	801a65c <__errno>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2209      	movs	r2, #9
 8003e92:	601a      	str	r2, [r3, #0]
  return 0;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <_getpid>:

int _getpid(void)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	af00      	add	r7, sp, #0
	return 1;
 8003ea2:	2301      	movs	r3, #1
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <_kill>:

int _kill(int pid, int sig)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b082      	sub	sp, #8
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003eb8:	f016 fbd0 	bl	801a65c <__errno>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2216      	movs	r2, #22
 8003ec0:	601a      	str	r2, [r3, #0]
	return -1;
 8003ec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
	...

08003ed0 <HAL_MspInit>:
void HAL_Encoder_Timer1_MspInit(void);
void HAL_Encoder_Timer2_MspInit(void);
void HAL_adcir_MspInit(void);

void HAL_MspInit(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	4b32      	ldr	r3, [pc, #200]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ede:	4a31      	ldr	r2, [pc, #196]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ee6:	4b2f      	ldr	r3, [pc, #188]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	613b      	str	r3, [r7, #16]
 8003ef6:	4b2b      	ldr	r3, [pc, #172]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	4a2a      	ldr	r2, [pc, #168]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f00:	6413      	str	r3, [r2, #64]	; 0x40
 8003f02:	4b28      	ldr	r3, [pc, #160]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	693b      	ldr	r3, [r7, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	4b24      	ldr	r3, [pc, #144]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	4a23      	ldr	r2, [pc, #140]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003f18:	f043 0304 	orr.w	r3, r3, #4
 8003f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f1e:	4b21      	ldr	r3, [pc, #132]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	f003 0304 	and.w	r3, r3, #4
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	4b1d      	ldr	r3, [pc, #116]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	4a1c      	ldr	r2, [pc, #112]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f38:	6313      	str	r3, [r2, #48]	; 0x30
 8003f3a:	4b1a      	ldr	r3, [pc, #104]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f42:	60bb      	str	r3, [r7, #8]
 8003f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f46:	2300      	movs	r3, #0
 8003f48:	607b      	str	r3, [r7, #4]
 8003f4a:	4b16      	ldr	r3, [pc, #88]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	4a15      	ldr	r2, [pc, #84]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003f50:	f043 0301 	orr.w	r3, r3, #1
 8003f54:	6313      	str	r3, [r2, #48]	; 0x30
 8003f56:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	607b      	str	r3, [r7, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f62:	2300      	movs	r3, #0
 8003f64:	603b      	str	r3, [r7, #0]
 8003f66:	4b0f      	ldr	r3, [pc, #60]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	4a0e      	ldr	r2, [pc, #56]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003f6c:	f043 0302 	orr.w	r3, r3, #2
 8003f70:	6313      	str	r3, [r2, #48]	; 0x30
 8003f72:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003f7e:	2200      	movs	r2, #0
 8003f80:	210f      	movs	r1, #15
 8003f82:	f06f 0001 	mvn.w	r0, #1
 8003f86:	f001 fa7d 	bl	8005484 <HAL_NVIC_SetPriority>

  HAL_PWM_Timer3_MspInit();
 8003f8a:	f000 f88b 	bl	80040a4 <HAL_PWM_Timer3_MspInit>
  HAL_Encoder_Timer1_MspInit();
 8003f8e:	f000 f80b 	bl	8003fa8 <HAL_Encoder_Timer1_MspInit>
  HAL_Encoder_Timer2_MspInit();
 8003f92:	f000 f849 	bl	8004028 <HAL_Encoder_Timer2_MspInit>
  HAL_adcir_MspInit();
 8003f96:	f000 f8e3 	bl	8004160 <HAL_adcir_MspInit>
}
 8003f9a:	bf00      	nop
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40023800 	.word	0x40023800

08003fa8 <HAL_Encoder_Timer1_MspInit>:
PWM1/1	-->	PA8		-- Encodeur Voie A
PWM1/2	--> PA9		-- Encodeur Voie B
EXTI1	--> PB10		-- Index encodeur
******************************************************************/
void HAL_Encoder_Timer1_MspInit(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM1_CLK_ENABLE();
 8003fae:	2300      	movs	r3, #0
 8003fb0:	603b      	str	r3, [r7, #0]
 8003fb2:	4b1a      	ldr	r3, [pc, #104]	; (800401c <HAL_Encoder_Timer1_MspInit+0x74>)
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb6:	4a19      	ldr	r2, [pc, #100]	; (800401c <HAL_Encoder_Timer1_MspInit+0x74>)
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8003fbe:	4b17      	ldr	r3, [pc, #92]	; (800401c <HAL_Encoder_Timer1_MspInit+0x74>)
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8003fca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003fce:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM1 ; // hal_gpio_ex.h
 8003fdc:	2301      	movs	r3, #1
 8003fde:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fe0:	1d3b      	adds	r3, r7, #4
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	480e      	ldr	r0, [pc, #56]	; (8004020 <HAL_Encoder_Timer1_MspInit+0x78>)
 8003fe6:	f001 fe87 	bl	8005cf8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fee:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003ff0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003ff4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ffa:	1d3b      	adds	r3, r7, #4
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4809      	ldr	r0, [pc, #36]	; (8004024 <HAL_Encoder_Timer1_MspInit+0x7c>)
 8004000:	f001 fe7a 	bl	8005cf8 <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, EXTI15_10_IRQ_PRIO, 0);
 8004004:	2200      	movs	r2, #0
 8004006:	2107      	movs	r1, #7
 8004008:	2028      	movs	r0, #40	; 0x28
 800400a:	f001 fa3b 	bl	8005484 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800400e:	2028      	movs	r0, #40	; 0x28
 8004010:	f001 fa54 	bl	80054bc <HAL_NVIC_EnableIRQ>
}
 8004014:	bf00      	nop
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40023800 	.word	0x40023800
 8004020:	40020000 	.word	0x40020000
 8004024:	40020400 	.word	0x40020400

08004028 <HAL_Encoder_Timer2_MspInit>:
PWM2/1	-->	PA0		-- Encodeur Voie A
PWM2/2	--> PA1		-- Encodeur Voie B
EXTI 	--> PC0		-- Index Moteur
******************************************************************/
void HAL_Encoder_Timer2_MspInit(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM2_CLK_ENABLE();
 800402e:	2300      	movs	r3, #0
 8004030:	603b      	str	r3, [r7, #0]
 8004032:	4b19      	ldr	r3, [pc, #100]	; (8004098 <HAL_Encoder_Timer2_MspInit+0x70>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	4a18      	ldr	r2, [pc, #96]	; (8004098 <HAL_Encoder_Timer2_MspInit+0x70>)
 8004038:	f043 0301 	orr.w	r3, r3, #1
 800403c:	6413      	str	r3, [r2, #64]	; 0x40
 800403e:	4b16      	ldr	r3, [pc, #88]	; (8004098 <HAL_Encoder_Timer2_MspInit+0x70>)
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	603b      	str	r3, [r7, #0]
 8004048:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800404a:	2303      	movs	r3, #3
 800404c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 800404e:	2302      	movs	r3, #2
 8004050:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004052:	2301      	movs	r3, #1
 8004054:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004056:	2301      	movs	r3, #1
 8004058:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM2 ; // hal_gpio_ex.h
 800405a:	2301      	movs	r3, #1
 800405c:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800405e:	1d3b      	adds	r3, r7, #4
 8004060:	4619      	mov	r1, r3
 8004062:	480e      	ldr	r0, [pc, #56]	; (800409c <HAL_Encoder_Timer2_MspInit+0x74>)
 8004064:	f001 fe48 	bl	8005cf8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004068:	2301      	movs	r3, #1
 800406a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800406c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004070:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004076:	1d3b      	adds	r3, r7, #4
 8004078:	4619      	mov	r1, r3
 800407a:	4809      	ldr	r0, [pc, #36]	; (80040a0 <HAL_Encoder_Timer2_MspInit+0x78>)
 800407c:	f001 fe3c 	bl	8005cf8 <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI0_IRQn, EXTI0_IRQ_PRIO, 0);
 8004080:	2200      	movs	r2, #0
 8004082:	2106      	movs	r1, #6
 8004084:	2006      	movs	r0, #6
 8004086:	f001 f9fd 	bl	8005484 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800408a:	2006      	movs	r0, #6
 800408c:	f001 fa16 	bl	80054bc <HAL_NVIC_EnableIRQ>
}
 8004090:	bf00      	nop
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40023800 	.word	0x40023800
 800409c:	40020000 	.word	0x40020000
 80040a0:	40020800 	.word	0x40020800

080040a4 <HAL_PWM_Timer3_MspInit>:
PA6 --> PWM3/1
PC7 --> PWM3/2
PB3 --> ENABLE MOTEUR (actif état Bas)
******************************************************************/
void HAL_PWM_Timer3_MspInit(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM3_CLK_ENABLE();
 80040aa:	2300      	movs	r3, #0
 80040ac:	603b      	str	r3, [r7, #0]
 80040ae:	4b28      	ldr	r3, [pc, #160]	; (8004150 <HAL_PWM_Timer3_MspInit+0xac>)
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	4a27      	ldr	r2, [pc, #156]	; (8004150 <HAL_PWM_Timer3_MspInit+0xac>)
 80040b4:	f043 0302 	orr.w	r3, r3, #2
 80040b8:	6413      	str	r3, [r2, #64]	; 0x40
 80040ba:	4b25      	ldr	r3, [pc, #148]	; (8004150 <HAL_PWM_Timer3_MspInit+0xac>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	603b      	str	r3, [r7, #0]
 80040c4:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80040c6:	2340      	movs	r3, #64	; 0x40
 80040c8:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ca:	2302      	movs	r3, #2
 80040cc:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040ce:	2301      	movs	r3, #1
 80040d0:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80040d2:	2301      	movs	r3, #1
 80040d4:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 80040d6:	2302      	movs	r3, #2
 80040d8:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040da:	1d3b      	adds	r3, r7, #4
 80040dc:	4619      	mov	r1, r3
 80040de:	481d      	ldr	r0, [pc, #116]	; (8004154 <HAL_PWM_Timer3_MspInit+0xb0>)
 80040e0:	f001 fe0a 	bl	8005cf8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80040e4:	2380      	movs	r3, #128	; 0x80
 80040e6:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e8:	2302      	movs	r3, #2
 80040ea:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040ec:	2301      	movs	r3, #1
 80040ee:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80040f0:	2301      	movs	r3, #1
 80040f2:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 80040f4:	2302      	movs	r3, #2
 80040f6:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040f8:	1d3b      	adds	r3, r7, #4
 80040fa:	4619      	mov	r1, r3
 80040fc:	4816      	ldr	r0, [pc, #88]	; (8004158 <HAL_PWM_Timer3_MspInit+0xb4>)
 80040fe:	f001 fdfb 	bl	8005cf8 <HAL_GPIO_Init>

	  // ENABLE MOTEUR : SORTIE LOGIQUE PB3
	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004102:	2380      	movs	r3, #128	; 0x80
 8004104:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004106:	2300      	movs	r3, #0
 8004108:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800410e:	1d3b      	adds	r3, r7, #4
 8004110:	4619      	mov	r1, r3
 8004112:	4810      	ldr	r0, [pc, #64]	; (8004154 <HAL_PWM_Timer3_MspInit+0xb0>)
 8004114:	f001 fdf0 	bl	8005cf8 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8004118:	2201      	movs	r2, #1
 800411a:	2180      	movs	r1, #128	; 0x80
 800411c:	480d      	ldr	r0, [pc, #52]	; (8004154 <HAL_PWM_Timer3_MspInit+0xb0>)
 800411e:	f001 ff6f 	bl	8006000 <HAL_GPIO_WritePin>

	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004122:	2308      	movs	r3, #8
 8004124:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004126:	2301      	movs	r3, #1
 8004128:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800412a:	2301      	movs	r3, #1
 800412c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800412e:	2302      	movs	r3, #2
 8004130:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004132:	1d3b      	adds	r3, r7, #4
 8004134:	4619      	mov	r1, r3
 8004136:	4809      	ldr	r0, [pc, #36]	; (800415c <HAL_PWM_Timer3_MspInit+0xb8>)
 8004138:	f001 fdde 	bl	8005cf8 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 800413c:	2201      	movs	r2, #1
 800413e:	2108      	movs	r1, #8
 8004140:	4806      	ldr	r0, [pc, #24]	; (800415c <HAL_PWM_Timer3_MspInit+0xb8>)
 8004142:	f001 ff5d 	bl	8006000 <HAL_GPIO_WritePin>




}
 8004146:	bf00      	nop
 8004148:	3718      	adds	r7, #24
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40023800 	.word	0x40023800
 8004154:	40020000 	.word	0x40020000
 8004158:	40020800 	.word	0x40020800
 800415c:	40020400 	.word	0x40020400

08004160 <HAL_adcir_MspInit>:
ADC1_4	--> PA4
ADC1_8	--> PB0
http://stm32f4-discovery.com/2014/04/library-06-ad-converter-on-stm32f4xx/
******************************************************************/
void HAL_adcir_MspInit(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;
	  /* Peripheral clock enable */
	  __ADC1_CLK_ENABLE();
 8004166:	2300      	movs	r3, #0
 8004168:	603b      	str	r3, [r7, #0]
 800416a:	4b13      	ldr	r3, [pc, #76]	; (80041b8 <HAL_adcir_MspInit+0x58>)
 800416c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416e:	4a12      	ldr	r2, [pc, #72]	; (80041b8 <HAL_adcir_MspInit+0x58>)
 8004170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004174:	6453      	str	r3, [r2, #68]	; 0x44
 8004176:	4b10      	ldr	r3, [pc, #64]	; (80041b8 <HAL_adcir_MspInit+0x58>)
 8004178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417e:	603b      	str	r3, [r7, #0]
 8004180:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_4 ;
 8004182:	2310      	movs	r3, #16
 8004184:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004186:	2303      	movs	r3, #3
 8004188:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418a:	2300      	movs	r3, #0
 800418c:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800418e:	1d3b      	adds	r3, r7, #4
 8004190:	4619      	mov	r1, r3
 8004192:	480a      	ldr	r0, [pc, #40]	; (80041bc <HAL_adcir_MspInit+0x5c>)
 8004194:	f001 fdb0 	bl	8005cf8 <HAL_GPIO_Init>


	  GPIO_InitStruct.Pin = GPIO_PIN_0 ;
 8004198:	2301      	movs	r3, #1
 800419a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800419c:	2303      	movs	r3, #3
 800419e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a0:	2300      	movs	r3, #0
 80041a2:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041a4:	1d3b      	adds	r3, r7, #4
 80041a6:	4619      	mov	r1, r3
 80041a8:	4805      	ldr	r0, [pc, #20]	; (80041c0 <HAL_adcir_MspInit+0x60>)
 80041aa:	f001 fda5 	bl	8005cf8 <HAL_GPIO_Init>

}
 80041ae:	bf00      	nop
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40023800 	.word	0x40023800
 80041bc:	40020000 	.word	0x40020000
 80041c0:	40020400 	.word	0x40020400

080041c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
******************************************************************/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08a      	sub	sp, #40	; 0x28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041cc:	f107 0314 	add.w	r3, r7, #20
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	605a      	str	r2, [r3, #4]
 80041d6:	609a      	str	r2, [r3, #8]
 80041d8:	60da      	str	r2, [r3, #12]
 80041da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a21      	ldr	r2, [pc, #132]	; (8004268 <HAL_I2C_MspInit+0xa4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d13c      	bne.n	8004260 <HAL_I2C_MspInit+0x9c>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041e6:	2300      	movs	r3, #0
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	4b20      	ldr	r3, [pc, #128]	; (800426c <HAL_I2C_MspInit+0xa8>)
 80041ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ee:	4a1f      	ldr	r2, [pc, #124]	; (800426c <HAL_I2C_MspInit+0xa8>)
 80041f0:	f043 0302 	orr.w	r3, r3, #2
 80041f4:	6313      	str	r3, [r2, #48]	; 0x30
 80041f6:	4b1d      	ldr	r3, [pc, #116]	; (800426c <HAL_I2C_MspInit+0xa8>)
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	613b      	str	r3, [r7, #16]
 8004200:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004202:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004208:	2312      	movs	r3, #18
 800420a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800420c:	2300      	movs	r3, #0
 800420e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004210:	2303      	movs	r3, #3
 8004212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004214:	2304      	movs	r3, #4
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004218:	f107 0314 	add.w	r3, r7, #20
 800421c:	4619      	mov	r1, r3
 800421e:	4814      	ldr	r0, [pc, #80]	; (8004270 <HAL_I2C_MspInit+0xac>)
 8004220:	f001 fd6a 	bl	8005cf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004224:	2300      	movs	r3, #0
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	4b10      	ldr	r3, [pc, #64]	; (800426c <HAL_I2C_MspInit+0xa8>)
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	4a0f      	ldr	r2, [pc, #60]	; (800426c <HAL_I2C_MspInit+0xa8>)
 800422e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004232:	6413      	str	r3, [r2, #64]	; 0x40
 8004234:	4b0d      	ldr	r3, [pc, #52]	; (800426c <HAL_I2C_MspInit+0xa8>)
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	68fb      	ldr	r3, [r7, #12]

	  HAL_NVIC_SetPriority(I2C1_ER_IRQn, I2C1_ER_IRQ_PRIO, 0);
 8004240:	2200      	movs	r2, #0
 8004242:	2102      	movs	r1, #2
 8004244:	2020      	movs	r0, #32
 8004246:	f001 f91d 	bl	8005484 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800424a:	2020      	movs	r0, #32
 800424c:	f001 f936 	bl	80054bc <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(I2C1_EV_IRQn, I2C1_EV_IRQ_PRIO, 0);
 8004250:	2200      	movs	r2, #0
 8004252:	210b      	movs	r1, #11
 8004254:	201f      	movs	r0, #31
 8004256:	f001 f915 	bl	8005484 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800425a:	201f      	movs	r0, #31
 800425c:	f001 f92e 	bl	80054bc <HAL_NVIC_EnableIRQ>



  }

}
 8004260:	bf00      	nop
 8004262:	3728      	adds	r7, #40	; 0x28
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40005400 	.word	0x40005400
 800426c:	40023800 	.word	0x40023800
 8004270:	40020400 	.word	0x40020400

08004274 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
******************************************************************/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08c      	sub	sp, #48	; 0x30
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800427c:	f107 031c 	add.w	r3, r7, #28
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	605a      	str	r2, [r3, #4]
 8004286:	609a      	str	r2, [r3, #8]
 8004288:	60da      	str	r2, [r3, #12]
 800428a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4aa2      	ldr	r2, [pc, #648]	; (800451c <HAL_UART_MspInit+0x2a8>)
 8004292:	4293      	cmp	r3, r2
 8004294:	f040 80a5 	bne.w	80043e2 <HAL_UART_MspInit+0x16e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004298:	2300      	movs	r3, #0
 800429a:	61bb      	str	r3, [r7, #24]
 800429c:	4ba0      	ldr	r3, [pc, #640]	; (8004520 <HAL_UART_MspInit+0x2ac>)
 800429e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a0:	4a9f      	ldr	r2, [pc, #636]	; (8004520 <HAL_UART_MspInit+0x2ac>)
 80042a2:	f043 0310 	orr.w	r3, r3, #16
 80042a6:	6453      	str	r3, [r2, #68]	; 0x44
 80042a8:	4b9d      	ldr	r3, [pc, #628]	; (8004520 <HAL_UART_MspInit+0x2ac>)
 80042aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ac:	f003 0310 	and.w	r3, r3, #16
 80042b0:	61bb      	str	r3, [r7, #24]
 80042b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042b4:	2300      	movs	r3, #0
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	4b99      	ldr	r3, [pc, #612]	; (8004520 <HAL_UART_MspInit+0x2ac>)
 80042ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042bc:	4a98      	ldr	r2, [pc, #608]	; (8004520 <HAL_UART_MspInit+0x2ac>)
 80042be:	f043 0301 	orr.w	r3, r3, #1
 80042c2:	6313      	str	r3, [r2, #48]	; 0x30
 80042c4:	4b96      	ldr	r3, [pc, #600]	; (8004520 <HAL_UART_MspInit+0x2ac>)
 80042c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	617b      	str	r3, [r7, #20]
 80042ce:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80042d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d6:	2302      	movs	r3, #2
 80042d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042da:	2300      	movs	r3, #0
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042de:	2303      	movs	r3, #3
 80042e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042e2:	2307      	movs	r3, #7
 80042e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042e6:	f107 031c 	add.w	r3, r7, #28
 80042ea:	4619      	mov	r1, r3
 80042ec:	488d      	ldr	r0, [pc, #564]	; (8004524 <HAL_UART_MspInit+0x2b0>)
 80042ee:	f001 fd03 	bl	8005cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80042f2:	2340      	movs	r3, #64	; 0x40
 80042f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f6:	2302      	movs	r3, #2
 80042f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042fe:	2303      	movs	r3, #3
 8004300:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004302:	2307      	movs	r3, #7
 8004304:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004306:	f107 031c 	add.w	r3, r7, #28
 800430a:	4619      	mov	r1, r3
 800430c:	4886      	ldr	r0, [pc, #536]	; (8004528 <HAL_UART_MspInit+0x2b4>)
 800430e:	f001 fcf3 	bl	8005cf8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004312:	4b86      	ldr	r3, [pc, #536]	; (800452c <HAL_UART_MspInit+0x2b8>)
 8004314:	4a86      	ldr	r2, [pc, #536]	; (8004530 <HAL_UART_MspInit+0x2bc>)
 8004316:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004318:	4b84      	ldr	r3, [pc, #528]	; (800452c <HAL_UART_MspInit+0x2b8>)
 800431a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800431e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004320:	4b82      	ldr	r3, [pc, #520]	; (800452c <HAL_UART_MspInit+0x2b8>)
 8004322:	2200      	movs	r2, #0
 8004324:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004326:	4b81      	ldr	r3, [pc, #516]	; (800452c <HAL_UART_MspInit+0x2b8>)
 8004328:	2200      	movs	r2, #0
 800432a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800432c:	4b7f      	ldr	r3, [pc, #508]	; (800452c <HAL_UART_MspInit+0x2b8>)
 800432e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004332:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004334:	4b7d      	ldr	r3, [pc, #500]	; (800452c <HAL_UART_MspInit+0x2b8>)
 8004336:	2200      	movs	r2, #0
 8004338:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800433a:	4b7c      	ldr	r3, [pc, #496]	; (800452c <HAL_UART_MspInit+0x2b8>)
 800433c:	2200      	movs	r2, #0
 800433e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004340:	4b7a      	ldr	r3, [pc, #488]	; (800452c <HAL_UART_MspInit+0x2b8>)
 8004342:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004346:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004348:	4b78      	ldr	r3, [pc, #480]	; (800452c <HAL_UART_MspInit+0x2b8>)
 800434a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800434e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004350:	4b76      	ldr	r3, [pc, #472]	; (800452c <HAL_UART_MspInit+0x2b8>)
 8004352:	2200      	movs	r2, #0
 8004354:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004356:	4875      	ldr	r0, [pc, #468]	; (800452c <HAL_UART_MspInit+0x2b8>)
 8004358:	f001 f8be 	bl	80054d8 <HAL_DMA_Init>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8004362:	f7ff f907 	bl	8003574 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a70      	ldr	r2, [pc, #448]	; (800452c <HAL_UART_MspInit+0x2b8>)
 800436a:	639a      	str	r2, [r3, #56]	; 0x38
 800436c:	4a6f      	ldr	r2, [pc, #444]	; (800452c <HAL_UART_MspInit+0x2b8>)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8004372:	4b70      	ldr	r3, [pc, #448]	; (8004534 <HAL_UART_MspInit+0x2c0>)
 8004374:	4a70      	ldr	r2, [pc, #448]	; (8004538 <HAL_UART_MspInit+0x2c4>)
 8004376:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8004378:	4b6e      	ldr	r3, [pc, #440]	; (8004534 <HAL_UART_MspInit+0x2c0>)
 800437a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800437e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004380:	4b6c      	ldr	r3, [pc, #432]	; (8004534 <HAL_UART_MspInit+0x2c0>)
 8004382:	2240      	movs	r2, #64	; 0x40
 8004384:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004386:	4b6b      	ldr	r3, [pc, #428]	; (8004534 <HAL_UART_MspInit+0x2c0>)
 8004388:	2200      	movs	r2, #0
 800438a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800438c:	4b69      	ldr	r3, [pc, #420]	; (8004534 <HAL_UART_MspInit+0x2c0>)
 800438e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004392:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004394:	4b67      	ldr	r3, [pc, #412]	; (8004534 <HAL_UART_MspInit+0x2c0>)
 8004396:	2200      	movs	r2, #0
 8004398:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800439a:	4b66      	ldr	r3, [pc, #408]	; (8004534 <HAL_UART_MspInit+0x2c0>)
 800439c:	2200      	movs	r2, #0
 800439e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80043a0:	4b64      	ldr	r3, [pc, #400]	; (8004534 <HAL_UART_MspInit+0x2c0>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80043a6:	4b63      	ldr	r3, [pc, #396]	; (8004534 <HAL_UART_MspInit+0x2c0>)
 80043a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80043ac:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043ae:	4b61      	ldr	r3, [pc, #388]	; (8004534 <HAL_UART_MspInit+0x2c0>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80043b4:	485f      	ldr	r0, [pc, #380]	; (8004534 <HAL_UART_MspInit+0x2c0>)
 80043b6:	f001 f88f 	bl	80054d8 <HAL_DMA_Init>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <HAL_UART_MspInit+0x150>
    {
      Error_Handler();
 80043c0:	f7ff f8d8 	bl	8003574 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a5b      	ldr	r2, [pc, #364]	; (8004534 <HAL_UART_MspInit+0x2c0>)
 80043c8:	635a      	str	r2, [r3, #52]	; 0x34
 80043ca:	4a5a      	ldr	r2, [pc, #360]	; (8004534 <HAL_UART_MspInit+0x2c0>)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80043d0:	2200      	movs	r2, #0
 80043d2:	2105      	movs	r1, #5
 80043d4:	2025      	movs	r0, #37	; 0x25
 80043d6:	f001 f855 	bl	8005484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80043da:	2025      	movs	r0, #37	; 0x25
 80043dc:	f001 f86e 	bl	80054bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80043e0:	e098      	b.n	8004514 <HAL_UART_MspInit+0x2a0>
  else if(huart->Instance==USART2)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a55      	ldr	r2, [pc, #340]	; (800453c <HAL_UART_MspInit+0x2c8>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	f040 8093 	bne.w	8004514 <HAL_UART_MspInit+0x2a0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80043ee:	2300      	movs	r3, #0
 80043f0:	613b      	str	r3, [r7, #16]
 80043f2:	4b4b      	ldr	r3, [pc, #300]	; (8004520 <HAL_UART_MspInit+0x2ac>)
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	4a4a      	ldr	r2, [pc, #296]	; (8004520 <HAL_UART_MspInit+0x2ac>)
 80043f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043fc:	6413      	str	r3, [r2, #64]	; 0x40
 80043fe:	4b48      	ldr	r3, [pc, #288]	; (8004520 <HAL_UART_MspInit+0x2ac>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004406:	613b      	str	r3, [r7, #16]
 8004408:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800440a:	2300      	movs	r3, #0
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	4b44      	ldr	r3, [pc, #272]	; (8004520 <HAL_UART_MspInit+0x2ac>)
 8004410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004412:	4a43      	ldr	r2, [pc, #268]	; (8004520 <HAL_UART_MspInit+0x2ac>)
 8004414:	f043 0301 	orr.w	r3, r3, #1
 8004418:	6313      	str	r3, [r2, #48]	; 0x30
 800441a:	4b41      	ldr	r3, [pc, #260]	; (8004520 <HAL_UART_MspInit+0x2ac>)
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004426:	230c      	movs	r3, #12
 8004428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800442a:	2302      	movs	r3, #2
 800442c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442e:	2300      	movs	r3, #0
 8004430:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004432:	2303      	movs	r3, #3
 8004434:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004436:	2307      	movs	r3, #7
 8004438:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800443a:	f107 031c 	add.w	r3, r7, #28
 800443e:	4619      	mov	r1, r3
 8004440:	4838      	ldr	r0, [pc, #224]	; (8004524 <HAL_UART_MspInit+0x2b0>)
 8004442:	f001 fc59 	bl	8005cf8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004446:	4b3e      	ldr	r3, [pc, #248]	; (8004540 <HAL_UART_MspInit+0x2cc>)
 8004448:	4a3e      	ldr	r2, [pc, #248]	; (8004544 <HAL_UART_MspInit+0x2d0>)
 800444a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800444c:	4b3c      	ldr	r3, [pc, #240]	; (8004540 <HAL_UART_MspInit+0x2cc>)
 800444e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004452:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004454:	4b3a      	ldr	r3, [pc, #232]	; (8004540 <HAL_UART_MspInit+0x2cc>)
 8004456:	2200      	movs	r2, #0
 8004458:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800445a:	4b39      	ldr	r3, [pc, #228]	; (8004540 <HAL_UART_MspInit+0x2cc>)
 800445c:	2200      	movs	r2, #0
 800445e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004460:	4b37      	ldr	r3, [pc, #220]	; (8004540 <HAL_UART_MspInit+0x2cc>)
 8004462:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004466:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004468:	4b35      	ldr	r3, [pc, #212]	; (8004540 <HAL_UART_MspInit+0x2cc>)
 800446a:	2200      	movs	r2, #0
 800446c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800446e:	4b34      	ldr	r3, [pc, #208]	; (8004540 <HAL_UART_MspInit+0x2cc>)
 8004470:	2200      	movs	r2, #0
 8004472:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004474:	4b32      	ldr	r3, [pc, #200]	; (8004540 <HAL_UART_MspInit+0x2cc>)
 8004476:	f44f 7280 	mov.w	r2, #256	; 0x100
 800447a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800447c:	4b30      	ldr	r3, [pc, #192]	; (8004540 <HAL_UART_MspInit+0x2cc>)
 800447e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004482:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004484:	4b2e      	ldr	r3, [pc, #184]	; (8004540 <HAL_UART_MspInit+0x2cc>)
 8004486:	2200      	movs	r2, #0
 8004488:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800448a:	482d      	ldr	r0, [pc, #180]	; (8004540 <HAL_UART_MspInit+0x2cc>)
 800448c:	f001 f824 	bl	80054d8 <HAL_DMA_Init>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <HAL_UART_MspInit+0x226>
      Error_Handler();
 8004496:	f7ff f86d 	bl	8003574 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a28      	ldr	r2, [pc, #160]	; (8004540 <HAL_UART_MspInit+0x2cc>)
 800449e:	639a      	str	r2, [r3, #56]	; 0x38
 80044a0:	4a27      	ldr	r2, [pc, #156]	; (8004540 <HAL_UART_MspInit+0x2cc>)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80044a6:	4b28      	ldr	r3, [pc, #160]	; (8004548 <HAL_UART_MspInit+0x2d4>)
 80044a8:	4a28      	ldr	r2, [pc, #160]	; (800454c <HAL_UART_MspInit+0x2d8>)
 80044aa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80044ac:	4b26      	ldr	r3, [pc, #152]	; (8004548 <HAL_UART_MspInit+0x2d4>)
 80044ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80044b2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80044b4:	4b24      	ldr	r3, [pc, #144]	; (8004548 <HAL_UART_MspInit+0x2d4>)
 80044b6:	2240      	movs	r2, #64	; 0x40
 80044b8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044ba:	4b23      	ldr	r3, [pc, #140]	; (8004548 <HAL_UART_MspInit+0x2d4>)
 80044bc:	2200      	movs	r2, #0
 80044be:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80044c0:	4b21      	ldr	r3, [pc, #132]	; (8004548 <HAL_UART_MspInit+0x2d4>)
 80044c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044c6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044c8:	4b1f      	ldr	r3, [pc, #124]	; (8004548 <HAL_UART_MspInit+0x2d4>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044ce:	4b1e      	ldr	r3, [pc, #120]	; (8004548 <HAL_UART_MspInit+0x2d4>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80044d4:	4b1c      	ldr	r3, [pc, #112]	; (8004548 <HAL_UART_MspInit+0x2d4>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80044da:	4b1b      	ldr	r3, [pc, #108]	; (8004548 <HAL_UART_MspInit+0x2d4>)
 80044dc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80044e0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044e2:	4b19      	ldr	r3, [pc, #100]	; (8004548 <HAL_UART_MspInit+0x2d4>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80044e8:	4817      	ldr	r0, [pc, #92]	; (8004548 <HAL_UART_MspInit+0x2d4>)
 80044ea:	f000 fff5 	bl	80054d8 <HAL_DMA_Init>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <HAL_UART_MspInit+0x284>
      Error_Handler();
 80044f4:	f7ff f83e 	bl	8003574 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a13      	ldr	r2, [pc, #76]	; (8004548 <HAL_UART_MspInit+0x2d4>)
 80044fc:	635a      	str	r2, [r3, #52]	; 0x34
 80044fe:	4a12      	ldr	r2, [pc, #72]	; (8004548 <HAL_UART_MspInit+0x2d4>)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004504:	2200      	movs	r2, #0
 8004506:	2105      	movs	r1, #5
 8004508:	2026      	movs	r0, #38	; 0x26
 800450a:	f000 ffbb 	bl	8005484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800450e:	2026      	movs	r0, #38	; 0x26
 8004510:	f000 ffd4 	bl	80054bc <HAL_NVIC_EnableIRQ>
}
 8004514:	bf00      	nop
 8004516:	3730      	adds	r7, #48	; 0x30
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40011000 	.word	0x40011000
 8004520:	40023800 	.word	0x40023800
 8004524:	40020000 	.word	0x40020000
 8004528:	40020400 	.word	0x40020400
 800452c:	20004a60 	.word	0x20004a60
 8004530:	40026440 	.word	0x40026440
 8004534:	20004ac0 	.word	0x20004ac0
 8004538:	400264b8 	.word	0x400264b8
 800453c:	40004400 	.word	0x40004400
 8004540:	20004b20 	.word	0x20004b20
 8004544:	40026088 	.word	0x40026088
 8004548:	20004b80 	.word	0x20004b80
 800454c:	400260a0 	.word	0x400260a0

08004550 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b08c      	sub	sp, #48	; 0x30
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8004560:	2300      	movs	r3, #0
 8004562:	60bb      	str	r3, [r7, #8]
 8004564:	4b2f      	ldr	r3, [pc, #188]	; (8004624 <HAL_InitTick+0xd4>)
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	4a2e      	ldr	r2, [pc, #184]	; (8004624 <HAL_InitTick+0xd4>)
 800456a:	f043 0304 	orr.w	r3, r3, #4
 800456e:	6413      	str	r3, [r2, #64]	; 0x40
 8004570:	4b2c      	ldr	r3, [pc, #176]	; (8004624 <HAL_InitTick+0xd4>)
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	60bb      	str	r3, [r7, #8]
 800457a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800457c:	f107 020c 	add.w	r2, r7, #12
 8004580:	f107 0310 	add.w	r3, r7, #16
 8004584:	4611      	mov	r1, r2
 8004586:	4618      	mov	r0, r3
 8004588:	f004 fe4c 	bl	8009224 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800458c:	f004 fe36 	bl	80091fc <HAL_RCC_GetPCLK2Freq>
 8004590:	4603      	mov	r3, r0
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004598:	4a23      	ldr	r2, [pc, #140]	; (8004628 <HAL_InitTick+0xd8>)
 800459a:	fba2 2303 	umull	r2, r3, r2, r3
 800459e:	0c9b      	lsrs	r3, r3, #18
 80045a0:	3b01      	subs	r3, #1
 80045a2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim4.Instance = TIM4;
 80045a4:	4b21      	ldr	r3, [pc, #132]	; (800462c <HAL_InitTick+0xdc>)
 80045a6:	4a22      	ldr	r2, [pc, #136]	; (8004630 <HAL_InitTick+0xe0>)
 80045a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80045aa:	4b20      	ldr	r3, [pc, #128]	; (800462c <HAL_InitTick+0xdc>)
 80045ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80045b0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80045b2:	4a1e      	ldr	r2, [pc, #120]	; (800462c <HAL_InitTick+0xdc>)
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80045b8:	4b1c      	ldr	r3, [pc, #112]	; (800462c <HAL_InitTick+0xdc>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045be:	4b1b      	ldr	r3, [pc, #108]	; (800462c <HAL_InitTick+0xdc>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045c4:	4b19      	ldr	r3, [pc, #100]	; (800462c <HAL_InitTick+0xdc>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80045ca:	4818      	ldr	r0, [pc, #96]	; (800462c <HAL_InitTick+0xdc>)
 80045cc:	f004 fe5c 	bl	8009288 <HAL_TIM_Base_Init>
 80045d0:	4603      	mov	r3, r0
 80045d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80045d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d11b      	bne.n	8004616 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80045de:	4813      	ldr	r0, [pc, #76]	; (800462c <HAL_InitTick+0xdc>)
 80045e0:	f004 feac 	bl	800933c <HAL_TIM_Base_Start_IT>
 80045e4:	4603      	mov	r3, r0
 80045e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80045ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d111      	bne.n	8004616 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80045f2:	201e      	movs	r0, #30
 80045f4:	f000 ff62 	bl	80054bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b0f      	cmp	r3, #15
 80045fc:	d808      	bhi.n	8004610 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80045fe:	2200      	movs	r2, #0
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	201e      	movs	r0, #30
 8004604:	f000 ff3e 	bl	8005484 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004608:	4a0a      	ldr	r2, [pc, #40]	; (8004634 <HAL_InitTick+0xe4>)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6013      	str	r3, [r2, #0]
 800460e:	e002      	b.n	8004616 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8004616:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800461a:	4618      	mov	r0, r3
 800461c:	3730      	adds	r7, #48	; 0x30
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	40023800 	.word	0x40023800
 8004628:	431bde83 	.word	0x431bde83
 800462c:	20004d34 	.word	0x20004d34
 8004630:	40000800 	.word	0x40000800
 8004634:	2000002c 	.word	0x2000002c

08004638 <NMI_Handler>:
extern TIM_HandleTypeDef htim4;
extern I2C_HandleTypeDef hi2c1;


void NMI_Handler(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  while (1)
 800463c:	e7fe      	b.n	800463c <NMI_Handler+0x4>

0800463e <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 800463e:	b480      	push	{r7}
 8004640:	af00      	add	r7, sp, #0

  while (1)
 8004642:	e7fe      	b.n	8004642 <HardFault_Handler+0x4>

08004644 <MemManage_Handler>:
  {
  }
}

void MemManage_Handler(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
  while (1)
 8004648:	e7fe      	b.n	8004648 <MemManage_Handler+0x4>

0800464a <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 800464a:	b480      	push	{r7}
 800464c:	af00      	add	r7, sp, #0
  while (1)
 800464e:	e7fe      	b.n	800464e <BusFault_Handler+0x4>

08004650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  while (1)
 8004654:	e7fe      	b.n	8004654 <UsageFault_Handler+0x4>

08004656 <DebugMon_Handler>:
  {
  }
}

void DebugMon_Handler(void)
{
 8004656:	b480      	push	{r7}
 8004658:	af00      	add	r7, sp, #0
}
 800465a:	bf00      	nop
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <DMA1_Stream5_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void DMA1_Stream5_IRQHandler(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004668:	4802      	ldr	r0, [pc, #8]	; (8004674 <DMA1_Stream5_IRQHandler+0x10>)
 800466a:	f001 f8cd 	bl	8005808 <HAL_DMA_IRQHandler>
}
 800466e:	bf00      	nop
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	20004b20 	.word	0x20004b20

08004678 <DMA1_Stream6_IRQHandler>:


void DMA1_Stream6_IRQHandler(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800467c:	4802      	ldr	r0, [pc, #8]	; (8004688 <DMA1_Stream6_IRQHandler+0x10>)
 800467e:	f001 f8c3 	bl	8005808 <HAL_DMA_IRQHandler>
}
 8004682:	bf00      	nop
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	20004b80 	.word	0x20004b80

0800468c <TIM4_IRQHandler>:
{
  HAL_TIM_IRQHandler(&htim1);
}*/

void TIM4_IRQHandler(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8004690:	4802      	ldr	r0, [pc, #8]	; (800469c <TIM4_IRQHandler+0x10>)
 8004692:	f005 f8a3 	bl	80097dc <HAL_TIM_IRQHandler>
}
 8004696:	bf00      	nop
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	20004d34 	.word	0x20004d34

080046a0 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 80046a4:	4802      	ldr	r0, [pc, #8]	; (80046b0 <USART1_IRQHandler+0x10>)
 80046a6:	f005 ff7f 	bl	800a5a8 <HAL_UART_IRQHandler>
}
 80046aa:	bf00      	nop
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	200049d8 	.word	0x200049d8

080046b4 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 80046b8:	4802      	ldr	r0, [pc, #8]	; (80046c4 <USART2_IRQHandler+0x10>)
 80046ba:	f005 ff75 	bl	800a5a8 <HAL_UART_IRQHandler>
}
 80046be:	bf00      	nop
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20004a1c 	.word	0x20004a1c

080046c8 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80046cc:	4802      	ldr	r0, [pc, #8]	; (80046d8 <DMA2_Stream2_IRQHandler+0x10>)
 80046ce:	f001 f89b 	bl	8005808 <HAL_DMA_IRQHandler>
}
 80046d2:	bf00      	nop
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20004a60 	.word	0x20004a60

080046dc <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80046e0:	4802      	ldr	r0, [pc, #8]	; (80046ec <DMA2_Stream7_IRQHandler+0x10>)
 80046e2:	f001 f891 	bl	8005808 <HAL_DMA_IRQHandler>
}
 80046e6:	bf00      	nop
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20004ac0 	.word	0x20004ac0

080046f0 <EXTI15_10_IRQHandler>:

//=======================================================
//		ENCODER INDEX LEFT
//=======================================================
void EXTI15_10_IRQHandler(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80046f4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80046f8:	f001 fc9c 	bl	8006034 <HAL_GPIO_EXTI_IRQHandler>
}
 80046fc:	bf00      	nop
 80046fe:	bd80      	pop	{r7, pc}

08004700 <EXTI0_IRQHandler>:
//=======================================================
//		ENCODER INDEX RIGHT
//=======================================================

void EXTI0_IRQHandler(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004704:	2001      	movs	r0, #1
 8004706:	f001 fc95 	bl	8006034 <HAL_GPIO_EXTI_IRQHandler>
}
 800470a:	bf00      	nop
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
	  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004714:	4802      	ldr	r0, [pc, #8]	; (8004720 <I2C1_EV_IRQHandler+0x10>)
 8004716:	f002 f90d 	bl	8006934 <HAL_I2C_EV_IRQHandler>
}
 800471a:	bf00      	nop
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	20004984 	.word	0x20004984

08004724 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
	  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004728:	4802      	ldr	r0, [pc, #8]	; (8004734 <I2C1_ER_IRQHandler+0x10>)
 800472a:	f002 fa56 	bl	8006bda <HAL_I2C_ER_IRQHandler>
}
 800472e:	bf00      	nop
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	20004984 	.word	0x20004984

08004738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004740:	4a14      	ldr	r2, [pc, #80]	; (8004794 <_sbrk+0x5c>)
 8004742:	4b15      	ldr	r3, [pc, #84]	; (8004798 <_sbrk+0x60>)
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800474c:	4b13      	ldr	r3, [pc, #76]	; (800479c <_sbrk+0x64>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d102      	bne.n	800475a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004754:	4b11      	ldr	r3, [pc, #68]	; (800479c <_sbrk+0x64>)
 8004756:	4a12      	ldr	r2, [pc, #72]	; (80047a0 <_sbrk+0x68>)
 8004758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800475a:	4b10      	ldr	r3, [pc, #64]	; (800479c <_sbrk+0x64>)
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4413      	add	r3, r2
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	429a      	cmp	r2, r3
 8004766:	d207      	bcs.n	8004778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004768:	f015 ff78 	bl	801a65c <__errno>
 800476c:	4603      	mov	r3, r0
 800476e:	220c      	movs	r2, #12
 8004770:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004772:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004776:	e009      	b.n	800478c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004778:	4b08      	ldr	r3, [pc, #32]	; (800479c <_sbrk+0x64>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800477e:	4b07      	ldr	r3, [pc, #28]	; (800479c <_sbrk+0x64>)
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4413      	add	r3, r2
 8004786:	4a05      	ldr	r2, [pc, #20]	; (800479c <_sbrk+0x64>)
 8004788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800478a:	68fb      	ldr	r3, [r7, #12]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	20020000 	.word	0x20020000
 8004798:	00000400 	.word	0x00000400
 800479c:	20004d7c 	.word	0x20004d7c
 80047a0:	2000e878 	.word	0x2000e878

080047a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047a8:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <SystemInit+0x20>)
 80047aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ae:	4a05      	ldr	r2, [pc, #20]	; (80047c4 <SystemInit+0x20>)
 80047b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80047b8:	bf00      	nop
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	e000ed00 	.word	0xe000ed00

080047c8 <SystemClock_Config>:


#include "main.h"

void SystemClock_Config(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b094      	sub	sp, #80	; 0x50
 80047cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047ce:	f107 0320 	add.w	r3, r7, #32
 80047d2:	2230      	movs	r2, #48	; 0x30
 80047d4:	2100      	movs	r1, #0
 80047d6:	4618      	mov	r0, r3
 80047d8:	f015 fe56 	bl	801a488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047dc:	f107 030c 	add.w	r3, r7, #12
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	605a      	str	r2, [r3, #4]
 80047e6:	609a      	str	r2, [r3, #8]
 80047e8:	60da      	str	r2, [r3, #12]
 80047ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80047ec:	2300      	movs	r3, #0
 80047ee:	60bb      	str	r3, [r7, #8]
 80047f0:	4b28      	ldr	r3, [pc, #160]	; (8004894 <SystemClock_Config+0xcc>)
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	4a27      	ldr	r2, [pc, #156]	; (8004894 <SystemClock_Config+0xcc>)
 80047f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047fa:	6413      	str	r3, [r2, #64]	; 0x40
 80047fc:	4b25      	ldr	r3, [pc, #148]	; (8004894 <SystemClock_Config+0xcc>)
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004808:	2300      	movs	r3, #0
 800480a:	607b      	str	r3, [r7, #4]
 800480c:	4b22      	ldr	r3, [pc, #136]	; (8004898 <SystemClock_Config+0xd0>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a21      	ldr	r2, [pc, #132]	; (8004898 <SystemClock_Config+0xd0>)
 8004812:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004816:	6013      	str	r3, [r2, #0]
 8004818:	4b1f      	ldr	r3, [pc, #124]	; (8004898 <SystemClock_Config+0xd0>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004820:	607b      	str	r3, [r7, #4]
 8004822:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004824:	2301      	movs	r3, #1
 8004826:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004828:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800482c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800482e:	2302      	movs	r3, #2
 8004830:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004832:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004836:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004838:	2308      	movs	r3, #8
 800483a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 800483c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8004840:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8004842:	2306      	movs	r3, #6
 8004844:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004846:	2304      	movs	r3, #4
 8004848:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800484a:	f107 0320 	add.w	r3, r7, #32
 800484e:	4618      	mov	r0, r3
 8004850:	f004 f850 	bl	80088f4 <HAL_RCC_OscConfig>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800485a:	f7fe fe8b 	bl	8003574 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800485e:	230f      	movs	r3, #15
 8004860:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004862:	2302      	movs	r3, #2
 8004864:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004866:	2300      	movs	r3, #0
 8004868:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800486a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800486e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8004870:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004874:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004876:	f107 030c 	add.w	r3, r7, #12
 800487a:	2102      	movs	r1, #2
 800487c:	4618      	mov	r0, r3
 800487e:	f004 fab1 	bl	8008de4 <HAL_RCC_ClockConfig>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8004888:	f7fe fe74 	bl	8003574 <Error_Handler>
  }
}
 800488c:	bf00      	nop
 800488e:	3750      	adds	r7, #80	; 0x50
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40023800 	.word	0x40023800
 8004898:	40007000 	.word	0x40007000

0800489c <num2str>:
#include "util.h"

//=================================================================
void num2str(char *s, unsigned int number, unsigned int base, unsigned int size, int sp)
{
 800489c:	b480      	push	{r7}
 800489e:	b089      	sub	sp, #36	; 0x24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
 80048a8:	603b      	str	r3, [r7, #0]
        static char  hexChars[] = "0123456789ABCDEF";

        char *p=s;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	617b      	str	r3, [r7, #20]
        unsigned int i;
        char tmp;

        // get digits
        do {
                *s++=hexChars[number % base];
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	fb01 f202 	mul.w	r2, r1, r2
 80048bc:	1a9a      	subs	r2, r3, r2
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	1c59      	adds	r1, r3, #1
 80048c2:	60f9      	str	r1, [r7, #12]
 80048c4:	4936      	ldr	r1, [pc, #216]	; (80049a0 <num2str+0x104>)
 80048c6:	5c8a      	ldrb	r2, [r1, r2]
 80048c8:	701a      	strb	r2, [r3, #0]
        } while (number /= base);
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d2:	60bb      	str	r3, [r7, #8]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1e9      	bne.n	80048ae <num2str+0x12>
        *s='\0';
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	701a      	strb	r2, [r3, #0]

        // reverse string
        cnt=s-p;
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	613b      	str	r3, [r7, #16]
        for (i=0;i<cnt/2;i++) {
 80048e8:	2300      	movs	r3, #0
 80048ea:	61fb      	str	r3, [r7, #28]
 80048ec:	e01a      	b.n	8004924 <num2str+0x88>
                tmp=p[i]; p[i] = p[cnt-i-1]; p[cnt-i-1]=tmp;
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	4413      	add	r3, r2
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	76fb      	strb	r3, [r7, #27]
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	3b01      	subs	r3, #1
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	441a      	add	r2, r3
 8004904:	6979      	ldr	r1, [r7, #20]
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	440b      	add	r3, r1
 800490a:	7812      	ldrb	r2, [r2, #0]
 800490c:	701a      	strb	r2, [r3, #0]
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	4413      	add	r3, r2
 800491a:	7efa      	ldrb	r2, [r7, #27]
 800491c:	701a      	strb	r2, [r3, #0]
        for (i=0;i<cnt/2;i++) {
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	3301      	adds	r3, #1
 8004922:	61fb      	str	r3, [r7, #28]
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	085b      	lsrs	r3, r3, #1
 8004928:	69fa      	ldr	r2, [r7, #28]
 800492a:	429a      	cmp	r2, r3
 800492c:	d3df      	bcc.n	80048ee <num2str+0x52>
        }

        // add extra space
        if (cnt<size) {
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	429a      	cmp	r2, r3
 8004934:	d22d      	bcs.n	8004992 <num2str+0xf6>
                for (i=cnt;i==0;i--)
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	61fb      	str	r3, [r7, #28]
 800493a:	e00e      	b.n	800495a <num2str+0xbe>
                		{p[i+size-cnt]=p[i];}
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	441a      	add	r2, r3
 8004942:	69f9      	ldr	r1, [r7, #28]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	4419      	add	r1, r3
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1acb      	subs	r3, r1, r3
 800494c:	6979      	ldr	r1, [r7, #20]
 800494e:	440b      	add	r3, r1
 8004950:	7812      	ldrb	r2, [r2, #0]
 8004952:	701a      	strb	r2, [r3, #0]
                for (i=cnt;i==0;i--)
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	3b01      	subs	r3, #1
 8004958:	61fb      	str	r3, [r7, #28]
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0ed      	beq.n	800493c <num2str+0xa0>
                if (sp) tmp=' '; else tmp='0';
 8004960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004962:	2b00      	cmp	r3, #0
 8004964:	d002      	beq.n	800496c <num2str+0xd0>
 8004966:	2320      	movs	r3, #32
 8004968:	76fb      	strb	r3, [r7, #27]
 800496a:	e001      	b.n	8004970 <num2str+0xd4>
 800496c:	2330      	movs	r3, #48	; 0x30
 800496e:	76fb      	strb	r3, [r7, #27]
                for (i=0;i<size-cnt;i++) p[i]=tmp;
 8004970:	2300      	movs	r3, #0
 8004972:	61fb      	str	r3, [r7, #28]
 8004974:	e007      	b.n	8004986 <num2str+0xea>
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	4413      	add	r3, r2
 800497c:	7efa      	ldrb	r2, [r7, #27]
 800497e:	701a      	strb	r2, [r3, #0]
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	3301      	adds	r3, #1
 8004984:	61fb      	str	r3, [r7, #28]
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	69fa      	ldr	r2, [r7, #28]
 800498e:	429a      	cmp	r2, r3
 8004990:	d3f1      	bcc.n	8004976 <num2str+0xda>
        }
}
 8004992:	bf00      	nop
 8004994:	3724      	adds	r7, #36	; 0x24
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	20000018 	.word	0x20000018

080049a4 <str2num>:

//=================================================================
unsigned int str2num(char *s, unsigned base)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
	unsigned int u=0, d;
 80049ae:	2300      	movs	r3, #0
 80049b0:	617b      	str	r3, [r7, #20]
	char ch=*s++;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	607a      	str	r2, [r7, #4]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 80049bc:	e02e      	b.n	8004a1c <str2num+0x78>
		if ((ch>='0') && (ch<='9')) d=ch-'0';
 80049be:	7bfb      	ldrb	r3, [r7, #15]
 80049c0:	2b2f      	cmp	r3, #47	; 0x2f
 80049c2:	d906      	bls.n	80049d2 <str2num+0x2e>
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
 80049c6:	2b39      	cmp	r3, #57	; 0x39
 80049c8:	d803      	bhi.n	80049d2 <str2num+0x2e>
 80049ca:	7bfb      	ldrb	r3, [r7, #15]
 80049cc:	3b30      	subs	r3, #48	; 0x30
 80049ce:	613b      	str	r3, [r7, #16]
 80049d0:	e018      	b.n	8004a04 <str2num+0x60>
		else if ((base==16) && (ch>='A') && (ch<='F')) d=ch-'A'+10;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b10      	cmp	r3, #16
 80049d6:	d109      	bne.n	80049ec <str2num+0x48>
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
 80049da:	2b40      	cmp	r3, #64	; 0x40
 80049dc:	d906      	bls.n	80049ec <str2num+0x48>
 80049de:	7bfb      	ldrb	r3, [r7, #15]
 80049e0:	2b46      	cmp	r3, #70	; 0x46
 80049e2:	d803      	bhi.n	80049ec <str2num+0x48>
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	3b37      	subs	r3, #55	; 0x37
 80049e8:	613b      	str	r3, [r7, #16]
 80049ea:	e00b      	b.n	8004a04 <str2num+0x60>
		else if ((base==16) && (ch>='a') && (ch<='f')) d=ch-'a'+10;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	2b10      	cmp	r3, #16
 80049f0:	d117      	bne.n	8004a22 <str2num+0x7e>
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	2b60      	cmp	r3, #96	; 0x60
 80049f6:	d914      	bls.n	8004a22 <str2num+0x7e>
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
 80049fa:	2b66      	cmp	r3, #102	; 0x66
 80049fc:	d811      	bhi.n	8004a22 <str2num+0x7e>
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
 8004a00:	3b57      	subs	r3, #87	; 0x57
 8004a02:	613b      	str	r3, [r7, #16]
		else break;
		u=d+base*u;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	4413      	add	r3, r2
 8004a10:	617b      	str	r3, [r7, #20]
		ch=*s++;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1cd      	bne.n	80049be <str2num+0x1a>
	}
	return u;
 8004a22:	697b      	ldr	r3, [r7, #20]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	371c      	adds	r7, #28
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <reverse>:

//=================================================================
void reverse(char *str, int len)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b087      	sub	sp, #28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
    int i=0, j=len-1, temp;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	617b      	str	r3, [r7, #20]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	3b01      	subs	r3, #1
 8004a42:	613b      	str	r3, [r7, #16]
    while (i<j)
 8004a44:	e018      	b.n	8004a78 <reverse+0x48>
    {
        temp = str[i];
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	441a      	add	r2, r3
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	6879      	ldr	r1, [r7, #4]
 8004a5a:	440b      	add	r3, r1
 8004a5c:	7812      	ldrb	r2, [r2, #0]
 8004a5e:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	4413      	add	r3, r2
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	b2d2      	uxtb	r2, r2
 8004a6a:	701a      	strb	r2, [r3, #0]
        i++; j--;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	617b      	str	r3, [r7, #20]
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	3b01      	subs	r3, #1
 8004a76:	613b      	str	r3, [r7, #16]
    while (i<j)
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	dbe2      	blt.n	8004a46 <reverse+0x16>
    }
}
 8004a80:	bf00      	nop
 8004a82:	bf00      	nop
 8004a84:	371c      	adds	r7, #28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
	...

08004a90 <intToStr>:

//=================================================================
int intToStr(int x, char str[], int d)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
    int i = 0;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	617b      	str	r3, [r7, #20]
    while (x)
 8004aa0:	e01d      	b.n	8004ade <intToStr+0x4e>
    {
        str[i++] = (x%10) + '0';
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	4b1d      	ldr	r3, [pc, #116]	; (8004b1c <intToStr+0x8c>)
 8004aa6:	fb83 1302 	smull	r1, r3, r3, r2
 8004aaa:	1099      	asrs	r1, r3, #2
 8004aac:	17d3      	asrs	r3, r2, #31
 8004aae:	1ac9      	subs	r1, r1, r3
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	1ad1      	subs	r1, r2, r3
 8004aba:	b2ca      	uxtb	r2, r1
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	1c59      	adds	r1, r3, #1
 8004ac0:	6179      	str	r1, [r7, #20]
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	440b      	add	r3, r1
 8004ac8:	3230      	adds	r2, #48	; 0x30
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	701a      	strb	r2, [r3, #0]
        x = x/10;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	4a12      	ldr	r2, [pc, #72]	; (8004b1c <intToStr+0x8c>)
 8004ad2:	fb82 1203 	smull	r1, r2, r2, r3
 8004ad6:	1092      	asrs	r2, r2, #2
 8004ad8:	17db      	asrs	r3, r3, #31
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	60fb      	str	r3, [r7, #12]
    while (x)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1de      	bne.n	8004aa2 <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8004ae4:	e007      	b.n	8004af6 <intToStr+0x66>
        str[i++] = '0';
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	617a      	str	r2, [r7, #20]
 8004aec:	461a      	mov	r2, r3
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	4413      	add	r3, r2
 8004af2:	2230      	movs	r2, #48	; 0x30
 8004af4:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	dbf3      	blt.n	8004ae6 <intToStr+0x56>

    reverse(str, i);
 8004afe:	6979      	ldr	r1, [r7, #20]
 8004b00:	68b8      	ldr	r0, [r7, #8]
 8004b02:	f7ff ff95 	bl	8004a30 <reverse>
    str[i] = '\0';
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	701a      	strb	r2, [r3, #0]
    return i;
 8004b10:	697b      	ldr	r3, [r7, #20]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3718      	adds	r7, #24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	66666667 	.word	0x66666667

08004b20 <float2str>:
//=================================================================
void float2str( char *res, float n, int afterpoint)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b088      	sub	sp, #32
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b2c:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8004b2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b36:	ee17 3a90 	vmov	r3, s15
 8004b3a:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b46:	ed97 7a02 	vldr	s14, [r7, #8]
 8004b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b4e:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8004b52:	2200      	movs	r2, #0
 8004b54:	68f9      	ldr	r1, [r7, #12]
 8004b56:	69f8      	ldr	r0, [r7, #28]
 8004b58:	f7ff ff9a 	bl	8004a90 <intToStr>
 8004b5c:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d025      	beq.n	8004bb0 <float2str+0x90>
    {
        res[i] = '.';  // add dot
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4413      	add	r3, r2
 8004b6a:	222e      	movs	r2, #46	; 0x2e
 8004b6c:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter is needed
        // to handle cases like 233.007
        fpart = fpart * (float)myPow(10.0, afterpoint);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8004bb8 <float2str+0x98>
 8004b74:	f000 f824 	bl	8004bc0 <myPow>
 8004b78:	ec53 2b10 	vmov	r2, r3, d0
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	4619      	mov	r1, r3
 8004b80:	f7fb ffec 	bl	8000b5c <__aeabi_d2f>
 8004b84:	ee07 0a10 	vmov	s14, r0
 8004b88:	edd7 7a06 	vldr	s15, [r7, #24]
 8004b8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b90:	edc7 7a06 	vstr	s15, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 8004b94:	edd7 7a06 	vldr	s15, [r7, #24]
 8004b98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	ee17 0a90 	vmov	r0, s15
 8004bac:	f7ff ff70 	bl	8004a90 <intToStr>
    }
}
 8004bb0:	bf00      	nop
 8004bb2:	3720      	adds	r7, #32
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	00000000 	.word	0x00000000
 8004bbc:	40240000 	.word	0x40240000

08004bc0 <myPow>:
//=================================================================
double myPow(double x, int n) {
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b088      	sub	sp, #32
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	ed87 0b02 	vstr	d0, [r7, #8]
 8004bca:	6078      	str	r0, [r7, #4]
    unsigned int p = abs(n);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	bfb8      	it	lt
 8004bd2:	425b      	neglt	r3, r3
 8004bd4:	61fb      	str	r3, [r7, #28]
    double result = 1;
 8004bd6:	f04f 0200 	mov.w	r2, #0
 8004bda:	4b1d      	ldr	r3, [pc, #116]	; (8004c50 <myPow+0x90>)
 8004bdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while(p > 0)
 8004be0:	e01b      	b.n	8004c1a <myPow+0x5a>
    {
        if(p & 1) // if bit is set
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d009      	beq.n	8004c00 <myPow+0x40>
        {
            result = result * x;
 8004bec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bf0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004bf4:	f7fb fd18 	bl	8000628 <__aeabi_dmul>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	e9c7 2304 	strd	r2, r3, [r7, #16]
        }
        p = p >> 1;
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	085b      	lsrs	r3, r3, #1
 8004c04:	61fb      	str	r3, [r7, #28]
        x = x * x;
 8004c06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c0e:	f7fb fd0b 	bl	8000628 <__aeabi_dmul>
 8004c12:	4602      	mov	r2, r0
 8004c14:	460b      	mov	r3, r1
 8004c16:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(p > 0)
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e0      	bne.n	8004be2 <myPow+0x22>
    }

    if(n < 0)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	da09      	bge.n	8004c3a <myPow+0x7a>
    {
        return 1/result;
 8004c26:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004c2a:	f04f 0000 	mov.w	r0, #0
 8004c2e:	4908      	ldr	r1, [pc, #32]	; (8004c50 <myPow+0x90>)
 8004c30:	f7fb fe24 	bl	800087c <__aeabi_ddiv>
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	e001      	b.n	8004c3e <myPow+0x7e>
    }
    return result;
 8004c3a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8004c3e:	ec43 2b17 	vmov	d7, r2, r3
 8004c42:	eeb0 0a47 	vmov.f32	s0, s14
 8004c46:	eef0 0a67 	vmov.f32	s1, s15
 8004c4a:	3720      	adds	r7, #32
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	3ff00000 	.word	0x3ff00000

08004c54 <Reset_Handler>:
 8004c54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c8c <LoopFillZerobss+0x12>
 8004c58:	480d      	ldr	r0, [pc, #52]	; (8004c90 <LoopFillZerobss+0x16>)
 8004c5a:	490e      	ldr	r1, [pc, #56]	; (8004c94 <LoopFillZerobss+0x1a>)
 8004c5c:	4a0e      	ldr	r2, [pc, #56]	; (8004c98 <LoopFillZerobss+0x1e>)
 8004c5e:	2300      	movs	r3, #0
 8004c60:	e002      	b.n	8004c68 <LoopCopyDataInit>

08004c62 <CopyDataInit>:
 8004c62:	58d4      	ldr	r4, [r2, r3]
 8004c64:	50c4      	str	r4, [r0, r3]
 8004c66:	3304      	adds	r3, #4

08004c68 <LoopCopyDataInit>:
 8004c68:	18c4      	adds	r4, r0, r3
 8004c6a:	428c      	cmp	r4, r1
 8004c6c:	d3f9      	bcc.n	8004c62 <CopyDataInit>
 8004c6e:	4a0b      	ldr	r2, [pc, #44]	; (8004c9c <LoopFillZerobss+0x22>)
 8004c70:	4c0b      	ldr	r4, [pc, #44]	; (8004ca0 <LoopFillZerobss+0x26>)
 8004c72:	2300      	movs	r3, #0
 8004c74:	e001      	b.n	8004c7a <LoopFillZerobss>

08004c76 <FillZerobss>:
 8004c76:	6013      	str	r3, [r2, #0]
 8004c78:	3204      	adds	r2, #4

08004c7a <LoopFillZerobss>:
 8004c7a:	42a2      	cmp	r2, r4
 8004c7c:	d3fb      	bcc.n	8004c76 <FillZerobss>
 8004c7e:	f7ff fd91 	bl	80047a4 <SystemInit>
 8004c82:	f015 fcf1 	bl	801a668 <__libc_init_array>
 8004c86:	f7fe fb71 	bl	800336c <main>
 8004c8a:	4770      	bx	lr
 8004c8c:	20020000 	.word	0x20020000
 8004c90:	20000000 	.word	0x20000000
 8004c94:	200000f0 	.word	0x200000f0
 8004c98:	0801c2d8 	.word	0x0801c2d8
 8004c9c:	200000f0 	.word	0x200000f0
 8004ca0:	2000e878 	.word	0x2000e878

08004ca4 <ADC_IRQHandler>:
 8004ca4:	e7fe      	b.n	8004ca4 <ADC_IRQHandler>
	...

08004ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004cac:	4b0e      	ldr	r3, [pc, #56]	; (8004ce8 <HAL_Init+0x40>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a0d      	ldr	r2, [pc, #52]	; (8004ce8 <HAL_Init+0x40>)
 8004cb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004cb8:	4b0b      	ldr	r3, [pc, #44]	; (8004ce8 <HAL_Init+0x40>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a0a      	ldr	r2, [pc, #40]	; (8004ce8 <HAL_Init+0x40>)
 8004cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004cc4:	4b08      	ldr	r3, [pc, #32]	; (8004ce8 <HAL_Init+0x40>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a07      	ldr	r2, [pc, #28]	; (8004ce8 <HAL_Init+0x40>)
 8004cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cd0:	2003      	movs	r0, #3
 8004cd2:	f000 fbcc 	bl	800546e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004cd6:	200f      	movs	r0, #15
 8004cd8:	f7ff fc3a 	bl	8004550 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004cdc:	f7ff f8f8 	bl	8003ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	40023c00 	.word	0x40023c00

08004cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004cf0:	4b06      	ldr	r3, [pc, #24]	; (8004d0c <HAL_IncTick+0x20>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	4b06      	ldr	r3, [pc, #24]	; (8004d10 <HAL_IncTick+0x24>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	4a04      	ldr	r2, [pc, #16]	; (8004d10 <HAL_IncTick+0x24>)
 8004cfe:	6013      	str	r3, [r2, #0]
}
 8004d00:	bf00      	nop
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	20000030 	.word	0x20000030
 8004d10:	20004d80 	.word	0x20004d80

08004d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
  return uwTick;
 8004d18:	4b03      	ldr	r3, [pc, #12]	; (8004d28 <HAL_GetTick+0x14>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	20004d80 	.word	0x20004d80

08004d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d34:	f7ff ffee 	bl	8004d14 <HAL_GetTick>
 8004d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d44:	d005      	beq.n	8004d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d46:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <HAL_Delay+0x44>)
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4413      	add	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004d52:	bf00      	nop
 8004d54:	f7ff ffde 	bl	8004d14 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d8f7      	bhi.n	8004d54 <HAL_Delay+0x28>
  {
  }
}
 8004d64:	bf00      	nop
 8004d66:	bf00      	nop
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	20000030 	.word	0x20000030

08004d74 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Check ADC handle */
  if(hadc == NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_ADC_Init+0x12>
  {
     return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e01b      	b.n	8004dbe <HAL_ADC_Init+0x4a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d102      	bne.n	8004d98 <HAL_ADC_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f817 	bl	8004dc6 <HAL_ADC_MspInit>
  }
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set ADC parameters */
  ADC_Init(hadc);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f9d7 	bl	8005154 <ADC_Init>
  
  /* Set ADC error code to none */
  hadc->ErrorCode = HAL_ADC_ERROR_NONE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <HAL_ADC_MspInit>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b083      	sub	sp, #12
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 8004dce:	bf00      	nop
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
	...

08004ddc <HAL_ADC_Start>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint16_t i = 0;
 8004de4:	2300      	movs	r3, #0
 8004de6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d101      	bne.n	8004df6 <HAL_ADC_Start+0x1a>
 8004df2:	2302      	movs	r3, #2
 8004df4:	e053      	b.n	8004e9e <HAL_ADC_Start+0xc2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Check if an injected conversion is ongoing */
  if(hadc->State == HAL_ADC_STATE_BUSY_INJ)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b22      	cmp	r3, #34	; 0x22
 8004e08:	d104      	bne.n	8004e14 <HAL_ADC_Start+0x38>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_BUSY_INJ_REG;  
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2232      	movs	r2, #50	; 0x32
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004e12:	e003      	b.n	8004e1c <HAL_ADC_Start+0x40>
  }
  else
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_BUSY_REG;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2212      	movs	r2, #18
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  } 
    
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d010      	beq.n	8004e4c <HAL_ADC_Start+0x70>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689a      	ldr	r2, [r3, #8]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f042 0201 	orr.w	r2, r2, #1
 8004e38:	609a      	str	r2, [r3, #8]
    
    /* Delay inserted to wait during Tstab time the ADC's stabilization */
    for(; i <= 540; i++)
 8004e3a:	e003      	b.n	8004e44 <HAL_ADC_Start+0x68>
    {
      __NOP();
 8004e3c:	bf00      	nop
    for(; i <= 540; i++)
 8004e3e:	89fb      	ldrh	r3, [r7, #14]
 8004e40:	3301      	adds	r3, #1
 8004e42:	81fb      	strh	r3, [r7, #14]
 8004e44:	89fb      	ldrh	r3, [r7, #14]
 8004e46:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 8004e4a:	d9f7      	bls.n	8004e3c <HAL_ADC_Start+0x60>
    }
  }

  /* Check if Multimode enabled */
  if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004e4c:	4b17      	ldr	r3, [pc, #92]	; (8004eac <HAL_ADC_Start+0xd0>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f003 031f 	and.w	r3, r3, #31
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10c      	bne.n	8004e72 <HAL_ADC_Start+0x96>
  {
    /* if no external trigger present enable software conversion of regular channels */
    if(hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d119      	bne.n	8004e94 <HAL_ADC_Start+0xb8>
    {
      /* Enable the selected ADC software conversion for regular group */
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689a      	ldr	r2, [r3, #8]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004e6e:	609a      	str	r2, [r3, #8]
 8004e70:	e010      	b.n	8004e94 <HAL_ADC_Start+0xb8>
    }
  }
  else
  {
    /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
    if((hadc->Instance == ADC1) && (hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a0e      	ldr	r2, [pc, #56]	; (8004eb0 <HAL_ADC_Start+0xd4>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d10b      	bne.n	8004e94 <HAL_ADC_Start+0xb8>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d107      	bne.n	8004e94 <HAL_ADC_Start+0xb8>
    {
      /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689a      	ldr	r2, [r3, #8]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004e92:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40012300 	.word	0x40012300
 8004eb0:	40012000 	.word	0x40012000

08004eb4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout: Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60fb      	str	r3, [r7, #12]
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004ec2:	f7ff ff27 	bl	8004d14 <HAL_GetTick>
 8004ec6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004ec8:	e018      	b.n	8004efc <HAL_ADC_PollForConversion+0x48>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ed0:	d014      	beq.n	8004efc <HAL_ADC_PollForConversion+0x48>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d007      	beq.n	8004ee8 <HAL_ADC_PollForConversion+0x34>
 8004ed8:	f7ff ff1c 	bl	8004d14 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d209      	bcs.n	8004efc <HAL_ADC_PollForConversion+0x48>
      {
        hadc->State= HAL_ADC_STATE_TIMEOUT;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2203      	movs	r2, #3
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e016      	b.n	8004f2a <HAL_ADC_PollForConversion+0x76>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d1df      	bne.n	8004eca <HAL_ADC_PollForConversion+0x16>
      }
    }
  }
  
  /* Check if an injected conversion is ready */
  if(hadc->State == HAL_ADC_STATE_EOC_INJ)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b25      	cmp	r3, #37	; 0x25
 8004f14:	d104      	bne.n	8004f20 <HAL_ADC_PollForConversion+0x6c>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_EOC_INJ_REG;  
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2235      	movs	r2, #53	; 0x35
 8004f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f1e:	e003      	b.n	8004f28 <HAL_ADC_PollForConversion+0x74>
  }
  else
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_EOC_REG;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2215      	movs	r2, #21
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <HAL_ADC_GetValue>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d101      	bne.n	8004f64 <HAL_ADC_ConfigChannel+0x18>
 8004f60:	2302      	movs	r3, #2
 8004f62:	e0ed      	b.n	8005140 <HAL_ADC_ConfigChannel+0x1f4>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b09      	cmp	r3, #9
 8004f72:	d925      	bls.n	8004fc0 <HAL_ADC_ConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68d9      	ldr	r1, [r3, #12]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	461a      	mov	r2, r3
 8004f82:	4613      	mov	r3, r2
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	4413      	add	r3, r2
 8004f88:	3b1e      	subs	r3, #30
 8004f8a:	2207      	movs	r2, #7
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	43da      	mvns	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	400a      	ands	r2, r1
 8004f98:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68d9      	ldr	r1, [r3, #12]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	4618      	mov	r0, r3
 8004fac:	4603      	mov	r3, r0
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	4403      	add	r3, r0
 8004fb2:	3b1e      	subs	r3, #30
 8004fb4:	409a      	lsls	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	60da      	str	r2, [r3, #12]
 8004fbe:	e022      	b.n	8005006 <HAL_ADC_ConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6919      	ldr	r1, [r3, #16]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	461a      	mov	r2, r3
 8004fce:	4613      	mov	r3, r2
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	4413      	add	r3, r2
 8004fd4:	2207      	movs	r2, #7
 8004fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fda:	43da      	mvns	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	400a      	ands	r2, r1
 8004fe2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6919      	ldr	r1, [r3, #16]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	689a      	ldr	r2, [r3, #8]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	4403      	add	r3, r0
 8004ffc:	409a      	lsls	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2b06      	cmp	r3, #6
 800500c:	d824      	bhi.n	8005058 <HAL_ADC_ConfigChannel+0x10c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	4613      	mov	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	3b05      	subs	r3, #5
 8005020:	221f      	movs	r2, #31
 8005022:	fa02 f303 	lsl.w	r3, r2, r3
 8005026:	43da      	mvns	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	400a      	ands	r2, r1
 800502e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	b29b      	uxth	r3, r3
 800503c:	4618      	mov	r0, r3
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	4613      	mov	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	3b05      	subs	r3, #5
 800504a:	fa00 f203 	lsl.w	r2, r0, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	635a      	str	r2, [r3, #52]	; 0x34
 8005056:	e04c      	b.n	80050f2 <HAL_ADC_ConfigChannel+0x1a6>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	2b0c      	cmp	r3, #12
 800505e:	d824      	bhi.n	80050aa <HAL_ADC_ConfigChannel+0x15e>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	4613      	mov	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	3b23      	subs	r3, #35	; 0x23
 8005072:	221f      	movs	r2, #31
 8005074:	fa02 f303 	lsl.w	r3, r2, r3
 8005078:	43da      	mvns	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	400a      	ands	r2, r1
 8005080:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	b29b      	uxth	r3, r3
 800508e:	4618      	mov	r0, r3
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	4613      	mov	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	3b23      	subs	r3, #35	; 0x23
 800509c:	fa00 f203 	lsl.w	r2, r0, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	631a      	str	r2, [r3, #48]	; 0x30
 80050a8:	e023      	b.n	80050f2 <HAL_ADC_ConfigChannel+0x1a6>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	4613      	mov	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	3b41      	subs	r3, #65	; 0x41
 80050bc:	221f      	movs	r2, #31
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	43da      	mvns	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	400a      	ands	r2, r1
 80050ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	4618      	mov	r0, r3
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	4613      	mov	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	3b41      	subs	r3, #65	; 0x41
 80050e6:	fa00 f203 	lsl.w	r2, r0, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a15      	ldr	r2, [pc, #84]	; (800514c <HAL_ADC_ConfigChannel+0x200>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d109      	bne.n	8005110 <HAL_ADC_ConfigChannel+0x1c4>
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b12      	cmp	r3, #18
 8005102:	d105      	bne.n	8005110 <HAL_ADC_ConfigChannel+0x1c4>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005104:	4b12      	ldr	r3, [pc, #72]	; (8005150 <HAL_ADC_ConfigChannel+0x204>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	4a11      	ldr	r2, [pc, #68]	; (8005150 <HAL_ADC_ConfigChannel+0x204>)
 800510a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800510e:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a0d      	ldr	r2, [pc, #52]	; (800514c <HAL_ADC_ConfigChannel+0x200>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d10d      	bne.n	8005136 <HAL_ADC_ConfigChannel+0x1ea>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b10      	cmp	r3, #16
 8005120:	d003      	beq.n	800512a <HAL_ADC_ConfigChannel+0x1de>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b11      	cmp	r3, #17
 8005128:	d105      	bne.n	8005136 <HAL_ADC_ConfigChannel+0x1ea>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800512a:	4b09      	ldr	r3, [pc, #36]	; (8005150 <HAL_ADC_ConfigChannel+0x204>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	4a08      	ldr	r2, [pc, #32]	; (8005150 <HAL_ADC_ConfigChannel+0x204>)
 8005130:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005134:	6053      	str	r3, [r2, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	40012000 	.word	0x40012000
 8005150:	40012300 	.word	0x40012300

08005154 <ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800515c:	4b6c      	ldr	r3, [pc, #432]	; (8005310 <ADC_Init+0x1bc>)
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	4a6b      	ldr	r2, [pc, #428]	; (8005310 <ADC_Init+0x1bc>)
 8005162:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005166:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005168:	4b69      	ldr	r3, [pc, #420]	; (8005310 <ADC_Init+0x1bc>)
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	4967      	ldr	r1, [pc, #412]	; (8005310 <ADC_Init+0x1bc>)
 8005172:	4313      	orrs	r3, r2
 8005174:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005184:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6859      	ldr	r1, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	021a      	lsls	r2, r3, #8
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80051a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6859      	ldr	r1, [r3, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6899      	ldr	r1, [r3, #8]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	609a      	str	r2, [r3, #8]
  
  /* Select external trigger to start conversion */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80051ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6899      	ldr	r1, [r3, #8]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	609a      	str	r2, [r3, #8]

  /* Select external trigger polarity */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800520e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6899      	ldr	r1, [r3, #8]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 0202 	bic.w	r2, r2, #2
 8005230:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6899      	ldr	r1, [r3, #8]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	005a      	lsls	r2, r3, #1
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	609a      	str	r2, [r3, #8]
  
  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	2b00      	cmp	r3, #0
 800524c:	d01b      	beq.n	8005286 <ADC_Init+0x132>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800525c:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800526c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6859      	ldr	r1, [r3, #4]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005278:	3b01      	subs	r3, #1
 800527a:	035a      	lsls	r2, r3, #13
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	605a      	str	r2, [r3, #4]
 8005284:	e007      	b.n	8005296 <ADC_Init+0x142>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005294:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80052a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	3b01      	subs	r3, #1
 80052b2:	051a      	lsls	r2, r3, #20
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689a      	ldr	r2, [r3, #8]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80052ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6899      	ldr	r1, [r3, #8]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	025a      	lsls	r2, r3, #9
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689a      	ldr	r2, [r3, #8]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6899      	ldr	r1, [r3, #8]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	029a      	lsls	r2, r3, #10
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	609a      	str	r2, [r3, #8]
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	40012300 	.word	0x40012300

08005314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005324:	4b0c      	ldr	r3, [pc, #48]	; (8005358 <__NVIC_SetPriorityGrouping+0x44>)
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005330:	4013      	ands	r3, r2
 8005332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800533c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005346:	4a04      	ldr	r2, [pc, #16]	; (8005358 <__NVIC_SetPriorityGrouping+0x44>)
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	60d3      	str	r3, [r2, #12]
}
 800534c:	bf00      	nop
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	e000ed00 	.word	0xe000ed00

0800535c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005360:	4b04      	ldr	r3, [pc, #16]	; (8005374 <__NVIC_GetPriorityGrouping+0x18>)
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	0a1b      	lsrs	r3, r3, #8
 8005366:	f003 0307 	and.w	r3, r3, #7
}
 800536a:	4618      	mov	r0, r3
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	e000ed00 	.word	0xe000ed00

08005378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	4603      	mov	r3, r0
 8005380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005386:	2b00      	cmp	r3, #0
 8005388:	db0b      	blt.n	80053a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800538a:	79fb      	ldrb	r3, [r7, #7]
 800538c:	f003 021f 	and.w	r2, r3, #31
 8005390:	4907      	ldr	r1, [pc, #28]	; (80053b0 <__NVIC_EnableIRQ+0x38>)
 8005392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005396:	095b      	lsrs	r3, r3, #5
 8005398:	2001      	movs	r0, #1
 800539a:	fa00 f202 	lsl.w	r2, r0, r2
 800539e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80053a2:	bf00      	nop
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	e000e100 	.word	0xe000e100

080053b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	4603      	mov	r3, r0
 80053bc:	6039      	str	r1, [r7, #0]
 80053be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	db0a      	blt.n	80053de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	490c      	ldr	r1, [pc, #48]	; (8005400 <__NVIC_SetPriority+0x4c>)
 80053ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053d2:	0112      	lsls	r2, r2, #4
 80053d4:	b2d2      	uxtb	r2, r2
 80053d6:	440b      	add	r3, r1
 80053d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053dc:	e00a      	b.n	80053f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	4908      	ldr	r1, [pc, #32]	; (8005404 <__NVIC_SetPriority+0x50>)
 80053e4:	79fb      	ldrb	r3, [r7, #7]
 80053e6:	f003 030f 	and.w	r3, r3, #15
 80053ea:	3b04      	subs	r3, #4
 80053ec:	0112      	lsls	r2, r2, #4
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	440b      	add	r3, r1
 80053f2:	761a      	strb	r2, [r3, #24]
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	e000e100 	.word	0xe000e100
 8005404:	e000ed00 	.word	0xe000ed00

08005408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005408:	b480      	push	{r7}
 800540a:	b089      	sub	sp, #36	; 0x24
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	f1c3 0307 	rsb	r3, r3, #7
 8005422:	2b04      	cmp	r3, #4
 8005424:	bf28      	it	cs
 8005426:	2304      	movcs	r3, #4
 8005428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	3304      	adds	r3, #4
 800542e:	2b06      	cmp	r3, #6
 8005430:	d902      	bls.n	8005438 <NVIC_EncodePriority+0x30>
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	3b03      	subs	r3, #3
 8005436:	e000      	b.n	800543a <NVIC_EncodePriority+0x32>
 8005438:	2300      	movs	r3, #0
 800543a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800543c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	fa02 f303 	lsl.w	r3, r2, r3
 8005446:	43da      	mvns	r2, r3
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	401a      	ands	r2, r3
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005450:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	fa01 f303 	lsl.w	r3, r1, r3
 800545a:	43d9      	mvns	r1, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005460:	4313      	orrs	r3, r2
         );
}
 8005462:	4618      	mov	r0, r3
 8005464:	3724      	adds	r7, #36	; 0x24
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b082      	sub	sp, #8
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7ff ff4c 	bl	8005314 <__NVIC_SetPriorityGrouping>
}
 800547c:	bf00      	nop
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	4603      	mov	r3, r0
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
 8005490:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005492:	2300      	movs	r3, #0
 8005494:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005496:	f7ff ff61 	bl	800535c <__NVIC_GetPriorityGrouping>
 800549a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	68b9      	ldr	r1, [r7, #8]
 80054a0:	6978      	ldr	r0, [r7, #20]
 80054a2:	f7ff ffb1 	bl	8005408 <NVIC_EncodePriority>
 80054a6:	4602      	mov	r2, r0
 80054a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054ac:	4611      	mov	r1, r2
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7ff ff80 	bl	80053b4 <__NVIC_SetPriority>
}
 80054b4:	bf00      	nop
 80054b6:	3718      	adds	r7, #24
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	4603      	mov	r3, r0
 80054c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7ff ff54 	bl	8005378 <__NVIC_EnableIRQ>
}
 80054d0:	bf00      	nop
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80054e4:	f7ff fc16 	bl	8004d14 <HAL_GetTick>
 80054e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e099      	b.n	8005628 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0201 	bic.w	r2, r2, #1
 8005512:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005514:	e00f      	b.n	8005536 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005516:	f7ff fbfd 	bl	8004d14 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b05      	cmp	r3, #5
 8005522:	d908      	bls.n	8005536 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2220      	movs	r2, #32
 8005528:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2203      	movs	r2, #3
 800552e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e078      	b.n	8005628 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1e8      	bne.n	8005516 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	4b38      	ldr	r3, [pc, #224]	; (8005630 <HAL_DMA_Init+0x158>)
 8005550:	4013      	ands	r3, r2
 8005552:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005562:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800556e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800557a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	4313      	orrs	r3, r2
 8005586:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	2b04      	cmp	r3, #4
 800558e:	d107      	bne.n	80055a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005598:	4313      	orrs	r3, r2
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	4313      	orrs	r3, r2
 800559e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f023 0307 	bic.w	r3, r3, #7
 80055b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	4313      	orrs	r3, r2
 80055c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	d117      	bne.n	80055fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00e      	beq.n	80055fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fb0f 	bl	8005c00 <DMA_CheckFifoParam>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d008      	beq.n	80055fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2240      	movs	r2, #64	; 0x40
 80055ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80055f6:	2301      	movs	r3, #1
 80055f8:	e016      	b.n	8005628 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fac6 	bl	8005b94 <DMA_CalcBaseAndBitshift>
 8005608:	4603      	mov	r3, r0
 800560a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005610:	223f      	movs	r2, #63	; 0x3f
 8005612:	409a      	lsls	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	f010803f 	.word	0xf010803f

08005634 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
 8005640:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800564a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005652:	2b01      	cmp	r3, #1
 8005654:	d101      	bne.n	800565a <HAL_DMA_Start_IT+0x26>
 8005656:	2302      	movs	r3, #2
 8005658:	e040      	b.n	80056dc <HAL_DMA_Start_IT+0xa8>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b01      	cmp	r3, #1
 800566c:	d12f      	bne.n	80056ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2202      	movs	r2, #2
 8005672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	68b9      	ldr	r1, [r7, #8]
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 fa58 	bl	8005b38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800568c:	223f      	movs	r2, #63	; 0x3f
 800568e:	409a      	lsls	r2, r3
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f042 0216 	orr.w	r2, r2, #22
 80056a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d007      	beq.n	80056bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0208 	orr.w	r2, r2, #8
 80056ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f042 0201 	orr.w	r2, r2, #1
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	e005      	b.n	80056da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80056d6:	2302      	movs	r3, #2
 80056d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80056da:	7dfb      	ldrb	r3, [r7, #23]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80056f2:	f7ff fb0f 	bl	8004d14 <HAL_GetTick>
 80056f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d008      	beq.n	8005716 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2280      	movs	r2, #128	; 0x80
 8005708:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e052      	b.n	80057bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0216 	bic.w	r2, r2, #22
 8005724:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	695a      	ldr	r2, [r3, #20]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005734:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573a:	2b00      	cmp	r3, #0
 800573c:	d103      	bne.n	8005746 <HAL_DMA_Abort+0x62>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005742:	2b00      	cmp	r3, #0
 8005744:	d007      	beq.n	8005756 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 0208 	bic.w	r2, r2, #8
 8005754:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0201 	bic.w	r2, r2, #1
 8005764:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005766:	e013      	b.n	8005790 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005768:	f7ff fad4 	bl	8004d14 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b05      	cmp	r3, #5
 8005774:	d90c      	bls.n	8005790 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2220      	movs	r2, #32
 800577a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2203      	movs	r2, #3
 8005780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e015      	b.n	80057bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1e4      	bne.n	8005768 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a2:	223f      	movs	r2, #63	; 0x3f
 80057a4:	409a      	lsls	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d004      	beq.n	80057e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2280      	movs	r2, #128	; 0x80
 80057dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e00c      	b.n	80057fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2205      	movs	r2, #5
 80057e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 0201 	bic.w	r2, r2, #1
 80057f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005814:	4b8e      	ldr	r3, [pc, #568]	; (8005a50 <HAL_DMA_IRQHandler+0x248>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a8e      	ldr	r2, [pc, #568]	; (8005a54 <HAL_DMA_IRQHandler+0x24c>)
 800581a:	fba2 2303 	umull	r2, r3, r2, r3
 800581e:	0a9b      	lsrs	r3, r3, #10
 8005820:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005826:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005832:	2208      	movs	r2, #8
 8005834:	409a      	lsls	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4013      	ands	r3, r2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d01a      	beq.n	8005874 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0304 	and.w	r3, r3, #4
 8005848:	2b00      	cmp	r3, #0
 800584a:	d013      	beq.n	8005874 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0204 	bic.w	r2, r2, #4
 800585a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005860:	2208      	movs	r2, #8
 8005862:	409a      	lsls	r2, r3
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586c:	f043 0201 	orr.w	r2, r3, #1
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005878:	2201      	movs	r2, #1
 800587a:	409a      	lsls	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4013      	ands	r3, r2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d012      	beq.n	80058aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00b      	beq.n	80058aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005896:	2201      	movs	r2, #1
 8005898:	409a      	lsls	r2, r3
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a2:	f043 0202 	orr.w	r2, r3, #2
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ae:	2204      	movs	r2, #4
 80058b0:	409a      	lsls	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	4013      	ands	r3, r2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d012      	beq.n	80058e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00b      	beq.n	80058e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058cc:	2204      	movs	r2, #4
 80058ce:	409a      	lsls	r2, r3
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d8:	f043 0204 	orr.w	r2, r3, #4
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058e4:	2210      	movs	r2, #16
 80058e6:	409a      	lsls	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4013      	ands	r3, r2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d043      	beq.n	8005978 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0308 	and.w	r3, r3, #8
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d03c      	beq.n	8005978 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005902:	2210      	movs	r2, #16
 8005904:	409a      	lsls	r2, r3
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d018      	beq.n	800594a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d108      	bne.n	8005938 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	2b00      	cmp	r3, #0
 800592c:	d024      	beq.n	8005978 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	4798      	blx	r3
 8005936:	e01f      	b.n	8005978 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800593c:	2b00      	cmp	r3, #0
 800593e:	d01b      	beq.n	8005978 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	4798      	blx	r3
 8005948:	e016      	b.n	8005978 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005954:	2b00      	cmp	r3, #0
 8005956:	d107      	bne.n	8005968 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0208 	bic.w	r2, r2, #8
 8005966:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800597c:	2220      	movs	r2, #32
 800597e:	409a      	lsls	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4013      	ands	r3, r2
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 808f 	beq.w	8005aa8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0310 	and.w	r3, r3, #16
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 8087 	beq.w	8005aa8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800599e:	2220      	movs	r2, #32
 80059a0:	409a      	lsls	r2, r3
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b05      	cmp	r3, #5
 80059b0:	d136      	bne.n	8005a20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 0216 	bic.w	r2, r2, #22
 80059c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	695a      	ldr	r2, [r3, #20]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d103      	bne.n	80059e2 <HAL_DMA_IRQHandler+0x1da>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d007      	beq.n	80059f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0208 	bic.w	r2, r2, #8
 80059f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059f6:	223f      	movs	r2, #63	; 0x3f
 80059f8:	409a      	lsls	r2, r3
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d07e      	beq.n	8005b14 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	4798      	blx	r3
        }
        return;
 8005a1e:	e079      	b.n	8005b14 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d01d      	beq.n	8005a6a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10d      	bne.n	8005a58 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d031      	beq.n	8005aa8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	4798      	blx	r3
 8005a4c:	e02c      	b.n	8005aa8 <HAL_DMA_IRQHandler+0x2a0>
 8005a4e:	bf00      	nop
 8005a50:	20000014 	.word	0x20000014
 8005a54:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d023      	beq.n	8005aa8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	4798      	blx	r3
 8005a68:	e01e      	b.n	8005aa8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10f      	bne.n	8005a98 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f022 0210 	bic.w	r2, r2, #16
 8005a86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d003      	beq.n	8005aa8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d032      	beq.n	8005b16 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d022      	beq.n	8005b02 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2205      	movs	r2, #5
 8005ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0201 	bic.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	60bb      	str	r3, [r7, #8]
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d307      	bcc.n	8005af0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1f2      	bne.n	8005ad4 <HAL_DMA_IRQHandler+0x2cc>
 8005aee:	e000      	b.n	8005af2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005af0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d005      	beq.n	8005b16 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	4798      	blx	r3
 8005b12:	e000      	b.n	8005b16 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005b14:	bf00      	nop
    }
  }
}
 8005b16:	3718      	adds	r7, #24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b2a:	b2db      	uxtb	r3, r3
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	2b40      	cmp	r3, #64	; 0x40
 8005b64:	d108      	bne.n	8005b78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005b76:	e007      	b.n	8005b88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	60da      	str	r2, [r3, #12]
}
 8005b88:	bf00      	nop
 8005b8a:	3714      	adds	r7, #20
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	3b10      	subs	r3, #16
 8005ba4:	4a14      	ldr	r2, [pc, #80]	; (8005bf8 <DMA_CalcBaseAndBitshift+0x64>)
 8005ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8005baa:	091b      	lsrs	r3, r3, #4
 8005bac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005bae:	4a13      	ldr	r2, [pc, #76]	; (8005bfc <DMA_CalcBaseAndBitshift+0x68>)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	d909      	bls.n	8005bd6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005bca:	f023 0303 	bic.w	r3, r3, #3
 8005bce:	1d1a      	adds	r2, r3, #4
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	659a      	str	r2, [r3, #88]	; 0x58
 8005bd4:	e007      	b.n	8005be6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005bde:	f023 0303 	bic.w	r3, r3, #3
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3714      	adds	r7, #20
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	aaaaaaab 	.word	0xaaaaaaab
 8005bfc:	0801b7a4 	.word	0x0801b7a4

08005c00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d11f      	bne.n	8005c5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d856      	bhi.n	8005cce <DMA_CheckFifoParam+0xce>
 8005c20:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <DMA_CheckFifoParam+0x28>)
 8005c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c26:	bf00      	nop
 8005c28:	08005c39 	.word	0x08005c39
 8005c2c:	08005c4b 	.word	0x08005c4b
 8005c30:	08005c39 	.word	0x08005c39
 8005c34:	08005ccf 	.word	0x08005ccf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d046      	beq.n	8005cd2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c48:	e043      	b.n	8005cd2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c52:	d140      	bne.n	8005cd6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c58:	e03d      	b.n	8005cd6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c62:	d121      	bne.n	8005ca8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2b03      	cmp	r3, #3
 8005c68:	d837      	bhi.n	8005cda <DMA_CheckFifoParam+0xda>
 8005c6a:	a201      	add	r2, pc, #4	; (adr r2, 8005c70 <DMA_CheckFifoParam+0x70>)
 8005c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c70:	08005c81 	.word	0x08005c81
 8005c74:	08005c87 	.word	0x08005c87
 8005c78:	08005c81 	.word	0x08005c81
 8005c7c:	08005c99 	.word	0x08005c99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	73fb      	strb	r3, [r7, #15]
      break;
 8005c84:	e030      	b.n	8005ce8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d025      	beq.n	8005cde <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c96:	e022      	b.n	8005cde <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ca0:	d11f      	bne.n	8005ce2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005ca6:	e01c      	b.n	8005ce2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d903      	bls.n	8005cb6 <DMA_CheckFifoParam+0xb6>
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	2b03      	cmp	r3, #3
 8005cb2:	d003      	beq.n	8005cbc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005cb4:	e018      	b.n	8005ce8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	73fb      	strb	r3, [r7, #15]
      break;
 8005cba:	e015      	b.n	8005ce8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00e      	beq.n	8005ce6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	73fb      	strb	r3, [r7, #15]
      break;
 8005ccc:	e00b      	b.n	8005ce6 <DMA_CheckFifoParam+0xe6>
      break;
 8005cce:	bf00      	nop
 8005cd0:	e00a      	b.n	8005ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8005cd2:	bf00      	nop
 8005cd4:	e008      	b.n	8005ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8005cd6:	bf00      	nop
 8005cd8:	e006      	b.n	8005ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8005cda:	bf00      	nop
 8005cdc:	e004      	b.n	8005ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8005cde:	bf00      	nop
 8005ce0:	e002      	b.n	8005ce8 <DMA_CheckFifoParam+0xe8>
      break;   
 8005ce2:	bf00      	nop
 8005ce4:	e000      	b.n	8005ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8005ce6:	bf00      	nop
    }
  } 
  
  return status; 
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop

08005cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b089      	sub	sp, #36	; 0x24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d0e:	2300      	movs	r3, #0
 8005d10:	61fb      	str	r3, [r7, #28]
 8005d12:	e159      	b.n	8005fc8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d14:	2201      	movs	r2, #1
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	4013      	ands	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	f040 8148 	bne.w	8005fc2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f003 0303 	and.w	r3, r3, #3
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d005      	beq.n	8005d4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d130      	bne.n	8005dac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	2203      	movs	r2, #3
 8005d56:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5a:	43db      	mvns	r3, r3
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	68da      	ldr	r2, [r3, #12]
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d80:	2201      	movs	r2, #1
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	fa02 f303 	lsl.w	r3, r2, r3
 8005d88:	43db      	mvns	r3, r3
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	091b      	lsrs	r3, r3, #4
 8005d96:	f003 0201 	and.w	r2, r3, #1
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f003 0303 	and.w	r3, r3, #3
 8005db4:	2b03      	cmp	r3, #3
 8005db6:	d017      	beq.n	8005de8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	005b      	lsls	r3, r3, #1
 8005dc2:	2203      	movs	r2, #3
 8005dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc8:	43db      	mvns	r3, r3
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	4013      	ands	r3, r2
 8005dce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	005b      	lsls	r3, r3, #1
 8005dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f003 0303 	and.w	r3, r3, #3
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d123      	bne.n	8005e3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	08da      	lsrs	r2, r3, #3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	3208      	adds	r2, #8
 8005dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	f003 0307 	and.w	r3, r3, #7
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	220f      	movs	r2, #15
 8005e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e10:	43db      	mvns	r3, r3
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	4013      	ands	r3, r2
 8005e16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	691a      	ldr	r2, [r3, #16]
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	f003 0307 	and.w	r3, r3, #7
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	fa02 f303 	lsl.w	r3, r2, r3
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	08da      	lsrs	r2, r3, #3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	3208      	adds	r2, #8
 8005e36:	69b9      	ldr	r1, [r7, #24]
 8005e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	2203      	movs	r2, #3
 8005e48:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4c:	43db      	mvns	r3, r3
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	4013      	ands	r3, r2
 8005e52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f003 0203 	and.w	r2, r3, #3
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	fa02 f303 	lsl.w	r3, r2, r3
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 80a2 	beq.w	8005fc2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	4b57      	ldr	r3, [pc, #348]	; (8005fe0 <HAL_GPIO_Init+0x2e8>)
 8005e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e86:	4a56      	ldr	r2, [pc, #344]	; (8005fe0 <HAL_GPIO_Init+0x2e8>)
 8005e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8005e8e:	4b54      	ldr	r3, [pc, #336]	; (8005fe0 <HAL_GPIO_Init+0x2e8>)
 8005e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e9a:	4a52      	ldr	r2, [pc, #328]	; (8005fe4 <HAL_GPIO_Init+0x2ec>)
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	089b      	lsrs	r3, r3, #2
 8005ea0:	3302      	adds	r3, #2
 8005ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	220f      	movs	r2, #15
 8005eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb6:	43db      	mvns	r3, r3
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a49      	ldr	r2, [pc, #292]	; (8005fe8 <HAL_GPIO_Init+0x2f0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d019      	beq.n	8005efa <HAL_GPIO_Init+0x202>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a48      	ldr	r2, [pc, #288]	; (8005fec <HAL_GPIO_Init+0x2f4>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d013      	beq.n	8005ef6 <HAL_GPIO_Init+0x1fe>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a47      	ldr	r2, [pc, #284]	; (8005ff0 <HAL_GPIO_Init+0x2f8>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d00d      	beq.n	8005ef2 <HAL_GPIO_Init+0x1fa>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a46      	ldr	r2, [pc, #280]	; (8005ff4 <HAL_GPIO_Init+0x2fc>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d007      	beq.n	8005eee <HAL_GPIO_Init+0x1f6>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a45      	ldr	r2, [pc, #276]	; (8005ff8 <HAL_GPIO_Init+0x300>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d101      	bne.n	8005eea <HAL_GPIO_Init+0x1f2>
 8005ee6:	2304      	movs	r3, #4
 8005ee8:	e008      	b.n	8005efc <HAL_GPIO_Init+0x204>
 8005eea:	2307      	movs	r3, #7
 8005eec:	e006      	b.n	8005efc <HAL_GPIO_Init+0x204>
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e004      	b.n	8005efc <HAL_GPIO_Init+0x204>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e002      	b.n	8005efc <HAL_GPIO_Init+0x204>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e000      	b.n	8005efc <HAL_GPIO_Init+0x204>
 8005efa:	2300      	movs	r3, #0
 8005efc:	69fa      	ldr	r2, [r7, #28]
 8005efe:	f002 0203 	and.w	r2, r2, #3
 8005f02:	0092      	lsls	r2, r2, #2
 8005f04:	4093      	lsls	r3, r2
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f0c:	4935      	ldr	r1, [pc, #212]	; (8005fe4 <HAL_GPIO_Init+0x2ec>)
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	089b      	lsrs	r3, r3, #2
 8005f12:	3302      	adds	r3, #2
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f1a:	4b38      	ldr	r3, [pc, #224]	; (8005ffc <HAL_GPIO_Init+0x304>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	43db      	mvns	r3, r3
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	4013      	ands	r3, r2
 8005f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005f36:	69ba      	ldr	r2, [r7, #24]
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f3e:	4a2f      	ldr	r2, [pc, #188]	; (8005ffc <HAL_GPIO_Init+0x304>)
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f44:	4b2d      	ldr	r3, [pc, #180]	; (8005ffc <HAL_GPIO_Init+0x304>)
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	43db      	mvns	r3, r3
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	4013      	ands	r3, r2
 8005f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005f60:	69ba      	ldr	r2, [r7, #24]
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005f68:	4a24      	ldr	r2, [pc, #144]	; (8005ffc <HAL_GPIO_Init+0x304>)
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005f6e:	4b23      	ldr	r3, [pc, #140]	; (8005ffc <HAL_GPIO_Init+0x304>)
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	43db      	mvns	r3, r3
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005f8a:	69ba      	ldr	r2, [r7, #24]
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005f92:	4a1a      	ldr	r2, [pc, #104]	; (8005ffc <HAL_GPIO_Init+0x304>)
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f98:	4b18      	ldr	r3, [pc, #96]	; (8005ffc <HAL_GPIO_Init+0x304>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	43db      	mvns	r3, r3
 8005fa2:	69ba      	ldr	r2, [r7, #24]
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d003      	beq.n	8005fbc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005fb4:	69ba      	ldr	r2, [r7, #24]
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005fbc:	4a0f      	ldr	r2, [pc, #60]	; (8005ffc <HAL_GPIO_Init+0x304>)
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	61fb      	str	r3, [r7, #28]
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	2b0f      	cmp	r3, #15
 8005fcc:	f67f aea2 	bls.w	8005d14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005fd0:	bf00      	nop
 8005fd2:	bf00      	nop
 8005fd4:	3724      	adds	r7, #36	; 0x24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	40023800 	.word	0x40023800
 8005fe4:	40013800 	.word	0x40013800
 8005fe8:	40020000 	.word	0x40020000
 8005fec:	40020400 	.word	0x40020400
 8005ff0:	40020800 	.word	0x40020800
 8005ff4:	40020c00 	.word	0x40020c00
 8005ff8:	40021000 	.word	0x40021000
 8005ffc:	40013c00 	.word	0x40013c00

08006000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	460b      	mov	r3, r1
 800600a:	807b      	strh	r3, [r7, #2]
 800600c:	4613      	mov	r3, r2
 800600e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006010:	787b      	ldrb	r3, [r7, #1]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006016:	887a      	ldrh	r2, [r7, #2]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800601c:	e003      	b.n	8006026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800601e:	887b      	ldrh	r3, [r7, #2]
 8006020:	041a      	lsls	r2, r3, #16
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	619a      	str	r2, [r3, #24]
}
 8006026:	bf00      	nop
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
	...

08006034 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	4603      	mov	r3, r0
 800603c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800603e:	4b08      	ldr	r3, [pc, #32]	; (8006060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006040:	695a      	ldr	r2, [r3, #20]
 8006042:	88fb      	ldrh	r3, [r7, #6]
 8006044:	4013      	ands	r3, r2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d006      	beq.n	8006058 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800604a:	4a05      	ldr	r2, [pc, #20]	; (8006060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800604c:	88fb      	ldrh	r3, [r7, #6]
 800604e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006050:	88fb      	ldrh	r3, [r7, #6]
 8006052:	4618      	mov	r0, r3
 8006054:	f7fb fe5a 	bl	8001d0c <HAL_GPIO_EXTI_Callback>
  }
}
 8006058:	bf00      	nop
 800605a:	3708      	adds	r7, #8
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	40013c00 	.word	0x40013c00

08006064 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e12b      	b.n	80062ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d106      	bne.n	8006090 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7fe f89a 	bl	80041c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2224      	movs	r2, #36	; 0x24
 8006094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 0201 	bic.w	r2, r2, #1
 80060a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80060c8:	f003 f884 	bl	80091d4 <HAL_RCC_GetPCLK1Freq>
 80060cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	4a81      	ldr	r2, [pc, #516]	; (80062d8 <HAL_I2C_Init+0x274>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d807      	bhi.n	80060e8 <HAL_I2C_Init+0x84>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4a80      	ldr	r2, [pc, #512]	; (80062dc <HAL_I2C_Init+0x278>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	bf94      	ite	ls
 80060e0:	2301      	movls	r3, #1
 80060e2:	2300      	movhi	r3, #0
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	e006      	b.n	80060f6 <HAL_I2C_Init+0x92>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4a7d      	ldr	r2, [pc, #500]	; (80062e0 <HAL_I2C_Init+0x27c>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	bf94      	ite	ls
 80060f0:	2301      	movls	r3, #1
 80060f2:	2300      	movhi	r3, #0
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e0e7      	b.n	80062ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	4a78      	ldr	r2, [pc, #480]	; (80062e4 <HAL_I2C_Init+0x280>)
 8006102:	fba2 2303 	umull	r2, r3, r2, r3
 8006106:	0c9b      	lsrs	r3, r3, #18
 8006108:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	430a      	orrs	r2, r1
 800611c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	4a6a      	ldr	r2, [pc, #424]	; (80062d8 <HAL_I2C_Init+0x274>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d802      	bhi.n	8006138 <HAL_I2C_Init+0xd4>
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	3301      	adds	r3, #1
 8006136:	e009      	b.n	800614c <HAL_I2C_Init+0xe8>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800613e:	fb02 f303 	mul.w	r3, r2, r3
 8006142:	4a69      	ldr	r2, [pc, #420]	; (80062e8 <HAL_I2C_Init+0x284>)
 8006144:	fba2 2303 	umull	r2, r3, r2, r3
 8006148:	099b      	lsrs	r3, r3, #6
 800614a:	3301      	adds	r3, #1
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	6812      	ldr	r2, [r2, #0]
 8006150:	430b      	orrs	r3, r1
 8006152:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800615e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	495c      	ldr	r1, [pc, #368]	; (80062d8 <HAL_I2C_Init+0x274>)
 8006168:	428b      	cmp	r3, r1
 800616a:	d819      	bhi.n	80061a0 <HAL_I2C_Init+0x13c>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	1e59      	subs	r1, r3, #1
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	fbb1 f3f3 	udiv	r3, r1, r3
 800617a:	1c59      	adds	r1, r3, #1
 800617c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006180:	400b      	ands	r3, r1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00a      	beq.n	800619c <HAL_I2C_Init+0x138>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	1e59      	subs	r1, r3, #1
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	005b      	lsls	r3, r3, #1
 8006190:	fbb1 f3f3 	udiv	r3, r1, r3
 8006194:	3301      	adds	r3, #1
 8006196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800619a:	e051      	b.n	8006240 <HAL_I2C_Init+0x1dc>
 800619c:	2304      	movs	r3, #4
 800619e:	e04f      	b.n	8006240 <HAL_I2C_Init+0x1dc>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d111      	bne.n	80061cc <HAL_I2C_Init+0x168>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	1e58      	subs	r0, r3, #1
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6859      	ldr	r1, [r3, #4]
 80061b0:	460b      	mov	r3, r1
 80061b2:	005b      	lsls	r3, r3, #1
 80061b4:	440b      	add	r3, r1
 80061b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80061ba:	3301      	adds	r3, #1
 80061bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	bf0c      	ite	eq
 80061c4:	2301      	moveq	r3, #1
 80061c6:	2300      	movne	r3, #0
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	e012      	b.n	80061f2 <HAL_I2C_Init+0x18e>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	1e58      	subs	r0, r3, #1
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6859      	ldr	r1, [r3, #4]
 80061d4:	460b      	mov	r3, r1
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	440b      	add	r3, r1
 80061da:	0099      	lsls	r1, r3, #2
 80061dc:	440b      	add	r3, r1
 80061de:	fbb0 f3f3 	udiv	r3, r0, r3
 80061e2:	3301      	adds	r3, #1
 80061e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	bf0c      	ite	eq
 80061ec:	2301      	moveq	r3, #1
 80061ee:	2300      	movne	r3, #0
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <HAL_I2C_Init+0x196>
 80061f6:	2301      	movs	r3, #1
 80061f8:	e022      	b.n	8006240 <HAL_I2C_Init+0x1dc>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10e      	bne.n	8006220 <HAL_I2C_Init+0x1bc>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	1e58      	subs	r0, r3, #1
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6859      	ldr	r1, [r3, #4]
 800620a:	460b      	mov	r3, r1
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	440b      	add	r3, r1
 8006210:	fbb0 f3f3 	udiv	r3, r0, r3
 8006214:	3301      	adds	r3, #1
 8006216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800621a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800621e:	e00f      	b.n	8006240 <HAL_I2C_Init+0x1dc>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	1e58      	subs	r0, r3, #1
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6859      	ldr	r1, [r3, #4]
 8006228:	460b      	mov	r3, r1
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	440b      	add	r3, r1
 800622e:	0099      	lsls	r1, r3, #2
 8006230:	440b      	add	r3, r1
 8006232:	fbb0 f3f3 	udiv	r3, r0, r3
 8006236:	3301      	adds	r3, #1
 8006238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800623c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006240:	6879      	ldr	r1, [r7, #4]
 8006242:	6809      	ldr	r1, [r1, #0]
 8006244:	4313      	orrs	r3, r2
 8006246:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	69da      	ldr	r2, [r3, #28]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	431a      	orrs	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800626e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	6911      	ldr	r1, [r2, #16]
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	68d2      	ldr	r2, [r2, #12]
 800627a:	4311      	orrs	r1, r2
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	6812      	ldr	r2, [r2, #0]
 8006280:	430b      	orrs	r3, r1
 8006282:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	695a      	ldr	r2, [r3, #20]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	431a      	orrs	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	430a      	orrs	r2, r1
 800629e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f042 0201 	orr.w	r2, r2, #1
 80062ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2220      	movs	r2, #32
 80062ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	000186a0 	.word	0x000186a0
 80062dc:	001e847f 	.word	0x001e847f
 80062e0:	003d08ff 	.word	0x003d08ff
 80062e4:	431bde83 	.word	0x431bde83
 80062e8:	10624dd3 	.word	0x10624dd3

080062ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b088      	sub	sp, #32
 80062f0:	af02      	add	r7, sp, #8
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	607a      	str	r2, [r7, #4]
 80062f6:	461a      	mov	r2, r3
 80062f8:	460b      	mov	r3, r1
 80062fa:	817b      	strh	r3, [r7, #10]
 80062fc:	4613      	mov	r3, r2
 80062fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006300:	f7fe fd08 	bl	8004d14 <HAL_GetTick>
 8006304:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b20      	cmp	r3, #32
 8006310:	f040 80e0 	bne.w	80064d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	2319      	movs	r3, #25
 800631a:	2201      	movs	r2, #1
 800631c:	4970      	ldr	r1, [pc, #448]	; (80064e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f002 f8be 	bl	80084a0 <I2C_WaitOnFlagUntilTimeout>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800632a:	2302      	movs	r3, #2
 800632c:	e0d3      	b.n	80064d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006334:	2b01      	cmp	r3, #1
 8006336:	d101      	bne.n	800633c <HAL_I2C_Master_Transmit+0x50>
 8006338:	2302      	movs	r3, #2
 800633a:	e0cc      	b.n	80064d6 <HAL_I2C_Master_Transmit+0x1ea>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b01      	cmp	r3, #1
 8006350:	d007      	beq.n	8006362 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f042 0201 	orr.w	r2, r2, #1
 8006360:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006370:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2221      	movs	r2, #33	; 0x21
 8006376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2210      	movs	r2, #16
 800637e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	893a      	ldrh	r2, [r7, #8]
 8006392:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006398:	b29a      	uxth	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	4a50      	ldr	r2, [pc, #320]	; (80064e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80063a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80063a4:	8979      	ldrh	r1, [r7, #10]
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	6a3a      	ldr	r2, [r7, #32]
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f001 fe80 	bl	80080b0 <I2C_MasterRequestWrite>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e08d      	b.n	80064d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063ba:	2300      	movs	r3, #0
 80063bc:	613b      	str	r3, [r7, #16]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	613b      	str	r3, [r7, #16]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	613b      	str	r3, [r7, #16]
 80063ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80063d0:	e066      	b.n	80064a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	6a39      	ldr	r1, [r7, #32]
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f002 f938 	bl	800864c <I2C_WaitOnTXEFlagUntilTimeout>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00d      	beq.n	80063fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e6:	2b04      	cmp	r3, #4
 80063e8:	d107      	bne.n	80063fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e06b      	b.n	80064d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006402:	781a      	ldrb	r2, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006418:	b29b      	uxth	r3, r3
 800641a:	3b01      	subs	r3, #1
 800641c:	b29a      	uxth	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006426:	3b01      	subs	r3, #1
 8006428:	b29a      	uxth	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	f003 0304 	and.w	r3, r3, #4
 8006438:	2b04      	cmp	r3, #4
 800643a:	d11b      	bne.n	8006474 <HAL_I2C_Master_Transmit+0x188>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006440:	2b00      	cmp	r3, #0
 8006442:	d017      	beq.n	8006474 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006448:	781a      	ldrb	r2, [r3, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006454:	1c5a      	adds	r2, r3, #1
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800645e:	b29b      	uxth	r3, r3
 8006460:	3b01      	subs	r3, #1
 8006462:	b29a      	uxth	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800646c:	3b01      	subs	r3, #1
 800646e:	b29a      	uxth	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	6a39      	ldr	r1, [r7, #32]
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f002 f928 	bl	80086ce <I2C_WaitOnBTFFlagUntilTimeout>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00d      	beq.n	80064a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006488:	2b04      	cmp	r3, #4
 800648a:	d107      	bne.n	800649c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800649a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e01a      	b.n	80064d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d194      	bne.n	80063d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2220      	movs	r2, #32
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80064d0:	2300      	movs	r3, #0
 80064d2:	e000      	b.n	80064d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80064d4:	2302      	movs	r3, #2
  }
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	00100002 	.word	0x00100002
 80064e4:	ffff0000 	.word	0xffff0000

080064e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b08c      	sub	sp, #48	; 0x30
 80064ec:	af02      	add	r7, sp, #8
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	607a      	str	r2, [r7, #4]
 80064f2:	461a      	mov	r2, r3
 80064f4:	460b      	mov	r3, r1
 80064f6:	817b      	strh	r3, [r7, #10]
 80064f8:	4613      	mov	r3, r2
 80064fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80064fc:	f7fe fc0a 	bl	8004d14 <HAL_GetTick>
 8006500:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b20      	cmp	r3, #32
 800650c:	f040 820b 	bne.w	8006926 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	2319      	movs	r3, #25
 8006516:	2201      	movs	r2, #1
 8006518:	497c      	ldr	r1, [pc, #496]	; (800670c <HAL_I2C_Master_Receive+0x224>)
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f001 ffc0 	bl	80084a0 <I2C_WaitOnFlagUntilTimeout>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006526:	2302      	movs	r3, #2
 8006528:	e1fe      	b.n	8006928 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006530:	2b01      	cmp	r3, #1
 8006532:	d101      	bne.n	8006538 <HAL_I2C_Master_Receive+0x50>
 8006534:	2302      	movs	r3, #2
 8006536:	e1f7      	b.n	8006928 <HAL_I2C_Master_Receive+0x440>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	2b01      	cmp	r3, #1
 800654c:	d007      	beq.n	800655e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f042 0201 	orr.w	r2, r2, #1
 800655c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800656c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2222      	movs	r2, #34	; 0x22
 8006572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2210      	movs	r2, #16
 800657a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	893a      	ldrh	r2, [r7, #8]
 800658e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006594:	b29a      	uxth	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	4a5c      	ldr	r2, [pc, #368]	; (8006710 <HAL_I2C_Master_Receive+0x228>)
 800659e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80065a0:	8979      	ldrh	r1, [r7, #10]
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f001 fe04 	bl	80081b4 <I2C_MasterRequestRead>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d001      	beq.n	80065b6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e1b8      	b.n	8006928 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d113      	bne.n	80065e6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065be:	2300      	movs	r3, #0
 80065c0:	623b      	str	r3, [r7, #32]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	623b      	str	r3, [r7, #32]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	623b      	str	r3, [r7, #32]
 80065d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	e18c      	b.n	8006900 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d11b      	bne.n	8006626 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065fe:	2300      	movs	r3, #0
 8006600:	61fb      	str	r3, [r7, #28]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	61fb      	str	r3, [r7, #28]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	61fb      	str	r3, [r7, #28]
 8006612:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	e16c      	b.n	8006900 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800662a:	2b02      	cmp	r3, #2
 800662c:	d11b      	bne.n	8006666 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800663c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800664c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800664e:	2300      	movs	r3, #0
 8006650:	61bb      	str	r3, [r7, #24]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	61bb      	str	r3, [r7, #24]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	61bb      	str	r3, [r7, #24]
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	e14c      	b.n	8006900 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006674:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006676:	2300      	movs	r3, #0
 8006678:	617b      	str	r3, [r7, #20]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	617b      	str	r3, [r7, #20]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800668c:	e138      	b.n	8006900 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006692:	2b03      	cmp	r3, #3
 8006694:	f200 80f1 	bhi.w	800687a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800669c:	2b01      	cmp	r3, #1
 800669e:	d123      	bne.n	80066e8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f002 f885 	bl	80087b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d001      	beq.n	80066b4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e139      	b.n	8006928 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	691a      	ldr	r2, [r3, #16]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066be:	b2d2      	uxtb	r2, r2
 80066c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c6:	1c5a      	adds	r2, r3, #1
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066d0:	3b01      	subs	r3, #1
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066dc:	b29b      	uxth	r3, r3
 80066de:	3b01      	subs	r3, #1
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066e6:	e10b      	b.n	8006900 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d14e      	bne.n	800678e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f6:	2200      	movs	r2, #0
 80066f8:	4906      	ldr	r1, [pc, #24]	; (8006714 <HAL_I2C_Master_Receive+0x22c>)
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f001 fed0 	bl	80084a0 <I2C_WaitOnFlagUntilTimeout>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d008      	beq.n	8006718 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e10e      	b.n	8006928 <HAL_I2C_Master_Receive+0x440>
 800670a:	bf00      	nop
 800670c:	00100002 	.word	0x00100002
 8006710:	ffff0000 	.word	0xffff0000
 8006714:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006726:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	691a      	ldr	r2, [r3, #16]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006732:	b2d2      	uxtb	r2, r2
 8006734:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673a:	1c5a      	adds	r2, r3, #1
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006744:	3b01      	subs	r3, #1
 8006746:	b29a      	uxth	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006750:	b29b      	uxth	r3, r3
 8006752:	3b01      	subs	r3, #1
 8006754:	b29a      	uxth	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	691a      	ldr	r2, [r3, #16]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	b2d2      	uxtb	r2, r2
 8006766:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676c:	1c5a      	adds	r2, r3, #1
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006776:	3b01      	subs	r3, #1
 8006778:	b29a      	uxth	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006782:	b29b      	uxth	r3, r3
 8006784:	3b01      	subs	r3, #1
 8006786:	b29a      	uxth	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800678c:	e0b8      	b.n	8006900 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006794:	2200      	movs	r2, #0
 8006796:	4966      	ldr	r1, [pc, #408]	; (8006930 <HAL_I2C_Master_Receive+0x448>)
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f001 fe81 	bl	80084a0 <I2C_WaitOnFlagUntilTimeout>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e0bf      	b.n	8006928 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	691a      	ldr	r2, [r3, #16]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c2:	b2d2      	uxtb	r2, r2
 80067c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	1c5a      	adds	r2, r3, #1
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067d4:	3b01      	subs	r3, #1
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f0:	2200      	movs	r2, #0
 80067f2:	494f      	ldr	r1, [pc, #316]	; (8006930 <HAL_I2C_Master_Receive+0x448>)
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f001 fe53 	bl	80084a0 <I2C_WaitOnFlagUntilTimeout>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e091      	b.n	8006928 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006812:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	691a      	ldr	r2, [r3, #16]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006826:	1c5a      	adds	r2, r3, #1
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006830:	3b01      	subs	r3, #1
 8006832:	b29a      	uxth	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800683c:	b29b      	uxth	r3, r3
 800683e:	3b01      	subs	r3, #1
 8006840:	b29a      	uxth	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	691a      	ldr	r2, [r3, #16]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	b2d2      	uxtb	r2, r2
 8006852:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	1c5a      	adds	r2, r3, #1
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006862:	3b01      	subs	r3, #1
 8006864:	b29a      	uxth	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800686e:	b29b      	uxth	r3, r3
 8006870:	3b01      	subs	r3, #1
 8006872:	b29a      	uxth	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006878:	e042      	b.n	8006900 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800687a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800687c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f001 ff98 	bl	80087b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e04c      	b.n	8006928 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	691a      	ldr	r2, [r3, #16]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	b2d2      	uxtb	r2, r2
 800689a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a0:	1c5a      	adds	r2, r3, #1
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068aa:	3b01      	subs	r3, #1
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	3b01      	subs	r3, #1
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	f003 0304 	and.w	r3, r3, #4
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	d118      	bne.n	8006900 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	691a      	ldr	r2, [r3, #16]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d8:	b2d2      	uxtb	r2, r2
 80068da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e0:	1c5a      	adds	r2, r3, #1
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ea:	3b01      	subs	r3, #1
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	3b01      	subs	r3, #1
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006904:	2b00      	cmp	r3, #0
 8006906:	f47f aec2 	bne.w	800668e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2220      	movs	r2, #32
 800690e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	e000      	b.n	8006928 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006926:	2302      	movs	r3, #2
  }
}
 8006928:	4618      	mov	r0, r3
 800692a:	3728      	adds	r7, #40	; 0x28
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	00010004 	.word	0x00010004

08006934 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b088      	sub	sp, #32
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800693c:	2300      	movs	r3, #0
 800693e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006954:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800695c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800695e:	7bfb      	ldrb	r3, [r7, #15]
 8006960:	2b10      	cmp	r3, #16
 8006962:	d003      	beq.n	800696c <HAL_I2C_EV_IRQHandler+0x38>
 8006964:	7bfb      	ldrb	r3, [r7, #15]
 8006966:	2b40      	cmp	r3, #64	; 0x40
 8006968:	f040 80b1 	bne.w	8006ace <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10d      	bne.n	80069a2 <HAL_I2C_EV_IRQHandler+0x6e>
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800698c:	d003      	beq.n	8006996 <HAL_I2C_EV_IRQHandler+0x62>
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006994:	d101      	bne.n	800699a <HAL_I2C_EV_IRQHandler+0x66>
 8006996:	2301      	movs	r3, #1
 8006998:	e000      	b.n	800699c <HAL_I2C_EV_IRQHandler+0x68>
 800699a:	2300      	movs	r3, #0
 800699c:	2b01      	cmp	r3, #1
 800699e:	f000 8114 	beq.w	8006bca <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00b      	beq.n	80069c4 <HAL_I2C_EV_IRQHandler+0x90>
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d006      	beq.n	80069c4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f001 ff81 	bl	80088be <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fd5e 	bl	800747e <I2C_Master_SB>
 80069c2:	e083      	b.n	8006acc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	f003 0308 	and.w	r3, r3, #8
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d008      	beq.n	80069e0 <HAL_I2C_EV_IRQHandler+0xac>
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d003      	beq.n	80069e0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fdd6 	bl	800758a <I2C_Master_ADD10>
 80069de:	e075      	b.n	8006acc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d008      	beq.n	80069fc <HAL_I2C_EV_IRQHandler+0xc8>
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d003      	beq.n	80069fc <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 fdf2 	bl	80075de <I2C_Master_ADDR>
 80069fa:	e067      	b.n	8006acc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	f003 0304 	and.w	r3, r3, #4
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d036      	beq.n	8006a74 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a14:	f000 80db 	beq.w	8006bce <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00d      	beq.n	8006a3e <HAL_I2C_EV_IRQHandler+0x10a>
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d008      	beq.n	8006a3e <HAL_I2C_EV_IRQHandler+0x10a>
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	f003 0304 	and.w	r3, r3, #4
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d103      	bne.n	8006a3e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f9d6 	bl	8006de8 <I2C_MasterTransmit_TXE>
 8006a3c:	e046      	b.n	8006acc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	f003 0304 	and.w	r3, r3, #4
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 80c2 	beq.w	8006bce <HAL_I2C_EV_IRQHandler+0x29a>
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 80bc 	beq.w	8006bce <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006a56:	7bbb      	ldrb	r3, [r7, #14]
 8006a58:	2b21      	cmp	r3, #33	; 0x21
 8006a5a:	d103      	bne.n	8006a64 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fa5f 	bl	8006f20 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a62:	e0b4      	b.n	8006bce <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	2b40      	cmp	r3, #64	; 0x40
 8006a68:	f040 80b1 	bne.w	8006bce <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 facd 	bl	800700c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a72:	e0ac      	b.n	8006bce <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a82:	f000 80a4 	beq.w	8006bce <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00d      	beq.n	8006aac <HAL_I2C_EV_IRQHandler+0x178>
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d008      	beq.n	8006aac <HAL_I2C_EV_IRQHandler+0x178>
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	f003 0304 	and.w	r3, r3, #4
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d103      	bne.n	8006aac <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 fb45 	bl	8007134 <I2C_MasterReceive_RXNE>
 8006aaa:	e00f      	b.n	8006acc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	f003 0304 	and.w	r3, r3, #4
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f000 808b 	beq.w	8006bce <HAL_I2C_EV_IRQHandler+0x29a>
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f000 8085 	beq.w	8006bce <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 fbf0 	bl	80072aa <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006aca:	e080      	b.n	8006bce <HAL_I2C_EV_IRQHandler+0x29a>
 8006acc:	e07f      	b.n	8006bce <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d004      	beq.n	8006ae0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	61fb      	str	r3, [r7, #28]
 8006ade:	e007      	b.n	8006af0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d011      	beq.n	8006b1e <HAL_I2C_EV_IRQHandler+0x1ea>
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00c      	beq.n	8006b1e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d003      	beq.n	8006b14 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006b14:	69b9      	ldr	r1, [r7, #24]
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 ffb0 	bl	8007a7c <I2C_Slave_ADDR>
 8006b1c:	e05a      	b.n	8006bd4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	f003 0310 	and.w	r3, r3, #16
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d008      	beq.n	8006b3a <HAL_I2C_EV_IRQHandler+0x206>
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 ffea 	bl	8007b0c <I2C_Slave_STOPF>
 8006b38:	e04c      	b.n	8006bd4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006b3a:	7bbb      	ldrb	r3, [r7, #14]
 8006b3c:	2b21      	cmp	r3, #33	; 0x21
 8006b3e:	d002      	beq.n	8006b46 <HAL_I2C_EV_IRQHandler+0x212>
 8006b40:	7bbb      	ldrb	r3, [r7, #14]
 8006b42:	2b29      	cmp	r3, #41	; 0x29
 8006b44:	d120      	bne.n	8006b88 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00d      	beq.n	8006b6c <HAL_I2C_EV_IRQHandler+0x238>
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d008      	beq.n	8006b6c <HAL_I2C_EV_IRQHandler+0x238>
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	f003 0304 	and.w	r3, r3, #4
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d103      	bne.n	8006b6c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fecb 	bl	8007900 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b6a:	e032      	b.n	8006bd2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	f003 0304 	and.w	r3, r3, #4
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d02d      	beq.n	8006bd2 <HAL_I2C_EV_IRQHandler+0x29e>
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d028      	beq.n	8006bd2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fefa 	bl	800797a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b86:	e024      	b.n	8006bd2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00d      	beq.n	8006bae <HAL_I2C_EV_IRQHandler+0x27a>
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d008      	beq.n	8006bae <HAL_I2C_EV_IRQHandler+0x27a>
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	f003 0304 	and.w	r3, r3, #4
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d103      	bne.n	8006bae <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 ff08 	bl	80079bc <I2C_SlaveReceive_RXNE>
 8006bac:	e012      	b.n	8006bd4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00d      	beq.n	8006bd4 <HAL_I2C_EV_IRQHandler+0x2a0>
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d008      	beq.n	8006bd4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 ff38 	bl	8007a38 <I2C_SlaveReceive_BTF>
 8006bc8:	e004      	b.n	8006bd4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8006bca:	bf00      	nop
 8006bcc:	e002      	b.n	8006bd4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006bce:	bf00      	nop
 8006bd0:	e000      	b.n	8006bd4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006bd2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006bd4:	3720      	adds	r7, #32
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b08a      	sub	sp, #40	; 0x28
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bfc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006bfe:	6a3b      	ldr	r3, [r7, #32]
 8006c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00d      	beq.n	8006c24 <HAL_I2C_ER_IRQHandler+0x4a>
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d008      	beq.n	8006c24 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c14:	f043 0301 	orr.w	r3, r3, #1
 8006c18:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006c22:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00d      	beq.n	8006c4a <HAL_I2C_ER_IRQHandler+0x70>
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d008      	beq.n	8006c4a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	f043 0302 	orr.w	r3, r3, #2
 8006c3e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006c48:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006c4a:	6a3b      	ldr	r3, [r7, #32]
 8006c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d03e      	beq.n	8006cd2 <HAL_I2C_ER_IRQHandler+0xf8>
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d039      	beq.n	8006cd2 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8006c5e:	7efb      	ldrb	r3, [r7, #27]
 8006c60:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c70:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c76:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006c78:	7ebb      	ldrb	r3, [r7, #26]
 8006c7a:	2b20      	cmp	r3, #32
 8006c7c:	d112      	bne.n	8006ca4 <HAL_I2C_ER_IRQHandler+0xca>
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10f      	bne.n	8006ca4 <HAL_I2C_ER_IRQHandler+0xca>
 8006c84:	7cfb      	ldrb	r3, [r7, #19]
 8006c86:	2b21      	cmp	r3, #33	; 0x21
 8006c88:	d008      	beq.n	8006c9c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006c8a:	7cfb      	ldrb	r3, [r7, #19]
 8006c8c:	2b29      	cmp	r3, #41	; 0x29
 8006c8e:	d005      	beq.n	8006c9c <HAL_I2C_ER_IRQHandler+0xc2>
 8006c90:	7cfb      	ldrb	r3, [r7, #19]
 8006c92:	2b28      	cmp	r3, #40	; 0x28
 8006c94:	d106      	bne.n	8006ca4 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2b21      	cmp	r3, #33	; 0x21
 8006c9a:	d103      	bne.n	8006ca4 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f001 f865 	bl	8007d6c <I2C_Slave_AF>
 8006ca2:	e016      	b.n	8006cd2 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006cac:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb0:	f043 0304 	orr.w	r3, r3, #4
 8006cb4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006cb6:	7efb      	ldrb	r3, [r7, #27]
 8006cb8:	2b10      	cmp	r3, #16
 8006cba:	d002      	beq.n	8006cc2 <HAL_I2C_ER_IRQHandler+0xe8>
 8006cbc:	7efb      	ldrb	r3, [r7, #27]
 8006cbe:	2b40      	cmp	r3, #64	; 0x40
 8006cc0:	d107      	bne.n	8006cd2 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cd0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00d      	beq.n	8006cf8 <HAL_I2C_ER_IRQHandler+0x11e>
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d008      	beq.n	8006cf8 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce8:	f043 0308 	orr.w	r3, r3, #8
 8006cec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006cf6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d008      	beq.n	8006d10 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	431a      	orrs	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f001 f89e 	bl	8007e4c <I2C_ITError>
  }
}
 8006d10:	bf00      	nop
 8006d12:	3728      	adds	r7, #40	; 0x28
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	460b      	mov	r3, r1
 8006d72:	70fb      	strb	r3, [r7, #3]
 8006d74:	4613      	mov	r3, r2
 8006d76:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dfe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e04:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d150      	bne.n	8006eb0 <I2C_MasterTransmit_TXE+0xc8>
 8006e0e:	7bfb      	ldrb	r3, [r7, #15]
 8006e10:	2b21      	cmp	r3, #33	; 0x21
 8006e12:	d14d      	bne.n	8006eb0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2b08      	cmp	r3, #8
 8006e18:	d01d      	beq.n	8006e56 <I2C_MasterTransmit_TXE+0x6e>
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	2b20      	cmp	r3, #32
 8006e1e:	d01a      	beq.n	8006e56 <I2C_MasterTransmit_TXE+0x6e>
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e26:	d016      	beq.n	8006e56 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	685a      	ldr	r2, [r3, #4]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e36:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2211      	movs	r2, #17
 8006e3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7ff ff62 	bl	8006d18 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006e54:	e060      	b.n	8006f18 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e64:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e74:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b40      	cmp	r3, #64	; 0x40
 8006e8e:	d107      	bne.n	8006ea0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f7ff ff7d 	bl	8006d98 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006e9e:	e03b      	b.n	8006f18 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7ff ff35 	bl	8006d18 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006eae:	e033      	b.n	8006f18 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
 8006eb2:	2b21      	cmp	r3, #33	; 0x21
 8006eb4:	d005      	beq.n	8006ec2 <I2C_MasterTransmit_TXE+0xda>
 8006eb6:	7bbb      	ldrb	r3, [r7, #14]
 8006eb8:	2b40      	cmp	r3, #64	; 0x40
 8006eba:	d12d      	bne.n	8006f18 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
 8006ebe:	2b22      	cmp	r3, #34	; 0x22
 8006ec0:	d12a      	bne.n	8006f18 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d108      	bne.n	8006ede <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	685a      	ldr	r2, [r3, #4]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eda:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006edc:	e01c      	b.n	8006f18 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b40      	cmp	r3, #64	; 0x40
 8006ee8:	d103      	bne.n	8006ef2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f88e 	bl	800700c <I2C_MemoryTransmit_TXE_BTF>
}
 8006ef0:	e012      	b.n	8006f18 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef6:	781a      	ldrb	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f02:	1c5a      	adds	r2, r3, #1
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006f16:	e7ff      	b.n	8006f18 <I2C_MasterTransmit_TXE+0x130>
 8006f18:	bf00      	nop
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b21      	cmp	r3, #33	; 0x21
 8006f38:	d164      	bne.n	8007004 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d012      	beq.n	8006f6a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f48:	781a      	ldrb	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f54:	1c5a      	adds	r2, r3, #1
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	3b01      	subs	r3, #1
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006f68:	e04c      	b.n	8007004 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2b08      	cmp	r3, #8
 8006f6e:	d01d      	beq.n	8006fac <I2C_MasterTransmit_BTF+0x8c>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2b20      	cmp	r3, #32
 8006f74:	d01a      	beq.n	8006fac <I2C_MasterTransmit_BTF+0x8c>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f7c:	d016      	beq.n	8006fac <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	685a      	ldr	r2, [r3, #4]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f8c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2211      	movs	r2, #17
 8006f92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f7ff feb7 	bl	8006d18 <HAL_I2C_MasterTxCpltCallback>
}
 8006faa:	e02b      	b.n	8007004 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fba:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fca:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	2b40      	cmp	r3, #64	; 0x40
 8006fe4:	d107      	bne.n	8006ff6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f7ff fed2 	bl	8006d98 <HAL_I2C_MemTxCpltCallback>
}
 8006ff4:	e006      	b.n	8007004 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7ff fe8a 	bl	8006d18 <HAL_I2C_MasterTxCpltCallback>
}
 8007004:	bf00      	nop
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800701a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007020:	2b00      	cmp	r3, #0
 8007022:	d11d      	bne.n	8007060 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007028:	2b01      	cmp	r3, #1
 800702a:	d10b      	bne.n	8007044 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007030:	b2da      	uxtb	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800703c:	1c9a      	adds	r2, r3, #2
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007042:	e073      	b.n	800712c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007048:	b29b      	uxth	r3, r3
 800704a:	121b      	asrs	r3, r3, #8
 800704c:	b2da      	uxtb	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007058:	1c5a      	adds	r2, r3, #1
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800705e:	e065      	b.n	800712c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007064:	2b01      	cmp	r3, #1
 8007066:	d10b      	bne.n	8007080 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800706c:	b2da      	uxtb	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007078:	1c5a      	adds	r2, r3, #1
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800707e:	e055      	b.n	800712c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007084:	2b02      	cmp	r3, #2
 8007086:	d151      	bne.n	800712c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007088:	7bfb      	ldrb	r3, [r7, #15]
 800708a:	2b22      	cmp	r3, #34	; 0x22
 800708c:	d10d      	bne.n	80070aa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800709c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80070a8:	e040      	b.n	800712c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d015      	beq.n	80070e0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80070b4:	7bfb      	ldrb	r3, [r7, #15]
 80070b6:	2b21      	cmp	r3, #33	; 0x21
 80070b8:	d112      	bne.n	80070e0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070be:	781a      	ldrb	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ca:	1c5a      	adds	r2, r3, #1
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	3b01      	subs	r3, #1
 80070d8:	b29a      	uxth	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80070de:	e025      	b.n	800712c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d120      	bne.n	800712c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80070ea:	7bfb      	ldrb	r3, [r7, #15]
 80070ec:	2b21      	cmp	r3, #33	; 0x21
 80070ee:	d11d      	bne.n	800712c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070fe:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800710e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2220      	movs	r2, #32
 800711a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7ff fe36 	bl	8006d98 <HAL_I2C_MemTxCpltCallback>
}
 800712c:	bf00      	nop
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007142:	b2db      	uxtb	r3, r3
 8007144:	2b22      	cmp	r3, #34	; 0x22
 8007146:	f040 80ac 	bne.w	80072a2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800714e:	b29b      	uxth	r3, r3
 8007150:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2b03      	cmp	r3, #3
 8007156:	d921      	bls.n	800719c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	691a      	ldr	r2, [r3, #16]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007162:	b2d2      	uxtb	r2, r2
 8007164:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716a:	1c5a      	adds	r2, r3, #1
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007174:	b29b      	uxth	r3, r3
 8007176:	3b01      	subs	r3, #1
 8007178:	b29a      	uxth	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007182:	b29b      	uxth	r3, r3
 8007184:	2b03      	cmp	r3, #3
 8007186:	f040 808c 	bne.w	80072a2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007198:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800719a:	e082      	b.n	80072a2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d075      	beq.n	8007290 <I2C_MasterReceive_RXNE+0x15c>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d002      	beq.n	80071b0 <I2C_MasterReceive_RXNE+0x7c>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d16f      	bne.n	8007290 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f001 facd 	bl	8008750 <I2C_WaitOnSTOPRequestThroughIT>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d142      	bne.n	8007242 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071ca:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80071da:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	691a      	ldr	r2, [r3, #16]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e6:	b2d2      	uxtb	r2, r2
 80071e8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ee:	1c5a      	adds	r2, r3, #1
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	3b01      	subs	r3, #1
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2220      	movs	r2, #32
 8007206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b40      	cmp	r3, #64	; 0x40
 8007214:	d10a      	bne.n	800722c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f7ff fdc1 	bl	8006dac <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800722a:	e03a      	b.n	80072a2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2212      	movs	r2, #18
 8007238:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f7ff fd76 	bl	8006d2c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007240:	e02f      	b.n	80072a2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007250:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	691a      	ldr	r2, [r3, #16]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725c:	b2d2      	uxtb	r2, r2
 800725e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007264:	1c5a      	adds	r2, r3, #1
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800726e:	b29b      	uxth	r3, r3
 8007270:	3b01      	subs	r3, #1
 8007272:	b29a      	uxth	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2220      	movs	r2, #32
 800727c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f7ff fd99 	bl	8006dc0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800728e:	e008      	b.n	80072a2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	685a      	ldr	r2, [r3, #4]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800729e:	605a      	str	r2, [r3, #4]
}
 80072a0:	e7ff      	b.n	80072a2 <I2C_MasterReceive_RXNE+0x16e>
 80072a2:	bf00      	nop
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b084      	sub	sp, #16
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072bc:	b29b      	uxth	r3, r3
 80072be:	2b04      	cmp	r3, #4
 80072c0:	d11b      	bne.n	80072fa <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	685a      	ldr	r2, [r3, #4]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072d0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	691a      	ldr	r2, [r3, #16]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072dc:	b2d2      	uxtb	r2, r2
 80072de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e4:	1c5a      	adds	r2, r3, #1
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	3b01      	subs	r3, #1
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80072f8:	e0bd      	b.n	8007476 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072fe:	b29b      	uxth	r3, r3
 8007300:	2b03      	cmp	r3, #3
 8007302:	d129      	bne.n	8007358 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007312:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2b04      	cmp	r3, #4
 8007318:	d00a      	beq.n	8007330 <I2C_MasterReceive_BTF+0x86>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b02      	cmp	r3, #2
 800731e:	d007      	beq.n	8007330 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800732e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	691a      	ldr	r2, [r3, #16]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	b2d2      	uxtb	r2, r2
 800733c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007342:	1c5a      	adds	r2, r3, #1
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800734c:	b29b      	uxth	r3, r3
 800734e:	3b01      	subs	r3, #1
 8007350:	b29a      	uxth	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007356:	e08e      	b.n	8007476 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800735c:	b29b      	uxth	r3, r3
 800735e:	2b02      	cmp	r3, #2
 8007360:	d176      	bne.n	8007450 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d002      	beq.n	800736e <I2C_MasterReceive_BTF+0xc4>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2b10      	cmp	r3, #16
 800736c:	d108      	bne.n	8007380 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800737c:	601a      	str	r2, [r3, #0]
 800737e:	e019      	b.n	80073b4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2b04      	cmp	r3, #4
 8007384:	d002      	beq.n	800738c <I2C_MasterReceive_BTF+0xe2>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2b02      	cmp	r3, #2
 800738a:	d108      	bne.n	800739e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800739a:	601a      	str	r2, [r3, #0]
 800739c:	e00a      	b.n	80073b4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2b10      	cmp	r3, #16
 80073a2:	d007      	beq.n	80073b4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073b2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	691a      	ldr	r2, [r3, #16]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073be:	b2d2      	uxtb	r2, r2
 80073c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c6:	1c5a      	adds	r2, r3, #1
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	3b01      	subs	r3, #1
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	691a      	ldr	r2, [r3, #16]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e4:	b2d2      	uxtb	r2, r2
 80073e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ec:	1c5a      	adds	r2, r3, #1
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	3b01      	subs	r3, #1
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685a      	ldr	r2, [r3, #4]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800740e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2220      	movs	r2, #32
 8007414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800741e:	b2db      	uxtb	r3, r3
 8007420:	2b40      	cmp	r3, #64	; 0x40
 8007422:	d10a      	bne.n	800743a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7ff fcba 	bl	8006dac <HAL_I2C_MemRxCpltCallback>
}
 8007438:	e01d      	b.n	8007476 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2212      	movs	r2, #18
 8007446:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f7ff fc6f 	bl	8006d2c <HAL_I2C_MasterRxCpltCallback>
}
 800744e:	e012      	b.n	8007476 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	691a      	ldr	r2, [r3, #16]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745a:	b2d2      	uxtb	r2, r2
 800745c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007462:	1c5a      	adds	r2, r3, #1
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800746c:	b29b      	uxth	r3, r3
 800746e:	3b01      	subs	r3, #1
 8007470:	b29a      	uxth	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007476:	bf00      	nop
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800747e:	b480      	push	{r7}
 8007480:	b083      	sub	sp, #12
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b40      	cmp	r3, #64	; 0x40
 8007490:	d117      	bne.n	80074c2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007496:	2b00      	cmp	r3, #0
 8007498:	d109      	bne.n	80074ae <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	461a      	mov	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80074aa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80074ac:	e067      	b.n	800757e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	f043 0301 	orr.w	r3, r3, #1
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	611a      	str	r2, [r3, #16]
}
 80074c0:	e05d      	b.n	800757e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074ca:	d133      	bne.n	8007534 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b21      	cmp	r3, #33	; 0x21
 80074d6:	d109      	bne.n	80074ec <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	461a      	mov	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80074e8:	611a      	str	r2, [r3, #16]
 80074ea:	e008      	b.n	80074fe <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	f043 0301 	orr.w	r3, r3, #1
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007502:	2b00      	cmp	r3, #0
 8007504:	d004      	beq.n	8007510 <I2C_Master_SB+0x92>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800750a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800750c:	2b00      	cmp	r3, #0
 800750e:	d108      	bne.n	8007522 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007514:	2b00      	cmp	r3, #0
 8007516:	d032      	beq.n	800757e <I2C_Master_SB+0x100>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800751e:	2b00      	cmp	r3, #0
 8007520:	d02d      	beq.n	800757e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007530:	605a      	str	r2, [r3, #4]
}
 8007532:	e024      	b.n	800757e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10e      	bne.n	800755a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007540:	b29b      	uxth	r3, r3
 8007542:	11db      	asrs	r3, r3, #7
 8007544:	b2db      	uxtb	r3, r3
 8007546:	f003 0306 	and.w	r3, r3, #6
 800754a:	b2db      	uxtb	r3, r3
 800754c:	f063 030f 	orn	r3, r3, #15
 8007550:	b2da      	uxtb	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	611a      	str	r2, [r3, #16]
}
 8007558:	e011      	b.n	800757e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800755e:	2b01      	cmp	r3, #1
 8007560:	d10d      	bne.n	800757e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007566:	b29b      	uxth	r3, r3
 8007568:	11db      	asrs	r3, r3, #7
 800756a:	b2db      	uxtb	r3, r3
 800756c:	f003 0306 	and.w	r3, r3, #6
 8007570:	b2db      	uxtb	r3, r3
 8007572:	f063 030e 	orn	r3, r3, #14
 8007576:	b2da      	uxtb	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	611a      	str	r2, [r3, #16]
}
 800757e:	bf00      	nop
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800758a:	b480      	push	{r7}
 800758c:	b083      	sub	sp, #12
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007596:	b2da      	uxtb	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d004      	beq.n	80075b0 <I2C_Master_ADD10+0x26>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d108      	bne.n	80075c2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00c      	beq.n	80075d2 <I2C_Master_ADD10+0x48>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d007      	beq.n	80075d2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	685a      	ldr	r2, [r3, #4]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075d0:	605a      	str	r2, [r3, #4]
  }
}
 80075d2:	bf00      	nop
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80075de:	b480      	push	{r7}
 80075e0:	b091      	sub	sp, #68	; 0x44
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fa:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b22      	cmp	r3, #34	; 0x22
 8007606:	f040 8169 	bne.w	80078dc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800760e:	2b00      	cmp	r3, #0
 8007610:	d10f      	bne.n	8007632 <I2C_Master_ADDR+0x54>
 8007612:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007616:	2b40      	cmp	r3, #64	; 0x40
 8007618:	d10b      	bne.n	8007632 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800761a:	2300      	movs	r3, #0
 800761c:	633b      	str	r3, [r7, #48]	; 0x30
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	695b      	ldr	r3, [r3, #20]
 8007624:	633b      	str	r3, [r7, #48]	; 0x30
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	633b      	str	r3, [r7, #48]	; 0x30
 800762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007630:	e160      	b.n	80078f4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007636:	2b00      	cmp	r3, #0
 8007638:	d11d      	bne.n	8007676 <I2C_Master_ADDR+0x98>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007642:	d118      	bne.n	8007676 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007644:	2300      	movs	r3, #0
 8007646:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007658:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007668:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800766e:	1c5a      	adds	r2, r3, #1
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	651a      	str	r2, [r3, #80]	; 0x50
 8007674:	e13e      	b.n	80078f4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800767a:	b29b      	uxth	r3, r3
 800767c:	2b00      	cmp	r3, #0
 800767e:	d113      	bne.n	80076a8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007680:	2300      	movs	r3, #0
 8007682:	62bb      	str	r3, [r7, #40]	; 0x28
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	62bb      	str	r3, [r7, #40]	; 0x28
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	62bb      	str	r3, [r7, #40]	; 0x28
 8007694:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076a4:	601a      	str	r2, [r3, #0]
 80076a6:	e115      	b.n	80078d4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	f040 808a 	bne.w	80077c8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80076b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80076ba:	d137      	bne.n	800772c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076ca:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076da:	d113      	bne.n	8007704 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076ea:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076ec:	2300      	movs	r3, #0
 80076ee:	627b      	str	r3, [r7, #36]	; 0x24
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	627b      	str	r3, [r7, #36]	; 0x24
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007702:	e0e7      	b.n	80078d4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007704:	2300      	movs	r3, #0
 8007706:	623b      	str	r3, [r7, #32]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	623b      	str	r3, [r7, #32]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	623b      	str	r3, [r7, #32]
 8007718:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007728:	601a      	str	r2, [r3, #0]
 800772a:	e0d3      	b.n	80078d4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800772c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772e:	2b08      	cmp	r3, #8
 8007730:	d02e      	beq.n	8007790 <I2C_Master_ADDR+0x1b2>
 8007732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007734:	2b20      	cmp	r3, #32
 8007736:	d02b      	beq.n	8007790 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800773a:	2b12      	cmp	r3, #18
 800773c:	d102      	bne.n	8007744 <I2C_Master_ADDR+0x166>
 800773e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007740:	2b01      	cmp	r3, #1
 8007742:	d125      	bne.n	8007790 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007746:	2b04      	cmp	r3, #4
 8007748:	d00e      	beq.n	8007768 <I2C_Master_ADDR+0x18a>
 800774a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774c:	2b02      	cmp	r3, #2
 800774e:	d00b      	beq.n	8007768 <I2C_Master_ADDR+0x18a>
 8007750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007752:	2b10      	cmp	r3, #16
 8007754:	d008      	beq.n	8007768 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007764:	601a      	str	r2, [r3, #0]
 8007766:	e007      	b.n	8007778 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007776:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007778:	2300      	movs	r3, #0
 800777a:	61fb      	str	r3, [r7, #28]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	61fb      	str	r3, [r7, #28]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	61fb      	str	r3, [r7, #28]
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	e0a1      	b.n	80078d4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800779e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077a0:	2300      	movs	r3, #0
 80077a2:	61bb      	str	r3, [r7, #24]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	61bb      	str	r3, [r7, #24]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	61bb      	str	r3, [r7, #24]
 80077b4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	e085      	b.n	80078d4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d14d      	bne.n	800786e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80077d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d4:	2b04      	cmp	r3, #4
 80077d6:	d016      	beq.n	8007806 <I2C_Master_ADDR+0x228>
 80077d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d013      	beq.n	8007806 <I2C_Master_ADDR+0x228>
 80077de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e0:	2b10      	cmp	r3, #16
 80077e2:	d010      	beq.n	8007806 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077f2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007802:	601a      	str	r2, [r3, #0]
 8007804:	e007      	b.n	8007816 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007814:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007820:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007824:	d117      	bne.n	8007856 <I2C_Master_ADDR+0x278>
 8007826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007828:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800782c:	d00b      	beq.n	8007846 <I2C_Master_ADDR+0x268>
 800782e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007830:	2b01      	cmp	r3, #1
 8007832:	d008      	beq.n	8007846 <I2C_Master_ADDR+0x268>
 8007834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007836:	2b08      	cmp	r3, #8
 8007838:	d005      	beq.n	8007846 <I2C_Master_ADDR+0x268>
 800783a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783c:	2b10      	cmp	r3, #16
 800783e:	d002      	beq.n	8007846 <I2C_Master_ADDR+0x268>
 8007840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007842:	2b20      	cmp	r3, #32
 8007844:	d107      	bne.n	8007856 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	685a      	ldr	r2, [r3, #4]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007854:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007856:	2300      	movs	r3, #0
 8007858:	617b      	str	r3, [r7, #20]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	617b      	str	r3, [r7, #20]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	617b      	str	r3, [r7, #20]
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	e032      	b.n	80078d4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800787c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800788c:	d117      	bne.n	80078be <I2C_Master_ADDR+0x2e0>
 800788e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007890:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007894:	d00b      	beq.n	80078ae <I2C_Master_ADDR+0x2d0>
 8007896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007898:	2b01      	cmp	r3, #1
 800789a:	d008      	beq.n	80078ae <I2C_Master_ADDR+0x2d0>
 800789c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789e:	2b08      	cmp	r3, #8
 80078a0:	d005      	beq.n	80078ae <I2C_Master_ADDR+0x2d0>
 80078a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a4:	2b10      	cmp	r3, #16
 80078a6:	d002      	beq.n	80078ae <I2C_Master_ADDR+0x2d0>
 80078a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078aa:	2b20      	cmp	r3, #32
 80078ac:	d107      	bne.n	80078be <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	685a      	ldr	r2, [r3, #4]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078bc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078be:	2300      	movs	r3, #0
 80078c0:	613b      	str	r3, [r7, #16]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	695b      	ldr	r3, [r3, #20]
 80078c8:	613b      	str	r3, [r7, #16]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	613b      	str	r3, [r7, #16]
 80078d2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80078da:	e00b      	b.n	80078f4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078dc:	2300      	movs	r3, #0
 80078de:	60fb      	str	r3, [r7, #12]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	60fb      	str	r3, [r7, #12]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	60fb      	str	r3, [r7, #12]
 80078f0:	68fb      	ldr	r3, [r7, #12]
}
 80078f2:	e7ff      	b.n	80078f4 <I2C_Master_ADDR+0x316>
 80078f4:	bf00      	nop
 80078f6:	3744      	adds	r7, #68	; 0x44
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800790e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007914:	b29b      	uxth	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d02b      	beq.n	8007972 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791e:	781a      	ldrb	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792a:	1c5a      	adds	r2, r3, #1
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007934:	b29b      	uxth	r3, r3
 8007936:	3b01      	subs	r3, #1
 8007938:	b29a      	uxth	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007942:	b29b      	uxth	r3, r3
 8007944:	2b00      	cmp	r3, #0
 8007946:	d114      	bne.n	8007972 <I2C_SlaveTransmit_TXE+0x72>
 8007948:	7bfb      	ldrb	r3, [r7, #15]
 800794a:	2b29      	cmp	r3, #41	; 0x29
 800794c:	d111      	bne.n	8007972 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685a      	ldr	r2, [r3, #4]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800795c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2221      	movs	r2, #33	; 0x21
 8007962:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2228      	movs	r2, #40	; 0x28
 8007968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f7ff f9e7 	bl	8006d40 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007972:	bf00      	nop
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800797a:	b480      	push	{r7}
 800797c:	b083      	sub	sp, #12
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007986:	b29b      	uxth	r3, r3
 8007988:	2b00      	cmp	r3, #0
 800798a:	d011      	beq.n	80079b0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007990:	781a      	ldrb	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799c:	1c5a      	adds	r2, r3, #1
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	3b01      	subs	r3, #1
 80079aa:	b29a      	uxth	r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d02c      	beq.n	8007a30 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	691a      	ldr	r2, [r3, #16]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e0:	b2d2      	uxtb	r2, r2
 80079e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e8:	1c5a      	adds	r2, r3, #1
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	3b01      	subs	r3, #1
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d114      	bne.n	8007a30 <I2C_SlaveReceive_RXNE+0x74>
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
 8007a08:	2b2a      	cmp	r3, #42	; 0x2a
 8007a0a:	d111      	bne.n	8007a30 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	685a      	ldr	r2, [r3, #4]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a1a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2222      	movs	r2, #34	; 0x22
 8007a20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2228      	movs	r2, #40	; 0x28
 8007a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f7ff f992 	bl	8006d54 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007a30:	bf00      	nop
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d012      	beq.n	8007a70 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	691a      	ldr	r2, [r3, #16]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a54:	b2d2      	uxtb	r2, r2
 8007a56:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5c:	1c5a      	adds	r2, r3, #1
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007a86:	2300      	movs	r3, #0
 8007a88:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007a96:	2b28      	cmp	r3, #40	; 0x28
 8007a98:	d125      	bne.n	8007ae6 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007aa8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	f003 0304 	and.w	r3, r3, #4
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d101      	bne.n	8007ab8 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d103      	bne.n	8007aca <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	81bb      	strh	r3, [r7, #12]
 8007ac8:	e002      	b.n	8007ad0 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	699b      	ldr	r3, [r3, #24]
 8007ace:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007ad8:	89ba      	ldrh	r2, [r7, #12]
 8007ada:	7bfb      	ldrb	r3, [r7, #15]
 8007adc:	4619      	mov	r1, r3
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f7ff f942 	bl	8006d68 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007ae4:	e00e      	b.n	8007b04 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	60bb      	str	r3, [r7, #8]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	695b      	ldr	r3, [r3, #20]
 8007af0:	60bb      	str	r3, [r7, #8]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	60bb      	str	r3, [r7, #8]
 8007afa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007b04:	bf00      	nop
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b1a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	685a      	ldr	r2, [r3, #4]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b2a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	60bb      	str	r3, [r7, #8]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	60bb      	str	r3, [r7, #8]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f042 0201 	orr.w	r2, r2, #1
 8007b46:	601a      	str	r2, [r3, #0]
 8007b48:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b58:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b68:	d172      	bne.n	8007c50 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007b6a:	7bfb      	ldrb	r3, [r7, #15]
 8007b6c:	2b22      	cmp	r3, #34	; 0x22
 8007b6e:	d002      	beq.n	8007b76 <I2C_Slave_STOPF+0x6a>
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
 8007b72:	2b2a      	cmp	r3, #42	; 0x2a
 8007b74:	d135      	bne.n	8007be2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d005      	beq.n	8007b9a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b92:	f043 0204 	orr.w	r2, r3, #4
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	685a      	ldr	r2, [r3, #4]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ba8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7fd ffb4 	bl	8005b1c <HAL_DMA_GetState>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d049      	beq.n	8007c4e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bbe:	4a69      	ldr	r2, [pc, #420]	; (8007d64 <I2C_Slave_STOPF+0x258>)
 8007bc0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fd fdfc 	bl	80057c4 <HAL_DMA_Abort_IT>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d03d      	beq.n	8007c4e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007bdc:	4610      	mov	r0, r2
 8007bde:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007be0:	e035      	b.n	8007c4e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d005      	beq.n	8007c06 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfe:	f043 0204 	orr.w	r2, r3, #4
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c14:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fd ff7e 	bl	8005b1c <HAL_DMA_GetState>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d014      	beq.n	8007c50 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c2a:	4a4e      	ldr	r2, [pc, #312]	; (8007d64 <I2C_Slave_STOPF+0x258>)
 8007c2c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7fd fdc6 	bl	80057c4 <HAL_DMA_Abort_IT>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d008      	beq.n	8007c50 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007c48:	4610      	mov	r0, r2
 8007c4a:	4798      	blx	r3
 8007c4c:	e000      	b.n	8007c50 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007c4e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d03e      	beq.n	8007cd8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	695b      	ldr	r3, [r3, #20]
 8007c60:	f003 0304 	and.w	r3, r3, #4
 8007c64:	2b04      	cmp	r3, #4
 8007c66:	d112      	bne.n	8007c8e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	691a      	ldr	r2, [r3, #16]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c72:	b2d2      	uxtb	r2, r2
 8007c74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7a:	1c5a      	adds	r2, r3, #1
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	3b01      	subs	r3, #1
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	695b      	ldr	r3, [r3, #20]
 8007c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c98:	2b40      	cmp	r3, #64	; 0x40
 8007c9a:	d112      	bne.n	8007cc2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	691a      	ldr	r2, [r3, #16]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca6:	b2d2      	uxtb	r2, r2
 8007ca8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cae:	1c5a      	adds	r2, r3, #1
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d005      	beq.n	8007cd8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd0:	f043 0204 	orr.w	r2, r3, #4
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d003      	beq.n	8007ce8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 f8b3 	bl	8007e4c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007ce6:	e039      	b.n	8007d5c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
 8007cea:	2b2a      	cmp	r3, #42	; 0x2a
 8007cec:	d109      	bne.n	8007d02 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2228      	movs	r2, #40	; 0x28
 8007cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7ff f829 	bl	8006d54 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b28      	cmp	r3, #40	; 0x28
 8007d0c:	d111      	bne.n	8007d32 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a15      	ldr	r2, [pc, #84]	; (8007d68 <I2C_Slave_STOPF+0x25c>)
 8007d12:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2220      	movs	r2, #32
 8007d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7ff f82a 	bl	8006d84 <HAL_I2C_ListenCpltCallback>
}
 8007d30:	e014      	b.n	8007d5c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d36:	2b22      	cmp	r3, #34	; 0x22
 8007d38:	d002      	beq.n	8007d40 <I2C_Slave_STOPF+0x234>
 8007d3a:	7bfb      	ldrb	r3, [r7, #15]
 8007d3c:	2b22      	cmp	r3, #34	; 0x22
 8007d3e:	d10d      	bne.n	8007d5c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2220      	movs	r2, #32
 8007d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f7fe fffc 	bl	8006d54 <HAL_I2C_SlaveRxCpltCallback>
}
 8007d5c:	bf00      	nop
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	08008351 	.word	0x08008351
 8007d68:	ffff0000 	.word	0xffff0000

08007d6c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d80:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	2b08      	cmp	r3, #8
 8007d86:	d002      	beq.n	8007d8e <I2C_Slave_AF+0x22>
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	2b20      	cmp	r3, #32
 8007d8c:	d129      	bne.n	8007de2 <I2C_Slave_AF+0x76>
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
 8007d90:	2b28      	cmp	r3, #40	; 0x28
 8007d92:	d126      	bne.n	8007de2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a2c      	ldr	r2, [pc, #176]	; (8007e48 <I2C_Slave_AF+0xdc>)
 8007d98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	685a      	ldr	r2, [r3, #4]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007da8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007db2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dc2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2220      	movs	r2, #32
 8007dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f7fe ffd2 	bl	8006d84 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007de0:	e02e      	b.n	8007e40 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007de2:	7bfb      	ldrb	r3, [r7, #15]
 8007de4:	2b21      	cmp	r3, #33	; 0x21
 8007de6:	d126      	bne.n	8007e36 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a17      	ldr	r2, [pc, #92]	; (8007e48 <I2C_Slave_AF+0xdc>)
 8007dec:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2221      	movs	r2, #33	; 0x21
 8007df2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2220      	movs	r2, #32
 8007df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	685a      	ldr	r2, [r3, #4]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e12:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e1c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e2c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7fe ff86 	bl	8006d40 <HAL_I2C_SlaveTxCpltCallback>
}
 8007e34:	e004      	b.n	8007e40 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e3e:	615a      	str	r2, [r3, #20]
}
 8007e40:	bf00      	nop
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	ffff0000 	.word	0xffff0000

08007e4c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e5a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e62:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007e64:	7bbb      	ldrb	r3, [r7, #14]
 8007e66:	2b10      	cmp	r3, #16
 8007e68:	d002      	beq.n	8007e70 <I2C_ITError+0x24>
 8007e6a:	7bbb      	ldrb	r3, [r7, #14]
 8007e6c:	2b40      	cmp	r3, #64	; 0x40
 8007e6e:	d10a      	bne.n	8007e86 <I2C_ITError+0x3a>
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
 8007e72:	2b22      	cmp	r3, #34	; 0x22
 8007e74:	d107      	bne.n	8007e86 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e84:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007e86:	7bfb      	ldrb	r3, [r7, #15]
 8007e88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007e8c:	2b28      	cmp	r3, #40	; 0x28
 8007e8e:	d107      	bne.n	8007ea0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2228      	movs	r2, #40	; 0x28
 8007e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007e9e:	e015      	b.n	8007ecc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007eaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eae:	d00a      	beq.n	8007ec6 <I2C_ITError+0x7a>
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
 8007eb2:	2b60      	cmp	r3, #96	; 0x60
 8007eb4:	d007      	beq.n	8007ec6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2220      	movs	r2, #32
 8007eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eda:	d162      	bne.n	8007fa2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	685a      	ldr	r2, [r3, #4]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007eea:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d020      	beq.n	8007f3c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007efe:	4a6a      	ldr	r2, [pc, #424]	; (80080a8 <I2C_ITError+0x25c>)
 8007f00:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fd fc5c 	bl	80057c4 <HAL_DMA_Abort_IT>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f000 8089 	beq.w	8008026 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f022 0201 	bic.w	r2, r2, #1
 8007f22:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2220      	movs	r2, #32
 8007f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007f36:	4610      	mov	r0, r2
 8007f38:	4798      	blx	r3
 8007f3a:	e074      	b.n	8008026 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f40:	4a59      	ldr	r2, [pc, #356]	; (80080a8 <I2C_ITError+0x25c>)
 8007f42:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7fd fc3b 	bl	80057c4 <HAL_DMA_Abort_IT>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d068      	beq.n	8008026 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	695b      	ldr	r3, [r3, #20]
 8007f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f5e:	2b40      	cmp	r3, #64	; 0x40
 8007f60:	d10b      	bne.n	8007f7a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	691a      	ldr	r2, [r3, #16]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6c:	b2d2      	uxtb	r2, r2
 8007f6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f74:	1c5a      	adds	r2, r3, #1
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f022 0201 	bic.w	r2, r2, #1
 8007f88:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2220      	movs	r2, #32
 8007f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007f9c:	4610      	mov	r0, r2
 8007f9e:	4798      	blx	r3
 8007fa0:	e041      	b.n	8008026 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b60      	cmp	r3, #96	; 0x60
 8007fac:	d125      	bne.n	8007ffa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2220      	movs	r2, #32
 8007fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc6:	2b40      	cmp	r3, #64	; 0x40
 8007fc8:	d10b      	bne.n	8007fe2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	691a      	ldr	r2, [r3, #16]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd4:	b2d2      	uxtb	r2, r2
 8007fd6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fdc:	1c5a      	adds	r2, r3, #1
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f022 0201 	bic.w	r2, r2, #1
 8007ff0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f7fe feee 	bl	8006dd4 <HAL_I2C_AbortCpltCallback>
 8007ff8:	e015      	b.n	8008026 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	695b      	ldr	r3, [r3, #20]
 8008000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008004:	2b40      	cmp	r3, #64	; 0x40
 8008006:	d10b      	bne.n	8008020 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	691a      	ldr	r2, [r3, #16]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008012:	b2d2      	uxtb	r2, r2
 8008014:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801a:	1c5a      	adds	r2, r3, #1
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f7fe fecd 	bl	8006dc0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	f003 0301 	and.w	r3, r3, #1
 8008032:	2b00      	cmp	r3, #0
 8008034:	d10e      	bne.n	8008054 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800803c:	2b00      	cmp	r3, #0
 800803e:	d109      	bne.n	8008054 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008046:	2b00      	cmp	r3, #0
 8008048:	d104      	bne.n	8008054 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008050:	2b00      	cmp	r3, #0
 8008052:	d007      	beq.n	8008064 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	685a      	ldr	r2, [r3, #4]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008062:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800806a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008070:	f003 0304 	and.w	r3, r3, #4
 8008074:	2b04      	cmp	r3, #4
 8008076:	d113      	bne.n	80080a0 <I2C_ITError+0x254>
 8008078:	7bfb      	ldrb	r3, [r7, #15]
 800807a:	2b28      	cmp	r3, #40	; 0x28
 800807c:	d110      	bne.n	80080a0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a0a      	ldr	r2, [pc, #40]	; (80080ac <I2C_ITError+0x260>)
 8008082:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2220      	movs	r2, #32
 800808e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7fe fe72 	bl	8006d84 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80080a0:	bf00      	nop
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	08008351 	.word	0x08008351
 80080ac:	ffff0000 	.word	0xffff0000

080080b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b088      	sub	sp, #32
 80080b4:	af02      	add	r7, sp, #8
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	607a      	str	r2, [r7, #4]
 80080ba:	603b      	str	r3, [r7, #0]
 80080bc:	460b      	mov	r3, r1
 80080be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	2b08      	cmp	r3, #8
 80080ca:	d006      	beq.n	80080da <I2C_MasterRequestWrite+0x2a>
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d003      	beq.n	80080da <I2C_MasterRequestWrite+0x2a>
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80080d8:	d108      	bne.n	80080ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080e8:	601a      	str	r2, [r3, #0]
 80080ea:	e00b      	b.n	8008104 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f0:	2b12      	cmp	r3, #18
 80080f2:	d107      	bne.n	8008104 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008102:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f000 f9c5 	bl	80084a0 <I2C_WaitOnFlagUntilTimeout>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00d      	beq.n	8008138 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800812a:	d103      	bne.n	8008134 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008132:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008134:	2303      	movs	r3, #3
 8008136:	e035      	b.n	80081a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008140:	d108      	bne.n	8008154 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008142:	897b      	ldrh	r3, [r7, #10]
 8008144:	b2db      	uxtb	r3, r3
 8008146:	461a      	mov	r2, r3
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008150:	611a      	str	r2, [r3, #16]
 8008152:	e01b      	b.n	800818c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008154:	897b      	ldrh	r3, [r7, #10]
 8008156:	11db      	asrs	r3, r3, #7
 8008158:	b2db      	uxtb	r3, r3
 800815a:	f003 0306 	and.w	r3, r3, #6
 800815e:	b2db      	uxtb	r3, r3
 8008160:	f063 030f 	orn	r3, r3, #15
 8008164:	b2da      	uxtb	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	490e      	ldr	r1, [pc, #56]	; (80081ac <I2C_MasterRequestWrite+0xfc>)
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f000 f9eb 	bl	800854e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e010      	b.n	80081a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008182:	897b      	ldrh	r3, [r7, #10]
 8008184:	b2da      	uxtb	r2, r3
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	4907      	ldr	r1, [pc, #28]	; (80081b0 <I2C_MasterRequestWrite+0x100>)
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f000 f9db 	bl	800854e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d001      	beq.n	80081a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e000      	b.n	80081a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3718      	adds	r7, #24
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	00010008 	.word	0x00010008
 80081b0:	00010002 	.word	0x00010002

080081b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b088      	sub	sp, #32
 80081b8:	af02      	add	r7, sp, #8
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	607a      	str	r2, [r7, #4]
 80081be:	603b      	str	r3, [r7, #0]
 80081c0:	460b      	mov	r3, r1
 80081c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80081d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	2b08      	cmp	r3, #8
 80081de:	d006      	beq.n	80081ee <I2C_MasterRequestRead+0x3a>
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d003      	beq.n	80081ee <I2C_MasterRequestRead+0x3a>
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80081ec:	d108      	bne.n	8008200 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	e00b      	b.n	8008218 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008204:	2b11      	cmp	r3, #17
 8008206:	d107      	bne.n	8008218 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008216:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	9300      	str	r3, [sp, #0]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f000 f93b 	bl	80084a0 <I2C_WaitOnFlagUntilTimeout>
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00d      	beq.n	800824c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800823a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800823e:	d103      	bne.n	8008248 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008246:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008248:	2303      	movs	r3, #3
 800824a:	e079      	b.n	8008340 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008254:	d108      	bne.n	8008268 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008256:	897b      	ldrh	r3, [r7, #10]
 8008258:	b2db      	uxtb	r3, r3
 800825a:	f043 0301 	orr.w	r3, r3, #1
 800825e:	b2da      	uxtb	r2, r3
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	611a      	str	r2, [r3, #16]
 8008266:	e05f      	b.n	8008328 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008268:	897b      	ldrh	r3, [r7, #10]
 800826a:	11db      	asrs	r3, r3, #7
 800826c:	b2db      	uxtb	r3, r3
 800826e:	f003 0306 	and.w	r3, r3, #6
 8008272:	b2db      	uxtb	r3, r3
 8008274:	f063 030f 	orn	r3, r3, #15
 8008278:	b2da      	uxtb	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	4930      	ldr	r1, [pc, #192]	; (8008348 <I2C_MasterRequestRead+0x194>)
 8008286:	68f8      	ldr	r0, [r7, #12]
 8008288:	f000 f961 	bl	800854e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d001      	beq.n	8008296 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e054      	b.n	8008340 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008296:	897b      	ldrh	r3, [r7, #10]
 8008298:	b2da      	uxtb	r2, r3
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	4929      	ldr	r1, [pc, #164]	; (800834c <I2C_MasterRequestRead+0x198>)
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f000 f951 	bl	800854e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d001      	beq.n	80082b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e044      	b.n	8008340 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082b6:	2300      	movs	r3, #0
 80082b8:	613b      	str	r3, [r7, #16]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	695b      	ldr	r3, [r3, #20]
 80082c0:	613b      	str	r3, [r7, #16]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	699b      	ldr	r3, [r3, #24]
 80082c8:	613b      	str	r3, [r7, #16]
 80082ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f000 f8d9 	bl	80084a0 <I2C_WaitOnFlagUntilTimeout>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00d      	beq.n	8008310 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008302:	d103      	bne.n	800830c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800830a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800830c:	2303      	movs	r3, #3
 800830e:	e017      	b.n	8008340 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008310:	897b      	ldrh	r3, [r7, #10]
 8008312:	11db      	asrs	r3, r3, #7
 8008314:	b2db      	uxtb	r3, r3
 8008316:	f003 0306 	and.w	r3, r3, #6
 800831a:	b2db      	uxtb	r3, r3
 800831c:	f063 030e 	orn	r3, r3, #14
 8008320:	b2da      	uxtb	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	4907      	ldr	r1, [pc, #28]	; (800834c <I2C_MasterRequestRead+0x198>)
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f000 f90d 	bl	800854e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d001      	beq.n	800833e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e000      	b.n	8008340 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3718      	adds	r7, #24
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	00010008 	.word	0x00010008
 800834c:	00010002 	.word	0x00010002

08008350 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008358:	2300      	movs	r3, #0
 800835a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008360:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008368:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800836a:	4b4b      	ldr	r3, [pc, #300]	; (8008498 <I2C_DMAAbort+0x148>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	08db      	lsrs	r3, r3, #3
 8008370:	4a4a      	ldr	r2, [pc, #296]	; (800849c <I2C_DMAAbort+0x14c>)
 8008372:	fba2 2303 	umull	r2, r3, r2, r3
 8008376:	0a1a      	lsrs	r2, r3, #8
 8008378:	4613      	mov	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	4413      	add	r3, r2
 800837e:	00da      	lsls	r2, r3, #3
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d106      	bne.n	8008398 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838e:	f043 0220 	orr.w	r2, r3, #32
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008396:	e00a      	b.n	80083ae <I2C_DMAAbort+0x5e>
    }
    count--;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	3b01      	subs	r3, #1
 800839c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083ac:	d0ea      	beq.n	8008384 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d003      	beq.n	80083be <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ba:	2200      	movs	r2, #0
 80083bc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d003      	beq.n	80083ce <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ca:	2200      	movs	r2, #0
 80083cc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083dc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	2200      	movs	r2, #0
 80083e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d003      	beq.n	80083f4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083f0:	2200      	movs	r2, #0
 80083f2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d003      	beq.n	8008404 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008400:	2200      	movs	r2, #0
 8008402:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f022 0201 	bic.w	r2, r2, #1
 8008412:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b60      	cmp	r3, #96	; 0x60
 800841e:	d10e      	bne.n	800843e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	2220      	movs	r2, #32
 8008424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	2200      	movs	r2, #0
 8008434:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008436:	6978      	ldr	r0, [r7, #20]
 8008438:	f7fe fccc 	bl	8006dd4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800843c:	e027      	b.n	800848e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800843e:	7cfb      	ldrb	r3, [r7, #19]
 8008440:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008444:	2b28      	cmp	r3, #40	; 0x28
 8008446:	d117      	bne.n	8008478 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f042 0201 	orr.w	r2, r2, #1
 8008456:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008466:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	2200      	movs	r2, #0
 800846c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	2228      	movs	r2, #40	; 0x28
 8008472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008476:	e007      	b.n	8008488 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	2220      	movs	r2, #32
 800847c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	2200      	movs	r2, #0
 8008484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008488:	6978      	ldr	r0, [r7, #20]
 800848a:	f7fe fc99 	bl	8006dc0 <HAL_I2C_ErrorCallback>
}
 800848e:	bf00      	nop
 8008490:	3718      	adds	r7, #24
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	20000014 	.word	0x20000014
 800849c:	14f8b589 	.word	0x14f8b589

080084a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	603b      	str	r3, [r7, #0]
 80084ac:	4613      	mov	r3, r2
 80084ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80084b0:	e025      	b.n	80084fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084b8:	d021      	beq.n	80084fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084ba:	f7fc fc2b 	bl	8004d14 <HAL_GetTick>
 80084be:	4602      	mov	r2, r0
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	1ad3      	subs	r3, r2, r3
 80084c4:	683a      	ldr	r2, [r7, #0]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d302      	bcc.n	80084d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d116      	bne.n	80084fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2200      	movs	r2, #0
 80084d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2220      	movs	r2, #32
 80084da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ea:	f043 0220 	orr.w	r2, r3, #32
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e023      	b.n	8008546 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	0c1b      	lsrs	r3, r3, #16
 8008502:	b2db      	uxtb	r3, r3
 8008504:	2b01      	cmp	r3, #1
 8008506:	d10d      	bne.n	8008524 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	43da      	mvns	r2, r3
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	4013      	ands	r3, r2
 8008514:	b29b      	uxth	r3, r3
 8008516:	2b00      	cmp	r3, #0
 8008518:	bf0c      	ite	eq
 800851a:	2301      	moveq	r3, #1
 800851c:	2300      	movne	r3, #0
 800851e:	b2db      	uxtb	r3, r3
 8008520:	461a      	mov	r2, r3
 8008522:	e00c      	b.n	800853e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	43da      	mvns	r2, r3
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	4013      	ands	r3, r2
 8008530:	b29b      	uxth	r3, r3
 8008532:	2b00      	cmp	r3, #0
 8008534:	bf0c      	ite	eq
 8008536:	2301      	moveq	r3, #1
 8008538:	2300      	movne	r3, #0
 800853a:	b2db      	uxtb	r3, r3
 800853c:	461a      	mov	r2, r3
 800853e:	79fb      	ldrb	r3, [r7, #7]
 8008540:	429a      	cmp	r2, r3
 8008542:	d0b6      	beq.n	80084b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b084      	sub	sp, #16
 8008552:	af00      	add	r7, sp, #0
 8008554:	60f8      	str	r0, [r7, #12]
 8008556:	60b9      	str	r1, [r7, #8]
 8008558:	607a      	str	r2, [r7, #4]
 800855a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800855c:	e051      	b.n	8008602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	695b      	ldr	r3, [r3, #20]
 8008564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800856c:	d123      	bne.n	80085b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800857c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008586:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2200      	movs	r2, #0
 800858c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2220      	movs	r2, #32
 8008592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a2:	f043 0204 	orr.w	r2, r3, #4
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	e046      	b.n	8008644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085bc:	d021      	beq.n	8008602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085be:	f7fc fba9 	bl	8004d14 <HAL_GetTick>
 80085c2:	4602      	mov	r2, r0
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	1ad3      	subs	r3, r2, r3
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d302      	bcc.n	80085d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d116      	bne.n	8008602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2220      	movs	r2, #32
 80085de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2200      	movs	r2, #0
 80085e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ee:	f043 0220 	orr.w	r2, r3, #32
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e020      	b.n	8008644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	0c1b      	lsrs	r3, r3, #16
 8008606:	b2db      	uxtb	r3, r3
 8008608:	2b01      	cmp	r3, #1
 800860a:	d10c      	bne.n	8008626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	695b      	ldr	r3, [r3, #20]
 8008612:	43da      	mvns	r2, r3
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	4013      	ands	r3, r2
 8008618:	b29b      	uxth	r3, r3
 800861a:	2b00      	cmp	r3, #0
 800861c:	bf14      	ite	ne
 800861e:	2301      	movne	r3, #1
 8008620:	2300      	moveq	r3, #0
 8008622:	b2db      	uxtb	r3, r3
 8008624:	e00b      	b.n	800863e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	699b      	ldr	r3, [r3, #24]
 800862c:	43da      	mvns	r2, r3
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	4013      	ands	r3, r2
 8008632:	b29b      	uxth	r3, r3
 8008634:	2b00      	cmp	r3, #0
 8008636:	bf14      	ite	ne
 8008638:	2301      	movne	r3, #1
 800863a:	2300      	moveq	r3, #0
 800863c:	b2db      	uxtb	r3, r3
 800863e:	2b00      	cmp	r3, #0
 8008640:	d18d      	bne.n	800855e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008658:	e02d      	b.n	80086b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f000 f900 	bl	8008860 <I2C_IsAcknowledgeFailed>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d001      	beq.n	800866a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e02d      	b.n	80086c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008670:	d021      	beq.n	80086b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008672:	f7fc fb4f 	bl	8004d14 <HAL_GetTick>
 8008676:	4602      	mov	r2, r0
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	429a      	cmp	r2, r3
 8008680:	d302      	bcc.n	8008688 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d116      	bne.n	80086b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2220      	movs	r2, #32
 8008692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a2:	f043 0220 	orr.w	r2, r3, #32
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e007      	b.n	80086c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	695b      	ldr	r3, [r3, #20]
 80086bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c0:	2b80      	cmp	r3, #128	; 0x80
 80086c2:	d1ca      	bne.n	800865a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b084      	sub	sp, #16
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	60f8      	str	r0, [r7, #12]
 80086d6:	60b9      	str	r1, [r7, #8]
 80086d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80086da:	e02d      	b.n	8008738 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	f000 f8bf 	bl	8008860 <I2C_IsAcknowledgeFailed>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d001      	beq.n	80086ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	e02d      	b.n	8008748 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086f2:	d021      	beq.n	8008738 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086f4:	f7fc fb0e 	bl	8004d14 <HAL_GetTick>
 80086f8:	4602      	mov	r2, r0
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	1ad3      	subs	r3, r2, r3
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	429a      	cmp	r2, r3
 8008702:	d302      	bcc.n	800870a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d116      	bne.n	8008738 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2200      	movs	r2, #0
 800870e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2220      	movs	r2, #32
 8008714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2200      	movs	r2, #0
 800871c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008724:	f043 0220 	orr.w	r2, r3, #32
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2200      	movs	r2, #0
 8008730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e007      	b.n	8008748 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	f003 0304 	and.w	r3, r3, #4
 8008742:	2b04      	cmp	r3, #4
 8008744:	d1ca      	bne.n	80086dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008758:	2300      	movs	r3, #0
 800875a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800875c:	4b13      	ldr	r3, [pc, #76]	; (80087ac <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	08db      	lsrs	r3, r3, #3
 8008762:	4a13      	ldr	r2, [pc, #76]	; (80087b0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008764:	fba2 2303 	umull	r2, r3, r2, r3
 8008768:	0a1a      	lsrs	r2, r3, #8
 800876a:	4613      	mov	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	3b01      	subs	r3, #1
 8008776:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d107      	bne.n	800878e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008782:	f043 0220 	orr.w	r2, r3, #32
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e008      	b.n	80087a0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800879c:	d0e9      	beq.n	8008772 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr
 80087ac:	20000014 	.word	0x20000014
 80087b0:	14f8b589 	.word	0x14f8b589

080087b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80087c0:	e042      	b.n	8008848 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	695b      	ldr	r3, [r3, #20]
 80087c8:	f003 0310 	and.w	r3, r3, #16
 80087cc:	2b10      	cmp	r3, #16
 80087ce:	d119      	bne.n	8008804 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f06f 0210 	mvn.w	r2, #16
 80087d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2220      	movs	r2, #32
 80087e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	e029      	b.n	8008858 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008804:	f7fc fa86 	bl	8004d14 <HAL_GetTick>
 8008808:	4602      	mov	r2, r0
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	429a      	cmp	r2, r3
 8008812:	d302      	bcc.n	800881a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d116      	bne.n	8008848 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2220      	movs	r2, #32
 8008824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008834:	f043 0220 	orr.w	r2, r3, #32
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2200      	movs	r2, #0
 8008840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	e007      	b.n	8008858 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008852:	2b40      	cmp	r3, #64	; 0x40
 8008854:	d1b5      	bne.n	80087c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	695b      	ldr	r3, [r3, #20]
 800886e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008876:	d11b      	bne.n	80088b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008880:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2220      	movs	r2, #32
 800888c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889c:	f043 0204 	orr.w	r2, r3, #4
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e000      	b.n	80088b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	370c      	adds	r7, #12
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr

080088be <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80088be:	b480      	push	{r7}
 80088c0:	b083      	sub	sp, #12
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ca:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80088ce:	d103      	bne.n	80088d8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80088d6:	e007      	b.n	80088e8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088dc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80088e0:	d102      	bne.n	80088e8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2208      	movs	r2, #8
 80088e6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80088e8:	bf00      	nop
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d101      	bne.n	8008906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e267      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 0301 	and.w	r3, r3, #1
 800890e:	2b00      	cmp	r3, #0
 8008910:	d075      	beq.n	80089fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008912:	4b88      	ldr	r3, [pc, #544]	; (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	f003 030c 	and.w	r3, r3, #12
 800891a:	2b04      	cmp	r3, #4
 800891c:	d00c      	beq.n	8008938 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800891e:	4b85      	ldr	r3, [pc, #532]	; (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008926:	2b08      	cmp	r3, #8
 8008928:	d112      	bne.n	8008950 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800892a:	4b82      	ldr	r3, [pc, #520]	; (8008b34 <HAL_RCC_OscConfig+0x240>)
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008932:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008936:	d10b      	bne.n	8008950 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008938:	4b7e      	ldr	r3, [pc, #504]	; (8008b34 <HAL_RCC_OscConfig+0x240>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008940:	2b00      	cmp	r3, #0
 8008942:	d05b      	beq.n	80089fc <HAL_RCC_OscConfig+0x108>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d157      	bne.n	80089fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	e242      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008958:	d106      	bne.n	8008968 <HAL_RCC_OscConfig+0x74>
 800895a:	4b76      	ldr	r3, [pc, #472]	; (8008b34 <HAL_RCC_OscConfig+0x240>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a75      	ldr	r2, [pc, #468]	; (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008964:	6013      	str	r3, [r2, #0]
 8008966:	e01d      	b.n	80089a4 <HAL_RCC_OscConfig+0xb0>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008970:	d10c      	bne.n	800898c <HAL_RCC_OscConfig+0x98>
 8008972:	4b70      	ldr	r3, [pc, #448]	; (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a6f      	ldr	r2, [pc, #444]	; (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800897c:	6013      	str	r3, [r2, #0]
 800897e:	4b6d      	ldr	r3, [pc, #436]	; (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a6c      	ldr	r2, [pc, #432]	; (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008988:	6013      	str	r3, [r2, #0]
 800898a:	e00b      	b.n	80089a4 <HAL_RCC_OscConfig+0xb0>
 800898c:	4b69      	ldr	r3, [pc, #420]	; (8008b34 <HAL_RCC_OscConfig+0x240>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a68      	ldr	r2, [pc, #416]	; (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008996:	6013      	str	r3, [r2, #0]
 8008998:	4b66      	ldr	r3, [pc, #408]	; (8008b34 <HAL_RCC_OscConfig+0x240>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a65      	ldr	r2, [pc, #404]	; (8008b34 <HAL_RCC_OscConfig+0x240>)
 800899e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80089a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d013      	beq.n	80089d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089ac:	f7fc f9b2 	bl	8004d14 <HAL_GetTick>
 80089b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089b2:	e008      	b.n	80089c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80089b4:	f7fc f9ae 	bl	8004d14 <HAL_GetTick>
 80089b8:	4602      	mov	r2, r0
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	1ad3      	subs	r3, r2, r3
 80089be:	2b64      	cmp	r3, #100	; 0x64
 80089c0:	d901      	bls.n	80089c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e207      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089c6:	4b5b      	ldr	r3, [pc, #364]	; (8008b34 <HAL_RCC_OscConfig+0x240>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d0f0      	beq.n	80089b4 <HAL_RCC_OscConfig+0xc0>
 80089d2:	e014      	b.n	80089fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089d4:	f7fc f99e 	bl	8004d14 <HAL_GetTick>
 80089d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089da:	e008      	b.n	80089ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80089dc:	f7fc f99a 	bl	8004d14 <HAL_GetTick>
 80089e0:	4602      	mov	r2, r0
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	2b64      	cmp	r3, #100	; 0x64
 80089e8:	d901      	bls.n	80089ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80089ea:	2303      	movs	r3, #3
 80089ec:	e1f3      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089ee:	4b51      	ldr	r3, [pc, #324]	; (8008b34 <HAL_RCC_OscConfig+0x240>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1f0      	bne.n	80089dc <HAL_RCC_OscConfig+0xe8>
 80089fa:	e000      	b.n	80089fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0302 	and.w	r3, r3, #2
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d063      	beq.n	8008ad2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008a0a:	4b4a      	ldr	r3, [pc, #296]	; (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	f003 030c 	and.w	r3, r3, #12
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d00b      	beq.n	8008a2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a16:	4b47      	ldr	r3, [pc, #284]	; (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008a1e:	2b08      	cmp	r3, #8
 8008a20:	d11c      	bne.n	8008a5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a22:	4b44      	ldr	r3, [pc, #272]	; (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d116      	bne.n	8008a5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a2e:	4b41      	ldr	r3, [pc, #260]	; (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 0302 	and.w	r3, r3, #2
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d005      	beq.n	8008a46 <HAL_RCC_OscConfig+0x152>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d001      	beq.n	8008a46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e1c7      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a46:	4b3b      	ldr	r3, [pc, #236]	; (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	00db      	lsls	r3, r3, #3
 8008a54:	4937      	ldr	r1, [pc, #220]	; (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008a56:	4313      	orrs	r3, r2
 8008a58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a5a:	e03a      	b.n	8008ad2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d020      	beq.n	8008aa6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a64:	4b34      	ldr	r3, [pc, #208]	; (8008b38 <HAL_RCC_OscConfig+0x244>)
 8008a66:	2201      	movs	r2, #1
 8008a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a6a:	f7fc f953 	bl	8004d14 <HAL_GetTick>
 8008a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a70:	e008      	b.n	8008a84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a72:	f7fc f94f 	bl	8004d14 <HAL_GetTick>
 8008a76:	4602      	mov	r2, r0
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d901      	bls.n	8008a84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008a80:	2303      	movs	r3, #3
 8008a82:	e1a8      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a84:	4b2b      	ldr	r3, [pc, #172]	; (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f003 0302 	and.w	r3, r3, #2
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d0f0      	beq.n	8008a72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a90:	4b28      	ldr	r3, [pc, #160]	; (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	00db      	lsls	r3, r3, #3
 8008a9e:	4925      	ldr	r1, [pc, #148]	; (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	600b      	str	r3, [r1, #0]
 8008aa4:	e015      	b.n	8008ad2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008aa6:	4b24      	ldr	r3, [pc, #144]	; (8008b38 <HAL_RCC_OscConfig+0x244>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aac:	f7fc f932 	bl	8004d14 <HAL_GetTick>
 8008ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ab2:	e008      	b.n	8008ac6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ab4:	f7fc f92e 	bl	8004d14 <HAL_GetTick>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d901      	bls.n	8008ac6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	e187      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ac6:	4b1b      	ldr	r3, [pc, #108]	; (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 0302 	and.w	r3, r3, #2
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1f0      	bne.n	8008ab4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 0308 	and.w	r3, r3, #8
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d036      	beq.n	8008b4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	695b      	ldr	r3, [r3, #20]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d016      	beq.n	8008b14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ae6:	4b15      	ldr	r3, [pc, #84]	; (8008b3c <HAL_RCC_OscConfig+0x248>)
 8008ae8:	2201      	movs	r2, #1
 8008aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aec:	f7fc f912 	bl	8004d14 <HAL_GetTick>
 8008af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008af2:	e008      	b.n	8008b06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008af4:	f7fc f90e 	bl	8004d14 <HAL_GetTick>
 8008af8:	4602      	mov	r2, r0
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d901      	bls.n	8008b06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008b02:	2303      	movs	r3, #3
 8008b04:	e167      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b06:	4b0b      	ldr	r3, [pc, #44]	; (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b0a:	f003 0302 	and.w	r3, r3, #2
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d0f0      	beq.n	8008af4 <HAL_RCC_OscConfig+0x200>
 8008b12:	e01b      	b.n	8008b4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b14:	4b09      	ldr	r3, [pc, #36]	; (8008b3c <HAL_RCC_OscConfig+0x248>)
 8008b16:	2200      	movs	r2, #0
 8008b18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b1a:	f7fc f8fb 	bl	8004d14 <HAL_GetTick>
 8008b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b20:	e00e      	b.n	8008b40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b22:	f7fc f8f7 	bl	8004d14 <HAL_GetTick>
 8008b26:	4602      	mov	r2, r0
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	1ad3      	subs	r3, r2, r3
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	d907      	bls.n	8008b40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008b30:	2303      	movs	r3, #3
 8008b32:	e150      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
 8008b34:	40023800 	.word	0x40023800
 8008b38:	42470000 	.word	0x42470000
 8008b3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b40:	4b88      	ldr	r3, [pc, #544]	; (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b44:	f003 0302 	and.w	r3, r3, #2
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1ea      	bne.n	8008b22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f003 0304 	and.w	r3, r3, #4
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	f000 8097 	beq.w	8008c88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b5e:	4b81      	ldr	r3, [pc, #516]	; (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d10f      	bne.n	8008b8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	60bb      	str	r3, [r7, #8]
 8008b6e:	4b7d      	ldr	r3, [pc, #500]	; (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b72:	4a7c      	ldr	r2, [pc, #496]	; (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b78:	6413      	str	r3, [r2, #64]	; 0x40
 8008b7a:	4b7a      	ldr	r3, [pc, #488]	; (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b82:	60bb      	str	r3, [r7, #8]
 8008b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b86:	2301      	movs	r3, #1
 8008b88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b8a:	4b77      	ldr	r3, [pc, #476]	; (8008d68 <HAL_RCC_OscConfig+0x474>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d118      	bne.n	8008bc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008b96:	4b74      	ldr	r3, [pc, #464]	; (8008d68 <HAL_RCC_OscConfig+0x474>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a73      	ldr	r2, [pc, #460]	; (8008d68 <HAL_RCC_OscConfig+0x474>)
 8008b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ba2:	f7fc f8b7 	bl	8004d14 <HAL_GetTick>
 8008ba6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ba8:	e008      	b.n	8008bbc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008baa:	f7fc f8b3 	bl	8004d14 <HAL_GetTick>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d901      	bls.n	8008bbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	e10c      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008bbc:	4b6a      	ldr	r3, [pc, #424]	; (8008d68 <HAL_RCC_OscConfig+0x474>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d0f0      	beq.n	8008baa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d106      	bne.n	8008bde <HAL_RCC_OscConfig+0x2ea>
 8008bd0:	4b64      	ldr	r3, [pc, #400]	; (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bd4:	4a63      	ldr	r2, [pc, #396]	; (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008bd6:	f043 0301 	orr.w	r3, r3, #1
 8008bda:	6713      	str	r3, [r2, #112]	; 0x70
 8008bdc:	e01c      	b.n	8008c18 <HAL_RCC_OscConfig+0x324>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	2b05      	cmp	r3, #5
 8008be4:	d10c      	bne.n	8008c00 <HAL_RCC_OscConfig+0x30c>
 8008be6:	4b5f      	ldr	r3, [pc, #380]	; (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bea:	4a5e      	ldr	r2, [pc, #376]	; (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008bec:	f043 0304 	orr.w	r3, r3, #4
 8008bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8008bf2:	4b5c      	ldr	r3, [pc, #368]	; (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf6:	4a5b      	ldr	r2, [pc, #364]	; (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008bf8:	f043 0301 	orr.w	r3, r3, #1
 8008bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8008bfe:	e00b      	b.n	8008c18 <HAL_RCC_OscConfig+0x324>
 8008c00:	4b58      	ldr	r3, [pc, #352]	; (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c04:	4a57      	ldr	r2, [pc, #348]	; (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008c06:	f023 0301 	bic.w	r3, r3, #1
 8008c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8008c0c:	4b55      	ldr	r3, [pc, #340]	; (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c10:	4a54      	ldr	r2, [pc, #336]	; (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008c12:	f023 0304 	bic.w	r3, r3, #4
 8008c16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d015      	beq.n	8008c4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c20:	f7fc f878 	bl	8004d14 <HAL_GetTick>
 8008c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c26:	e00a      	b.n	8008c3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c28:	f7fc f874 	bl	8004d14 <HAL_GetTick>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d901      	bls.n	8008c3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	e0cb      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c3e:	4b49      	ldr	r3, [pc, #292]	; (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c42:	f003 0302 	and.w	r3, r3, #2
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d0ee      	beq.n	8008c28 <HAL_RCC_OscConfig+0x334>
 8008c4a:	e014      	b.n	8008c76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c4c:	f7fc f862 	bl	8004d14 <HAL_GetTick>
 8008c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c52:	e00a      	b.n	8008c6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c54:	f7fc f85e 	bl	8004d14 <HAL_GetTick>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	1ad3      	subs	r3, r2, r3
 8008c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d901      	bls.n	8008c6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008c66:	2303      	movs	r3, #3
 8008c68:	e0b5      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c6a:	4b3e      	ldr	r3, [pc, #248]	; (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c6e:	f003 0302 	and.w	r3, r3, #2
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1ee      	bne.n	8008c54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008c76:	7dfb      	ldrb	r3, [r7, #23]
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d105      	bne.n	8008c88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c7c:	4b39      	ldr	r3, [pc, #228]	; (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c80:	4a38      	ldr	r2, [pc, #224]	; (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f000 80a1 	beq.w	8008dd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008c92:	4b34      	ldr	r3, [pc, #208]	; (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	f003 030c 	and.w	r3, r3, #12
 8008c9a:	2b08      	cmp	r3, #8
 8008c9c:	d05c      	beq.n	8008d58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	699b      	ldr	r3, [r3, #24]
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d141      	bne.n	8008d2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ca6:	4b31      	ldr	r3, [pc, #196]	; (8008d6c <HAL_RCC_OscConfig+0x478>)
 8008ca8:	2200      	movs	r2, #0
 8008caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cac:	f7fc f832 	bl	8004d14 <HAL_GetTick>
 8008cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cb2:	e008      	b.n	8008cc6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008cb4:	f7fc f82e 	bl	8004d14 <HAL_GetTick>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	1ad3      	subs	r3, r2, r3
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d901      	bls.n	8008cc6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008cc2:	2303      	movs	r3, #3
 8008cc4:	e087      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cc6:	4b27      	ldr	r3, [pc, #156]	; (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d1f0      	bne.n	8008cb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	69da      	ldr	r2, [r3, #28]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a1b      	ldr	r3, [r3, #32]
 8008cda:	431a      	orrs	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce0:	019b      	lsls	r3, r3, #6
 8008ce2:	431a      	orrs	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce8:	085b      	lsrs	r3, r3, #1
 8008cea:	3b01      	subs	r3, #1
 8008cec:	041b      	lsls	r3, r3, #16
 8008cee:	431a      	orrs	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf4:	061b      	lsls	r3, r3, #24
 8008cf6:	491b      	ldr	r1, [pc, #108]	; (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008cfc:	4b1b      	ldr	r3, [pc, #108]	; (8008d6c <HAL_RCC_OscConfig+0x478>)
 8008cfe:	2201      	movs	r2, #1
 8008d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d02:	f7fc f807 	bl	8004d14 <HAL_GetTick>
 8008d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d08:	e008      	b.n	8008d1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d0a:	f7fc f803 	bl	8004d14 <HAL_GetTick>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	1ad3      	subs	r3, r2, r3
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	d901      	bls.n	8008d1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	e05c      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d1c:	4b11      	ldr	r3, [pc, #68]	; (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d0f0      	beq.n	8008d0a <HAL_RCC_OscConfig+0x416>
 8008d28:	e054      	b.n	8008dd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d2a:	4b10      	ldr	r3, [pc, #64]	; (8008d6c <HAL_RCC_OscConfig+0x478>)
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d30:	f7fb fff0 	bl	8004d14 <HAL_GetTick>
 8008d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d36:	e008      	b.n	8008d4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d38:	f7fb ffec 	bl	8004d14 <HAL_GetTick>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d901      	bls.n	8008d4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008d46:	2303      	movs	r3, #3
 8008d48:	e045      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d4a:	4b06      	ldr	r3, [pc, #24]	; (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1f0      	bne.n	8008d38 <HAL_RCC_OscConfig+0x444>
 8008d56:	e03d      	b.n	8008dd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	699b      	ldr	r3, [r3, #24]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d107      	bne.n	8008d70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008d60:	2301      	movs	r3, #1
 8008d62:	e038      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
 8008d64:	40023800 	.word	0x40023800
 8008d68:	40007000 	.word	0x40007000
 8008d6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008d70:	4b1b      	ldr	r3, [pc, #108]	; (8008de0 <HAL_RCC_OscConfig+0x4ec>)
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	699b      	ldr	r3, [r3, #24]
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d028      	beq.n	8008dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d121      	bne.n	8008dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d11a      	bne.n	8008dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008da0:	4013      	ands	r3, r2
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008da6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d111      	bne.n	8008dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db6:	085b      	lsrs	r3, r3, #1
 8008db8:	3b01      	subs	r3, #1
 8008dba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d107      	bne.n	8008dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d001      	beq.n	8008dd4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e000      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3718      	adds	r7, #24
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	40023800 	.word	0x40023800

08008de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d101      	bne.n	8008df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	e0cc      	b.n	8008f92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008df8:	4b68      	ldr	r3, [pc, #416]	; (8008f9c <HAL_RCC_ClockConfig+0x1b8>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0307 	and.w	r3, r3, #7
 8008e00:	683a      	ldr	r2, [r7, #0]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d90c      	bls.n	8008e20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e06:	4b65      	ldr	r3, [pc, #404]	; (8008f9c <HAL_RCC_ClockConfig+0x1b8>)
 8008e08:	683a      	ldr	r2, [r7, #0]
 8008e0a:	b2d2      	uxtb	r2, r2
 8008e0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e0e:	4b63      	ldr	r3, [pc, #396]	; (8008f9c <HAL_RCC_ClockConfig+0x1b8>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f003 0307 	and.w	r3, r3, #7
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d001      	beq.n	8008e20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e0b8      	b.n	8008f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f003 0302 	and.w	r3, r3, #2
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d020      	beq.n	8008e6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 0304 	and.w	r3, r3, #4
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d005      	beq.n	8008e44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008e38:	4b59      	ldr	r3, [pc, #356]	; (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	4a58      	ldr	r2, [pc, #352]	; (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008e3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008e42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f003 0308 	and.w	r3, r3, #8
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d005      	beq.n	8008e5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008e50:	4b53      	ldr	r3, [pc, #332]	; (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	4a52      	ldr	r2, [pc, #328]	; (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008e56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008e5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e5c:	4b50      	ldr	r3, [pc, #320]	; (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	494d      	ldr	r1, [pc, #308]	; (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d044      	beq.n	8008f04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d107      	bne.n	8008e92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e82:	4b47      	ldr	r3, [pc, #284]	; (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d119      	bne.n	8008ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e07f      	b.n	8008f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	d003      	beq.n	8008ea2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e9e:	2b03      	cmp	r3, #3
 8008ea0:	d107      	bne.n	8008eb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ea2:	4b3f      	ldr	r3, [pc, #252]	; (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d109      	bne.n	8008ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e06f      	b.n	8008f92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008eb2:	4b3b      	ldr	r3, [pc, #236]	; (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f003 0302 	and.w	r3, r3, #2
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d101      	bne.n	8008ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e067      	b.n	8008f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008ec2:	4b37      	ldr	r3, [pc, #220]	; (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	f023 0203 	bic.w	r2, r3, #3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	4934      	ldr	r1, [pc, #208]	; (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008ed4:	f7fb ff1e 	bl	8004d14 <HAL_GetTick>
 8008ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008eda:	e00a      	b.n	8008ef2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008edc:	f7fb ff1a 	bl	8004d14 <HAL_GetTick>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d901      	bls.n	8008ef2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e04f      	b.n	8008f92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ef2:	4b2b      	ldr	r3, [pc, #172]	; (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	f003 020c 	and.w	r2, r3, #12
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d1eb      	bne.n	8008edc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008f04:	4b25      	ldr	r3, [pc, #148]	; (8008f9c <HAL_RCC_ClockConfig+0x1b8>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 0307 	and.w	r3, r3, #7
 8008f0c:	683a      	ldr	r2, [r7, #0]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d20c      	bcs.n	8008f2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f12:	4b22      	ldr	r3, [pc, #136]	; (8008f9c <HAL_RCC_ClockConfig+0x1b8>)
 8008f14:	683a      	ldr	r2, [r7, #0]
 8008f16:	b2d2      	uxtb	r2, r2
 8008f18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f1a:	4b20      	ldr	r3, [pc, #128]	; (8008f9c <HAL_RCC_ClockConfig+0x1b8>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f003 0307 	and.w	r3, r3, #7
 8008f22:	683a      	ldr	r2, [r7, #0]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d001      	beq.n	8008f2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e032      	b.n	8008f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f003 0304 	and.w	r3, r3, #4
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d008      	beq.n	8008f4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008f38:	4b19      	ldr	r3, [pc, #100]	; (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	4916      	ldr	r1, [pc, #88]	; (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f46:	4313      	orrs	r3, r2
 8008f48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f003 0308 	and.w	r3, r3, #8
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d009      	beq.n	8008f6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008f56:	4b12      	ldr	r3, [pc, #72]	; (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	00db      	lsls	r3, r3, #3
 8008f64:	490e      	ldr	r1, [pc, #56]	; (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f66:	4313      	orrs	r3, r2
 8008f68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008f6a:	f000 f821 	bl	8008fb0 <HAL_RCC_GetSysClockFreq>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	4b0b      	ldr	r3, [pc, #44]	; (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	091b      	lsrs	r3, r3, #4
 8008f76:	f003 030f 	and.w	r3, r3, #15
 8008f7a:	490a      	ldr	r1, [pc, #40]	; (8008fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8008f7c:	5ccb      	ldrb	r3, [r1, r3]
 8008f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8008f82:	4a09      	ldr	r2, [pc, #36]	; (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008f86:	4b09      	ldr	r3, [pc, #36]	; (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7fb fae0 	bl	8004550 <HAL_InitTick>

  return HAL_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	40023c00 	.word	0x40023c00
 8008fa0:	40023800 	.word	0x40023800
 8008fa4:	0801b78c 	.word	0x0801b78c
 8008fa8:	20000014 	.word	0x20000014
 8008fac:	2000002c 	.word	0x2000002c

08008fb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fb4:	b094      	sub	sp, #80	; 0x50
 8008fb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	647b      	str	r3, [r7, #68]	; 0x44
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008fc8:	4b79      	ldr	r3, [pc, #484]	; (80091b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	f003 030c 	and.w	r3, r3, #12
 8008fd0:	2b08      	cmp	r3, #8
 8008fd2:	d00d      	beq.n	8008ff0 <HAL_RCC_GetSysClockFreq+0x40>
 8008fd4:	2b08      	cmp	r3, #8
 8008fd6:	f200 80e1 	bhi.w	800919c <HAL_RCC_GetSysClockFreq+0x1ec>
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d002      	beq.n	8008fe4 <HAL_RCC_GetSysClockFreq+0x34>
 8008fde:	2b04      	cmp	r3, #4
 8008fe0:	d003      	beq.n	8008fea <HAL_RCC_GetSysClockFreq+0x3a>
 8008fe2:	e0db      	b.n	800919c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008fe4:	4b73      	ldr	r3, [pc, #460]	; (80091b4 <HAL_RCC_GetSysClockFreq+0x204>)
 8008fe6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008fe8:	e0db      	b.n	80091a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008fea:	4b73      	ldr	r3, [pc, #460]	; (80091b8 <HAL_RCC_GetSysClockFreq+0x208>)
 8008fec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008fee:	e0d8      	b.n	80091a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ff0:	4b6f      	ldr	r3, [pc, #444]	; (80091b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ff8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008ffa:	4b6d      	ldr	r3, [pc, #436]	; (80091b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009002:	2b00      	cmp	r3, #0
 8009004:	d063      	beq.n	80090ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009006:	4b6a      	ldr	r3, [pc, #424]	; (80091b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	099b      	lsrs	r3, r3, #6
 800900c:	2200      	movs	r2, #0
 800900e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009010:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009018:	633b      	str	r3, [r7, #48]	; 0x30
 800901a:	2300      	movs	r3, #0
 800901c:	637b      	str	r3, [r7, #52]	; 0x34
 800901e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009022:	4622      	mov	r2, r4
 8009024:	462b      	mov	r3, r5
 8009026:	f04f 0000 	mov.w	r0, #0
 800902a:	f04f 0100 	mov.w	r1, #0
 800902e:	0159      	lsls	r1, r3, #5
 8009030:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009034:	0150      	lsls	r0, r2, #5
 8009036:	4602      	mov	r2, r0
 8009038:	460b      	mov	r3, r1
 800903a:	4621      	mov	r1, r4
 800903c:	1a51      	subs	r1, r2, r1
 800903e:	6139      	str	r1, [r7, #16]
 8009040:	4629      	mov	r1, r5
 8009042:	eb63 0301 	sbc.w	r3, r3, r1
 8009046:	617b      	str	r3, [r7, #20]
 8009048:	f04f 0200 	mov.w	r2, #0
 800904c:	f04f 0300 	mov.w	r3, #0
 8009050:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009054:	4659      	mov	r1, fp
 8009056:	018b      	lsls	r3, r1, #6
 8009058:	4651      	mov	r1, sl
 800905a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800905e:	4651      	mov	r1, sl
 8009060:	018a      	lsls	r2, r1, #6
 8009062:	4651      	mov	r1, sl
 8009064:	ebb2 0801 	subs.w	r8, r2, r1
 8009068:	4659      	mov	r1, fp
 800906a:	eb63 0901 	sbc.w	r9, r3, r1
 800906e:	f04f 0200 	mov.w	r2, #0
 8009072:	f04f 0300 	mov.w	r3, #0
 8009076:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800907a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800907e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009082:	4690      	mov	r8, r2
 8009084:	4699      	mov	r9, r3
 8009086:	4623      	mov	r3, r4
 8009088:	eb18 0303 	adds.w	r3, r8, r3
 800908c:	60bb      	str	r3, [r7, #8]
 800908e:	462b      	mov	r3, r5
 8009090:	eb49 0303 	adc.w	r3, r9, r3
 8009094:	60fb      	str	r3, [r7, #12]
 8009096:	f04f 0200 	mov.w	r2, #0
 800909a:	f04f 0300 	mov.w	r3, #0
 800909e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80090a2:	4629      	mov	r1, r5
 80090a4:	024b      	lsls	r3, r1, #9
 80090a6:	4621      	mov	r1, r4
 80090a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80090ac:	4621      	mov	r1, r4
 80090ae:	024a      	lsls	r2, r1, #9
 80090b0:	4610      	mov	r0, r2
 80090b2:	4619      	mov	r1, r3
 80090b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090b6:	2200      	movs	r2, #0
 80090b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80090ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80090c0:	f7f7 fdec 	bl	8000c9c <__aeabi_uldivmod>
 80090c4:	4602      	mov	r2, r0
 80090c6:	460b      	mov	r3, r1
 80090c8:	4613      	mov	r3, r2
 80090ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090cc:	e058      	b.n	8009180 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80090ce:	4b38      	ldr	r3, [pc, #224]	; (80091b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	099b      	lsrs	r3, r3, #6
 80090d4:	2200      	movs	r2, #0
 80090d6:	4618      	mov	r0, r3
 80090d8:	4611      	mov	r1, r2
 80090da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80090de:	623b      	str	r3, [r7, #32]
 80090e0:	2300      	movs	r3, #0
 80090e2:	627b      	str	r3, [r7, #36]	; 0x24
 80090e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80090e8:	4642      	mov	r2, r8
 80090ea:	464b      	mov	r3, r9
 80090ec:	f04f 0000 	mov.w	r0, #0
 80090f0:	f04f 0100 	mov.w	r1, #0
 80090f4:	0159      	lsls	r1, r3, #5
 80090f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80090fa:	0150      	lsls	r0, r2, #5
 80090fc:	4602      	mov	r2, r0
 80090fe:	460b      	mov	r3, r1
 8009100:	4641      	mov	r1, r8
 8009102:	ebb2 0a01 	subs.w	sl, r2, r1
 8009106:	4649      	mov	r1, r9
 8009108:	eb63 0b01 	sbc.w	fp, r3, r1
 800910c:	f04f 0200 	mov.w	r2, #0
 8009110:	f04f 0300 	mov.w	r3, #0
 8009114:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009118:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800911c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009120:	ebb2 040a 	subs.w	r4, r2, sl
 8009124:	eb63 050b 	sbc.w	r5, r3, fp
 8009128:	f04f 0200 	mov.w	r2, #0
 800912c:	f04f 0300 	mov.w	r3, #0
 8009130:	00eb      	lsls	r3, r5, #3
 8009132:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009136:	00e2      	lsls	r2, r4, #3
 8009138:	4614      	mov	r4, r2
 800913a:	461d      	mov	r5, r3
 800913c:	4643      	mov	r3, r8
 800913e:	18e3      	adds	r3, r4, r3
 8009140:	603b      	str	r3, [r7, #0]
 8009142:	464b      	mov	r3, r9
 8009144:	eb45 0303 	adc.w	r3, r5, r3
 8009148:	607b      	str	r3, [r7, #4]
 800914a:	f04f 0200 	mov.w	r2, #0
 800914e:	f04f 0300 	mov.w	r3, #0
 8009152:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009156:	4629      	mov	r1, r5
 8009158:	028b      	lsls	r3, r1, #10
 800915a:	4621      	mov	r1, r4
 800915c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009160:	4621      	mov	r1, r4
 8009162:	028a      	lsls	r2, r1, #10
 8009164:	4610      	mov	r0, r2
 8009166:	4619      	mov	r1, r3
 8009168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800916a:	2200      	movs	r2, #0
 800916c:	61bb      	str	r3, [r7, #24]
 800916e:	61fa      	str	r2, [r7, #28]
 8009170:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009174:	f7f7 fd92 	bl	8000c9c <__aeabi_uldivmod>
 8009178:	4602      	mov	r2, r0
 800917a:	460b      	mov	r3, r1
 800917c:	4613      	mov	r3, r2
 800917e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009180:	4b0b      	ldr	r3, [pc, #44]	; (80091b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	0c1b      	lsrs	r3, r3, #16
 8009186:	f003 0303 	and.w	r3, r3, #3
 800918a:	3301      	adds	r3, #1
 800918c:	005b      	lsls	r3, r3, #1
 800918e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009190:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009194:	fbb2 f3f3 	udiv	r3, r2, r3
 8009198:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800919a:	e002      	b.n	80091a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800919c:	4b05      	ldr	r3, [pc, #20]	; (80091b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800919e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80091a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80091a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3750      	adds	r7, #80	; 0x50
 80091a8:	46bd      	mov	sp, r7
 80091aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091ae:	bf00      	nop
 80091b0:	40023800 	.word	0x40023800
 80091b4:	00f42400 	.word	0x00f42400
 80091b8:	007a1200 	.word	0x007a1200

080091bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091bc:	b480      	push	{r7}
 80091be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80091c0:	4b03      	ldr	r3, [pc, #12]	; (80091d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80091c2:	681b      	ldr	r3, [r3, #0]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop
 80091d0:	20000014 	.word	0x20000014

080091d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80091d8:	f7ff fff0 	bl	80091bc <HAL_RCC_GetHCLKFreq>
 80091dc:	4602      	mov	r2, r0
 80091de:	4b05      	ldr	r3, [pc, #20]	; (80091f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	0a9b      	lsrs	r3, r3, #10
 80091e4:	f003 0307 	and.w	r3, r3, #7
 80091e8:	4903      	ldr	r1, [pc, #12]	; (80091f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80091ea:	5ccb      	ldrb	r3, [r1, r3]
 80091ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	40023800 	.word	0x40023800
 80091f8:	0801b79c 	.word	0x0801b79c

080091fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009200:	f7ff ffdc 	bl	80091bc <HAL_RCC_GetHCLKFreq>
 8009204:	4602      	mov	r2, r0
 8009206:	4b05      	ldr	r3, [pc, #20]	; (800921c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	0b5b      	lsrs	r3, r3, #13
 800920c:	f003 0307 	and.w	r3, r3, #7
 8009210:	4903      	ldr	r1, [pc, #12]	; (8009220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009212:	5ccb      	ldrb	r3, [r1, r3]
 8009214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009218:	4618      	mov	r0, r3
 800921a:	bd80      	pop	{r7, pc}
 800921c:	40023800 	.word	0x40023800
 8009220:	0801b79c 	.word	0x0801b79c

08009224 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	220f      	movs	r2, #15
 8009232:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009234:	4b12      	ldr	r3, [pc, #72]	; (8009280 <HAL_RCC_GetClockConfig+0x5c>)
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	f003 0203 	and.w	r2, r3, #3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009240:	4b0f      	ldr	r3, [pc, #60]	; (8009280 <HAL_RCC_GetClockConfig+0x5c>)
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800924c:	4b0c      	ldr	r3, [pc, #48]	; (8009280 <HAL_RCC_GetClockConfig+0x5c>)
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009258:	4b09      	ldr	r3, [pc, #36]	; (8009280 <HAL_RCC_GetClockConfig+0x5c>)
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	08db      	lsrs	r3, r3, #3
 800925e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009266:	4b07      	ldr	r3, [pc, #28]	; (8009284 <HAL_RCC_GetClockConfig+0x60>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f003 0207 	and.w	r2, r3, #7
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	601a      	str	r2, [r3, #0]
}
 8009272:	bf00      	nop
 8009274:	370c      	adds	r7, #12
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	40023800 	.word	0x40023800
 8009284:	40023c00 	.word	0x40023c00

08009288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d101      	bne.n	800929a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	e041      	b.n	800931e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d106      	bne.n	80092b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 f839 	bl	8009326 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2202      	movs	r2, #2
 80092b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	3304      	adds	r3, #4
 80092c4:	4619      	mov	r1, r3
 80092c6:	4610      	mov	r0, r2
 80092c8:	f000 fc7a 	bl	8009bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2201      	movs	r2, #1
 8009310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009326:	b480      	push	{r7}
 8009328:	b083      	sub	sp, #12
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800932e:	bf00      	nop
 8009330:	370c      	adds	r7, #12
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
	...

0800933c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800934a:	b2db      	uxtb	r3, r3
 800934c:	2b01      	cmp	r3, #1
 800934e:	d001      	beq.n	8009354 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	e044      	b.n	80093de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2202      	movs	r2, #2
 8009358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	68da      	ldr	r2, [r3, #12]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f042 0201 	orr.w	r2, r2, #1
 800936a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a1e      	ldr	r2, [pc, #120]	; (80093ec <HAL_TIM_Base_Start_IT+0xb0>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d018      	beq.n	80093a8 <HAL_TIM_Base_Start_IT+0x6c>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800937e:	d013      	beq.n	80093a8 <HAL_TIM_Base_Start_IT+0x6c>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a1a      	ldr	r2, [pc, #104]	; (80093f0 <HAL_TIM_Base_Start_IT+0xb4>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d00e      	beq.n	80093a8 <HAL_TIM_Base_Start_IT+0x6c>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a19      	ldr	r2, [pc, #100]	; (80093f4 <HAL_TIM_Base_Start_IT+0xb8>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d009      	beq.n	80093a8 <HAL_TIM_Base_Start_IT+0x6c>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a17      	ldr	r2, [pc, #92]	; (80093f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d004      	beq.n	80093a8 <HAL_TIM_Base_Start_IT+0x6c>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a16      	ldr	r2, [pc, #88]	; (80093fc <HAL_TIM_Base_Start_IT+0xc0>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d111      	bne.n	80093cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	f003 0307 	and.w	r3, r3, #7
 80093b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2b06      	cmp	r3, #6
 80093b8:	d010      	beq.n	80093dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f042 0201 	orr.w	r2, r2, #1
 80093c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093ca:	e007      	b.n	80093dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f042 0201 	orr.w	r2, r2, #1
 80093da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80093dc:	2300      	movs	r3, #0
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3714      	adds	r7, #20
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr
 80093ea:	bf00      	nop
 80093ec:	40010000 	.word	0x40010000
 80093f0:	40000400 	.word	0x40000400
 80093f4:	40000800 	.word	0x40000800
 80093f8:	40000c00 	.word	0x40000c00
 80093fc:	40014000 	.word	0x40014000

08009400 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d109      	bne.n	8009424 <HAL_TIM_PWM_Start+0x24>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009416:	b2db      	uxtb	r3, r3
 8009418:	2b01      	cmp	r3, #1
 800941a:	bf14      	ite	ne
 800941c:	2301      	movne	r3, #1
 800941e:	2300      	moveq	r3, #0
 8009420:	b2db      	uxtb	r3, r3
 8009422:	e022      	b.n	800946a <HAL_TIM_PWM_Start+0x6a>
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	2b04      	cmp	r3, #4
 8009428:	d109      	bne.n	800943e <HAL_TIM_PWM_Start+0x3e>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009430:	b2db      	uxtb	r3, r3
 8009432:	2b01      	cmp	r3, #1
 8009434:	bf14      	ite	ne
 8009436:	2301      	movne	r3, #1
 8009438:	2300      	moveq	r3, #0
 800943a:	b2db      	uxtb	r3, r3
 800943c:	e015      	b.n	800946a <HAL_TIM_PWM_Start+0x6a>
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	2b08      	cmp	r3, #8
 8009442:	d109      	bne.n	8009458 <HAL_TIM_PWM_Start+0x58>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800944a:	b2db      	uxtb	r3, r3
 800944c:	2b01      	cmp	r3, #1
 800944e:	bf14      	ite	ne
 8009450:	2301      	movne	r3, #1
 8009452:	2300      	moveq	r3, #0
 8009454:	b2db      	uxtb	r3, r3
 8009456:	e008      	b.n	800946a <HAL_TIM_PWM_Start+0x6a>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800945e:	b2db      	uxtb	r3, r3
 8009460:	2b01      	cmp	r3, #1
 8009462:	bf14      	ite	ne
 8009464:	2301      	movne	r3, #1
 8009466:	2300      	moveq	r3, #0
 8009468:	b2db      	uxtb	r3, r3
 800946a:	2b00      	cmp	r3, #0
 800946c:	d001      	beq.n	8009472 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800946e:	2301      	movs	r3, #1
 8009470:	e068      	b.n	8009544 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d104      	bne.n	8009482 <HAL_TIM_PWM_Start+0x82>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2202      	movs	r2, #2
 800947c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009480:	e013      	b.n	80094aa <HAL_TIM_PWM_Start+0xaa>
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	2b04      	cmp	r3, #4
 8009486:	d104      	bne.n	8009492 <HAL_TIM_PWM_Start+0x92>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2202      	movs	r2, #2
 800948c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009490:	e00b      	b.n	80094aa <HAL_TIM_PWM_Start+0xaa>
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	2b08      	cmp	r3, #8
 8009496:	d104      	bne.n	80094a2 <HAL_TIM_PWM_Start+0xa2>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2202      	movs	r2, #2
 800949c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80094a0:	e003      	b.n	80094aa <HAL_TIM_PWM_Start+0xaa>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2202      	movs	r2, #2
 80094a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2201      	movs	r2, #1
 80094b0:	6839      	ldr	r1, [r7, #0]
 80094b2:	4618      	mov	r0, r3
 80094b4:	f000 fd90 	bl	8009fd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a23      	ldr	r2, [pc, #140]	; (800954c <HAL_TIM_PWM_Start+0x14c>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d107      	bne.n	80094d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a1d      	ldr	r2, [pc, #116]	; (800954c <HAL_TIM_PWM_Start+0x14c>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d018      	beq.n	800950e <HAL_TIM_PWM_Start+0x10e>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094e4:	d013      	beq.n	800950e <HAL_TIM_PWM_Start+0x10e>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a19      	ldr	r2, [pc, #100]	; (8009550 <HAL_TIM_PWM_Start+0x150>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d00e      	beq.n	800950e <HAL_TIM_PWM_Start+0x10e>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a17      	ldr	r2, [pc, #92]	; (8009554 <HAL_TIM_PWM_Start+0x154>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d009      	beq.n	800950e <HAL_TIM_PWM_Start+0x10e>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a16      	ldr	r2, [pc, #88]	; (8009558 <HAL_TIM_PWM_Start+0x158>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d004      	beq.n	800950e <HAL_TIM_PWM_Start+0x10e>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a14      	ldr	r2, [pc, #80]	; (800955c <HAL_TIM_PWM_Start+0x15c>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d111      	bne.n	8009532 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	f003 0307 	and.w	r3, r3, #7
 8009518:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2b06      	cmp	r3, #6
 800951e:	d010      	beq.n	8009542 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f042 0201 	orr.w	r2, r2, #1
 800952e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009530:	e007      	b.n	8009542 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f042 0201 	orr.w	r2, r2, #1
 8009540:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3710      	adds	r7, #16
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	40010000 	.word	0x40010000
 8009550:	40000400 	.word	0x40000400
 8009554:	40000800 	.word	0x40000800
 8009558:	40000c00 	.word	0x40000c00
 800955c:	40014000 	.word	0x40014000

08009560 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b086      	sub	sp, #24
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d101      	bne.n	8009574 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009570:	2301      	movs	r3, #1
 8009572:	e097      	b.n	80096a4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800957a:	b2db      	uxtb	r3, r3
 800957c:	2b00      	cmp	r3, #0
 800957e:	d106      	bne.n	800958e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 f88f 	bl	80096ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2202      	movs	r2, #2
 8009592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	6812      	ldr	r2, [r2, #0]
 80095a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095a4:	f023 0307 	bic.w	r3, r3, #7
 80095a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	3304      	adds	r3, #4
 80095b2:	4619      	mov	r1, r3
 80095b4:	4610      	mov	r0, r2
 80095b6:	f000 fb03 	bl	8009bc0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	699b      	ldr	r3, [r3, #24]
 80095c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	6a1b      	ldr	r3, [r3, #32]
 80095d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	697a      	ldr	r2, [r7, #20]
 80095d8:	4313      	orrs	r3, r2
 80095da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095e2:	f023 0303 	bic.w	r3, r3, #3
 80095e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	689a      	ldr	r2, [r3, #8]
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	699b      	ldr	r3, [r3, #24]
 80095f0:	021b      	lsls	r3, r3, #8
 80095f2:	4313      	orrs	r3, r2
 80095f4:	693a      	ldr	r2, [r7, #16]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009600:	f023 030c 	bic.w	r3, r3, #12
 8009604:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800960c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009610:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	68da      	ldr	r2, [r3, #12]
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	69db      	ldr	r3, [r3, #28]
 800961a:	021b      	lsls	r3, r3, #8
 800961c:	4313      	orrs	r3, r2
 800961e:	693a      	ldr	r2, [r7, #16]
 8009620:	4313      	orrs	r3, r2
 8009622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	691b      	ldr	r3, [r3, #16]
 8009628:	011a      	lsls	r2, r3, #4
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	6a1b      	ldr	r3, [r3, #32]
 800962e:	031b      	lsls	r3, r3, #12
 8009630:	4313      	orrs	r3, r2
 8009632:	693a      	ldr	r2, [r7, #16]
 8009634:	4313      	orrs	r3, r2
 8009636:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800963e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009646:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	685a      	ldr	r2, [r3, #4]
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	695b      	ldr	r3, [r3, #20]
 8009650:	011b      	lsls	r3, r3, #4
 8009652:	4313      	orrs	r3, r2
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	4313      	orrs	r3, r2
 8009658:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	697a      	ldr	r2, [r7, #20]
 8009660:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	693a      	ldr	r2, [r7, #16]
 8009668:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2201      	movs	r2, #1
 8009676:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2201      	movs	r2, #1
 800967e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2201      	movs	r2, #1
 8009686:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2201      	movs	r2, #1
 800968e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2201      	movs	r2, #1
 8009696:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2201      	movs	r2, #1
 800969e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096a2:	2300      	movs	r3, #0
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3718      	adds	r7, #24
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 80096b4:	bf00      	nop
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096d0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80096d8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80096e0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80096e8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d110      	bne.n	8009712 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80096f0:	7bfb      	ldrb	r3, [r7, #15]
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d102      	bne.n	80096fc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80096f6:	7b7b      	ldrb	r3, [r7, #13]
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d001      	beq.n	8009700 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80096fc:	2301      	movs	r3, #1
 80096fe:	e069      	b.n	80097d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2202      	movs	r2, #2
 8009704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2202      	movs	r2, #2
 800970c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009710:	e031      	b.n	8009776 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	2b04      	cmp	r3, #4
 8009716:	d110      	bne.n	800973a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009718:	7bbb      	ldrb	r3, [r7, #14]
 800971a:	2b01      	cmp	r3, #1
 800971c:	d102      	bne.n	8009724 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800971e:	7b3b      	ldrb	r3, [r7, #12]
 8009720:	2b01      	cmp	r3, #1
 8009722:	d001      	beq.n	8009728 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	e055      	b.n	80097d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2202      	movs	r2, #2
 800972c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2202      	movs	r2, #2
 8009734:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009738:	e01d      	b.n	8009776 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800973a:	7bfb      	ldrb	r3, [r7, #15]
 800973c:	2b01      	cmp	r3, #1
 800973e:	d108      	bne.n	8009752 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009740:	7bbb      	ldrb	r3, [r7, #14]
 8009742:	2b01      	cmp	r3, #1
 8009744:	d105      	bne.n	8009752 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009746:	7b7b      	ldrb	r3, [r7, #13]
 8009748:	2b01      	cmp	r3, #1
 800974a:	d102      	bne.n	8009752 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800974c:	7b3b      	ldrb	r3, [r7, #12]
 800974e:	2b01      	cmp	r3, #1
 8009750:	d001      	beq.n	8009756 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	e03e      	b.n	80097d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2202      	movs	r2, #2
 800975a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2202      	movs	r2, #2
 8009762:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2202      	movs	r2, #2
 800976a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2202      	movs	r2, #2
 8009772:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d003      	beq.n	8009784 <HAL_TIM_Encoder_Start+0xc4>
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	2b04      	cmp	r3, #4
 8009780:	d008      	beq.n	8009794 <HAL_TIM_Encoder_Start+0xd4>
 8009782:	e00f      	b.n	80097a4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2201      	movs	r2, #1
 800978a:	2100      	movs	r1, #0
 800978c:	4618      	mov	r0, r3
 800978e:	f000 fc23 	bl	8009fd8 <TIM_CCxChannelCmd>
      break;
 8009792:	e016      	b.n	80097c2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2201      	movs	r2, #1
 800979a:	2104      	movs	r1, #4
 800979c:	4618      	mov	r0, r3
 800979e:	f000 fc1b 	bl	8009fd8 <TIM_CCxChannelCmd>
      break;
 80097a2:	e00e      	b.n	80097c2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2201      	movs	r2, #1
 80097aa:	2100      	movs	r1, #0
 80097ac:	4618      	mov	r0, r3
 80097ae:	f000 fc13 	bl	8009fd8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2201      	movs	r2, #1
 80097b8:	2104      	movs	r1, #4
 80097ba:	4618      	mov	r0, r3
 80097bc:	f000 fc0c 	bl	8009fd8 <TIM_CCxChannelCmd>
      break;
 80097c0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f042 0201 	orr.w	r2, r2, #1
 80097d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	f003 0302 	and.w	r3, r3, #2
 80097ee:	2b02      	cmp	r3, #2
 80097f0:	d122      	bne.n	8009838 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	f003 0302 	and.w	r3, r3, #2
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	d11b      	bne.n	8009838 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f06f 0202 	mvn.w	r2, #2
 8009808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2201      	movs	r2, #1
 800980e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	699b      	ldr	r3, [r3, #24]
 8009816:	f003 0303 	and.w	r3, r3, #3
 800981a:	2b00      	cmp	r3, #0
 800981c:	d003      	beq.n	8009826 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 f9b0 	bl	8009b84 <HAL_TIM_IC_CaptureCallback>
 8009824:	e005      	b.n	8009832 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 f9a2 	bl	8009b70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 f9b3 	bl	8009b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	691b      	ldr	r3, [r3, #16]
 800983e:	f003 0304 	and.w	r3, r3, #4
 8009842:	2b04      	cmp	r3, #4
 8009844:	d122      	bne.n	800988c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	f003 0304 	and.w	r3, r3, #4
 8009850:	2b04      	cmp	r3, #4
 8009852:	d11b      	bne.n	800988c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f06f 0204 	mvn.w	r2, #4
 800985c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2202      	movs	r2, #2
 8009862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	699b      	ldr	r3, [r3, #24]
 800986a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800986e:	2b00      	cmp	r3, #0
 8009870:	d003      	beq.n	800987a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 f986 	bl	8009b84 <HAL_TIM_IC_CaptureCallback>
 8009878:	e005      	b.n	8009886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 f978 	bl	8009b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 f989 	bl	8009b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	f003 0308 	and.w	r3, r3, #8
 8009896:	2b08      	cmp	r3, #8
 8009898:	d122      	bne.n	80098e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	f003 0308 	and.w	r3, r3, #8
 80098a4:	2b08      	cmp	r3, #8
 80098a6:	d11b      	bne.n	80098e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f06f 0208 	mvn.w	r2, #8
 80098b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2204      	movs	r2, #4
 80098b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	69db      	ldr	r3, [r3, #28]
 80098be:	f003 0303 	and.w	r3, r3, #3
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d003      	beq.n	80098ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f95c 	bl	8009b84 <HAL_TIM_IC_CaptureCallback>
 80098cc:	e005      	b.n	80098da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 f94e 	bl	8009b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 f95f 	bl	8009b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	691b      	ldr	r3, [r3, #16]
 80098e6:	f003 0310 	and.w	r3, r3, #16
 80098ea:	2b10      	cmp	r3, #16
 80098ec:	d122      	bne.n	8009934 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	f003 0310 	and.w	r3, r3, #16
 80098f8:	2b10      	cmp	r3, #16
 80098fa:	d11b      	bne.n	8009934 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f06f 0210 	mvn.w	r2, #16
 8009904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2208      	movs	r2, #8
 800990a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	69db      	ldr	r3, [r3, #28]
 8009912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009916:	2b00      	cmp	r3, #0
 8009918:	d003      	beq.n	8009922 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 f932 	bl	8009b84 <HAL_TIM_IC_CaptureCallback>
 8009920:	e005      	b.n	800992e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 f924 	bl	8009b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 f935 	bl	8009b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2200      	movs	r2, #0
 8009932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	691b      	ldr	r3, [r3, #16]
 800993a:	f003 0301 	and.w	r3, r3, #1
 800993e:	2b01      	cmp	r3, #1
 8009940:	d10e      	bne.n	8009960 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	f003 0301 	and.w	r3, r3, #1
 800994c:	2b01      	cmp	r3, #1
 800994e:	d107      	bne.n	8009960 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f06f 0201 	mvn.w	r2, #1
 8009958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f7f9 fdf8 	bl	8003550 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	691b      	ldr	r3, [r3, #16]
 8009966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800996a:	2b80      	cmp	r3, #128	; 0x80
 800996c:	d10e      	bne.n	800998c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009978:	2b80      	cmp	r3, #128	; 0x80
 800997a:	d107      	bne.n	800998c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 fb55 	bl	800a036 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009996:	2b40      	cmp	r3, #64	; 0x40
 8009998:	d10e      	bne.n	80099b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099a4:	2b40      	cmp	r3, #64	; 0x40
 80099a6:	d107      	bne.n	80099b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80099b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 f8fa 	bl	8009bac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	f003 0320 	and.w	r3, r3, #32
 80099c2:	2b20      	cmp	r3, #32
 80099c4:	d10e      	bne.n	80099e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	f003 0320 	and.w	r3, r3, #32
 80099d0:	2b20      	cmp	r3, #32
 80099d2:	d107      	bne.n	80099e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f06f 0220 	mvn.w	r2, #32
 80099dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 fb1f 	bl	800a022 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80099e4:	bf00      	nop
 80099e6:	3708      	adds	r7, #8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b086      	sub	sp, #24
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099f8:	2300      	movs	r3, #0
 80099fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d101      	bne.n	8009a0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009a06:	2302      	movs	r3, #2
 8009a08:	e0ae      	b.n	8009b68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2b0c      	cmp	r3, #12
 8009a16:	f200 809f 	bhi.w	8009b58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009a1a:	a201      	add	r2, pc, #4	; (adr r2, 8009a20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a20:	08009a55 	.word	0x08009a55
 8009a24:	08009b59 	.word	0x08009b59
 8009a28:	08009b59 	.word	0x08009b59
 8009a2c:	08009b59 	.word	0x08009b59
 8009a30:	08009a95 	.word	0x08009a95
 8009a34:	08009b59 	.word	0x08009b59
 8009a38:	08009b59 	.word	0x08009b59
 8009a3c:	08009b59 	.word	0x08009b59
 8009a40:	08009ad7 	.word	0x08009ad7
 8009a44:	08009b59 	.word	0x08009b59
 8009a48:	08009b59 	.word	0x08009b59
 8009a4c:	08009b59 	.word	0x08009b59
 8009a50:	08009b17 	.word	0x08009b17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	68b9      	ldr	r1, [r7, #8]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f000 f930 	bl	8009cc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	699a      	ldr	r2, [r3, #24]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f042 0208 	orr.w	r2, r2, #8
 8009a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	699a      	ldr	r2, [r3, #24]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f022 0204 	bic.w	r2, r2, #4
 8009a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	6999      	ldr	r1, [r3, #24]
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	691a      	ldr	r2, [r3, #16]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	430a      	orrs	r2, r1
 8009a90:	619a      	str	r2, [r3, #24]
      break;
 8009a92:	e064      	b.n	8009b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	68b9      	ldr	r1, [r7, #8]
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f000 f976 	bl	8009d8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	699a      	ldr	r2, [r3, #24]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	699a      	ldr	r2, [r3, #24]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	6999      	ldr	r1, [r3, #24]
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	021a      	lsls	r2, r3, #8
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	430a      	orrs	r2, r1
 8009ad2:	619a      	str	r2, [r3, #24]
      break;
 8009ad4:	e043      	b.n	8009b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	68b9      	ldr	r1, [r7, #8]
 8009adc:	4618      	mov	r0, r3
 8009ade:	f000 f9c1 	bl	8009e64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	69da      	ldr	r2, [r3, #28]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f042 0208 	orr.w	r2, r2, #8
 8009af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	69da      	ldr	r2, [r3, #28]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f022 0204 	bic.w	r2, r2, #4
 8009b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	69d9      	ldr	r1, [r3, #28]
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	691a      	ldr	r2, [r3, #16]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	430a      	orrs	r2, r1
 8009b12:	61da      	str	r2, [r3, #28]
      break;
 8009b14:	e023      	b.n	8009b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68b9      	ldr	r1, [r7, #8]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f000 fa0b 	bl	8009f38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	69da      	ldr	r2, [r3, #28]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	69da      	ldr	r2, [r3, #28]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	69d9      	ldr	r1, [r3, #28]
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	021a      	lsls	r2, r3, #8
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	430a      	orrs	r2, r1
 8009b54:	61da      	str	r2, [r3, #28]
      break;
 8009b56:	e002      	b.n	8009b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8009b5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3718      	adds	r7, #24
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b78:	bf00      	nop
 8009b7a:	370c      	adds	r7, #12
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b8c:	bf00      	nop
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ba0:	bf00      	nop
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009bb4:	bf00      	nop
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b085      	sub	sp, #20
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	4a34      	ldr	r2, [pc, #208]	; (8009ca4 <TIM_Base_SetConfig+0xe4>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d00f      	beq.n	8009bf8 <TIM_Base_SetConfig+0x38>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bde:	d00b      	beq.n	8009bf8 <TIM_Base_SetConfig+0x38>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4a31      	ldr	r2, [pc, #196]	; (8009ca8 <TIM_Base_SetConfig+0xe8>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d007      	beq.n	8009bf8 <TIM_Base_SetConfig+0x38>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	4a30      	ldr	r2, [pc, #192]	; (8009cac <TIM_Base_SetConfig+0xec>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d003      	beq.n	8009bf8 <TIM_Base_SetConfig+0x38>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	4a2f      	ldr	r2, [pc, #188]	; (8009cb0 <TIM_Base_SetConfig+0xf0>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d108      	bne.n	8009c0a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	4a25      	ldr	r2, [pc, #148]	; (8009ca4 <TIM_Base_SetConfig+0xe4>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d01b      	beq.n	8009c4a <TIM_Base_SetConfig+0x8a>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c18:	d017      	beq.n	8009c4a <TIM_Base_SetConfig+0x8a>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4a22      	ldr	r2, [pc, #136]	; (8009ca8 <TIM_Base_SetConfig+0xe8>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d013      	beq.n	8009c4a <TIM_Base_SetConfig+0x8a>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4a21      	ldr	r2, [pc, #132]	; (8009cac <TIM_Base_SetConfig+0xec>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d00f      	beq.n	8009c4a <TIM_Base_SetConfig+0x8a>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4a20      	ldr	r2, [pc, #128]	; (8009cb0 <TIM_Base_SetConfig+0xf0>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d00b      	beq.n	8009c4a <TIM_Base_SetConfig+0x8a>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	4a1f      	ldr	r2, [pc, #124]	; (8009cb4 <TIM_Base_SetConfig+0xf4>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d007      	beq.n	8009c4a <TIM_Base_SetConfig+0x8a>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	4a1e      	ldr	r2, [pc, #120]	; (8009cb8 <TIM_Base_SetConfig+0xf8>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d003      	beq.n	8009c4a <TIM_Base_SetConfig+0x8a>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4a1d      	ldr	r2, [pc, #116]	; (8009cbc <TIM_Base_SetConfig+0xfc>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d108      	bne.n	8009c5c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	695b      	ldr	r3, [r3, #20]
 8009c66:	4313      	orrs	r3, r2
 8009c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	689a      	ldr	r2, [r3, #8]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	4a08      	ldr	r2, [pc, #32]	; (8009ca4 <TIM_Base_SetConfig+0xe4>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d103      	bne.n	8009c90 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	691a      	ldr	r2, [r3, #16]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2201      	movs	r2, #1
 8009c94:	615a      	str	r2, [r3, #20]
}
 8009c96:	bf00      	nop
 8009c98:	3714      	adds	r7, #20
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop
 8009ca4:	40010000 	.word	0x40010000
 8009ca8:	40000400 	.word	0x40000400
 8009cac:	40000800 	.word	0x40000800
 8009cb0:	40000c00 	.word	0x40000c00
 8009cb4:	40014000 	.word	0x40014000
 8009cb8:	40014400 	.word	0x40014400
 8009cbc:	40014800 	.word	0x40014800

08009cc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b087      	sub	sp, #28
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a1b      	ldr	r3, [r3, #32]
 8009cce:	f023 0201 	bic.w	r2, r3, #1
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a1b      	ldr	r3, [r3, #32]
 8009cda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	699b      	ldr	r3, [r3, #24]
 8009ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f023 0303 	bic.w	r3, r3, #3
 8009cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	f023 0302 	bic.w	r3, r3, #2
 8009d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	689b      	ldr	r3, [r3, #8]
 8009d0e:	697a      	ldr	r2, [r7, #20]
 8009d10:	4313      	orrs	r3, r2
 8009d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a1c      	ldr	r2, [pc, #112]	; (8009d88 <TIM_OC1_SetConfig+0xc8>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d10c      	bne.n	8009d36 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	f023 0308 	bic.w	r3, r3, #8
 8009d22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	697a      	ldr	r2, [r7, #20]
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	f023 0304 	bic.w	r3, r3, #4
 8009d34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4a13      	ldr	r2, [pc, #76]	; (8009d88 <TIM_OC1_SetConfig+0xc8>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d111      	bne.n	8009d62 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	695b      	ldr	r3, [r3, #20]
 8009d52:	693a      	ldr	r2, [r7, #16]
 8009d54:	4313      	orrs	r3, r2
 8009d56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	699b      	ldr	r3, [r3, #24]
 8009d5c:	693a      	ldr	r2, [r7, #16]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	693a      	ldr	r2, [r7, #16]
 8009d66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	68fa      	ldr	r2, [r7, #12]
 8009d6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	685a      	ldr	r2, [r3, #4]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	697a      	ldr	r2, [r7, #20]
 8009d7a:	621a      	str	r2, [r3, #32]
}
 8009d7c:	bf00      	nop
 8009d7e:	371c      	adds	r7, #28
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr
 8009d88:	40010000 	.word	0x40010000

08009d8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b087      	sub	sp, #28
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6a1b      	ldr	r3, [r3, #32]
 8009d9a:	f023 0210 	bic.w	r2, r3, #16
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6a1b      	ldr	r3, [r3, #32]
 8009da6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	699b      	ldr	r3, [r3, #24]
 8009db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	021b      	lsls	r3, r3, #8
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	f023 0320 	bic.w	r3, r3, #32
 8009dd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	011b      	lsls	r3, r3, #4
 8009dde:	697a      	ldr	r2, [r7, #20]
 8009de0:	4313      	orrs	r3, r2
 8009de2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4a1e      	ldr	r2, [pc, #120]	; (8009e60 <TIM_OC2_SetConfig+0xd4>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d10d      	bne.n	8009e08 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009df2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	011b      	lsls	r3, r3, #4
 8009dfa:	697a      	ldr	r2, [r7, #20]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a15      	ldr	r2, [pc, #84]	; (8009e60 <TIM_OC2_SetConfig+0xd4>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d113      	bne.n	8009e38 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	695b      	ldr	r3, [r3, #20]
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	693a      	ldr	r2, [r7, #16]
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	699b      	ldr	r3, [r3, #24]
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	693a      	ldr	r2, [r7, #16]
 8009e34:	4313      	orrs	r3, r2
 8009e36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	693a      	ldr	r2, [r7, #16]
 8009e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	685a      	ldr	r2, [r3, #4]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	697a      	ldr	r2, [r7, #20]
 8009e50:	621a      	str	r2, [r3, #32]
}
 8009e52:	bf00      	nop
 8009e54:	371c      	adds	r7, #28
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr
 8009e5e:	bf00      	nop
 8009e60:	40010000 	.word	0x40010000

08009e64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b087      	sub	sp, #28
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a1b      	ldr	r3, [r3, #32]
 8009e72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a1b      	ldr	r3, [r3, #32]
 8009e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	69db      	ldr	r3, [r3, #28]
 8009e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f023 0303 	bic.w	r3, r3, #3
 8009e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68fa      	ldr	r2, [r7, #12]
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	021b      	lsls	r3, r3, #8
 8009eb4:	697a      	ldr	r2, [r7, #20]
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	4a1d      	ldr	r2, [pc, #116]	; (8009f34 <TIM_OC3_SetConfig+0xd0>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d10d      	bne.n	8009ede <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ec8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	021b      	lsls	r3, r3, #8
 8009ed0:	697a      	ldr	r2, [r7, #20]
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009edc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	4a14      	ldr	r2, [pc, #80]	; (8009f34 <TIM_OC3_SetConfig+0xd0>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d113      	bne.n	8009f0e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009eec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	695b      	ldr	r3, [r3, #20]
 8009efa:	011b      	lsls	r3, r3, #4
 8009efc:	693a      	ldr	r2, [r7, #16]
 8009efe:	4313      	orrs	r3, r2
 8009f00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	699b      	ldr	r3, [r3, #24]
 8009f06:	011b      	lsls	r3, r3, #4
 8009f08:	693a      	ldr	r2, [r7, #16]
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	693a      	ldr	r2, [r7, #16]
 8009f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	68fa      	ldr	r2, [r7, #12]
 8009f18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	685a      	ldr	r2, [r3, #4]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	697a      	ldr	r2, [r7, #20]
 8009f26:	621a      	str	r2, [r3, #32]
}
 8009f28:	bf00      	nop
 8009f2a:	371c      	adds	r7, #28
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr
 8009f34:	40010000 	.word	0x40010000

08009f38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b087      	sub	sp, #28
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a1b      	ldr	r3, [r3, #32]
 8009f46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a1b      	ldr	r3, [r3, #32]
 8009f52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	69db      	ldr	r3, [r3, #28]
 8009f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	021b      	lsls	r3, r3, #8
 8009f76:	68fa      	ldr	r2, [r7, #12]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	031b      	lsls	r3, r3, #12
 8009f8a:	693a      	ldr	r2, [r7, #16]
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4a10      	ldr	r2, [pc, #64]	; (8009fd4 <TIM_OC4_SetConfig+0x9c>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d109      	bne.n	8009fac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	695b      	ldr	r3, [r3, #20]
 8009fa4:	019b      	lsls	r3, r3, #6
 8009fa6:	697a      	ldr	r2, [r7, #20]
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	697a      	ldr	r2, [r7, #20]
 8009fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	68fa      	ldr	r2, [r7, #12]
 8009fb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	685a      	ldr	r2, [r3, #4]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	693a      	ldr	r2, [r7, #16]
 8009fc4:	621a      	str	r2, [r3, #32]
}
 8009fc6:	bf00      	nop
 8009fc8:	371c      	adds	r7, #28
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	40010000 	.word	0x40010000

08009fd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b087      	sub	sp, #28
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	f003 031f 	and.w	r3, r3, #31
 8009fea:	2201      	movs	r2, #1
 8009fec:	fa02 f303 	lsl.w	r3, r2, r3
 8009ff0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6a1a      	ldr	r2, [r3, #32]
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	43db      	mvns	r3, r3
 8009ffa:	401a      	ands	r2, r3
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	6a1a      	ldr	r2, [r3, #32]
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	f003 031f 	and.w	r3, r3, #31
 800a00a:	6879      	ldr	r1, [r7, #4]
 800a00c:	fa01 f303 	lsl.w	r3, r1, r3
 800a010:	431a      	orrs	r2, r3
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	621a      	str	r2, [r3, #32]
}
 800a016:	bf00      	nop
 800a018:	371c      	adds	r7, #28
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr

0800a022 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a022:	b480      	push	{r7}
 800a024:	b083      	sub	sp, #12
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a02a:	bf00      	nop
 800a02c:	370c      	adds	r7, #12
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr

0800a036 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a036:	b480      	push	{r7}
 800a038:	b083      	sub	sp, #12
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a03e:	bf00      	nop
 800a040:	370c      	adds	r7, #12
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr

0800a04a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b082      	sub	sp, #8
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d101      	bne.n	800a05c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	e03f      	b.n	800a0dc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a062:	b2db      	uxtb	r3, r3
 800a064:	2b00      	cmp	r3, #0
 800a066:	d106      	bne.n	800a076 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f7fa f8ff 	bl	8004274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2224      	movs	r2, #36	; 0x24
 800a07a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	68da      	ldr	r2, [r3, #12]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a08c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f001 f978 	bl	800b384 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	691a      	ldr	r2, [r3, #16]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a0a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	695a      	ldr	r2, [r3, #20]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a0b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	68da      	ldr	r2, [r3, #12]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a0c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2220      	movs	r2, #32
 800a0ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2220      	movs	r2, #32
 800a0d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3708      	adds	r7, #8
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b08a      	sub	sp, #40	; 0x28
 800a0e8:	af02      	add	r7, sp, #8
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	603b      	str	r3, [r7, #0]
 800a0f0:	4613      	mov	r3, r2
 800a0f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	2b20      	cmp	r3, #32
 800a102:	d17c      	bne.n	800a1fe <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d002      	beq.n	800a110 <HAL_UART_Transmit+0x2c>
 800a10a:	88fb      	ldrh	r3, [r7, #6]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d101      	bne.n	800a114 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	e075      	b.n	800a200 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d101      	bne.n	800a122 <HAL_UART_Transmit+0x3e>
 800a11e:	2302      	movs	r3, #2
 800a120:	e06e      	b.n	800a200 <HAL_UART_Transmit+0x11c>
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2201      	movs	r2, #1
 800a126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2200      	movs	r2, #0
 800a12e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2221      	movs	r2, #33	; 0x21
 800a134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a138:	f7fa fdec 	bl	8004d14 <HAL_GetTick>
 800a13c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	88fa      	ldrh	r2, [r7, #6]
 800a142:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	88fa      	ldrh	r2, [r7, #6]
 800a148:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a152:	d108      	bne.n	800a166 <HAL_UART_Transmit+0x82>
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d104      	bne.n	800a166 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a15c:	2300      	movs	r3, #0
 800a15e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	61bb      	str	r3, [r7, #24]
 800a164:	e003      	b.n	800a16e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a16a:	2300      	movs	r3, #0
 800a16c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2200      	movs	r2, #0
 800a172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a176:	e02a      	b.n	800a1ce <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	9300      	str	r3, [sp, #0]
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	2200      	movs	r2, #0
 800a180:	2180      	movs	r1, #128	; 0x80
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	f000 fe2f 	bl	800ade6 <UART_WaitOnFlagUntilTimeout>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d001      	beq.n	800a192 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a18e:	2303      	movs	r3, #3
 800a190:	e036      	b.n	800a200 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a192:	69fb      	ldr	r3, [r7, #28]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d10b      	bne.n	800a1b0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	881b      	ldrh	r3, [r3, #0]
 800a19c:	461a      	mov	r2, r3
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a1a6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a1a8:	69bb      	ldr	r3, [r7, #24]
 800a1aa:	3302      	adds	r3, #2
 800a1ac:	61bb      	str	r3, [r7, #24]
 800a1ae:	e007      	b.n	800a1c0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	781a      	ldrb	r2, [r3, #0]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	3b01      	subs	r3, #1
 800a1c8:	b29a      	uxth	r2, r3
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d1cf      	bne.n	800a178 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	9300      	str	r3, [sp, #0]
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	2140      	movs	r1, #64	; 0x40
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	f000 fdff 	bl	800ade6 <UART_WaitOnFlagUntilTimeout>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d001      	beq.n	800a1f2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	e006      	b.n	800a200 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2220      	movs	r2, #32
 800a1f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	e000      	b.n	800a200 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a1fe:	2302      	movs	r3, #2
  }
}
 800a200:	4618      	mov	r0, r3
 800a202:	3720      	adds	r7, #32
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b08a      	sub	sp, #40	; 0x28
 800a20c:	af02      	add	r7, sp, #8
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	603b      	str	r3, [r7, #0]
 800a214:	4613      	mov	r3, r2
 800a216:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a218:	2300      	movs	r3, #0
 800a21a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a222:	b2db      	uxtb	r3, r3
 800a224:	2b20      	cmp	r3, #32
 800a226:	f040 808c 	bne.w	800a342 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d002      	beq.n	800a236 <HAL_UART_Receive+0x2e>
 800a230:	88fb      	ldrh	r3, [r7, #6]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d101      	bne.n	800a23a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800a236:	2301      	movs	r3, #1
 800a238:	e084      	b.n	800a344 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a240:	2b01      	cmp	r3, #1
 800a242:	d101      	bne.n	800a248 <HAL_UART_Receive+0x40>
 800a244:	2302      	movs	r3, #2
 800a246:	e07d      	b.n	800a344 <HAL_UART_Receive+0x13c>
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2201      	movs	r2, #1
 800a24c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2200      	movs	r2, #0
 800a254:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2222      	movs	r2, #34	; 0x22
 800a25a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2200      	movs	r2, #0
 800a262:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a264:	f7fa fd56 	bl	8004d14 <HAL_GetTick>
 800a268:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	88fa      	ldrh	r2, [r7, #6]
 800a26e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	88fa      	ldrh	r2, [r7, #6]
 800a274:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a27e:	d108      	bne.n	800a292 <HAL_UART_Receive+0x8a>
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	691b      	ldr	r3, [r3, #16]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d104      	bne.n	800a292 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800a288:	2300      	movs	r3, #0
 800a28a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	61bb      	str	r3, [r7, #24]
 800a290:	e003      	b.n	800a29a <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a296:	2300      	movs	r3, #0
 800a298:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2200      	movs	r2, #0
 800a29e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800a2a2:	e043      	b.n	800a32c <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	9300      	str	r3, [sp, #0]
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	2120      	movs	r1, #32
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f000 fd99 	bl	800ade6 <UART_WaitOnFlagUntilTimeout>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d001      	beq.n	800a2be <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	e042      	b.n	800a344 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d10c      	bne.n	800a2de <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2d0:	b29a      	uxth	r2, r3
 800a2d2:	69bb      	ldr	r3, [r7, #24]
 800a2d4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	3302      	adds	r3, #2
 800a2da:	61bb      	str	r3, [r7, #24]
 800a2dc:	e01f      	b.n	800a31e <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2e6:	d007      	beq.n	800a2f8 <HAL_UART_Receive+0xf0>
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	689b      	ldr	r3, [r3, #8]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d10a      	bne.n	800a306 <HAL_UART_Receive+0xfe>
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	691b      	ldr	r3, [r3, #16]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d106      	bne.n	800a306 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	b2da      	uxtb	r2, r3
 800a300:	69fb      	ldr	r3, [r7, #28]
 800a302:	701a      	strb	r2, [r3, #0]
 800a304:	e008      	b.n	800a318 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a312:	b2da      	uxtb	r2, r3
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800a318:	69fb      	ldr	r3, [r7, #28]
 800a31a:	3301      	adds	r3, #1
 800a31c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a322:	b29b      	uxth	r3, r3
 800a324:	3b01      	subs	r3, #1
 800a326:	b29a      	uxth	r2, r3
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a330:	b29b      	uxth	r3, r3
 800a332:	2b00      	cmp	r3, #0
 800a334:	d1b6      	bne.n	800a2a4 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2220      	movs	r2, #32
 800a33a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800a33e:	2300      	movs	r3, #0
 800a340:	e000      	b.n	800a344 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800a342:	2302      	movs	r3, #2
  }
}
 800a344:	4618      	mov	r0, r3
 800a346:	3720      	adds	r7, #32
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b08c      	sub	sp, #48	; 0x30
 800a350:	af00      	add	r7, sp, #0
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	60b9      	str	r1, [r7, #8]
 800a356:	4613      	mov	r3, r2
 800a358:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a360:	b2db      	uxtb	r3, r3
 800a362:	2b20      	cmp	r3, #32
 800a364:	d165      	bne.n	800a432 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d002      	beq.n	800a372 <HAL_UART_Transmit_DMA+0x26>
 800a36c:	88fb      	ldrh	r3, [r7, #6]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d101      	bne.n	800a376 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a372:	2301      	movs	r3, #1
 800a374:	e05e      	b.n	800a434 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d101      	bne.n	800a384 <HAL_UART_Transmit_DMA+0x38>
 800a380:	2302      	movs	r3, #2
 800a382:	e057      	b.n	800a434 <HAL_UART_Transmit_DMA+0xe8>
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2201      	movs	r2, #1
 800a388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a38c:	68ba      	ldr	r2, [r7, #8]
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	88fa      	ldrh	r2, [r7, #6]
 800a396:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	88fa      	ldrh	r2, [r7, #6]
 800a39c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2221      	movs	r2, #33	; 0x21
 800a3a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3b0:	4a22      	ldr	r2, [pc, #136]	; (800a43c <HAL_UART_Transmit_DMA+0xf0>)
 800a3b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3b8:	4a21      	ldr	r2, [pc, #132]	; (800a440 <HAL_UART_Transmit_DMA+0xf4>)
 800a3ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3c0:	4a20      	ldr	r2, [pc, #128]	; (800a444 <HAL_UART_Transmit_DMA+0xf8>)
 800a3c2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a3cc:	f107 0308 	add.w	r3, r7, #8
 800a3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d8:	6819      	ldr	r1, [r3, #0]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	3304      	adds	r3, #4
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	88fb      	ldrh	r3, [r7, #6]
 800a3e4:	f7fb f926 	bl	8005634 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a3f0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	3314      	adds	r3, #20
 800a400:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a402:	69bb      	ldr	r3, [r7, #24]
 800a404:	e853 3f00 	ldrex	r3, [r3]
 800a408:	617b      	str	r3, [r7, #20]
   return(result);
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a410:	62bb      	str	r3, [r7, #40]	; 0x28
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	3314      	adds	r3, #20
 800a418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a41a:	627a      	str	r2, [r7, #36]	; 0x24
 800a41c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a41e:	6a39      	ldr	r1, [r7, #32]
 800a420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a422:	e841 2300 	strex	r3, r2, [r1]
 800a426:	61fb      	str	r3, [r7, #28]
   return(result);
 800a428:	69fb      	ldr	r3, [r7, #28]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d1e5      	bne.n	800a3fa <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a42e:	2300      	movs	r3, #0
 800a430:	e000      	b.n	800a434 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a432:	2302      	movs	r3, #2
  }
}
 800a434:	4618      	mov	r0, r3
 800a436:	3730      	adds	r7, #48	; 0x30
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	0800ab41 	.word	0x0800ab41
 800a440:	0800abdb 	.word	0x0800abdb
 800a444:	0800ad53 	.word	0x0800ad53

0800a448 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	4613      	mov	r3, r2
 800a454:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	2b20      	cmp	r3, #32
 800a460:	d11d      	bne.n	800a49e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d002      	beq.n	800a46e <HAL_UART_Receive_DMA+0x26>
 800a468:	88fb      	ldrh	r3, [r7, #6]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d101      	bne.n	800a472 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a46e:	2301      	movs	r3, #1
 800a470:	e016      	b.n	800a4a0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d101      	bne.n	800a480 <HAL_UART_Receive_DMA+0x38>
 800a47c:	2302      	movs	r3, #2
 800a47e:	e00f      	b.n	800a4a0 <HAL_UART_Receive_DMA+0x58>
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2201      	movs	r2, #1
 800a484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2200      	movs	r2, #0
 800a48c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a48e:	88fb      	ldrh	r3, [r7, #6]
 800a490:	461a      	mov	r2, r3
 800a492:	68b9      	ldr	r1, [r7, #8]
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f000 fd15 	bl	800aec4 <UART_Start_Receive_DMA>
 800a49a:	4603      	mov	r3, r0
 800a49c:	e000      	b.n	800a4a0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a49e:	2302      	movs	r3, #2
  }
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3710      	adds	r7, #16
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b090      	sub	sp, #64	; 0x40
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	695b      	ldr	r3, [r3, #20]
 800a4ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4be:	2b80      	cmp	r3, #128	; 0x80
 800a4c0:	bf0c      	ite	eq
 800a4c2:	2301      	moveq	r3, #1
 800a4c4:	2300      	movne	r3, #0
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	2b21      	cmp	r3, #33	; 0x21
 800a4d4:	d128      	bne.n	800a528 <HAL_UART_DMAStop+0x80>
 800a4d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d025      	beq.n	800a528 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	3314      	adds	r3, #20
 800a4e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e6:	e853 3f00 	ldrex	r3, [r3]
 800a4ea:	623b      	str	r3, [r7, #32]
   return(result);
 800a4ec:	6a3b      	ldr	r3, [r7, #32]
 800a4ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4f2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	3314      	adds	r3, #20
 800a4fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4fc:	633a      	str	r2, [r7, #48]	; 0x30
 800a4fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a500:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a502:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a504:	e841 2300 	strex	r3, r2, [r1]
 800a508:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d1e5      	bne.n	800a4dc <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a514:	2b00      	cmp	r3, #0
 800a516:	d004      	beq.n	800a522 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a51c:	4618      	mov	r0, r3
 800a51e:	f7fb f8e1 	bl	80056e4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 fd6c 	bl	800b000 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	695b      	ldr	r3, [r3, #20]
 800a52e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a532:	2b40      	cmp	r3, #64	; 0x40
 800a534:	bf0c      	ite	eq
 800a536:	2301      	moveq	r3, #1
 800a538:	2300      	movne	r3, #0
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a544:	b2db      	uxtb	r3, r3
 800a546:	2b22      	cmp	r3, #34	; 0x22
 800a548:	d128      	bne.n	800a59c <HAL_UART_DMAStop+0xf4>
 800a54a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d025      	beq.n	800a59c <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	3314      	adds	r3, #20
 800a556:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	e853 3f00 	ldrex	r3, [r3]
 800a55e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a566:	637b      	str	r3, [r7, #52]	; 0x34
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	3314      	adds	r3, #20
 800a56e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a570:	61fa      	str	r2, [r7, #28]
 800a572:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a574:	69b9      	ldr	r1, [r7, #24]
 800a576:	69fa      	ldr	r2, [r7, #28]
 800a578:	e841 2300 	strex	r3, r2, [r1]
 800a57c:	617b      	str	r3, [r7, #20]
   return(result);
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d1e5      	bne.n	800a550 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d004      	beq.n	800a596 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a590:	4618      	mov	r0, r3
 800a592:	f7fb f8a7 	bl	80056e4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 fd5a 	bl	800b050 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a59c:	2300      	movs	r3, #0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3740      	adds	r7, #64	; 0x40
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
	...

0800a5a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b0ba      	sub	sp, #232	; 0xe8
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	695b      	ldr	r3, [r3, #20]
 800a5ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a5da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5de:	f003 030f 	and.w	r3, r3, #15
 800a5e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a5e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d10f      	bne.n	800a60e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a5ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5f2:	f003 0320 	and.w	r3, r3, #32
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d009      	beq.n	800a60e <HAL_UART_IRQHandler+0x66>
 800a5fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5fe:	f003 0320 	and.w	r3, r3, #32
 800a602:	2b00      	cmp	r3, #0
 800a604:	d003      	beq.n	800a60e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 fe01 	bl	800b20e <UART_Receive_IT>
      return;
 800a60c:	e256      	b.n	800aabc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a60e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a612:	2b00      	cmp	r3, #0
 800a614:	f000 80de 	beq.w	800a7d4 <HAL_UART_IRQHandler+0x22c>
 800a618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a61c:	f003 0301 	and.w	r3, r3, #1
 800a620:	2b00      	cmp	r3, #0
 800a622:	d106      	bne.n	800a632 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a628:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	f000 80d1 	beq.w	800a7d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a636:	f003 0301 	and.w	r3, r3, #1
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d00b      	beq.n	800a656 <HAL_UART_IRQHandler+0xae>
 800a63e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a646:	2b00      	cmp	r3, #0
 800a648:	d005      	beq.n	800a656 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a64e:	f043 0201 	orr.w	r2, r3, #1
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a65a:	f003 0304 	and.w	r3, r3, #4
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d00b      	beq.n	800a67a <HAL_UART_IRQHandler+0xd2>
 800a662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a666:	f003 0301 	and.w	r3, r3, #1
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d005      	beq.n	800a67a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a672:	f043 0202 	orr.w	r2, r3, #2
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a67a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a67e:	f003 0302 	and.w	r3, r3, #2
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00b      	beq.n	800a69e <HAL_UART_IRQHandler+0xf6>
 800a686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a68a:	f003 0301 	and.w	r3, r3, #1
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d005      	beq.n	800a69e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a696:	f043 0204 	orr.w	r2, r3, #4
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a69e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6a2:	f003 0308 	and.w	r3, r3, #8
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d011      	beq.n	800a6ce <HAL_UART_IRQHandler+0x126>
 800a6aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6ae:	f003 0320 	and.w	r3, r3, #32
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d105      	bne.n	800a6c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a6b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6ba:	f003 0301 	and.w	r3, r3, #1
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d005      	beq.n	800a6ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c6:	f043 0208 	orr.w	r2, r3, #8
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	f000 81ed 	beq.w	800aab2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a6d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6dc:	f003 0320 	and.w	r3, r3, #32
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d008      	beq.n	800a6f6 <HAL_UART_IRQHandler+0x14e>
 800a6e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6e8:	f003 0320 	and.w	r3, r3, #32
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d002      	beq.n	800a6f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 fd8c 	bl	800b20e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	695b      	ldr	r3, [r3, #20]
 800a6fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a700:	2b40      	cmp	r3, #64	; 0x40
 800a702:	bf0c      	ite	eq
 800a704:	2301      	moveq	r3, #1
 800a706:	2300      	movne	r3, #0
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a712:	f003 0308 	and.w	r3, r3, #8
 800a716:	2b00      	cmp	r3, #0
 800a718:	d103      	bne.n	800a722 <HAL_UART_IRQHandler+0x17a>
 800a71a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d04f      	beq.n	800a7c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 fc94 	bl	800b050 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	695b      	ldr	r3, [r3, #20]
 800a72e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a732:	2b40      	cmp	r3, #64	; 0x40
 800a734:	d141      	bne.n	800a7ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	3314      	adds	r3, #20
 800a73c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a740:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a744:	e853 3f00 	ldrex	r3, [r3]
 800a748:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a74c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a754:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	3314      	adds	r3, #20
 800a75e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a762:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a766:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a76e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a772:	e841 2300 	strex	r3, r2, [r1]
 800a776:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a77a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d1d9      	bne.n	800a736 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a786:	2b00      	cmp	r3, #0
 800a788:	d013      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a78e:	4a7d      	ldr	r2, [pc, #500]	; (800a984 <HAL_UART_IRQHandler+0x3dc>)
 800a790:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a796:	4618      	mov	r0, r3
 800a798:	f7fb f814 	bl	80057c4 <HAL_DMA_Abort_IT>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d016      	beq.n	800a7d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a7ac:	4610      	mov	r0, r2
 800a7ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7b0:	e00e      	b.n	800a7d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 f9ae 	bl	800ab14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7b8:	e00a      	b.n	800a7d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 f9aa 	bl	800ab14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7c0:	e006      	b.n	800a7d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 f9a6 	bl	800ab14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a7ce:	e170      	b.n	800aab2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7d0:	bf00      	nop
    return;
 800a7d2:	e16e      	b.n	800aab2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	f040 814a 	bne.w	800aa72 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a7de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7e2:	f003 0310 	and.w	r3, r3, #16
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	f000 8143 	beq.w	800aa72 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a7ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7f0:	f003 0310 	and.w	r3, r3, #16
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f000 813c 	beq.w	800aa72 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	60bb      	str	r3, [r7, #8]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	60bb      	str	r3, [r7, #8]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	60bb      	str	r3, [r7, #8]
 800a80e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	695b      	ldr	r3, [r3, #20]
 800a816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a81a:	2b40      	cmp	r3, #64	; 0x40
 800a81c:	f040 80b4 	bne.w	800a988 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a82c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a830:	2b00      	cmp	r3, #0
 800a832:	f000 8140 	beq.w	800aab6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a83a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a83e:	429a      	cmp	r2, r3
 800a840:	f080 8139 	bcs.w	800aab6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a84a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a850:	69db      	ldr	r3, [r3, #28]
 800a852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a856:	f000 8088 	beq.w	800a96a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	330c      	adds	r3, #12
 800a860:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a864:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a868:	e853 3f00 	ldrex	r3, [r3]
 800a86c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a870:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a878:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	330c      	adds	r3, #12
 800a882:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a886:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a88a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a88e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a892:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a896:	e841 2300 	strex	r3, r2, [r1]
 800a89a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a89e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d1d9      	bne.n	800a85a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	3314      	adds	r3, #20
 800a8ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8b0:	e853 3f00 	ldrex	r3, [r3]
 800a8b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a8b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a8b8:	f023 0301 	bic.w	r3, r3, #1
 800a8bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	3314      	adds	r3, #20
 800a8c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a8ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a8ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a8d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a8d6:	e841 2300 	strex	r3, r2, [r1]
 800a8da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a8dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d1e1      	bne.n	800a8a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	3314      	adds	r3, #20
 800a8e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a8ec:	e853 3f00 	ldrex	r3, [r3]
 800a8f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a8f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	3314      	adds	r3, #20
 800a902:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a906:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a908:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a90a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a90c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a90e:	e841 2300 	strex	r3, r2, [r1]
 800a912:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a914:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a916:	2b00      	cmp	r3, #0
 800a918:	d1e3      	bne.n	800a8e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2220      	movs	r2, #32
 800a91e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2200      	movs	r2, #0
 800a926:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	330c      	adds	r3, #12
 800a92e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a932:	e853 3f00 	ldrex	r3, [r3]
 800a936:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a93a:	f023 0310 	bic.w	r3, r3, #16
 800a93e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	330c      	adds	r3, #12
 800a948:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a94c:	65ba      	str	r2, [r7, #88]	; 0x58
 800a94e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a950:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a952:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a954:	e841 2300 	strex	r3, r2, [r1]
 800a958:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a95a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d1e3      	bne.n	800a928 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a964:	4618      	mov	r0, r3
 800a966:	f7fa febd 	bl	80056e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a972:	b29b      	uxth	r3, r3
 800a974:	1ad3      	subs	r3, r2, r3
 800a976:	b29b      	uxth	r3, r3
 800a978:	4619      	mov	r1, r3
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 f8d4 	bl	800ab28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a980:	e099      	b.n	800aab6 <HAL_UART_IRQHandler+0x50e>
 800a982:	bf00      	nop
 800a984:	0800b117 	.word	0x0800b117
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a990:	b29b      	uxth	r3, r3
 800a992:	1ad3      	subs	r3, r2, r3
 800a994:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	f000 808b 	beq.w	800aaba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a9a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	f000 8086 	beq.w	800aaba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	330c      	adds	r3, #12
 800a9b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b8:	e853 3f00 	ldrex	r3, [r3]
 800a9bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a9be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a9c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	330c      	adds	r3, #12
 800a9ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a9d2:	647a      	str	r2, [r7, #68]	; 0x44
 800a9d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a9d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a9da:	e841 2300 	strex	r3, r2, [r1]
 800a9de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a9e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d1e3      	bne.n	800a9ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	3314      	adds	r3, #20
 800a9ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f0:	e853 3f00 	ldrex	r3, [r3]
 800a9f4:	623b      	str	r3, [r7, #32]
   return(result);
 800a9f6:	6a3b      	ldr	r3, [r7, #32]
 800a9f8:	f023 0301 	bic.w	r3, r3, #1
 800a9fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	3314      	adds	r3, #20
 800aa06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aa0a:	633a      	str	r2, [r7, #48]	; 0x30
 800aa0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa12:	e841 2300 	strex	r3, r2, [r1]
 800aa16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d1e3      	bne.n	800a9e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2220      	movs	r2, #32
 800aa22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	330c      	adds	r3, #12
 800aa32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	e853 3f00 	ldrex	r3, [r3]
 800aa3a:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f023 0310 	bic.w	r3, r3, #16
 800aa42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	330c      	adds	r3, #12
 800aa4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800aa50:	61fa      	str	r2, [r7, #28]
 800aa52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa54:	69b9      	ldr	r1, [r7, #24]
 800aa56:	69fa      	ldr	r2, [r7, #28]
 800aa58:	e841 2300 	strex	r3, r2, [r1]
 800aa5c:	617b      	str	r3, [r7, #20]
   return(result);
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d1e3      	bne.n	800aa2c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aa64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aa68:	4619      	mov	r1, r3
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 f85c 	bl	800ab28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aa70:	e023      	b.n	800aaba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aa72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d009      	beq.n	800aa92 <HAL_UART_IRQHandler+0x4ea>
 800aa7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d003      	beq.n	800aa92 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 fb57 	bl	800b13e <UART_Transmit_IT>
    return;
 800aa90:	e014      	b.n	800aabc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aa92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d00e      	beq.n	800aabc <HAL_UART_IRQHandler+0x514>
 800aa9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aaa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d008      	beq.n	800aabc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f000 fb97 	bl	800b1de <UART_EndTransmit_IT>
    return;
 800aab0:	e004      	b.n	800aabc <HAL_UART_IRQHandler+0x514>
    return;
 800aab2:	bf00      	nop
 800aab4:	e002      	b.n	800aabc <HAL_UART_IRQHandler+0x514>
      return;
 800aab6:	bf00      	nop
 800aab8:	e000      	b.n	800aabc <HAL_UART_IRQHandler+0x514>
      return;
 800aaba:	bf00      	nop
  }
}
 800aabc:	37e8      	adds	r7, #232	; 0xe8
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
 800aac2:	bf00      	nop

0800aac4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800aacc:	bf00      	nop
 800aace:	370c      	adds	r7, #12
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800aae0:	bf00      	nop
 800aae2:	370c      	adds	r7, #12
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr

0800aaec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b083      	sub	sp, #12
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800aaf4:	bf00      	nop
 800aaf6:	370c      	adds	r7, #12
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr

0800ab00 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ab08:	bf00      	nop
 800ab0a:	370c      	adds	r7, #12
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b083      	sub	sp, #12
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ab1c:	bf00      	nop
 800ab1e:	370c      	adds	r7, #12
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr

0800ab28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	460b      	mov	r3, r1
 800ab32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ab34:	bf00      	nop
 800ab36:	370c      	adds	r7, #12
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr

0800ab40 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b090      	sub	sp, #64	; 0x40
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d137      	bne.n	800abcc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800ab5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab5e:	2200      	movs	r2, #0
 800ab60:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ab62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	3314      	adds	r3, #20
 800ab68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6c:	e853 3f00 	ldrex	r3, [r3]
 800ab70:	623b      	str	r3, [r7, #32]
   return(result);
 800ab72:	6a3b      	ldr	r3, [r7, #32]
 800ab74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab78:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	3314      	adds	r3, #20
 800ab80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab82:	633a      	str	r2, [r7, #48]	; 0x30
 800ab84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab8a:	e841 2300 	strex	r3, r2, [r1]
 800ab8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d1e5      	bne.n	800ab62 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	330c      	adds	r3, #12
 800ab9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	e853 3f00 	ldrex	r3, [r3]
 800aba4:	60fb      	str	r3, [r7, #12]
   return(result);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abac:	637b      	str	r3, [r7, #52]	; 0x34
 800abae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	330c      	adds	r3, #12
 800abb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abb6:	61fa      	str	r2, [r7, #28]
 800abb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abba:	69b9      	ldr	r1, [r7, #24]
 800abbc:	69fa      	ldr	r2, [r7, #28]
 800abbe:	e841 2300 	strex	r3, r2, [r1]
 800abc2:	617b      	str	r3, [r7, #20]
   return(result);
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d1e5      	bne.n	800ab96 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abca:	e002      	b.n	800abd2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800abcc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800abce:	f7ff ff79 	bl	800aac4 <HAL_UART_TxCpltCallback>
}
 800abd2:	bf00      	nop
 800abd4:	3740      	adds	r7, #64	; 0x40
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}

0800abda <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800abda:	b580      	push	{r7, lr}
 800abdc:	b084      	sub	sp, #16
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	f7ff ff75 	bl	800aad8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abee:	bf00      	nop
 800abf0:	3710      	adds	r7, #16
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b09c      	sub	sp, #112	; 0x70
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac02:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d172      	bne.n	800acf8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800ac12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac14:	2200      	movs	r2, #0
 800ac16:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	330c      	adds	r3, #12
 800ac1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac22:	e853 3f00 	ldrex	r3, [r3]
 800ac26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ac28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac2e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	330c      	adds	r3, #12
 800ac36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ac38:	65ba      	str	r2, [r7, #88]	; 0x58
 800ac3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ac3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac40:	e841 2300 	strex	r3, r2, [r1]
 800ac44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ac46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d1e5      	bne.n	800ac18 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	3314      	adds	r3, #20
 800ac52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac56:	e853 3f00 	ldrex	r3, [r3]
 800ac5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ac5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac5e:	f023 0301 	bic.w	r3, r3, #1
 800ac62:	667b      	str	r3, [r7, #100]	; 0x64
 800ac64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	3314      	adds	r3, #20
 800ac6a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ac6c:	647a      	str	r2, [r7, #68]	; 0x44
 800ac6e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac74:	e841 2300 	strex	r3, r2, [r1]
 800ac78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ac7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d1e5      	bne.n	800ac4c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	3314      	adds	r3, #20
 800ac86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8a:	e853 3f00 	ldrex	r3, [r3]
 800ac8e:	623b      	str	r3, [r7, #32]
   return(result);
 800ac90:	6a3b      	ldr	r3, [r7, #32]
 800ac92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac96:	663b      	str	r3, [r7, #96]	; 0x60
 800ac98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	3314      	adds	r3, #20
 800ac9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aca0:	633a      	str	r2, [r7, #48]	; 0x30
 800aca2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aca8:	e841 2300 	strex	r3, r2, [r1]
 800acac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800acae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d1e5      	bne.n	800ac80 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800acb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acb6:	2220      	movs	r2, #32
 800acb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d119      	bne.n	800acf8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	330c      	adds	r3, #12
 800acca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	e853 3f00 	ldrex	r3, [r3]
 800acd2:	60fb      	str	r3, [r7, #12]
   return(result);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f023 0310 	bic.w	r3, r3, #16
 800acda:	65fb      	str	r3, [r7, #92]	; 0x5c
 800acdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	330c      	adds	r3, #12
 800ace2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ace4:	61fa      	str	r2, [r7, #28]
 800ace6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace8:	69b9      	ldr	r1, [r7, #24]
 800acea:	69fa      	ldr	r2, [r7, #28]
 800acec:	e841 2300 	strex	r3, r2, [r1]
 800acf0:	617b      	str	r3, [r7, #20]
   return(result);
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d1e5      	bne.n	800acc4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d106      	bne.n	800ad0e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ad04:	4619      	mov	r1, r3
 800ad06:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ad08:	f7ff ff0e 	bl	800ab28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad0c:	e002      	b.n	800ad14 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800ad0e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ad10:	f7ff feec 	bl	800aaec <HAL_UART_RxCpltCallback>
}
 800ad14:	bf00      	nop
 800ad16:	3770      	adds	r7, #112	; 0x70
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad28:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d108      	bne.n	800ad44 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ad36:	085b      	lsrs	r3, r3, #1
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	f7ff fef3 	bl	800ab28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad42:	e002      	b.n	800ad4a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f7ff fedb 	bl	800ab00 <HAL_UART_RxHalfCpltCallback>
}
 800ad4a:	bf00      	nop
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b084      	sub	sp, #16
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad62:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	695b      	ldr	r3, [r3, #20]
 800ad6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad6e:	2b80      	cmp	r3, #128	; 0x80
 800ad70:	bf0c      	ite	eq
 800ad72:	2301      	moveq	r3, #1
 800ad74:	2300      	movne	r3, #0
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	2b21      	cmp	r3, #33	; 0x21
 800ad84:	d108      	bne.n	800ad98 <UART_DMAError+0x46>
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d005      	beq.n	800ad98 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ad92:	68b8      	ldr	r0, [r7, #8]
 800ad94:	f000 f934 	bl	800b000 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	695b      	ldr	r3, [r3, #20]
 800ad9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ada2:	2b40      	cmp	r3, #64	; 0x40
 800ada4:	bf0c      	ite	eq
 800ada6:	2301      	moveq	r3, #1
 800ada8:	2300      	movne	r3, #0
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800adb4:	b2db      	uxtb	r3, r3
 800adb6:	2b22      	cmp	r3, #34	; 0x22
 800adb8:	d108      	bne.n	800adcc <UART_DMAError+0x7a>
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d005      	beq.n	800adcc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	2200      	movs	r2, #0
 800adc4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800adc6:	68b8      	ldr	r0, [r7, #8]
 800adc8:	f000 f942 	bl	800b050 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800add0:	f043 0210 	orr.w	r2, r3, #16
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800add8:	68b8      	ldr	r0, [r7, #8]
 800adda:	f7ff fe9b 	bl	800ab14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adde:	bf00      	nop
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b090      	sub	sp, #64	; 0x40
 800adea:	af00      	add	r7, sp, #0
 800adec:	60f8      	str	r0, [r7, #12]
 800adee:	60b9      	str	r1, [r7, #8]
 800adf0:	603b      	str	r3, [r7, #0]
 800adf2:	4613      	mov	r3, r2
 800adf4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adf6:	e050      	b.n	800ae9a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800adf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adfe:	d04c      	beq.n	800ae9a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ae00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d007      	beq.n	800ae16 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae06:	f7f9 ff85 	bl	8004d14 <HAL_GetTick>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	1ad3      	subs	r3, r2, r3
 800ae10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d241      	bcs.n	800ae9a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	330c      	adds	r3, #12
 800ae1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae20:	e853 3f00 	ldrex	r3, [r3]
 800ae24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ae2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	330c      	adds	r3, #12
 800ae34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ae36:	637a      	str	r2, [r7, #52]	; 0x34
 800ae38:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae3e:	e841 2300 	strex	r3, r2, [r1]
 800ae42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ae44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d1e5      	bne.n	800ae16 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	3314      	adds	r3, #20
 800ae50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	e853 3f00 	ldrex	r3, [r3]
 800ae58:	613b      	str	r3, [r7, #16]
   return(result);
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	f023 0301 	bic.w	r3, r3, #1
 800ae60:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	3314      	adds	r3, #20
 800ae68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae6a:	623a      	str	r2, [r7, #32]
 800ae6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae6e:	69f9      	ldr	r1, [r7, #28]
 800ae70:	6a3a      	ldr	r2, [r7, #32]
 800ae72:	e841 2300 	strex	r3, r2, [r1]
 800ae76:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae78:	69bb      	ldr	r3, [r7, #24]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d1e5      	bne.n	800ae4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2220      	movs	r2, #32
 800ae82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2220      	movs	r2, #32
 800ae8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2200      	movs	r2, #0
 800ae92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ae96:	2303      	movs	r3, #3
 800ae98:	e00f      	b.n	800aeba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	4013      	ands	r3, r2
 800aea4:	68ba      	ldr	r2, [r7, #8]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	bf0c      	ite	eq
 800aeaa:	2301      	moveq	r3, #1
 800aeac:	2300      	movne	r3, #0
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	79fb      	ldrb	r3, [r7, #7]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d09f      	beq.n	800adf8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aeb8:	2300      	movs	r3, #0
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3740      	adds	r7, #64	; 0x40
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
	...

0800aec4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b098      	sub	sp, #96	; 0x60
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	4613      	mov	r3, r2
 800aed0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800aed2:	68ba      	ldr	r2, [r7, #8]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	88fa      	ldrh	r2, [r7, #6]
 800aedc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2200      	movs	r2, #0
 800aee2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2222      	movs	r2, #34	; 0x22
 800aee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef0:	4a40      	ldr	r2, [pc, #256]	; (800aff4 <UART_Start_Receive_DMA+0x130>)
 800aef2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef8:	4a3f      	ldr	r2, [pc, #252]	; (800aff8 <UART_Start_Receive_DMA+0x134>)
 800aefa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af00:	4a3e      	ldr	r2, [pc, #248]	; (800affc <UART_Start_Receive_DMA+0x138>)
 800af02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af08:	2200      	movs	r2, #0
 800af0a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800af0c:	f107 0308 	add.w	r3, r7, #8
 800af10:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	3304      	adds	r3, #4
 800af1c:	4619      	mov	r1, r3
 800af1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af20:	681a      	ldr	r2, [r3, #0]
 800af22:	88fb      	ldrh	r3, [r7, #6]
 800af24:	f7fa fb86 	bl	8005634 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800af28:	2300      	movs	r3, #0
 800af2a:	613b      	str	r3, [r7, #16]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	613b      	str	r3, [r7, #16]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	613b      	str	r3, [r7, #16]
 800af3c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2200      	movs	r2, #0
 800af42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	691b      	ldr	r3, [r3, #16]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d019      	beq.n	800af82 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	330c      	adds	r3, #12
 800af54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af58:	e853 3f00 	ldrex	r3, [r3]
 800af5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800af5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af64:	65bb      	str	r3, [r7, #88]	; 0x58
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	330c      	adds	r3, #12
 800af6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af6e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800af70:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af72:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800af74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800af76:	e841 2300 	strex	r3, r2, [r1]
 800af7a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800af7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d1e5      	bne.n	800af4e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	3314      	adds	r3, #20
 800af88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af8c:	e853 3f00 	ldrex	r3, [r3]
 800af90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af94:	f043 0301 	orr.w	r3, r3, #1
 800af98:	657b      	str	r3, [r7, #84]	; 0x54
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	3314      	adds	r3, #20
 800afa0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800afa2:	63ba      	str	r2, [r7, #56]	; 0x38
 800afa4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800afa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afaa:	e841 2300 	strex	r3, r2, [r1]
 800afae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800afb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d1e5      	bne.n	800af82 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	3314      	adds	r3, #20
 800afbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afbe:	69bb      	ldr	r3, [r7, #24]
 800afc0:	e853 3f00 	ldrex	r3, [r3]
 800afc4:	617b      	str	r3, [r7, #20]
   return(result);
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afcc:	653b      	str	r3, [r7, #80]	; 0x50
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	3314      	adds	r3, #20
 800afd4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800afd6:	627a      	str	r2, [r7, #36]	; 0x24
 800afd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afda:	6a39      	ldr	r1, [r7, #32]
 800afdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afde:	e841 2300 	strex	r3, r2, [r1]
 800afe2:	61fb      	str	r3, [r7, #28]
   return(result);
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d1e5      	bne.n	800afb6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800afea:	2300      	movs	r3, #0
}
 800afec:	4618      	mov	r0, r3
 800afee:	3760      	adds	r7, #96	; 0x60
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	0800abf7 	.word	0x0800abf7
 800aff8:	0800ad1d 	.word	0x0800ad1d
 800affc:	0800ad53 	.word	0x0800ad53

0800b000 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b000:	b480      	push	{r7}
 800b002:	b089      	sub	sp, #36	; 0x24
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	330c      	adds	r3, #12
 800b00e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	e853 3f00 	ldrex	r3, [r3]
 800b016:	60bb      	str	r3, [r7, #8]
   return(result);
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b01e:	61fb      	str	r3, [r7, #28]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	330c      	adds	r3, #12
 800b026:	69fa      	ldr	r2, [r7, #28]
 800b028:	61ba      	str	r2, [r7, #24]
 800b02a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b02c:	6979      	ldr	r1, [r7, #20]
 800b02e:	69ba      	ldr	r2, [r7, #24]
 800b030:	e841 2300 	strex	r3, r2, [r1]
 800b034:	613b      	str	r3, [r7, #16]
   return(result);
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d1e5      	bne.n	800b008 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2220      	movs	r2, #32
 800b040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b044:	bf00      	nop
 800b046:	3724      	adds	r7, #36	; 0x24
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b050:	b480      	push	{r7}
 800b052:	b095      	sub	sp, #84	; 0x54
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	330c      	adds	r3, #12
 800b05e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b062:	e853 3f00 	ldrex	r3, [r3]
 800b066:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b06e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	330c      	adds	r3, #12
 800b076:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b078:	643a      	str	r2, [r7, #64]	; 0x40
 800b07a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b07c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b07e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b080:	e841 2300 	strex	r3, r2, [r1]
 800b084:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d1e5      	bne.n	800b058 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	3314      	adds	r3, #20
 800b092:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b094:	6a3b      	ldr	r3, [r7, #32]
 800b096:	e853 3f00 	ldrex	r3, [r3]
 800b09a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b09c:	69fb      	ldr	r3, [r7, #28]
 800b09e:	f023 0301 	bic.w	r3, r3, #1
 800b0a2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	3314      	adds	r3, #20
 800b0aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b0ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0b4:	e841 2300 	strex	r3, r2, [r1]
 800b0b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d1e5      	bne.n	800b08c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d119      	bne.n	800b0fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	330c      	adds	r3, #12
 800b0ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	e853 3f00 	ldrex	r3, [r3]
 800b0d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	f023 0310 	bic.w	r3, r3, #16
 800b0de:	647b      	str	r3, [r7, #68]	; 0x44
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	330c      	adds	r3, #12
 800b0e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0e8:	61ba      	str	r2, [r7, #24]
 800b0ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ec:	6979      	ldr	r1, [r7, #20]
 800b0ee:	69ba      	ldr	r2, [r7, #24]
 800b0f0:	e841 2300 	strex	r3, r2, [r1]
 800b0f4:	613b      	str	r3, [r7, #16]
   return(result);
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d1e5      	bne.n	800b0c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2220      	movs	r2, #32
 800b100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2200      	movs	r2, #0
 800b108:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b10a:	bf00      	nop
 800b10c:	3754      	adds	r7, #84	; 0x54
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr

0800b116 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b116:	b580      	push	{r7, lr}
 800b118:	b084      	sub	sp, #16
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b122:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2200      	movs	r2, #0
 800b128:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2200      	movs	r2, #0
 800b12e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b130:	68f8      	ldr	r0, [r7, #12]
 800b132:	f7ff fcef 	bl	800ab14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b136:	bf00      	nop
 800b138:	3710      	adds	r7, #16
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}

0800b13e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b13e:	b480      	push	{r7}
 800b140:	b085      	sub	sp, #20
 800b142:	af00      	add	r7, sp, #0
 800b144:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b14c:	b2db      	uxtb	r3, r3
 800b14e:	2b21      	cmp	r3, #33	; 0x21
 800b150:	d13e      	bne.n	800b1d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	689b      	ldr	r3, [r3, #8]
 800b156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b15a:	d114      	bne.n	800b186 <UART_Transmit_IT+0x48>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	691b      	ldr	r3, [r3, #16]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d110      	bne.n	800b186 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6a1b      	ldr	r3, [r3, #32]
 800b168:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	881b      	ldrh	r3, [r3, #0]
 800b16e:	461a      	mov	r2, r3
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b178:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6a1b      	ldr	r3, [r3, #32]
 800b17e:	1c9a      	adds	r2, r3, #2
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	621a      	str	r2, [r3, #32]
 800b184:	e008      	b.n	800b198 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6a1b      	ldr	r3, [r3, #32]
 800b18a:	1c59      	adds	r1, r3, #1
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	6211      	str	r1, [r2, #32]
 800b190:	781a      	ldrb	r2, [r3, #0]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	3b01      	subs	r3, #1
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d10f      	bne.n	800b1cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	68da      	ldr	r2, [r3, #12]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b1ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	68da      	ldr	r2, [r3, #12]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	e000      	b.n	800b1d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b1d0:	2302      	movs	r3, #2
  }
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3714      	adds	r7, #20
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr

0800b1de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b082      	sub	sp, #8
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68da      	ldr	r2, [r3, #12]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b1f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2220      	movs	r2, #32
 800b1fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f7ff fc60 	bl	800aac4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b204:	2300      	movs	r3, #0
}
 800b206:	4618      	mov	r0, r3
 800b208:	3708      	adds	r7, #8
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}

0800b20e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b20e:	b580      	push	{r7, lr}
 800b210:	b08c      	sub	sp, #48	; 0x30
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	2b22      	cmp	r3, #34	; 0x22
 800b220:	f040 80ab 	bne.w	800b37a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	689b      	ldr	r3, [r3, #8]
 800b228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b22c:	d117      	bne.n	800b25e <UART_Receive_IT+0x50>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	691b      	ldr	r3, [r3, #16]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d113      	bne.n	800b25e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b236:	2300      	movs	r3, #0
 800b238:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b23e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	b29b      	uxth	r3, r3
 800b248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b24c:	b29a      	uxth	r2, r3
 800b24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b250:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b256:	1c9a      	adds	r2, r3, #2
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	629a      	str	r2, [r3, #40]	; 0x28
 800b25c:	e026      	b.n	800b2ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b262:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b264:	2300      	movs	r3, #0
 800b266:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	689b      	ldr	r3, [r3, #8]
 800b26c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b270:	d007      	beq.n	800b282 <UART_Receive_IT+0x74>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	689b      	ldr	r3, [r3, #8]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d10a      	bne.n	800b290 <UART_Receive_IT+0x82>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	691b      	ldr	r3, [r3, #16]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d106      	bne.n	800b290 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	b2da      	uxtb	r2, r3
 800b28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b28c:	701a      	strb	r2, [r3, #0]
 800b28e:	e008      	b.n	800b2a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	b2db      	uxtb	r3, r3
 800b298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b29c:	b2da      	uxtb	r2, r3
 800b29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2a6:	1c5a      	adds	r2, r3, #1
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	b29b      	uxth	r3, r3
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d15a      	bne.n	800b376 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	68da      	ldr	r2, [r3, #12]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f022 0220 	bic.w	r2, r2, #32
 800b2ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	68da      	ldr	r2, [r3, #12]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b2de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	695a      	ldr	r2, [r3, #20]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f022 0201 	bic.w	r2, r2, #1
 800b2ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2220      	movs	r2, #32
 800b2f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d135      	bne.n	800b36c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	330c      	adds	r3, #12
 800b30c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	e853 3f00 	ldrex	r3, [r3]
 800b314:	613b      	str	r3, [r7, #16]
   return(result);
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	f023 0310 	bic.w	r3, r3, #16
 800b31c:	627b      	str	r3, [r7, #36]	; 0x24
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	330c      	adds	r3, #12
 800b324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b326:	623a      	str	r2, [r7, #32]
 800b328:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b32a:	69f9      	ldr	r1, [r7, #28]
 800b32c:	6a3a      	ldr	r2, [r7, #32]
 800b32e:	e841 2300 	strex	r3, r2, [r1]
 800b332:	61bb      	str	r3, [r7, #24]
   return(result);
 800b334:	69bb      	ldr	r3, [r7, #24]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d1e5      	bne.n	800b306 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f003 0310 	and.w	r3, r3, #16
 800b344:	2b10      	cmp	r3, #16
 800b346:	d10a      	bne.n	800b35e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b348:	2300      	movs	r3, #0
 800b34a:	60fb      	str	r3, [r7, #12]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	60fb      	str	r3, [r7, #12]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	60fb      	str	r3, [r7, #12]
 800b35c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b362:	4619      	mov	r1, r3
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f7ff fbdf 	bl	800ab28 <HAL_UARTEx_RxEventCallback>
 800b36a:	e002      	b.n	800b372 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f7ff fbbd 	bl	800aaec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b372:	2300      	movs	r3, #0
 800b374:	e002      	b.n	800b37c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b376:	2300      	movs	r3, #0
 800b378:	e000      	b.n	800b37c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b37a:	2302      	movs	r3, #2
  }
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3730      	adds	r7, #48	; 0x30
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b388:	b0c0      	sub	sp, #256	; 0x100
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	691b      	ldr	r3, [r3, #16]
 800b398:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b39c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3a0:	68d9      	ldr	r1, [r3, #12]
 800b3a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3a6:	681a      	ldr	r2, [r3, #0]
 800b3a8:	ea40 0301 	orr.w	r3, r0, r1
 800b3ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b3ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3b2:	689a      	ldr	r2, [r3, #8]
 800b3b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3b8:	691b      	ldr	r3, [r3, #16]
 800b3ba:	431a      	orrs	r2, r3
 800b3bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3c0:	695b      	ldr	r3, [r3, #20]
 800b3c2:	431a      	orrs	r2, r3
 800b3c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3c8:	69db      	ldr	r3, [r3, #28]
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b3d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	68db      	ldr	r3, [r3, #12]
 800b3d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b3dc:	f021 010c 	bic.w	r1, r1, #12
 800b3e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3e4:	681a      	ldr	r2, [r3, #0]
 800b3e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b3ea:	430b      	orrs	r3, r1
 800b3ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b3ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	695b      	ldr	r3, [r3, #20]
 800b3f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b3fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3fe:	6999      	ldr	r1, [r3, #24]
 800b400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b404:	681a      	ldr	r2, [r3, #0]
 800b406:	ea40 0301 	orr.w	r3, r0, r1
 800b40a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b40c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	4b8f      	ldr	r3, [pc, #572]	; (800b650 <UART_SetConfig+0x2cc>)
 800b414:	429a      	cmp	r2, r3
 800b416:	d005      	beq.n	800b424 <UART_SetConfig+0xa0>
 800b418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	4b8d      	ldr	r3, [pc, #564]	; (800b654 <UART_SetConfig+0x2d0>)
 800b420:	429a      	cmp	r2, r3
 800b422:	d104      	bne.n	800b42e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b424:	f7fd feea 	bl	80091fc <HAL_RCC_GetPCLK2Freq>
 800b428:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b42c:	e003      	b.n	800b436 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b42e:	f7fd fed1 	bl	80091d4 <HAL_RCC_GetPCLK1Freq>
 800b432:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b43a:	69db      	ldr	r3, [r3, #28]
 800b43c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b440:	f040 810c 	bne.w	800b65c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b448:	2200      	movs	r2, #0
 800b44a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b44e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b452:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b456:	4622      	mov	r2, r4
 800b458:	462b      	mov	r3, r5
 800b45a:	1891      	adds	r1, r2, r2
 800b45c:	65b9      	str	r1, [r7, #88]	; 0x58
 800b45e:	415b      	adcs	r3, r3
 800b460:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b462:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b466:	4621      	mov	r1, r4
 800b468:	eb12 0801 	adds.w	r8, r2, r1
 800b46c:	4629      	mov	r1, r5
 800b46e:	eb43 0901 	adc.w	r9, r3, r1
 800b472:	f04f 0200 	mov.w	r2, #0
 800b476:	f04f 0300 	mov.w	r3, #0
 800b47a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b47e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b482:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b486:	4690      	mov	r8, r2
 800b488:	4699      	mov	r9, r3
 800b48a:	4623      	mov	r3, r4
 800b48c:	eb18 0303 	adds.w	r3, r8, r3
 800b490:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b494:	462b      	mov	r3, r5
 800b496:	eb49 0303 	adc.w	r3, r9, r3
 800b49a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b49e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b4aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b4ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	18db      	adds	r3, r3, r3
 800b4b6:	653b      	str	r3, [r7, #80]	; 0x50
 800b4b8:	4613      	mov	r3, r2
 800b4ba:	eb42 0303 	adc.w	r3, r2, r3
 800b4be:	657b      	str	r3, [r7, #84]	; 0x54
 800b4c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b4c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b4c8:	f7f5 fbe8 	bl	8000c9c <__aeabi_uldivmod>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	4b61      	ldr	r3, [pc, #388]	; (800b658 <UART_SetConfig+0x2d4>)
 800b4d2:	fba3 2302 	umull	r2, r3, r3, r2
 800b4d6:	095b      	lsrs	r3, r3, #5
 800b4d8:	011c      	lsls	r4, r3, #4
 800b4da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b4de:	2200      	movs	r2, #0
 800b4e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b4e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b4e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b4ec:	4642      	mov	r2, r8
 800b4ee:	464b      	mov	r3, r9
 800b4f0:	1891      	adds	r1, r2, r2
 800b4f2:	64b9      	str	r1, [r7, #72]	; 0x48
 800b4f4:	415b      	adcs	r3, r3
 800b4f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b4fc:	4641      	mov	r1, r8
 800b4fe:	eb12 0a01 	adds.w	sl, r2, r1
 800b502:	4649      	mov	r1, r9
 800b504:	eb43 0b01 	adc.w	fp, r3, r1
 800b508:	f04f 0200 	mov.w	r2, #0
 800b50c:	f04f 0300 	mov.w	r3, #0
 800b510:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b514:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b518:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b51c:	4692      	mov	sl, r2
 800b51e:	469b      	mov	fp, r3
 800b520:	4643      	mov	r3, r8
 800b522:	eb1a 0303 	adds.w	r3, sl, r3
 800b526:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b52a:	464b      	mov	r3, r9
 800b52c:	eb4b 0303 	adc.w	r3, fp, r3
 800b530:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b540:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b544:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b548:	460b      	mov	r3, r1
 800b54a:	18db      	adds	r3, r3, r3
 800b54c:	643b      	str	r3, [r7, #64]	; 0x40
 800b54e:	4613      	mov	r3, r2
 800b550:	eb42 0303 	adc.w	r3, r2, r3
 800b554:	647b      	str	r3, [r7, #68]	; 0x44
 800b556:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b55a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b55e:	f7f5 fb9d 	bl	8000c9c <__aeabi_uldivmod>
 800b562:	4602      	mov	r2, r0
 800b564:	460b      	mov	r3, r1
 800b566:	4611      	mov	r1, r2
 800b568:	4b3b      	ldr	r3, [pc, #236]	; (800b658 <UART_SetConfig+0x2d4>)
 800b56a:	fba3 2301 	umull	r2, r3, r3, r1
 800b56e:	095b      	lsrs	r3, r3, #5
 800b570:	2264      	movs	r2, #100	; 0x64
 800b572:	fb02 f303 	mul.w	r3, r2, r3
 800b576:	1acb      	subs	r3, r1, r3
 800b578:	00db      	lsls	r3, r3, #3
 800b57a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b57e:	4b36      	ldr	r3, [pc, #216]	; (800b658 <UART_SetConfig+0x2d4>)
 800b580:	fba3 2302 	umull	r2, r3, r3, r2
 800b584:	095b      	lsrs	r3, r3, #5
 800b586:	005b      	lsls	r3, r3, #1
 800b588:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b58c:	441c      	add	r4, r3
 800b58e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b592:	2200      	movs	r2, #0
 800b594:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b598:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b59c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b5a0:	4642      	mov	r2, r8
 800b5a2:	464b      	mov	r3, r9
 800b5a4:	1891      	adds	r1, r2, r2
 800b5a6:	63b9      	str	r1, [r7, #56]	; 0x38
 800b5a8:	415b      	adcs	r3, r3
 800b5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b5b0:	4641      	mov	r1, r8
 800b5b2:	1851      	adds	r1, r2, r1
 800b5b4:	6339      	str	r1, [r7, #48]	; 0x30
 800b5b6:	4649      	mov	r1, r9
 800b5b8:	414b      	adcs	r3, r1
 800b5ba:	637b      	str	r3, [r7, #52]	; 0x34
 800b5bc:	f04f 0200 	mov.w	r2, #0
 800b5c0:	f04f 0300 	mov.w	r3, #0
 800b5c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b5c8:	4659      	mov	r1, fp
 800b5ca:	00cb      	lsls	r3, r1, #3
 800b5cc:	4651      	mov	r1, sl
 800b5ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b5d2:	4651      	mov	r1, sl
 800b5d4:	00ca      	lsls	r2, r1, #3
 800b5d6:	4610      	mov	r0, r2
 800b5d8:	4619      	mov	r1, r3
 800b5da:	4603      	mov	r3, r0
 800b5dc:	4642      	mov	r2, r8
 800b5de:	189b      	adds	r3, r3, r2
 800b5e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b5e4:	464b      	mov	r3, r9
 800b5e6:	460a      	mov	r2, r1
 800b5e8:	eb42 0303 	adc.w	r3, r2, r3
 800b5ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b5f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5f4:	685b      	ldr	r3, [r3, #4]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b5fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b600:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b604:	460b      	mov	r3, r1
 800b606:	18db      	adds	r3, r3, r3
 800b608:	62bb      	str	r3, [r7, #40]	; 0x28
 800b60a:	4613      	mov	r3, r2
 800b60c:	eb42 0303 	adc.w	r3, r2, r3
 800b610:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b612:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b616:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b61a:	f7f5 fb3f 	bl	8000c9c <__aeabi_uldivmod>
 800b61e:	4602      	mov	r2, r0
 800b620:	460b      	mov	r3, r1
 800b622:	4b0d      	ldr	r3, [pc, #52]	; (800b658 <UART_SetConfig+0x2d4>)
 800b624:	fba3 1302 	umull	r1, r3, r3, r2
 800b628:	095b      	lsrs	r3, r3, #5
 800b62a:	2164      	movs	r1, #100	; 0x64
 800b62c:	fb01 f303 	mul.w	r3, r1, r3
 800b630:	1ad3      	subs	r3, r2, r3
 800b632:	00db      	lsls	r3, r3, #3
 800b634:	3332      	adds	r3, #50	; 0x32
 800b636:	4a08      	ldr	r2, [pc, #32]	; (800b658 <UART_SetConfig+0x2d4>)
 800b638:	fba2 2303 	umull	r2, r3, r2, r3
 800b63c:	095b      	lsrs	r3, r3, #5
 800b63e:	f003 0207 	and.w	r2, r3, #7
 800b642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4422      	add	r2, r4
 800b64a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b64c:	e106      	b.n	800b85c <UART_SetConfig+0x4d8>
 800b64e:	bf00      	nop
 800b650:	40011000 	.word	0x40011000
 800b654:	40011400 	.word	0x40011400
 800b658:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b65c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b660:	2200      	movs	r2, #0
 800b662:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b666:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b66a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b66e:	4642      	mov	r2, r8
 800b670:	464b      	mov	r3, r9
 800b672:	1891      	adds	r1, r2, r2
 800b674:	6239      	str	r1, [r7, #32]
 800b676:	415b      	adcs	r3, r3
 800b678:	627b      	str	r3, [r7, #36]	; 0x24
 800b67a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b67e:	4641      	mov	r1, r8
 800b680:	1854      	adds	r4, r2, r1
 800b682:	4649      	mov	r1, r9
 800b684:	eb43 0501 	adc.w	r5, r3, r1
 800b688:	f04f 0200 	mov.w	r2, #0
 800b68c:	f04f 0300 	mov.w	r3, #0
 800b690:	00eb      	lsls	r3, r5, #3
 800b692:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b696:	00e2      	lsls	r2, r4, #3
 800b698:	4614      	mov	r4, r2
 800b69a:	461d      	mov	r5, r3
 800b69c:	4643      	mov	r3, r8
 800b69e:	18e3      	adds	r3, r4, r3
 800b6a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b6a4:	464b      	mov	r3, r9
 800b6a6:	eb45 0303 	adc.w	r3, r5, r3
 800b6aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b6ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b6ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b6be:	f04f 0200 	mov.w	r2, #0
 800b6c2:	f04f 0300 	mov.w	r3, #0
 800b6c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b6ca:	4629      	mov	r1, r5
 800b6cc:	008b      	lsls	r3, r1, #2
 800b6ce:	4621      	mov	r1, r4
 800b6d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b6d4:	4621      	mov	r1, r4
 800b6d6:	008a      	lsls	r2, r1, #2
 800b6d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b6dc:	f7f5 fade 	bl	8000c9c <__aeabi_uldivmod>
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	460b      	mov	r3, r1
 800b6e4:	4b60      	ldr	r3, [pc, #384]	; (800b868 <UART_SetConfig+0x4e4>)
 800b6e6:	fba3 2302 	umull	r2, r3, r3, r2
 800b6ea:	095b      	lsrs	r3, r3, #5
 800b6ec:	011c      	lsls	r4, r3, #4
 800b6ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b6f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b6fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b700:	4642      	mov	r2, r8
 800b702:	464b      	mov	r3, r9
 800b704:	1891      	adds	r1, r2, r2
 800b706:	61b9      	str	r1, [r7, #24]
 800b708:	415b      	adcs	r3, r3
 800b70a:	61fb      	str	r3, [r7, #28]
 800b70c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b710:	4641      	mov	r1, r8
 800b712:	1851      	adds	r1, r2, r1
 800b714:	6139      	str	r1, [r7, #16]
 800b716:	4649      	mov	r1, r9
 800b718:	414b      	adcs	r3, r1
 800b71a:	617b      	str	r3, [r7, #20]
 800b71c:	f04f 0200 	mov.w	r2, #0
 800b720:	f04f 0300 	mov.w	r3, #0
 800b724:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b728:	4659      	mov	r1, fp
 800b72a:	00cb      	lsls	r3, r1, #3
 800b72c:	4651      	mov	r1, sl
 800b72e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b732:	4651      	mov	r1, sl
 800b734:	00ca      	lsls	r2, r1, #3
 800b736:	4610      	mov	r0, r2
 800b738:	4619      	mov	r1, r3
 800b73a:	4603      	mov	r3, r0
 800b73c:	4642      	mov	r2, r8
 800b73e:	189b      	adds	r3, r3, r2
 800b740:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b744:	464b      	mov	r3, r9
 800b746:	460a      	mov	r2, r1
 800b748:	eb42 0303 	adc.w	r3, r2, r3
 800b74c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	2200      	movs	r2, #0
 800b758:	67bb      	str	r3, [r7, #120]	; 0x78
 800b75a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b75c:	f04f 0200 	mov.w	r2, #0
 800b760:	f04f 0300 	mov.w	r3, #0
 800b764:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b768:	4649      	mov	r1, r9
 800b76a:	008b      	lsls	r3, r1, #2
 800b76c:	4641      	mov	r1, r8
 800b76e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b772:	4641      	mov	r1, r8
 800b774:	008a      	lsls	r2, r1, #2
 800b776:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b77a:	f7f5 fa8f 	bl	8000c9c <__aeabi_uldivmod>
 800b77e:	4602      	mov	r2, r0
 800b780:	460b      	mov	r3, r1
 800b782:	4611      	mov	r1, r2
 800b784:	4b38      	ldr	r3, [pc, #224]	; (800b868 <UART_SetConfig+0x4e4>)
 800b786:	fba3 2301 	umull	r2, r3, r3, r1
 800b78a:	095b      	lsrs	r3, r3, #5
 800b78c:	2264      	movs	r2, #100	; 0x64
 800b78e:	fb02 f303 	mul.w	r3, r2, r3
 800b792:	1acb      	subs	r3, r1, r3
 800b794:	011b      	lsls	r3, r3, #4
 800b796:	3332      	adds	r3, #50	; 0x32
 800b798:	4a33      	ldr	r2, [pc, #204]	; (800b868 <UART_SetConfig+0x4e4>)
 800b79a:	fba2 2303 	umull	r2, r3, r2, r3
 800b79e:	095b      	lsrs	r3, r3, #5
 800b7a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b7a4:	441c      	add	r4, r3
 800b7a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	673b      	str	r3, [r7, #112]	; 0x70
 800b7ae:	677a      	str	r2, [r7, #116]	; 0x74
 800b7b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b7b4:	4642      	mov	r2, r8
 800b7b6:	464b      	mov	r3, r9
 800b7b8:	1891      	adds	r1, r2, r2
 800b7ba:	60b9      	str	r1, [r7, #8]
 800b7bc:	415b      	adcs	r3, r3
 800b7be:	60fb      	str	r3, [r7, #12]
 800b7c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b7c4:	4641      	mov	r1, r8
 800b7c6:	1851      	adds	r1, r2, r1
 800b7c8:	6039      	str	r1, [r7, #0]
 800b7ca:	4649      	mov	r1, r9
 800b7cc:	414b      	adcs	r3, r1
 800b7ce:	607b      	str	r3, [r7, #4]
 800b7d0:	f04f 0200 	mov.w	r2, #0
 800b7d4:	f04f 0300 	mov.w	r3, #0
 800b7d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b7dc:	4659      	mov	r1, fp
 800b7de:	00cb      	lsls	r3, r1, #3
 800b7e0:	4651      	mov	r1, sl
 800b7e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b7e6:	4651      	mov	r1, sl
 800b7e8:	00ca      	lsls	r2, r1, #3
 800b7ea:	4610      	mov	r0, r2
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	4642      	mov	r2, r8
 800b7f2:	189b      	adds	r3, r3, r2
 800b7f4:	66bb      	str	r3, [r7, #104]	; 0x68
 800b7f6:	464b      	mov	r3, r9
 800b7f8:	460a      	mov	r2, r1
 800b7fa:	eb42 0303 	adc.w	r3, r2, r3
 800b7fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	2200      	movs	r2, #0
 800b808:	663b      	str	r3, [r7, #96]	; 0x60
 800b80a:	667a      	str	r2, [r7, #100]	; 0x64
 800b80c:	f04f 0200 	mov.w	r2, #0
 800b810:	f04f 0300 	mov.w	r3, #0
 800b814:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b818:	4649      	mov	r1, r9
 800b81a:	008b      	lsls	r3, r1, #2
 800b81c:	4641      	mov	r1, r8
 800b81e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b822:	4641      	mov	r1, r8
 800b824:	008a      	lsls	r2, r1, #2
 800b826:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b82a:	f7f5 fa37 	bl	8000c9c <__aeabi_uldivmod>
 800b82e:	4602      	mov	r2, r0
 800b830:	460b      	mov	r3, r1
 800b832:	4b0d      	ldr	r3, [pc, #52]	; (800b868 <UART_SetConfig+0x4e4>)
 800b834:	fba3 1302 	umull	r1, r3, r3, r2
 800b838:	095b      	lsrs	r3, r3, #5
 800b83a:	2164      	movs	r1, #100	; 0x64
 800b83c:	fb01 f303 	mul.w	r3, r1, r3
 800b840:	1ad3      	subs	r3, r2, r3
 800b842:	011b      	lsls	r3, r3, #4
 800b844:	3332      	adds	r3, #50	; 0x32
 800b846:	4a08      	ldr	r2, [pc, #32]	; (800b868 <UART_SetConfig+0x4e4>)
 800b848:	fba2 2303 	umull	r2, r3, r2, r3
 800b84c:	095b      	lsrs	r3, r3, #5
 800b84e:	f003 020f 	and.w	r2, r3, #15
 800b852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	4422      	add	r2, r4
 800b85a:	609a      	str	r2, [r3, #8]
}
 800b85c:	bf00      	nop
 800b85e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b862:	46bd      	mov	sp, r7
 800b864:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b868:	51eb851f 	.word	0x51eb851f

0800b86c <__NVIC_SetPriority>:
{
 800b86c:	b480      	push	{r7}
 800b86e:	b083      	sub	sp, #12
 800b870:	af00      	add	r7, sp, #0
 800b872:	4603      	mov	r3, r0
 800b874:	6039      	str	r1, [r7, #0]
 800b876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	db0a      	blt.n	800b896 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	b2da      	uxtb	r2, r3
 800b884:	490c      	ldr	r1, [pc, #48]	; (800b8b8 <__NVIC_SetPriority+0x4c>)
 800b886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b88a:	0112      	lsls	r2, r2, #4
 800b88c:	b2d2      	uxtb	r2, r2
 800b88e:	440b      	add	r3, r1
 800b890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b894:	e00a      	b.n	800b8ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	b2da      	uxtb	r2, r3
 800b89a:	4908      	ldr	r1, [pc, #32]	; (800b8bc <__NVIC_SetPriority+0x50>)
 800b89c:	79fb      	ldrb	r3, [r7, #7]
 800b89e:	f003 030f 	and.w	r3, r3, #15
 800b8a2:	3b04      	subs	r3, #4
 800b8a4:	0112      	lsls	r2, r2, #4
 800b8a6:	b2d2      	uxtb	r2, r2
 800b8a8:	440b      	add	r3, r1
 800b8aa:	761a      	strb	r2, [r3, #24]
}
 800b8ac:	bf00      	nop
 800b8ae:	370c      	adds	r7, #12
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr
 800b8b8:	e000e100 	.word	0xe000e100
 800b8bc:	e000ed00 	.word	0xe000ed00

0800b8c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b8c4:	4b05      	ldr	r3, [pc, #20]	; (800b8dc <SysTick_Handler+0x1c>)
 800b8c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b8c8:	f001 fe38 	bl	800d53c <xTaskGetSchedulerState>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	2b01      	cmp	r3, #1
 800b8d0:	d001      	beq.n	800b8d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b8d2:	f002 fd21 	bl	800e318 <xPortSysTickHandler>
  }
}
 800b8d6:	bf00      	nop
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	e000e010 	.word	0xe000e010

0800b8e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b8e4:	2100      	movs	r1, #0
 800b8e6:	f06f 0004 	mvn.w	r0, #4
 800b8ea:	f7ff ffbf 	bl	800b86c <__NVIC_SetPriority>
#endif
}
 800b8ee:	bf00      	nop
 800b8f0:	bd80      	pop	{r7, pc}
	...

0800b8f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8fa:	f3ef 8305 	mrs	r3, IPSR
 800b8fe:	603b      	str	r3, [r7, #0]
  return(result);
 800b900:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b902:	2b00      	cmp	r3, #0
 800b904:	d003      	beq.n	800b90e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b906:	f06f 0305 	mvn.w	r3, #5
 800b90a:	607b      	str	r3, [r7, #4]
 800b90c:	e00c      	b.n	800b928 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b90e:	4b0a      	ldr	r3, [pc, #40]	; (800b938 <osKernelInitialize+0x44>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d105      	bne.n	800b922 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b916:	4b08      	ldr	r3, [pc, #32]	; (800b938 <osKernelInitialize+0x44>)
 800b918:	2201      	movs	r2, #1
 800b91a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b91c:	2300      	movs	r3, #0
 800b91e:	607b      	str	r3, [r7, #4]
 800b920:	e002      	b.n	800b928 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b922:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b926:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b928:	687b      	ldr	r3, [r7, #4]
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	370c      	adds	r7, #12
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr
 800b936:	bf00      	nop
 800b938:	20004d84 	.word	0x20004d84

0800b93c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b082      	sub	sp, #8
 800b940:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b942:	f3ef 8305 	mrs	r3, IPSR
 800b946:	603b      	str	r3, [r7, #0]
  return(result);
 800b948:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d003      	beq.n	800b956 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b94e:	f06f 0305 	mvn.w	r3, #5
 800b952:	607b      	str	r3, [r7, #4]
 800b954:	e010      	b.n	800b978 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b956:	4b0b      	ldr	r3, [pc, #44]	; (800b984 <osKernelStart+0x48>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	d109      	bne.n	800b972 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b95e:	f7ff ffbf 	bl	800b8e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b962:	4b08      	ldr	r3, [pc, #32]	; (800b984 <osKernelStart+0x48>)
 800b964:	2202      	movs	r2, #2
 800b966:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b968:	f001 f966 	bl	800cc38 <vTaskStartScheduler>
      stat = osOK;
 800b96c:	2300      	movs	r3, #0
 800b96e:	607b      	str	r3, [r7, #4]
 800b970:	e002      	b.n	800b978 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b976:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b978:	687b      	ldr	r3, [r7, #4]
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3708      	adds	r7, #8
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
 800b982:	bf00      	nop
 800b984:	20004d84 	.word	0x20004d84

0800b988 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b990:	f3ef 8305 	mrs	r3, IPSR
 800b994:	60bb      	str	r3, [r7, #8]
  return(result);
 800b996:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d003      	beq.n	800b9a4 <osDelay+0x1c>
    stat = osErrorISR;
 800b99c:	f06f 0305 	mvn.w	r3, #5
 800b9a0:	60fb      	str	r3, [r7, #12]
 800b9a2:	e007      	b.n	800b9b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d002      	beq.n	800b9b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f001 f90e 	bl	800cbd0 <vTaskDelay>
    }
  }

  return (stat);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
	...

0800b9c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b9c0:	b480      	push	{r7}
 800b9c2:	b085      	sub	sp, #20
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	60f8      	str	r0, [r7, #12]
 800b9c8:	60b9      	str	r1, [r7, #8]
 800b9ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	4a07      	ldr	r2, [pc, #28]	; (800b9ec <vApplicationGetIdleTaskMemory+0x2c>)
 800b9d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	4a06      	ldr	r2, [pc, #24]	; (800b9f0 <vApplicationGetIdleTaskMemory+0x30>)
 800b9d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2280      	movs	r2, #128	; 0x80
 800b9dc:	601a      	str	r2, [r3, #0]
}
 800b9de:	bf00      	nop
 800b9e0:	3714      	adds	r7, #20
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr
 800b9ea:	bf00      	nop
 800b9ec:	20004d88 	.word	0x20004d88
 800b9f0:	20004e30 	.word	0x20004e30

0800b9f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b9f4:	b480      	push	{r7}
 800b9f6:	b085      	sub	sp, #20
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	60f8      	str	r0, [r7, #12]
 800b9fc:	60b9      	str	r1, [r7, #8]
 800b9fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	4a07      	ldr	r2, [pc, #28]	; (800ba20 <vApplicationGetTimerTaskMemory+0x2c>)
 800ba04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	4a06      	ldr	r2, [pc, #24]	; (800ba24 <vApplicationGetTimerTaskMemory+0x30>)
 800ba0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba12:	601a      	str	r2, [r3, #0]
}
 800ba14:	bf00      	nop
 800ba16:	3714      	adds	r7, #20
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr
 800ba20:	20005030 	.word	0x20005030
 800ba24:	200050d8 	.word	0x200050d8

0800ba28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b083      	sub	sp, #12
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f103 0208 	add.w	r2, r3, #8
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f103 0208 	add.w	r2, r3, #8
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f103 0208 	add.w	r2, r3, #8
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ba5c:	bf00      	nop
 800ba5e:	370c      	adds	r7, #12
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr

0800ba68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b083      	sub	sp, #12
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2200      	movs	r2, #0
 800ba74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ba76:	bf00      	nop
 800ba78:	370c      	adds	r7, #12
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr

0800ba82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ba82:	b480      	push	{r7}
 800ba84:	b085      	sub	sp, #20
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
 800ba8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	68fa      	ldr	r2, [r7, #12]
 800ba96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	689a      	ldr	r2, [r3, #8]
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	689b      	ldr	r3, [r3, #8]
 800baa4:	683a      	ldr	r2, [r7, #0]
 800baa6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	683a      	ldr	r2, [r7, #0]
 800baac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	687a      	ldr	r2, [r7, #4]
 800bab2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	1c5a      	adds	r2, r3, #1
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	601a      	str	r2, [r3, #0]
}
 800babe:	bf00      	nop
 800bac0:	3714      	adds	r7, #20
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr

0800baca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800baca:	b480      	push	{r7}
 800bacc:	b085      	sub	sp, #20
 800bace:	af00      	add	r7, sp, #0
 800bad0:	6078      	str	r0, [r7, #4]
 800bad2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bae0:	d103      	bne.n	800baea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	691b      	ldr	r3, [r3, #16]
 800bae6:	60fb      	str	r3, [r7, #12]
 800bae8:	e00c      	b.n	800bb04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	3308      	adds	r3, #8
 800baee:	60fb      	str	r3, [r7, #12]
 800baf0:	e002      	b.n	800baf8 <vListInsert+0x2e>
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	60fb      	str	r3, [r7, #12]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	68ba      	ldr	r2, [r7, #8]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d2f6      	bcs.n	800baf2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	685a      	ldr	r2, [r3, #4]
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	683a      	ldr	r2, [r7, #0]
 800bb12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	68fa      	ldr	r2, [r7, #12]
 800bb18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	683a      	ldr	r2, [r7, #0]
 800bb1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	1c5a      	adds	r2, r3, #1
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	601a      	str	r2, [r3, #0]
}
 800bb30:	bf00      	nop
 800bb32:	3714      	adds	r7, #20
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr

0800bb3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b085      	sub	sp, #20
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	691b      	ldr	r3, [r3, #16]
 800bb48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	685b      	ldr	r3, [r3, #4]
 800bb4e:	687a      	ldr	r2, [r7, #4]
 800bb50:	6892      	ldr	r2, [r2, #8]
 800bb52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	6852      	ldr	r2, [r2, #4]
 800bb5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d103      	bne.n	800bb70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	689a      	ldr	r2, [r3, #8]
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2200      	movs	r2, #0
 800bb74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	1e5a      	subs	r2, r3, #1
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3714      	adds	r7, #20
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d10a      	bne.n	800bbba <xQueueGenericReset+0x2a>
	__asm volatile
 800bba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba8:	f383 8811 	msr	BASEPRI, r3
 800bbac:	f3bf 8f6f 	isb	sy
 800bbb0:	f3bf 8f4f 	dsb	sy
 800bbb4:	60bb      	str	r3, [r7, #8]
}
 800bbb6:	bf00      	nop
 800bbb8:	e7fe      	b.n	800bbb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bbba:	f002 fb1b 	bl	800e1f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681a      	ldr	r2, [r3, #0]
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbc6:	68f9      	ldr	r1, [r7, #12]
 800bbc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bbca:	fb01 f303 	mul.w	r3, r1, r3
 800bbce:	441a      	add	r2, r3
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681a      	ldr	r2, [r3, #0]
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbea:	3b01      	subs	r3, #1
 800bbec:	68f9      	ldr	r1, [r7, #12]
 800bbee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bbf0:	fb01 f303 	mul.w	r3, r1, r3
 800bbf4:	441a      	add	r2, r3
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	22ff      	movs	r2, #255	; 0xff
 800bbfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	22ff      	movs	r2, #255	; 0xff
 800bc06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d114      	bne.n	800bc3a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	691b      	ldr	r3, [r3, #16]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d01a      	beq.n	800bc4e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	3310      	adds	r3, #16
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f001 faa5 	bl	800d16c <xTaskRemoveFromEventList>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d012      	beq.n	800bc4e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bc28:	4b0c      	ldr	r3, [pc, #48]	; (800bc5c <xQueueGenericReset+0xcc>)
 800bc2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc2e:	601a      	str	r2, [r3, #0]
 800bc30:	f3bf 8f4f 	dsb	sy
 800bc34:	f3bf 8f6f 	isb	sy
 800bc38:	e009      	b.n	800bc4e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	3310      	adds	r3, #16
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f7ff fef2 	bl	800ba28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	3324      	adds	r3, #36	; 0x24
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f7ff feed 	bl	800ba28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bc4e:	f002 fb01 	bl	800e254 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bc52:	2301      	movs	r3, #1
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3710      	adds	r7, #16
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	e000ed04 	.word	0xe000ed04

0800bc60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b08e      	sub	sp, #56	; 0x38
 800bc64:	af02      	add	r7, sp, #8
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	60b9      	str	r1, [r7, #8]
 800bc6a:	607a      	str	r2, [r7, #4]
 800bc6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d10a      	bne.n	800bc8a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bc74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc78:	f383 8811 	msr	BASEPRI, r3
 800bc7c:	f3bf 8f6f 	isb	sy
 800bc80:	f3bf 8f4f 	dsb	sy
 800bc84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bc86:	bf00      	nop
 800bc88:	e7fe      	b.n	800bc88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d10a      	bne.n	800bca6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bc90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc94:	f383 8811 	msr	BASEPRI, r3
 800bc98:	f3bf 8f6f 	isb	sy
 800bc9c:	f3bf 8f4f 	dsb	sy
 800bca0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bca2:	bf00      	nop
 800bca4:	e7fe      	b.n	800bca4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d002      	beq.n	800bcb2 <xQueueGenericCreateStatic+0x52>
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d001      	beq.n	800bcb6 <xQueueGenericCreateStatic+0x56>
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	e000      	b.n	800bcb8 <xQueueGenericCreateStatic+0x58>
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d10a      	bne.n	800bcd2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bcbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc0:	f383 8811 	msr	BASEPRI, r3
 800bcc4:	f3bf 8f6f 	isb	sy
 800bcc8:	f3bf 8f4f 	dsb	sy
 800bccc:	623b      	str	r3, [r7, #32]
}
 800bcce:	bf00      	nop
 800bcd0:	e7fe      	b.n	800bcd0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d102      	bne.n	800bcde <xQueueGenericCreateStatic+0x7e>
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d101      	bne.n	800bce2 <xQueueGenericCreateStatic+0x82>
 800bcde:	2301      	movs	r3, #1
 800bce0:	e000      	b.n	800bce4 <xQueueGenericCreateStatic+0x84>
 800bce2:	2300      	movs	r3, #0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d10a      	bne.n	800bcfe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcec:	f383 8811 	msr	BASEPRI, r3
 800bcf0:	f3bf 8f6f 	isb	sy
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	61fb      	str	r3, [r7, #28]
}
 800bcfa:	bf00      	nop
 800bcfc:	e7fe      	b.n	800bcfc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bcfe:	2350      	movs	r3, #80	; 0x50
 800bd00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	2b50      	cmp	r3, #80	; 0x50
 800bd06:	d00a      	beq.n	800bd1e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bd08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0c:	f383 8811 	msr	BASEPRI, r3
 800bd10:	f3bf 8f6f 	isb	sy
 800bd14:	f3bf 8f4f 	dsb	sy
 800bd18:	61bb      	str	r3, [r7, #24]
}
 800bd1a:	bf00      	nop
 800bd1c:	e7fe      	b.n	800bd1c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bd1e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d00d      	beq.n	800bd46 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bd2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bd32:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd38:	9300      	str	r3, [sp, #0]
 800bd3a:	4613      	mov	r3, r2
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	68b9      	ldr	r1, [r7, #8]
 800bd40:	68f8      	ldr	r0, [r7, #12]
 800bd42:	f000 f83f 	bl	800bdc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3730      	adds	r7, #48	; 0x30
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b08a      	sub	sp, #40	; 0x28
 800bd54:	af02      	add	r7, sp, #8
 800bd56:	60f8      	str	r0, [r7, #12]
 800bd58:	60b9      	str	r1, [r7, #8]
 800bd5a:	4613      	mov	r3, r2
 800bd5c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d10a      	bne.n	800bd7a <xQueueGenericCreate+0x2a>
	__asm volatile
 800bd64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd68:	f383 8811 	msr	BASEPRI, r3
 800bd6c:	f3bf 8f6f 	isb	sy
 800bd70:	f3bf 8f4f 	dsb	sy
 800bd74:	613b      	str	r3, [r7, #16]
}
 800bd76:	bf00      	nop
 800bd78:	e7fe      	b.n	800bd78 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	68ba      	ldr	r2, [r7, #8]
 800bd7e:	fb02 f303 	mul.w	r3, r2, r3
 800bd82:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bd84:	69fb      	ldr	r3, [r7, #28]
 800bd86:	3350      	adds	r3, #80	; 0x50
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f002 fb55 	bl	800e438 <pvPortMalloc>
 800bd8e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bd90:	69bb      	ldr	r3, [r7, #24]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d011      	beq.n	800bdba <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bd96:	69bb      	ldr	r3, [r7, #24]
 800bd98:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	3350      	adds	r3, #80	; 0x50
 800bd9e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bda0:	69bb      	ldr	r3, [r7, #24]
 800bda2:	2200      	movs	r2, #0
 800bda4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bda8:	79fa      	ldrb	r2, [r7, #7]
 800bdaa:	69bb      	ldr	r3, [r7, #24]
 800bdac:	9300      	str	r3, [sp, #0]
 800bdae:	4613      	mov	r3, r2
 800bdb0:	697a      	ldr	r2, [r7, #20]
 800bdb2:	68b9      	ldr	r1, [r7, #8]
 800bdb4:	68f8      	ldr	r0, [r7, #12]
 800bdb6:	f000 f805 	bl	800bdc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bdba:	69bb      	ldr	r3, [r7, #24]
	}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3720      	adds	r7, #32
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b084      	sub	sp, #16
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	60f8      	str	r0, [r7, #12]
 800bdcc:	60b9      	str	r1, [r7, #8]
 800bdce:	607a      	str	r2, [r7, #4]
 800bdd0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d103      	bne.n	800bde0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bdd8:	69bb      	ldr	r3, [r7, #24]
 800bdda:	69ba      	ldr	r2, [r7, #24]
 800bddc:	601a      	str	r2, [r3, #0]
 800bdde:	e002      	b.n	800bde6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bde0:	69bb      	ldr	r3, [r7, #24]
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bde6:	69bb      	ldr	r3, [r7, #24]
 800bde8:	68fa      	ldr	r2, [r7, #12]
 800bdea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bdec:	69bb      	ldr	r3, [r7, #24]
 800bdee:	68ba      	ldr	r2, [r7, #8]
 800bdf0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bdf2:	2101      	movs	r1, #1
 800bdf4:	69b8      	ldr	r0, [r7, #24]
 800bdf6:	f7ff fecb 	bl	800bb90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bdfa:	69bb      	ldr	r3, [r7, #24]
 800bdfc:	78fa      	ldrb	r2, [r7, #3]
 800bdfe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800be02:	bf00      	nop
 800be04:	3710      	adds	r7, #16
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
	...

0800be0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b08e      	sub	sp, #56	; 0x38
 800be10:	af00      	add	r7, sp, #0
 800be12:	60f8      	str	r0, [r7, #12]
 800be14:	60b9      	str	r1, [r7, #8]
 800be16:	607a      	str	r2, [r7, #4]
 800be18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800be1a:	2300      	movs	r3, #0
 800be1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800be22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be24:	2b00      	cmp	r3, #0
 800be26:	d10a      	bne.n	800be3e <xQueueGenericSend+0x32>
	__asm volatile
 800be28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be2c:	f383 8811 	msr	BASEPRI, r3
 800be30:	f3bf 8f6f 	isb	sy
 800be34:	f3bf 8f4f 	dsb	sy
 800be38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800be3a:	bf00      	nop
 800be3c:	e7fe      	b.n	800be3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d103      	bne.n	800be4c <xQueueGenericSend+0x40>
 800be44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d101      	bne.n	800be50 <xQueueGenericSend+0x44>
 800be4c:	2301      	movs	r3, #1
 800be4e:	e000      	b.n	800be52 <xQueueGenericSend+0x46>
 800be50:	2300      	movs	r3, #0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d10a      	bne.n	800be6c <xQueueGenericSend+0x60>
	__asm volatile
 800be56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be5a:	f383 8811 	msr	BASEPRI, r3
 800be5e:	f3bf 8f6f 	isb	sy
 800be62:	f3bf 8f4f 	dsb	sy
 800be66:	627b      	str	r3, [r7, #36]	; 0x24
}
 800be68:	bf00      	nop
 800be6a:	e7fe      	b.n	800be6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	2b02      	cmp	r3, #2
 800be70:	d103      	bne.n	800be7a <xQueueGenericSend+0x6e>
 800be72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be76:	2b01      	cmp	r3, #1
 800be78:	d101      	bne.n	800be7e <xQueueGenericSend+0x72>
 800be7a:	2301      	movs	r3, #1
 800be7c:	e000      	b.n	800be80 <xQueueGenericSend+0x74>
 800be7e:	2300      	movs	r3, #0
 800be80:	2b00      	cmp	r3, #0
 800be82:	d10a      	bne.n	800be9a <xQueueGenericSend+0x8e>
	__asm volatile
 800be84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be88:	f383 8811 	msr	BASEPRI, r3
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	623b      	str	r3, [r7, #32]
}
 800be96:	bf00      	nop
 800be98:	e7fe      	b.n	800be98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be9a:	f001 fb4f 	bl	800d53c <xTaskGetSchedulerState>
 800be9e:	4603      	mov	r3, r0
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d102      	bne.n	800beaa <xQueueGenericSend+0x9e>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d101      	bne.n	800beae <xQueueGenericSend+0xa2>
 800beaa:	2301      	movs	r3, #1
 800beac:	e000      	b.n	800beb0 <xQueueGenericSend+0xa4>
 800beae:	2300      	movs	r3, #0
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d10a      	bne.n	800beca <xQueueGenericSend+0xbe>
	__asm volatile
 800beb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb8:	f383 8811 	msr	BASEPRI, r3
 800bebc:	f3bf 8f6f 	isb	sy
 800bec0:	f3bf 8f4f 	dsb	sy
 800bec4:	61fb      	str	r3, [r7, #28]
}
 800bec6:	bf00      	nop
 800bec8:	e7fe      	b.n	800bec8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800beca:	f002 f993 	bl	800e1f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d302      	bcc.n	800bee0 <xQueueGenericSend+0xd4>
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	2b02      	cmp	r3, #2
 800bede:	d129      	bne.n	800bf34 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bee0:	683a      	ldr	r2, [r7, #0]
 800bee2:	68b9      	ldr	r1, [r7, #8]
 800bee4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bee6:	f000 fb4d 	bl	800c584 <prvCopyDataToQueue>
 800beea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800beec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d010      	beq.n	800bf16 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef6:	3324      	adds	r3, #36	; 0x24
 800bef8:	4618      	mov	r0, r3
 800befa:	f001 f937 	bl	800d16c <xTaskRemoveFromEventList>
 800befe:	4603      	mov	r3, r0
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d013      	beq.n	800bf2c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bf04:	4b3f      	ldr	r3, [pc, #252]	; (800c004 <xQueueGenericSend+0x1f8>)
 800bf06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf0a:	601a      	str	r2, [r3, #0]
 800bf0c:	f3bf 8f4f 	dsb	sy
 800bf10:	f3bf 8f6f 	isb	sy
 800bf14:	e00a      	b.n	800bf2c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bf16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d007      	beq.n	800bf2c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bf1c:	4b39      	ldr	r3, [pc, #228]	; (800c004 <xQueueGenericSend+0x1f8>)
 800bf1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf22:	601a      	str	r2, [r3, #0]
 800bf24:	f3bf 8f4f 	dsb	sy
 800bf28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bf2c:	f002 f992 	bl	800e254 <vPortExitCritical>
				return pdPASS;
 800bf30:	2301      	movs	r3, #1
 800bf32:	e063      	b.n	800bffc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d103      	bne.n	800bf42 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bf3a:	f002 f98b 	bl	800e254 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	e05c      	b.n	800bffc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d106      	bne.n	800bf56 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf48:	f107 0314 	add.w	r3, r7, #20
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f001 f997 	bl	800d280 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf52:	2301      	movs	r3, #1
 800bf54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf56:	f002 f97d 	bl	800e254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf5a:	f000 fedd 	bl	800cd18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf5e:	f002 f949 	bl	800e1f4 <vPortEnterCritical>
 800bf62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf68:	b25b      	sxtb	r3, r3
 800bf6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf6e:	d103      	bne.n	800bf78 <xQueueGenericSend+0x16c>
 800bf70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf72:	2200      	movs	r2, #0
 800bf74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf7e:	b25b      	sxtb	r3, r3
 800bf80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf84:	d103      	bne.n	800bf8e <xQueueGenericSend+0x182>
 800bf86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf88:	2200      	movs	r2, #0
 800bf8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf8e:	f002 f961 	bl	800e254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf92:	1d3a      	adds	r2, r7, #4
 800bf94:	f107 0314 	add.w	r3, r7, #20
 800bf98:	4611      	mov	r1, r2
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f001 f986 	bl	800d2ac <xTaskCheckForTimeOut>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d124      	bne.n	800bff0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bfa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfa8:	f000 fbe4 	bl	800c774 <prvIsQueueFull>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d018      	beq.n	800bfe4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb4:	3310      	adds	r3, #16
 800bfb6:	687a      	ldr	r2, [r7, #4]
 800bfb8:	4611      	mov	r1, r2
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f001 f886 	bl	800d0cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bfc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfc2:	f000 fb6f 	bl	800c6a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bfc6:	f000 feb5 	bl	800cd34 <xTaskResumeAll>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	f47f af7c 	bne.w	800beca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bfd2:	4b0c      	ldr	r3, [pc, #48]	; (800c004 <xQueueGenericSend+0x1f8>)
 800bfd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfd8:	601a      	str	r2, [r3, #0]
 800bfda:	f3bf 8f4f 	dsb	sy
 800bfde:	f3bf 8f6f 	isb	sy
 800bfe2:	e772      	b.n	800beca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bfe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfe6:	f000 fb5d 	bl	800c6a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bfea:	f000 fea3 	bl	800cd34 <xTaskResumeAll>
 800bfee:	e76c      	b.n	800beca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bff2:	f000 fb57 	bl	800c6a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bff6:	f000 fe9d 	bl	800cd34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bffa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3738      	adds	r7, #56	; 0x38
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}
 800c004:	e000ed04 	.word	0xe000ed04

0800c008 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b090      	sub	sp, #64	; 0x40
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	60b9      	str	r1, [r7, #8]
 800c012:	607a      	str	r2, [r7, #4]
 800c014:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d10a      	bne.n	800c036 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c024:	f383 8811 	msr	BASEPRI, r3
 800c028:	f3bf 8f6f 	isb	sy
 800c02c:	f3bf 8f4f 	dsb	sy
 800c030:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c032:	bf00      	nop
 800c034:	e7fe      	b.n	800c034 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d103      	bne.n	800c044 <xQueueGenericSendFromISR+0x3c>
 800c03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c040:	2b00      	cmp	r3, #0
 800c042:	d101      	bne.n	800c048 <xQueueGenericSendFromISR+0x40>
 800c044:	2301      	movs	r3, #1
 800c046:	e000      	b.n	800c04a <xQueueGenericSendFromISR+0x42>
 800c048:	2300      	movs	r3, #0
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d10a      	bne.n	800c064 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c052:	f383 8811 	msr	BASEPRI, r3
 800c056:	f3bf 8f6f 	isb	sy
 800c05a:	f3bf 8f4f 	dsb	sy
 800c05e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c060:	bf00      	nop
 800c062:	e7fe      	b.n	800c062 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	2b02      	cmp	r3, #2
 800c068:	d103      	bne.n	800c072 <xQueueGenericSendFromISR+0x6a>
 800c06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c06c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c06e:	2b01      	cmp	r3, #1
 800c070:	d101      	bne.n	800c076 <xQueueGenericSendFromISR+0x6e>
 800c072:	2301      	movs	r3, #1
 800c074:	e000      	b.n	800c078 <xQueueGenericSendFromISR+0x70>
 800c076:	2300      	movs	r3, #0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d10a      	bne.n	800c092 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c080:	f383 8811 	msr	BASEPRI, r3
 800c084:	f3bf 8f6f 	isb	sy
 800c088:	f3bf 8f4f 	dsb	sy
 800c08c:	623b      	str	r3, [r7, #32]
}
 800c08e:	bf00      	nop
 800c090:	e7fe      	b.n	800c090 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c092:	f002 f991 	bl	800e3b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c096:	f3ef 8211 	mrs	r2, BASEPRI
 800c09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c09e:	f383 8811 	msr	BASEPRI, r3
 800c0a2:	f3bf 8f6f 	isb	sy
 800c0a6:	f3bf 8f4f 	dsb	sy
 800c0aa:	61fa      	str	r2, [r7, #28]
 800c0ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c0ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c0b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d302      	bcc.n	800c0c4 <xQueueGenericSendFromISR+0xbc>
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	2b02      	cmp	r3, #2
 800c0c2:	d12f      	bne.n	800c124 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c0d4:	683a      	ldr	r2, [r7, #0]
 800c0d6:	68b9      	ldr	r1, [r7, #8]
 800c0d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c0da:	f000 fa53 	bl	800c584 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c0de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c0e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0e6:	d112      	bne.n	800c10e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d016      	beq.n	800c11e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f2:	3324      	adds	r3, #36	; 0x24
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f001 f839 	bl	800d16c <xTaskRemoveFromEventList>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d00e      	beq.n	800c11e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d00b      	beq.n	800c11e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2201      	movs	r2, #1
 800c10a:	601a      	str	r2, [r3, #0]
 800c10c:	e007      	b.n	800c11e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c10e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c112:	3301      	adds	r3, #1
 800c114:	b2db      	uxtb	r3, r3
 800c116:	b25a      	sxtb	r2, r3
 800c118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c11e:	2301      	movs	r3, #1
 800c120:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c122:	e001      	b.n	800c128 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c124:	2300      	movs	r3, #0
 800c126:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c12a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c132:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c136:	4618      	mov	r0, r3
 800c138:	3740      	adds	r7, #64	; 0x40
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
	...

0800c140 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b08c      	sub	sp, #48	; 0x30
 800c144:	af00      	add	r7, sp, #0
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c14c:	2300      	movs	r3, #0
 800c14e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c156:	2b00      	cmp	r3, #0
 800c158:	d10a      	bne.n	800c170 <xQueueReceive+0x30>
	__asm volatile
 800c15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c15e:	f383 8811 	msr	BASEPRI, r3
 800c162:	f3bf 8f6f 	isb	sy
 800c166:	f3bf 8f4f 	dsb	sy
 800c16a:	623b      	str	r3, [r7, #32]
}
 800c16c:	bf00      	nop
 800c16e:	e7fe      	b.n	800c16e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d103      	bne.n	800c17e <xQueueReceive+0x3e>
 800c176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d101      	bne.n	800c182 <xQueueReceive+0x42>
 800c17e:	2301      	movs	r3, #1
 800c180:	e000      	b.n	800c184 <xQueueReceive+0x44>
 800c182:	2300      	movs	r3, #0
 800c184:	2b00      	cmp	r3, #0
 800c186:	d10a      	bne.n	800c19e <xQueueReceive+0x5e>
	__asm volatile
 800c188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18c:	f383 8811 	msr	BASEPRI, r3
 800c190:	f3bf 8f6f 	isb	sy
 800c194:	f3bf 8f4f 	dsb	sy
 800c198:	61fb      	str	r3, [r7, #28]
}
 800c19a:	bf00      	nop
 800c19c:	e7fe      	b.n	800c19c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c19e:	f001 f9cd 	bl	800d53c <xTaskGetSchedulerState>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d102      	bne.n	800c1ae <xQueueReceive+0x6e>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d101      	bne.n	800c1b2 <xQueueReceive+0x72>
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	e000      	b.n	800c1b4 <xQueueReceive+0x74>
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d10a      	bne.n	800c1ce <xQueueReceive+0x8e>
	__asm volatile
 800c1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1bc:	f383 8811 	msr	BASEPRI, r3
 800c1c0:	f3bf 8f6f 	isb	sy
 800c1c4:	f3bf 8f4f 	dsb	sy
 800c1c8:	61bb      	str	r3, [r7, #24]
}
 800c1ca:	bf00      	nop
 800c1cc:	e7fe      	b.n	800c1cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c1ce:	f002 f811 	bl	800e1f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d01f      	beq.n	800c21e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c1de:	68b9      	ldr	r1, [r7, #8]
 800c1e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1e2:	f000 fa39 	bl	800c658 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e8:	1e5a      	subs	r2, r3, #1
 800c1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f0:	691b      	ldr	r3, [r3, #16]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d00f      	beq.n	800c216 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f8:	3310      	adds	r3, #16
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f000 ffb6 	bl	800d16c <xTaskRemoveFromEventList>
 800c200:	4603      	mov	r3, r0
 800c202:	2b00      	cmp	r3, #0
 800c204:	d007      	beq.n	800c216 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c206:	4b3d      	ldr	r3, [pc, #244]	; (800c2fc <xQueueReceive+0x1bc>)
 800c208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c20c:	601a      	str	r2, [r3, #0]
 800c20e:	f3bf 8f4f 	dsb	sy
 800c212:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c216:	f002 f81d 	bl	800e254 <vPortExitCritical>
				return pdPASS;
 800c21a:	2301      	movs	r3, #1
 800c21c:	e069      	b.n	800c2f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d103      	bne.n	800c22c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c224:	f002 f816 	bl	800e254 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c228:	2300      	movs	r3, #0
 800c22a:	e062      	b.n	800c2f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d106      	bne.n	800c240 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c232:	f107 0310 	add.w	r3, r7, #16
 800c236:	4618      	mov	r0, r3
 800c238:	f001 f822 	bl	800d280 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c23c:	2301      	movs	r3, #1
 800c23e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c240:	f002 f808 	bl	800e254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c244:	f000 fd68 	bl	800cd18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c248:	f001 ffd4 	bl	800e1f4 <vPortEnterCritical>
 800c24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c24e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c252:	b25b      	sxtb	r3, r3
 800c254:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c258:	d103      	bne.n	800c262 <xQueueReceive+0x122>
 800c25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c25c:	2200      	movs	r2, #0
 800c25e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c264:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c268:	b25b      	sxtb	r3, r3
 800c26a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c26e:	d103      	bne.n	800c278 <xQueueReceive+0x138>
 800c270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c272:	2200      	movs	r2, #0
 800c274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c278:	f001 ffec 	bl	800e254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c27c:	1d3a      	adds	r2, r7, #4
 800c27e:	f107 0310 	add.w	r3, r7, #16
 800c282:	4611      	mov	r1, r2
 800c284:	4618      	mov	r0, r3
 800c286:	f001 f811 	bl	800d2ac <xTaskCheckForTimeOut>
 800c28a:	4603      	mov	r3, r0
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d123      	bne.n	800c2d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c292:	f000 fa59 	bl	800c748 <prvIsQueueEmpty>
 800c296:	4603      	mov	r3, r0
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d017      	beq.n	800c2cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29e:	3324      	adds	r3, #36	; 0x24
 800c2a0:	687a      	ldr	r2, [r7, #4]
 800c2a2:	4611      	mov	r1, r2
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f000 ff11 	bl	800d0cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c2aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2ac:	f000 f9fa 	bl	800c6a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c2b0:	f000 fd40 	bl	800cd34 <xTaskResumeAll>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d189      	bne.n	800c1ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c2ba:	4b10      	ldr	r3, [pc, #64]	; (800c2fc <xQueueReceive+0x1bc>)
 800c2bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2c0:	601a      	str	r2, [r3, #0]
 800c2c2:	f3bf 8f4f 	dsb	sy
 800c2c6:	f3bf 8f6f 	isb	sy
 800c2ca:	e780      	b.n	800c1ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c2cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2ce:	f000 f9e9 	bl	800c6a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c2d2:	f000 fd2f 	bl	800cd34 <xTaskResumeAll>
 800c2d6:	e77a      	b.n	800c1ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c2d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2da:	f000 f9e3 	bl	800c6a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c2de:	f000 fd29 	bl	800cd34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2e4:	f000 fa30 	bl	800c748 <prvIsQueueEmpty>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	f43f af6f 	beq.w	800c1ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c2f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3730      	adds	r7, #48	; 0x30
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
 800c2fa:	bf00      	nop
 800c2fc:	e000ed04 	.word	0xe000ed04

0800c300 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b08e      	sub	sp, #56	; 0x38
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c30a:	2300      	movs	r3, #0
 800c30c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c312:	2300      	movs	r3, #0
 800c314:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d10a      	bne.n	800c332 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c320:	f383 8811 	msr	BASEPRI, r3
 800c324:	f3bf 8f6f 	isb	sy
 800c328:	f3bf 8f4f 	dsb	sy
 800c32c:	623b      	str	r3, [r7, #32]
}
 800c32e:	bf00      	nop
 800c330:	e7fe      	b.n	800c330 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c336:	2b00      	cmp	r3, #0
 800c338:	d00a      	beq.n	800c350 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c33e:	f383 8811 	msr	BASEPRI, r3
 800c342:	f3bf 8f6f 	isb	sy
 800c346:	f3bf 8f4f 	dsb	sy
 800c34a:	61fb      	str	r3, [r7, #28]
}
 800c34c:	bf00      	nop
 800c34e:	e7fe      	b.n	800c34e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c350:	f001 f8f4 	bl	800d53c <xTaskGetSchedulerState>
 800c354:	4603      	mov	r3, r0
 800c356:	2b00      	cmp	r3, #0
 800c358:	d102      	bne.n	800c360 <xQueueSemaphoreTake+0x60>
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d101      	bne.n	800c364 <xQueueSemaphoreTake+0x64>
 800c360:	2301      	movs	r3, #1
 800c362:	e000      	b.n	800c366 <xQueueSemaphoreTake+0x66>
 800c364:	2300      	movs	r3, #0
 800c366:	2b00      	cmp	r3, #0
 800c368:	d10a      	bne.n	800c380 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c36e:	f383 8811 	msr	BASEPRI, r3
 800c372:	f3bf 8f6f 	isb	sy
 800c376:	f3bf 8f4f 	dsb	sy
 800c37a:	61bb      	str	r3, [r7, #24]
}
 800c37c:	bf00      	nop
 800c37e:	e7fe      	b.n	800c37e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c380:	f001 ff38 	bl	800e1f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c388:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d024      	beq.n	800c3da <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c392:	1e5a      	subs	r2, r3, #1
 800c394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c396:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d104      	bne.n	800c3aa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c3a0:	f001 fa42 	bl	800d828 <pvTaskIncrementMutexHeldCount>
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ac:	691b      	ldr	r3, [r3, #16]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d00f      	beq.n	800c3d2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b4:	3310      	adds	r3, #16
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f000 fed8 	bl	800d16c <xTaskRemoveFromEventList>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d007      	beq.n	800c3d2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c3c2:	4b54      	ldr	r3, [pc, #336]	; (800c514 <xQueueSemaphoreTake+0x214>)
 800c3c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3c8:	601a      	str	r2, [r3, #0]
 800c3ca:	f3bf 8f4f 	dsb	sy
 800c3ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c3d2:	f001 ff3f 	bl	800e254 <vPortExitCritical>
				return pdPASS;
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	e097      	b.n	800c50a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d111      	bne.n	800c404 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d00a      	beq.n	800c3fc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ea:	f383 8811 	msr	BASEPRI, r3
 800c3ee:	f3bf 8f6f 	isb	sy
 800c3f2:	f3bf 8f4f 	dsb	sy
 800c3f6:	617b      	str	r3, [r7, #20]
}
 800c3f8:	bf00      	nop
 800c3fa:	e7fe      	b.n	800c3fa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c3fc:	f001 ff2a 	bl	800e254 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c400:	2300      	movs	r3, #0
 800c402:	e082      	b.n	800c50a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c406:	2b00      	cmp	r3, #0
 800c408:	d106      	bne.n	800c418 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c40a:	f107 030c 	add.w	r3, r7, #12
 800c40e:	4618      	mov	r0, r3
 800c410:	f000 ff36 	bl	800d280 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c414:	2301      	movs	r3, #1
 800c416:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c418:	f001 ff1c 	bl	800e254 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c41c:	f000 fc7c 	bl	800cd18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c420:	f001 fee8 	bl	800e1f4 <vPortEnterCritical>
 800c424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c426:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c42a:	b25b      	sxtb	r3, r3
 800c42c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c430:	d103      	bne.n	800c43a <xQueueSemaphoreTake+0x13a>
 800c432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c434:	2200      	movs	r2, #0
 800c436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c43c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c440:	b25b      	sxtb	r3, r3
 800c442:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c446:	d103      	bne.n	800c450 <xQueueSemaphoreTake+0x150>
 800c448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c44a:	2200      	movs	r2, #0
 800c44c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c450:	f001 ff00 	bl	800e254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c454:	463a      	mov	r2, r7
 800c456:	f107 030c 	add.w	r3, r7, #12
 800c45a:	4611      	mov	r1, r2
 800c45c:	4618      	mov	r0, r3
 800c45e:	f000 ff25 	bl	800d2ac <xTaskCheckForTimeOut>
 800c462:	4603      	mov	r3, r0
 800c464:	2b00      	cmp	r3, #0
 800c466:	d132      	bne.n	800c4ce <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c468:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c46a:	f000 f96d 	bl	800c748 <prvIsQueueEmpty>
 800c46e:	4603      	mov	r3, r0
 800c470:	2b00      	cmp	r3, #0
 800c472:	d026      	beq.n	800c4c2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d109      	bne.n	800c490 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c47c:	f001 feba 	bl	800e1f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c482:	689b      	ldr	r3, [r3, #8]
 800c484:	4618      	mov	r0, r3
 800c486:	f001 f877 	bl	800d578 <xTaskPriorityInherit>
 800c48a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c48c:	f001 fee2 	bl	800e254 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c492:	3324      	adds	r3, #36	; 0x24
 800c494:	683a      	ldr	r2, [r7, #0]
 800c496:	4611      	mov	r1, r2
 800c498:	4618      	mov	r0, r3
 800c49a:	f000 fe17 	bl	800d0cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c49e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4a0:	f000 f900 	bl	800c6a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c4a4:	f000 fc46 	bl	800cd34 <xTaskResumeAll>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	f47f af68 	bne.w	800c380 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c4b0:	4b18      	ldr	r3, [pc, #96]	; (800c514 <xQueueSemaphoreTake+0x214>)
 800c4b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4b6:	601a      	str	r2, [r3, #0]
 800c4b8:	f3bf 8f4f 	dsb	sy
 800c4bc:	f3bf 8f6f 	isb	sy
 800c4c0:	e75e      	b.n	800c380 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c4c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4c4:	f000 f8ee 	bl	800c6a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4c8:	f000 fc34 	bl	800cd34 <xTaskResumeAll>
 800c4cc:	e758      	b.n	800c380 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c4ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4d0:	f000 f8e8 	bl	800c6a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c4d4:	f000 fc2e 	bl	800cd34 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4da:	f000 f935 	bl	800c748 <prvIsQueueEmpty>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	f43f af4d 	beq.w	800c380 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d00d      	beq.n	800c508 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c4ec:	f001 fe82 	bl	800e1f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c4f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4f2:	f000 f82f 	bl	800c554 <prvGetDisinheritPriorityAfterTimeout>
 800c4f6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4fa:	689b      	ldr	r3, [r3, #8]
 800c4fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c4fe:	4618      	mov	r0, r3
 800c500:	f001 f910 	bl	800d724 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c504:	f001 fea6 	bl	800e254 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c508:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3738      	adds	r7, #56	; 0x38
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
 800c512:	bf00      	nop
 800c514:	e000ed04 	.word	0xe000ed04

0800c518 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b084      	sub	sp, #16
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d10a      	bne.n	800c53c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800c526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c52a:	f383 8811 	msr	BASEPRI, r3
 800c52e:	f3bf 8f6f 	isb	sy
 800c532:	f3bf 8f4f 	dsb	sy
 800c536:	60bb      	str	r3, [r7, #8]
}
 800c538:	bf00      	nop
 800c53a:	e7fe      	b.n	800c53a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800c53c:	f001 fe5a 	bl	800e1f4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c544:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800c546:	f001 fe85 	bl	800e254 <vPortExitCritical>

	return uxReturn;
 800c54a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c54c:	4618      	mov	r0, r3
 800c54e:	3710      	adds	r7, #16
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}

0800c554 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c554:	b480      	push	{r7}
 800c556:	b085      	sub	sp, #20
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c560:	2b00      	cmp	r3, #0
 800c562:	d006      	beq.n	800c572 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c56e:	60fb      	str	r3, [r7, #12]
 800c570:	e001      	b.n	800c576 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c572:	2300      	movs	r3, #0
 800c574:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c576:	68fb      	ldr	r3, [r7, #12]
	}
 800c578:	4618      	mov	r0, r3
 800c57a:	3714      	adds	r7, #20
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr

0800c584 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b086      	sub	sp, #24
 800c588:	af00      	add	r7, sp, #0
 800c58a:	60f8      	str	r0, [r7, #12]
 800c58c:	60b9      	str	r1, [r7, #8]
 800c58e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c590:	2300      	movs	r3, #0
 800c592:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c598:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d10d      	bne.n	800c5be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d14d      	bne.n	800c646 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	689b      	ldr	r3, [r3, #8]
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f001 f84a 	bl	800d648 <xTaskPriorityDisinherit>
 800c5b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	609a      	str	r2, [r3, #8]
 800c5bc:	e043      	b.n	800c646 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d119      	bne.n	800c5f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	6858      	ldr	r0, [r3, #4]
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5cc:	461a      	mov	r2, r3
 800c5ce:	68b9      	ldr	r1, [r7, #8]
 800c5d0:	f00e f879 	bl	801a6c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	685a      	ldr	r2, [r3, #4]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5dc:	441a      	add	r2, r3
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	685a      	ldr	r2, [r3, #4]
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	689b      	ldr	r3, [r3, #8]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d32b      	bcc.n	800c646 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	605a      	str	r2, [r3, #4]
 800c5f6:	e026      	b.n	800c646 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	68d8      	ldr	r0, [r3, #12]
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c600:	461a      	mov	r2, r3
 800c602:	68b9      	ldr	r1, [r7, #8]
 800c604:	f00e f85f 	bl	801a6c6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	68da      	ldr	r2, [r3, #12]
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c610:	425b      	negs	r3, r3
 800c612:	441a      	add	r2, r3
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	68da      	ldr	r2, [r3, #12]
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	429a      	cmp	r2, r3
 800c622:	d207      	bcs.n	800c634 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	689a      	ldr	r2, [r3, #8]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c62c:	425b      	negs	r3, r3
 800c62e:	441a      	add	r2, r3
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2b02      	cmp	r3, #2
 800c638:	d105      	bne.n	800c646 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d002      	beq.n	800c646 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	3b01      	subs	r3, #1
 800c644:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	1c5a      	adds	r2, r3, #1
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c64e:	697b      	ldr	r3, [r7, #20]
}
 800c650:	4618      	mov	r0, r3
 800c652:	3718      	adds	r7, #24
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c666:	2b00      	cmp	r3, #0
 800c668:	d018      	beq.n	800c69c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	68da      	ldr	r2, [r3, #12]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c672:	441a      	add	r2, r3
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	68da      	ldr	r2, [r3, #12]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	689b      	ldr	r3, [r3, #8]
 800c680:	429a      	cmp	r2, r3
 800c682:	d303      	bcc.n	800c68c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681a      	ldr	r2, [r3, #0]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	68d9      	ldr	r1, [r3, #12]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c694:	461a      	mov	r2, r3
 800c696:	6838      	ldr	r0, [r7, #0]
 800c698:	f00e f815 	bl	801a6c6 <memcpy>
	}
}
 800c69c:	bf00      	nop
 800c69e:	3708      	adds	r7, #8
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}

0800c6a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b084      	sub	sp, #16
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c6ac:	f001 fda2 	bl	800e1f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c6b8:	e011      	b.n	800c6de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d012      	beq.n	800c6e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	3324      	adds	r3, #36	; 0x24
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f000 fd50 	bl	800d16c <xTaskRemoveFromEventList>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d001      	beq.n	800c6d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c6d2:	f000 fe4d 	bl	800d370 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c6d6:	7bfb      	ldrb	r3, [r7, #15]
 800c6d8:	3b01      	subs	r3, #1
 800c6da:	b2db      	uxtb	r3, r3
 800c6dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c6de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	dce9      	bgt.n	800c6ba <prvUnlockQueue+0x16>
 800c6e6:	e000      	b.n	800c6ea <prvUnlockQueue+0x46>
					break;
 800c6e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	22ff      	movs	r2, #255	; 0xff
 800c6ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c6f2:	f001 fdaf 	bl	800e254 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c6f6:	f001 fd7d 	bl	800e1f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c700:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c702:	e011      	b.n	800c728 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	691b      	ldr	r3, [r3, #16]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d012      	beq.n	800c732 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	3310      	adds	r3, #16
 800c710:	4618      	mov	r0, r3
 800c712:	f000 fd2b 	bl	800d16c <xTaskRemoveFromEventList>
 800c716:	4603      	mov	r3, r0
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d001      	beq.n	800c720 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c71c:	f000 fe28 	bl	800d370 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c720:	7bbb      	ldrb	r3, [r7, #14]
 800c722:	3b01      	subs	r3, #1
 800c724:	b2db      	uxtb	r3, r3
 800c726:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c728:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	dce9      	bgt.n	800c704 <prvUnlockQueue+0x60>
 800c730:	e000      	b.n	800c734 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c732:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	22ff      	movs	r2, #255	; 0xff
 800c738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c73c:	f001 fd8a 	bl	800e254 <vPortExitCritical>
}
 800c740:	bf00      	nop
 800c742:	3710      	adds	r7, #16
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}

0800c748 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c750:	f001 fd50 	bl	800e1f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d102      	bne.n	800c762 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c75c:	2301      	movs	r3, #1
 800c75e:	60fb      	str	r3, [r7, #12]
 800c760:	e001      	b.n	800c766 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c762:	2300      	movs	r3, #0
 800c764:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c766:	f001 fd75 	bl	800e254 <vPortExitCritical>

	return xReturn;
 800c76a:	68fb      	ldr	r3, [r7, #12]
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3710      	adds	r7, #16
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}

0800c774 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c77c:	f001 fd3a 	bl	800e1f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c788:	429a      	cmp	r2, r3
 800c78a:	d102      	bne.n	800c792 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c78c:	2301      	movs	r3, #1
 800c78e:	60fb      	str	r3, [r7, #12]
 800c790:	e001      	b.n	800c796 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c792:	2300      	movs	r3, #0
 800c794:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c796:	f001 fd5d 	bl	800e254 <vPortExitCritical>

	return xReturn;
 800c79a:	68fb      	ldr	r3, [r7, #12]
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3710      	adds	r7, #16
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}

0800c7a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b085      	sub	sp, #20
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	60fb      	str	r3, [r7, #12]
 800c7b2:	e014      	b.n	800c7de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c7b4:	4a0f      	ldr	r2, [pc, #60]	; (800c7f4 <vQueueAddToRegistry+0x50>)
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d10b      	bne.n	800c7d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c7c0:	490c      	ldr	r1, [pc, #48]	; (800c7f4 <vQueueAddToRegistry+0x50>)
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	683a      	ldr	r2, [r7, #0]
 800c7c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c7ca:	4a0a      	ldr	r2, [pc, #40]	; (800c7f4 <vQueueAddToRegistry+0x50>)
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	00db      	lsls	r3, r3, #3
 800c7d0:	4413      	add	r3, r2
 800c7d2:	687a      	ldr	r2, [r7, #4]
 800c7d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c7d6:	e006      	b.n	800c7e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	3301      	adds	r3, #1
 800c7dc:	60fb      	str	r3, [r7, #12]
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	2b07      	cmp	r3, #7
 800c7e2:	d9e7      	bls.n	800c7b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c7e4:	bf00      	nop
 800c7e6:	bf00      	nop
 800c7e8:	3714      	adds	r7, #20
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr
 800c7f2:	bf00      	nop
 800c7f4:	200054d8 	.word	0x200054d8

0800c7f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b086      	sub	sp, #24
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	60f8      	str	r0, [r7, #12]
 800c800:	60b9      	str	r1, [r7, #8]
 800c802:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c808:	f001 fcf4 	bl	800e1f4 <vPortEnterCritical>
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c812:	b25b      	sxtb	r3, r3
 800c814:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c818:	d103      	bne.n	800c822 <vQueueWaitForMessageRestricted+0x2a>
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	2200      	movs	r2, #0
 800c81e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c828:	b25b      	sxtb	r3, r3
 800c82a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c82e:	d103      	bne.n	800c838 <vQueueWaitForMessageRestricted+0x40>
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	2200      	movs	r2, #0
 800c834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c838:	f001 fd0c 	bl	800e254 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c840:	2b00      	cmp	r3, #0
 800c842:	d106      	bne.n	800c852 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	3324      	adds	r3, #36	; 0x24
 800c848:	687a      	ldr	r2, [r7, #4]
 800c84a:	68b9      	ldr	r1, [r7, #8]
 800c84c:	4618      	mov	r0, r3
 800c84e:	f000 fc61 	bl	800d114 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c852:	6978      	ldr	r0, [r7, #20]
 800c854:	f7ff ff26 	bl	800c6a4 <prvUnlockQueue>
	}
 800c858:	bf00      	nop
 800c85a:	3718      	adds	r7, #24
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c860:	b580      	push	{r7, lr}
 800c862:	b08e      	sub	sp, #56	; 0x38
 800c864:	af04      	add	r7, sp, #16
 800c866:	60f8      	str	r0, [r7, #12]
 800c868:	60b9      	str	r1, [r7, #8]
 800c86a:	607a      	str	r2, [r7, #4]
 800c86c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c86e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c870:	2b00      	cmp	r3, #0
 800c872:	d10a      	bne.n	800c88a <xTaskCreateStatic+0x2a>
	__asm volatile
 800c874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c878:	f383 8811 	msr	BASEPRI, r3
 800c87c:	f3bf 8f6f 	isb	sy
 800c880:	f3bf 8f4f 	dsb	sy
 800c884:	623b      	str	r3, [r7, #32]
}
 800c886:	bf00      	nop
 800c888:	e7fe      	b.n	800c888 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d10a      	bne.n	800c8a6 <xTaskCreateStatic+0x46>
	__asm volatile
 800c890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c894:	f383 8811 	msr	BASEPRI, r3
 800c898:	f3bf 8f6f 	isb	sy
 800c89c:	f3bf 8f4f 	dsb	sy
 800c8a0:	61fb      	str	r3, [r7, #28]
}
 800c8a2:	bf00      	nop
 800c8a4:	e7fe      	b.n	800c8a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c8a6:	23a8      	movs	r3, #168	; 0xa8
 800c8a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	2ba8      	cmp	r3, #168	; 0xa8
 800c8ae:	d00a      	beq.n	800c8c6 <xTaskCreateStatic+0x66>
	__asm volatile
 800c8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b4:	f383 8811 	msr	BASEPRI, r3
 800c8b8:	f3bf 8f6f 	isb	sy
 800c8bc:	f3bf 8f4f 	dsb	sy
 800c8c0:	61bb      	str	r3, [r7, #24]
}
 800c8c2:	bf00      	nop
 800c8c4:	e7fe      	b.n	800c8c4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c8c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d01e      	beq.n	800c90c <xTaskCreateStatic+0xac>
 800c8ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d01b      	beq.n	800c90c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e0:	2202      	movs	r2, #2
 800c8e2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	9303      	str	r3, [sp, #12]
 800c8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ec:	9302      	str	r3, [sp, #8]
 800c8ee:	f107 0314 	add.w	r3, r7, #20
 800c8f2:	9301      	str	r3, [sp, #4]
 800c8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f6:	9300      	str	r3, [sp, #0]
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	687a      	ldr	r2, [r7, #4]
 800c8fc:	68b9      	ldr	r1, [r7, #8]
 800c8fe:	68f8      	ldr	r0, [r7, #12]
 800c900:	f000 f850 	bl	800c9a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c904:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c906:	f000 f8f3 	bl	800caf0 <prvAddNewTaskToReadyList>
 800c90a:	e001      	b.n	800c910 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c90c:	2300      	movs	r3, #0
 800c90e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c910:	697b      	ldr	r3, [r7, #20]
	}
 800c912:	4618      	mov	r0, r3
 800c914:	3728      	adds	r7, #40	; 0x28
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}

0800c91a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c91a:	b580      	push	{r7, lr}
 800c91c:	b08c      	sub	sp, #48	; 0x30
 800c91e:	af04      	add	r7, sp, #16
 800c920:	60f8      	str	r0, [r7, #12]
 800c922:	60b9      	str	r1, [r7, #8]
 800c924:	603b      	str	r3, [r7, #0]
 800c926:	4613      	mov	r3, r2
 800c928:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c92a:	88fb      	ldrh	r3, [r7, #6]
 800c92c:	009b      	lsls	r3, r3, #2
 800c92e:	4618      	mov	r0, r3
 800c930:	f001 fd82 	bl	800e438 <pvPortMalloc>
 800c934:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d00e      	beq.n	800c95a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c93c:	20a8      	movs	r0, #168	; 0xa8
 800c93e:	f001 fd7b 	bl	800e438 <pvPortMalloc>
 800c942:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c944:	69fb      	ldr	r3, [r7, #28]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d003      	beq.n	800c952 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c94a:	69fb      	ldr	r3, [r7, #28]
 800c94c:	697a      	ldr	r2, [r7, #20]
 800c94e:	631a      	str	r2, [r3, #48]	; 0x30
 800c950:	e005      	b.n	800c95e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c952:	6978      	ldr	r0, [r7, #20]
 800c954:	f001 fe3c 	bl	800e5d0 <vPortFree>
 800c958:	e001      	b.n	800c95e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c95a:	2300      	movs	r3, #0
 800c95c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c95e:	69fb      	ldr	r3, [r7, #28]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d017      	beq.n	800c994 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c964:	69fb      	ldr	r3, [r7, #28]
 800c966:	2200      	movs	r2, #0
 800c968:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c96c:	88fa      	ldrh	r2, [r7, #6]
 800c96e:	2300      	movs	r3, #0
 800c970:	9303      	str	r3, [sp, #12]
 800c972:	69fb      	ldr	r3, [r7, #28]
 800c974:	9302      	str	r3, [sp, #8]
 800c976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c978:	9301      	str	r3, [sp, #4]
 800c97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97c:	9300      	str	r3, [sp, #0]
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	68b9      	ldr	r1, [r7, #8]
 800c982:	68f8      	ldr	r0, [r7, #12]
 800c984:	f000 f80e 	bl	800c9a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c988:	69f8      	ldr	r0, [r7, #28]
 800c98a:	f000 f8b1 	bl	800caf0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c98e:	2301      	movs	r3, #1
 800c990:	61bb      	str	r3, [r7, #24]
 800c992:	e002      	b.n	800c99a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c994:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c998:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c99a:	69bb      	ldr	r3, [r7, #24]
	}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3720      	adds	r7, #32
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b088      	sub	sp, #32
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	60b9      	str	r1, [r7, #8]
 800c9ae:	607a      	str	r2, [r7, #4]
 800c9b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	009b      	lsls	r3, r3, #2
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	21a5      	movs	r1, #165	; 0xa5
 800c9be:	f00d fd63 	bl	801a488 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c9cc:	3b01      	subs	r3, #1
 800c9ce:	009b      	lsls	r3, r3, #2
 800c9d0:	4413      	add	r3, r2
 800c9d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c9d4:	69bb      	ldr	r3, [r7, #24]
 800c9d6:	f023 0307 	bic.w	r3, r3, #7
 800c9da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c9dc:	69bb      	ldr	r3, [r7, #24]
 800c9de:	f003 0307 	and.w	r3, r3, #7
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d00a      	beq.n	800c9fc <prvInitialiseNewTask+0x58>
	__asm volatile
 800c9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ea:	f383 8811 	msr	BASEPRI, r3
 800c9ee:	f3bf 8f6f 	isb	sy
 800c9f2:	f3bf 8f4f 	dsb	sy
 800c9f6:	617b      	str	r3, [r7, #20]
}
 800c9f8:	bf00      	nop
 800c9fa:	e7fe      	b.n	800c9fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d01f      	beq.n	800ca42 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ca02:	2300      	movs	r3, #0
 800ca04:	61fb      	str	r3, [r7, #28]
 800ca06:	e012      	b.n	800ca2e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ca08:	68ba      	ldr	r2, [r7, #8]
 800ca0a:	69fb      	ldr	r3, [r7, #28]
 800ca0c:	4413      	add	r3, r2
 800ca0e:	7819      	ldrb	r1, [r3, #0]
 800ca10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca12:	69fb      	ldr	r3, [r7, #28]
 800ca14:	4413      	add	r3, r2
 800ca16:	3334      	adds	r3, #52	; 0x34
 800ca18:	460a      	mov	r2, r1
 800ca1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ca1c:	68ba      	ldr	r2, [r7, #8]
 800ca1e:	69fb      	ldr	r3, [r7, #28]
 800ca20:	4413      	add	r3, r2
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d006      	beq.n	800ca36 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ca28:	69fb      	ldr	r3, [r7, #28]
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	61fb      	str	r3, [r7, #28]
 800ca2e:	69fb      	ldr	r3, [r7, #28]
 800ca30:	2b0f      	cmp	r3, #15
 800ca32:	d9e9      	bls.n	800ca08 <prvInitialiseNewTask+0x64>
 800ca34:	e000      	b.n	800ca38 <prvInitialiseNewTask+0x94>
			{
				break;
 800ca36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ca38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ca40:	e003      	b.n	800ca4a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ca42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca44:	2200      	movs	r2, #0
 800ca46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ca4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca4c:	2b37      	cmp	r3, #55	; 0x37
 800ca4e:	d901      	bls.n	800ca54 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ca50:	2337      	movs	r3, #55	; 0x37
 800ca52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ca54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ca5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca5e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ca60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca62:	2200      	movs	r2, #0
 800ca64:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ca66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca68:	3304      	adds	r3, #4
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7fe fffc 	bl	800ba68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ca70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca72:	3318      	adds	r3, #24
 800ca74:	4618      	mov	r0, r3
 800ca76:	f7fe fff7 	bl	800ba68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ca7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ca86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ca8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ca90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca92:	2200      	movs	r2, #0
 800ca94:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ca98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800caa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa2:	3354      	adds	r3, #84	; 0x54
 800caa4:	224c      	movs	r2, #76	; 0x4c
 800caa6:	2100      	movs	r1, #0
 800caa8:	4618      	mov	r0, r3
 800caaa:	f00d fced 	bl	801a488 <memset>
 800caae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab0:	4a0c      	ldr	r2, [pc, #48]	; (800cae4 <prvInitialiseNewTask+0x140>)
 800cab2:	659a      	str	r2, [r3, #88]	; 0x58
 800cab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab6:	4a0c      	ldr	r2, [pc, #48]	; (800cae8 <prvInitialiseNewTask+0x144>)
 800cab8:	65da      	str	r2, [r3, #92]	; 0x5c
 800caba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cabc:	4a0b      	ldr	r2, [pc, #44]	; (800caec <prvInitialiseNewTask+0x148>)
 800cabe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cac0:	683a      	ldr	r2, [r7, #0]
 800cac2:	68f9      	ldr	r1, [r7, #12]
 800cac4:	69b8      	ldr	r0, [r7, #24]
 800cac6:	f001 fa65 	bl	800df94 <pxPortInitialiseStack>
 800caca:	4602      	mov	r2, r0
 800cacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cace:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d002      	beq.n	800cadc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cada:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cadc:	bf00      	nop
 800cade:	3720      	adds	r7, #32
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}
 800cae4:	20009d68 	.word	0x20009d68
 800cae8:	20009dd0 	.word	0x20009dd0
 800caec:	20009e38 	.word	0x20009e38

0800caf0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b082      	sub	sp, #8
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800caf8:	f001 fb7c 	bl	800e1f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cafc:	4b2d      	ldr	r3, [pc, #180]	; (800cbb4 <prvAddNewTaskToReadyList+0xc4>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	3301      	adds	r3, #1
 800cb02:	4a2c      	ldr	r2, [pc, #176]	; (800cbb4 <prvAddNewTaskToReadyList+0xc4>)
 800cb04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cb06:	4b2c      	ldr	r3, [pc, #176]	; (800cbb8 <prvAddNewTaskToReadyList+0xc8>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d109      	bne.n	800cb22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cb0e:	4a2a      	ldr	r2, [pc, #168]	; (800cbb8 <prvAddNewTaskToReadyList+0xc8>)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cb14:	4b27      	ldr	r3, [pc, #156]	; (800cbb4 <prvAddNewTaskToReadyList+0xc4>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2b01      	cmp	r3, #1
 800cb1a:	d110      	bne.n	800cb3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cb1c:	f000 fc4c 	bl	800d3b8 <prvInitialiseTaskLists>
 800cb20:	e00d      	b.n	800cb3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cb22:	4b26      	ldr	r3, [pc, #152]	; (800cbbc <prvAddNewTaskToReadyList+0xcc>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d109      	bne.n	800cb3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cb2a:	4b23      	ldr	r3, [pc, #140]	; (800cbb8 <prvAddNewTaskToReadyList+0xc8>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d802      	bhi.n	800cb3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cb38:	4a1f      	ldr	r2, [pc, #124]	; (800cbb8 <prvAddNewTaskToReadyList+0xc8>)
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cb3e:	4b20      	ldr	r3, [pc, #128]	; (800cbc0 <prvAddNewTaskToReadyList+0xd0>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	3301      	adds	r3, #1
 800cb44:	4a1e      	ldr	r2, [pc, #120]	; (800cbc0 <prvAddNewTaskToReadyList+0xd0>)
 800cb46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cb48:	4b1d      	ldr	r3, [pc, #116]	; (800cbc0 <prvAddNewTaskToReadyList+0xd0>)
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb54:	4b1b      	ldr	r3, [pc, #108]	; (800cbc4 <prvAddNewTaskToReadyList+0xd4>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d903      	bls.n	800cb64 <prvAddNewTaskToReadyList+0x74>
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb60:	4a18      	ldr	r2, [pc, #96]	; (800cbc4 <prvAddNewTaskToReadyList+0xd4>)
 800cb62:	6013      	str	r3, [r2, #0]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb68:	4613      	mov	r3, r2
 800cb6a:	009b      	lsls	r3, r3, #2
 800cb6c:	4413      	add	r3, r2
 800cb6e:	009b      	lsls	r3, r3, #2
 800cb70:	4a15      	ldr	r2, [pc, #84]	; (800cbc8 <prvAddNewTaskToReadyList+0xd8>)
 800cb72:	441a      	add	r2, r3
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	3304      	adds	r3, #4
 800cb78:	4619      	mov	r1, r3
 800cb7a:	4610      	mov	r0, r2
 800cb7c:	f7fe ff81 	bl	800ba82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cb80:	f001 fb68 	bl	800e254 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cb84:	4b0d      	ldr	r3, [pc, #52]	; (800cbbc <prvAddNewTaskToReadyList+0xcc>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d00e      	beq.n	800cbaa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cb8c:	4b0a      	ldr	r3, [pc, #40]	; (800cbb8 <prvAddNewTaskToReadyList+0xc8>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d207      	bcs.n	800cbaa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cb9a:	4b0c      	ldr	r3, [pc, #48]	; (800cbcc <prvAddNewTaskToReadyList+0xdc>)
 800cb9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cba0:	601a      	str	r2, [r3, #0]
 800cba2:	f3bf 8f4f 	dsb	sy
 800cba6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbaa:	bf00      	nop
 800cbac:	3708      	adds	r7, #8
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}
 800cbb2:	bf00      	nop
 800cbb4:	200059ec 	.word	0x200059ec
 800cbb8:	20005518 	.word	0x20005518
 800cbbc:	200059f8 	.word	0x200059f8
 800cbc0:	20005a08 	.word	0x20005a08
 800cbc4:	200059f4 	.word	0x200059f4
 800cbc8:	2000551c 	.word	0x2000551c
 800cbcc:	e000ed04 	.word	0xe000ed04

0800cbd0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b084      	sub	sp, #16
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d017      	beq.n	800cc12 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cbe2:	4b13      	ldr	r3, [pc, #76]	; (800cc30 <vTaskDelay+0x60>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d00a      	beq.n	800cc00 <vTaskDelay+0x30>
	__asm volatile
 800cbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbee:	f383 8811 	msr	BASEPRI, r3
 800cbf2:	f3bf 8f6f 	isb	sy
 800cbf6:	f3bf 8f4f 	dsb	sy
 800cbfa:	60bb      	str	r3, [r7, #8]
}
 800cbfc:	bf00      	nop
 800cbfe:	e7fe      	b.n	800cbfe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cc00:	f000 f88a 	bl	800cd18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cc04:	2100      	movs	r1, #0
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f000 fe22 	bl	800d850 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cc0c:	f000 f892 	bl	800cd34 <xTaskResumeAll>
 800cc10:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d107      	bne.n	800cc28 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cc18:	4b06      	ldr	r3, [pc, #24]	; (800cc34 <vTaskDelay+0x64>)
 800cc1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc1e:	601a      	str	r2, [r3, #0]
 800cc20:	f3bf 8f4f 	dsb	sy
 800cc24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cc28:	bf00      	nop
 800cc2a:	3710      	adds	r7, #16
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}
 800cc30:	20005a14 	.word	0x20005a14
 800cc34:	e000ed04 	.word	0xe000ed04

0800cc38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b08a      	sub	sp, #40	; 0x28
 800cc3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cc42:	2300      	movs	r3, #0
 800cc44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cc46:	463a      	mov	r2, r7
 800cc48:	1d39      	adds	r1, r7, #4
 800cc4a:	f107 0308 	add.w	r3, r7, #8
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f7fe feb6 	bl	800b9c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cc54:	6839      	ldr	r1, [r7, #0]
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	68ba      	ldr	r2, [r7, #8]
 800cc5a:	9202      	str	r2, [sp, #8]
 800cc5c:	9301      	str	r3, [sp, #4]
 800cc5e:	2300      	movs	r3, #0
 800cc60:	9300      	str	r3, [sp, #0]
 800cc62:	2300      	movs	r3, #0
 800cc64:	460a      	mov	r2, r1
 800cc66:	4924      	ldr	r1, [pc, #144]	; (800ccf8 <vTaskStartScheduler+0xc0>)
 800cc68:	4824      	ldr	r0, [pc, #144]	; (800ccfc <vTaskStartScheduler+0xc4>)
 800cc6a:	f7ff fdf9 	bl	800c860 <xTaskCreateStatic>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	4a23      	ldr	r2, [pc, #140]	; (800cd00 <vTaskStartScheduler+0xc8>)
 800cc72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cc74:	4b22      	ldr	r3, [pc, #136]	; (800cd00 <vTaskStartScheduler+0xc8>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d002      	beq.n	800cc82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	617b      	str	r3, [r7, #20]
 800cc80:	e001      	b.n	800cc86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cc82:	2300      	movs	r3, #0
 800cc84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d102      	bne.n	800cc92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cc8c:	f000 fe34 	bl	800d8f8 <xTimerCreateTimerTask>
 800cc90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	2b01      	cmp	r3, #1
 800cc96:	d11b      	bne.n	800ccd0 <vTaskStartScheduler+0x98>
	__asm volatile
 800cc98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc9c:	f383 8811 	msr	BASEPRI, r3
 800cca0:	f3bf 8f6f 	isb	sy
 800cca4:	f3bf 8f4f 	dsb	sy
 800cca8:	613b      	str	r3, [r7, #16]
}
 800ccaa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ccac:	4b15      	ldr	r3, [pc, #84]	; (800cd04 <vTaskStartScheduler+0xcc>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	3354      	adds	r3, #84	; 0x54
 800ccb2:	4a15      	ldr	r2, [pc, #84]	; (800cd08 <vTaskStartScheduler+0xd0>)
 800ccb4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ccb6:	4b15      	ldr	r3, [pc, #84]	; (800cd0c <vTaskStartScheduler+0xd4>)
 800ccb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ccbc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ccbe:	4b14      	ldr	r3, [pc, #80]	; (800cd10 <vTaskStartScheduler+0xd8>)
 800ccc0:	2201      	movs	r2, #1
 800ccc2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ccc4:	4b13      	ldr	r3, [pc, #76]	; (800cd14 <vTaskStartScheduler+0xdc>)
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ccca:	f001 f9f1 	bl	800e0b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ccce:	e00e      	b.n	800ccee <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ccd6:	d10a      	bne.n	800ccee <vTaskStartScheduler+0xb6>
	__asm volatile
 800ccd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccdc:	f383 8811 	msr	BASEPRI, r3
 800cce0:	f3bf 8f6f 	isb	sy
 800cce4:	f3bf 8f4f 	dsb	sy
 800cce8:	60fb      	str	r3, [r7, #12]
}
 800ccea:	bf00      	nop
 800ccec:	e7fe      	b.n	800ccec <vTaskStartScheduler+0xb4>
}
 800ccee:	bf00      	nop
 800ccf0:	3718      	adds	r7, #24
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
 800ccf6:	bf00      	nop
 800ccf8:	0801b728 	.word	0x0801b728
 800ccfc:	0800d389 	.word	0x0800d389
 800cd00:	20005a10 	.word	0x20005a10
 800cd04:	20005518 	.word	0x20005518
 800cd08:	200000e8 	.word	0x200000e8
 800cd0c:	20005a0c 	.word	0x20005a0c
 800cd10:	200059f8 	.word	0x200059f8
 800cd14:	200059f0 	.word	0x200059f0

0800cd18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cd18:	b480      	push	{r7}
 800cd1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cd1c:	4b04      	ldr	r3, [pc, #16]	; (800cd30 <vTaskSuspendAll+0x18>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	3301      	adds	r3, #1
 800cd22:	4a03      	ldr	r2, [pc, #12]	; (800cd30 <vTaskSuspendAll+0x18>)
 800cd24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cd26:	bf00      	nop
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr
 800cd30:	20005a14 	.word	0x20005a14

0800cd34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b084      	sub	sp, #16
 800cd38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cd42:	4b42      	ldr	r3, [pc, #264]	; (800ce4c <xTaskResumeAll+0x118>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d10a      	bne.n	800cd60 <xTaskResumeAll+0x2c>
	__asm volatile
 800cd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd4e:	f383 8811 	msr	BASEPRI, r3
 800cd52:	f3bf 8f6f 	isb	sy
 800cd56:	f3bf 8f4f 	dsb	sy
 800cd5a:	603b      	str	r3, [r7, #0]
}
 800cd5c:	bf00      	nop
 800cd5e:	e7fe      	b.n	800cd5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cd60:	f001 fa48 	bl	800e1f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cd64:	4b39      	ldr	r3, [pc, #228]	; (800ce4c <xTaskResumeAll+0x118>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	3b01      	subs	r3, #1
 800cd6a:	4a38      	ldr	r2, [pc, #224]	; (800ce4c <xTaskResumeAll+0x118>)
 800cd6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd6e:	4b37      	ldr	r3, [pc, #220]	; (800ce4c <xTaskResumeAll+0x118>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d162      	bne.n	800ce3c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cd76:	4b36      	ldr	r3, [pc, #216]	; (800ce50 <xTaskResumeAll+0x11c>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d05e      	beq.n	800ce3c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cd7e:	e02f      	b.n	800cde0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd80:	4b34      	ldr	r3, [pc, #208]	; (800ce54 <xTaskResumeAll+0x120>)
 800cd82:	68db      	ldr	r3, [r3, #12]
 800cd84:	68db      	ldr	r3, [r3, #12]
 800cd86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	3318      	adds	r3, #24
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7fe fed5 	bl	800bb3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	3304      	adds	r3, #4
 800cd96:	4618      	mov	r0, r3
 800cd98:	f7fe fed0 	bl	800bb3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cda0:	4b2d      	ldr	r3, [pc, #180]	; (800ce58 <xTaskResumeAll+0x124>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d903      	bls.n	800cdb0 <xTaskResumeAll+0x7c>
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdac:	4a2a      	ldr	r2, [pc, #168]	; (800ce58 <xTaskResumeAll+0x124>)
 800cdae:	6013      	str	r3, [r2, #0]
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdb4:	4613      	mov	r3, r2
 800cdb6:	009b      	lsls	r3, r3, #2
 800cdb8:	4413      	add	r3, r2
 800cdba:	009b      	lsls	r3, r3, #2
 800cdbc:	4a27      	ldr	r2, [pc, #156]	; (800ce5c <xTaskResumeAll+0x128>)
 800cdbe:	441a      	add	r2, r3
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	3304      	adds	r3, #4
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	4610      	mov	r0, r2
 800cdc8:	f7fe fe5b 	bl	800ba82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdd0:	4b23      	ldr	r3, [pc, #140]	; (800ce60 <xTaskResumeAll+0x12c>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d302      	bcc.n	800cde0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cdda:	4b22      	ldr	r3, [pc, #136]	; (800ce64 <xTaskResumeAll+0x130>)
 800cddc:	2201      	movs	r2, #1
 800cdde:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cde0:	4b1c      	ldr	r3, [pc, #112]	; (800ce54 <xTaskResumeAll+0x120>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d1cb      	bne.n	800cd80 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d001      	beq.n	800cdf2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cdee:	f000 fb85 	bl	800d4fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cdf2:	4b1d      	ldr	r3, [pc, #116]	; (800ce68 <xTaskResumeAll+0x134>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d010      	beq.n	800ce20 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cdfe:	f000 f847 	bl	800ce90 <xTaskIncrementTick>
 800ce02:	4603      	mov	r3, r0
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d002      	beq.n	800ce0e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ce08:	4b16      	ldr	r3, [pc, #88]	; (800ce64 <xTaskResumeAll+0x130>)
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	3b01      	subs	r3, #1
 800ce12:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d1f1      	bne.n	800cdfe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ce1a:	4b13      	ldr	r3, [pc, #76]	; (800ce68 <xTaskResumeAll+0x134>)
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ce20:	4b10      	ldr	r3, [pc, #64]	; (800ce64 <xTaskResumeAll+0x130>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d009      	beq.n	800ce3c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ce28:	2301      	movs	r3, #1
 800ce2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ce2c:	4b0f      	ldr	r3, [pc, #60]	; (800ce6c <xTaskResumeAll+0x138>)
 800ce2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce32:	601a      	str	r2, [r3, #0]
 800ce34:	f3bf 8f4f 	dsb	sy
 800ce38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ce3c:	f001 fa0a 	bl	800e254 <vPortExitCritical>

	return xAlreadyYielded;
 800ce40:	68bb      	ldr	r3, [r7, #8]
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3710      	adds	r7, #16
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}
 800ce4a:	bf00      	nop
 800ce4c:	20005a14 	.word	0x20005a14
 800ce50:	200059ec 	.word	0x200059ec
 800ce54:	200059ac 	.word	0x200059ac
 800ce58:	200059f4 	.word	0x200059f4
 800ce5c:	2000551c 	.word	0x2000551c
 800ce60:	20005518 	.word	0x20005518
 800ce64:	20005a00 	.word	0x20005a00
 800ce68:	200059fc 	.word	0x200059fc
 800ce6c:	e000ed04 	.word	0xe000ed04

0800ce70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ce70:	b480      	push	{r7}
 800ce72:	b083      	sub	sp, #12
 800ce74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ce76:	4b05      	ldr	r3, [pc, #20]	; (800ce8c <xTaskGetTickCount+0x1c>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ce7c:	687b      	ldr	r3, [r7, #4]
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	370c      	adds	r7, #12
 800ce82:	46bd      	mov	sp, r7
 800ce84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce88:	4770      	bx	lr
 800ce8a:	bf00      	nop
 800ce8c:	200059f0 	.word	0x200059f0

0800ce90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b086      	sub	sp, #24
 800ce94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ce96:	2300      	movs	r3, #0
 800ce98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce9a:	4b4f      	ldr	r3, [pc, #316]	; (800cfd8 <xTaskIncrementTick+0x148>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	f040 808f 	bne.w	800cfc2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cea4:	4b4d      	ldr	r3, [pc, #308]	; (800cfdc <xTaskIncrementTick+0x14c>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	3301      	adds	r3, #1
 800ceaa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ceac:	4a4b      	ldr	r2, [pc, #300]	; (800cfdc <xTaskIncrementTick+0x14c>)
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d120      	bne.n	800cefa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ceb8:	4b49      	ldr	r3, [pc, #292]	; (800cfe0 <xTaskIncrementTick+0x150>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d00a      	beq.n	800ced8 <xTaskIncrementTick+0x48>
	__asm volatile
 800cec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec6:	f383 8811 	msr	BASEPRI, r3
 800ceca:	f3bf 8f6f 	isb	sy
 800cece:	f3bf 8f4f 	dsb	sy
 800ced2:	603b      	str	r3, [r7, #0]
}
 800ced4:	bf00      	nop
 800ced6:	e7fe      	b.n	800ced6 <xTaskIncrementTick+0x46>
 800ced8:	4b41      	ldr	r3, [pc, #260]	; (800cfe0 <xTaskIncrementTick+0x150>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	60fb      	str	r3, [r7, #12]
 800cede:	4b41      	ldr	r3, [pc, #260]	; (800cfe4 <xTaskIncrementTick+0x154>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	4a3f      	ldr	r2, [pc, #252]	; (800cfe0 <xTaskIncrementTick+0x150>)
 800cee4:	6013      	str	r3, [r2, #0]
 800cee6:	4a3f      	ldr	r2, [pc, #252]	; (800cfe4 <xTaskIncrementTick+0x154>)
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	6013      	str	r3, [r2, #0]
 800ceec:	4b3e      	ldr	r3, [pc, #248]	; (800cfe8 <xTaskIncrementTick+0x158>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	3301      	adds	r3, #1
 800cef2:	4a3d      	ldr	r2, [pc, #244]	; (800cfe8 <xTaskIncrementTick+0x158>)
 800cef4:	6013      	str	r3, [r2, #0]
 800cef6:	f000 fb01 	bl	800d4fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cefa:	4b3c      	ldr	r3, [pc, #240]	; (800cfec <xTaskIncrementTick+0x15c>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	693a      	ldr	r2, [r7, #16]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d349      	bcc.n	800cf98 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf04:	4b36      	ldr	r3, [pc, #216]	; (800cfe0 <xTaskIncrementTick+0x150>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d104      	bne.n	800cf18 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf0e:	4b37      	ldr	r3, [pc, #220]	; (800cfec <xTaskIncrementTick+0x15c>)
 800cf10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf14:	601a      	str	r2, [r3, #0]
					break;
 800cf16:	e03f      	b.n	800cf98 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf18:	4b31      	ldr	r3, [pc, #196]	; (800cfe0 <xTaskIncrementTick+0x150>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	68db      	ldr	r3, [r3, #12]
 800cf1e:	68db      	ldr	r3, [r3, #12]
 800cf20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	685b      	ldr	r3, [r3, #4]
 800cf26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cf28:	693a      	ldr	r2, [r7, #16]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d203      	bcs.n	800cf38 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cf30:	4a2e      	ldr	r2, [pc, #184]	; (800cfec <xTaskIncrementTick+0x15c>)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cf36:	e02f      	b.n	800cf98 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	3304      	adds	r3, #4
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7fe fdfd 	bl	800bb3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d004      	beq.n	800cf54 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	3318      	adds	r3, #24
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7fe fdf4 	bl	800bb3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf58:	4b25      	ldr	r3, [pc, #148]	; (800cff0 <xTaskIncrementTick+0x160>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	429a      	cmp	r2, r3
 800cf5e:	d903      	bls.n	800cf68 <xTaskIncrementTick+0xd8>
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf64:	4a22      	ldr	r2, [pc, #136]	; (800cff0 <xTaskIncrementTick+0x160>)
 800cf66:	6013      	str	r3, [r2, #0]
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf6c:	4613      	mov	r3, r2
 800cf6e:	009b      	lsls	r3, r3, #2
 800cf70:	4413      	add	r3, r2
 800cf72:	009b      	lsls	r3, r3, #2
 800cf74:	4a1f      	ldr	r2, [pc, #124]	; (800cff4 <xTaskIncrementTick+0x164>)
 800cf76:	441a      	add	r2, r3
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	3304      	adds	r3, #4
 800cf7c:	4619      	mov	r1, r3
 800cf7e:	4610      	mov	r0, r2
 800cf80:	f7fe fd7f 	bl	800ba82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf88:	4b1b      	ldr	r3, [pc, #108]	; (800cff8 <xTaskIncrementTick+0x168>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	d3b8      	bcc.n	800cf04 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cf92:	2301      	movs	r3, #1
 800cf94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf96:	e7b5      	b.n	800cf04 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cf98:	4b17      	ldr	r3, [pc, #92]	; (800cff8 <xTaskIncrementTick+0x168>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf9e:	4915      	ldr	r1, [pc, #84]	; (800cff4 <xTaskIncrementTick+0x164>)
 800cfa0:	4613      	mov	r3, r2
 800cfa2:	009b      	lsls	r3, r3, #2
 800cfa4:	4413      	add	r3, r2
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	440b      	add	r3, r1
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	2b01      	cmp	r3, #1
 800cfae:	d901      	bls.n	800cfb4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cfb4:	4b11      	ldr	r3, [pc, #68]	; (800cffc <xTaskIncrementTick+0x16c>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d007      	beq.n	800cfcc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	617b      	str	r3, [r7, #20]
 800cfc0:	e004      	b.n	800cfcc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cfc2:	4b0f      	ldr	r3, [pc, #60]	; (800d000 <xTaskIncrementTick+0x170>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	4a0d      	ldr	r2, [pc, #52]	; (800d000 <xTaskIncrementTick+0x170>)
 800cfca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cfcc:	697b      	ldr	r3, [r7, #20]
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3718      	adds	r7, #24
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	20005a14 	.word	0x20005a14
 800cfdc:	200059f0 	.word	0x200059f0
 800cfe0:	200059a4 	.word	0x200059a4
 800cfe4:	200059a8 	.word	0x200059a8
 800cfe8:	20005a04 	.word	0x20005a04
 800cfec:	20005a0c 	.word	0x20005a0c
 800cff0:	200059f4 	.word	0x200059f4
 800cff4:	2000551c 	.word	0x2000551c
 800cff8:	20005518 	.word	0x20005518
 800cffc:	20005a00 	.word	0x20005a00
 800d000:	200059fc 	.word	0x200059fc

0800d004 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d004:	b480      	push	{r7}
 800d006:	b085      	sub	sp, #20
 800d008:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d00a:	4b2a      	ldr	r3, [pc, #168]	; (800d0b4 <vTaskSwitchContext+0xb0>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d003      	beq.n	800d01a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d012:	4b29      	ldr	r3, [pc, #164]	; (800d0b8 <vTaskSwitchContext+0xb4>)
 800d014:	2201      	movs	r2, #1
 800d016:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d018:	e046      	b.n	800d0a8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d01a:	4b27      	ldr	r3, [pc, #156]	; (800d0b8 <vTaskSwitchContext+0xb4>)
 800d01c:	2200      	movs	r2, #0
 800d01e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d020:	4b26      	ldr	r3, [pc, #152]	; (800d0bc <vTaskSwitchContext+0xb8>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	60fb      	str	r3, [r7, #12]
 800d026:	e010      	b.n	800d04a <vTaskSwitchContext+0x46>
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d10a      	bne.n	800d044 <vTaskSwitchContext+0x40>
	__asm volatile
 800d02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d032:	f383 8811 	msr	BASEPRI, r3
 800d036:	f3bf 8f6f 	isb	sy
 800d03a:	f3bf 8f4f 	dsb	sy
 800d03e:	607b      	str	r3, [r7, #4]
}
 800d040:	bf00      	nop
 800d042:	e7fe      	b.n	800d042 <vTaskSwitchContext+0x3e>
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	3b01      	subs	r3, #1
 800d048:	60fb      	str	r3, [r7, #12]
 800d04a:	491d      	ldr	r1, [pc, #116]	; (800d0c0 <vTaskSwitchContext+0xbc>)
 800d04c:	68fa      	ldr	r2, [r7, #12]
 800d04e:	4613      	mov	r3, r2
 800d050:	009b      	lsls	r3, r3, #2
 800d052:	4413      	add	r3, r2
 800d054:	009b      	lsls	r3, r3, #2
 800d056:	440b      	add	r3, r1
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d0e4      	beq.n	800d028 <vTaskSwitchContext+0x24>
 800d05e:	68fa      	ldr	r2, [r7, #12]
 800d060:	4613      	mov	r3, r2
 800d062:	009b      	lsls	r3, r3, #2
 800d064:	4413      	add	r3, r2
 800d066:	009b      	lsls	r3, r3, #2
 800d068:	4a15      	ldr	r2, [pc, #84]	; (800d0c0 <vTaskSwitchContext+0xbc>)
 800d06a:	4413      	add	r3, r2
 800d06c:	60bb      	str	r3, [r7, #8]
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	685b      	ldr	r3, [r3, #4]
 800d072:	685a      	ldr	r2, [r3, #4]
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	605a      	str	r2, [r3, #4]
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	685a      	ldr	r2, [r3, #4]
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	3308      	adds	r3, #8
 800d080:	429a      	cmp	r2, r3
 800d082:	d104      	bne.n	800d08e <vTaskSwitchContext+0x8a>
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	685b      	ldr	r3, [r3, #4]
 800d088:	685a      	ldr	r2, [r3, #4]
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	605a      	str	r2, [r3, #4]
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	685b      	ldr	r3, [r3, #4]
 800d092:	68db      	ldr	r3, [r3, #12]
 800d094:	4a0b      	ldr	r2, [pc, #44]	; (800d0c4 <vTaskSwitchContext+0xc0>)
 800d096:	6013      	str	r3, [r2, #0]
 800d098:	4a08      	ldr	r2, [pc, #32]	; (800d0bc <vTaskSwitchContext+0xb8>)
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d09e:	4b09      	ldr	r3, [pc, #36]	; (800d0c4 <vTaskSwitchContext+0xc0>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	3354      	adds	r3, #84	; 0x54
 800d0a4:	4a08      	ldr	r2, [pc, #32]	; (800d0c8 <vTaskSwitchContext+0xc4>)
 800d0a6:	6013      	str	r3, [r2, #0]
}
 800d0a8:	bf00      	nop
 800d0aa:	3714      	adds	r7, #20
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b2:	4770      	bx	lr
 800d0b4:	20005a14 	.word	0x20005a14
 800d0b8:	20005a00 	.word	0x20005a00
 800d0bc:	200059f4 	.word	0x200059f4
 800d0c0:	2000551c 	.word	0x2000551c
 800d0c4:	20005518 	.word	0x20005518
 800d0c8:	200000e8 	.word	0x200000e8

0800d0cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d10a      	bne.n	800d0f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e0:	f383 8811 	msr	BASEPRI, r3
 800d0e4:	f3bf 8f6f 	isb	sy
 800d0e8:	f3bf 8f4f 	dsb	sy
 800d0ec:	60fb      	str	r3, [r7, #12]
}
 800d0ee:	bf00      	nop
 800d0f0:	e7fe      	b.n	800d0f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d0f2:	4b07      	ldr	r3, [pc, #28]	; (800d110 <vTaskPlaceOnEventList+0x44>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	3318      	adds	r3, #24
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f7fe fce5 	bl	800baca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d100:	2101      	movs	r1, #1
 800d102:	6838      	ldr	r0, [r7, #0]
 800d104:	f000 fba4 	bl	800d850 <prvAddCurrentTaskToDelayedList>
}
 800d108:	bf00      	nop
 800d10a:	3710      	adds	r7, #16
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}
 800d110:	20005518 	.word	0x20005518

0800d114 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d114:	b580      	push	{r7, lr}
 800d116:	b086      	sub	sp, #24
 800d118:	af00      	add	r7, sp, #0
 800d11a:	60f8      	str	r0, [r7, #12]
 800d11c:	60b9      	str	r1, [r7, #8]
 800d11e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d10a      	bne.n	800d13c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d12a:	f383 8811 	msr	BASEPRI, r3
 800d12e:	f3bf 8f6f 	isb	sy
 800d132:	f3bf 8f4f 	dsb	sy
 800d136:	617b      	str	r3, [r7, #20]
}
 800d138:	bf00      	nop
 800d13a:	e7fe      	b.n	800d13a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d13c:	4b0a      	ldr	r3, [pc, #40]	; (800d168 <vTaskPlaceOnEventListRestricted+0x54>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	3318      	adds	r3, #24
 800d142:	4619      	mov	r1, r3
 800d144:	68f8      	ldr	r0, [r7, #12]
 800d146:	f7fe fc9c 	bl	800ba82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d002      	beq.n	800d156 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d154:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d156:	6879      	ldr	r1, [r7, #4]
 800d158:	68b8      	ldr	r0, [r7, #8]
 800d15a:	f000 fb79 	bl	800d850 <prvAddCurrentTaskToDelayedList>
	}
 800d15e:	bf00      	nop
 800d160:	3718      	adds	r7, #24
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
 800d166:	bf00      	nop
 800d168:	20005518 	.word	0x20005518

0800d16c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b086      	sub	sp, #24
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	68db      	ldr	r3, [r3, #12]
 800d178:	68db      	ldr	r3, [r3, #12]
 800d17a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d10a      	bne.n	800d198 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d186:	f383 8811 	msr	BASEPRI, r3
 800d18a:	f3bf 8f6f 	isb	sy
 800d18e:	f3bf 8f4f 	dsb	sy
 800d192:	60fb      	str	r3, [r7, #12]
}
 800d194:	bf00      	nop
 800d196:	e7fe      	b.n	800d196 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	3318      	adds	r3, #24
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7fe fccd 	bl	800bb3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1a2:	4b1e      	ldr	r3, [pc, #120]	; (800d21c <xTaskRemoveFromEventList+0xb0>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d11d      	bne.n	800d1e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	3304      	adds	r3, #4
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f7fe fcc4 	bl	800bb3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1b8:	4b19      	ldr	r3, [pc, #100]	; (800d220 <xTaskRemoveFromEventList+0xb4>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d903      	bls.n	800d1c8 <xTaskRemoveFromEventList+0x5c>
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1c4:	4a16      	ldr	r2, [pc, #88]	; (800d220 <xTaskRemoveFromEventList+0xb4>)
 800d1c6:	6013      	str	r3, [r2, #0]
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1cc:	4613      	mov	r3, r2
 800d1ce:	009b      	lsls	r3, r3, #2
 800d1d0:	4413      	add	r3, r2
 800d1d2:	009b      	lsls	r3, r3, #2
 800d1d4:	4a13      	ldr	r2, [pc, #76]	; (800d224 <xTaskRemoveFromEventList+0xb8>)
 800d1d6:	441a      	add	r2, r3
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	3304      	adds	r3, #4
 800d1dc:	4619      	mov	r1, r3
 800d1de:	4610      	mov	r0, r2
 800d1e0:	f7fe fc4f 	bl	800ba82 <vListInsertEnd>
 800d1e4:	e005      	b.n	800d1f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	3318      	adds	r3, #24
 800d1ea:	4619      	mov	r1, r3
 800d1ec:	480e      	ldr	r0, [pc, #56]	; (800d228 <xTaskRemoveFromEventList+0xbc>)
 800d1ee:	f7fe fc48 	bl	800ba82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1f6:	4b0d      	ldr	r3, [pc, #52]	; (800d22c <xTaskRemoveFromEventList+0xc0>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d905      	bls.n	800d20c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d200:	2301      	movs	r3, #1
 800d202:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d204:	4b0a      	ldr	r3, [pc, #40]	; (800d230 <xTaskRemoveFromEventList+0xc4>)
 800d206:	2201      	movs	r2, #1
 800d208:	601a      	str	r2, [r3, #0]
 800d20a:	e001      	b.n	800d210 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d20c:	2300      	movs	r3, #0
 800d20e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d210:	697b      	ldr	r3, [r7, #20]
}
 800d212:	4618      	mov	r0, r3
 800d214:	3718      	adds	r7, #24
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop
 800d21c:	20005a14 	.word	0x20005a14
 800d220:	200059f4 	.word	0x200059f4
 800d224:	2000551c 	.word	0x2000551c
 800d228:	200059ac 	.word	0x200059ac
 800d22c:	20005518 	.word	0x20005518
 800d230:	20005a00 	.word	0x20005a00

0800d234 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b084      	sub	sp, #16
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d10a      	bne.n	800d258 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800d242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d246:	f383 8811 	msr	BASEPRI, r3
 800d24a:	f3bf 8f6f 	isb	sy
 800d24e:	f3bf 8f4f 	dsb	sy
 800d252:	60fb      	str	r3, [r7, #12]
}
 800d254:	bf00      	nop
 800d256:	e7fe      	b.n	800d256 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800d258:	f000 ffcc 	bl	800e1f4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d25c:	4b06      	ldr	r3, [pc, #24]	; (800d278 <vTaskSetTimeOutState+0x44>)
 800d25e:	681a      	ldr	r2, [r3, #0]
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800d264:	4b05      	ldr	r3, [pc, #20]	; (800d27c <vTaskSetTimeOutState+0x48>)
 800d266:	681a      	ldr	r2, [r3, #0]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800d26c:	f000 fff2 	bl	800e254 <vPortExitCritical>
}
 800d270:	bf00      	nop
 800d272:	3710      	adds	r7, #16
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}
 800d278:	20005a04 	.word	0x20005a04
 800d27c:	200059f0 	.word	0x200059f0

0800d280 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d280:	b480      	push	{r7}
 800d282:	b083      	sub	sp, #12
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d288:	4b06      	ldr	r3, [pc, #24]	; (800d2a4 <vTaskInternalSetTimeOutState+0x24>)
 800d28a:	681a      	ldr	r2, [r3, #0]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d290:	4b05      	ldr	r3, [pc, #20]	; (800d2a8 <vTaskInternalSetTimeOutState+0x28>)
 800d292:	681a      	ldr	r2, [r3, #0]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	605a      	str	r2, [r3, #4]
}
 800d298:	bf00      	nop
 800d29a:	370c      	adds	r7, #12
 800d29c:	46bd      	mov	sp, r7
 800d29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a2:	4770      	bx	lr
 800d2a4:	20005a04 	.word	0x20005a04
 800d2a8:	200059f0 	.word	0x200059f0

0800d2ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b088      	sub	sp, #32
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d10a      	bne.n	800d2d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c0:	f383 8811 	msr	BASEPRI, r3
 800d2c4:	f3bf 8f6f 	isb	sy
 800d2c8:	f3bf 8f4f 	dsb	sy
 800d2cc:	613b      	str	r3, [r7, #16]
}
 800d2ce:	bf00      	nop
 800d2d0:	e7fe      	b.n	800d2d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d10a      	bne.n	800d2ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2dc:	f383 8811 	msr	BASEPRI, r3
 800d2e0:	f3bf 8f6f 	isb	sy
 800d2e4:	f3bf 8f4f 	dsb	sy
 800d2e8:	60fb      	str	r3, [r7, #12]
}
 800d2ea:	bf00      	nop
 800d2ec:	e7fe      	b.n	800d2ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d2ee:	f000 ff81 	bl	800e1f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d2f2:	4b1d      	ldr	r3, [pc, #116]	; (800d368 <xTaskCheckForTimeOut+0xbc>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	685b      	ldr	r3, [r3, #4]
 800d2fc:	69ba      	ldr	r2, [r7, #24]
 800d2fe:	1ad3      	subs	r3, r2, r3
 800d300:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d30a:	d102      	bne.n	800d312 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d30c:	2300      	movs	r3, #0
 800d30e:	61fb      	str	r3, [r7, #28]
 800d310:	e023      	b.n	800d35a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681a      	ldr	r2, [r3, #0]
 800d316:	4b15      	ldr	r3, [pc, #84]	; (800d36c <xTaskCheckForTimeOut+0xc0>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d007      	beq.n	800d32e <xTaskCheckForTimeOut+0x82>
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	69ba      	ldr	r2, [r7, #24]
 800d324:	429a      	cmp	r2, r3
 800d326:	d302      	bcc.n	800d32e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d328:	2301      	movs	r3, #1
 800d32a:	61fb      	str	r3, [r7, #28]
 800d32c:	e015      	b.n	800d35a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	697a      	ldr	r2, [r7, #20]
 800d334:	429a      	cmp	r2, r3
 800d336:	d20b      	bcs.n	800d350 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	681a      	ldr	r2, [r3, #0]
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	1ad2      	subs	r2, r2, r3
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f7ff ff9b 	bl	800d280 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d34a:	2300      	movs	r3, #0
 800d34c:	61fb      	str	r3, [r7, #28]
 800d34e:	e004      	b.n	800d35a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	2200      	movs	r2, #0
 800d354:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d356:	2301      	movs	r3, #1
 800d358:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d35a:	f000 ff7b 	bl	800e254 <vPortExitCritical>

	return xReturn;
 800d35e:	69fb      	ldr	r3, [r7, #28]
}
 800d360:	4618      	mov	r0, r3
 800d362:	3720      	adds	r7, #32
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}
 800d368:	200059f0 	.word	0x200059f0
 800d36c:	20005a04 	.word	0x20005a04

0800d370 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d370:	b480      	push	{r7}
 800d372:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d374:	4b03      	ldr	r3, [pc, #12]	; (800d384 <vTaskMissedYield+0x14>)
 800d376:	2201      	movs	r2, #1
 800d378:	601a      	str	r2, [r3, #0]
}
 800d37a:	bf00      	nop
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr
 800d384:	20005a00 	.word	0x20005a00

0800d388 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b082      	sub	sp, #8
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d390:	f000 f852 	bl	800d438 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d394:	4b06      	ldr	r3, [pc, #24]	; (800d3b0 <prvIdleTask+0x28>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	2b01      	cmp	r3, #1
 800d39a:	d9f9      	bls.n	800d390 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d39c:	4b05      	ldr	r3, [pc, #20]	; (800d3b4 <prvIdleTask+0x2c>)
 800d39e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3a2:	601a      	str	r2, [r3, #0]
 800d3a4:	f3bf 8f4f 	dsb	sy
 800d3a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d3ac:	e7f0      	b.n	800d390 <prvIdleTask+0x8>
 800d3ae:	bf00      	nop
 800d3b0:	2000551c 	.word	0x2000551c
 800d3b4:	e000ed04 	.word	0xe000ed04

0800d3b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b082      	sub	sp, #8
 800d3bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d3be:	2300      	movs	r3, #0
 800d3c0:	607b      	str	r3, [r7, #4]
 800d3c2:	e00c      	b.n	800d3de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d3c4:	687a      	ldr	r2, [r7, #4]
 800d3c6:	4613      	mov	r3, r2
 800d3c8:	009b      	lsls	r3, r3, #2
 800d3ca:	4413      	add	r3, r2
 800d3cc:	009b      	lsls	r3, r3, #2
 800d3ce:	4a12      	ldr	r2, [pc, #72]	; (800d418 <prvInitialiseTaskLists+0x60>)
 800d3d0:	4413      	add	r3, r2
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7fe fb28 	bl	800ba28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	3301      	adds	r3, #1
 800d3dc:	607b      	str	r3, [r7, #4]
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2b37      	cmp	r3, #55	; 0x37
 800d3e2:	d9ef      	bls.n	800d3c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d3e4:	480d      	ldr	r0, [pc, #52]	; (800d41c <prvInitialiseTaskLists+0x64>)
 800d3e6:	f7fe fb1f 	bl	800ba28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d3ea:	480d      	ldr	r0, [pc, #52]	; (800d420 <prvInitialiseTaskLists+0x68>)
 800d3ec:	f7fe fb1c 	bl	800ba28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d3f0:	480c      	ldr	r0, [pc, #48]	; (800d424 <prvInitialiseTaskLists+0x6c>)
 800d3f2:	f7fe fb19 	bl	800ba28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d3f6:	480c      	ldr	r0, [pc, #48]	; (800d428 <prvInitialiseTaskLists+0x70>)
 800d3f8:	f7fe fb16 	bl	800ba28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d3fc:	480b      	ldr	r0, [pc, #44]	; (800d42c <prvInitialiseTaskLists+0x74>)
 800d3fe:	f7fe fb13 	bl	800ba28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d402:	4b0b      	ldr	r3, [pc, #44]	; (800d430 <prvInitialiseTaskLists+0x78>)
 800d404:	4a05      	ldr	r2, [pc, #20]	; (800d41c <prvInitialiseTaskLists+0x64>)
 800d406:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d408:	4b0a      	ldr	r3, [pc, #40]	; (800d434 <prvInitialiseTaskLists+0x7c>)
 800d40a:	4a05      	ldr	r2, [pc, #20]	; (800d420 <prvInitialiseTaskLists+0x68>)
 800d40c:	601a      	str	r2, [r3, #0]
}
 800d40e:	bf00      	nop
 800d410:	3708      	adds	r7, #8
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
 800d416:	bf00      	nop
 800d418:	2000551c 	.word	0x2000551c
 800d41c:	2000597c 	.word	0x2000597c
 800d420:	20005990 	.word	0x20005990
 800d424:	200059ac 	.word	0x200059ac
 800d428:	200059c0 	.word	0x200059c0
 800d42c:	200059d8 	.word	0x200059d8
 800d430:	200059a4 	.word	0x200059a4
 800d434:	200059a8 	.word	0x200059a8

0800d438 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d43e:	e019      	b.n	800d474 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d440:	f000 fed8 	bl	800e1f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d444:	4b10      	ldr	r3, [pc, #64]	; (800d488 <prvCheckTasksWaitingTermination+0x50>)
 800d446:	68db      	ldr	r3, [r3, #12]
 800d448:	68db      	ldr	r3, [r3, #12]
 800d44a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	3304      	adds	r3, #4
 800d450:	4618      	mov	r0, r3
 800d452:	f7fe fb73 	bl	800bb3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d456:	4b0d      	ldr	r3, [pc, #52]	; (800d48c <prvCheckTasksWaitingTermination+0x54>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	3b01      	subs	r3, #1
 800d45c:	4a0b      	ldr	r2, [pc, #44]	; (800d48c <prvCheckTasksWaitingTermination+0x54>)
 800d45e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d460:	4b0b      	ldr	r3, [pc, #44]	; (800d490 <prvCheckTasksWaitingTermination+0x58>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	3b01      	subs	r3, #1
 800d466:	4a0a      	ldr	r2, [pc, #40]	; (800d490 <prvCheckTasksWaitingTermination+0x58>)
 800d468:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d46a:	f000 fef3 	bl	800e254 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f000 f810 	bl	800d494 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d474:	4b06      	ldr	r3, [pc, #24]	; (800d490 <prvCheckTasksWaitingTermination+0x58>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d1e1      	bne.n	800d440 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d47c:	bf00      	nop
 800d47e:	bf00      	nop
 800d480:	3708      	adds	r7, #8
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}
 800d486:	bf00      	nop
 800d488:	200059c0 	.word	0x200059c0
 800d48c:	200059ec 	.word	0x200059ec
 800d490:	200059d4 	.word	0x200059d4

0800d494 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d494:	b580      	push	{r7, lr}
 800d496:	b084      	sub	sp, #16
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	3354      	adds	r3, #84	; 0x54
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f00d f83f 	bl	801a524 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d108      	bne.n	800d4c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f001 f88b 	bl	800e5d0 <vPortFree>
				vPortFree( pxTCB );
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f001 f888 	bl	800e5d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d4c0:	e018      	b.n	800d4f4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d4c8:	2b01      	cmp	r3, #1
 800d4ca:	d103      	bne.n	800d4d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f001 f87f 	bl	800e5d0 <vPortFree>
	}
 800d4d2:	e00f      	b.n	800d4f4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d4da:	2b02      	cmp	r3, #2
 800d4dc:	d00a      	beq.n	800d4f4 <prvDeleteTCB+0x60>
	__asm volatile
 800d4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4e2:	f383 8811 	msr	BASEPRI, r3
 800d4e6:	f3bf 8f6f 	isb	sy
 800d4ea:	f3bf 8f4f 	dsb	sy
 800d4ee:	60fb      	str	r3, [r7, #12]
}
 800d4f0:	bf00      	nop
 800d4f2:	e7fe      	b.n	800d4f2 <prvDeleteTCB+0x5e>
	}
 800d4f4:	bf00      	nop
 800d4f6:	3710      	adds	r7, #16
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}

0800d4fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b083      	sub	sp, #12
 800d500:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d502:	4b0c      	ldr	r3, [pc, #48]	; (800d534 <prvResetNextTaskUnblockTime+0x38>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d104      	bne.n	800d516 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d50c:	4b0a      	ldr	r3, [pc, #40]	; (800d538 <prvResetNextTaskUnblockTime+0x3c>)
 800d50e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d512:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d514:	e008      	b.n	800d528 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d516:	4b07      	ldr	r3, [pc, #28]	; (800d534 <prvResetNextTaskUnblockTime+0x38>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	68db      	ldr	r3, [r3, #12]
 800d51c:	68db      	ldr	r3, [r3, #12]
 800d51e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	685b      	ldr	r3, [r3, #4]
 800d524:	4a04      	ldr	r2, [pc, #16]	; (800d538 <prvResetNextTaskUnblockTime+0x3c>)
 800d526:	6013      	str	r3, [r2, #0]
}
 800d528:	bf00      	nop
 800d52a:	370c      	adds	r7, #12
 800d52c:	46bd      	mov	sp, r7
 800d52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d532:	4770      	bx	lr
 800d534:	200059a4 	.word	0x200059a4
 800d538:	20005a0c 	.word	0x20005a0c

0800d53c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d53c:	b480      	push	{r7}
 800d53e:	b083      	sub	sp, #12
 800d540:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d542:	4b0b      	ldr	r3, [pc, #44]	; (800d570 <xTaskGetSchedulerState+0x34>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d102      	bne.n	800d550 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d54a:	2301      	movs	r3, #1
 800d54c:	607b      	str	r3, [r7, #4]
 800d54e:	e008      	b.n	800d562 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d550:	4b08      	ldr	r3, [pc, #32]	; (800d574 <xTaskGetSchedulerState+0x38>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d102      	bne.n	800d55e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d558:	2302      	movs	r3, #2
 800d55a:	607b      	str	r3, [r7, #4]
 800d55c:	e001      	b.n	800d562 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d55e:	2300      	movs	r3, #0
 800d560:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d562:	687b      	ldr	r3, [r7, #4]
	}
 800d564:	4618      	mov	r0, r3
 800d566:	370c      	adds	r7, #12
 800d568:	46bd      	mov	sp, r7
 800d56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56e:	4770      	bx	lr
 800d570:	200059f8 	.word	0x200059f8
 800d574:	20005a14 	.word	0x20005a14

0800d578 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b084      	sub	sp, #16
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d584:	2300      	movs	r3, #0
 800d586:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d051      	beq.n	800d632 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d592:	4b2a      	ldr	r3, [pc, #168]	; (800d63c <xTaskPriorityInherit+0xc4>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d598:	429a      	cmp	r2, r3
 800d59a:	d241      	bcs.n	800d620 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	699b      	ldr	r3, [r3, #24]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	db06      	blt.n	800d5b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5a4:	4b25      	ldr	r3, [pc, #148]	; (800d63c <xTaskPriorityInherit+0xc4>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	6959      	ldr	r1, [r3, #20]
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5ba:	4613      	mov	r3, r2
 800d5bc:	009b      	lsls	r3, r3, #2
 800d5be:	4413      	add	r3, r2
 800d5c0:	009b      	lsls	r3, r3, #2
 800d5c2:	4a1f      	ldr	r2, [pc, #124]	; (800d640 <xTaskPriorityInherit+0xc8>)
 800d5c4:	4413      	add	r3, r2
 800d5c6:	4299      	cmp	r1, r3
 800d5c8:	d122      	bne.n	800d610 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	3304      	adds	r3, #4
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f7fe fab4 	bl	800bb3c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d5d4:	4b19      	ldr	r3, [pc, #100]	; (800d63c <xTaskPriorityInherit+0xc4>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5e2:	4b18      	ldr	r3, [pc, #96]	; (800d644 <xTaskPriorityInherit+0xcc>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d903      	bls.n	800d5f2 <xTaskPriorityInherit+0x7a>
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ee:	4a15      	ldr	r2, [pc, #84]	; (800d644 <xTaskPriorityInherit+0xcc>)
 800d5f0:	6013      	str	r3, [r2, #0]
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5f6:	4613      	mov	r3, r2
 800d5f8:	009b      	lsls	r3, r3, #2
 800d5fa:	4413      	add	r3, r2
 800d5fc:	009b      	lsls	r3, r3, #2
 800d5fe:	4a10      	ldr	r2, [pc, #64]	; (800d640 <xTaskPriorityInherit+0xc8>)
 800d600:	441a      	add	r2, r3
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	3304      	adds	r3, #4
 800d606:	4619      	mov	r1, r3
 800d608:	4610      	mov	r0, r2
 800d60a:	f7fe fa3a 	bl	800ba82 <vListInsertEnd>
 800d60e:	e004      	b.n	800d61a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d610:	4b0a      	ldr	r3, [pc, #40]	; (800d63c <xTaskPriorityInherit+0xc4>)
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d61a:	2301      	movs	r3, #1
 800d61c:	60fb      	str	r3, [r7, #12]
 800d61e:	e008      	b.n	800d632 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d624:	4b05      	ldr	r3, [pc, #20]	; (800d63c <xTaskPriorityInherit+0xc4>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d201      	bcs.n	800d632 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d62e:	2301      	movs	r3, #1
 800d630:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d632:	68fb      	ldr	r3, [r7, #12]
	}
 800d634:	4618      	mov	r0, r3
 800d636:	3710      	adds	r7, #16
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}
 800d63c:	20005518 	.word	0x20005518
 800d640:	2000551c 	.word	0x2000551c
 800d644:	200059f4 	.word	0x200059f4

0800d648 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b086      	sub	sp, #24
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d654:	2300      	movs	r3, #0
 800d656:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d056      	beq.n	800d70c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d65e:	4b2e      	ldr	r3, [pc, #184]	; (800d718 <xTaskPriorityDisinherit+0xd0>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	693a      	ldr	r2, [r7, #16]
 800d664:	429a      	cmp	r2, r3
 800d666:	d00a      	beq.n	800d67e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d66c:	f383 8811 	msr	BASEPRI, r3
 800d670:	f3bf 8f6f 	isb	sy
 800d674:	f3bf 8f4f 	dsb	sy
 800d678:	60fb      	str	r3, [r7, #12]
}
 800d67a:	bf00      	nop
 800d67c:	e7fe      	b.n	800d67c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d682:	2b00      	cmp	r3, #0
 800d684:	d10a      	bne.n	800d69c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d68a:	f383 8811 	msr	BASEPRI, r3
 800d68e:	f3bf 8f6f 	isb	sy
 800d692:	f3bf 8f4f 	dsb	sy
 800d696:	60bb      	str	r3, [r7, #8]
}
 800d698:	bf00      	nop
 800d69a:	e7fe      	b.n	800d69a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d69c:	693b      	ldr	r3, [r7, #16]
 800d69e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6a0:	1e5a      	subs	r2, r3, #1
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d6a6:	693b      	ldr	r3, [r7, #16]
 800d6a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6aa:	693b      	ldr	r3, [r7, #16]
 800d6ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d02c      	beq.n	800d70c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d128      	bne.n	800d70c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	3304      	adds	r3, #4
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f7fe fa3c 	bl	800bb3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6cc:	693b      	ldr	r3, [r7, #16]
 800d6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6dc:	4b0f      	ldr	r3, [pc, #60]	; (800d71c <xTaskPriorityDisinherit+0xd4>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d903      	bls.n	800d6ec <xTaskPriorityDisinherit+0xa4>
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6e8:	4a0c      	ldr	r2, [pc, #48]	; (800d71c <xTaskPriorityDisinherit+0xd4>)
 800d6ea:	6013      	str	r3, [r2, #0]
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6f0:	4613      	mov	r3, r2
 800d6f2:	009b      	lsls	r3, r3, #2
 800d6f4:	4413      	add	r3, r2
 800d6f6:	009b      	lsls	r3, r3, #2
 800d6f8:	4a09      	ldr	r2, [pc, #36]	; (800d720 <xTaskPriorityDisinherit+0xd8>)
 800d6fa:	441a      	add	r2, r3
 800d6fc:	693b      	ldr	r3, [r7, #16]
 800d6fe:	3304      	adds	r3, #4
 800d700:	4619      	mov	r1, r3
 800d702:	4610      	mov	r0, r2
 800d704:	f7fe f9bd 	bl	800ba82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d708:	2301      	movs	r3, #1
 800d70a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d70c:	697b      	ldr	r3, [r7, #20]
	}
 800d70e:	4618      	mov	r0, r3
 800d710:	3718      	adds	r7, #24
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop
 800d718:	20005518 	.word	0x20005518
 800d71c:	200059f4 	.word	0x200059f4
 800d720:	2000551c 	.word	0x2000551c

0800d724 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d724:	b580      	push	{r7, lr}
 800d726:	b088      	sub	sp, #32
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
 800d72c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d732:	2301      	movs	r3, #1
 800d734:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d06a      	beq.n	800d812 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d73c:	69bb      	ldr	r3, [r7, #24]
 800d73e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d740:	2b00      	cmp	r3, #0
 800d742:	d10a      	bne.n	800d75a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d748:	f383 8811 	msr	BASEPRI, r3
 800d74c:	f3bf 8f6f 	isb	sy
 800d750:	f3bf 8f4f 	dsb	sy
 800d754:	60fb      	str	r3, [r7, #12]
}
 800d756:	bf00      	nop
 800d758:	e7fe      	b.n	800d758 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d75a:	69bb      	ldr	r3, [r7, #24]
 800d75c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d75e:	683a      	ldr	r2, [r7, #0]
 800d760:	429a      	cmp	r2, r3
 800d762:	d902      	bls.n	800d76a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	61fb      	str	r3, [r7, #28]
 800d768:	e002      	b.n	800d770 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d76a:	69bb      	ldr	r3, [r7, #24]
 800d76c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d76e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d770:	69bb      	ldr	r3, [r7, #24]
 800d772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d774:	69fa      	ldr	r2, [r7, #28]
 800d776:	429a      	cmp	r2, r3
 800d778:	d04b      	beq.n	800d812 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d77a:	69bb      	ldr	r3, [r7, #24]
 800d77c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d77e:	697a      	ldr	r2, [r7, #20]
 800d780:	429a      	cmp	r2, r3
 800d782:	d146      	bne.n	800d812 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d784:	4b25      	ldr	r3, [pc, #148]	; (800d81c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	69ba      	ldr	r2, [r7, #24]
 800d78a:	429a      	cmp	r2, r3
 800d78c:	d10a      	bne.n	800d7a4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d792:	f383 8811 	msr	BASEPRI, r3
 800d796:	f3bf 8f6f 	isb	sy
 800d79a:	f3bf 8f4f 	dsb	sy
 800d79e:	60bb      	str	r3, [r7, #8]
}
 800d7a0:	bf00      	nop
 800d7a2:	e7fe      	b.n	800d7a2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d7a4:	69bb      	ldr	r3, [r7, #24]
 800d7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7a8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d7aa:	69bb      	ldr	r3, [r7, #24]
 800d7ac:	69fa      	ldr	r2, [r7, #28]
 800d7ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d7b0:	69bb      	ldr	r3, [r7, #24]
 800d7b2:	699b      	ldr	r3, [r3, #24]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	db04      	blt.n	800d7c2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7b8:	69fb      	ldr	r3, [r7, #28]
 800d7ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d7be:	69bb      	ldr	r3, [r7, #24]
 800d7c0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d7c2:	69bb      	ldr	r3, [r7, #24]
 800d7c4:	6959      	ldr	r1, [r3, #20]
 800d7c6:	693a      	ldr	r2, [r7, #16]
 800d7c8:	4613      	mov	r3, r2
 800d7ca:	009b      	lsls	r3, r3, #2
 800d7cc:	4413      	add	r3, r2
 800d7ce:	009b      	lsls	r3, r3, #2
 800d7d0:	4a13      	ldr	r2, [pc, #76]	; (800d820 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d7d2:	4413      	add	r3, r2
 800d7d4:	4299      	cmp	r1, r3
 800d7d6:	d11c      	bne.n	800d812 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7d8:	69bb      	ldr	r3, [r7, #24]
 800d7da:	3304      	adds	r3, #4
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f7fe f9ad 	bl	800bb3c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d7e2:	69bb      	ldr	r3, [r7, #24]
 800d7e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7e6:	4b0f      	ldr	r3, [pc, #60]	; (800d824 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d903      	bls.n	800d7f6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d7ee:	69bb      	ldr	r3, [r7, #24]
 800d7f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f2:	4a0c      	ldr	r2, [pc, #48]	; (800d824 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d7f4:	6013      	str	r3, [r2, #0]
 800d7f6:	69bb      	ldr	r3, [r7, #24]
 800d7f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7fa:	4613      	mov	r3, r2
 800d7fc:	009b      	lsls	r3, r3, #2
 800d7fe:	4413      	add	r3, r2
 800d800:	009b      	lsls	r3, r3, #2
 800d802:	4a07      	ldr	r2, [pc, #28]	; (800d820 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d804:	441a      	add	r2, r3
 800d806:	69bb      	ldr	r3, [r7, #24]
 800d808:	3304      	adds	r3, #4
 800d80a:	4619      	mov	r1, r3
 800d80c:	4610      	mov	r0, r2
 800d80e:	f7fe f938 	bl	800ba82 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d812:	bf00      	nop
 800d814:	3720      	adds	r7, #32
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}
 800d81a:	bf00      	nop
 800d81c:	20005518 	.word	0x20005518
 800d820:	2000551c 	.word	0x2000551c
 800d824:	200059f4 	.word	0x200059f4

0800d828 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d828:	b480      	push	{r7}
 800d82a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d82c:	4b07      	ldr	r3, [pc, #28]	; (800d84c <pvTaskIncrementMutexHeldCount+0x24>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d004      	beq.n	800d83e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d834:	4b05      	ldr	r3, [pc, #20]	; (800d84c <pvTaskIncrementMutexHeldCount+0x24>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d83a:	3201      	adds	r2, #1
 800d83c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d83e:	4b03      	ldr	r3, [pc, #12]	; (800d84c <pvTaskIncrementMutexHeldCount+0x24>)
 800d840:	681b      	ldr	r3, [r3, #0]
	}
 800d842:	4618      	mov	r0, r3
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr
 800d84c:	20005518 	.word	0x20005518

0800d850 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b084      	sub	sp, #16
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d85a:	4b21      	ldr	r3, [pc, #132]	; (800d8e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d860:	4b20      	ldr	r3, [pc, #128]	; (800d8e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	3304      	adds	r3, #4
 800d866:	4618      	mov	r0, r3
 800d868:	f7fe f968 	bl	800bb3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d872:	d10a      	bne.n	800d88a <prvAddCurrentTaskToDelayedList+0x3a>
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d007      	beq.n	800d88a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d87a:	4b1a      	ldr	r3, [pc, #104]	; (800d8e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	3304      	adds	r3, #4
 800d880:	4619      	mov	r1, r3
 800d882:	4819      	ldr	r0, [pc, #100]	; (800d8e8 <prvAddCurrentTaskToDelayedList+0x98>)
 800d884:	f7fe f8fd 	bl	800ba82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d888:	e026      	b.n	800d8d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d88a:	68fa      	ldr	r2, [r7, #12]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	4413      	add	r3, r2
 800d890:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d892:	4b14      	ldr	r3, [pc, #80]	; (800d8e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	68ba      	ldr	r2, [r7, #8]
 800d898:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d89a:	68ba      	ldr	r2, [r7, #8]
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d209      	bcs.n	800d8b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8a2:	4b12      	ldr	r3, [pc, #72]	; (800d8ec <prvAddCurrentTaskToDelayedList+0x9c>)
 800d8a4:	681a      	ldr	r2, [r3, #0]
 800d8a6:	4b0f      	ldr	r3, [pc, #60]	; (800d8e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	3304      	adds	r3, #4
 800d8ac:	4619      	mov	r1, r3
 800d8ae:	4610      	mov	r0, r2
 800d8b0:	f7fe f90b 	bl	800baca <vListInsert>
}
 800d8b4:	e010      	b.n	800d8d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8b6:	4b0e      	ldr	r3, [pc, #56]	; (800d8f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d8b8:	681a      	ldr	r2, [r3, #0]
 800d8ba:	4b0a      	ldr	r3, [pc, #40]	; (800d8e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	3304      	adds	r3, #4
 800d8c0:	4619      	mov	r1, r3
 800d8c2:	4610      	mov	r0, r2
 800d8c4:	f7fe f901 	bl	800baca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d8c8:	4b0a      	ldr	r3, [pc, #40]	; (800d8f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	68ba      	ldr	r2, [r7, #8]
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	d202      	bcs.n	800d8d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d8d2:	4a08      	ldr	r2, [pc, #32]	; (800d8f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	6013      	str	r3, [r2, #0]
}
 800d8d8:	bf00      	nop
 800d8da:	3710      	adds	r7, #16
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	200059f0 	.word	0x200059f0
 800d8e4:	20005518 	.word	0x20005518
 800d8e8:	200059d8 	.word	0x200059d8
 800d8ec:	200059a8 	.word	0x200059a8
 800d8f0:	200059a4 	.word	0x200059a4
 800d8f4:	20005a0c 	.word	0x20005a0c

0800d8f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b08a      	sub	sp, #40	; 0x28
 800d8fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d8fe:	2300      	movs	r3, #0
 800d900:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d902:	f000 fb07 	bl	800df14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d906:	4b1c      	ldr	r3, [pc, #112]	; (800d978 <xTimerCreateTimerTask+0x80>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d021      	beq.n	800d952 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d90e:	2300      	movs	r3, #0
 800d910:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d912:	2300      	movs	r3, #0
 800d914:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d916:	1d3a      	adds	r2, r7, #4
 800d918:	f107 0108 	add.w	r1, r7, #8
 800d91c:	f107 030c 	add.w	r3, r7, #12
 800d920:	4618      	mov	r0, r3
 800d922:	f7fe f867 	bl	800b9f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d926:	6879      	ldr	r1, [r7, #4]
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	68fa      	ldr	r2, [r7, #12]
 800d92c:	9202      	str	r2, [sp, #8]
 800d92e:	9301      	str	r3, [sp, #4]
 800d930:	2302      	movs	r3, #2
 800d932:	9300      	str	r3, [sp, #0]
 800d934:	2300      	movs	r3, #0
 800d936:	460a      	mov	r2, r1
 800d938:	4910      	ldr	r1, [pc, #64]	; (800d97c <xTimerCreateTimerTask+0x84>)
 800d93a:	4811      	ldr	r0, [pc, #68]	; (800d980 <xTimerCreateTimerTask+0x88>)
 800d93c:	f7fe ff90 	bl	800c860 <xTaskCreateStatic>
 800d940:	4603      	mov	r3, r0
 800d942:	4a10      	ldr	r2, [pc, #64]	; (800d984 <xTimerCreateTimerTask+0x8c>)
 800d944:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d946:	4b0f      	ldr	r3, [pc, #60]	; (800d984 <xTimerCreateTimerTask+0x8c>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d001      	beq.n	800d952 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d94e:	2301      	movs	r3, #1
 800d950:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d10a      	bne.n	800d96e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d95c:	f383 8811 	msr	BASEPRI, r3
 800d960:	f3bf 8f6f 	isb	sy
 800d964:	f3bf 8f4f 	dsb	sy
 800d968:	613b      	str	r3, [r7, #16]
}
 800d96a:	bf00      	nop
 800d96c:	e7fe      	b.n	800d96c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d96e:	697b      	ldr	r3, [r7, #20]
}
 800d970:	4618      	mov	r0, r3
 800d972:	3718      	adds	r7, #24
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}
 800d978:	20005a48 	.word	0x20005a48
 800d97c:	0801b730 	.word	0x0801b730
 800d980:	0800dabd 	.word	0x0800dabd
 800d984:	20005a4c 	.word	0x20005a4c

0800d988 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b08a      	sub	sp, #40	; 0x28
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	60f8      	str	r0, [r7, #12]
 800d990:	60b9      	str	r1, [r7, #8]
 800d992:	607a      	str	r2, [r7, #4]
 800d994:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d996:	2300      	movs	r3, #0
 800d998:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d10a      	bne.n	800d9b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9a4:	f383 8811 	msr	BASEPRI, r3
 800d9a8:	f3bf 8f6f 	isb	sy
 800d9ac:	f3bf 8f4f 	dsb	sy
 800d9b0:	623b      	str	r3, [r7, #32]
}
 800d9b2:	bf00      	nop
 800d9b4:	e7fe      	b.n	800d9b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d9b6:	4b1a      	ldr	r3, [pc, #104]	; (800da20 <xTimerGenericCommand+0x98>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d02a      	beq.n	800da14 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	2b05      	cmp	r3, #5
 800d9ce:	dc18      	bgt.n	800da02 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d9d0:	f7ff fdb4 	bl	800d53c <xTaskGetSchedulerState>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	2b02      	cmp	r3, #2
 800d9d8:	d109      	bne.n	800d9ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d9da:	4b11      	ldr	r3, [pc, #68]	; (800da20 <xTimerGenericCommand+0x98>)
 800d9dc:	6818      	ldr	r0, [r3, #0]
 800d9de:	f107 0110 	add.w	r1, r7, #16
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9e6:	f7fe fa11 	bl	800be0c <xQueueGenericSend>
 800d9ea:	6278      	str	r0, [r7, #36]	; 0x24
 800d9ec:	e012      	b.n	800da14 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d9ee:	4b0c      	ldr	r3, [pc, #48]	; (800da20 <xTimerGenericCommand+0x98>)
 800d9f0:	6818      	ldr	r0, [r3, #0]
 800d9f2:	f107 0110 	add.w	r1, r7, #16
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	f7fe fa07 	bl	800be0c <xQueueGenericSend>
 800d9fe:	6278      	str	r0, [r7, #36]	; 0x24
 800da00:	e008      	b.n	800da14 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800da02:	4b07      	ldr	r3, [pc, #28]	; (800da20 <xTimerGenericCommand+0x98>)
 800da04:	6818      	ldr	r0, [r3, #0]
 800da06:	f107 0110 	add.w	r1, r7, #16
 800da0a:	2300      	movs	r3, #0
 800da0c:	683a      	ldr	r2, [r7, #0]
 800da0e:	f7fe fafb 	bl	800c008 <xQueueGenericSendFromISR>
 800da12:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800da14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800da16:	4618      	mov	r0, r3
 800da18:	3728      	adds	r7, #40	; 0x28
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	20005a48 	.word	0x20005a48

0800da24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b088      	sub	sp, #32
 800da28:	af02      	add	r7, sp, #8
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da2e:	4b22      	ldr	r3, [pc, #136]	; (800dab8 <prvProcessExpiredTimer+0x94>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	68db      	ldr	r3, [r3, #12]
 800da34:	68db      	ldr	r3, [r3, #12]
 800da36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	3304      	adds	r3, #4
 800da3c:	4618      	mov	r0, r3
 800da3e:	f7fe f87d 	bl	800bb3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da48:	f003 0304 	and.w	r3, r3, #4
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d022      	beq.n	800da96 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	699a      	ldr	r2, [r3, #24]
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	18d1      	adds	r1, r2, r3
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	683a      	ldr	r2, [r7, #0]
 800da5c:	6978      	ldr	r0, [r7, #20]
 800da5e:	f000 f8d1 	bl	800dc04 <prvInsertTimerInActiveList>
 800da62:	4603      	mov	r3, r0
 800da64:	2b00      	cmp	r3, #0
 800da66:	d01f      	beq.n	800daa8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800da68:	2300      	movs	r3, #0
 800da6a:	9300      	str	r3, [sp, #0]
 800da6c:	2300      	movs	r3, #0
 800da6e:	687a      	ldr	r2, [r7, #4]
 800da70:	2100      	movs	r1, #0
 800da72:	6978      	ldr	r0, [r7, #20]
 800da74:	f7ff ff88 	bl	800d988 <xTimerGenericCommand>
 800da78:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d113      	bne.n	800daa8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800da80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da84:	f383 8811 	msr	BASEPRI, r3
 800da88:	f3bf 8f6f 	isb	sy
 800da8c:	f3bf 8f4f 	dsb	sy
 800da90:	60fb      	str	r3, [r7, #12]
}
 800da92:	bf00      	nop
 800da94:	e7fe      	b.n	800da94 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800da96:	697b      	ldr	r3, [r7, #20]
 800da98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da9c:	f023 0301 	bic.w	r3, r3, #1
 800daa0:	b2da      	uxtb	r2, r3
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	6a1b      	ldr	r3, [r3, #32]
 800daac:	6978      	ldr	r0, [r7, #20]
 800daae:	4798      	blx	r3
}
 800dab0:	bf00      	nop
 800dab2:	3718      	adds	r7, #24
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}
 800dab8:	20005a40 	.word	0x20005a40

0800dabc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b084      	sub	sp, #16
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dac4:	f107 0308 	add.w	r3, r7, #8
 800dac8:	4618      	mov	r0, r3
 800daca:	f000 f857 	bl	800db7c <prvGetNextExpireTime>
 800dace:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	4619      	mov	r1, r3
 800dad4:	68f8      	ldr	r0, [r7, #12]
 800dad6:	f000 f803 	bl	800dae0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dada:	f000 f8d5 	bl	800dc88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dade:	e7f1      	b.n	800dac4 <prvTimerTask+0x8>

0800dae0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b084      	sub	sp, #16
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800daea:	f7ff f915 	bl	800cd18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800daee:	f107 0308 	add.w	r3, r7, #8
 800daf2:	4618      	mov	r0, r3
 800daf4:	f000 f866 	bl	800dbc4 <prvSampleTimeNow>
 800daf8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d130      	bne.n	800db62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d10a      	bne.n	800db1c <prvProcessTimerOrBlockTask+0x3c>
 800db06:	687a      	ldr	r2, [r7, #4]
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	429a      	cmp	r2, r3
 800db0c:	d806      	bhi.n	800db1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800db0e:	f7ff f911 	bl	800cd34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800db12:	68f9      	ldr	r1, [r7, #12]
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	f7ff ff85 	bl	800da24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800db1a:	e024      	b.n	800db66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d008      	beq.n	800db34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800db22:	4b13      	ldr	r3, [pc, #76]	; (800db70 <prvProcessTimerOrBlockTask+0x90>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d101      	bne.n	800db30 <prvProcessTimerOrBlockTask+0x50>
 800db2c:	2301      	movs	r3, #1
 800db2e:	e000      	b.n	800db32 <prvProcessTimerOrBlockTask+0x52>
 800db30:	2300      	movs	r3, #0
 800db32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800db34:	4b0f      	ldr	r3, [pc, #60]	; (800db74 <prvProcessTimerOrBlockTask+0x94>)
 800db36:	6818      	ldr	r0, [r3, #0]
 800db38:	687a      	ldr	r2, [r7, #4]
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	1ad3      	subs	r3, r2, r3
 800db3e:	683a      	ldr	r2, [r7, #0]
 800db40:	4619      	mov	r1, r3
 800db42:	f7fe fe59 	bl	800c7f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800db46:	f7ff f8f5 	bl	800cd34 <xTaskResumeAll>
 800db4a:	4603      	mov	r3, r0
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d10a      	bne.n	800db66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800db50:	4b09      	ldr	r3, [pc, #36]	; (800db78 <prvProcessTimerOrBlockTask+0x98>)
 800db52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db56:	601a      	str	r2, [r3, #0]
 800db58:	f3bf 8f4f 	dsb	sy
 800db5c:	f3bf 8f6f 	isb	sy
}
 800db60:	e001      	b.n	800db66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800db62:	f7ff f8e7 	bl	800cd34 <xTaskResumeAll>
}
 800db66:	bf00      	nop
 800db68:	3710      	adds	r7, #16
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	bf00      	nop
 800db70:	20005a44 	.word	0x20005a44
 800db74:	20005a48 	.word	0x20005a48
 800db78:	e000ed04 	.word	0xe000ed04

0800db7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800db7c:	b480      	push	{r7}
 800db7e:	b085      	sub	sp, #20
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800db84:	4b0e      	ldr	r3, [pc, #56]	; (800dbc0 <prvGetNextExpireTime+0x44>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d101      	bne.n	800db92 <prvGetNextExpireTime+0x16>
 800db8e:	2201      	movs	r2, #1
 800db90:	e000      	b.n	800db94 <prvGetNextExpireTime+0x18>
 800db92:	2200      	movs	r2, #0
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d105      	bne.n	800dbac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dba0:	4b07      	ldr	r3, [pc, #28]	; (800dbc0 <prvGetNextExpireTime+0x44>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	68db      	ldr	r3, [r3, #12]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	60fb      	str	r3, [r7, #12]
 800dbaa:	e001      	b.n	800dbb0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dbac:	2300      	movs	r3, #0
 800dbae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3714      	adds	r7, #20
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbc:	4770      	bx	lr
 800dbbe:	bf00      	nop
 800dbc0:	20005a40 	.word	0x20005a40

0800dbc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b084      	sub	sp, #16
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dbcc:	f7ff f950 	bl	800ce70 <xTaskGetTickCount>
 800dbd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dbd2:	4b0b      	ldr	r3, [pc, #44]	; (800dc00 <prvSampleTimeNow+0x3c>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	68fa      	ldr	r2, [r7, #12]
 800dbd8:	429a      	cmp	r2, r3
 800dbda:	d205      	bcs.n	800dbe8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dbdc:	f000 f936 	bl	800de4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	601a      	str	r2, [r3, #0]
 800dbe6:	e002      	b.n	800dbee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2200      	movs	r2, #0
 800dbec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dbee:	4a04      	ldr	r2, [pc, #16]	; (800dc00 <prvSampleTimeNow+0x3c>)
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3710      	adds	r7, #16
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}
 800dbfe:	bf00      	nop
 800dc00:	20005a50 	.word	0x20005a50

0800dc04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b086      	sub	sp, #24
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	60b9      	str	r1, [r7, #8]
 800dc0e:	607a      	str	r2, [r7, #4]
 800dc10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dc12:	2300      	movs	r3, #0
 800dc14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	68ba      	ldr	r2, [r7, #8]
 800dc1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	68fa      	ldr	r2, [r7, #12]
 800dc20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dc22:	68ba      	ldr	r2, [r7, #8]
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d812      	bhi.n	800dc50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc2a:	687a      	ldr	r2, [r7, #4]
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	1ad2      	subs	r2, r2, r3
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	699b      	ldr	r3, [r3, #24]
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d302      	bcc.n	800dc3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	617b      	str	r3, [r7, #20]
 800dc3c:	e01b      	b.n	800dc76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dc3e:	4b10      	ldr	r3, [pc, #64]	; (800dc80 <prvInsertTimerInActiveList+0x7c>)
 800dc40:	681a      	ldr	r2, [r3, #0]
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	3304      	adds	r3, #4
 800dc46:	4619      	mov	r1, r3
 800dc48:	4610      	mov	r0, r2
 800dc4a:	f7fd ff3e 	bl	800baca <vListInsert>
 800dc4e:	e012      	b.n	800dc76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dc50:	687a      	ldr	r2, [r7, #4]
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d206      	bcs.n	800dc66 <prvInsertTimerInActiveList+0x62>
 800dc58:	68ba      	ldr	r2, [r7, #8]
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d302      	bcc.n	800dc66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dc60:	2301      	movs	r3, #1
 800dc62:	617b      	str	r3, [r7, #20]
 800dc64:	e007      	b.n	800dc76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dc66:	4b07      	ldr	r3, [pc, #28]	; (800dc84 <prvInsertTimerInActiveList+0x80>)
 800dc68:	681a      	ldr	r2, [r3, #0]
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	3304      	adds	r3, #4
 800dc6e:	4619      	mov	r1, r3
 800dc70:	4610      	mov	r0, r2
 800dc72:	f7fd ff2a 	bl	800baca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dc76:	697b      	ldr	r3, [r7, #20]
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3718      	adds	r7, #24
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	20005a44 	.word	0x20005a44
 800dc84:	20005a40 	.word	0x20005a40

0800dc88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b08e      	sub	sp, #56	; 0x38
 800dc8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dc8e:	e0ca      	b.n	800de26 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	da18      	bge.n	800dcc8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dc96:	1d3b      	adds	r3, r7, #4
 800dc98:	3304      	adds	r3, #4
 800dc9a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d10a      	bne.n	800dcb8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800dca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca6:	f383 8811 	msr	BASEPRI, r3
 800dcaa:	f3bf 8f6f 	isb	sy
 800dcae:	f3bf 8f4f 	dsb	sy
 800dcb2:	61fb      	str	r3, [r7, #28]
}
 800dcb4:	bf00      	nop
 800dcb6:	e7fe      	b.n	800dcb6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dcb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dcbe:	6850      	ldr	r0, [r2, #4]
 800dcc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dcc2:	6892      	ldr	r2, [r2, #8]
 800dcc4:	4611      	mov	r1, r2
 800dcc6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	f2c0 80ab 	blt.w	800de26 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dcd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd6:	695b      	ldr	r3, [r3, #20]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d004      	beq.n	800dce6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dcdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcde:	3304      	adds	r3, #4
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7fd ff2b 	bl	800bb3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dce6:	463b      	mov	r3, r7
 800dce8:	4618      	mov	r0, r3
 800dcea:	f7ff ff6b 	bl	800dbc4 <prvSampleTimeNow>
 800dcee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2b09      	cmp	r3, #9
 800dcf4:	f200 8096 	bhi.w	800de24 <prvProcessReceivedCommands+0x19c>
 800dcf8:	a201      	add	r2, pc, #4	; (adr r2, 800dd00 <prvProcessReceivedCommands+0x78>)
 800dcfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcfe:	bf00      	nop
 800dd00:	0800dd29 	.word	0x0800dd29
 800dd04:	0800dd29 	.word	0x0800dd29
 800dd08:	0800dd29 	.word	0x0800dd29
 800dd0c:	0800dd9d 	.word	0x0800dd9d
 800dd10:	0800ddb1 	.word	0x0800ddb1
 800dd14:	0800ddfb 	.word	0x0800ddfb
 800dd18:	0800dd29 	.word	0x0800dd29
 800dd1c:	0800dd29 	.word	0x0800dd29
 800dd20:	0800dd9d 	.word	0x0800dd9d
 800dd24:	0800ddb1 	.word	0x0800ddb1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd2e:	f043 0301 	orr.w	r3, r3, #1
 800dd32:	b2da      	uxtb	r2, r3
 800dd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dd3a:	68ba      	ldr	r2, [r7, #8]
 800dd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd3e:	699b      	ldr	r3, [r3, #24]
 800dd40:	18d1      	adds	r1, r2, r3
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd48:	f7ff ff5c 	bl	800dc04 <prvInsertTimerInActiveList>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d069      	beq.n	800de26 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd54:	6a1b      	ldr	r3, [r3, #32]
 800dd56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd60:	f003 0304 	and.w	r3, r3, #4
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d05e      	beq.n	800de26 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dd68:	68ba      	ldr	r2, [r7, #8]
 800dd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd6c:	699b      	ldr	r3, [r3, #24]
 800dd6e:	441a      	add	r2, r3
 800dd70:	2300      	movs	r3, #0
 800dd72:	9300      	str	r3, [sp, #0]
 800dd74:	2300      	movs	r3, #0
 800dd76:	2100      	movs	r1, #0
 800dd78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd7a:	f7ff fe05 	bl	800d988 <xTimerGenericCommand>
 800dd7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dd80:	6a3b      	ldr	r3, [r7, #32]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d14f      	bne.n	800de26 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800dd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd8a:	f383 8811 	msr	BASEPRI, r3
 800dd8e:	f3bf 8f6f 	isb	sy
 800dd92:	f3bf 8f4f 	dsb	sy
 800dd96:	61bb      	str	r3, [r7, #24]
}
 800dd98:	bf00      	nop
 800dd9a:	e7fe      	b.n	800dd9a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dda2:	f023 0301 	bic.w	r3, r3, #1
 800dda6:	b2da      	uxtb	r2, r3
 800dda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ddae:	e03a      	b.n	800de26 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ddb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ddb6:	f043 0301 	orr.w	r3, r3, #1
 800ddba:	b2da      	uxtb	r2, r3
 800ddbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ddc2:	68ba      	ldr	r2, [r7, #8]
 800ddc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ddc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddca:	699b      	ldr	r3, [r3, #24]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d10a      	bne.n	800dde6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ddd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd4:	f383 8811 	msr	BASEPRI, r3
 800ddd8:	f3bf 8f6f 	isb	sy
 800dddc:	f3bf 8f4f 	dsb	sy
 800dde0:	617b      	str	r3, [r7, #20]
}
 800dde2:	bf00      	nop
 800dde4:	e7fe      	b.n	800dde4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dde6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dde8:	699a      	ldr	r2, [r3, #24]
 800ddea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddec:	18d1      	adds	r1, r2, r3
 800ddee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddf4:	f7ff ff06 	bl	800dc04 <prvInsertTimerInActiveList>
					break;
 800ddf8:	e015      	b.n	800de26 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ddfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de00:	f003 0302 	and.w	r3, r3, #2
 800de04:	2b00      	cmp	r3, #0
 800de06:	d103      	bne.n	800de10 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800de08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de0a:	f000 fbe1 	bl	800e5d0 <vPortFree>
 800de0e:	e00a      	b.n	800de26 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de16:	f023 0301 	bic.w	r3, r3, #1
 800de1a:	b2da      	uxtb	r2, r3
 800de1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800de22:	e000      	b.n	800de26 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800de24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800de26:	4b08      	ldr	r3, [pc, #32]	; (800de48 <prvProcessReceivedCommands+0x1c0>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	1d39      	adds	r1, r7, #4
 800de2c:	2200      	movs	r2, #0
 800de2e:	4618      	mov	r0, r3
 800de30:	f7fe f986 	bl	800c140 <xQueueReceive>
 800de34:	4603      	mov	r3, r0
 800de36:	2b00      	cmp	r3, #0
 800de38:	f47f af2a 	bne.w	800dc90 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800de3c:	bf00      	nop
 800de3e:	bf00      	nop
 800de40:	3730      	adds	r7, #48	; 0x30
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}
 800de46:	bf00      	nop
 800de48:	20005a48 	.word	0x20005a48

0800de4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b088      	sub	sp, #32
 800de50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800de52:	e048      	b.n	800dee6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800de54:	4b2d      	ldr	r3, [pc, #180]	; (800df0c <prvSwitchTimerLists+0xc0>)
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	68db      	ldr	r3, [r3, #12]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de5e:	4b2b      	ldr	r3, [pc, #172]	; (800df0c <prvSwitchTimerLists+0xc0>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	68db      	ldr	r3, [r3, #12]
 800de64:	68db      	ldr	r3, [r3, #12]
 800de66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	3304      	adds	r3, #4
 800de6c:	4618      	mov	r0, r3
 800de6e:	f7fd fe65 	bl	800bb3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	6a1b      	ldr	r3, [r3, #32]
 800de76:	68f8      	ldr	r0, [r7, #12]
 800de78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de80:	f003 0304 	and.w	r3, r3, #4
 800de84:	2b00      	cmp	r3, #0
 800de86:	d02e      	beq.n	800dee6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	699b      	ldr	r3, [r3, #24]
 800de8c:	693a      	ldr	r2, [r7, #16]
 800de8e:	4413      	add	r3, r2
 800de90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800de92:	68ba      	ldr	r2, [r7, #8]
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	429a      	cmp	r2, r3
 800de98:	d90e      	bls.n	800deb8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	68ba      	ldr	r2, [r7, #8]
 800de9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	68fa      	ldr	r2, [r7, #12]
 800dea4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dea6:	4b19      	ldr	r3, [pc, #100]	; (800df0c <prvSwitchTimerLists+0xc0>)
 800dea8:	681a      	ldr	r2, [r3, #0]
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	3304      	adds	r3, #4
 800deae:	4619      	mov	r1, r3
 800deb0:	4610      	mov	r0, r2
 800deb2:	f7fd fe0a 	bl	800baca <vListInsert>
 800deb6:	e016      	b.n	800dee6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800deb8:	2300      	movs	r3, #0
 800deba:	9300      	str	r3, [sp, #0]
 800debc:	2300      	movs	r3, #0
 800debe:	693a      	ldr	r2, [r7, #16]
 800dec0:	2100      	movs	r1, #0
 800dec2:	68f8      	ldr	r0, [r7, #12]
 800dec4:	f7ff fd60 	bl	800d988 <xTimerGenericCommand>
 800dec8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d10a      	bne.n	800dee6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ded0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded4:	f383 8811 	msr	BASEPRI, r3
 800ded8:	f3bf 8f6f 	isb	sy
 800dedc:	f3bf 8f4f 	dsb	sy
 800dee0:	603b      	str	r3, [r7, #0]
}
 800dee2:	bf00      	nop
 800dee4:	e7fe      	b.n	800dee4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dee6:	4b09      	ldr	r3, [pc, #36]	; (800df0c <prvSwitchTimerLists+0xc0>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d1b1      	bne.n	800de54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800def0:	4b06      	ldr	r3, [pc, #24]	; (800df0c <prvSwitchTimerLists+0xc0>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800def6:	4b06      	ldr	r3, [pc, #24]	; (800df10 <prvSwitchTimerLists+0xc4>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	4a04      	ldr	r2, [pc, #16]	; (800df0c <prvSwitchTimerLists+0xc0>)
 800defc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800defe:	4a04      	ldr	r2, [pc, #16]	; (800df10 <prvSwitchTimerLists+0xc4>)
 800df00:	697b      	ldr	r3, [r7, #20]
 800df02:	6013      	str	r3, [r2, #0]
}
 800df04:	bf00      	nop
 800df06:	3718      	adds	r7, #24
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}
 800df0c:	20005a40 	.word	0x20005a40
 800df10:	20005a44 	.word	0x20005a44

0800df14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b082      	sub	sp, #8
 800df18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800df1a:	f000 f96b 	bl	800e1f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800df1e:	4b15      	ldr	r3, [pc, #84]	; (800df74 <prvCheckForValidListAndQueue+0x60>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d120      	bne.n	800df68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800df26:	4814      	ldr	r0, [pc, #80]	; (800df78 <prvCheckForValidListAndQueue+0x64>)
 800df28:	f7fd fd7e 	bl	800ba28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800df2c:	4813      	ldr	r0, [pc, #76]	; (800df7c <prvCheckForValidListAndQueue+0x68>)
 800df2e:	f7fd fd7b 	bl	800ba28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800df32:	4b13      	ldr	r3, [pc, #76]	; (800df80 <prvCheckForValidListAndQueue+0x6c>)
 800df34:	4a10      	ldr	r2, [pc, #64]	; (800df78 <prvCheckForValidListAndQueue+0x64>)
 800df36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800df38:	4b12      	ldr	r3, [pc, #72]	; (800df84 <prvCheckForValidListAndQueue+0x70>)
 800df3a:	4a10      	ldr	r2, [pc, #64]	; (800df7c <prvCheckForValidListAndQueue+0x68>)
 800df3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800df3e:	2300      	movs	r3, #0
 800df40:	9300      	str	r3, [sp, #0]
 800df42:	4b11      	ldr	r3, [pc, #68]	; (800df88 <prvCheckForValidListAndQueue+0x74>)
 800df44:	4a11      	ldr	r2, [pc, #68]	; (800df8c <prvCheckForValidListAndQueue+0x78>)
 800df46:	2110      	movs	r1, #16
 800df48:	200a      	movs	r0, #10
 800df4a:	f7fd fe89 	bl	800bc60 <xQueueGenericCreateStatic>
 800df4e:	4603      	mov	r3, r0
 800df50:	4a08      	ldr	r2, [pc, #32]	; (800df74 <prvCheckForValidListAndQueue+0x60>)
 800df52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800df54:	4b07      	ldr	r3, [pc, #28]	; (800df74 <prvCheckForValidListAndQueue+0x60>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d005      	beq.n	800df68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800df5c:	4b05      	ldr	r3, [pc, #20]	; (800df74 <prvCheckForValidListAndQueue+0x60>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	490b      	ldr	r1, [pc, #44]	; (800df90 <prvCheckForValidListAndQueue+0x7c>)
 800df62:	4618      	mov	r0, r3
 800df64:	f7fe fc1e 	bl	800c7a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800df68:	f000 f974 	bl	800e254 <vPortExitCritical>
}
 800df6c:	bf00      	nop
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}
 800df72:	bf00      	nop
 800df74:	20005a48 	.word	0x20005a48
 800df78:	20005a18 	.word	0x20005a18
 800df7c:	20005a2c 	.word	0x20005a2c
 800df80:	20005a40 	.word	0x20005a40
 800df84:	20005a44 	.word	0x20005a44
 800df88:	20005af4 	.word	0x20005af4
 800df8c:	20005a54 	.word	0x20005a54
 800df90:	0801b738 	.word	0x0801b738

0800df94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800df94:	b480      	push	{r7}
 800df96:	b085      	sub	sp, #20
 800df98:	af00      	add	r7, sp, #0
 800df9a:	60f8      	str	r0, [r7, #12]
 800df9c:	60b9      	str	r1, [r7, #8]
 800df9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	3b04      	subs	r3, #4
 800dfa4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dfac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	3b04      	subs	r3, #4
 800dfb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	f023 0201 	bic.w	r2, r3, #1
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	3b04      	subs	r3, #4
 800dfc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dfc4:	4a0c      	ldr	r2, [pc, #48]	; (800dff8 <pxPortInitialiseStack+0x64>)
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	3b14      	subs	r3, #20
 800dfce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dfd0:	687a      	ldr	r2, [r7, #4]
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	3b04      	subs	r3, #4
 800dfda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	f06f 0202 	mvn.w	r2, #2
 800dfe2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	3b20      	subs	r3, #32
 800dfe8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dfea:	68fb      	ldr	r3, [r7, #12]
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	3714      	adds	r7, #20
 800dff0:	46bd      	mov	sp, r7
 800dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff6:	4770      	bx	lr
 800dff8:	0800dffd 	.word	0x0800dffd

0800dffc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dffc:	b480      	push	{r7}
 800dffe:	b085      	sub	sp, #20
 800e000:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e002:	2300      	movs	r3, #0
 800e004:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e006:	4b12      	ldr	r3, [pc, #72]	; (800e050 <prvTaskExitError+0x54>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e00e:	d00a      	beq.n	800e026 <prvTaskExitError+0x2a>
	__asm volatile
 800e010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e014:	f383 8811 	msr	BASEPRI, r3
 800e018:	f3bf 8f6f 	isb	sy
 800e01c:	f3bf 8f4f 	dsb	sy
 800e020:	60fb      	str	r3, [r7, #12]
}
 800e022:	bf00      	nop
 800e024:	e7fe      	b.n	800e024 <prvTaskExitError+0x28>
	__asm volatile
 800e026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e02a:	f383 8811 	msr	BASEPRI, r3
 800e02e:	f3bf 8f6f 	isb	sy
 800e032:	f3bf 8f4f 	dsb	sy
 800e036:	60bb      	str	r3, [r7, #8]
}
 800e038:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e03a:	bf00      	nop
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d0fc      	beq.n	800e03c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e042:	bf00      	nop
 800e044:	bf00      	nop
 800e046:	3714      	adds	r7, #20
 800e048:	46bd      	mov	sp, r7
 800e04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04e:	4770      	bx	lr
 800e050:	20000034 	.word	0x20000034
	...

0800e060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e060:	4b07      	ldr	r3, [pc, #28]	; (800e080 <pxCurrentTCBConst2>)
 800e062:	6819      	ldr	r1, [r3, #0]
 800e064:	6808      	ldr	r0, [r1, #0]
 800e066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e06a:	f380 8809 	msr	PSP, r0
 800e06e:	f3bf 8f6f 	isb	sy
 800e072:	f04f 0000 	mov.w	r0, #0
 800e076:	f380 8811 	msr	BASEPRI, r0
 800e07a:	4770      	bx	lr
 800e07c:	f3af 8000 	nop.w

0800e080 <pxCurrentTCBConst2>:
 800e080:	20005518 	.word	0x20005518
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e084:	bf00      	nop
 800e086:	bf00      	nop

0800e088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e088:	4808      	ldr	r0, [pc, #32]	; (800e0ac <prvPortStartFirstTask+0x24>)
 800e08a:	6800      	ldr	r0, [r0, #0]
 800e08c:	6800      	ldr	r0, [r0, #0]
 800e08e:	f380 8808 	msr	MSP, r0
 800e092:	f04f 0000 	mov.w	r0, #0
 800e096:	f380 8814 	msr	CONTROL, r0
 800e09a:	b662      	cpsie	i
 800e09c:	b661      	cpsie	f
 800e09e:	f3bf 8f4f 	dsb	sy
 800e0a2:	f3bf 8f6f 	isb	sy
 800e0a6:	df00      	svc	0
 800e0a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e0aa:	bf00      	nop
 800e0ac:	e000ed08 	.word	0xe000ed08

0800e0b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b086      	sub	sp, #24
 800e0b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e0b6:	4b46      	ldr	r3, [pc, #280]	; (800e1d0 <xPortStartScheduler+0x120>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	4a46      	ldr	r2, [pc, #280]	; (800e1d4 <xPortStartScheduler+0x124>)
 800e0bc:	4293      	cmp	r3, r2
 800e0be:	d10a      	bne.n	800e0d6 <xPortStartScheduler+0x26>
	__asm volatile
 800e0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0c4:	f383 8811 	msr	BASEPRI, r3
 800e0c8:	f3bf 8f6f 	isb	sy
 800e0cc:	f3bf 8f4f 	dsb	sy
 800e0d0:	613b      	str	r3, [r7, #16]
}
 800e0d2:	bf00      	nop
 800e0d4:	e7fe      	b.n	800e0d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e0d6:	4b3e      	ldr	r3, [pc, #248]	; (800e1d0 <xPortStartScheduler+0x120>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	4a3f      	ldr	r2, [pc, #252]	; (800e1d8 <xPortStartScheduler+0x128>)
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d10a      	bne.n	800e0f6 <xPortStartScheduler+0x46>
	__asm volatile
 800e0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0e4:	f383 8811 	msr	BASEPRI, r3
 800e0e8:	f3bf 8f6f 	isb	sy
 800e0ec:	f3bf 8f4f 	dsb	sy
 800e0f0:	60fb      	str	r3, [r7, #12]
}
 800e0f2:	bf00      	nop
 800e0f4:	e7fe      	b.n	800e0f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e0f6:	4b39      	ldr	r3, [pc, #228]	; (800e1dc <xPortStartScheduler+0x12c>)
 800e0f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	781b      	ldrb	r3, [r3, #0]
 800e0fe:	b2db      	uxtb	r3, r3
 800e100:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	22ff      	movs	r2, #255	; 0xff
 800e106:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	781b      	ldrb	r3, [r3, #0]
 800e10c:	b2db      	uxtb	r3, r3
 800e10e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e110:	78fb      	ldrb	r3, [r7, #3]
 800e112:	b2db      	uxtb	r3, r3
 800e114:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e118:	b2da      	uxtb	r2, r3
 800e11a:	4b31      	ldr	r3, [pc, #196]	; (800e1e0 <xPortStartScheduler+0x130>)
 800e11c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e11e:	4b31      	ldr	r3, [pc, #196]	; (800e1e4 <xPortStartScheduler+0x134>)
 800e120:	2207      	movs	r2, #7
 800e122:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e124:	e009      	b.n	800e13a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e126:	4b2f      	ldr	r3, [pc, #188]	; (800e1e4 <xPortStartScheduler+0x134>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	3b01      	subs	r3, #1
 800e12c:	4a2d      	ldr	r2, [pc, #180]	; (800e1e4 <xPortStartScheduler+0x134>)
 800e12e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e130:	78fb      	ldrb	r3, [r7, #3]
 800e132:	b2db      	uxtb	r3, r3
 800e134:	005b      	lsls	r3, r3, #1
 800e136:	b2db      	uxtb	r3, r3
 800e138:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e13a:	78fb      	ldrb	r3, [r7, #3]
 800e13c:	b2db      	uxtb	r3, r3
 800e13e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e142:	2b80      	cmp	r3, #128	; 0x80
 800e144:	d0ef      	beq.n	800e126 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e146:	4b27      	ldr	r3, [pc, #156]	; (800e1e4 <xPortStartScheduler+0x134>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f1c3 0307 	rsb	r3, r3, #7
 800e14e:	2b04      	cmp	r3, #4
 800e150:	d00a      	beq.n	800e168 <xPortStartScheduler+0xb8>
	__asm volatile
 800e152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e156:	f383 8811 	msr	BASEPRI, r3
 800e15a:	f3bf 8f6f 	isb	sy
 800e15e:	f3bf 8f4f 	dsb	sy
 800e162:	60bb      	str	r3, [r7, #8]
}
 800e164:	bf00      	nop
 800e166:	e7fe      	b.n	800e166 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e168:	4b1e      	ldr	r3, [pc, #120]	; (800e1e4 <xPortStartScheduler+0x134>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	021b      	lsls	r3, r3, #8
 800e16e:	4a1d      	ldr	r2, [pc, #116]	; (800e1e4 <xPortStartScheduler+0x134>)
 800e170:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e172:	4b1c      	ldr	r3, [pc, #112]	; (800e1e4 <xPortStartScheduler+0x134>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e17a:	4a1a      	ldr	r2, [pc, #104]	; (800e1e4 <xPortStartScheduler+0x134>)
 800e17c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	b2da      	uxtb	r2, r3
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e186:	4b18      	ldr	r3, [pc, #96]	; (800e1e8 <xPortStartScheduler+0x138>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	4a17      	ldr	r2, [pc, #92]	; (800e1e8 <xPortStartScheduler+0x138>)
 800e18c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e190:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e192:	4b15      	ldr	r3, [pc, #84]	; (800e1e8 <xPortStartScheduler+0x138>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	4a14      	ldr	r2, [pc, #80]	; (800e1e8 <xPortStartScheduler+0x138>)
 800e198:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e19c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e19e:	f000 f8dd 	bl	800e35c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e1a2:	4b12      	ldr	r3, [pc, #72]	; (800e1ec <xPortStartScheduler+0x13c>)
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e1a8:	f000 f8fc 	bl	800e3a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e1ac:	4b10      	ldr	r3, [pc, #64]	; (800e1f0 <xPortStartScheduler+0x140>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	4a0f      	ldr	r2, [pc, #60]	; (800e1f0 <xPortStartScheduler+0x140>)
 800e1b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e1b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e1b8:	f7ff ff66 	bl	800e088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e1bc:	f7fe ff22 	bl	800d004 <vTaskSwitchContext>
	prvTaskExitError();
 800e1c0:	f7ff ff1c 	bl	800dffc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e1c4:	2300      	movs	r3, #0
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3718      	adds	r7, #24
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}
 800e1ce:	bf00      	nop
 800e1d0:	e000ed00 	.word	0xe000ed00
 800e1d4:	410fc271 	.word	0x410fc271
 800e1d8:	410fc270 	.word	0x410fc270
 800e1dc:	e000e400 	.word	0xe000e400
 800e1e0:	20005b44 	.word	0x20005b44
 800e1e4:	20005b48 	.word	0x20005b48
 800e1e8:	e000ed20 	.word	0xe000ed20
 800e1ec:	20000034 	.word	0x20000034
 800e1f0:	e000ef34 	.word	0xe000ef34

0800e1f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e1f4:	b480      	push	{r7}
 800e1f6:	b083      	sub	sp, #12
 800e1f8:	af00      	add	r7, sp, #0
	__asm volatile
 800e1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1fe:	f383 8811 	msr	BASEPRI, r3
 800e202:	f3bf 8f6f 	isb	sy
 800e206:	f3bf 8f4f 	dsb	sy
 800e20a:	607b      	str	r3, [r7, #4]
}
 800e20c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e20e:	4b0f      	ldr	r3, [pc, #60]	; (800e24c <vPortEnterCritical+0x58>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	3301      	adds	r3, #1
 800e214:	4a0d      	ldr	r2, [pc, #52]	; (800e24c <vPortEnterCritical+0x58>)
 800e216:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e218:	4b0c      	ldr	r3, [pc, #48]	; (800e24c <vPortEnterCritical+0x58>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	2b01      	cmp	r3, #1
 800e21e:	d10f      	bne.n	800e240 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e220:	4b0b      	ldr	r3, [pc, #44]	; (800e250 <vPortEnterCritical+0x5c>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	b2db      	uxtb	r3, r3
 800e226:	2b00      	cmp	r3, #0
 800e228:	d00a      	beq.n	800e240 <vPortEnterCritical+0x4c>
	__asm volatile
 800e22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e22e:	f383 8811 	msr	BASEPRI, r3
 800e232:	f3bf 8f6f 	isb	sy
 800e236:	f3bf 8f4f 	dsb	sy
 800e23a:	603b      	str	r3, [r7, #0]
}
 800e23c:	bf00      	nop
 800e23e:	e7fe      	b.n	800e23e <vPortEnterCritical+0x4a>
	}
}
 800e240:	bf00      	nop
 800e242:	370c      	adds	r7, #12
 800e244:	46bd      	mov	sp, r7
 800e246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24a:	4770      	bx	lr
 800e24c:	20000034 	.word	0x20000034
 800e250:	e000ed04 	.word	0xe000ed04

0800e254 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e254:	b480      	push	{r7}
 800e256:	b083      	sub	sp, #12
 800e258:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e25a:	4b12      	ldr	r3, [pc, #72]	; (800e2a4 <vPortExitCritical+0x50>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d10a      	bne.n	800e278 <vPortExitCritical+0x24>
	__asm volatile
 800e262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e266:	f383 8811 	msr	BASEPRI, r3
 800e26a:	f3bf 8f6f 	isb	sy
 800e26e:	f3bf 8f4f 	dsb	sy
 800e272:	607b      	str	r3, [r7, #4]
}
 800e274:	bf00      	nop
 800e276:	e7fe      	b.n	800e276 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e278:	4b0a      	ldr	r3, [pc, #40]	; (800e2a4 <vPortExitCritical+0x50>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	3b01      	subs	r3, #1
 800e27e:	4a09      	ldr	r2, [pc, #36]	; (800e2a4 <vPortExitCritical+0x50>)
 800e280:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e282:	4b08      	ldr	r3, [pc, #32]	; (800e2a4 <vPortExitCritical+0x50>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d105      	bne.n	800e296 <vPortExitCritical+0x42>
 800e28a:	2300      	movs	r3, #0
 800e28c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	f383 8811 	msr	BASEPRI, r3
}
 800e294:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e296:	bf00      	nop
 800e298:	370c      	adds	r7, #12
 800e29a:	46bd      	mov	sp, r7
 800e29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a0:	4770      	bx	lr
 800e2a2:	bf00      	nop
 800e2a4:	20000034 	.word	0x20000034
	...

0800e2b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e2b0:	f3ef 8009 	mrs	r0, PSP
 800e2b4:	f3bf 8f6f 	isb	sy
 800e2b8:	4b15      	ldr	r3, [pc, #84]	; (800e310 <pxCurrentTCBConst>)
 800e2ba:	681a      	ldr	r2, [r3, #0]
 800e2bc:	f01e 0f10 	tst.w	lr, #16
 800e2c0:	bf08      	it	eq
 800e2c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e2c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ca:	6010      	str	r0, [r2, #0]
 800e2cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e2d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e2d4:	f380 8811 	msr	BASEPRI, r0
 800e2d8:	f3bf 8f4f 	dsb	sy
 800e2dc:	f3bf 8f6f 	isb	sy
 800e2e0:	f7fe fe90 	bl	800d004 <vTaskSwitchContext>
 800e2e4:	f04f 0000 	mov.w	r0, #0
 800e2e8:	f380 8811 	msr	BASEPRI, r0
 800e2ec:	bc09      	pop	{r0, r3}
 800e2ee:	6819      	ldr	r1, [r3, #0]
 800e2f0:	6808      	ldr	r0, [r1, #0]
 800e2f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2f6:	f01e 0f10 	tst.w	lr, #16
 800e2fa:	bf08      	it	eq
 800e2fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e300:	f380 8809 	msr	PSP, r0
 800e304:	f3bf 8f6f 	isb	sy
 800e308:	4770      	bx	lr
 800e30a:	bf00      	nop
 800e30c:	f3af 8000 	nop.w

0800e310 <pxCurrentTCBConst>:
 800e310:	20005518 	.word	0x20005518
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e314:	bf00      	nop
 800e316:	bf00      	nop

0800e318 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b082      	sub	sp, #8
 800e31c:	af00      	add	r7, sp, #0
	__asm volatile
 800e31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e322:	f383 8811 	msr	BASEPRI, r3
 800e326:	f3bf 8f6f 	isb	sy
 800e32a:	f3bf 8f4f 	dsb	sy
 800e32e:	607b      	str	r3, [r7, #4]
}
 800e330:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e332:	f7fe fdad 	bl	800ce90 <xTaskIncrementTick>
 800e336:	4603      	mov	r3, r0
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d003      	beq.n	800e344 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e33c:	4b06      	ldr	r3, [pc, #24]	; (800e358 <xPortSysTickHandler+0x40>)
 800e33e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e342:	601a      	str	r2, [r3, #0]
 800e344:	2300      	movs	r3, #0
 800e346:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	f383 8811 	msr	BASEPRI, r3
}
 800e34e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e350:	bf00      	nop
 800e352:	3708      	adds	r7, #8
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}
 800e358:	e000ed04 	.word	0xe000ed04

0800e35c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e35c:	b480      	push	{r7}
 800e35e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e360:	4b0b      	ldr	r3, [pc, #44]	; (800e390 <vPortSetupTimerInterrupt+0x34>)
 800e362:	2200      	movs	r2, #0
 800e364:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e366:	4b0b      	ldr	r3, [pc, #44]	; (800e394 <vPortSetupTimerInterrupt+0x38>)
 800e368:	2200      	movs	r2, #0
 800e36a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e36c:	4b0a      	ldr	r3, [pc, #40]	; (800e398 <vPortSetupTimerInterrupt+0x3c>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	4a0a      	ldr	r2, [pc, #40]	; (800e39c <vPortSetupTimerInterrupt+0x40>)
 800e372:	fba2 2303 	umull	r2, r3, r2, r3
 800e376:	099b      	lsrs	r3, r3, #6
 800e378:	4a09      	ldr	r2, [pc, #36]	; (800e3a0 <vPortSetupTimerInterrupt+0x44>)
 800e37a:	3b01      	subs	r3, #1
 800e37c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e37e:	4b04      	ldr	r3, [pc, #16]	; (800e390 <vPortSetupTimerInterrupt+0x34>)
 800e380:	2207      	movs	r2, #7
 800e382:	601a      	str	r2, [r3, #0]
}
 800e384:	bf00      	nop
 800e386:	46bd      	mov	sp, r7
 800e388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38c:	4770      	bx	lr
 800e38e:	bf00      	nop
 800e390:	e000e010 	.word	0xe000e010
 800e394:	e000e018 	.word	0xe000e018
 800e398:	20000014 	.word	0x20000014
 800e39c:	10624dd3 	.word	0x10624dd3
 800e3a0:	e000e014 	.word	0xe000e014

0800e3a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e3a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e3b4 <vPortEnableVFP+0x10>
 800e3a8:	6801      	ldr	r1, [r0, #0]
 800e3aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e3ae:	6001      	str	r1, [r0, #0]
 800e3b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e3b2:	bf00      	nop
 800e3b4:	e000ed88 	.word	0xe000ed88

0800e3b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b085      	sub	sp, #20
 800e3bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e3be:	f3ef 8305 	mrs	r3, IPSR
 800e3c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	2b0f      	cmp	r3, #15
 800e3c8:	d914      	bls.n	800e3f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e3ca:	4a17      	ldr	r2, [pc, #92]	; (800e428 <vPortValidateInterruptPriority+0x70>)
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	4413      	add	r3, r2
 800e3d0:	781b      	ldrb	r3, [r3, #0]
 800e3d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e3d4:	4b15      	ldr	r3, [pc, #84]	; (800e42c <vPortValidateInterruptPriority+0x74>)
 800e3d6:	781b      	ldrb	r3, [r3, #0]
 800e3d8:	7afa      	ldrb	r2, [r7, #11]
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	d20a      	bcs.n	800e3f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e2:	f383 8811 	msr	BASEPRI, r3
 800e3e6:	f3bf 8f6f 	isb	sy
 800e3ea:	f3bf 8f4f 	dsb	sy
 800e3ee:	607b      	str	r3, [r7, #4]
}
 800e3f0:	bf00      	nop
 800e3f2:	e7fe      	b.n	800e3f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e3f4:	4b0e      	ldr	r3, [pc, #56]	; (800e430 <vPortValidateInterruptPriority+0x78>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e3fc:	4b0d      	ldr	r3, [pc, #52]	; (800e434 <vPortValidateInterruptPriority+0x7c>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	429a      	cmp	r2, r3
 800e402:	d90a      	bls.n	800e41a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e408:	f383 8811 	msr	BASEPRI, r3
 800e40c:	f3bf 8f6f 	isb	sy
 800e410:	f3bf 8f4f 	dsb	sy
 800e414:	603b      	str	r3, [r7, #0]
}
 800e416:	bf00      	nop
 800e418:	e7fe      	b.n	800e418 <vPortValidateInterruptPriority+0x60>
	}
 800e41a:	bf00      	nop
 800e41c:	3714      	adds	r7, #20
 800e41e:	46bd      	mov	sp, r7
 800e420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e424:	4770      	bx	lr
 800e426:	bf00      	nop
 800e428:	e000e3f0 	.word	0xe000e3f0
 800e42c:	20005b44 	.word	0x20005b44
 800e430:	e000ed0c 	.word	0xe000ed0c
 800e434:	20005b48 	.word	0x20005b48

0800e438 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b08a      	sub	sp, #40	; 0x28
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e440:	2300      	movs	r3, #0
 800e442:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e444:	f7fe fc68 	bl	800cd18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e448:	4b5b      	ldr	r3, [pc, #364]	; (800e5b8 <pvPortMalloc+0x180>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d101      	bne.n	800e454 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e450:	f000 f920 	bl	800e694 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e454:	4b59      	ldr	r3, [pc, #356]	; (800e5bc <pvPortMalloc+0x184>)
 800e456:	681a      	ldr	r2, [r3, #0]
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	4013      	ands	r3, r2
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	f040 8093 	bne.w	800e588 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d01d      	beq.n	800e4a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e468:	2208      	movs	r2, #8
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	4413      	add	r3, r2
 800e46e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f003 0307 	and.w	r3, r3, #7
 800e476:	2b00      	cmp	r3, #0
 800e478:	d014      	beq.n	800e4a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f023 0307 	bic.w	r3, r3, #7
 800e480:	3308      	adds	r3, #8
 800e482:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f003 0307 	and.w	r3, r3, #7
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d00a      	beq.n	800e4a4 <pvPortMalloc+0x6c>
	__asm volatile
 800e48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e492:	f383 8811 	msr	BASEPRI, r3
 800e496:	f3bf 8f6f 	isb	sy
 800e49a:	f3bf 8f4f 	dsb	sy
 800e49e:	617b      	str	r3, [r7, #20]
}
 800e4a0:	bf00      	nop
 800e4a2:	e7fe      	b.n	800e4a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d06e      	beq.n	800e588 <pvPortMalloc+0x150>
 800e4aa:	4b45      	ldr	r3, [pc, #276]	; (800e5c0 <pvPortMalloc+0x188>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	687a      	ldr	r2, [r7, #4]
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d869      	bhi.n	800e588 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e4b4:	4b43      	ldr	r3, [pc, #268]	; (800e5c4 <pvPortMalloc+0x18c>)
 800e4b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e4b8:	4b42      	ldr	r3, [pc, #264]	; (800e5c4 <pvPortMalloc+0x18c>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e4be:	e004      	b.n	800e4ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4cc:	685b      	ldr	r3, [r3, #4]
 800e4ce:	687a      	ldr	r2, [r7, #4]
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	d903      	bls.n	800e4dc <pvPortMalloc+0xa4>
 800e4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d1f1      	bne.n	800e4c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e4dc:	4b36      	ldr	r3, [pc, #216]	; (800e5b8 <pvPortMalloc+0x180>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	d050      	beq.n	800e588 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e4e6:	6a3b      	ldr	r3, [r7, #32]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	2208      	movs	r2, #8
 800e4ec:	4413      	add	r3, r2
 800e4ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f2:	681a      	ldr	r2, [r3, #0]
 800e4f4:	6a3b      	ldr	r3, [r7, #32]
 800e4f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fa:	685a      	ldr	r2, [r3, #4]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	1ad2      	subs	r2, r2, r3
 800e500:	2308      	movs	r3, #8
 800e502:	005b      	lsls	r3, r3, #1
 800e504:	429a      	cmp	r2, r3
 800e506:	d91f      	bls.n	800e548 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	4413      	add	r3, r2
 800e50e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e510:	69bb      	ldr	r3, [r7, #24]
 800e512:	f003 0307 	and.w	r3, r3, #7
 800e516:	2b00      	cmp	r3, #0
 800e518:	d00a      	beq.n	800e530 <pvPortMalloc+0xf8>
	__asm volatile
 800e51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e51e:	f383 8811 	msr	BASEPRI, r3
 800e522:	f3bf 8f6f 	isb	sy
 800e526:	f3bf 8f4f 	dsb	sy
 800e52a:	613b      	str	r3, [r7, #16]
}
 800e52c:	bf00      	nop
 800e52e:	e7fe      	b.n	800e52e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e532:	685a      	ldr	r2, [r3, #4]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	1ad2      	subs	r2, r2, r3
 800e538:	69bb      	ldr	r3, [r7, #24]
 800e53a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53e:	687a      	ldr	r2, [r7, #4]
 800e540:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e542:	69b8      	ldr	r0, [r7, #24]
 800e544:	f000 f908 	bl	800e758 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e548:	4b1d      	ldr	r3, [pc, #116]	; (800e5c0 <pvPortMalloc+0x188>)
 800e54a:	681a      	ldr	r2, [r3, #0]
 800e54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54e:	685b      	ldr	r3, [r3, #4]
 800e550:	1ad3      	subs	r3, r2, r3
 800e552:	4a1b      	ldr	r2, [pc, #108]	; (800e5c0 <pvPortMalloc+0x188>)
 800e554:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e556:	4b1a      	ldr	r3, [pc, #104]	; (800e5c0 <pvPortMalloc+0x188>)
 800e558:	681a      	ldr	r2, [r3, #0]
 800e55a:	4b1b      	ldr	r3, [pc, #108]	; (800e5c8 <pvPortMalloc+0x190>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	429a      	cmp	r2, r3
 800e560:	d203      	bcs.n	800e56a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e562:	4b17      	ldr	r3, [pc, #92]	; (800e5c0 <pvPortMalloc+0x188>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	4a18      	ldr	r2, [pc, #96]	; (800e5c8 <pvPortMalloc+0x190>)
 800e568:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e56c:	685a      	ldr	r2, [r3, #4]
 800e56e:	4b13      	ldr	r3, [pc, #76]	; (800e5bc <pvPortMalloc+0x184>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	431a      	orrs	r2, r3
 800e574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e576:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e57a:	2200      	movs	r2, #0
 800e57c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e57e:	4b13      	ldr	r3, [pc, #76]	; (800e5cc <pvPortMalloc+0x194>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	3301      	adds	r3, #1
 800e584:	4a11      	ldr	r2, [pc, #68]	; (800e5cc <pvPortMalloc+0x194>)
 800e586:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e588:	f7fe fbd4 	bl	800cd34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e58c:	69fb      	ldr	r3, [r7, #28]
 800e58e:	f003 0307 	and.w	r3, r3, #7
 800e592:	2b00      	cmp	r3, #0
 800e594:	d00a      	beq.n	800e5ac <pvPortMalloc+0x174>
	__asm volatile
 800e596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e59a:	f383 8811 	msr	BASEPRI, r3
 800e59e:	f3bf 8f6f 	isb	sy
 800e5a2:	f3bf 8f4f 	dsb	sy
 800e5a6:	60fb      	str	r3, [r7, #12]
}
 800e5a8:	bf00      	nop
 800e5aa:	e7fe      	b.n	800e5aa <pvPortMalloc+0x172>
	return pvReturn;
 800e5ac:	69fb      	ldr	r3, [r7, #28]
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3728      	adds	r7, #40	; 0x28
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}
 800e5b6:	bf00      	nop
 800e5b8:	20009b54 	.word	0x20009b54
 800e5bc:	20009b68 	.word	0x20009b68
 800e5c0:	20009b58 	.word	0x20009b58
 800e5c4:	20009b4c 	.word	0x20009b4c
 800e5c8:	20009b5c 	.word	0x20009b5c
 800e5cc:	20009b60 	.word	0x20009b60

0800e5d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b086      	sub	sp, #24
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d04d      	beq.n	800e67e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e5e2:	2308      	movs	r3, #8
 800e5e4:	425b      	negs	r3, r3
 800e5e6:	697a      	ldr	r2, [r7, #20]
 800e5e8:	4413      	add	r3, r2
 800e5ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e5ec:	697b      	ldr	r3, [r7, #20]
 800e5ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	685a      	ldr	r2, [r3, #4]
 800e5f4:	4b24      	ldr	r3, [pc, #144]	; (800e688 <vPortFree+0xb8>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	4013      	ands	r3, r2
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d10a      	bne.n	800e614 <vPortFree+0x44>
	__asm volatile
 800e5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e602:	f383 8811 	msr	BASEPRI, r3
 800e606:	f3bf 8f6f 	isb	sy
 800e60a:	f3bf 8f4f 	dsb	sy
 800e60e:	60fb      	str	r3, [r7, #12]
}
 800e610:	bf00      	nop
 800e612:	e7fe      	b.n	800e612 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e614:	693b      	ldr	r3, [r7, #16]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d00a      	beq.n	800e632 <vPortFree+0x62>
	__asm volatile
 800e61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e620:	f383 8811 	msr	BASEPRI, r3
 800e624:	f3bf 8f6f 	isb	sy
 800e628:	f3bf 8f4f 	dsb	sy
 800e62c:	60bb      	str	r3, [r7, #8]
}
 800e62e:	bf00      	nop
 800e630:	e7fe      	b.n	800e630 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	685a      	ldr	r2, [r3, #4]
 800e636:	4b14      	ldr	r3, [pc, #80]	; (800e688 <vPortFree+0xb8>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	4013      	ands	r3, r2
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d01e      	beq.n	800e67e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d11a      	bne.n	800e67e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	685a      	ldr	r2, [r3, #4]
 800e64c:	4b0e      	ldr	r3, [pc, #56]	; (800e688 <vPortFree+0xb8>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	43db      	mvns	r3, r3
 800e652:	401a      	ands	r2, r3
 800e654:	693b      	ldr	r3, [r7, #16]
 800e656:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e658:	f7fe fb5e 	bl	800cd18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	685a      	ldr	r2, [r3, #4]
 800e660:	4b0a      	ldr	r3, [pc, #40]	; (800e68c <vPortFree+0xbc>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	4413      	add	r3, r2
 800e666:	4a09      	ldr	r2, [pc, #36]	; (800e68c <vPortFree+0xbc>)
 800e668:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e66a:	6938      	ldr	r0, [r7, #16]
 800e66c:	f000 f874 	bl	800e758 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e670:	4b07      	ldr	r3, [pc, #28]	; (800e690 <vPortFree+0xc0>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	3301      	adds	r3, #1
 800e676:	4a06      	ldr	r2, [pc, #24]	; (800e690 <vPortFree+0xc0>)
 800e678:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e67a:	f7fe fb5b 	bl	800cd34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e67e:	bf00      	nop
 800e680:	3718      	adds	r7, #24
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}
 800e686:	bf00      	nop
 800e688:	20009b68 	.word	0x20009b68
 800e68c:	20009b58 	.word	0x20009b58
 800e690:	20009b64 	.word	0x20009b64

0800e694 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e694:	b480      	push	{r7}
 800e696:	b085      	sub	sp, #20
 800e698:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e69a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e69e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e6a0:	4b27      	ldr	r3, [pc, #156]	; (800e740 <prvHeapInit+0xac>)
 800e6a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f003 0307 	and.w	r3, r3, #7
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d00c      	beq.n	800e6c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	3307      	adds	r3, #7
 800e6b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	f023 0307 	bic.w	r3, r3, #7
 800e6ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e6bc:	68ba      	ldr	r2, [r7, #8]
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	1ad3      	subs	r3, r2, r3
 800e6c2:	4a1f      	ldr	r2, [pc, #124]	; (800e740 <prvHeapInit+0xac>)
 800e6c4:	4413      	add	r3, r2
 800e6c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e6cc:	4a1d      	ldr	r2, [pc, #116]	; (800e744 <prvHeapInit+0xb0>)
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e6d2:	4b1c      	ldr	r3, [pc, #112]	; (800e744 <prvHeapInit+0xb0>)
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	68ba      	ldr	r2, [r7, #8]
 800e6dc:	4413      	add	r3, r2
 800e6de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e6e0:	2208      	movs	r2, #8
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	1a9b      	subs	r3, r3, r2
 800e6e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	f023 0307 	bic.w	r3, r3, #7
 800e6ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	4a15      	ldr	r2, [pc, #84]	; (800e748 <prvHeapInit+0xb4>)
 800e6f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e6f6:	4b14      	ldr	r3, [pc, #80]	; (800e748 <prvHeapInit+0xb4>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e6fe:	4b12      	ldr	r3, [pc, #72]	; (800e748 <prvHeapInit+0xb4>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	2200      	movs	r2, #0
 800e704:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	68fa      	ldr	r2, [r7, #12]
 800e70e:	1ad2      	subs	r2, r2, r3
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e714:	4b0c      	ldr	r3, [pc, #48]	; (800e748 <prvHeapInit+0xb4>)
 800e716:	681a      	ldr	r2, [r3, #0]
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	685b      	ldr	r3, [r3, #4]
 800e720:	4a0a      	ldr	r2, [pc, #40]	; (800e74c <prvHeapInit+0xb8>)
 800e722:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	685b      	ldr	r3, [r3, #4]
 800e728:	4a09      	ldr	r2, [pc, #36]	; (800e750 <prvHeapInit+0xbc>)
 800e72a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e72c:	4b09      	ldr	r3, [pc, #36]	; (800e754 <prvHeapInit+0xc0>)
 800e72e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e732:	601a      	str	r2, [r3, #0]
}
 800e734:	bf00      	nop
 800e736:	3714      	adds	r7, #20
 800e738:	46bd      	mov	sp, r7
 800e73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73e:	4770      	bx	lr
 800e740:	20005b4c 	.word	0x20005b4c
 800e744:	20009b4c 	.word	0x20009b4c
 800e748:	20009b54 	.word	0x20009b54
 800e74c:	20009b5c 	.word	0x20009b5c
 800e750:	20009b58 	.word	0x20009b58
 800e754:	20009b68 	.word	0x20009b68

0800e758 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e758:	b480      	push	{r7}
 800e75a:	b085      	sub	sp, #20
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e760:	4b28      	ldr	r3, [pc, #160]	; (800e804 <prvInsertBlockIntoFreeList+0xac>)
 800e762:	60fb      	str	r3, [r7, #12]
 800e764:	e002      	b.n	800e76c <prvInsertBlockIntoFreeList+0x14>
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	60fb      	str	r3, [r7, #12]
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	687a      	ldr	r2, [r7, #4]
 800e772:	429a      	cmp	r2, r3
 800e774:	d8f7      	bhi.n	800e766 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	685b      	ldr	r3, [r3, #4]
 800e77e:	68ba      	ldr	r2, [r7, #8]
 800e780:	4413      	add	r3, r2
 800e782:	687a      	ldr	r2, [r7, #4]
 800e784:	429a      	cmp	r2, r3
 800e786:	d108      	bne.n	800e79a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	685a      	ldr	r2, [r3, #4]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	685b      	ldr	r3, [r3, #4]
 800e790:	441a      	add	r2, r3
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	685b      	ldr	r3, [r3, #4]
 800e7a2:	68ba      	ldr	r2, [r7, #8]
 800e7a4:	441a      	add	r2, r3
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d118      	bne.n	800e7e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	681a      	ldr	r2, [r3, #0]
 800e7b2:	4b15      	ldr	r3, [pc, #84]	; (800e808 <prvInsertBlockIntoFreeList+0xb0>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	d00d      	beq.n	800e7d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	685a      	ldr	r2, [r3, #4]
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	685b      	ldr	r3, [r3, #4]
 800e7c4:	441a      	add	r2, r3
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	681a      	ldr	r2, [r3, #0]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	601a      	str	r2, [r3, #0]
 800e7d4:	e008      	b.n	800e7e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e7d6:	4b0c      	ldr	r3, [pc, #48]	; (800e808 <prvInsertBlockIntoFreeList+0xb0>)
 800e7d8:	681a      	ldr	r2, [r3, #0]
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	601a      	str	r2, [r3, #0]
 800e7de:	e003      	b.n	800e7e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e7e8:	68fa      	ldr	r2, [r7, #12]
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	d002      	beq.n	800e7f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	687a      	ldr	r2, [r7, #4]
 800e7f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e7f6:	bf00      	nop
 800e7f8:	3714      	adds	r7, #20
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e800:	4770      	bx	lr
 800e802:	bf00      	nop
 800e804:	20009b4c 	.word	0x20009b4c
 800e808:	20009b54 	.word	0x20009b54

0800e80c <rcl_node_get_default_options>:
 800e80c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e80e:	b087      	sub	sp, #28
 800e810:	4607      	mov	r7, r0
 800e812:	466d      	mov	r5, sp
 800e814:	4668      	mov	r0, sp
 800e816:	f000 ff5b 	bl	800f6d0 <rcutils_get_default_allocator>
 800e81a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e81c:	4c08      	ldr	r4, [pc, #32]	; (800e840 <rcl_node_get_default_options+0x34>)
 800e81e:	f8d5 c000 	ldr.w	ip, [r5]
 800e822:	1d26      	adds	r6, r4, #4
 800e824:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e828:	463d      	mov	r5, r7
 800e82a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e82c:	f8c6 c000 	str.w	ip, [r6]
 800e830:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800e834:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800e838:	4638      	mov	r0, r7
 800e83a:	b007      	add	sp, #28
 800e83c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e83e:	bf00      	nop
 800e840:	20000038 	.word	0x20000038

0800e844 <rcl_node_options_copy>:
 800e844:	b1c8      	cbz	r0, 800e87a <rcl_node_options_copy+0x36>
 800e846:	b4f0      	push	{r4, r5, r6, r7}
 800e848:	460f      	mov	r7, r1
 800e84a:	b199      	cbz	r1, 800e874 <rcl_node_options_copy+0x30>
 800e84c:	4288      	cmp	r0, r1
 800e84e:	4606      	mov	r6, r0
 800e850:	d010      	beq.n	800e874 <rcl_node_options_copy+0x30>
 800e852:	4605      	mov	r5, r0
 800e854:	460c      	mov	r4, r1
 800e856:	f855 3b04 	ldr.w	r3, [r5], #4
 800e85a:	f844 3b04 	str.w	r3, [r4], #4
 800e85e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e860:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e862:	7e32      	ldrb	r2, [r6, #24]
 800e864:	6829      	ldr	r1, [r5, #0]
 800e866:	7e73      	ldrb	r3, [r6, #25]
 800e868:	6021      	str	r1, [r4, #0]
 800e86a:	2000      	movs	r0, #0
 800e86c:	763a      	strb	r2, [r7, #24]
 800e86e:	767b      	strb	r3, [r7, #25]
 800e870:	bcf0      	pop	{r4, r5, r6, r7}
 800e872:	4770      	bx	lr
 800e874:	200b      	movs	r0, #11
 800e876:	bcf0      	pop	{r4, r5, r6, r7}
 800e878:	4770      	bx	lr
 800e87a:	200b      	movs	r0, #11
 800e87c:	4770      	bx	lr
 800e87e:	bf00      	nop

0800e880 <rcl_get_zero_initialized_publisher>:
 800e880:	4b01      	ldr	r3, [pc, #4]	; (800e888 <rcl_get_zero_initialized_publisher+0x8>)
 800e882:	6818      	ldr	r0, [r3, #0]
 800e884:	4770      	bx	lr
 800e886:	bf00      	nop
 800e888:	0801b7ac 	.word	0x0801b7ac

0800e88c <rcl_publisher_init>:
 800e88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e890:	b091      	sub	sp, #68	; 0x44
 800e892:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800e894:	b3d7      	cbz	r7, 800e90c <rcl_publisher_init+0x80>
 800e896:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800e89a:	4604      	mov	r4, r0
 800e89c:	4648      	mov	r0, r9
 800e89e:	4688      	mov	r8, r1
 800e8a0:	4616      	mov	r6, r2
 800e8a2:	461d      	mov	r5, r3
 800e8a4:	f000 ff22 	bl	800f6ec <rcutils_allocator_is_valid>
 800e8a8:	b380      	cbz	r0, 800e90c <rcl_publisher_init+0x80>
 800e8aa:	b37c      	cbz	r4, 800e90c <rcl_publisher_init+0x80>
 800e8ac:	f8d4 a000 	ldr.w	sl, [r4]
 800e8b0:	f1ba 0f00 	cmp.w	sl, #0
 800e8b4:	d004      	beq.n	800e8c0 <rcl_publisher_init+0x34>
 800e8b6:	2564      	movs	r5, #100	; 0x64
 800e8b8:	4628      	mov	r0, r5
 800e8ba:	b011      	add	sp, #68	; 0x44
 800e8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8c0:	4640      	mov	r0, r8
 800e8c2:	f006 fdf9 	bl	80154b8 <rcl_node_is_valid>
 800e8c6:	b330      	cbz	r0, 800e916 <rcl_publisher_init+0x8a>
 800e8c8:	b306      	cbz	r6, 800e90c <rcl_publisher_init+0x80>
 800e8ca:	b1fd      	cbz	r5, 800e90c <rcl_publisher_init+0x80>
 800e8cc:	46ce      	mov	lr, r9
 800e8ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e8d2:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800e8d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e8da:	f8de 3000 	ldr.w	r3, [lr]
 800e8de:	f8cc 3000 	str.w	r3, [ip]
 800e8e2:	f000 ff3f 	bl	800f764 <rcutils_get_zero_initialized_string_map>
 800e8e6:	ab10      	add	r3, sp, #64	; 0x40
 800e8e8:	4684      	mov	ip, r0
 800e8ea:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800e8ee:	f8cd c020 	str.w	ip, [sp, #32]
 800e8f2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e8f6:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800e8fa:	4651      	mov	r1, sl
 800e8fc:	a808      	add	r0, sp, #32
 800e8fe:	f000 ffab 	bl	800f858 <rcutils_string_map_init>
 800e902:	b150      	cbz	r0, 800e91a <rcl_publisher_init+0x8e>
 800e904:	280a      	cmp	r0, #10
 800e906:	d013      	beq.n	800e930 <rcl_publisher_init+0xa4>
 800e908:	2501      	movs	r5, #1
 800e90a:	e7d5      	b.n	800e8b8 <rcl_publisher_init+0x2c>
 800e90c:	250b      	movs	r5, #11
 800e90e:	4628      	mov	r0, r5
 800e910:	b011      	add	sp, #68	; 0x44
 800e912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e916:	25c8      	movs	r5, #200	; 0xc8
 800e918:	e7ce      	b.n	800e8b8 <rcl_publisher_init+0x2c>
 800e91a:	a808      	add	r0, sp, #32
 800e91c:	f006 fa02 	bl	8014d24 <rcl_get_default_topic_name_substitutions>
 800e920:	4682      	mov	sl, r0
 800e922:	b138      	cbz	r0, 800e934 <rcl_publisher_init+0xa8>
 800e924:	a808      	add	r0, sp, #32
 800e926:	f000 ffd7 	bl	800f8d8 <rcutils_string_map_fini>
 800e92a:	f1ba 0f0a 	cmp.w	sl, #10
 800e92e:	d1eb      	bne.n	800e908 <rcl_publisher_init+0x7c>
 800e930:	250a      	movs	r5, #10
 800e932:	e7c1      	b.n	800e8b8 <rcl_publisher_init+0x2c>
 800e934:	4640      	mov	r0, r8
 800e936:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e93a:	f006 fdc7 	bl	80154cc <rcl_node_get_name>
 800e93e:	4682      	mov	sl, r0
 800e940:	4640      	mov	r0, r8
 800e942:	f006 fdcb 	bl	80154dc <rcl_node_get_namespace>
 800e946:	4686      	mov	lr, r0
 800e948:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800e94c:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800e950:	46ec      	mov	ip, sp
 800e952:	f8cd b014 	str.w	fp, [sp, #20]
 800e956:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e95a:	f8d9 3000 	ldr.w	r3, [r9]
 800e95e:	f8cc 3000 	str.w	r3, [ip]
 800e962:	4628      	mov	r0, r5
 800e964:	4651      	mov	r1, sl
 800e966:	4672      	mov	r2, lr
 800e968:	ab08      	add	r3, sp, #32
 800e96a:	f006 f875 	bl	8014a58 <rcl_expand_topic_name>
 800e96e:	4605      	mov	r5, r0
 800e970:	a808      	add	r0, sp, #32
 800e972:	f000 ffb1 	bl	800f8d8 <rcutils_string_map_fini>
 800e976:	b920      	cbnz	r0, 800e982 <rcl_publisher_init+0xf6>
 800e978:	b15d      	cbz	r5, 800e992 <rcl_publisher_init+0x106>
 800e97a:	2d67      	cmp	r5, #103	; 0x67
 800e97c:	d002      	beq.n	800e984 <rcl_publisher_init+0xf8>
 800e97e:	2d69      	cmp	r5, #105	; 0x69
 800e980:	d05f      	beq.n	800ea42 <rcl_publisher_init+0x1b6>
 800e982:	2501      	movs	r5, #1
 800e984:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e986:	2800      	cmp	r0, #0
 800e988:	d096      	beq.n	800e8b8 <rcl_publisher_init+0x2c>
 800e98a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e98c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e98e:	4798      	blx	r3
 800e990:	e792      	b.n	800e8b8 <rcl_publisher_init+0x2c>
 800e992:	4640      	mov	r0, r8
 800e994:	f006 fdaa 	bl	80154ec <rcl_node_get_options>
 800e998:	2800      	cmp	r0, #0
 800e99a:	d0f2      	beq.n	800e982 <rcl_publisher_init+0xf6>
 800e99c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e99e:	f7f1 fc29 	bl	80001f4 <strlen>
 800e9a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9a4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e9a6:	3001      	adds	r0, #1
 800e9a8:	4798      	blx	r3
 800e9aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e9ac:	9107      	str	r1, [sp, #28]
 800e9ae:	4681      	mov	r9, r0
 800e9b0:	4608      	mov	r0, r1
 800e9b2:	f7f1 fc1f 	bl	80001f4 <strlen>
 800e9b6:	9907      	ldr	r1, [sp, #28]
 800e9b8:	1c42      	adds	r2, r0, #1
 800e9ba:	4648      	mov	r0, r9
 800e9bc:	f00b fe83 	bl	801a6c6 <memcpy>
 800e9c0:	462a      	mov	r2, r5
 800e9c2:	4648      	mov	r0, r9
 800e9c4:	a90a      	add	r1, sp, #40	; 0x28
 800e9c6:	f001 f865 	bl	800fa94 <rmw_validate_full_topic_name>
 800e9ca:	2800      	cmp	r0, #0
 800e9cc:	d137      	bne.n	800ea3e <rcl_publisher_init+0x1b2>
 800e9ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d138      	bne.n	800ea46 <rcl_publisher_init+0x1ba>
 800e9d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9d6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e9d8:	20c0      	movs	r0, #192	; 0xc0
 800e9da:	4798      	blx	r3
 800e9dc:	6020      	str	r0, [r4, #0]
 800e9de:	b3a0      	cbz	r0, 800ea4a <rcl_publisher_init+0x1be>
 800e9e0:	4640      	mov	r0, r8
 800e9e2:	f006 fd8b 	bl	80154fc <rcl_node_get_rmw_handle>
 800e9e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e9ea:	9300      	str	r3, [sp, #0]
 800e9ec:	4631      	mov	r1, r6
 800e9ee:	463b      	mov	r3, r7
 800e9f0:	464a      	mov	r2, r9
 800e9f2:	6825      	ldr	r5, [r4, #0]
 800e9f4:	f001 f94e 	bl	800fc94 <rmw_create_publisher>
 800e9f8:	6821      	ldr	r1, [r4, #0]
 800e9fa:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 800e9fe:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 800ea02:	b388      	cbz	r0, 800ea68 <rcl_publisher_init+0x1dc>
 800ea04:	3168      	adds	r1, #104	; 0x68
 800ea06:	f001 fa23 	bl	800fe50 <rmw_publisher_get_actual_qos>
 800ea0a:	6823      	ldr	r3, [r4, #0]
 800ea0c:	4605      	mov	r5, r0
 800ea0e:	b9f0      	cbnz	r0, 800ea4e <rcl_publisher_init+0x1c2>
 800ea10:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800ea14:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800ea18:	4618      	mov	r0, r3
 800ea1a:	2268      	movs	r2, #104	; 0x68
 800ea1c:	4639      	mov	r1, r7
 800ea1e:	f00b fe52 	bl	801a6c6 <memcpy>
 800ea22:	f8d8 2000 	ldr.w	r2, [r8]
 800ea26:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 800ea2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea2c:	b110      	cbz	r0, 800ea34 <rcl_publisher_init+0x1a8>
 800ea2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea30:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ea32:	4798      	blx	r3
 800ea34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea36:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ea38:	4648      	mov	r0, r9
 800ea3a:	4798      	blx	r3
 800ea3c:	e73c      	b.n	800e8b8 <rcl_publisher_init+0x2c>
 800ea3e:	2501      	movs	r5, #1
 800ea40:	e7f3      	b.n	800ea2a <rcl_publisher_init+0x19e>
 800ea42:	2567      	movs	r5, #103	; 0x67
 800ea44:	e79e      	b.n	800e984 <rcl_publisher_init+0xf8>
 800ea46:	2567      	movs	r5, #103	; 0x67
 800ea48:	e7ef      	b.n	800ea2a <rcl_publisher_init+0x19e>
 800ea4a:	250a      	movs	r5, #10
 800ea4c:	e7ed      	b.n	800ea2a <rcl_publisher_init+0x19e>
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d0f5      	beq.n	800ea3e <rcl_publisher_init+0x1b2>
 800ea52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ea56:	b13b      	cbz	r3, 800ea68 <rcl_publisher_init+0x1dc>
 800ea58:	4640      	mov	r0, r8
 800ea5a:	f006 fd4f 	bl	80154fc <rcl_node_get_rmw_handle>
 800ea5e:	6823      	ldr	r3, [r4, #0]
 800ea60:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800ea64:	f001 f9f6 	bl	800fe54 <rmw_destroy_publisher>
 800ea68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea6a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ea6c:	6820      	ldr	r0, [r4, #0]
 800ea6e:	4798      	blx	r3
 800ea70:	2300      	movs	r3, #0
 800ea72:	6023      	str	r3, [r4, #0]
 800ea74:	2501      	movs	r5, #1
 800ea76:	e7d8      	b.n	800ea2a <rcl_publisher_init+0x19e>

0800ea78 <rcl_publisher_get_default_options>:
 800ea78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea7a:	4f0e      	ldr	r7, [pc, #56]	; (800eab4 <rcl_publisher_get_default_options+0x3c>)
 800ea7c:	490e      	ldr	r1, [pc, #56]	; (800eab8 <rcl_publisher_get_default_options+0x40>)
 800ea7e:	b087      	sub	sp, #28
 800ea80:	4606      	mov	r6, r0
 800ea82:	2250      	movs	r2, #80	; 0x50
 800ea84:	4638      	mov	r0, r7
 800ea86:	f00b fe1e 	bl	801a6c6 <memcpy>
 800ea8a:	466c      	mov	r4, sp
 800ea8c:	4668      	mov	r0, sp
 800ea8e:	f000 fe1f 	bl	800f6d0 <rcutils_get_default_allocator>
 800ea92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ea94:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800ea98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ea9a:	6823      	ldr	r3, [r4, #0]
 800ea9c:	602b      	str	r3, [r5, #0]
 800ea9e:	f000 ffe1 	bl	800fa64 <rmw_get_default_publisher_options>
 800eaa2:	4639      	mov	r1, r7
 800eaa4:	6678      	str	r0, [r7, #100]	; 0x64
 800eaa6:	2268      	movs	r2, #104	; 0x68
 800eaa8:	4630      	mov	r0, r6
 800eaaa:	f00b fe0c 	bl	801a6c6 <memcpy>
 800eaae:	4630      	mov	r0, r6
 800eab0:	b007      	add	sp, #28
 800eab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eab4:	20009b70 	.word	0x20009b70
 800eab8:	0801b7b0 	.word	0x0801b7b0

0800eabc <rcl_publish>:
 800eabc:	b1f8      	cbz	r0, 800eafe <rcl_publish+0x42>
 800eabe:	6803      	ldr	r3, [r0, #0]
 800eac0:	b570      	push	{r4, r5, r6, lr}
 800eac2:	4604      	mov	r4, r0
 800eac4:	b1b3      	cbz	r3, 800eaf4 <rcl_publish+0x38>
 800eac6:	4616      	mov	r6, r2
 800eac8:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800eacc:	b192      	cbz	r2, 800eaf4 <rcl_publish+0x38>
 800eace:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800ead2:	460d      	mov	r5, r1
 800ead4:	f005 ff56 	bl	8014984 <rcl_context_is_valid>
 800ead8:	b160      	cbz	r0, 800eaf4 <rcl_publish+0x38>
 800eada:	6823      	ldr	r3, [r4, #0]
 800eadc:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 800eae0:	b140      	cbz	r0, 800eaf4 <rcl_publish+0x38>
 800eae2:	b155      	cbz	r5, 800eafa <rcl_publish+0x3e>
 800eae4:	4632      	mov	r2, r6
 800eae6:	4629      	mov	r1, r5
 800eae8:	f001 f874 	bl	800fbd4 <rmw_publish>
 800eaec:	3800      	subs	r0, #0
 800eaee:	bf18      	it	ne
 800eaf0:	2001      	movne	r0, #1
 800eaf2:	bd70      	pop	{r4, r5, r6, pc}
 800eaf4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800eaf8:	bd70      	pop	{r4, r5, r6, pc}
 800eafa:	200b      	movs	r0, #11
 800eafc:	bd70      	pop	{r4, r5, r6, pc}
 800eafe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800eb02:	4770      	bx	lr

0800eb04 <rcl_get_zero_initialized_subscription>:
 800eb04:	4b01      	ldr	r3, [pc, #4]	; (800eb0c <rcl_get_zero_initialized_subscription+0x8>)
 800eb06:	6818      	ldr	r0, [r3, #0]
 800eb08:	4770      	bx	lr
 800eb0a:	bf00      	nop
 800eb0c:	0801b800 	.word	0x0801b800

0800eb10 <rcl_subscription_init>:
 800eb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb14:	b091      	sub	sp, #68	; 0x44
 800eb16:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800eb18:	b1d7      	cbz	r7, 800eb50 <rcl_subscription_init+0x40>
 800eb1a:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800eb1e:	4604      	mov	r4, r0
 800eb20:	4648      	mov	r0, r9
 800eb22:	4688      	mov	r8, r1
 800eb24:	4616      	mov	r6, r2
 800eb26:	461d      	mov	r5, r3
 800eb28:	f000 fde0 	bl	800f6ec <rcutils_allocator_is_valid>
 800eb2c:	b180      	cbz	r0, 800eb50 <rcl_subscription_init+0x40>
 800eb2e:	b17c      	cbz	r4, 800eb50 <rcl_subscription_init+0x40>
 800eb30:	4640      	mov	r0, r8
 800eb32:	f006 fcc1 	bl	80154b8 <rcl_node_is_valid>
 800eb36:	b380      	cbz	r0, 800eb9a <rcl_subscription_init+0x8a>
 800eb38:	b156      	cbz	r6, 800eb50 <rcl_subscription_init+0x40>
 800eb3a:	b14d      	cbz	r5, 800eb50 <rcl_subscription_init+0x40>
 800eb3c:	f8d4 a000 	ldr.w	sl, [r4]
 800eb40:	f1ba 0f00 	cmp.w	sl, #0
 800eb44:	d009      	beq.n	800eb5a <rcl_subscription_init+0x4a>
 800eb46:	2564      	movs	r5, #100	; 0x64
 800eb48:	4628      	mov	r0, r5
 800eb4a:	b011      	add	sp, #68	; 0x44
 800eb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb50:	250b      	movs	r5, #11
 800eb52:	4628      	mov	r0, r5
 800eb54:	b011      	add	sp, #68	; 0x44
 800eb56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb5a:	46ce      	mov	lr, r9
 800eb5c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eb60:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800eb64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb68:	f8de 3000 	ldr.w	r3, [lr]
 800eb6c:	f8cc 3000 	str.w	r3, [ip]
 800eb70:	f000 fdf8 	bl	800f764 <rcutils_get_zero_initialized_string_map>
 800eb74:	ab10      	add	r3, sp, #64	; 0x40
 800eb76:	4684      	mov	ip, r0
 800eb78:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800eb7c:	f8cd c020 	str.w	ip, [sp, #32]
 800eb80:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800eb84:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800eb88:	4651      	mov	r1, sl
 800eb8a:	a808      	add	r0, sp, #32
 800eb8c:	f000 fe64 	bl	800f858 <rcutils_string_map_init>
 800eb90:	b140      	cbz	r0, 800eba4 <rcl_subscription_init+0x94>
 800eb92:	280a      	cmp	r0, #10
 800eb94:	d011      	beq.n	800ebba <rcl_subscription_init+0xaa>
 800eb96:	2501      	movs	r5, #1
 800eb98:	e7db      	b.n	800eb52 <rcl_subscription_init+0x42>
 800eb9a:	25c8      	movs	r5, #200	; 0xc8
 800eb9c:	4628      	mov	r0, r5
 800eb9e:	b011      	add	sp, #68	; 0x44
 800eba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eba4:	a808      	add	r0, sp, #32
 800eba6:	f006 f8bd 	bl	8014d24 <rcl_get_default_topic_name_substitutions>
 800ebaa:	4682      	mov	sl, r0
 800ebac:	b138      	cbz	r0, 800ebbe <rcl_subscription_init+0xae>
 800ebae:	a808      	add	r0, sp, #32
 800ebb0:	f000 fe92 	bl	800f8d8 <rcutils_string_map_fini>
 800ebb4:	f1ba 0f0a 	cmp.w	sl, #10
 800ebb8:	d1ed      	bne.n	800eb96 <rcl_subscription_init+0x86>
 800ebba:	250a      	movs	r5, #10
 800ebbc:	e7c9      	b.n	800eb52 <rcl_subscription_init+0x42>
 800ebbe:	4640      	mov	r0, r8
 800ebc0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ebc4:	f006 fc82 	bl	80154cc <rcl_node_get_name>
 800ebc8:	4682      	mov	sl, r0
 800ebca:	4640      	mov	r0, r8
 800ebcc:	f006 fc86 	bl	80154dc <rcl_node_get_namespace>
 800ebd0:	4686      	mov	lr, r0
 800ebd2:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800ebd6:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800ebda:	46ec      	mov	ip, sp
 800ebdc:	f8cd b014 	str.w	fp, [sp, #20]
 800ebe0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ebe4:	f8d9 3000 	ldr.w	r3, [r9]
 800ebe8:	f8cc 3000 	str.w	r3, [ip]
 800ebec:	4628      	mov	r0, r5
 800ebee:	4651      	mov	r1, sl
 800ebf0:	4672      	mov	r2, lr
 800ebf2:	ab08      	add	r3, sp, #32
 800ebf4:	f005 ff30 	bl	8014a58 <rcl_expand_topic_name>
 800ebf8:	4605      	mov	r5, r0
 800ebfa:	a808      	add	r0, sp, #32
 800ebfc:	f000 fe6c 	bl	800f8d8 <rcutils_string_map_fini>
 800ec00:	b920      	cbnz	r0, 800ec0c <rcl_subscription_init+0xfc>
 800ec02:	b15d      	cbz	r5, 800ec1c <rcl_subscription_init+0x10c>
 800ec04:	2d67      	cmp	r5, #103	; 0x67
 800ec06:	d002      	beq.n	800ec0e <rcl_subscription_init+0xfe>
 800ec08:	2d69      	cmp	r5, #105	; 0x69
 800ec0a:	d05a      	beq.n	800ecc2 <rcl_subscription_init+0x1b2>
 800ec0c:	2501      	movs	r5, #1
 800ec0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec10:	2800      	cmp	r0, #0
 800ec12:	d09e      	beq.n	800eb52 <rcl_subscription_init+0x42>
 800ec14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec16:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ec18:	4798      	blx	r3
 800ec1a:	e79a      	b.n	800eb52 <rcl_subscription_init+0x42>
 800ec1c:	4640      	mov	r0, r8
 800ec1e:	f006 fc65 	bl	80154ec <rcl_node_get_options>
 800ec22:	2800      	cmp	r0, #0
 800ec24:	d0f2      	beq.n	800ec0c <rcl_subscription_init+0xfc>
 800ec26:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec28:	f7f1 fae4 	bl	80001f4 <strlen>
 800ec2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec2e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ec30:	3001      	adds	r0, #1
 800ec32:	4798      	blx	r3
 800ec34:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec36:	9107      	str	r1, [sp, #28]
 800ec38:	4681      	mov	r9, r0
 800ec3a:	4608      	mov	r0, r1
 800ec3c:	f7f1 fada 	bl	80001f4 <strlen>
 800ec40:	9907      	ldr	r1, [sp, #28]
 800ec42:	1c42      	adds	r2, r0, #1
 800ec44:	4648      	mov	r0, r9
 800ec46:	f00b fd3e 	bl	801a6c6 <memcpy>
 800ec4a:	462a      	mov	r2, r5
 800ec4c:	4648      	mov	r0, r9
 800ec4e:	a90a      	add	r1, sp, #40	; 0x28
 800ec50:	f000 ff20 	bl	800fa94 <rmw_validate_full_topic_name>
 800ec54:	2800      	cmp	r0, #0
 800ec56:	d132      	bne.n	800ecbe <rcl_subscription_init+0x1ae>
 800ec58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d133      	bne.n	800ecc6 <rcl_subscription_init+0x1b6>
 800ec5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec60:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ec62:	20c8      	movs	r0, #200	; 0xc8
 800ec64:	4798      	blx	r3
 800ec66:	6020      	str	r0, [r4, #0]
 800ec68:	b378      	cbz	r0, 800ecca <rcl_subscription_init+0x1ba>
 800ec6a:	4640      	mov	r0, r8
 800ec6c:	f006 fc46 	bl	80154fc <rcl_node_get_rmw_handle>
 800ec70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ec74:	9300      	str	r3, [sp, #0]
 800ec76:	4631      	mov	r1, r6
 800ec78:	463b      	mov	r3, r7
 800ec7a:	464a      	mov	r2, r9
 800ec7c:	6825      	ldr	r5, [r4, #0]
 800ec7e:	f001 f939 	bl	800fef4 <rmw_create_subscription>
 800ec82:	6821      	ldr	r1, [r4, #0]
 800ec84:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
 800ec88:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 800ec8c:	b368      	cbz	r0, 800ecea <rcl_subscription_init+0x1da>
 800ec8e:	3170      	adds	r1, #112	; 0x70
 800ec90:	f001 fa10 	bl	80100b4 <rmw_subscription_get_actual_qos>
 800ec94:	4605      	mov	r5, r0
 800ec96:	b9d0      	cbnz	r0, 800ecce <rcl_subscription_init+0x1be>
 800ec98:	6820      	ldr	r0, [r4, #0]
 800ec9a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800ec9e:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 800eca2:	2270      	movs	r2, #112	; 0x70
 800eca4:	4639      	mov	r1, r7
 800eca6:	f00b fd0e 	bl	801a6c6 <memcpy>
 800ecaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ecac:	b110      	cbz	r0, 800ecb4 <rcl_subscription_init+0x1a4>
 800ecae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecb0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ecb2:	4798      	blx	r3
 800ecb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecb6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ecb8:	4648      	mov	r0, r9
 800ecba:	4798      	blx	r3
 800ecbc:	e749      	b.n	800eb52 <rcl_subscription_init+0x42>
 800ecbe:	2501      	movs	r5, #1
 800ecc0:	e7f3      	b.n	800ecaa <rcl_subscription_init+0x19a>
 800ecc2:	2567      	movs	r5, #103	; 0x67
 800ecc4:	e7a3      	b.n	800ec0e <rcl_subscription_init+0xfe>
 800ecc6:	2567      	movs	r5, #103	; 0x67
 800ecc8:	e7ef      	b.n	800ecaa <rcl_subscription_init+0x19a>
 800ecca:	250a      	movs	r5, #10
 800eccc:	e7ed      	b.n	800ecaa <rcl_subscription_init+0x19a>
 800ecce:	6823      	ldr	r3, [r4, #0]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d0f4      	beq.n	800ecbe <rcl_subscription_init+0x1ae>
 800ecd4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ecd8:	b13b      	cbz	r3, 800ecea <rcl_subscription_init+0x1da>
 800ecda:	4640      	mov	r0, r8
 800ecdc:	f006 fc0e 	bl	80154fc <rcl_node_get_rmw_handle>
 800ece0:	6823      	ldr	r3, [r4, #0]
 800ece2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800ece6:	f001 f9e7 	bl	80100b8 <rmw_destroy_subscription>
 800ecea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecec:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ecee:	6820      	ldr	r0, [r4, #0]
 800ecf0:	4798      	blx	r3
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	6023      	str	r3, [r4, #0]
 800ecf6:	2501      	movs	r5, #1
 800ecf8:	e7d7      	b.n	800ecaa <rcl_subscription_init+0x19a>
 800ecfa:	bf00      	nop

0800ecfc <rcl_subscription_get_default_options>:
 800ecfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed00:	4f12      	ldr	r7, [pc, #72]	; (800ed4c <rcl_subscription_get_default_options+0x50>)
 800ed02:	4913      	ldr	r1, [pc, #76]	; (800ed50 <rcl_subscription_get_default_options+0x54>)
 800ed04:	b088      	sub	sp, #32
 800ed06:	4606      	mov	r6, r0
 800ed08:	2250      	movs	r2, #80	; 0x50
 800ed0a:	4638      	mov	r0, r7
 800ed0c:	f00b fcdb 	bl	801a6c6 <memcpy>
 800ed10:	ac02      	add	r4, sp, #8
 800ed12:	a802      	add	r0, sp, #8
 800ed14:	f000 fcdc 	bl	800f6d0 <rcutils_get_default_allocator>
 800ed18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed1a:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800ed1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ed20:	46e8      	mov	r8, sp
 800ed22:	6823      	ldr	r3, [r4, #0]
 800ed24:	602b      	str	r3, [r5, #0]
 800ed26:	4640      	mov	r0, r8
 800ed28:	f000 fe9e 	bl	800fa68 <rmw_get_default_subscription_options>
 800ed2c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ed30:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ed34:	e883 0003 	stmia.w	r3, {r0, r1}
 800ed38:	2270      	movs	r2, #112	; 0x70
 800ed3a:	4639      	mov	r1, r7
 800ed3c:	4630      	mov	r0, r6
 800ed3e:	f00b fcc2 	bl	801a6c6 <memcpy>
 800ed42:	4630      	mov	r0, r6
 800ed44:	b008      	add	sp, #32
 800ed46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed4a:	bf00      	nop
 800ed4c:	20009bd8 	.word	0x20009bd8
 800ed50:	0801b808 	.word	0x0801b808

0800ed54 <rcl_take>:
 800ed54:	2800      	cmp	r0, #0
 800ed56:	d03f      	beq.n	800edd8 <rcl_take+0x84>
 800ed58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed5c:	4617      	mov	r7, r2
 800ed5e:	6802      	ldr	r2, [r0, #0]
 800ed60:	b09d      	sub	sp, #116	; 0x74
 800ed62:	4606      	mov	r6, r0
 800ed64:	b382      	cbz	r2, 800edc8 <rcl_take+0x74>
 800ed66:	4699      	mov	r9, r3
 800ed68:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800ed6c:	b363      	cbz	r3, 800edc8 <rcl_take+0x74>
 800ed6e:	4688      	mov	r8, r1
 800ed70:	b381      	cbz	r1, 800edd4 <rcl_take+0x80>
 800ed72:	2f00      	cmp	r7, #0
 800ed74:	d034      	beq.n	800ede0 <rcl_take+0x8c>
 800ed76:	a802      	add	r0, sp, #8
 800ed78:	ac02      	add	r4, sp, #8
 800ed7a:	f000 fe79 	bl	800fa70 <rmw_get_zero_initialized_message_info>
 800ed7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed80:	463d      	mov	r5, r7
 800ed82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ed84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ed88:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ed8c:	6834      	ldr	r4, [r6, #0]
 800ed8e:	f8d4 60c0 	ldr.w	r6, [r4, #192]	; 0xc0
 800ed92:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800ed96:	2400      	movs	r4, #0
 800ed98:	463b      	mov	r3, r7
 800ed9a:	4630      	mov	r0, r6
 800ed9c:	f8cd 9000 	str.w	r9, [sp]
 800eda0:	4641      	mov	r1, r8
 800eda2:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 800eda6:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
 800edaa:	f001 f9e3 	bl	8010174 <rmw_take_with_info>
 800edae:	4603      	mov	r3, r0
 800edb0:	b9c0      	cbnz	r0, 800ede4 <rcl_take+0x90>
 800edb2:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 800edb6:	f240 1291 	movw	r2, #401	; 0x191
 800edba:	2900      	cmp	r1, #0
 800edbc:	bf08      	it	eq
 800edbe:	4613      	moveq	r3, r2
 800edc0:	4618      	mov	r0, r3
 800edc2:	b01d      	add	sp, #116	; 0x74
 800edc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800edc8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800edcc:	4618      	mov	r0, r3
 800edce:	b01d      	add	sp, #116	; 0x74
 800edd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800edd4:	230b      	movs	r3, #11
 800edd6:	e7f3      	b.n	800edc0 <rcl_take+0x6c>
 800edd8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800eddc:	4618      	mov	r0, r3
 800edde:	4770      	bx	lr
 800ede0:	af10      	add	r7, sp, #64	; 0x40
 800ede2:	e7c8      	b.n	800ed76 <rcl_take+0x22>
 800ede4:	f005 fdb0 	bl	8014948 <rcl_convert_rmw_ret_to_rcl_ret>
 800ede8:	4603      	mov	r3, r0
 800edea:	e7e9      	b.n	800edc0 <rcl_take+0x6c>

0800edec <rcl_subscription_get_rmw_handle>:
 800edec:	b118      	cbz	r0, 800edf6 <rcl_subscription_get_rmw_handle+0xa>
 800edee:	6800      	ldr	r0, [r0, #0]
 800edf0:	b108      	cbz	r0, 800edf6 <rcl_subscription_get_rmw_handle+0xa>
 800edf2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800edf6:	4770      	bx	lr

0800edf8 <_rclc_check_for_new_data>:
 800edf8:	b1e0      	cbz	r0, 800ee34 <_rclc_check_for_new_data+0x3c>
 800edfa:	7803      	ldrb	r3, [r0, #0]
 800edfc:	2b08      	cmp	r3, #8
 800edfe:	d81b      	bhi.n	800ee38 <_rclc_check_for_new_data+0x40>
 800ee00:	e8df f003 	tbb	[pc, r3]
 800ee04:	12161010 	.word	0x12161010
 800ee08:	05050512 	.word	0x05050512
 800ee0c:	14          	.byte	0x14
 800ee0d:	00          	.byte	0x00
 800ee0e:	6a0b      	ldr	r3, [r1, #32]
 800ee10:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ee12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee16:	3b00      	subs	r3, #0
 800ee18:	bf18      	it	ne
 800ee1a:	2301      	movne	r3, #1
 800ee1c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800ee20:	2000      	movs	r0, #0
 800ee22:	4770      	bx	lr
 800ee24:	680b      	ldr	r3, [r1, #0]
 800ee26:	e7f3      	b.n	800ee10 <_rclc_check_for_new_data+0x18>
 800ee28:	698b      	ldr	r3, [r1, #24]
 800ee2a:	e7f1      	b.n	800ee10 <_rclc_check_for_new_data+0x18>
 800ee2c:	688b      	ldr	r3, [r1, #8]
 800ee2e:	e7ef      	b.n	800ee10 <_rclc_check_for_new_data+0x18>
 800ee30:	690b      	ldr	r3, [r1, #16]
 800ee32:	e7ed      	b.n	800ee10 <_rclc_check_for_new_data+0x18>
 800ee34:	200b      	movs	r0, #11
 800ee36:	4770      	bx	lr
 800ee38:	2300      	movs	r3, #0
 800ee3a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800ee3e:	2001      	movs	r0, #1
 800ee40:	4770      	bx	lr
 800ee42:	bf00      	nop

0800ee44 <_rclc_take_new_data>:
 800ee44:	2800      	cmp	r0, #0
 800ee46:	d049      	beq.n	800eedc <_rclc_take_new_data+0x98>
 800ee48:	b510      	push	{r4, lr}
 800ee4a:	7803      	ldrb	r3, [r0, #0]
 800ee4c:	b08e      	sub	sp, #56	; 0x38
 800ee4e:	4604      	mov	r4, r0
 800ee50:	2b08      	cmp	r3, #8
 800ee52:	d84a      	bhi.n	800eeea <_rclc_take_new_data+0xa6>
 800ee54:	e8df f003 	tbb	[pc, r3]
 800ee58:	2b121515 	.word	0x2b121515
 800ee5c:	0505052b 	.word	0x0505052b
 800ee60:	12          	.byte	0x12
 800ee61:	00          	.byte	0x00
 800ee62:	6a0b      	ldr	r3, [r1, #32]
 800ee64:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ee66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee6a:	b13b      	cbz	r3, 800ee7c <_rclc_take_new_data+0x38>
 800ee6c:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800ee70:	f104 0110 	add.w	r1, r4, #16
 800ee74:	f006 fc42 	bl	80156fc <rcl_take_request>
 800ee78:	2800      	cmp	r0, #0
 800ee7a:	d131      	bne.n	800eee0 <_rclc_take_new_data+0x9c>
 800ee7c:	2000      	movs	r0, #0
 800ee7e:	b00e      	add	sp, #56	; 0x38
 800ee80:	bd10      	pop	{r4, pc}
 800ee82:	680b      	ldr	r3, [r1, #0]
 800ee84:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ee86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d0f6      	beq.n	800ee7c <_rclc_take_new_data+0x38>
 800ee8e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800ee92:	2300      	movs	r3, #0
 800ee94:	aa02      	add	r2, sp, #8
 800ee96:	f7ff ff5d 	bl	800ed54 <rcl_take>
 800ee9a:	2800      	cmp	r0, #0
 800ee9c:	d0ef      	beq.n	800ee7e <_rclc_take_new_data+0x3a>
 800ee9e:	f240 1391 	movw	r3, #401	; 0x191
 800eea2:	4298      	cmp	r0, r3
 800eea4:	d115      	bne.n	800eed2 <_rclc_take_new_data+0x8e>
 800eea6:	2300      	movs	r3, #0
 800eea8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800eeac:	e7e7      	b.n	800ee7e <_rclc_take_new_data+0x3a>
 800eeae:	698b      	ldr	r3, [r1, #24]
 800eeb0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800eeb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d0e0      	beq.n	800ee7c <_rclc_take_new_data+0x38>
 800eeba:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800eebe:	f104 0110 	add.w	r1, r4, #16
 800eec2:	f005 fd05 	bl	80148d0 <rcl_take_response>
 800eec6:	2800      	cmp	r0, #0
 800eec8:	d0d8      	beq.n	800ee7c <_rclc_take_new_data+0x38>
 800eeca:	f240 13f5 	movw	r3, #501	; 0x1f5
 800eece:	4298      	cmp	r0, r3
 800eed0:	d0d5      	beq.n	800ee7e <_rclc_take_new_data+0x3a>
 800eed2:	9001      	str	r0, [sp, #4]
 800eed4:	f000 fc2e 	bl	800f734 <rcutils_reset_error>
 800eed8:	9801      	ldr	r0, [sp, #4]
 800eeda:	e7d0      	b.n	800ee7e <_rclc_take_new_data+0x3a>
 800eedc:	200b      	movs	r0, #11
 800eede:	4770      	bx	lr
 800eee0:	f240 2359 	movw	r3, #601	; 0x259
 800eee4:	4298      	cmp	r0, r3
 800eee6:	d0de      	beq.n	800eea6 <_rclc_take_new_data+0x62>
 800eee8:	e7f3      	b.n	800eed2 <_rclc_take_new_data+0x8e>
 800eeea:	2001      	movs	r0, #1
 800eeec:	e7c7      	b.n	800ee7e <_rclc_take_new_data+0x3a>
 800eeee:	bf00      	nop

0800eef0 <rclc_executor_trigger_any>:
 800eef0:	b170      	cbz	r0, 800ef10 <rclc_executor_trigger_any+0x20>
 800eef2:	b179      	cbz	r1, 800ef14 <rclc_executor_trigger_any+0x24>
 800eef4:	4603      	mov	r3, r0
 800eef6:	2200      	movs	r2, #0
 800eef8:	e005      	b.n	800ef06 <rclc_executor_trigger_any+0x16>
 800eefa:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800eefe:	3340      	adds	r3, #64	; 0x40
 800ef00:	b930      	cbnz	r0, 800ef10 <rclc_executor_trigger_any+0x20>
 800ef02:	4291      	cmp	r1, r2
 800ef04:	d005      	beq.n	800ef12 <rclc_executor_trigger_any+0x22>
 800ef06:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800ef0a:	3201      	adds	r2, #1
 800ef0c:	2800      	cmp	r0, #0
 800ef0e:	d1f4      	bne.n	800eefa <rclc_executor_trigger_any+0xa>
 800ef10:	4770      	bx	lr
 800ef12:	4770      	bx	lr
 800ef14:	4608      	mov	r0, r1
 800ef16:	e7fb      	b.n	800ef10 <rclc_executor_trigger_any+0x20>

0800ef18 <_rclc_execute.part.0>:
 800ef18:	b530      	push	{r4, r5, lr}
 800ef1a:	7803      	ldrb	r3, [r0, #0]
 800ef1c:	b083      	sub	sp, #12
 800ef1e:	4604      	mov	r4, r0
 800ef20:	2b08      	cmp	r3, #8
 800ef22:	d85b      	bhi.n	800efdc <_rclc_execute.part.0+0xc4>
 800ef24:	e8df f003 	tbb	[pc, r3]
 800ef28:	3036271f 	.word	0x3036271f
 800ef2c:	0505053f 	.word	0x0505053f
 800ef30:	1a          	.byte	0x1a
 800ef31:	00          	.byte	0x00
 800ef32:	2b06      	cmp	r3, #6
 800ef34:	d049      	beq.n	800efca <_rclc_execute.part.0+0xb2>
 800ef36:	2b07      	cmp	r3, #7
 800ef38:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ef3a:	d140      	bne.n	800efbe <_rclc_execute.part.0+0xa6>
 800ef3c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800ef40:	6880      	ldr	r0, [r0, #8]
 800ef42:	4798      	blx	r3
 800ef44:	f104 0110 	add.w	r1, r4, #16
 800ef48:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800ef4a:	6860      	ldr	r0, [r4, #4]
 800ef4c:	f006 fc0e 	bl	801576c <rcl_send_response>
 800ef50:	b138      	cbz	r0, 800ef62 <_rclc_execute.part.0+0x4a>
 800ef52:	9001      	str	r0, [sp, #4]
 800ef54:	f000 fbee 	bl	800f734 <rcutils_reset_error>
 800ef58:	9801      	ldr	r0, [sp, #4]
 800ef5a:	e002      	b.n	800ef62 <_rclc_execute.part.0+0x4a>
 800ef5c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ef5e:	4798      	blx	r3
 800ef60:	2000      	movs	r0, #0
 800ef62:	b003      	add	sp, #12
 800ef64:	bd30      	pop	{r4, r5, pc}
 800ef66:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800ef6a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ef6c:	b96d      	cbnz	r5, 800ef8a <_rclc_execute.part.0+0x72>
 800ef6e:	4628      	mov	r0, r5
 800ef70:	4798      	blx	r3
 800ef72:	4628      	mov	r0, r5
 800ef74:	e7f5      	b.n	800ef62 <_rclc_execute.part.0+0x4a>
 800ef76:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800ef7a:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 800ef7e:	b1d5      	cbz	r5, 800efb6 <_rclc_execute.part.0+0x9e>
 800ef80:	6880      	ldr	r0, [r0, #8]
 800ef82:	4798      	blx	r3
 800ef84:	2000      	movs	r0, #0
 800ef86:	e7ec      	b.n	800ef62 <_rclc_execute.part.0+0x4a>
 800ef88:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ef8a:	68a0      	ldr	r0, [r4, #8]
 800ef8c:	4798      	blx	r3
 800ef8e:	2000      	movs	r0, #0
 800ef90:	b003      	add	sp, #12
 800ef92:	bd30      	pop	{r4, r5, pc}
 800ef94:	6840      	ldr	r0, [r0, #4]
 800ef96:	f006 fca3 	bl	80158e0 <rcl_timer_call>
 800ef9a:	f240 3321 	movw	r3, #801	; 0x321
 800ef9e:	4298      	cmp	r0, r3
 800efa0:	d1d6      	bne.n	800ef50 <_rclc_execute.part.0+0x38>
 800efa2:	2000      	movs	r0, #0
 800efa4:	e7dd      	b.n	800ef62 <_rclc_execute.part.0+0x4a>
 800efa6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800efa8:	6880      	ldr	r0, [r0, #8]
 800efaa:	f104 0110 	add.w	r1, r4, #16
 800efae:	4798      	blx	r3
 800efb0:	2000      	movs	r0, #0
 800efb2:	b003      	add	sp, #12
 800efb4:	bd30      	pop	{r4, r5, pc}
 800efb6:	4628      	mov	r0, r5
 800efb8:	4798      	blx	r3
 800efba:	4628      	mov	r0, r5
 800efbc:	e7d1      	b.n	800ef62 <_rclc_execute.part.0+0x4a>
 800efbe:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800efc0:	6880      	ldr	r0, [r0, #8]
 800efc2:	4798      	blx	r3
 800efc4:	f104 0110 	add.w	r1, r4, #16
 800efc8:	e7be      	b.n	800ef48 <_rclc_execute.part.0+0x30>
 800efca:	f100 0110 	add.w	r1, r0, #16
 800efce:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800efd0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800efd2:	6880      	ldr	r0, [r0, #8]
 800efd4:	9101      	str	r1, [sp, #4]
 800efd6:	4798      	blx	r3
 800efd8:	9901      	ldr	r1, [sp, #4]
 800efda:	e7b5      	b.n	800ef48 <_rclc_execute.part.0+0x30>
 800efdc:	2001      	movs	r0, #1
 800efde:	e7c0      	b.n	800ef62 <_rclc_execute.part.0+0x4a>

0800efe0 <rclc_executor_init>:
 800efe0:	2800      	cmp	r0, #0
 800efe2:	d063      	beq.n	800f0ac <rclc_executor_init+0xcc>
 800efe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efe8:	460f      	mov	r7, r1
 800efea:	b0ae      	sub	sp, #184	; 0xb8
 800efec:	2900      	cmp	r1, #0
 800efee:	d055      	beq.n	800f09c <rclc_executor_init+0xbc>
 800eff0:	4605      	mov	r5, r0
 800eff2:	4618      	mov	r0, r3
 800eff4:	4616      	mov	r6, r2
 800eff6:	4698      	mov	r8, r3
 800eff8:	f000 fb78 	bl	800f6ec <rcutils_allocator_is_valid>
 800effc:	2800      	cmp	r0, #0
 800effe:	d04d      	beq.n	800f09c <rclc_executor_init+0xbc>
 800f000:	2e00      	cmp	r6, #0
 800f002:	d04b      	beq.n	800f09c <rclc_executor_init+0xbc>
 800f004:	492e      	ldr	r1, [pc, #184]	; (800f0c0 <rclc_executor_init+0xe0>)
 800f006:	2280      	movs	r2, #128	; 0x80
 800f008:	a80e      	add	r0, sp, #56	; 0x38
 800f00a:	f00b fb5c 	bl	801a6c6 <memcpy>
 800f00e:	2400      	movs	r4, #0
 800f010:	a90e      	add	r1, sp, #56	; 0x38
 800f012:	2280      	movs	r2, #128	; 0x80
 800f014:	4628      	mov	r0, r5
 800f016:	f00b fb56 	bl	801a6c6 <memcpy>
 800f01a:	602f      	str	r7, [r5, #0]
 800f01c:	4668      	mov	r0, sp
 800f01e:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800f022:	466f      	mov	r7, sp
 800f024:	f006 feb6 	bl	8015d94 <rcl_get_zero_initialized_wait_set>
 800f028:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f02a:	f105 0c14 	add.w	ip, r5, #20
 800f02e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f032:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f034:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f038:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f03a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f03e:	a31e      	add	r3, pc, #120	; (adr r3, 800f0b8 <rclc_executor_init+0xd8>)
 800f040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f044:	6839      	ldr	r1, [r7, #0]
 800f046:	f8cc 1000 	str.w	r1, [ip]
 800f04a:	f8d8 7000 	ldr.w	r7, [r8]
 800f04e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f052:	f8c5 8010 	str.w	r8, [r5, #16]
 800f056:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
 800f05a:	01b0      	lsls	r0, r6, #6
 800f05c:	47b8      	blx	r7
 800f05e:	6068      	str	r0, [r5, #4]
 800f060:	b908      	cbnz	r0, 800f066 <rclc_executor_init+0x86>
 800f062:	e025      	b.n	800f0b0 <rclc_executor_init+0xd0>
 800f064:	6868      	ldr	r0, [r5, #4]
 800f066:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800f06a:	4631      	mov	r1, r6
 800f06c:	3401      	adds	r4, #1
 800f06e:	f000 fa01 	bl	800f474 <rclc_executor_handle_init>
 800f072:	42a6      	cmp	r6, r4
 800f074:	d1f6      	bne.n	800f064 <rclc_executor_init+0x84>
 800f076:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800f07a:	f000 f9ef 	bl	800f45c <rclc_executor_handle_counters_zero_init>
 800f07e:	686b      	ldr	r3, [r5, #4]
 800f080:	4a10      	ldr	r2, [pc, #64]	; (800f0c4 <rclc_executor_init+0xe4>)
 800f082:	672a      	str	r2, [r5, #112]	; 0x70
 800f084:	2000      	movs	r0, #0
 800f086:	6768      	str	r0, [r5, #116]	; 0x74
 800f088:	b163      	cbz	r3, 800f0a4 <rclc_executor_init+0xc4>
 800f08a:	692b      	ldr	r3, [r5, #16]
 800f08c:	b153      	cbz	r3, 800f0a4 <rclc_executor_init+0xc4>
 800f08e:	68ab      	ldr	r3, [r5, #8]
 800f090:	b143      	cbz	r3, 800f0a4 <rclc_executor_init+0xc4>
 800f092:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 800f096:	b02e      	add	sp, #184	; 0xb8
 800f098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f09c:	200b      	movs	r0, #11
 800f09e:	b02e      	add	sp, #184	; 0xb8
 800f0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	b02e      	add	sp, #184	; 0xb8
 800f0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0ac:	200b      	movs	r0, #11
 800f0ae:	4770      	bx	lr
 800f0b0:	200a      	movs	r0, #10
 800f0b2:	e7f4      	b.n	800f09e <rclc_executor_init+0xbe>
 800f0b4:	f3af 8000 	nop.w
 800f0b8:	3b9aca00 	.word	0x3b9aca00
 800f0bc:	00000000 	.word	0x00000000
 800f0c0:	0801b858 	.word	0x0801b858
 800f0c4:	0800eef1 	.word	0x0800eef1

0800f0c8 <rclc_executor_add_subscription>:
 800f0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0cc:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800f0d0:	b358      	cbz	r0, 800f12a <rclc_executor_add_subscription+0x62>
 800f0d2:	b351      	cbz	r1, 800f12a <rclc_executor_add_subscription+0x62>
 800f0d4:	b34a      	cbz	r2, 800f12a <rclc_executor_add_subscription+0x62>
 800f0d6:	b343      	cbz	r3, 800f12a <rclc_executor_add_subscription+0x62>
 800f0d8:	4604      	mov	r4, r0
 800f0da:	e9d0 0502 	ldrd	r0, r5, [r0, #8]
 800f0de:	4285      	cmp	r5, r0
 800f0e0:	d302      	bcc.n	800f0e8 <rclc_executor_add_subscription+0x20>
 800f0e2:	2001      	movs	r0, #1
 800f0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0e8:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800f0ec:	ea4f 1885 	mov.w	r8, r5, lsl #6
 800f0f0:	eb0e 1685 	add.w	r6, lr, r5, lsl #6
 800f0f4:	f04f 0c00 	mov.w	ip, #0
 800f0f8:	f80e c008 	strb.w	ip, [lr, r8]
 800f0fc:	2001      	movs	r0, #1
 800f0fe:	3501      	adds	r5, #1
 800f100:	f104 0814 	add.w	r8, r4, #20
 800f104:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
 800f108:	e9c6 1201 	strd	r1, r2, [r6, #4]
 800f10c:	6333      	str	r3, [r6, #48]	; 0x30
 800f10e:	7077      	strb	r7, [r6, #1]
 800f110:	f8c6 c02c 	str.w	ip, [r6, #44]	; 0x2c
 800f114:	4640      	mov	r0, r8
 800f116:	60e5      	str	r5, [r4, #12]
 800f118:	f006 fe4e 	bl	8015db8 <rcl_wait_set_is_valid>
 800f11c:	b940      	cbnz	r0, 800f130 <rclc_executor_add_subscription+0x68>
 800f11e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f120:	3301      	adds	r3, #1
 800f122:	64a3      	str	r3, [r4, #72]	; 0x48
 800f124:	2000      	movs	r0, #0
 800f126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f12a:	200b      	movs	r0, #11
 800f12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f130:	4640      	mov	r0, r8
 800f132:	f006 fe47 	bl	8015dc4 <rcl_wait_set_fini>
 800f136:	2800      	cmp	r0, #0
 800f138:	d0f1      	beq.n	800f11e <rclc_executor_add_subscription+0x56>
 800f13a:	e7d3      	b.n	800f0e4 <rclc_executor_add_subscription+0x1c>

0800f13c <rclc_executor_prepare>:
 800f13c:	2800      	cmp	r0, #0
 800f13e:	d03d      	beq.n	800f1bc <rclc_executor_prepare+0x80>
 800f140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f144:	f100 0814 	add.w	r8, r0, #20
 800f148:	b09a      	sub	sp, #104	; 0x68
 800f14a:	4604      	mov	r4, r0
 800f14c:	4640      	mov	r0, r8
 800f14e:	f006 fe33 	bl	8015db8 <rcl_wait_set_is_valid>
 800f152:	b118      	cbz	r0, 800f15c <rclc_executor_prepare+0x20>
 800f154:	2000      	movs	r0, #0
 800f156:	b01a      	add	sp, #104	; 0x68
 800f158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f15c:	4640      	mov	r0, r8
 800f15e:	f006 fe31 	bl	8015dc4 <rcl_wait_set_fini>
 800f162:	2800      	cmp	r0, #0
 800f164:	d127      	bne.n	800f1b6 <rclc_executor_prepare+0x7a>
 800f166:	a80c      	add	r0, sp, #48	; 0x30
 800f168:	ad0c      	add	r5, sp, #48	; 0x30
 800f16a:	f006 fe13 	bl	8015d94 <rcl_get_zero_initialized_wait_set>
 800f16e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f170:	4646      	mov	r6, r8
 800f172:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f176:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f17a:	6927      	ldr	r7, [r4, #16]
 800f17c:	682d      	ldr	r5, [r5, #0]
 800f17e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f180:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f182:	6035      	str	r5, [r6, #0]
 800f184:	ad04      	add	r5, sp, #16
 800f186:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f188:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800f18c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f18e:	6826      	ldr	r6, [r4, #0]
 800f190:	6838      	ldr	r0, [r7, #0]
 800f192:	6028      	str	r0, [r5, #0]
 800f194:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800f198:	e9cd 3200 	strd	r3, r2, [sp]
 800f19c:	4640      	mov	r0, r8
 800f19e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f1a0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800f1a2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f1a4:	f007 f92c 	bl	8016400 <rcl_wait_set_init>
 800f1a8:	2800      	cmp	r0, #0
 800f1aa:	d0d4      	beq.n	800f156 <rclc_executor_prepare+0x1a>
 800f1ac:	900b      	str	r0, [sp, #44]	; 0x2c
 800f1ae:	f000 fac1 	bl	800f734 <rcutils_reset_error>
 800f1b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f1b4:	e7cf      	b.n	800f156 <rclc_executor_prepare+0x1a>
 800f1b6:	f000 fabd 	bl	800f734 <rcutils_reset_error>
 800f1ba:	e7d4      	b.n	800f166 <rclc_executor_prepare+0x2a>
 800f1bc:	200b      	movs	r0, #11
 800f1be:	4770      	bx	lr

0800f1c0 <rclc_executor_spin_some.part.0>:
 800f1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1c4:	f100 0814 	add.w	r8, r0, #20
 800f1c8:	b083      	sub	sp, #12
 800f1ca:	4692      	mov	sl, r2
 800f1cc:	4699      	mov	r9, r3
 800f1ce:	4605      	mov	r5, r0
 800f1d0:	f7ff ffb4 	bl	800f13c <rclc_executor_prepare>
 800f1d4:	4640      	mov	r0, r8
 800f1d6:	f006 fec1 	bl	8015f5c <rcl_wait_set_clear>
 800f1da:	4607      	mov	r7, r0
 800f1dc:	2800      	cmp	r0, #0
 800f1de:	f040 80be 	bne.w	800f35e <rclc_executor_spin_some.part.0+0x19e>
 800f1e2:	68ab      	ldr	r3, [r5, #8]
 800f1e4:	4604      	mov	r4, r0
 800f1e6:	b1eb      	cbz	r3, 800f224 <rclc_executor_spin_some.part.0+0x64>
 800f1e8:	686e      	ldr	r6, [r5, #4]
 800f1ea:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800f1ee:	01a2      	lsls	r2, r4, #6
 800f1f0:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 800f1f4:	b1b3      	cbz	r3, 800f224 <rclc_executor_spin_some.part.0+0x64>
 800f1f6:	5cb3      	ldrb	r3, [r6, r2]
 800f1f8:	2b08      	cmp	r3, #8
 800f1fa:	f200 80a9 	bhi.w	800f350 <rclc_executor_spin_some.part.0+0x190>
 800f1fe:	e8df f003 	tbb	[pc, r3]
 800f202:	8989      	.short	0x8989
 800f204:	057b7b93 	.word	0x057b7b93
 800f208:	0505      	.short	0x0505
 800f20a:	9d          	.byte	0x9d
 800f20b:	00          	.byte	0x00
 800f20c:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f210:	4640      	mov	r0, r8
 800f212:	6849      	ldr	r1, [r1, #4]
 800f214:	f007 fa0a 	bl	801662c <rcl_wait_set_add_service>
 800f218:	2800      	cmp	r0, #0
 800f21a:	d175      	bne.n	800f308 <rclc_executor_spin_some.part.0+0x148>
 800f21c:	68ab      	ldr	r3, [r5, #8]
 800f21e:	3401      	adds	r4, #1
 800f220:	429c      	cmp	r4, r3
 800f222:	d3e1      	bcc.n	800f1e8 <rclc_executor_spin_some.part.0+0x28>
 800f224:	464b      	mov	r3, r9
 800f226:	4652      	mov	r2, sl
 800f228:	4640      	mov	r0, r8
 800f22a:	f007 fa2d 	bl	8016688 <rcl_wait>
 800f22e:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 800f232:	2b00      	cmp	r3, #0
 800f234:	f000 809b 	beq.w	800f36e <rclc_executor_spin_some.part.0+0x1ae>
 800f238:	2b01      	cmp	r3, #1
 800f23a:	f040 8089 	bne.w	800f350 <rclc_executor_spin_some.part.0+0x190>
 800f23e:	68ab      	ldr	r3, [r5, #8]
 800f240:	2b00      	cmp	r3, #0
 800f242:	f000 80ef 	beq.w	800f424 <rclc_executor_spin_some.part.0+0x264>
 800f246:	2400      	movs	r4, #0
 800f248:	4626      	mov	r6, r4
 800f24a:	f240 1991 	movw	r9, #401	; 0x191
 800f24e:	e00a      	b.n	800f266 <rclc_executor_spin_some.part.0+0xa6>
 800f250:	f7ff fdd2 	bl	800edf8 <_rclc_check_for_new_data>
 800f254:	4604      	mov	r4, r0
 800f256:	b110      	cbz	r0, 800f25e <rclc_executor_spin_some.part.0+0x9e>
 800f258:	4548      	cmp	r0, r9
 800f25a:	f040 8086 	bne.w	800f36a <rclc_executor_spin_some.part.0+0x1aa>
 800f25e:	68ab      	ldr	r3, [r5, #8]
 800f260:	429e      	cmp	r6, r3
 800f262:	f080 80db 	bcs.w	800f41c <rclc_executor_spin_some.part.0+0x25c>
 800f266:	686a      	ldr	r2, [r5, #4]
 800f268:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800f26c:	4641      	mov	r1, r8
 800f26e:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800f272:	3601      	adds	r6, #1
 800f274:	f1bc 0f00 	cmp.w	ip, #0
 800f278:	d1ea      	bne.n	800f250 <rclc_executor_spin_some.part.0+0x90>
 800f27a:	4619      	mov	r1, r3
 800f27c:	4610      	mov	r0, r2
 800f27e:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800f282:	4798      	blx	r3
 800f284:	2800      	cmp	r0, #0
 800f286:	d070      	beq.n	800f36a <rclc_executor_spin_some.part.0+0x1aa>
 800f288:	68aa      	ldr	r2, [r5, #8]
 800f28a:	2a00      	cmp	r2, #0
 800f28c:	d06d      	beq.n	800f36a <rclc_executor_spin_some.part.0+0x1aa>
 800f28e:	2600      	movs	r6, #0
 800f290:	f240 1991 	movw	r9, #401	; 0x191
 800f294:	e008      	b.n	800f2a8 <rclc_executor_spin_some.part.0+0xe8>
 800f296:	f7ff fdd5 	bl	800ee44 <_rclc_take_new_data>
 800f29a:	4604      	mov	r4, r0
 800f29c:	b108      	cbz	r0, 800f2a2 <rclc_executor_spin_some.part.0+0xe2>
 800f29e:	4548      	cmp	r0, r9
 800f2a0:	d163      	bne.n	800f36a <rclc_executor_spin_some.part.0+0x1aa>
 800f2a2:	68aa      	ldr	r2, [r5, #8]
 800f2a4:	4296      	cmp	r6, r2
 800f2a6:	d208      	bcs.n	800f2ba <rclc_executor_spin_some.part.0+0xfa>
 800f2a8:	6868      	ldr	r0, [r5, #4]
 800f2aa:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800f2ae:	4641      	mov	r1, r8
 800f2b0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800f2b4:	3601      	adds	r6, #1
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d1ed      	bne.n	800f296 <rclc_executor_spin_some.part.0+0xd6>
 800f2ba:	2600      	movs	r6, #0
 800f2bc:	b932      	cbnz	r2, 800f2cc <rclc_executor_spin_some.part.0+0x10c>
 800f2be:	e054      	b.n	800f36a <rclc_executor_spin_some.part.0+0x1aa>
 800f2c0:	2901      	cmp	r1, #1
 800f2c2:	d012      	beq.n	800f2ea <rclc_executor_spin_some.part.0+0x12a>
 800f2c4:	3601      	adds	r6, #1
 800f2c6:	4296      	cmp	r6, r2
 800f2c8:	d245      	bcs.n	800f356 <rclc_executor_spin_some.part.0+0x196>
 800f2ca:	2400      	movs	r4, #0
 800f2cc:	686b      	ldr	r3, [r5, #4]
 800f2ce:	eb03 1386 	add.w	r3, r3, r6, lsl #6
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 800f2d8:	2900      	cmp	r1, #0
 800f2da:	d046      	beq.n	800f36a <rclc_executor_spin_some.part.0+0x1aa>
 800f2dc:	7859      	ldrb	r1, [r3, #1]
 800f2de:	2900      	cmp	r1, #0
 800f2e0:	d1ee      	bne.n	800f2c0 <rclc_executor_spin_some.part.0+0x100>
 800f2e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d0ec      	beq.n	800f2c4 <rclc_executor_spin_some.part.0+0x104>
 800f2ea:	f7ff fe15 	bl	800ef18 <_rclc_execute.part.0>
 800f2ee:	2800      	cmp	r0, #0
 800f2f0:	f040 8096 	bne.w	800f420 <rclc_executor_spin_some.part.0+0x260>
 800f2f4:	68aa      	ldr	r2, [r5, #8]
 800f2f6:	e7e5      	b.n	800f2c4 <rclc_executor_spin_some.part.0+0x104>
 800f2f8:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f2fc:	4640      	mov	r0, r8
 800f2fe:	6849      	ldr	r1, [r1, #4]
 800f300:	f007 f968 	bl	80165d4 <rcl_wait_set_add_client>
 800f304:	2800      	cmp	r0, #0
 800f306:	d089      	beq.n	800f21c <rclc_executor_spin_some.part.0+0x5c>
 800f308:	9001      	str	r0, [sp, #4]
 800f30a:	f000 fa13 	bl	800f734 <rcutils_reset_error>
 800f30e:	9801      	ldr	r0, [sp, #4]
 800f310:	4607      	mov	r7, r0
 800f312:	e020      	b.n	800f356 <rclc_executor_spin_some.part.0+0x196>
 800f314:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f318:	4640      	mov	r0, r8
 800f31a:	6849      	ldr	r1, [r1, #4]
 800f31c:	f006 fdf2 	bl	8015f04 <rcl_wait_set_add_subscription>
 800f320:	2800      	cmp	r0, #0
 800f322:	f43f af7b 	beq.w	800f21c <rclc_executor_spin_some.part.0+0x5c>
 800f326:	e7ef      	b.n	800f308 <rclc_executor_spin_some.part.0+0x148>
 800f328:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f32c:	4640      	mov	r0, r8
 800f32e:	6849      	ldr	r1, [r1, #4]
 800f330:	f007 f920 	bl	8016574 <rcl_wait_set_add_timer>
 800f334:	2800      	cmp	r0, #0
 800f336:	f43f af71 	beq.w	800f21c <rclc_executor_spin_some.part.0+0x5c>
 800f33a:	e7e5      	b.n	800f308 <rclc_executor_spin_some.part.0+0x148>
 800f33c:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f340:	4640      	mov	r0, r8
 800f342:	6849      	ldr	r1, [r1, #4]
 800f344:	f007 f8ea 	bl	801651c <rcl_wait_set_add_guard_condition>
 800f348:	2800      	cmp	r0, #0
 800f34a:	f43f af67 	beq.w	800f21c <rclc_executor_spin_some.part.0+0x5c>
 800f34e:	e7db      	b.n	800f308 <rclc_executor_spin_some.part.0+0x148>
 800f350:	f000 f9f0 	bl	800f734 <rcutils_reset_error>
 800f354:	2701      	movs	r7, #1
 800f356:	4638      	mov	r0, r7
 800f358:	b003      	add	sp, #12
 800f35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f35e:	f000 f9e9 	bl	800f734 <rcutils_reset_error>
 800f362:	4638      	mov	r0, r7
 800f364:	b003      	add	sp, #12
 800f366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f36a:	4627      	mov	r7, r4
 800f36c:	e7f3      	b.n	800f356 <rclc_executor_spin_some.part.0+0x196>
 800f36e:	68ab      	ldr	r3, [r5, #8]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d05a      	beq.n	800f42a <rclc_executor_spin_some.part.0+0x26a>
 800f374:	2400      	movs	r4, #0
 800f376:	4626      	mov	r6, r4
 800f378:	f240 1991 	movw	r9, #401	; 0x191
 800f37c:	e008      	b.n	800f390 <rclc_executor_spin_some.part.0+0x1d0>
 800f37e:	f7ff fd3b 	bl	800edf8 <_rclc_check_for_new_data>
 800f382:	4604      	mov	r4, r0
 800f384:	b108      	cbz	r0, 800f38a <rclc_executor_spin_some.part.0+0x1ca>
 800f386:	4548      	cmp	r0, r9
 800f388:	d1ef      	bne.n	800f36a <rclc_executor_spin_some.part.0+0x1aa>
 800f38a:	68ab      	ldr	r3, [r5, #8]
 800f38c:	429e      	cmp	r6, r3
 800f38e:	d243      	bcs.n	800f418 <rclc_executor_spin_some.part.0+0x258>
 800f390:	686a      	ldr	r2, [r5, #4]
 800f392:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800f396:	4641      	mov	r1, r8
 800f398:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800f39c:	3601      	adds	r6, #1
 800f39e:	f1bc 0f00 	cmp.w	ip, #0
 800f3a2:	d1ec      	bne.n	800f37e <rclc_executor_spin_some.part.0+0x1be>
 800f3a4:	4619      	mov	r1, r3
 800f3a6:	4610      	mov	r0, r2
 800f3a8:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800f3ac:	4798      	blx	r3
 800f3ae:	2800      	cmp	r0, #0
 800f3b0:	d0db      	beq.n	800f36a <rclc_executor_spin_some.part.0+0x1aa>
 800f3b2:	68ab      	ldr	r3, [r5, #8]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d0d8      	beq.n	800f36a <rclc_executor_spin_some.part.0+0x1aa>
 800f3b8:	f04f 0a00 	mov.w	sl, #0
 800f3bc:	f240 1691 	movw	r6, #401	; 0x191
 800f3c0:	f240 2959 	movw	r9, #601	; 0x259
 800f3c4:	e00b      	b.n	800f3de <rclc_executor_spin_some.part.0+0x21e>
 800f3c6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800f3ca:	b113      	cbz	r3, 800f3d2 <rclc_executor_spin_some.part.0+0x212>
 800f3cc:	f7ff fda4 	bl	800ef18 <_rclc_execute.part.0>
 800f3d0:	bb30      	cbnz	r0, 800f420 <rclc_executor_spin_some.part.0+0x260>
 800f3d2:	68ab      	ldr	r3, [r5, #8]
 800f3d4:	f10a 0a01 	add.w	sl, sl, #1
 800f3d8:	459a      	cmp	sl, r3
 800f3da:	d2bc      	bcs.n	800f356 <rclc_executor_spin_some.part.0+0x196>
 800f3dc:	2400      	movs	r4, #0
 800f3de:	6868      	ldr	r0, [r5, #4]
 800f3e0:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800f3e4:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800f3e8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d0bc      	beq.n	800f36a <rclc_executor_spin_some.part.0+0x1aa>
 800f3f0:	4641      	mov	r1, r8
 800f3f2:	f7ff fd27 	bl	800ee44 <_rclc_take_new_data>
 800f3f6:	b118      	cbz	r0, 800f400 <rclc_executor_spin_some.part.0+0x240>
 800f3f8:	42b0      	cmp	r0, r6
 800f3fa:	d001      	beq.n	800f400 <rclc_executor_spin_some.part.0+0x240>
 800f3fc:	4548      	cmp	r0, r9
 800f3fe:	d10f      	bne.n	800f420 <rclc_executor_spin_some.part.0+0x260>
 800f400:	6868      	ldr	r0, [r5, #4]
 800f402:	eb10 000b 	adds.w	r0, r0, fp
 800f406:	d005      	beq.n	800f414 <rclc_executor_spin_some.part.0+0x254>
 800f408:	7843      	ldrb	r3, [r0, #1]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d0db      	beq.n	800f3c6 <rclc_executor_spin_some.part.0+0x206>
 800f40e:	2b01      	cmp	r3, #1
 800f410:	d1df      	bne.n	800f3d2 <rclc_executor_spin_some.part.0+0x212>
 800f412:	e7db      	b.n	800f3cc <rclc_executor_spin_some.part.0+0x20c>
 800f414:	270b      	movs	r7, #11
 800f416:	e79e      	b.n	800f356 <rclc_executor_spin_some.part.0+0x196>
 800f418:	686a      	ldr	r2, [r5, #4]
 800f41a:	e7c3      	b.n	800f3a4 <rclc_executor_spin_some.part.0+0x1e4>
 800f41c:	686a      	ldr	r2, [r5, #4]
 800f41e:	e72c      	b.n	800f27a <rclc_executor_spin_some.part.0+0xba>
 800f420:	4607      	mov	r7, r0
 800f422:	e798      	b.n	800f356 <rclc_executor_spin_some.part.0+0x196>
 800f424:	686a      	ldr	r2, [r5, #4]
 800f426:	461c      	mov	r4, r3
 800f428:	e727      	b.n	800f27a <rclc_executor_spin_some.part.0+0xba>
 800f42a:	686a      	ldr	r2, [r5, #4]
 800f42c:	461c      	mov	r4, r3
 800f42e:	e7b9      	b.n	800f3a4 <rclc_executor_spin_some.part.0+0x1e4>

0800f430 <rclc_executor_spin_some>:
 800f430:	b190      	cbz	r0, 800f458 <rclc_executor_spin_some+0x28>
 800f432:	b570      	push	{r4, r5, r6, lr}
 800f434:	4604      	mov	r4, r0
 800f436:	6800      	ldr	r0, [r0, #0]
 800f438:	4616      	mov	r6, r2
 800f43a:	461d      	mov	r5, r3
 800f43c:	f005 faa2 	bl	8014984 <rcl_context_is_valid>
 800f440:	b130      	cbz	r0, 800f450 <rclc_executor_spin_some+0x20>
 800f442:	4632      	mov	r2, r6
 800f444:	462b      	mov	r3, r5
 800f446:	4620      	mov	r0, r4
 800f448:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f44c:	f7ff beb8 	b.w	800f1c0 <rclc_executor_spin_some.part.0>
 800f450:	f000 f970 	bl	800f734 <rcutils_reset_error>
 800f454:	2001      	movs	r0, #1
 800f456:	bd70      	pop	{r4, r5, r6, pc}
 800f458:	200b      	movs	r0, #11
 800f45a:	4770      	bx	lr

0800f45c <rclc_executor_handle_counters_zero_init>:
 800f45c:	b140      	cbz	r0, 800f470 <rclc_executor_handle_counters_zero_init+0x14>
 800f45e:	2300      	movs	r3, #0
 800f460:	6003      	str	r3, [r0, #0]
 800f462:	6043      	str	r3, [r0, #4]
 800f464:	6083      	str	r3, [r0, #8]
 800f466:	60c3      	str	r3, [r0, #12]
 800f468:	6103      	str	r3, [r0, #16]
 800f46a:	6143      	str	r3, [r0, #20]
 800f46c:	4618      	mov	r0, r3
 800f46e:	4770      	bx	lr
 800f470:	200b      	movs	r0, #11
 800f472:	4770      	bx	lr

0800f474 <rclc_executor_handle_init>:
 800f474:	b178      	cbz	r0, 800f496 <rclc_executor_handle_init+0x22>
 800f476:	b430      	push	{r4, r5}
 800f478:	4603      	mov	r3, r0
 800f47a:	2209      	movs	r2, #9
 800f47c:	2000      	movs	r0, #0
 800f47e:	2400      	movs	r4, #0
 800f480:	2500      	movs	r5, #0
 800f482:	801a      	strh	r2, [r3, #0]
 800f484:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 800f488:	bc30      	pop	{r4, r5}
 800f48a:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800f48e:	6359      	str	r1, [r3, #52]	; 0x34
 800f490:	6318      	str	r0, [r3, #48]	; 0x30
 800f492:	8718      	strh	r0, [r3, #56]	; 0x38
 800f494:	4770      	bx	lr
 800f496:	200b      	movs	r0, #11
 800f498:	4770      	bx	lr
 800f49a:	bf00      	nop

0800f49c <rclc_support_init>:
 800f49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4a0:	b086      	sub	sp, #24
 800f4a2:	2800      	cmp	r0, #0
 800f4a4:	d042      	beq.n	800f52c <rclc_support_init+0x90>
 800f4a6:	461c      	mov	r4, r3
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d03f      	beq.n	800f52c <rclc_support_init+0x90>
 800f4ac:	460f      	mov	r7, r1
 800f4ae:	4690      	mov	r8, r2
 800f4b0:	4606      	mov	r6, r0
 800f4b2:	f005 fd47 	bl	8014f44 <rcl_get_zero_initialized_init_options>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800f4bc:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f4c0:	9305      	str	r3, [sp, #20]
 800f4c2:	a805      	add	r0, sp, #20
 800f4c4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800f4c8:	f005 fd3e 	bl	8014f48 <rcl_init_options_init>
 800f4cc:	4605      	mov	r5, r0
 800f4ce:	bb38      	cbnz	r0, 800f520 <rclc_support_init+0x84>
 800f4d0:	f005 fd38 	bl	8014f44 <rcl_get_zero_initialized_init_options>
 800f4d4:	4631      	mov	r1, r6
 800f4d6:	6030      	str	r0, [r6, #0]
 800f4d8:	a805      	add	r0, sp, #20
 800f4da:	f005 fdab 	bl	8015034 <rcl_init_options_copy>
 800f4de:	4605      	mov	r5, r0
 800f4e0:	b9c0      	cbnz	r0, 800f514 <rclc_support_init+0x78>
 800f4e2:	ad02      	add	r5, sp, #8
 800f4e4:	4628      	mov	r0, r5
 800f4e6:	f005 fa43 	bl	8014970 <rcl_get_zero_initialized_context>
 800f4ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f4ee:	1d33      	adds	r3, r6, #4
 800f4f0:	e883 0003 	stmia.w	r3, {r0, r1}
 800f4f4:	4632      	mov	r2, r6
 800f4f6:	4641      	mov	r1, r8
 800f4f8:	4638      	mov	r0, r7
 800f4fa:	f005 fc19 	bl	8014d30 <rcl_init>
 800f4fe:	4605      	mov	r5, r0
 800f500:	b940      	cbnz	r0, 800f514 <rclc_support_init+0x78>
 800f502:	60f4      	str	r4, [r6, #12]
 800f504:	4622      	mov	r2, r4
 800f506:	f106 0110 	add.w	r1, r6, #16
 800f50a:	2003      	movs	r0, #3
 800f50c:	f006 f95c 	bl	80157c8 <rcl_clock_init>
 800f510:	4605      	mov	r5, r0
 800f512:	b108      	cbz	r0, 800f518 <rclc_support_init+0x7c>
 800f514:	f000 f90e 	bl	800f734 <rcutils_reset_error>
 800f518:	a805      	add	r0, sp, #20
 800f51a:	f005 fd67 	bl	8014fec <rcl_init_options_fini>
 800f51e:	b108      	cbz	r0, 800f524 <rclc_support_init+0x88>
 800f520:	f000 f908 	bl	800f734 <rcutils_reset_error>
 800f524:	4628      	mov	r0, r5
 800f526:	b006      	add	sp, #24
 800f528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f52c:	250b      	movs	r5, #11
 800f52e:	4628      	mov	r0, r5
 800f530:	b006      	add	sp, #24
 800f532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f536:	bf00      	nop

0800f538 <rclc_node_init_with_options>:
 800f538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f53c:	b087      	sub	sp, #28
 800f53e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800f540:	b1e0      	cbz	r0, 800f57c <rclc_node_init_with_options+0x44>
 800f542:	460d      	mov	r5, r1
 800f544:	b1d1      	cbz	r1, 800f57c <rclc_node_init_with_options+0x44>
 800f546:	4616      	mov	r6, r2
 800f548:	b1c2      	cbz	r2, 800f57c <rclc_node_init_with_options+0x44>
 800f54a:	4698      	mov	r8, r3
 800f54c:	b1b3      	cbz	r3, 800f57c <rclc_node_init_with_options+0x44>
 800f54e:	b1af      	cbz	r7, 800f57c <rclc_node_init_with_options+0x44>
 800f550:	f10d 0910 	add.w	r9, sp, #16
 800f554:	4604      	mov	r4, r0
 800f556:	4648      	mov	r0, r9
 800f558:	f005 fe34 	bl	80151c4 <rcl_get_zero_initialized_node>
 800f55c:	e899 0003 	ldmia.w	r9, {r0, r1}
 800f560:	f108 0304 	add.w	r3, r8, #4
 800f564:	9700      	str	r7, [sp, #0]
 800f566:	4632      	mov	r2, r6
 800f568:	e884 0003 	stmia.w	r4, {r0, r1}
 800f56c:	4629      	mov	r1, r5
 800f56e:	4620      	mov	r0, r4
 800f570:	f005 fe32 	bl	80151d8 <rcl_node_init>
 800f574:	b930      	cbnz	r0, 800f584 <rclc_node_init_with_options+0x4c>
 800f576:	b007      	add	sp, #28
 800f578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f57c:	200b      	movs	r0, #11
 800f57e:	b007      	add	sp, #28
 800f580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f584:	9003      	str	r0, [sp, #12]
 800f586:	f000 f8d5 	bl	800f734 <rcutils_reset_error>
 800f58a:	9803      	ldr	r0, [sp, #12]
 800f58c:	b007      	add	sp, #28
 800f58e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f592:	bf00      	nop

0800f594 <rclc_publisher_init_default>:
 800f594:	b368      	cbz	r0, 800f5f2 <rclc_publisher_init_default+0x5e>
 800f596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f59a:	460d      	mov	r5, r1
 800f59c:	b09e      	sub	sp, #120	; 0x78
 800f59e:	b321      	cbz	r1, 800f5ea <rclc_publisher_init_default+0x56>
 800f5a0:	4616      	mov	r6, r2
 800f5a2:	b312      	cbz	r2, 800f5ea <rclc_publisher_init_default+0x56>
 800f5a4:	461f      	mov	r7, r3
 800f5a6:	b303      	cbz	r3, 800f5ea <rclc_publisher_init_default+0x56>
 800f5a8:	4604      	mov	r4, r0
 800f5aa:	f7ff f969 	bl	800e880 <rcl_get_zero_initialized_publisher>
 800f5ae:	f10d 0810 	add.w	r8, sp, #16
 800f5b2:	6020      	str	r0, [r4, #0]
 800f5b4:	4640      	mov	r0, r8
 800f5b6:	f7ff fa5f 	bl	800ea78 <rcl_publisher_get_default_options>
 800f5ba:	490f      	ldr	r1, [pc, #60]	; (800f5f8 <rclc_publisher_init_default+0x64>)
 800f5bc:	2250      	movs	r2, #80	; 0x50
 800f5be:	4640      	mov	r0, r8
 800f5c0:	f00b f881 	bl	801a6c6 <memcpy>
 800f5c4:	f8cd 8000 	str.w	r8, [sp]
 800f5c8:	463b      	mov	r3, r7
 800f5ca:	4632      	mov	r2, r6
 800f5cc:	4629      	mov	r1, r5
 800f5ce:	4620      	mov	r0, r4
 800f5d0:	f7ff f95c 	bl	800e88c <rcl_publisher_init>
 800f5d4:	b910      	cbnz	r0, 800f5dc <rclc_publisher_init_default+0x48>
 800f5d6:	b01e      	add	sp, #120	; 0x78
 800f5d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5dc:	9003      	str	r0, [sp, #12]
 800f5de:	f000 f8a9 	bl	800f734 <rcutils_reset_error>
 800f5e2:	9803      	ldr	r0, [sp, #12]
 800f5e4:	b01e      	add	sp, #120	; 0x78
 800f5e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5ea:	200b      	movs	r0, #11
 800f5ec:	b01e      	add	sp, #120	; 0x78
 800f5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5f2:	200b      	movs	r0, #11
 800f5f4:	4770      	bx	lr
 800f5f6:	bf00      	nop
 800f5f8:	0801b8d8 	.word	0x0801b8d8

0800f5fc <rclc_subscription_init_default>:
 800f5fc:	b368      	cbz	r0, 800f65a <rclc_subscription_init_default+0x5e>
 800f5fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f602:	460d      	mov	r5, r1
 800f604:	b0a0      	sub	sp, #128	; 0x80
 800f606:	b321      	cbz	r1, 800f652 <rclc_subscription_init_default+0x56>
 800f608:	4616      	mov	r6, r2
 800f60a:	b312      	cbz	r2, 800f652 <rclc_subscription_init_default+0x56>
 800f60c:	461f      	mov	r7, r3
 800f60e:	b303      	cbz	r3, 800f652 <rclc_subscription_init_default+0x56>
 800f610:	4604      	mov	r4, r0
 800f612:	f7ff fa77 	bl	800eb04 <rcl_get_zero_initialized_subscription>
 800f616:	f10d 0810 	add.w	r8, sp, #16
 800f61a:	6020      	str	r0, [r4, #0]
 800f61c:	4640      	mov	r0, r8
 800f61e:	f7ff fb6d 	bl	800ecfc <rcl_subscription_get_default_options>
 800f622:	490f      	ldr	r1, [pc, #60]	; (800f660 <rclc_subscription_init_default+0x64>)
 800f624:	2250      	movs	r2, #80	; 0x50
 800f626:	4640      	mov	r0, r8
 800f628:	f00b f84d 	bl	801a6c6 <memcpy>
 800f62c:	f8cd 8000 	str.w	r8, [sp]
 800f630:	463b      	mov	r3, r7
 800f632:	4632      	mov	r2, r6
 800f634:	4629      	mov	r1, r5
 800f636:	4620      	mov	r0, r4
 800f638:	f7ff fa6a 	bl	800eb10 <rcl_subscription_init>
 800f63c:	b910      	cbnz	r0, 800f644 <rclc_subscription_init_default+0x48>
 800f63e:	b020      	add	sp, #128	; 0x80
 800f640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f644:	9003      	str	r0, [sp, #12]
 800f646:	f000 f875 	bl	800f734 <rcutils_reset_error>
 800f64a:	9803      	ldr	r0, [sp, #12]
 800f64c:	b020      	add	sp, #128	; 0x80
 800f64e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f652:	200b      	movs	r0, #11
 800f654:	b020      	add	sp, #128	; 0x80
 800f656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f65a:	200b      	movs	r0, #11
 800f65c:	4770      	bx	lr
 800f65e:	bf00      	nop
 800f660:	0801b928 	.word	0x0801b928

0800f664 <__default_zero_allocate>:
 800f664:	f00a b9ec 	b.w	8019a40 <calloc>

0800f668 <__default_reallocate>:
 800f668:	f00a bb78 	b.w	8019d5c <realloc>

0800f66c <__default_deallocate>:
 800f66c:	f00a ba56 	b.w	8019b1c <free>

0800f670 <__default_allocate>:
 800f670:	f00a ba4c 	b.w	8019b0c <malloc>

0800f674 <rcutils_get_zero_initialized_allocator>:
 800f674:	b470      	push	{r4, r5, r6}
 800f676:	4d05      	ldr	r5, [pc, #20]	; (800f68c <rcutils_get_zero_initialized_allocator+0x18>)
 800f678:	4606      	mov	r6, r0
 800f67a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f67c:	4634      	mov	r4, r6
 800f67e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f680:	682b      	ldr	r3, [r5, #0]
 800f682:	6023      	str	r3, [r4, #0]
 800f684:	4630      	mov	r0, r6
 800f686:	bc70      	pop	{r4, r5, r6}
 800f688:	4770      	bx	lr
 800f68a:	bf00      	nop
 800f68c:	0801b978 	.word	0x0801b978

0800f690 <rcutils_set_default_allocator>:
 800f690:	b1a0      	cbz	r0, 800f6bc <rcutils_set_default_allocator+0x2c>
 800f692:	6801      	ldr	r1, [r0, #0]
 800f694:	b199      	cbz	r1, 800f6be <rcutils_set_default_allocator+0x2e>
 800f696:	b430      	push	{r4, r5}
 800f698:	6844      	ldr	r4, [r0, #4]
 800f69a:	b194      	cbz	r4, 800f6c2 <rcutils_set_default_allocator+0x32>
 800f69c:	68c5      	ldr	r5, [r0, #12]
 800f69e:	b15d      	cbz	r5, 800f6b8 <rcutils_set_default_allocator+0x28>
 800f6a0:	6883      	ldr	r3, [r0, #8]
 800f6a2:	b18b      	cbz	r3, 800f6c8 <rcutils_set_default_allocator+0x38>
 800f6a4:	4a09      	ldr	r2, [pc, #36]	; (800f6cc <rcutils_set_default_allocator+0x3c>)
 800f6a6:	e9c2 1400 	strd	r1, r4, [r2]
 800f6aa:	e9c2 3502 	strd	r3, r5, [r2, #8]
 800f6ae:	2000      	movs	r0, #0
 800f6b0:	6110      	str	r0, [r2, #16]
 800f6b2:	2001      	movs	r0, #1
 800f6b4:	bc30      	pop	{r4, r5}
 800f6b6:	4770      	bx	lr
 800f6b8:	4628      	mov	r0, r5
 800f6ba:	e7fb      	b.n	800f6b4 <rcutils_set_default_allocator+0x24>
 800f6bc:	4770      	bx	lr
 800f6be:	4608      	mov	r0, r1
 800f6c0:	4770      	bx	lr
 800f6c2:	4620      	mov	r0, r4
 800f6c4:	bc30      	pop	{r4, r5}
 800f6c6:	4770      	bx	lr
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	e7f3      	b.n	800f6b4 <rcutils_set_default_allocator+0x24>
 800f6cc:	20000054 	.word	0x20000054

0800f6d0 <rcutils_get_default_allocator>:
 800f6d0:	b470      	push	{r4, r5, r6}
 800f6d2:	4d05      	ldr	r5, [pc, #20]	; (800f6e8 <rcutils_get_default_allocator+0x18>)
 800f6d4:	4606      	mov	r6, r0
 800f6d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f6d8:	4634      	mov	r4, r6
 800f6da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f6dc:	682b      	ldr	r3, [r5, #0]
 800f6de:	6023      	str	r3, [r4, #0]
 800f6e0:	4630      	mov	r0, r6
 800f6e2:	bc70      	pop	{r4, r5, r6}
 800f6e4:	4770      	bx	lr
 800f6e6:	bf00      	nop
 800f6e8:	20000054 	.word	0x20000054

0800f6ec <rcutils_allocator_is_valid>:
 800f6ec:	b158      	cbz	r0, 800f706 <rcutils_allocator_is_valid+0x1a>
 800f6ee:	6803      	ldr	r3, [r0, #0]
 800f6f0:	b143      	cbz	r3, 800f704 <rcutils_allocator_is_valid+0x18>
 800f6f2:	6843      	ldr	r3, [r0, #4]
 800f6f4:	b133      	cbz	r3, 800f704 <rcutils_allocator_is_valid+0x18>
 800f6f6:	68c3      	ldr	r3, [r0, #12]
 800f6f8:	b123      	cbz	r3, 800f704 <rcutils_allocator_is_valid+0x18>
 800f6fa:	6880      	ldr	r0, [r0, #8]
 800f6fc:	3800      	subs	r0, #0
 800f6fe:	bf18      	it	ne
 800f700:	2001      	movne	r0, #1
 800f702:	4770      	bx	lr
 800f704:	4618      	mov	r0, r3
 800f706:	4770      	bx	lr

0800f708 <rcutils_get_error_string>:
 800f708:	4b06      	ldr	r3, [pc, #24]	; (800f724 <rcutils_get_error_string+0x1c>)
 800f70a:	781b      	ldrb	r3, [r3, #0]
 800f70c:	b13b      	cbz	r3, 800f71e <rcutils_get_error_string+0x16>
 800f70e:	4b06      	ldr	r3, [pc, #24]	; (800f728 <rcutils_get_error_string+0x20>)
 800f710:	781a      	ldrb	r2, [r3, #0]
 800f712:	b90a      	cbnz	r2, 800f718 <rcutils_get_error_string+0x10>
 800f714:	2201      	movs	r2, #1
 800f716:	701a      	strb	r2, [r3, #0]
 800f718:	4b04      	ldr	r3, [pc, #16]	; (800f72c <rcutils_get_error_string+0x24>)
 800f71a:	7818      	ldrb	r0, [r3, #0]
 800f71c:	4770      	bx	lr
 800f71e:	4b04      	ldr	r3, [pc, #16]	; (800f730 <rcutils_get_error_string+0x28>)
 800f720:	7818      	ldrb	r0, [r3, #0]
 800f722:	4770      	bx	lr
 800f724:	20009c48 	.word	0x20009c48
 800f728:	20009c49 	.word	0x20009c49
 800f72c:	20009eb0 	.word	0x20009eb0
 800f730:	0801b98c 	.word	0x0801b98c

0800f734 <rcutils_reset_error>:
 800f734:	b4d0      	push	{r4, r6, r7}
 800f736:	4a07      	ldr	r2, [pc, #28]	; (800f754 <rcutils_reset_error+0x20>)
 800f738:	4807      	ldr	r0, [pc, #28]	; (800f758 <rcutils_reset_error+0x24>)
 800f73a:	4c08      	ldr	r4, [pc, #32]	; (800f75c <rcutils_reset_error+0x28>)
 800f73c:	4908      	ldr	r1, [pc, #32]	; (800f760 <rcutils_reset_error+0x2c>)
 800f73e:	2300      	movs	r3, #0
 800f740:	2600      	movs	r6, #0
 800f742:	2700      	movs	r7, #0
 800f744:	8013      	strh	r3, [r2, #0]
 800f746:	7003      	strb	r3, [r0, #0]
 800f748:	e9c2 6702 	strd	r6, r7, [r2, #8]
 800f74c:	7023      	strb	r3, [r4, #0]
 800f74e:	700b      	strb	r3, [r1, #0]
 800f750:	bcd0      	pop	{r4, r6, r7}
 800f752:	4770      	bx	lr
 800f754:	20009eb8 	.word	0x20009eb8
 800f758:	20009eb0 	.word	0x20009eb0
 800f75c:	20009c49 	.word	0x20009c49
 800f760:	20009c48 	.word	0x20009c48

0800f764 <rcutils_get_zero_initialized_string_map>:
 800f764:	4b01      	ldr	r3, [pc, #4]	; (800f76c <rcutils_get_zero_initialized_string_map+0x8>)
 800f766:	2000      	movs	r0, #0
 800f768:	6018      	str	r0, [r3, #0]
 800f76a:	4770      	bx	lr
 800f76c:	20009c4c 	.word	0x20009c4c

0800f770 <rcutils_string_map_reserve>:
 800f770:	2800      	cmp	r0, #0
 800f772:	d061      	beq.n	800f838 <rcutils_string_map_reserve+0xc8>
 800f774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f778:	6805      	ldr	r5, [r0, #0]
 800f77a:	b083      	sub	sp, #12
 800f77c:	460c      	mov	r4, r1
 800f77e:	4606      	mov	r6, r0
 800f780:	b12d      	cbz	r5, 800f78e <rcutils_string_map_reserve+0x1e>
 800f782:	68eb      	ldr	r3, [r5, #12]
 800f784:	42a3      	cmp	r3, r4
 800f786:	d906      	bls.n	800f796 <rcutils_string_map_reserve+0x26>
 800f788:	461c      	mov	r4, r3
 800f78a:	2d00      	cmp	r5, #0
 800f78c:	d1f9      	bne.n	800f782 <rcutils_string_map_reserve+0x12>
 800f78e:	201f      	movs	r0, #31
 800f790:	b003      	add	sp, #12
 800f792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f796:	68ab      	ldr	r3, [r5, #8]
 800f798:	42a3      	cmp	r3, r4
 800f79a:	d049      	beq.n	800f830 <rcutils_string_map_reserve+0xc0>
 800f79c:	6a2f      	ldr	r7, [r5, #32]
 800f79e:	2c00      	cmp	r4, #0
 800f7a0:	d035      	beq.n	800f80e <rcutils_string_map_reserve+0x9e>
 800f7a2:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800f7a6:	d245      	bcs.n	800f834 <rcutils_string_map_reserve+0xc4>
 800f7a8:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800f7ac:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800f7b0:	6828      	ldr	r0, [r5, #0]
 800f7b2:	4641      	mov	r1, r8
 800f7b4:	463a      	mov	r2, r7
 800f7b6:	47c8      	blx	r9
 800f7b8:	2800      	cmp	r0, #0
 800f7ba:	d03b      	beq.n	800f834 <rcutils_string_map_reserve+0xc4>
 800f7bc:	6833      	ldr	r3, [r6, #0]
 800f7be:	463a      	mov	r2, r7
 800f7c0:	6018      	str	r0, [r3, #0]
 800f7c2:	4641      	mov	r1, r8
 800f7c4:	6858      	ldr	r0, [r3, #4]
 800f7c6:	47c8      	blx	r9
 800f7c8:	2800      	cmp	r0, #0
 800f7ca:	d033      	beq.n	800f834 <rcutils_string_map_reserve+0xc4>
 800f7cc:	6835      	ldr	r5, [r6, #0]
 800f7ce:	68ab      	ldr	r3, [r5, #8]
 800f7d0:	6068      	str	r0, [r5, #4]
 800f7d2:	42a3      	cmp	r3, r4
 800f7d4:	d227      	bcs.n	800f826 <rcutils_string_map_reserve+0xb6>
 800f7d6:	682a      	ldr	r2, [r5, #0]
 800f7d8:	eb00 0108 	add.w	r1, r0, r8
 800f7dc:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800f7e0:	428f      	cmp	r7, r1
 800f7e2:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800f7e6:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800f7ea:	d203      	bcs.n	800f7f4 <rcutils_string_map_reserve+0x84>
 800f7ec:	eb02 0108 	add.w	r1, r2, r8
 800f7f0:	428e      	cmp	r6, r1
 800f7f2:	d323      	bcc.n	800f83c <rcutils_string_map_reserve+0xcc>
 800f7f4:	1ae3      	subs	r3, r4, r3
 800f7f6:	009a      	lsls	r2, r3, #2
 800f7f8:	4638      	mov	r0, r7
 800f7fa:	2100      	movs	r1, #0
 800f7fc:	9201      	str	r2, [sp, #4]
 800f7fe:	f00a fe43 	bl	801a488 <memset>
 800f802:	9a01      	ldr	r2, [sp, #4]
 800f804:	4630      	mov	r0, r6
 800f806:	2100      	movs	r1, #0
 800f808:	f00a fe3e 	bl	801a488 <memset>
 800f80c:	e00b      	b.n	800f826 <rcutils_string_map_reserve+0xb6>
 800f80e:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800f812:	6828      	ldr	r0, [r5, #0]
 800f814:	4639      	mov	r1, r7
 800f816:	47c0      	blx	r8
 800f818:	6833      	ldr	r3, [r6, #0]
 800f81a:	4639      	mov	r1, r7
 800f81c:	6858      	ldr	r0, [r3, #4]
 800f81e:	601c      	str	r4, [r3, #0]
 800f820:	47c0      	blx	r8
 800f822:	6835      	ldr	r5, [r6, #0]
 800f824:	606c      	str	r4, [r5, #4]
 800f826:	2000      	movs	r0, #0
 800f828:	60ac      	str	r4, [r5, #8]
 800f82a:	b003      	add	sp, #12
 800f82c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f830:	2000      	movs	r0, #0
 800f832:	e7ad      	b.n	800f790 <rcutils_string_map_reserve+0x20>
 800f834:	200a      	movs	r0, #10
 800f836:	e7ab      	b.n	800f790 <rcutils_string_map_reserve+0x20>
 800f838:	200b      	movs	r0, #11
 800f83a:	4770      	bx	lr
 800f83c:	1f13      	subs	r3, r2, #4
 800f83e:	f1ac 0c04 	sub.w	ip, ip, #4
 800f842:	4498      	add	r8, r3
 800f844:	4460      	add	r0, ip
 800f846:	4462      	add	r2, ip
 800f848:	2300      	movs	r3, #0
 800f84a:	f842 3f04 	str.w	r3, [r2, #4]!
 800f84e:	4542      	cmp	r2, r8
 800f850:	f840 3f04 	str.w	r3, [r0, #4]!
 800f854:	d1f9      	bne.n	800f84a <rcutils_string_map_reserve+0xda>
 800f856:	e7e6      	b.n	800f826 <rcutils_string_map_reserve+0xb6>

0800f858 <rcutils_string_map_init>:
 800f858:	b082      	sub	sp, #8
 800f85a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f85c:	460e      	mov	r6, r1
 800f85e:	a906      	add	r1, sp, #24
 800f860:	e881 000c 	stmia.w	r1, {r2, r3}
 800f864:	b380      	cbz	r0, 800f8c8 <rcutils_string_map_init+0x70>
 800f866:	6807      	ldr	r7, [r0, #0]
 800f868:	4604      	mov	r4, r0
 800f86a:	b12f      	cbz	r7, 800f878 <rcutils_string_map_init+0x20>
 800f86c:	251e      	movs	r5, #30
 800f86e:	4628      	mov	r0, r5
 800f870:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f874:	b002      	add	sp, #8
 800f876:	4770      	bx	lr
 800f878:	a806      	add	r0, sp, #24
 800f87a:	f7ff ff37 	bl	800f6ec <rcutils_allocator_is_valid>
 800f87e:	b318      	cbz	r0, 800f8c8 <rcutils_string_map_init+0x70>
 800f880:	9b06      	ldr	r3, [sp, #24]
 800f882:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f884:	2024      	movs	r0, #36	; 0x24
 800f886:	4798      	blx	r3
 800f888:	4605      	mov	r5, r0
 800f88a:	6020      	str	r0, [r4, #0]
 800f88c:	b310      	cbz	r0, 800f8d4 <rcutils_string_map_init+0x7c>
 800f88e:	f10d 0e18 	add.w	lr, sp, #24
 800f892:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f896:	f105 0c10 	add.w	ip, r5, #16
 800f89a:	e9c5 7700 	strd	r7, r7, [r5]
 800f89e:	e9c5 7702 	strd	r7, r7, [r5, #8]
 800f8a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f8a6:	f8de 3000 	ldr.w	r3, [lr]
 800f8aa:	f8cc 3000 	str.w	r3, [ip]
 800f8ae:	4631      	mov	r1, r6
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	f7ff ff5d 	bl	800f770 <rcutils_string_map_reserve>
 800f8b6:	4605      	mov	r5, r0
 800f8b8:	2800      	cmp	r0, #0
 800f8ba:	d0d8      	beq.n	800f86e <rcutils_string_map_init+0x16>
 800f8bc:	9b07      	ldr	r3, [sp, #28]
 800f8be:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f8c0:	6820      	ldr	r0, [r4, #0]
 800f8c2:	4798      	blx	r3
 800f8c4:	6027      	str	r7, [r4, #0]
 800f8c6:	e7d2      	b.n	800f86e <rcutils_string_map_init+0x16>
 800f8c8:	250b      	movs	r5, #11
 800f8ca:	4628      	mov	r0, r5
 800f8cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f8d0:	b002      	add	sp, #8
 800f8d2:	4770      	bx	lr
 800f8d4:	250a      	movs	r5, #10
 800f8d6:	e7ca      	b.n	800f86e <rcutils_string_map_init+0x16>

0800f8d8 <rcutils_string_map_fini>:
 800f8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8dc:	b082      	sub	sp, #8
 800f8de:	2800      	cmp	r0, #0
 800f8e0:	d039      	beq.n	800f956 <rcutils_string_map_fini+0x7e>
 800f8e2:	6804      	ldr	r4, [r0, #0]
 800f8e4:	4606      	mov	r6, r0
 800f8e6:	2c00      	cmp	r4, #0
 800f8e8:	d031      	beq.n	800f94e <rcutils_string_map_fini+0x76>
 800f8ea:	68a3      	ldr	r3, [r4, #8]
 800f8ec:	b323      	cbz	r3, 800f938 <rcutils_string_map_fini+0x60>
 800f8ee:	2500      	movs	r5, #0
 800f8f0:	6822      	ldr	r2, [r4, #0]
 800f8f2:	46a8      	mov	r8, r5
 800f8f4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800f8f8:	b1d8      	cbz	r0, 800f932 <rcutils_string_map_fini+0x5a>
 800f8fa:	6a21      	ldr	r1, [r4, #32]
 800f8fc:	6967      	ldr	r7, [r4, #20]
 800f8fe:	9101      	str	r1, [sp, #4]
 800f900:	47b8      	blx	r7
 800f902:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f906:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800f90a:	9901      	ldr	r1, [sp, #4]
 800f90c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f910:	47b8      	blx	r7
 800f912:	68e3      	ldr	r3, [r4, #12]
 800f914:	6862      	ldr	r2, [r4, #4]
 800f916:	3b01      	subs	r3, #1
 800f918:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800f91c:	60e3      	str	r3, [r4, #12]
 800f91e:	6834      	ldr	r4, [r6, #0]
 800f920:	68a3      	ldr	r3, [r4, #8]
 800f922:	3501      	adds	r5, #1
 800f924:	429d      	cmp	r5, r3
 800f926:	d207      	bcs.n	800f938 <rcutils_string_map_fini+0x60>
 800f928:	6822      	ldr	r2, [r4, #0]
 800f92a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800f92e:	2800      	cmp	r0, #0
 800f930:	d1e3      	bne.n	800f8fa <rcutils_string_map_fini+0x22>
 800f932:	3501      	adds	r5, #1
 800f934:	429d      	cmp	r5, r3
 800f936:	d3dd      	bcc.n	800f8f4 <rcutils_string_map_fini+0x1c>
 800f938:	2100      	movs	r1, #0
 800f93a:	4630      	mov	r0, r6
 800f93c:	f7ff ff18 	bl	800f770 <rcutils_string_map_reserve>
 800f940:	4604      	mov	r4, r0
 800f942:	b920      	cbnz	r0, 800f94e <rcutils_string_map_fini+0x76>
 800f944:	6830      	ldr	r0, [r6, #0]
 800f946:	6943      	ldr	r3, [r0, #20]
 800f948:	6a01      	ldr	r1, [r0, #32]
 800f94a:	4798      	blx	r3
 800f94c:	6034      	str	r4, [r6, #0]
 800f94e:	4620      	mov	r0, r4
 800f950:	b002      	add	sp, #8
 800f952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f956:	240b      	movs	r4, #11
 800f958:	4620      	mov	r0, r4
 800f95a:	b002      	add	sp, #8
 800f95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f960 <rcutils_string_map_getn>:
 800f960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f964:	b082      	sub	sp, #8
 800f966:	b308      	cbz	r0, 800f9ac <rcutils_string_map_getn+0x4c>
 800f968:	6804      	ldr	r4, [r0, #0]
 800f96a:	b304      	cbz	r4, 800f9ae <rcutils_string_map_getn+0x4e>
 800f96c:	460d      	mov	r5, r1
 800f96e:	b1e9      	cbz	r1, 800f9ac <rcutils_string_map_getn+0x4c>
 800f970:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800f974:	6827      	ldr	r7, [r4, #0]
 800f976:	f1b9 0f00 	cmp.w	r9, #0
 800f97a:	d017      	beq.n	800f9ac <rcutils_string_map_getn+0x4c>
 800f97c:	4690      	mov	r8, r2
 800f97e:	3f04      	subs	r7, #4
 800f980:	2600      	movs	r6, #0
 800f982:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800f986:	9101      	str	r1, [sp, #4]
 800f988:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800f98c:	4608      	mov	r0, r1
 800f98e:	3601      	adds	r6, #1
 800f990:	b151      	cbz	r1, 800f9a8 <rcutils_string_map_getn+0x48>
 800f992:	f7f0 fc2f 	bl	80001f4 <strlen>
 800f996:	4540      	cmp	r0, r8
 800f998:	4602      	mov	r2, r0
 800f99a:	9901      	ldr	r1, [sp, #4]
 800f99c:	bf38      	it	cc
 800f99e:	4642      	movcc	r2, r8
 800f9a0:	4628      	mov	r0, r5
 800f9a2:	f00a fd86 	bl	801a4b2 <strncmp>
 800f9a6:	b130      	cbz	r0, 800f9b6 <rcutils_string_map_getn+0x56>
 800f9a8:	45b1      	cmp	r9, r6
 800f9aa:	d1ea      	bne.n	800f982 <rcutils_string_map_getn+0x22>
 800f9ac:	2400      	movs	r4, #0
 800f9ae:	4620      	mov	r0, r4
 800f9b0:	b002      	add	sp, #8
 800f9b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9b6:	6863      	ldr	r3, [r4, #4]
 800f9b8:	f853 400a 	ldr.w	r4, [r3, sl]
 800f9bc:	4620      	mov	r0, r4
 800f9be:	b002      	add	sp, #8
 800f9c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f9c4 <rcutils_system_time_now>:
 800f9c4:	b310      	cbz	r0, 800fa0c <rcutils_system_time_now+0x48>
 800f9c6:	b570      	push	{r4, r5, r6, lr}
 800f9c8:	b084      	sub	sp, #16
 800f9ca:	4669      	mov	r1, sp
 800f9cc:	4604      	mov	r4, r0
 800f9ce:	2001      	movs	r0, #1
 800f9d0:	f7f3 ff02 	bl	80037d8 <clock_gettime>
 800f9d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f9d8:	2800      	cmp	r0, #0
 800f9da:	f171 0300 	sbcs.w	r3, r1, #0
 800f9de:	db12      	blt.n	800fa06 <rcutils_system_time_now+0x42>
 800f9e0:	9d02      	ldr	r5, [sp, #8]
 800f9e2:	2d00      	cmp	r5, #0
 800f9e4:	db0c      	blt.n	800fa00 <rcutils_system_time_now+0x3c>
 800f9e6:	4e0a      	ldr	r6, [pc, #40]	; (800fa10 <rcutils_system_time_now+0x4c>)
 800f9e8:	fba0 2306 	umull	r2, r3, r0, r6
 800f9ec:	1952      	adds	r2, r2, r5
 800f9ee:	fb06 3301 	mla	r3, r6, r1, r3
 800f9f2:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800f9f6:	2000      	movs	r0, #0
 800f9f8:	e9c4 2300 	strd	r2, r3, [r4]
 800f9fc:	b004      	add	sp, #16
 800f9fe:	bd70      	pop	{r4, r5, r6, pc}
 800fa00:	ea50 0301 	orrs.w	r3, r0, r1
 800fa04:	d1ef      	bne.n	800f9e6 <rcutils_system_time_now+0x22>
 800fa06:	2002      	movs	r0, #2
 800fa08:	b004      	add	sp, #16
 800fa0a:	bd70      	pop	{r4, r5, r6, pc}
 800fa0c:	200b      	movs	r0, #11
 800fa0e:	4770      	bx	lr
 800fa10:	3b9aca00 	.word	0x3b9aca00

0800fa14 <rcutils_steady_time_now>:
 800fa14:	b310      	cbz	r0, 800fa5c <rcutils_steady_time_now+0x48>
 800fa16:	b570      	push	{r4, r5, r6, lr}
 800fa18:	b084      	sub	sp, #16
 800fa1a:	4669      	mov	r1, sp
 800fa1c:	4604      	mov	r4, r0
 800fa1e:	2000      	movs	r0, #0
 800fa20:	f7f3 feda 	bl	80037d8 <clock_gettime>
 800fa24:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa28:	2800      	cmp	r0, #0
 800fa2a:	f171 0300 	sbcs.w	r3, r1, #0
 800fa2e:	db12      	blt.n	800fa56 <rcutils_steady_time_now+0x42>
 800fa30:	9d02      	ldr	r5, [sp, #8]
 800fa32:	2d00      	cmp	r5, #0
 800fa34:	db0c      	blt.n	800fa50 <rcutils_steady_time_now+0x3c>
 800fa36:	4e0a      	ldr	r6, [pc, #40]	; (800fa60 <rcutils_steady_time_now+0x4c>)
 800fa38:	fba0 2306 	umull	r2, r3, r0, r6
 800fa3c:	1952      	adds	r2, r2, r5
 800fa3e:	fb06 3301 	mla	r3, r6, r1, r3
 800fa42:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800fa46:	2000      	movs	r0, #0
 800fa48:	e9c4 2300 	strd	r2, r3, [r4]
 800fa4c:	b004      	add	sp, #16
 800fa4e:	bd70      	pop	{r4, r5, r6, pc}
 800fa50:	ea50 0301 	orrs.w	r3, r0, r1
 800fa54:	d1ef      	bne.n	800fa36 <rcutils_steady_time_now+0x22>
 800fa56:	2002      	movs	r0, #2
 800fa58:	b004      	add	sp, #16
 800fa5a:	bd70      	pop	{r4, r5, r6, pc}
 800fa5c:	200b      	movs	r0, #11
 800fa5e:	4770      	bx	lr
 800fa60:	3b9aca00 	.word	0x3b9aca00

0800fa64 <rmw_get_default_publisher_options>:
 800fa64:	2000      	movs	r0, #0
 800fa66:	4770      	bx	lr

0800fa68 <rmw_get_default_subscription_options>:
 800fa68:	2200      	movs	r2, #0
 800fa6a:	6002      	str	r2, [r0, #0]
 800fa6c:	7102      	strb	r2, [r0, #4]
 800fa6e:	4770      	bx	lr

0800fa70 <rmw_get_zero_initialized_message_info>:
 800fa70:	b470      	push	{r4, r5, r6}
 800fa72:	4d07      	ldr	r5, [pc, #28]	; (800fa90 <rmw_get_zero_initialized_message_info+0x20>)
 800fa74:	4606      	mov	r6, r0
 800fa76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa78:	4634      	mov	r4, r6
 800fa7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa80:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800fa84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800fa88:	4630      	mov	r0, r6
 800fa8a:	bc70      	pop	{r4, r5, r6}
 800fa8c:	4770      	bx	lr
 800fa8e:	bf00      	nop
 800fa90:	0801b740 	.word	0x0801b740

0800fa94 <rmw_validate_full_topic_name>:
 800fa94:	2800      	cmp	r0, #0
 800fa96:	d062      	beq.n	800fb5e <rmw_validate_full_topic_name+0xca>
 800fa98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa9c:	460d      	mov	r5, r1
 800fa9e:	2900      	cmp	r1, #0
 800faa0:	d05f      	beq.n	800fb62 <rmw_validate_full_topic_name+0xce>
 800faa2:	4616      	mov	r6, r2
 800faa4:	4604      	mov	r4, r0
 800faa6:	f7f0 fba5 	bl	80001f4 <strlen>
 800faaa:	b148      	cbz	r0, 800fac0 <rmw_validate_full_topic_name+0x2c>
 800faac:	7823      	ldrb	r3, [r4, #0]
 800faae:	2b2f      	cmp	r3, #47	; 0x2f
 800fab0:	d00d      	beq.n	800face <rmw_validate_full_topic_name+0x3a>
 800fab2:	2302      	movs	r3, #2
 800fab4:	602b      	str	r3, [r5, #0]
 800fab6:	b13e      	cbz	r6, 800fac8 <rmw_validate_full_topic_name+0x34>
 800fab8:	2000      	movs	r0, #0
 800faba:	6030      	str	r0, [r6, #0]
 800fabc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fac0:	2301      	movs	r3, #1
 800fac2:	602b      	str	r3, [r5, #0]
 800fac4:	2e00      	cmp	r6, #0
 800fac6:	d1f7      	bne.n	800fab8 <rmw_validate_full_topic_name+0x24>
 800fac8:	2000      	movs	r0, #0
 800faca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800face:	1e47      	subs	r7, r0, #1
 800fad0:	5de3      	ldrb	r3, [r4, r7]
 800fad2:	2b2f      	cmp	r3, #47	; 0x2f
 800fad4:	d047      	beq.n	800fb66 <rmw_validate_full_topic_name+0xd2>
 800fad6:	1e63      	subs	r3, r4, #1
 800fad8:	eb03 0900 	add.w	r9, r3, r0
 800fadc:	f1c4 0e01 	rsb	lr, r4, #1
 800fae0:	eb0e 0803 	add.w	r8, lr, r3
 800fae4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800fae8:	f021 0220 	bic.w	r2, r1, #32
 800faec:	3a41      	subs	r2, #65	; 0x41
 800faee:	2a19      	cmp	r2, #25
 800faf0:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 800faf4:	d90c      	bls.n	800fb10 <rmw_validate_full_topic_name+0x7c>
 800faf6:	295f      	cmp	r1, #95	; 0x5f
 800faf8:	d00a      	beq.n	800fb10 <rmw_validate_full_topic_name+0x7c>
 800fafa:	f1bc 0f0a 	cmp.w	ip, #10
 800fafe:	d907      	bls.n	800fb10 <rmw_validate_full_topic_name+0x7c>
 800fb00:	2304      	movs	r3, #4
 800fb02:	602b      	str	r3, [r5, #0]
 800fb04:	2e00      	cmp	r6, #0
 800fb06:	d0df      	beq.n	800fac8 <rmw_validate_full_topic_name+0x34>
 800fb08:	f8c6 8000 	str.w	r8, [r6]
 800fb0c:	2000      	movs	r0, #0
 800fb0e:	e7d5      	b.n	800fabc <rmw_validate_full_topic_name+0x28>
 800fb10:	454b      	cmp	r3, r9
 800fb12:	d1e5      	bne.n	800fae0 <rmw_validate_full_topic_name+0x4c>
 800fb14:	f8df e084 	ldr.w	lr, [pc, #132]	; 800fb9c <rmw_validate_full_topic_name+0x108>
 800fb18:	2300      	movs	r3, #0
 800fb1a:	f107 0801 	add.w	r8, r7, #1
 800fb1e:	e005      	b.n	800fb2c <rmw_validate_full_topic_name+0x98>
 800fb20:	4611      	mov	r1, r2
 800fb22:	4288      	cmp	r0, r1
 800fb24:	4613      	mov	r3, r2
 800fb26:	f104 0401 	add.w	r4, r4, #1
 800fb2a:	d925      	bls.n	800fb78 <rmw_validate_full_topic_name+0xe4>
 800fb2c:	429f      	cmp	r7, r3
 800fb2e:	f103 0201 	add.w	r2, r3, #1
 800fb32:	d01e      	beq.n	800fb72 <rmw_validate_full_topic_name+0xde>
 800fb34:	7821      	ldrb	r1, [r4, #0]
 800fb36:	292f      	cmp	r1, #47	; 0x2f
 800fb38:	d1f2      	bne.n	800fb20 <rmw_validate_full_topic_name+0x8c>
 800fb3a:	f894 c001 	ldrb.w	ip, [r4, #1]
 800fb3e:	1c5a      	adds	r2, r3, #1
 800fb40:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800fb44:	4611      	mov	r1, r2
 800fb46:	d024      	beq.n	800fb92 <rmw_validate_full_topic_name+0xfe>
 800fb48:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800fb4c:	075b      	lsls	r3, r3, #29
 800fb4e:	d5e8      	bpl.n	800fb22 <rmw_validate_full_topic_name+0x8e>
 800fb50:	2306      	movs	r3, #6
 800fb52:	602b      	str	r3, [r5, #0]
 800fb54:	2e00      	cmp	r6, #0
 800fb56:	d0b7      	beq.n	800fac8 <rmw_validate_full_topic_name+0x34>
 800fb58:	6032      	str	r2, [r6, #0]
 800fb5a:	2000      	movs	r0, #0
 800fb5c:	e7ae      	b.n	800fabc <rmw_validate_full_topic_name+0x28>
 800fb5e:	200b      	movs	r0, #11
 800fb60:	4770      	bx	lr
 800fb62:	200b      	movs	r0, #11
 800fb64:	e7aa      	b.n	800fabc <rmw_validate_full_topic_name+0x28>
 800fb66:	2303      	movs	r3, #3
 800fb68:	602b      	str	r3, [r5, #0]
 800fb6a:	2e00      	cmp	r6, #0
 800fb6c:	d0ac      	beq.n	800fac8 <rmw_validate_full_topic_name+0x34>
 800fb6e:	6037      	str	r7, [r6, #0]
 800fb70:	e7aa      	b.n	800fac8 <rmw_validate_full_topic_name+0x34>
 800fb72:	4641      	mov	r1, r8
 800fb74:	1c7a      	adds	r2, r7, #1
 800fb76:	e7d4      	b.n	800fb22 <rmw_validate_full_topic_name+0x8e>
 800fb78:	28f7      	cmp	r0, #247	; 0xf7
 800fb7a:	d802      	bhi.n	800fb82 <rmw_validate_full_topic_name+0xee>
 800fb7c:	2000      	movs	r0, #0
 800fb7e:	6028      	str	r0, [r5, #0]
 800fb80:	e79c      	b.n	800fabc <rmw_validate_full_topic_name+0x28>
 800fb82:	2307      	movs	r3, #7
 800fb84:	602b      	str	r3, [r5, #0]
 800fb86:	2e00      	cmp	r6, #0
 800fb88:	d09e      	beq.n	800fac8 <rmw_validate_full_topic_name+0x34>
 800fb8a:	23f6      	movs	r3, #246	; 0xf6
 800fb8c:	6033      	str	r3, [r6, #0]
 800fb8e:	2000      	movs	r0, #0
 800fb90:	e794      	b.n	800fabc <rmw_validate_full_topic_name+0x28>
 800fb92:	2305      	movs	r3, #5
 800fb94:	602b      	str	r3, [r5, #0]
 800fb96:	2e00      	cmp	r6, #0
 800fb98:	d1de      	bne.n	800fb58 <rmw_validate_full_topic_name+0xc4>
 800fb9a:	e795      	b.n	800fac8 <rmw_validate_full_topic_name+0x34>
 800fb9c:	0801c158 	.word	0x0801c158

0800fba0 <rmw_uros_set_custom_transport>:
 800fba0:	b470      	push	{r4, r5, r6}
 800fba2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800fba6:	b162      	cbz	r2, 800fbc2 <rmw_uros_set_custom_transport+0x22>
 800fba8:	b15b      	cbz	r3, 800fbc2 <rmw_uros_set_custom_transport+0x22>
 800fbaa:	b155      	cbz	r5, 800fbc2 <rmw_uros_set_custom_transport+0x22>
 800fbac:	b14e      	cbz	r6, 800fbc2 <rmw_uros_set_custom_transport+0x22>
 800fbae:	4c06      	ldr	r4, [pc, #24]	; (800fbc8 <rmw_uros_set_custom_transport+0x28>)
 800fbb0:	7020      	strb	r0, [r4, #0]
 800fbb2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800fbb6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800fbba:	6166      	str	r6, [r4, #20]
 800fbbc:	2000      	movs	r0, #0
 800fbbe:	bc70      	pop	{r4, r5, r6}
 800fbc0:	4770      	bx	lr
 800fbc2:	200b      	movs	r0, #11
 800fbc4:	bc70      	pop	{r4, r5, r6}
 800fbc6:	4770      	bx	lr
 800fbc8:	20009ec8 	.word	0x20009ec8

0800fbcc <flush_session>:
 800fbcc:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800fbce:	f002 bf03 	b.w	80129d8 <uxr_run_session_until_confirm_delivery>
 800fbd2:	bf00      	nop

0800fbd4 <rmw_publish>:
 800fbd4:	2800      	cmp	r0, #0
 800fbd6:	d053      	beq.n	800fc80 <rmw_publish+0xac>
 800fbd8:	b570      	push	{r4, r5, r6, lr}
 800fbda:	460d      	mov	r5, r1
 800fbdc:	b08e      	sub	sp, #56	; 0x38
 800fbde:	2900      	cmp	r1, #0
 800fbe0:	d04b      	beq.n	800fc7a <rmw_publish+0xa6>
 800fbe2:	4604      	mov	r4, r0
 800fbe4:	6800      	ldr	r0, [r0, #0]
 800fbe6:	f000 fe33 	bl	8010850 <is_uxrce_rmw_identifier_valid>
 800fbea:	2800      	cmp	r0, #0
 800fbec:	d045      	beq.n	800fc7a <rmw_publish+0xa6>
 800fbee:	6866      	ldr	r6, [r4, #4]
 800fbf0:	2e00      	cmp	r6, #0
 800fbf2:	d042      	beq.n	800fc7a <rmw_publish+0xa6>
 800fbf4:	69b4      	ldr	r4, [r6, #24]
 800fbf6:	4628      	mov	r0, r5
 800fbf8:	6923      	ldr	r3, [r4, #16]
 800fbfa:	4798      	blx	r3
 800fbfc:	69f3      	ldr	r3, [r6, #28]
 800fbfe:	9005      	str	r0, [sp, #20]
 800fc00:	b113      	cbz	r3, 800fc08 <rmw_publish+0x34>
 800fc02:	a805      	add	r0, sp, #20
 800fc04:	4798      	blx	r3
 800fc06:	9805      	ldr	r0, [sp, #20]
 800fc08:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800fc0c:	691b      	ldr	r3, [r3, #16]
 800fc0e:	9000      	str	r0, [sp, #0]
 800fc10:	6972      	ldr	r2, [r6, #20]
 800fc12:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800fc14:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800fc18:	ab06      	add	r3, sp, #24
 800fc1a:	f003 fce5 	bl	80135e8 <uxr_prepare_output_stream>
 800fc1e:	b1d8      	cbz	r0, 800fc58 <rmw_publish+0x84>
 800fc20:	68a3      	ldr	r3, [r4, #8]
 800fc22:	4628      	mov	r0, r5
 800fc24:	a906      	add	r1, sp, #24
 800fc26:	4798      	blx	r3
 800fc28:	6a33      	ldr	r3, [r6, #32]
 800fc2a:	4604      	mov	r4, r0
 800fc2c:	b10b      	cbz	r3, 800fc32 <rmw_publish+0x5e>
 800fc2e:	a806      	add	r0, sp, #24
 800fc30:	4798      	blx	r3
 800fc32:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800fc36:	2b01      	cmp	r3, #1
 800fc38:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800fc3c:	d022      	beq.n	800fc84 <rmw_publish+0xb0>
 800fc3e:	6918      	ldr	r0, [r3, #16]
 800fc40:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800fc42:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fc46:	f002 fec7 	bl	80129d8 <uxr_run_session_until_confirm_delivery>
 800fc4a:	4020      	ands	r0, r4
 800fc4c:	b2c4      	uxtb	r4, r0
 800fc4e:	f084 0001 	eor.w	r0, r4, #1
 800fc52:	b2c0      	uxtb	r0, r0
 800fc54:	b00e      	add	sp, #56	; 0x38
 800fc56:	bd70      	pop	{r4, r5, r6, pc}
 800fc58:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800fc5c:	4a0c      	ldr	r2, [pc, #48]	; (800fc90 <rmw_publish+0xbc>)
 800fc5e:	6918      	ldr	r0, [r3, #16]
 800fc60:	9b05      	ldr	r3, [sp, #20]
 800fc62:	9300      	str	r3, [sp, #0]
 800fc64:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800fc68:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fc6c:	6972      	ldr	r2, [r6, #20]
 800fc6e:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800fc70:	ab06      	add	r3, sp, #24
 800fc72:	f003 fce9 	bl	8013648 <uxr_prepare_output_stream_fragmented>
 800fc76:	2800      	cmp	r0, #0
 800fc78:	d1d2      	bne.n	800fc20 <rmw_publish+0x4c>
 800fc7a:	2001      	movs	r0, #1
 800fc7c:	b00e      	add	sp, #56	; 0x38
 800fc7e:	bd70      	pop	{r4, r5, r6, pc}
 800fc80:	2001      	movs	r0, #1
 800fc82:	4770      	bx	lr
 800fc84:	6918      	ldr	r0, [r3, #16]
 800fc86:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fc8a:	f002 fae9 	bl	8012260 <uxr_flash_output_streams>
 800fc8e:	e7de      	b.n	800fc4e <rmw_publish+0x7a>
 800fc90:	0800fbcd 	.word	0x0800fbcd

0800fc94 <rmw_create_publisher>:
 800fc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc98:	b087      	sub	sp, #28
 800fc9a:	2800      	cmp	r0, #0
 800fc9c:	f000 80cc 	beq.w	800fe38 <rmw_create_publisher+0x1a4>
 800fca0:	460e      	mov	r6, r1
 800fca2:	2900      	cmp	r1, #0
 800fca4:	f000 80c8 	beq.w	800fe38 <rmw_create_publisher+0x1a4>
 800fca8:	4604      	mov	r4, r0
 800fcaa:	6800      	ldr	r0, [r0, #0]
 800fcac:	4615      	mov	r5, r2
 800fcae:	4698      	mov	r8, r3
 800fcb0:	f000 fdce 	bl	8010850 <is_uxrce_rmw_identifier_valid>
 800fcb4:	2800      	cmp	r0, #0
 800fcb6:	f000 80bf 	beq.w	800fe38 <rmw_create_publisher+0x1a4>
 800fcba:	2d00      	cmp	r5, #0
 800fcbc:	f000 80bc 	beq.w	800fe38 <rmw_create_publisher+0x1a4>
 800fcc0:	782b      	ldrb	r3, [r5, #0]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	f000 80b8 	beq.w	800fe38 <rmw_create_publisher+0x1a4>
 800fcc8:	f1b8 0f00 	cmp.w	r8, #0
 800fccc:	f000 80b4 	beq.w	800fe38 <rmw_create_publisher+0x1a4>
 800fcd0:	485c      	ldr	r0, [pc, #368]	; (800fe44 <rmw_create_publisher+0x1b0>)
 800fcd2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800fcd6:	f007 f953 	bl	8016f80 <get_memory>
 800fcda:	2800      	cmp	r0, #0
 800fcdc:	f000 80ac 	beq.w	800fe38 <rmw_create_publisher+0x1a4>
 800fce0:	68c4      	ldr	r4, [r0, #12]
 800fce2:	2300      	movs	r3, #0
 800fce4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800fce8:	f007 f9b2 	bl	8017050 <rmw_get_implementation_identifier>
 800fcec:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 800fcf0:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800fcf4:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800fcf8:	4628      	mov	r0, r5
 800fcfa:	f7f0 fa7b 	bl	80001f4 <strlen>
 800fcfe:	3001      	adds	r0, #1
 800fd00:	283c      	cmp	r0, #60	; 0x3c
 800fd02:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800fd06:	f200 8094 	bhi.w	800fe32 <rmw_create_publisher+0x19e>
 800fd0a:	4a4f      	ldr	r2, [pc, #316]	; (800fe48 <rmw_create_publisher+0x1b4>)
 800fd0c:	462b      	mov	r3, r5
 800fd0e:	213c      	movs	r1, #60	; 0x3c
 800fd10:	4650      	mov	r0, sl
 800fd12:	f00a fa59 	bl	801a1c8 <sniprintf>
 800fd16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fd1a:	e9c4 391f 	strd	r3, r9, [r4, #124]	; 0x7c
 800fd1e:	4641      	mov	r1, r8
 800fd20:	2250      	movs	r2, #80	; 0x50
 800fd22:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800fd26:	f00a fcce 	bl	801a6c6 <memcpy>
 800fd2a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800fd2e:	4947      	ldr	r1, [pc, #284]	; (800fe4c <rmw_create_publisher+0x1b8>)
 800fd30:	2b02      	cmp	r3, #2
 800fd32:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fd36:	bf0c      	ite	eq
 800fd38:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800fd3c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800fd40:	67a3      	str	r3, [r4, #120]	; 0x78
 800fd42:	2300      	movs	r3, #0
 800fd44:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800fd48:	4630      	mov	r0, r6
 800fd4a:	f000 fd8f 	bl	801086c <get_message_typesupport_handle>
 800fd4e:	2800      	cmp	r0, #0
 800fd50:	d06f      	beq.n	800fe32 <rmw_create_publisher+0x19e>
 800fd52:	6842      	ldr	r2, [r0, #4]
 800fd54:	61a2      	str	r2, [r4, #24]
 800fd56:	2a00      	cmp	r2, #0
 800fd58:	d06b      	beq.n	800fe32 <rmw_create_publisher+0x19e>
 800fd5a:	4629      	mov	r1, r5
 800fd5c:	4643      	mov	r3, r8
 800fd5e:	4648      	mov	r0, r9
 800fd60:	f007 fbc0 	bl	80174e4 <create_topic>
 800fd64:	6260      	str	r0, [r4, #36]	; 0x24
 800fd66:	2800      	cmp	r0, #0
 800fd68:	d063      	beq.n	800fe32 <rmw_create_publisher+0x19e>
 800fd6a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800fd6e:	f241 5398 	movw	r3, #5528	; 0x1598
 800fd72:	2103      	movs	r1, #3
 800fd74:	5ad0      	ldrh	r0, [r2, r3]
 800fd76:	1c45      	adds	r5, r0, #1
 800fd78:	52d5      	strh	r5, [r2, r3]
 800fd7a:	f001 ffff 	bl	8011d7c <uxr_object_id>
 800fd7e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fd82:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800fd86:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800fd8a:	6912      	ldr	r2, [r2, #16]
 800fd8c:	6120      	str	r0, [r4, #16]
 800fd8e:	f04f 0a06 	mov.w	sl, #6
 800fd92:	f8cd a000 	str.w	sl, [sp]
 800fd96:	6819      	ldr	r1, [r3, #0]
 800fd98:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800fd9c:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 800fda0:	6922      	ldr	r2, [r4, #16]
 800fda2:	f001 fe9b 	bl	8011adc <uxr_buffer_create_publisher_bin>
 800fda6:	4602      	mov	r2, r0
 800fda8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fdac:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800fdb0:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800fdb4:	f000 fccc 	bl	8010750 <run_xrce_session>
 800fdb8:	b3b8      	cbz	r0, 800fe2a <rmw_create_publisher+0x196>
 800fdba:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800fdbe:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800fdc2:	f241 539a 	movw	r3, #5530	; 0x159a
 800fdc6:	2105      	movs	r1, #5
 800fdc8:	5ad0      	ldrh	r0, [r2, r3]
 800fdca:	1c45      	adds	r5, r0, #1
 800fdcc:	52d5      	strh	r5, [r2, r3]
 800fdce:	f001 ffd5 	bl	8011d7c <uxr_object_id>
 800fdd2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800fdd6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fdda:	6915      	ldr	r5, [r2, #16]
 800fddc:	6160      	str	r0, [r4, #20]
 800fdde:	ae04      	add	r6, sp, #16
 800fde0:	4641      	mov	r1, r8
 800fde2:	4630      	mov	r0, r6
 800fde4:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800fde8:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800fdec:	f000 fccc 	bl	8010788 <convert_qos_profile>
 800fdf0:	e896 0003 	ldmia.w	r6, {r0, r1}
 800fdf4:	f8cd a00c 	str.w	sl, [sp, #12]
 800fdf8:	9001      	str	r0, [sp, #4]
 800fdfa:	f8ad 1008 	strh.w	r1, [sp, #8]
 800fdfe:	f8db 3010 	ldr.w	r3, [fp, #16]
 800fe02:	9300      	str	r3, [sp, #0]
 800fe04:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
 800fe08:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800fe0c:	f8d8 1000 	ldr.w	r1, [r8]
 800fe10:	4628      	mov	r0, r5
 800fe12:	f001 fec1 	bl	8011b98 <uxr_buffer_create_datawriter_bin>
 800fe16:	4602      	mov	r2, r0
 800fe18:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fe1c:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800fe20:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800fe24:	f000 fc94 	bl	8010750 <run_xrce_session>
 800fe28:	b938      	cbnz	r0, 800fe3a <rmw_create_publisher+0x1a6>
 800fe2a:	4806      	ldr	r0, [pc, #24]	; (800fe44 <rmw_create_publisher+0x1b0>)
 800fe2c:	4621      	mov	r1, r4
 800fe2e:	f007 f8b7 	bl	8016fa0 <put_memory>
 800fe32:	4638      	mov	r0, r7
 800fe34:	f000 fb3a 	bl	80104ac <rmw_uxrce_fini_publisher_memory>
 800fe38:	2700      	movs	r7, #0
 800fe3a:	4638      	mov	r0, r7
 800fe3c:	b007      	add	sp, #28
 800fe3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe42:	bf00      	nop
 800fe44:	20009ef8 	.word	0x20009ef8
 800fe48:	0801b9c4 	.word	0x0801b9c4
 800fe4c:	0801b990 	.word	0x0801b990

0800fe50 <rmw_publisher_get_actual_qos>:
 800fe50:	2000      	movs	r0, #0
 800fe52:	4770      	bx	lr

0800fe54 <rmw_destroy_publisher>:
 800fe54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe56:	b128      	cbz	r0, 800fe64 <rmw_destroy_publisher+0x10>
 800fe58:	4604      	mov	r4, r0
 800fe5a:	6800      	ldr	r0, [r0, #0]
 800fe5c:	460d      	mov	r5, r1
 800fe5e:	f000 fcf7 	bl	8010850 <is_uxrce_rmw_identifier_valid>
 800fe62:	b910      	cbnz	r0, 800fe6a <rmw_destroy_publisher+0x16>
 800fe64:	2401      	movs	r4, #1
 800fe66:	4620      	mov	r0, r4
 800fe68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe6a:	6863      	ldr	r3, [r4, #4]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d0f9      	beq.n	800fe64 <rmw_destroy_publisher+0x10>
 800fe70:	2d00      	cmp	r5, #0
 800fe72:	d0f7      	beq.n	800fe64 <rmw_destroy_publisher+0x10>
 800fe74:	6828      	ldr	r0, [r5, #0]
 800fe76:	f000 fceb 	bl	8010850 <is_uxrce_rmw_identifier_valid>
 800fe7a:	2800      	cmp	r0, #0
 800fe7c:	d0f2      	beq.n	800fe64 <rmw_destroy_publisher+0x10>
 800fe7e:	686c      	ldr	r4, [r5, #4]
 800fe80:	2c00      	cmp	r4, #0
 800fe82:	d0ef      	beq.n	800fe64 <rmw_destroy_publisher+0x10>
 800fe84:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fe86:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800fe8a:	f007 fb8d 	bl	80175a8 <destroy_topic>
 800fe8e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800fe92:	6962      	ldr	r2, [r4, #20]
 800fe94:	6918      	ldr	r0, [r3, #16]
 800fe96:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800fe9a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fe9e:	6819      	ldr	r1, [r3, #0]
 800fea0:	f001 fd6a 	bl	8011978 <uxr_buffer_delete_entity>
 800fea4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800fea8:	6922      	ldr	r2, [r4, #16]
 800feaa:	4603      	mov	r3, r0
 800feac:	6908      	ldr	r0, [r1, #16]
 800feae:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800feb2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800feb6:	6809      	ldr	r1, [r1, #0]
 800feb8:	461c      	mov	r4, r3
 800feba:	f001 fd5d 	bl	8011978 <uxr_buffer_delete_entity>
 800febe:	4606      	mov	r6, r0
 800fec0:	6938      	ldr	r0, [r7, #16]
 800fec2:	4622      	mov	r2, r4
 800fec4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800fec8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800fecc:	f000 fc40 	bl	8010750 <run_xrce_session>
 800fed0:	4604      	mov	r4, r0
 800fed2:	6938      	ldr	r0, [r7, #16]
 800fed4:	4632      	mov	r2, r6
 800fed6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800feda:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800fede:	f000 fc37 	bl	8010750 <run_xrce_session>
 800fee2:	b12c      	cbz	r4, 800fef0 <rmw_destroy_publisher+0x9c>
 800fee4:	b120      	cbz	r0, 800fef0 <rmw_destroy_publisher+0x9c>
 800fee6:	2400      	movs	r4, #0
 800fee8:	4628      	mov	r0, r5
 800feea:	f000 fadf 	bl	80104ac <rmw_uxrce_fini_publisher_memory>
 800feee:	e7ba      	b.n	800fe66 <rmw_destroy_publisher+0x12>
 800fef0:	2402      	movs	r4, #2
 800fef2:	e7f9      	b.n	800fee8 <rmw_destroy_publisher+0x94>

0800fef4 <rmw_create_subscription>:
 800fef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fef8:	b08d      	sub	sp, #52	; 0x34
 800fefa:	2800      	cmp	r0, #0
 800fefc:	f000 80cf 	beq.w	801009e <rmw_create_subscription+0x1aa>
 800ff00:	460e      	mov	r6, r1
 800ff02:	2900      	cmp	r1, #0
 800ff04:	f000 80cb 	beq.w	801009e <rmw_create_subscription+0x1aa>
 800ff08:	4604      	mov	r4, r0
 800ff0a:	6800      	ldr	r0, [r0, #0]
 800ff0c:	4615      	mov	r5, r2
 800ff0e:	4698      	mov	r8, r3
 800ff10:	f000 fc9e 	bl	8010850 <is_uxrce_rmw_identifier_valid>
 800ff14:	2800      	cmp	r0, #0
 800ff16:	f000 80c2 	beq.w	801009e <rmw_create_subscription+0x1aa>
 800ff1a:	2d00      	cmp	r5, #0
 800ff1c:	f000 80bf 	beq.w	801009e <rmw_create_subscription+0x1aa>
 800ff20:	782b      	ldrb	r3, [r5, #0]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	f000 80bb 	beq.w	801009e <rmw_create_subscription+0x1aa>
 800ff28:	f1b8 0f00 	cmp.w	r8, #0
 800ff2c:	f000 80b7 	beq.w	801009e <rmw_create_subscription+0x1aa>
 800ff30:	485d      	ldr	r0, [pc, #372]	; (80100a8 <rmw_create_subscription+0x1b4>)
 800ff32:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ff36:	f007 f823 	bl	8016f80 <get_memory>
 800ff3a:	4604      	mov	r4, r0
 800ff3c:	2800      	cmp	r0, #0
 800ff3e:	f000 80af 	beq.w	80100a0 <rmw_create_subscription+0x1ac>
 800ff42:	68c7      	ldr	r7, [r0, #12]
 800ff44:	2300      	movs	r3, #0
 800ff46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ff4a:	f007 f881 	bl	8017050 <rmw_get_implementation_identifier>
 800ff4e:	f107 0a94 	add.w	sl, r7, #148	; 0x94
 800ff52:	67f8      	str	r0, [r7, #124]	; 0x7c
 800ff54:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 800ff58:	4628      	mov	r0, r5
 800ff5a:	f7f0 f94b 	bl	80001f4 <strlen>
 800ff5e:	3001      	adds	r0, #1
 800ff60:	283c      	cmp	r0, #60	; 0x3c
 800ff62:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 800ff66:	f200 8097 	bhi.w	8010098 <rmw_create_subscription+0x1a4>
 800ff6a:	4a50      	ldr	r2, [pc, #320]	; (80100ac <rmw_create_subscription+0x1b8>)
 800ff6c:	462b      	mov	r3, r5
 800ff6e:	213c      	movs	r1, #60	; 0x3c
 800ff70:	4650      	mov	r0, sl
 800ff72:	f00a f929 	bl	801a1c8 <sniprintf>
 800ff76:	4641      	mov	r1, r8
 800ff78:	f8c7 9020 	str.w	r9, [r7, #32]
 800ff7c:	2250      	movs	r2, #80	; 0x50
 800ff7e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800ff82:	f00a fba0 	bl	801a6c6 <memcpy>
 800ff86:	494a      	ldr	r1, [pc, #296]	; (80100b0 <rmw_create_subscription+0x1bc>)
 800ff88:	4630      	mov	r0, r6
 800ff8a:	f000 fc6f 	bl	801086c <get_message_typesupport_handle>
 800ff8e:	2800      	cmp	r0, #0
 800ff90:	f000 8082 	beq.w	8010098 <rmw_create_subscription+0x1a4>
 800ff94:	6842      	ldr	r2, [r0, #4]
 800ff96:	61ba      	str	r2, [r7, #24]
 800ff98:	2a00      	cmp	r2, #0
 800ff9a:	d07d      	beq.n	8010098 <rmw_create_subscription+0x1a4>
 800ff9c:	4629      	mov	r1, r5
 800ff9e:	4643      	mov	r3, r8
 800ffa0:	4648      	mov	r0, r9
 800ffa2:	f007 fa9f 	bl	80174e4 <create_topic>
 800ffa6:	61f8      	str	r0, [r7, #28]
 800ffa8:	2800      	cmp	r0, #0
 800ffaa:	d075      	beq.n	8010098 <rmw_create_subscription+0x1a4>
 800ffac:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ffb0:	f241 539c 	movw	r3, #5532	; 0x159c
 800ffb4:	2104      	movs	r1, #4
 800ffb6:	5ad0      	ldrh	r0, [r2, r3]
 800ffb8:	1c45      	adds	r5, r0, #1
 800ffba:	52d5      	strh	r5, [r2, r3]
 800ffbc:	f001 fede 	bl	8011d7c <uxr_object_id>
 800ffc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ffc4:	6138      	str	r0, [r7, #16]
 800ffc6:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800ffca:	2606      	movs	r6, #6
 800ffcc:	9600      	str	r6, [sp, #0]
 800ffce:	6811      	ldr	r1, [r2, #0]
 800ffd0:	693a      	ldr	r2, [r7, #16]
 800ffd2:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800ffd6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ffda:	f001 fdad 	bl	8011b38 <uxr_buffer_create_subscriber_bin>
 800ffde:	4602      	mov	r2, r0
 800ffe0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ffe4:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800ffe8:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800ffec:	f000 fbb0 	bl	8010750 <run_xrce_session>
 800fff0:	2800      	cmp	r0, #0
 800fff2:	d04d      	beq.n	8010090 <rmw_create_subscription+0x19c>
 800fff4:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800fff8:	f241 539e 	movw	r3, #5534	; 0x159e
 800fffc:	4631      	mov	r1, r6
 800fffe:	5ad0      	ldrh	r0, [r2, r3]
 8010000:	1c45      	adds	r5, r0, #1
 8010002:	52d5      	strh	r5, [r2, r3]
 8010004:	f001 feba 	bl	8011d7c <uxr_object_id>
 8010008:	ad08      	add	r5, sp, #32
 801000a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801000e:	69fb      	ldr	r3, [r7, #28]
 8010010:	6178      	str	r0, [r7, #20]
 8010012:	4641      	mov	r1, r8
 8010014:	4628      	mov	r0, r5
 8010016:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 801001a:	9305      	str	r3, [sp, #20]
 801001c:	f000 fbb4 	bl	8010788 <convert_qos_profile>
 8010020:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010024:	9b05      	ldr	r3, [sp, #20]
 8010026:	9001      	str	r0, [sp, #4]
 8010028:	9603      	str	r6, [sp, #12]
 801002a:	f8ad 1008 	strh.w	r1, [sp, #8]
 801002e:	691b      	ldr	r3, [r3, #16]
 8010030:	9300      	str	r3, [sp, #0]
 8010032:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8010036:	f8db 1000 	ldr.w	r1, [fp]
 801003a:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 801003e:	f001 fe23 	bl	8011c88 <uxr_buffer_create_datareader_bin>
 8010042:	4602      	mov	r2, r0
 8010044:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010048:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801004c:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8010050:	f000 fb7e 	bl	8010750 <run_xrce_session>
 8010054:	b1e0      	cbz	r0, 8010090 <rmw_create_subscription+0x19c>
 8010056:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 801005a:	f898 3008 	ldrb.w	r3, [r8, #8]
 801005e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010062:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010066:	2200      	movs	r2, #0
 8010068:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 801006c:	2b02      	cmp	r3, #2
 801006e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8010072:	bf0c      	ite	eq
 8010074:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 8010078:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 801007c:	9307      	str	r3, [sp, #28]
 801007e:	aa0a      	add	r2, sp, #40	; 0x28
 8010080:	9200      	str	r2, [sp, #0]
 8010082:	697a      	ldr	r2, [r7, #20]
 8010084:	6809      	ldr	r1, [r1, #0]
 8010086:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801008a:	f001 fea5 	bl	8011dd8 <uxr_buffer_request_data>
 801008e:	e007      	b.n	80100a0 <rmw_create_subscription+0x1ac>
 8010090:	4805      	ldr	r0, [pc, #20]	; (80100a8 <rmw_create_subscription+0x1b4>)
 8010092:	4639      	mov	r1, r7
 8010094:	f006 ff84 	bl	8016fa0 <put_memory>
 8010098:	4620      	mov	r0, r4
 801009a:	f000 fa1d 	bl	80104d8 <rmw_uxrce_fini_subscription_memory>
 801009e:	2400      	movs	r4, #0
 80100a0:	4620      	mov	r0, r4
 80100a2:	b00d      	add	sp, #52	; 0x34
 80100a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100a8:	2000d154 	.word	0x2000d154
 80100ac:	0801b9c4 	.word	0x0801b9c4
 80100b0:	0801b990 	.word	0x0801b990

080100b4 <rmw_subscription_get_actual_qos>:
 80100b4:	2000      	movs	r0, #0
 80100b6:	4770      	bx	lr

080100b8 <rmw_destroy_subscription>:
 80100b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100ba:	b128      	cbz	r0, 80100c8 <rmw_destroy_subscription+0x10>
 80100bc:	4604      	mov	r4, r0
 80100be:	6800      	ldr	r0, [r0, #0]
 80100c0:	460d      	mov	r5, r1
 80100c2:	f000 fbc5 	bl	8010850 <is_uxrce_rmw_identifier_valid>
 80100c6:	b910      	cbnz	r0, 80100ce <rmw_destroy_subscription+0x16>
 80100c8:	2401      	movs	r4, #1
 80100ca:	4620      	mov	r0, r4
 80100cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100ce:	6863      	ldr	r3, [r4, #4]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d0f9      	beq.n	80100c8 <rmw_destroy_subscription+0x10>
 80100d4:	2d00      	cmp	r5, #0
 80100d6:	d0f7      	beq.n	80100c8 <rmw_destroy_subscription+0x10>
 80100d8:	6828      	ldr	r0, [r5, #0]
 80100da:	f000 fbb9 	bl	8010850 <is_uxrce_rmw_identifier_valid>
 80100de:	2800      	cmp	r0, #0
 80100e0:	d0f2      	beq.n	80100c8 <rmw_destroy_subscription+0x10>
 80100e2:	686c      	ldr	r4, [r5, #4]
 80100e4:	2c00      	cmp	r4, #0
 80100e6:	d0ef      	beq.n	80100c8 <rmw_destroy_subscription+0x10>
 80100e8:	6a26      	ldr	r6, [r4, #32]
 80100ea:	6962      	ldr	r2, [r4, #20]
 80100ec:	6930      	ldr	r0, [r6, #16]
 80100ee:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80100f2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80100f6:	6819      	ldr	r1, [r3, #0]
 80100f8:	f001 fea8 	bl	8011e4c <uxr_buffer_cancel_data>
 80100fc:	4602      	mov	r2, r0
 80100fe:	6930      	ldr	r0, [r6, #16]
 8010100:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010104:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010108:	f000 fb22 	bl	8010750 <run_xrce_session>
 801010c:	69e0      	ldr	r0, [r4, #28]
 801010e:	f007 fa4b 	bl	80175a8 <destroy_topic>
 8010112:	6a23      	ldr	r3, [r4, #32]
 8010114:	6962      	ldr	r2, [r4, #20]
 8010116:	6918      	ldr	r0, [r3, #16]
 8010118:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801011c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010120:	6819      	ldr	r1, [r3, #0]
 8010122:	f001 fc29 	bl	8011978 <uxr_buffer_delete_entity>
 8010126:	6a21      	ldr	r1, [r4, #32]
 8010128:	6922      	ldr	r2, [r4, #16]
 801012a:	4603      	mov	r3, r0
 801012c:	6908      	ldr	r0, [r1, #16]
 801012e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010132:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010136:	6809      	ldr	r1, [r1, #0]
 8010138:	461c      	mov	r4, r3
 801013a:	f001 fc1d 	bl	8011978 <uxr_buffer_delete_entity>
 801013e:	4607      	mov	r7, r0
 8010140:	6930      	ldr	r0, [r6, #16]
 8010142:	4622      	mov	r2, r4
 8010144:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010148:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801014c:	f000 fb00 	bl	8010750 <run_xrce_session>
 8010150:	4604      	mov	r4, r0
 8010152:	6930      	ldr	r0, [r6, #16]
 8010154:	463a      	mov	r2, r7
 8010156:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801015a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801015e:	f000 faf7 	bl	8010750 <run_xrce_session>
 8010162:	b12c      	cbz	r4, 8010170 <rmw_destroy_subscription+0xb8>
 8010164:	b120      	cbz	r0, 8010170 <rmw_destroy_subscription+0xb8>
 8010166:	2400      	movs	r4, #0
 8010168:	4628      	mov	r0, r5
 801016a:	f000 f9b5 	bl	80104d8 <rmw_uxrce_fini_subscription_memory>
 801016e:	e7ac      	b.n	80100ca <rmw_destroy_subscription+0x12>
 8010170:	2402      	movs	r4, #2
 8010172:	e7f9      	b.n	8010168 <rmw_destroy_subscription+0xb0>

08010174 <rmw_take_with_info>:
 8010174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010176:	4604      	mov	r4, r0
 8010178:	6800      	ldr	r0, [r0, #0]
 801017a:	b089      	sub	sp, #36	; 0x24
 801017c:	460f      	mov	r7, r1
 801017e:	4615      	mov	r5, r2
 8010180:	b128      	cbz	r0, 801018e <rmw_take_with_info+0x1a>
 8010182:	4b24      	ldr	r3, [pc, #144]	; (8010214 <rmw_take_with_info+0xa0>)
 8010184:	6819      	ldr	r1, [r3, #0]
 8010186:	f7f0 f82b 	bl	80001e0 <strcmp>
 801018a:	2800      	cmp	r0, #0
 801018c:	d13e      	bne.n	801020c <rmw_take_with_info+0x98>
 801018e:	b305      	cbz	r5, 80101d2 <rmw_take_with_info+0x5e>
 8010190:	6864      	ldr	r4, [r4, #4]
 8010192:	2300      	movs	r3, #0
 8010194:	702b      	strb	r3, [r5, #0]
 8010196:	f000 fa63 	bl	8010660 <rmw_uxrce_clean_expired_static_input_buffer>
 801019a:	4620      	mov	r0, r4
 801019c:	f000 fa36 	bl	801060c <rmw_uxrce_find_static_input_buffer_by_owner>
 80101a0:	4606      	mov	r6, r0
 80101a2:	b1f0      	cbz	r0, 80101e2 <rmw_take_with_info+0x6e>
 80101a4:	68c1      	ldr	r1, [r0, #12]
 80101a6:	4668      	mov	r0, sp
 80101a8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 80101ac:	3110      	adds	r1, #16
 80101ae:	f001 fb73 	bl	8011898 <ucdr_init_buffer>
 80101b2:	69a3      	ldr	r3, [r4, #24]
 80101b4:	4639      	mov	r1, r7
 80101b6:	68db      	ldr	r3, [r3, #12]
 80101b8:	4668      	mov	r0, sp
 80101ba:	4798      	blx	r3
 80101bc:	4631      	mov	r1, r6
 80101be:	4604      	mov	r4, r0
 80101c0:	4815      	ldr	r0, [pc, #84]	; (8010218 <rmw_take_with_info+0xa4>)
 80101c2:	f006 feed 	bl	8016fa0 <put_memory>
 80101c6:	702c      	strb	r4, [r5, #0]
 80101c8:	f084 0001 	eor.w	r0, r4, #1
 80101cc:	b2c0      	uxtb	r0, r0
 80101ce:	b009      	add	sp, #36	; 0x24
 80101d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101d2:	6864      	ldr	r4, [r4, #4]
 80101d4:	f000 fa44 	bl	8010660 <rmw_uxrce_clean_expired_static_input_buffer>
 80101d8:	4620      	mov	r0, r4
 80101da:	f000 fa17 	bl	801060c <rmw_uxrce_find_static_input_buffer_by_owner>
 80101de:	4605      	mov	r5, r0
 80101e0:	b910      	cbnz	r0, 80101e8 <rmw_take_with_info+0x74>
 80101e2:	2001      	movs	r0, #1
 80101e4:	b009      	add	sp, #36	; 0x24
 80101e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101e8:	68e9      	ldr	r1, [r5, #12]
 80101ea:	4668      	mov	r0, sp
 80101ec:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 80101f0:	3110      	adds	r1, #16
 80101f2:	f001 fb51 	bl	8011898 <ucdr_init_buffer>
 80101f6:	69a3      	ldr	r3, [r4, #24]
 80101f8:	4639      	mov	r1, r7
 80101fa:	68db      	ldr	r3, [r3, #12]
 80101fc:	4668      	mov	r0, sp
 80101fe:	4798      	blx	r3
 8010200:	4629      	mov	r1, r5
 8010202:	4604      	mov	r4, r0
 8010204:	4804      	ldr	r0, [pc, #16]	; (8010218 <rmw_take_with_info+0xa4>)
 8010206:	f006 fecb 	bl	8016fa0 <put_memory>
 801020a:	e7dd      	b.n	80101c8 <rmw_take_with_info+0x54>
 801020c:	200c      	movs	r0, #12
 801020e:	b009      	add	sp, #36	; 0x24
 8010210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010212:	bf00      	nop
 8010214:	0801becc 	.word	0x0801becc
 8010218:	20009ee8 	.word	0x20009ee8

0801021c <rmw_uxrce_init_service_memory>:
 801021c:	b1b2      	cbz	r2, 801024c <rmw_uxrce_init_service_memory+0x30>
 801021e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010220:	7a07      	ldrb	r7, [r0, #8]
 8010222:	4605      	mov	r5, r0
 8010224:	b98f      	cbnz	r7, 801024a <rmw_uxrce_init_service_memory+0x2e>
 8010226:	e9c0 7700 	strd	r7, r7, [r0]
 801022a:	460c      	mov	r4, r1
 801022c:	23c8      	movs	r3, #200	; 0xc8
 801022e:	2101      	movs	r1, #1
 8010230:	fb03 4602 	mla	r6, r3, r2, r4
 8010234:	60c3      	str	r3, [r0, #12]
 8010236:	7201      	strb	r1, [r0, #8]
 8010238:	4621      	mov	r1, r4
 801023a:	4628      	mov	r0, r5
 801023c:	f006 feb0 	bl	8016fa0 <put_memory>
 8010240:	60e4      	str	r4, [r4, #12]
 8010242:	f804 7bc8 	strb.w	r7, [r4], #200
 8010246:	42a6      	cmp	r6, r4
 8010248:	d1f6      	bne.n	8010238 <rmw_uxrce_init_service_memory+0x1c>
 801024a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801024c:	4770      	bx	lr
 801024e:	bf00      	nop

08010250 <rmw_uxrce_init_client_memory>:
 8010250:	b1b2      	cbz	r2, 8010280 <rmw_uxrce_init_client_memory+0x30>
 8010252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010254:	7a07      	ldrb	r7, [r0, #8]
 8010256:	4605      	mov	r5, r0
 8010258:	b98f      	cbnz	r7, 801027e <rmw_uxrce_init_client_memory+0x2e>
 801025a:	e9c0 7700 	strd	r7, r7, [r0]
 801025e:	460c      	mov	r4, r1
 8010260:	23c8      	movs	r3, #200	; 0xc8
 8010262:	2101      	movs	r1, #1
 8010264:	fb03 4602 	mla	r6, r3, r2, r4
 8010268:	60c3      	str	r3, [r0, #12]
 801026a:	7201      	strb	r1, [r0, #8]
 801026c:	4621      	mov	r1, r4
 801026e:	4628      	mov	r0, r5
 8010270:	f006 fe96 	bl	8016fa0 <put_memory>
 8010274:	60e4      	str	r4, [r4, #12]
 8010276:	f804 7bc8 	strb.w	r7, [r4], #200
 801027a:	42a6      	cmp	r6, r4
 801027c:	d1f6      	bne.n	801026c <rmw_uxrce_init_client_memory+0x1c>
 801027e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010280:	4770      	bx	lr
 8010282:	bf00      	nop

08010284 <rmw_uxrce_init_publisher_memory>:
 8010284:	b1b2      	cbz	r2, 80102b4 <rmw_uxrce_init_publisher_memory+0x30>
 8010286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010288:	7a07      	ldrb	r7, [r0, #8]
 801028a:	4605      	mov	r5, r0
 801028c:	b98f      	cbnz	r7, 80102b2 <rmw_uxrce_init_publisher_memory+0x2e>
 801028e:	e9c0 7700 	strd	r7, r7, [r0]
 8010292:	460c      	mov	r4, r1
 8010294:	23d8      	movs	r3, #216	; 0xd8
 8010296:	2101      	movs	r1, #1
 8010298:	fb03 4602 	mla	r6, r3, r2, r4
 801029c:	60c3      	str	r3, [r0, #12]
 801029e:	7201      	strb	r1, [r0, #8]
 80102a0:	4621      	mov	r1, r4
 80102a2:	4628      	mov	r0, r5
 80102a4:	f006 fe7c 	bl	8016fa0 <put_memory>
 80102a8:	60e4      	str	r4, [r4, #12]
 80102aa:	f804 7bd8 	strb.w	r7, [r4], #216
 80102ae:	42a6      	cmp	r6, r4
 80102b0:	d1f6      	bne.n	80102a0 <rmw_uxrce_init_publisher_memory+0x1c>
 80102b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102b4:	4770      	bx	lr
 80102b6:	bf00      	nop

080102b8 <rmw_uxrce_init_subscription_memory>:
 80102b8:	b1b2      	cbz	r2, 80102e8 <rmw_uxrce_init_subscription_memory+0x30>
 80102ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102bc:	7a07      	ldrb	r7, [r0, #8]
 80102be:	4605      	mov	r5, r0
 80102c0:	b98f      	cbnz	r7, 80102e6 <rmw_uxrce_init_subscription_memory+0x2e>
 80102c2:	e9c0 7700 	strd	r7, r7, [r0]
 80102c6:	460c      	mov	r4, r1
 80102c8:	23d0      	movs	r3, #208	; 0xd0
 80102ca:	2101      	movs	r1, #1
 80102cc:	fb03 4602 	mla	r6, r3, r2, r4
 80102d0:	60c3      	str	r3, [r0, #12]
 80102d2:	7201      	strb	r1, [r0, #8]
 80102d4:	4621      	mov	r1, r4
 80102d6:	4628      	mov	r0, r5
 80102d8:	f006 fe62 	bl	8016fa0 <put_memory>
 80102dc:	60e4      	str	r4, [r4, #12]
 80102de:	f804 7bd0 	strb.w	r7, [r4], #208
 80102e2:	42a6      	cmp	r6, r4
 80102e4:	d1f6      	bne.n	80102d4 <rmw_uxrce_init_subscription_memory+0x1c>
 80102e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102e8:	4770      	bx	lr
 80102ea:	bf00      	nop

080102ec <rmw_uxrce_init_node_memory>:
 80102ec:	b1b2      	cbz	r2, 801031c <rmw_uxrce_init_node_memory+0x30>
 80102ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102f0:	7a07      	ldrb	r7, [r0, #8]
 80102f2:	4605      	mov	r5, r0
 80102f4:	b98f      	cbnz	r7, 801031a <rmw_uxrce_init_node_memory+0x2e>
 80102f6:	e9c0 7700 	strd	r7, r7, [r0]
 80102fa:	460c      	mov	r4, r1
 80102fc:	23a4      	movs	r3, #164	; 0xa4
 80102fe:	2101      	movs	r1, #1
 8010300:	fb03 4602 	mla	r6, r3, r2, r4
 8010304:	60c3      	str	r3, [r0, #12]
 8010306:	7201      	strb	r1, [r0, #8]
 8010308:	4621      	mov	r1, r4
 801030a:	4628      	mov	r0, r5
 801030c:	f006 fe48 	bl	8016fa0 <put_memory>
 8010310:	60e4      	str	r4, [r4, #12]
 8010312:	f804 7ba4 	strb.w	r7, [r4], #164
 8010316:	42a6      	cmp	r6, r4
 8010318:	d1f6      	bne.n	8010308 <rmw_uxrce_init_node_memory+0x1c>
 801031a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801031c:	4770      	bx	lr
 801031e:	bf00      	nop

08010320 <rmw_uxrce_init_session_memory>:
 8010320:	b1d2      	cbz	r2, 8010358 <rmw_uxrce_init_session_memory+0x38>
 8010322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010326:	7a07      	ldrb	r7, [r0, #8]
 8010328:	4605      	mov	r5, r0
 801032a:	b99f      	cbnz	r7, 8010354 <rmw_uxrce_init_session_memory+0x34>
 801032c:	e9c0 7700 	strd	r7, r7, [r0]
 8010330:	f241 53a8 	movw	r3, #5544	; 0x15a8
 8010334:	460c      	mov	r4, r1
 8010336:	2101      	movs	r1, #1
 8010338:	fb03 4602 	mla	r6, r3, r2, r4
 801033c:	60c3      	str	r3, [r0, #12]
 801033e:	4698      	mov	r8, r3
 8010340:	7201      	strb	r1, [r0, #8]
 8010342:	4621      	mov	r1, r4
 8010344:	4628      	mov	r0, r5
 8010346:	f006 fe2b 	bl	8016fa0 <put_memory>
 801034a:	60e4      	str	r4, [r4, #12]
 801034c:	7027      	strb	r7, [r4, #0]
 801034e:	4444      	add	r4, r8
 8010350:	42a6      	cmp	r6, r4
 8010352:	d1f6      	bne.n	8010342 <rmw_uxrce_init_session_memory+0x22>
 8010354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010358:	4770      	bx	lr
 801035a:	bf00      	nop

0801035c <rmw_uxrce_init_topic_memory>:
 801035c:	b1c2      	cbz	r2, 8010390 <rmw_uxrce_init_topic_memory+0x34>
 801035e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010360:	7a07      	ldrb	r7, [r0, #8]
 8010362:	4606      	mov	r6, r0
 8010364:	b99f      	cbnz	r7, 801038e <rmw_uxrce_init_topic_memory+0x32>
 8010366:	e9c0 7700 	strd	r7, r7, [r0]
 801036a:	460c      	mov	r4, r1
 801036c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8010370:	2101      	movs	r1, #1
 8010372:	231c      	movs	r3, #28
 8010374:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010378:	7201      	strb	r1, [r0, #8]
 801037a:	60c3      	str	r3, [r0, #12]
 801037c:	4621      	mov	r1, r4
 801037e:	4630      	mov	r0, r6
 8010380:	f006 fe0e 	bl	8016fa0 <put_memory>
 8010384:	60e4      	str	r4, [r4, #12]
 8010386:	f804 7b1c 	strb.w	r7, [r4], #28
 801038a:	42a5      	cmp	r5, r4
 801038c:	d1f6      	bne.n	801037c <rmw_uxrce_init_topic_memory+0x20>
 801038e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010390:	4770      	bx	lr
 8010392:	bf00      	nop

08010394 <rmw_uxrce_init_static_input_buffer_memory>:
 8010394:	b1d2      	cbz	r2, 80103cc <rmw_uxrce_init_static_input_buffer_memory+0x38>
 8010396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010398:	7a07      	ldrb	r7, [r0, #8]
 801039a:	4606      	mov	r6, r0
 801039c:	b9af      	cbnz	r7, 80103ca <rmw_uxrce_init_static_input_buffer_memory+0x36>
 801039e:	e9c0 7700 	strd	r7, r7, [r0]
 80103a2:	460c      	mov	r4, r1
 80103a4:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 80103a8:	2101      	movs	r1, #1
 80103aa:	f44f 6304 	mov.w	r3, #2112	; 0x840
 80103ae:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 80103b2:	7201      	strb	r1, [r0, #8]
 80103b4:	60c3      	str	r3, [r0, #12]
 80103b6:	4621      	mov	r1, r4
 80103b8:	4630      	mov	r0, r6
 80103ba:	f006 fdf1 	bl	8016fa0 <put_memory>
 80103be:	60e4      	str	r4, [r4, #12]
 80103c0:	7027      	strb	r7, [r4, #0]
 80103c2:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 80103c6:	42a5      	cmp	r5, r4
 80103c8:	d1f5      	bne.n	80103b6 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 80103ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103cc:	4770      	bx	lr
 80103ce:	bf00      	nop

080103d0 <rmw_uxrce_init_init_options_impl_memory>:
 80103d0:	b1b2      	cbz	r2, 8010400 <rmw_uxrce_init_init_options_impl_memory+0x30>
 80103d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103d4:	7a07      	ldrb	r7, [r0, #8]
 80103d6:	4605      	mov	r5, r0
 80103d8:	b98f      	cbnz	r7, 80103fe <rmw_uxrce_init_init_options_impl_memory+0x2e>
 80103da:	e9c0 7700 	strd	r7, r7, [r0]
 80103de:	460c      	mov	r4, r1
 80103e0:	232c      	movs	r3, #44	; 0x2c
 80103e2:	2101      	movs	r1, #1
 80103e4:	fb03 4602 	mla	r6, r3, r2, r4
 80103e8:	60c3      	str	r3, [r0, #12]
 80103ea:	7201      	strb	r1, [r0, #8]
 80103ec:	4621      	mov	r1, r4
 80103ee:	4628      	mov	r0, r5
 80103f0:	f006 fdd6 	bl	8016fa0 <put_memory>
 80103f4:	60e4      	str	r4, [r4, #12]
 80103f6:	f804 7b2c 	strb.w	r7, [r4], #44
 80103fa:	42a6      	cmp	r6, r4
 80103fc:	d1f6      	bne.n	80103ec <rmw_uxrce_init_init_options_impl_memory+0x1c>
 80103fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010400:	4770      	bx	lr
 8010402:	bf00      	nop

08010404 <rmw_uxrce_init_wait_set_memory>:
 8010404:	b1c2      	cbz	r2, 8010438 <rmw_uxrce_init_wait_set_memory+0x34>
 8010406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010408:	7a07      	ldrb	r7, [r0, #8]
 801040a:	4606      	mov	r6, r0
 801040c:	b99f      	cbnz	r7, 8010436 <rmw_uxrce_init_wait_set_memory+0x32>
 801040e:	e9c0 7700 	strd	r7, r7, [r0]
 8010412:	460c      	mov	r4, r1
 8010414:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8010418:	2101      	movs	r1, #1
 801041a:	231c      	movs	r3, #28
 801041c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010420:	7201      	strb	r1, [r0, #8]
 8010422:	60c3      	str	r3, [r0, #12]
 8010424:	4621      	mov	r1, r4
 8010426:	4630      	mov	r0, r6
 8010428:	f006 fdba 	bl	8016fa0 <put_memory>
 801042c:	60e4      	str	r4, [r4, #12]
 801042e:	f804 7b1c 	strb.w	r7, [r4], #28
 8010432:	42a5      	cmp	r5, r4
 8010434:	d1f6      	bne.n	8010424 <rmw_uxrce_init_wait_set_memory+0x20>
 8010436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010438:	4770      	bx	lr
 801043a:	bf00      	nop

0801043c <rmw_uxrce_init_guard_condition_memory>:
 801043c:	b1b2      	cbz	r2, 801046c <rmw_uxrce_init_guard_condition_memory+0x30>
 801043e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010440:	7a07      	ldrb	r7, [r0, #8]
 8010442:	4605      	mov	r5, r0
 8010444:	b98f      	cbnz	r7, 801046a <rmw_uxrce_init_guard_condition_memory+0x2e>
 8010446:	e9c0 7700 	strd	r7, r7, [r0]
 801044a:	460c      	mov	r4, r1
 801044c:	2320      	movs	r3, #32
 801044e:	2101      	movs	r1, #1
 8010450:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 8010454:	7201      	strb	r1, [r0, #8]
 8010456:	60c3      	str	r3, [r0, #12]
 8010458:	4621      	mov	r1, r4
 801045a:	4628      	mov	r0, r5
 801045c:	f006 fda0 	bl	8016fa0 <put_memory>
 8010460:	60e4      	str	r4, [r4, #12]
 8010462:	f804 7b20 	strb.w	r7, [r4], #32
 8010466:	42a6      	cmp	r6, r4
 8010468:	d1f6      	bne.n	8010458 <rmw_uxrce_init_guard_condition_memory+0x1c>
 801046a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801046c:	4770      	bx	lr
 801046e:	bf00      	nop

08010470 <rmw_uxrce_fini_session_memory>:
 8010470:	4601      	mov	r1, r0
 8010472:	4801      	ldr	r0, [pc, #4]	; (8010478 <rmw_uxrce_fini_session_memory+0x8>)
 8010474:	f006 bd94 	b.w	8016fa0 <put_memory>
 8010478:	2000d090 	.word	0x2000d090

0801047c <rmw_uxrce_fini_node_memory>:
 801047c:	b538      	push	{r3, r4, r5, lr}
 801047e:	4604      	mov	r4, r0
 8010480:	6800      	ldr	r0, [r0, #0]
 8010482:	b128      	cbz	r0, 8010490 <rmw_uxrce_fini_node_memory+0x14>
 8010484:	4b07      	ldr	r3, [pc, #28]	; (80104a4 <rmw_uxrce_fini_node_memory+0x28>)
 8010486:	6819      	ldr	r1, [r3, #0]
 8010488:	f7ef feaa 	bl	80001e0 <strcmp>
 801048c:	b940      	cbnz	r0, 80104a0 <rmw_uxrce_fini_node_memory+0x24>
 801048e:	6020      	str	r0, [r4, #0]
 8010490:	6861      	ldr	r1, [r4, #4]
 8010492:	b129      	cbz	r1, 80104a0 <rmw_uxrce_fini_node_memory+0x24>
 8010494:	2500      	movs	r5, #0
 8010496:	4804      	ldr	r0, [pc, #16]	; (80104a8 <rmw_uxrce_fini_node_memory+0x2c>)
 8010498:	610d      	str	r5, [r1, #16]
 801049a:	f006 fd81 	bl	8016fa0 <put_memory>
 801049e:	6065      	str	r5, [r4, #4]
 80104a0:	bd38      	pop	{r3, r4, r5, pc}
 80104a2:	bf00      	nop
 80104a4:	0801becc 	.word	0x0801becc
 80104a8:	2000cebc 	.word	0x2000cebc

080104ac <rmw_uxrce_fini_publisher_memory>:
 80104ac:	b510      	push	{r4, lr}
 80104ae:	4604      	mov	r4, r0
 80104b0:	6800      	ldr	r0, [r0, #0]
 80104b2:	b128      	cbz	r0, 80104c0 <rmw_uxrce_fini_publisher_memory+0x14>
 80104b4:	4b06      	ldr	r3, [pc, #24]	; (80104d0 <rmw_uxrce_fini_publisher_memory+0x24>)
 80104b6:	6819      	ldr	r1, [r3, #0]
 80104b8:	f7ef fe92 	bl	80001e0 <strcmp>
 80104bc:	b938      	cbnz	r0, 80104ce <rmw_uxrce_fini_publisher_memory+0x22>
 80104be:	6020      	str	r0, [r4, #0]
 80104c0:	6861      	ldr	r1, [r4, #4]
 80104c2:	b121      	cbz	r1, 80104ce <rmw_uxrce_fini_publisher_memory+0x22>
 80104c4:	4803      	ldr	r0, [pc, #12]	; (80104d4 <rmw_uxrce_fini_publisher_memory+0x28>)
 80104c6:	f006 fd6b 	bl	8016fa0 <put_memory>
 80104ca:	2300      	movs	r3, #0
 80104cc:	6063      	str	r3, [r4, #4]
 80104ce:	bd10      	pop	{r4, pc}
 80104d0:	0801becc 	.word	0x0801becc
 80104d4:	20009ef8 	.word	0x20009ef8

080104d8 <rmw_uxrce_fini_subscription_memory>:
 80104d8:	b510      	push	{r4, lr}
 80104da:	4604      	mov	r4, r0
 80104dc:	6800      	ldr	r0, [r0, #0]
 80104de:	b128      	cbz	r0, 80104ec <rmw_uxrce_fini_subscription_memory+0x14>
 80104e0:	4b06      	ldr	r3, [pc, #24]	; (80104fc <rmw_uxrce_fini_subscription_memory+0x24>)
 80104e2:	6819      	ldr	r1, [r3, #0]
 80104e4:	f7ef fe7c 	bl	80001e0 <strcmp>
 80104e8:	b938      	cbnz	r0, 80104fa <rmw_uxrce_fini_subscription_memory+0x22>
 80104ea:	6020      	str	r0, [r4, #0]
 80104ec:	6861      	ldr	r1, [r4, #4]
 80104ee:	b121      	cbz	r1, 80104fa <rmw_uxrce_fini_subscription_memory+0x22>
 80104f0:	4803      	ldr	r0, [pc, #12]	; (8010500 <rmw_uxrce_fini_subscription_memory+0x28>)
 80104f2:	f006 fd55 	bl	8016fa0 <put_memory>
 80104f6:	2300      	movs	r3, #0
 80104f8:	6063      	str	r3, [r4, #4]
 80104fa:	bd10      	pop	{r4, pc}
 80104fc:	0801becc 	.word	0x0801becc
 8010500:	2000d154 	.word	0x2000d154

08010504 <rmw_uxrce_fini_service_memory>:
 8010504:	b510      	push	{r4, lr}
 8010506:	4604      	mov	r4, r0
 8010508:	6800      	ldr	r0, [r0, #0]
 801050a:	b128      	cbz	r0, 8010518 <rmw_uxrce_fini_service_memory+0x14>
 801050c:	4b06      	ldr	r3, [pc, #24]	; (8010528 <rmw_uxrce_fini_service_memory+0x24>)
 801050e:	6819      	ldr	r1, [r3, #0]
 8010510:	f7ef fe66 	bl	80001e0 <strcmp>
 8010514:	b938      	cbnz	r0, 8010526 <rmw_uxrce_fini_service_memory+0x22>
 8010516:	6020      	str	r0, [r4, #0]
 8010518:	6861      	ldr	r1, [r4, #4]
 801051a:	b121      	cbz	r1, 8010526 <rmw_uxrce_fini_service_memory+0x22>
 801051c:	4803      	ldr	r0, [pc, #12]	; (801052c <rmw_uxrce_fini_service_memory+0x28>)
 801051e:	f006 fd3f 	bl	8016fa0 <put_memory>
 8010522:	2300      	movs	r3, #0
 8010524:	6063      	str	r3, [r4, #4]
 8010526:	bd10      	pop	{r4, pc}
 8010528:	0801becc 	.word	0x0801becc
 801052c:	2000d144 	.word	0x2000d144

08010530 <rmw_uxrce_fini_client_memory>:
 8010530:	b510      	push	{r4, lr}
 8010532:	4604      	mov	r4, r0
 8010534:	6800      	ldr	r0, [r0, #0]
 8010536:	b128      	cbz	r0, 8010544 <rmw_uxrce_fini_client_memory+0x14>
 8010538:	4b06      	ldr	r3, [pc, #24]	; (8010554 <rmw_uxrce_fini_client_memory+0x24>)
 801053a:	6819      	ldr	r1, [r3, #0]
 801053c:	f7ef fe50 	bl	80001e0 <strcmp>
 8010540:	b938      	cbnz	r0, 8010552 <rmw_uxrce_fini_client_memory+0x22>
 8010542:	6020      	str	r0, [r4, #0]
 8010544:	6861      	ldr	r1, [r4, #4]
 8010546:	b121      	cbz	r1, 8010552 <rmw_uxrce_fini_client_memory+0x22>
 8010548:	4803      	ldr	r0, [pc, #12]	; (8010558 <rmw_uxrce_fini_client_memory+0x28>)
 801054a:	f006 fd29 	bl	8016fa0 <put_memory>
 801054e:	2300      	movs	r3, #0
 8010550:	6063      	str	r3, [r4, #4]
 8010552:	bd10      	pop	{r4, pc}
 8010554:	0801becc 	.word	0x0801becc
 8010558:	2000a778 	.word	0x2000a778

0801055c <rmw_uxrce_fini_topic_memory>:
 801055c:	b510      	push	{r4, lr}
 801055e:	4601      	mov	r1, r0
 8010560:	4604      	mov	r4, r0
 8010562:	4803      	ldr	r0, [pc, #12]	; (8010570 <rmw_uxrce_fini_topic_memory+0x14>)
 8010564:	f006 fd1c 	bl	8016fa0 <put_memory>
 8010568:	2300      	movs	r3, #0
 801056a:	61a3      	str	r3, [r4, #24]
 801056c:	bd10      	pop	{r4, pc}
 801056e:	bf00      	nop
 8010570:	2000d080 	.word	0x2000d080

08010574 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8010574:	b082      	sub	sp, #8
 8010576:	b4f0      	push	{r4, r5, r6, r7}
 8010578:	4923      	ldr	r1, [pc, #140]	; (8010608 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 801057a:	ac04      	add	r4, sp, #16
 801057c:	e884 000c 	stmia.w	r4, {r2, r3}
 8010580:	680d      	ldr	r5, [r1, #0]
 8010582:	9c05      	ldr	r4, [sp, #20]
 8010584:	2d00      	cmp	r5, #0
 8010586:	d03d      	beq.n	8010604 <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 8010588:	462b      	mov	r3, r5
 801058a:	2100      	movs	r1, #0
 801058c:	68da      	ldr	r2, [r3, #12]
 801058e:	689b      	ldr	r3, [r3, #8]
 8010590:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8010594:	4290      	cmp	r0, r2
 8010596:	bf08      	it	eq
 8010598:	3101      	addeq	r1, #1
 801059a:	2b00      	cmp	r3, #0
 801059c:	d1f6      	bne.n	801058c <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 801059e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80105a2:	2b02      	cmp	r3, #2
 80105a4:	d026      	beq.n	80105f4 <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 80105a6:	d906      	bls.n	80105b6 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 80105a8:	2b03      	cmp	r3, #3
 80105aa:	d004      	beq.n	80105b6 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 80105ac:	2100      	movs	r1, #0
 80105ae:	bcf0      	pop	{r4, r5, r6, r7}
 80105b0:	4608      	mov	r0, r1
 80105b2:	b002      	add	sp, #8
 80105b4:	4770      	bx	lr
 80105b6:	b304      	cbz	r4, 80105fa <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80105b8:	428c      	cmp	r4, r1
 80105ba:	d81e      	bhi.n	80105fa <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80105bc:	2d00      	cmp	r5, #0
 80105be:	d0f5      	beq.n	80105ac <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 80105c0:	2100      	movs	r1, #0
 80105c2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80105c6:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80105ca:	e002      	b.n	80105d2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 80105cc:	68ad      	ldr	r5, [r5, #8]
 80105ce:	2d00      	cmp	r5, #0
 80105d0:	d0ed      	beq.n	80105ae <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 80105d2:	68eb      	ldr	r3, [r5, #12]
 80105d4:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 80105d8:	4290      	cmp	r0, r2
 80105da:	d1f7      	bne.n	80105cc <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 80105dc:	f603 0318 	addw	r3, r3, #2072	; 0x818
 80105e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105e4:	42b2      	cmp	r2, r6
 80105e6:	eb73 0407 	sbcs.w	r4, r3, r7
 80105ea:	daef      	bge.n	80105cc <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 80105ec:	4616      	mov	r6, r2
 80105ee:	461f      	mov	r7, r3
 80105f0:	4629      	mov	r1, r5
 80105f2:	e7eb      	b.n	80105cc <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 80105f4:	b10c      	cbz	r4, 80105fa <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80105f6:	428c      	cmp	r4, r1
 80105f8:	d9d8      	bls.n	80105ac <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 80105fa:	bcf0      	pop	{r4, r5, r6, r7}
 80105fc:	4802      	ldr	r0, [pc, #8]	; (8010608 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 80105fe:	b002      	add	sp, #8
 8010600:	f006 bcbe 	b.w	8016f80 <get_memory>
 8010604:	4629      	mov	r1, r5
 8010606:	e7ca      	b.n	801059e <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8010608:	20009ee8 	.word	0x20009ee8

0801060c <rmw_uxrce_find_static_input_buffer_by_owner>:
 801060c:	4b12      	ldr	r3, [pc, #72]	; (8010658 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	b1fb      	cbz	r3, 8010652 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8010612:	b4f0      	push	{r4, r5, r6, r7}
 8010614:	f04f 0c00 	mov.w	ip, #0
 8010618:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801061c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8010620:	e001      	b.n	8010626 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 8010622:	689b      	ldr	r3, [r3, #8]
 8010624:	b193      	cbz	r3, 801064c <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 8010626:	68da      	ldr	r2, [r3, #12]
 8010628:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 801062c:	4288      	cmp	r0, r1
 801062e:	d1f8      	bne.n	8010622 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 8010630:	f602 0218 	addw	r2, r2, #2072	; 0x818
 8010634:	e9d2 6700 	ldrd	r6, r7, [r2]
 8010638:	42a6      	cmp	r6, r4
 801063a:	eb77 0205 	sbcs.w	r2, r7, r5
 801063e:	daf0      	bge.n	8010622 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 8010640:	469c      	mov	ip, r3
 8010642:	689b      	ldr	r3, [r3, #8]
 8010644:	4634      	mov	r4, r6
 8010646:	463d      	mov	r5, r7
 8010648:	2b00      	cmp	r3, #0
 801064a:	d1ec      	bne.n	8010626 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 801064c:	4660      	mov	r0, ip
 801064e:	bcf0      	pop	{r4, r5, r6, r7}
 8010650:	4770      	bx	lr
 8010652:	4618      	mov	r0, r3
 8010654:	4770      	bx	lr
 8010656:	bf00      	nop
 8010658:	20009ee8 	.word	0x20009ee8
 801065c:	00000000 	.word	0x00000000

08010660 <rmw_uxrce_clean_expired_static_input_buffer>:
 8010660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010664:	4e38      	ldr	r6, [pc, #224]	; (8010748 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 8010666:	f8d6 8000 	ldr.w	r8, [r6]
 801066a:	b083      	sub	sp, #12
 801066c:	f007 fbd2 	bl	8017e14 <rmw_uros_epoch_nanos>
 8010670:	f1b8 0f00 	cmp.w	r8, #0
 8010674:	d05f      	beq.n	8010736 <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 8010676:	46b1      	mov	r9, r6
 8010678:	f8d8 600c 	ldr.w	r6, [r8, #12]
 801067c:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 8010680:	2b04      	cmp	r3, #4
 8010682:	4682      	mov	sl, r0
 8010684:	468b      	mov	fp, r1
 8010686:	d02d      	beq.n	80106e4 <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 8010688:	2b05      	cmp	r3, #5
 801068a:	d041      	beq.n	8010710 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 801068c:	2b03      	cmp	r3, #3
 801068e:	d029      	beq.n	80106e4 <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 8010690:	2200      	movs	r2, #0
 8010692:	2300      	movs	r3, #0
 8010694:	e9cd 2300 	strd	r2, r3, [sp]
 8010698:	2001      	movs	r0, #1
 801069a:	2100      	movs	r1, #0
 801069c:	9b00      	ldr	r3, [sp, #0]
 801069e:	f606 0618 	addw	r6, r6, #2072	; 0x818
 80106a2:	e9d6 6700 	ldrd	r6, r7, [r6]
 80106a6:	18c2      	adds	r2, r0, r3
 80106a8:	9b01      	ldr	r3, [sp, #4]
 80106aa:	eb41 0303 	adc.w	r3, r1, r3
 80106ae:	1994      	adds	r4, r2, r6
 80106b0:	eb43 0507 	adc.w	r5, r3, r7
 80106b4:	4554      	cmp	r4, sl
 80106b6:	eb75 020b 	sbcs.w	r2, r5, fp
 80106ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80106be:	db03      	blt.n	80106c8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 80106c0:	45b2      	cmp	sl, r6
 80106c2:	eb7b 0207 	sbcs.w	r2, fp, r7
 80106c6:	da05      	bge.n	80106d4 <rmw_uxrce_clean_expired_static_input_buffer+0x74>
 80106c8:	4641      	mov	r1, r8
 80106ca:	4648      	mov	r0, r9
 80106cc:	9300      	str	r3, [sp, #0]
 80106ce:	f006 fc67 	bl	8016fa0 <put_memory>
 80106d2:	9b00      	ldr	r3, [sp, #0]
 80106d4:	b37b      	cbz	r3, 8010736 <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 80106d6:	4698      	mov	r8, r3
 80106d8:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80106dc:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 80106e0:	2b04      	cmp	r3, #4
 80106e2:	d1d1      	bne.n	8010688 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 80106e4:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 80106e8:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	; 0x40
 80106ec:	e9cd 2300 	strd	r2, r3, [sp]
 80106f0:	4313      	orrs	r3, r2
 80106f2:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 80106f6:	d015      	beq.n	8010724 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 80106f8:	9a01      	ldr	r2, [sp, #4]
 80106fa:	4b14      	ldr	r3, [pc, #80]	; (801074c <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 80106fc:	fb03 f702 	mul.w	r7, r3, r2
 8010700:	9a00      	ldr	r2, [sp, #0]
 8010702:	fba2 2303 	umull	r2, r3, r2, r3
 8010706:	e9cd 2300 	strd	r2, r3, [sp]
 801070a:	443b      	add	r3, r7
 801070c:	9301      	str	r3, [sp, #4]
 801070e:	e7c5      	b.n	801069c <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 8010710:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 8010714:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
 8010718:	e9cd 2300 	strd	r2, r3, [sp]
 801071c:	4313      	orrs	r3, r2
 801071e:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 8010722:	d1e9      	bne.n	80106f8 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 8010724:	ea50 0301 	orrs.w	r3, r0, r1
 8010728:	bf02      	ittt	eq
 801072a:	a305      	addeq	r3, pc, #20	; (adr r3, 8010740 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 801072c:	e9d3 2300 	ldrdeq	r2, r3, [r3]
 8010730:	e9cd 2300 	strdeq	r2, r3, [sp]
 8010734:	e7b2      	b.n	801069c <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 8010736:	b003      	add	sp, #12
 8010738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801073c:	f3af 8000 	nop.w
 8010740:	fc23ac00 	.word	0xfc23ac00
 8010744:	00000006 	.word	0x00000006
 8010748:	20009ee8 	.word	0x20009ee8
 801074c:	3b9aca00 	.word	0x3b9aca00

08010750 <run_xrce_session>:
 8010750:	b510      	push	{r4, lr}
 8010752:	788c      	ldrb	r4, [r1, #2]
 8010754:	b086      	sub	sp, #24
 8010756:	2c01      	cmp	r4, #1
 8010758:	f8ad 200e 	strh.w	r2, [sp, #14]
 801075c:	d00c      	beq.n	8010778 <run_xrce_session+0x28>
 801075e:	4619      	mov	r1, r3
 8010760:	2301      	movs	r3, #1
 8010762:	9300      	str	r3, [sp, #0]
 8010764:	f10d 020e 	add.w	r2, sp, #14
 8010768:	f10d 0317 	add.w	r3, sp, #23
 801076c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010770:	f002 f958 	bl	8012a24 <uxr_run_session_until_all_status>
 8010774:	b006      	add	sp, #24
 8010776:	bd10      	pop	{r4, pc}
 8010778:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801077c:	f001 fd70 	bl	8012260 <uxr_flash_output_streams>
 8010780:	4620      	mov	r0, r4
 8010782:	b006      	add	sp, #24
 8010784:	bd10      	pop	{r4, pc}
 8010786:	bf00      	nop

08010788 <convert_qos_profile>:
 8010788:	b430      	push	{r4, r5}
 801078a:	7a0d      	ldrb	r5, [r1, #8]
 801078c:	780c      	ldrb	r4, [r1, #0]
 801078e:	7a4a      	ldrb	r2, [r1, #9]
 8010790:	8889      	ldrh	r1, [r1, #4]
 8010792:	8081      	strh	r1, [r0, #4]
 8010794:	f1a5 0502 	sub.w	r5, r5, #2
 8010798:	f1a4 0402 	sub.w	r4, r4, #2
 801079c:	2a02      	cmp	r2, #2
 801079e:	fab5 f585 	clz	r5, r5
 80107a2:	fab4 f484 	clz	r4, r4
 80107a6:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80107aa:	ea4f 1454 	mov.w	r4, r4, lsr #5
 80107ae:	bf18      	it	ne
 80107b0:	2200      	movne	r2, #0
 80107b2:	7045      	strb	r5, [r0, #1]
 80107b4:	7084      	strb	r4, [r0, #2]
 80107b6:	7002      	strb	r2, [r0, #0]
 80107b8:	bc30      	pop	{r4, r5}
 80107ba:	4770      	bx	lr

080107bc <generate_type_name>:
 80107bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107be:	2300      	movs	r3, #0
 80107c0:	700b      	strb	r3, [r1, #0]
 80107c2:	6803      	ldr	r3, [r0, #0]
 80107c4:	b087      	sub	sp, #28
 80107c6:	4614      	mov	r4, r2
 80107c8:	b1d3      	cbz	r3, 8010800 <generate_type_name+0x44>
 80107ca:	4d0f      	ldr	r5, [pc, #60]	; (8010808 <generate_type_name+0x4c>)
 80107cc:	462f      	mov	r7, r5
 80107ce:	4a0f      	ldr	r2, [pc, #60]	; (801080c <generate_type_name+0x50>)
 80107d0:	4e0f      	ldr	r6, [pc, #60]	; (8010810 <generate_type_name+0x54>)
 80107d2:	6840      	ldr	r0, [r0, #4]
 80107d4:	9004      	str	r0, [sp, #16]
 80107d6:	e9cd 6201 	strd	r6, r2, [sp, #4]
 80107da:	4608      	mov	r0, r1
 80107dc:	9205      	str	r2, [sp, #20]
 80107de:	9503      	str	r5, [sp, #12]
 80107e0:	4a0c      	ldr	r2, [pc, #48]	; (8010814 <generate_type_name+0x58>)
 80107e2:	9700      	str	r7, [sp, #0]
 80107e4:	4621      	mov	r1, r4
 80107e6:	f009 fcef 	bl	801a1c8 <sniprintf>
 80107ea:	2800      	cmp	r0, #0
 80107ec:	db05      	blt.n	80107fa <generate_type_name+0x3e>
 80107ee:	4284      	cmp	r4, r0
 80107f0:	bfd4      	ite	le
 80107f2:	2000      	movle	r0, #0
 80107f4:	2001      	movgt	r0, #1
 80107f6:	b007      	add	sp, #28
 80107f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107fa:	2000      	movs	r0, #0
 80107fc:	b007      	add	sp, #28
 80107fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010800:	4b05      	ldr	r3, [pc, #20]	; (8010818 <generate_type_name+0x5c>)
 8010802:	4d01      	ldr	r5, [pc, #4]	; (8010808 <generate_type_name+0x4c>)
 8010804:	461f      	mov	r7, r3
 8010806:	e7e2      	b.n	80107ce <generate_type_name+0x12>
 8010808:	0801b9b4 	.word	0x0801b9b4
 801080c:	0801b9c8 	.word	0x0801b9c8
 8010810:	0801b9cc 	.word	0x0801b9cc
 8010814:	0801b9b8 	.word	0x0801b9b8
 8010818:	0801bca4 	.word	0x0801bca4

0801081c <generate_topic_name>:
 801081c:	b510      	push	{r4, lr}
 801081e:	b082      	sub	sp, #8
 8010820:	4b09      	ldr	r3, [pc, #36]	; (8010848 <generate_topic_name+0x2c>)
 8010822:	9000      	str	r0, [sp, #0]
 8010824:	4614      	mov	r4, r2
 8010826:	4608      	mov	r0, r1
 8010828:	4611      	mov	r1, r2
 801082a:	4a08      	ldr	r2, [pc, #32]	; (801084c <generate_topic_name+0x30>)
 801082c:	f009 fccc 	bl	801a1c8 <sniprintf>
 8010830:	2800      	cmp	r0, #0
 8010832:	db05      	blt.n	8010840 <generate_topic_name+0x24>
 8010834:	4284      	cmp	r4, r0
 8010836:	bfd4      	ite	le
 8010838:	2000      	movle	r0, #0
 801083a:	2001      	movgt	r0, #1
 801083c:	b002      	add	sp, #8
 801083e:	bd10      	pop	{r4, pc}
 8010840:	2000      	movs	r0, #0
 8010842:	b002      	add	sp, #8
 8010844:	bd10      	pop	{r4, pc}
 8010846:	bf00      	nop
 8010848:	0801b9d8 	.word	0x0801b9d8
 801084c:	0801b9d0 	.word	0x0801b9d0

08010850 <is_uxrce_rmw_identifier_valid>:
 8010850:	b510      	push	{r4, lr}
 8010852:	4604      	mov	r4, r0
 8010854:	b140      	cbz	r0, 8010868 <is_uxrce_rmw_identifier_valid+0x18>
 8010856:	f006 fbfb 	bl	8017050 <rmw_get_implementation_identifier>
 801085a:	4601      	mov	r1, r0
 801085c:	4620      	mov	r0, r4
 801085e:	f7ef fcbf 	bl	80001e0 <strcmp>
 8010862:	fab0 f080 	clz	r0, r0
 8010866:	0940      	lsrs	r0, r0, #5
 8010868:	bd10      	pop	{r4, pc}
 801086a:	bf00      	nop

0801086c <get_message_typesupport_handle>:
 801086c:	6883      	ldr	r3, [r0, #8]
 801086e:	4718      	bx	r3

08010870 <get_message_typesupport_handle_function>:
 8010870:	b510      	push	{r4, lr}
 8010872:	4604      	mov	r4, r0
 8010874:	6800      	ldr	r0, [r0, #0]
 8010876:	f7ef fcb3 	bl	80001e0 <strcmp>
 801087a:	2800      	cmp	r0, #0
 801087c:	bf0c      	ite	eq
 801087e:	4620      	moveq	r0, r4
 8010880:	2000      	movne	r0, #0
 8010882:	bd10      	pop	{r4, pc}

08010884 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8010884:	f000 b82a 	b.w	80108dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>

08010888 <_Int32__max_serialized_size>:
 8010888:	b508      	push	{r3, lr}
 801088a:	2104      	movs	r1, #4
 801088c:	2000      	movs	r0, #0
 801088e:	f001 f807 	bl	80118a0 <ucdr_alignment>
 8010892:	3004      	adds	r0, #4
 8010894:	bd08      	pop	{r3, pc}
 8010896:	bf00      	nop

08010898 <_Int32__cdr_deserialize>:
 8010898:	b109      	cbz	r1, 801089e <_Int32__cdr_deserialize+0x6>
 801089a:	f000 bf1b 	b.w	80116d4 <ucdr_deserialize_int32_t>
 801089e:	4608      	mov	r0, r1
 80108a0:	4770      	bx	lr
 80108a2:	bf00      	nop

080108a4 <get_serialized_size_std_msgs__msg__Int32>:
 80108a4:	b130      	cbz	r0, 80108b4 <get_serialized_size_std_msgs__msg__Int32+0x10>
 80108a6:	b508      	push	{r3, lr}
 80108a8:	4608      	mov	r0, r1
 80108aa:	2104      	movs	r1, #4
 80108ac:	f000 fff8 	bl	80118a0 <ucdr_alignment>
 80108b0:	3004      	adds	r0, #4
 80108b2:	bd08      	pop	{r3, pc}
 80108b4:	4770      	bx	lr
 80108b6:	bf00      	nop

080108b8 <_Int32__cdr_serialize>:
 80108b8:	460a      	mov	r2, r1
 80108ba:	b118      	cbz	r0, 80108c4 <_Int32__cdr_serialize+0xc>
 80108bc:	6801      	ldr	r1, [r0, #0]
 80108be:	4610      	mov	r0, r2
 80108c0:	f000 be70 	b.w	80115a4 <ucdr_serialize_int32_t>
 80108c4:	4770      	bx	lr
 80108c6:	bf00      	nop

080108c8 <_Int32__get_serialized_size>:
 80108c8:	b130      	cbz	r0, 80108d8 <_Int32__get_serialized_size+0x10>
 80108ca:	b508      	push	{r3, lr}
 80108cc:	2104      	movs	r1, #4
 80108ce:	2000      	movs	r0, #0
 80108d0:	f000 ffe6 	bl	80118a0 <ucdr_alignment>
 80108d4:	3004      	adds	r0, #4
 80108d6:	bd08      	pop	{r3, pc}
 80108d8:	4770      	bx	lr
 80108da:	bf00      	nop

080108dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80108dc:	4800      	ldr	r0, [pc, #0]	; (80108e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 80108de:	4770      	bx	lr
 80108e0:	20000068 	.word	0x20000068

080108e4 <ucdr_serialize_bool>:
 80108e4:	b538      	push	{r3, r4, r5, lr}
 80108e6:	460d      	mov	r5, r1
 80108e8:	2101      	movs	r1, #1
 80108ea:	4604      	mov	r4, r0
 80108ec:	f000 ff8e 	bl	801180c <ucdr_check_final_buffer_behavior>
 80108f0:	b148      	cbz	r0, 8010906 <ucdr_serialize_bool+0x22>
 80108f2:	68a3      	ldr	r3, [r4, #8]
 80108f4:	701d      	strb	r5, [r3, #0]
 80108f6:	68a2      	ldr	r2, [r4, #8]
 80108f8:	6923      	ldr	r3, [r4, #16]
 80108fa:	3201      	adds	r2, #1
 80108fc:	3301      	adds	r3, #1
 80108fe:	2101      	movs	r1, #1
 8010900:	60a2      	str	r2, [r4, #8]
 8010902:	6123      	str	r3, [r4, #16]
 8010904:	7561      	strb	r1, [r4, #21]
 8010906:	7da0      	ldrb	r0, [r4, #22]
 8010908:	f080 0001 	eor.w	r0, r0, #1
 801090c:	bd38      	pop	{r3, r4, r5, pc}
 801090e:	bf00      	nop

08010910 <ucdr_deserialize_bool>:
 8010910:	b538      	push	{r3, r4, r5, lr}
 8010912:	460d      	mov	r5, r1
 8010914:	2101      	movs	r1, #1
 8010916:	4604      	mov	r4, r0
 8010918:	f000 ff78 	bl	801180c <ucdr_check_final_buffer_behavior>
 801091c:	b168      	cbz	r0, 801093a <ucdr_deserialize_bool+0x2a>
 801091e:	68a2      	ldr	r2, [r4, #8]
 8010920:	6923      	ldr	r3, [r4, #16]
 8010922:	f812 1b01 	ldrb.w	r1, [r2], #1
 8010926:	3900      	subs	r1, #0
 8010928:	f103 0301 	add.w	r3, r3, #1
 801092c:	bf18      	it	ne
 801092e:	2101      	movne	r1, #1
 8010930:	2001      	movs	r0, #1
 8010932:	7029      	strb	r1, [r5, #0]
 8010934:	60a2      	str	r2, [r4, #8]
 8010936:	6123      	str	r3, [r4, #16]
 8010938:	7560      	strb	r0, [r4, #21]
 801093a:	7da0      	ldrb	r0, [r4, #22]
 801093c:	f080 0001 	eor.w	r0, r0, #1
 8010940:	bd38      	pop	{r3, r4, r5, pc}
 8010942:	bf00      	nop

08010944 <ucdr_serialize_uint8_t>:
 8010944:	b538      	push	{r3, r4, r5, lr}
 8010946:	460d      	mov	r5, r1
 8010948:	2101      	movs	r1, #1
 801094a:	4604      	mov	r4, r0
 801094c:	f000 ff5e 	bl	801180c <ucdr_check_final_buffer_behavior>
 8010950:	b148      	cbz	r0, 8010966 <ucdr_serialize_uint8_t+0x22>
 8010952:	68a3      	ldr	r3, [r4, #8]
 8010954:	701d      	strb	r5, [r3, #0]
 8010956:	68a2      	ldr	r2, [r4, #8]
 8010958:	6923      	ldr	r3, [r4, #16]
 801095a:	3201      	adds	r2, #1
 801095c:	3301      	adds	r3, #1
 801095e:	2101      	movs	r1, #1
 8010960:	60a2      	str	r2, [r4, #8]
 8010962:	6123      	str	r3, [r4, #16]
 8010964:	7561      	strb	r1, [r4, #21]
 8010966:	7da0      	ldrb	r0, [r4, #22]
 8010968:	f080 0001 	eor.w	r0, r0, #1
 801096c:	bd38      	pop	{r3, r4, r5, pc}
 801096e:	bf00      	nop

08010970 <ucdr_deserialize_uint8_t>:
 8010970:	b538      	push	{r3, r4, r5, lr}
 8010972:	460d      	mov	r5, r1
 8010974:	2101      	movs	r1, #1
 8010976:	4604      	mov	r4, r0
 8010978:	f000 ff48 	bl	801180c <ucdr_check_final_buffer_behavior>
 801097c:	b150      	cbz	r0, 8010994 <ucdr_deserialize_uint8_t+0x24>
 801097e:	68a3      	ldr	r3, [r4, #8]
 8010980:	781b      	ldrb	r3, [r3, #0]
 8010982:	702b      	strb	r3, [r5, #0]
 8010984:	68a2      	ldr	r2, [r4, #8]
 8010986:	6923      	ldr	r3, [r4, #16]
 8010988:	3201      	adds	r2, #1
 801098a:	3301      	adds	r3, #1
 801098c:	2101      	movs	r1, #1
 801098e:	60a2      	str	r2, [r4, #8]
 8010990:	6123      	str	r3, [r4, #16]
 8010992:	7561      	strb	r1, [r4, #21]
 8010994:	7da0      	ldrb	r0, [r4, #22]
 8010996:	f080 0001 	eor.w	r0, r0, #1
 801099a:	bd38      	pop	{r3, r4, r5, pc}

0801099c <ucdr_serialize_uint16_t>:
 801099c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109a0:	b082      	sub	sp, #8
 80109a2:	460b      	mov	r3, r1
 80109a4:	2102      	movs	r1, #2
 80109a6:	4604      	mov	r4, r0
 80109a8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80109ac:	f000 ff80 	bl	80118b0 <ucdr_buffer_alignment>
 80109b0:	4601      	mov	r1, r0
 80109b2:	4620      	mov	r0, r4
 80109b4:	7d67      	ldrb	r7, [r4, #21]
 80109b6:	f000 ffbf 	bl	8011938 <ucdr_advance_buffer>
 80109ba:	4620      	mov	r0, r4
 80109bc:	2102      	movs	r1, #2
 80109be:	f000 ff19 	bl	80117f4 <ucdr_check_buffer_available_for>
 80109c2:	bb78      	cbnz	r0, 8010a24 <ucdr_serialize_uint16_t+0x88>
 80109c4:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 80109c8:	42b5      	cmp	r5, r6
 80109ca:	d926      	bls.n	8010a1a <ucdr_serialize_uint16_t+0x7e>
 80109cc:	6922      	ldr	r2, [r4, #16]
 80109ce:	60a5      	str	r5, [r4, #8]
 80109d0:	1bad      	subs	r5, r5, r6
 80109d2:	442a      	add	r2, r5
 80109d4:	f1c5 0802 	rsb	r8, r5, #2
 80109d8:	6122      	str	r2, [r4, #16]
 80109da:	4641      	mov	r1, r8
 80109dc:	4620      	mov	r0, r4
 80109de:	f000 ff15 	bl	801180c <ucdr_check_final_buffer_behavior>
 80109e2:	2800      	cmp	r0, #0
 80109e4:	d03b      	beq.n	8010a5e <ucdr_serialize_uint16_t+0xc2>
 80109e6:	7d23      	ldrb	r3, [r4, #20]
 80109e8:	2b01      	cmp	r3, #1
 80109ea:	d04a      	beq.n	8010a82 <ucdr_serialize_uint16_t+0xe6>
 80109ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80109f0:	7033      	strb	r3, [r6, #0]
 80109f2:	2d00      	cmp	r5, #0
 80109f4:	d040      	beq.n	8010a78 <ucdr_serialize_uint16_t+0xdc>
 80109f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80109fa:	7073      	strb	r3, [r6, #1]
 80109fc:	6923      	ldr	r3, [r4, #16]
 80109fe:	68a2      	ldr	r2, [r4, #8]
 8010a00:	7da0      	ldrb	r0, [r4, #22]
 8010a02:	3302      	adds	r3, #2
 8010a04:	1b5b      	subs	r3, r3, r5
 8010a06:	4442      	add	r2, r8
 8010a08:	2102      	movs	r1, #2
 8010a0a:	f080 0001 	eor.w	r0, r0, #1
 8010a0e:	6123      	str	r3, [r4, #16]
 8010a10:	60a2      	str	r2, [r4, #8]
 8010a12:	7561      	strb	r1, [r4, #21]
 8010a14:	b002      	add	sp, #8
 8010a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a1a:	2102      	movs	r1, #2
 8010a1c:	4620      	mov	r0, r4
 8010a1e:	f000 fef5 	bl	801180c <ucdr_check_final_buffer_behavior>
 8010a22:	b190      	cbz	r0, 8010a4a <ucdr_serialize_uint16_t+0xae>
 8010a24:	7d23      	ldrb	r3, [r4, #20]
 8010a26:	2b01      	cmp	r3, #1
 8010a28:	68a3      	ldr	r3, [r4, #8]
 8010a2a:	d014      	beq.n	8010a56 <ucdr_serialize_uint16_t+0xba>
 8010a2c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010a30:	701a      	strb	r2, [r3, #0]
 8010a32:	68a3      	ldr	r3, [r4, #8]
 8010a34:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010a38:	705a      	strb	r2, [r3, #1]
 8010a3a:	68a2      	ldr	r2, [r4, #8]
 8010a3c:	6923      	ldr	r3, [r4, #16]
 8010a3e:	3202      	adds	r2, #2
 8010a40:	3302      	adds	r3, #2
 8010a42:	2102      	movs	r1, #2
 8010a44:	60a2      	str	r2, [r4, #8]
 8010a46:	6123      	str	r3, [r4, #16]
 8010a48:	7561      	strb	r1, [r4, #21]
 8010a4a:	7da0      	ldrb	r0, [r4, #22]
 8010a4c:	f080 0001 	eor.w	r0, r0, #1
 8010a50:	b002      	add	sp, #8
 8010a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a56:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010a5a:	801a      	strh	r2, [r3, #0]
 8010a5c:	e7ed      	b.n	8010a3a <ucdr_serialize_uint16_t+0x9e>
 8010a5e:	68a2      	ldr	r2, [r4, #8]
 8010a60:	6923      	ldr	r3, [r4, #16]
 8010a62:	7da0      	ldrb	r0, [r4, #22]
 8010a64:	7567      	strb	r7, [r4, #21]
 8010a66:	1b52      	subs	r2, r2, r5
 8010a68:	1b5b      	subs	r3, r3, r5
 8010a6a:	f080 0001 	eor.w	r0, r0, #1
 8010a6e:	60a2      	str	r2, [r4, #8]
 8010a70:	6123      	str	r3, [r4, #16]
 8010a72:	b002      	add	sp, #8
 8010a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a78:	68a3      	ldr	r3, [r4, #8]
 8010a7a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010a7e:	701a      	strb	r2, [r3, #0]
 8010a80:	e7bc      	b.n	80109fc <ucdr_serialize_uint16_t+0x60>
 8010a82:	4630      	mov	r0, r6
 8010a84:	f10d 0606 	add.w	r6, sp, #6
 8010a88:	4631      	mov	r1, r6
 8010a8a:	462a      	mov	r2, r5
 8010a8c:	f009 fe1b 	bl	801a6c6 <memcpy>
 8010a90:	68a0      	ldr	r0, [r4, #8]
 8010a92:	4642      	mov	r2, r8
 8010a94:	1971      	adds	r1, r6, r5
 8010a96:	f009 fe16 	bl	801a6c6 <memcpy>
 8010a9a:	e7af      	b.n	80109fc <ucdr_serialize_uint16_t+0x60>

08010a9c <ucdr_serialize_endian_uint16_t>:
 8010a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010aa0:	b083      	sub	sp, #12
 8010aa2:	460d      	mov	r5, r1
 8010aa4:	2102      	movs	r1, #2
 8010aa6:	4604      	mov	r4, r0
 8010aa8:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010aac:	f000 ff00 	bl	80118b0 <ucdr_buffer_alignment>
 8010ab0:	4601      	mov	r1, r0
 8010ab2:	4620      	mov	r0, r4
 8010ab4:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010ab8:	f000 ff3e 	bl	8011938 <ucdr_advance_buffer>
 8010abc:	4620      	mov	r0, r4
 8010abe:	2102      	movs	r1, #2
 8010ac0:	f000 fe98 	bl	80117f4 <ucdr_check_buffer_available_for>
 8010ac4:	bb70      	cbnz	r0, 8010b24 <ucdr_serialize_endian_uint16_t+0x88>
 8010ac6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010aca:	42be      	cmp	r6, r7
 8010acc:	d925      	bls.n	8010b1a <ucdr_serialize_endian_uint16_t+0x7e>
 8010ace:	6922      	ldr	r2, [r4, #16]
 8010ad0:	60a6      	str	r6, [r4, #8]
 8010ad2:	1bf6      	subs	r6, r6, r7
 8010ad4:	4432      	add	r2, r6
 8010ad6:	f1c6 0902 	rsb	r9, r6, #2
 8010ada:	6122      	str	r2, [r4, #16]
 8010adc:	4649      	mov	r1, r9
 8010ade:	4620      	mov	r0, r4
 8010ae0:	f000 fe94 	bl	801180c <ucdr_check_final_buffer_behavior>
 8010ae4:	2800      	cmp	r0, #0
 8010ae6:	d039      	beq.n	8010b5c <ucdr_serialize_endian_uint16_t+0xc0>
 8010ae8:	2d01      	cmp	r5, #1
 8010aea:	d04a      	beq.n	8010b82 <ucdr_serialize_endian_uint16_t+0xe6>
 8010aec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010af0:	703b      	strb	r3, [r7, #0]
 8010af2:	2e00      	cmp	r6, #0
 8010af4:	d040      	beq.n	8010b78 <ucdr_serialize_endian_uint16_t+0xdc>
 8010af6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010afa:	707b      	strb	r3, [r7, #1]
 8010afc:	6923      	ldr	r3, [r4, #16]
 8010afe:	68a2      	ldr	r2, [r4, #8]
 8010b00:	7da0      	ldrb	r0, [r4, #22]
 8010b02:	3302      	adds	r3, #2
 8010b04:	1b9b      	subs	r3, r3, r6
 8010b06:	444a      	add	r2, r9
 8010b08:	2102      	movs	r1, #2
 8010b0a:	f080 0001 	eor.w	r0, r0, #1
 8010b0e:	6123      	str	r3, [r4, #16]
 8010b10:	60a2      	str	r2, [r4, #8]
 8010b12:	7561      	strb	r1, [r4, #21]
 8010b14:	b003      	add	sp, #12
 8010b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b1a:	2102      	movs	r1, #2
 8010b1c:	4620      	mov	r0, r4
 8010b1e:	f000 fe75 	bl	801180c <ucdr_check_final_buffer_behavior>
 8010b22:	b188      	cbz	r0, 8010b48 <ucdr_serialize_endian_uint16_t+0xac>
 8010b24:	2d01      	cmp	r5, #1
 8010b26:	68a3      	ldr	r3, [r4, #8]
 8010b28:	d014      	beq.n	8010b54 <ucdr_serialize_endian_uint16_t+0xb8>
 8010b2a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010b2e:	701a      	strb	r2, [r3, #0]
 8010b30:	68a3      	ldr	r3, [r4, #8]
 8010b32:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010b36:	705a      	strb	r2, [r3, #1]
 8010b38:	68a2      	ldr	r2, [r4, #8]
 8010b3a:	6923      	ldr	r3, [r4, #16]
 8010b3c:	3202      	adds	r2, #2
 8010b3e:	3302      	adds	r3, #2
 8010b40:	2102      	movs	r1, #2
 8010b42:	60a2      	str	r2, [r4, #8]
 8010b44:	6123      	str	r3, [r4, #16]
 8010b46:	7561      	strb	r1, [r4, #21]
 8010b48:	7da0      	ldrb	r0, [r4, #22]
 8010b4a:	f080 0001 	eor.w	r0, r0, #1
 8010b4e:	b003      	add	sp, #12
 8010b50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b54:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010b58:	801a      	strh	r2, [r3, #0]
 8010b5a:	e7ed      	b.n	8010b38 <ucdr_serialize_endian_uint16_t+0x9c>
 8010b5c:	68a2      	ldr	r2, [r4, #8]
 8010b5e:	6923      	ldr	r3, [r4, #16]
 8010b60:	7da0      	ldrb	r0, [r4, #22]
 8010b62:	f884 8015 	strb.w	r8, [r4, #21]
 8010b66:	1b92      	subs	r2, r2, r6
 8010b68:	1b9b      	subs	r3, r3, r6
 8010b6a:	f080 0001 	eor.w	r0, r0, #1
 8010b6e:	60a2      	str	r2, [r4, #8]
 8010b70:	6123      	str	r3, [r4, #16]
 8010b72:	b003      	add	sp, #12
 8010b74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b78:	68a3      	ldr	r3, [r4, #8]
 8010b7a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010b7e:	701a      	strb	r2, [r3, #0]
 8010b80:	e7bc      	b.n	8010afc <ucdr_serialize_endian_uint16_t+0x60>
 8010b82:	f10d 0506 	add.w	r5, sp, #6
 8010b86:	4629      	mov	r1, r5
 8010b88:	4632      	mov	r2, r6
 8010b8a:	4638      	mov	r0, r7
 8010b8c:	f009 fd9b 	bl	801a6c6 <memcpy>
 8010b90:	68a0      	ldr	r0, [r4, #8]
 8010b92:	464a      	mov	r2, r9
 8010b94:	19a9      	adds	r1, r5, r6
 8010b96:	f009 fd96 	bl	801a6c6 <memcpy>
 8010b9a:	e7af      	b.n	8010afc <ucdr_serialize_endian_uint16_t+0x60>

08010b9c <ucdr_deserialize_uint16_t>:
 8010b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ba0:	460d      	mov	r5, r1
 8010ba2:	2102      	movs	r1, #2
 8010ba4:	4604      	mov	r4, r0
 8010ba6:	f000 fe83 	bl	80118b0 <ucdr_buffer_alignment>
 8010baa:	4601      	mov	r1, r0
 8010bac:	4620      	mov	r0, r4
 8010bae:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010bb2:	f000 fec1 	bl	8011938 <ucdr_advance_buffer>
 8010bb6:	4620      	mov	r0, r4
 8010bb8:	2102      	movs	r1, #2
 8010bba:	f000 fe1b 	bl	80117f4 <ucdr_check_buffer_available_for>
 8010bbe:	bb60      	cbnz	r0, 8010c1a <ucdr_deserialize_uint16_t+0x7e>
 8010bc0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010bc4:	42be      	cmp	r6, r7
 8010bc6:	d923      	bls.n	8010c10 <ucdr_deserialize_uint16_t+0x74>
 8010bc8:	6922      	ldr	r2, [r4, #16]
 8010bca:	60a6      	str	r6, [r4, #8]
 8010bcc:	1bf6      	subs	r6, r6, r7
 8010bce:	4432      	add	r2, r6
 8010bd0:	f1c6 0902 	rsb	r9, r6, #2
 8010bd4:	6122      	str	r2, [r4, #16]
 8010bd6:	4649      	mov	r1, r9
 8010bd8:	4620      	mov	r0, r4
 8010bda:	f000 fe17 	bl	801180c <ucdr_check_final_buffer_behavior>
 8010bde:	2800      	cmp	r0, #0
 8010be0:	d034      	beq.n	8010c4c <ucdr_deserialize_uint16_t+0xb0>
 8010be2:	7d23      	ldrb	r3, [r4, #20]
 8010be4:	2b01      	cmp	r3, #1
 8010be6:	d042      	beq.n	8010c6e <ucdr_deserialize_uint16_t+0xd2>
 8010be8:	787b      	ldrb	r3, [r7, #1]
 8010bea:	702b      	strb	r3, [r5, #0]
 8010bec:	2e00      	cmp	r6, #0
 8010bee:	d03a      	beq.n	8010c66 <ucdr_deserialize_uint16_t+0xca>
 8010bf0:	783b      	ldrb	r3, [r7, #0]
 8010bf2:	706b      	strb	r3, [r5, #1]
 8010bf4:	6923      	ldr	r3, [r4, #16]
 8010bf6:	68a2      	ldr	r2, [r4, #8]
 8010bf8:	7da0      	ldrb	r0, [r4, #22]
 8010bfa:	2102      	movs	r1, #2
 8010bfc:	3302      	adds	r3, #2
 8010bfe:	1b9b      	subs	r3, r3, r6
 8010c00:	444a      	add	r2, r9
 8010c02:	7561      	strb	r1, [r4, #21]
 8010c04:	6123      	str	r3, [r4, #16]
 8010c06:	60a2      	str	r2, [r4, #8]
 8010c08:	f080 0001 	eor.w	r0, r0, #1
 8010c0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c10:	2102      	movs	r1, #2
 8010c12:	4620      	mov	r0, r4
 8010c14:	f000 fdfa 	bl	801180c <ucdr_check_final_buffer_behavior>
 8010c18:	b180      	cbz	r0, 8010c3c <ucdr_deserialize_uint16_t+0xa0>
 8010c1a:	7d23      	ldrb	r3, [r4, #20]
 8010c1c:	2b01      	cmp	r3, #1
 8010c1e:	68a3      	ldr	r3, [r4, #8]
 8010c20:	d011      	beq.n	8010c46 <ucdr_deserialize_uint16_t+0xaa>
 8010c22:	785b      	ldrb	r3, [r3, #1]
 8010c24:	702b      	strb	r3, [r5, #0]
 8010c26:	68a3      	ldr	r3, [r4, #8]
 8010c28:	781b      	ldrb	r3, [r3, #0]
 8010c2a:	706b      	strb	r3, [r5, #1]
 8010c2c:	68a2      	ldr	r2, [r4, #8]
 8010c2e:	6923      	ldr	r3, [r4, #16]
 8010c30:	3202      	adds	r2, #2
 8010c32:	3302      	adds	r3, #2
 8010c34:	2102      	movs	r1, #2
 8010c36:	60a2      	str	r2, [r4, #8]
 8010c38:	6123      	str	r3, [r4, #16]
 8010c3a:	7561      	strb	r1, [r4, #21]
 8010c3c:	7da0      	ldrb	r0, [r4, #22]
 8010c3e:	f080 0001 	eor.w	r0, r0, #1
 8010c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c46:	881b      	ldrh	r3, [r3, #0]
 8010c48:	802b      	strh	r3, [r5, #0]
 8010c4a:	e7ef      	b.n	8010c2c <ucdr_deserialize_uint16_t+0x90>
 8010c4c:	68a2      	ldr	r2, [r4, #8]
 8010c4e:	6923      	ldr	r3, [r4, #16]
 8010c50:	7da0      	ldrb	r0, [r4, #22]
 8010c52:	f884 8015 	strb.w	r8, [r4, #21]
 8010c56:	1b92      	subs	r2, r2, r6
 8010c58:	1b9b      	subs	r3, r3, r6
 8010c5a:	60a2      	str	r2, [r4, #8]
 8010c5c:	6123      	str	r3, [r4, #16]
 8010c5e:	f080 0001 	eor.w	r0, r0, #1
 8010c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c66:	68a3      	ldr	r3, [r4, #8]
 8010c68:	781b      	ldrb	r3, [r3, #0]
 8010c6a:	706b      	strb	r3, [r5, #1]
 8010c6c:	e7c2      	b.n	8010bf4 <ucdr_deserialize_uint16_t+0x58>
 8010c6e:	4639      	mov	r1, r7
 8010c70:	4632      	mov	r2, r6
 8010c72:	4628      	mov	r0, r5
 8010c74:	f009 fd27 	bl	801a6c6 <memcpy>
 8010c78:	68a1      	ldr	r1, [r4, #8]
 8010c7a:	464a      	mov	r2, r9
 8010c7c:	19a8      	adds	r0, r5, r6
 8010c7e:	f009 fd22 	bl	801a6c6 <memcpy>
 8010c82:	e7b7      	b.n	8010bf4 <ucdr_deserialize_uint16_t+0x58>

08010c84 <ucdr_deserialize_endian_uint16_t>:
 8010c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c88:	460e      	mov	r6, r1
 8010c8a:	2102      	movs	r1, #2
 8010c8c:	4604      	mov	r4, r0
 8010c8e:	4615      	mov	r5, r2
 8010c90:	f000 fe0e 	bl	80118b0 <ucdr_buffer_alignment>
 8010c94:	4601      	mov	r1, r0
 8010c96:	4620      	mov	r0, r4
 8010c98:	f894 9015 	ldrb.w	r9, [r4, #21]
 8010c9c:	f000 fe4c 	bl	8011938 <ucdr_advance_buffer>
 8010ca0:	4620      	mov	r0, r4
 8010ca2:	2102      	movs	r1, #2
 8010ca4:	f000 fda6 	bl	80117f4 <ucdr_check_buffer_available_for>
 8010ca8:	bb70      	cbnz	r0, 8010d08 <ucdr_deserialize_endian_uint16_t+0x84>
 8010caa:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8010cae:	4547      	cmp	r7, r8
 8010cb0:	d925      	bls.n	8010cfe <ucdr_deserialize_endian_uint16_t+0x7a>
 8010cb2:	6922      	ldr	r2, [r4, #16]
 8010cb4:	60a7      	str	r7, [r4, #8]
 8010cb6:	eba7 0708 	sub.w	r7, r7, r8
 8010cba:	443a      	add	r2, r7
 8010cbc:	f1c7 0a02 	rsb	sl, r7, #2
 8010cc0:	6122      	str	r2, [r4, #16]
 8010cc2:	4651      	mov	r1, sl
 8010cc4:	4620      	mov	r0, r4
 8010cc6:	f000 fda1 	bl	801180c <ucdr_check_final_buffer_behavior>
 8010cca:	2800      	cmp	r0, #0
 8010ccc:	d034      	beq.n	8010d38 <ucdr_deserialize_endian_uint16_t+0xb4>
 8010cce:	2e01      	cmp	r6, #1
 8010cd0:	d043      	beq.n	8010d5a <ucdr_deserialize_endian_uint16_t+0xd6>
 8010cd2:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010cd6:	702b      	strb	r3, [r5, #0]
 8010cd8:	2f00      	cmp	r7, #0
 8010cda:	d03a      	beq.n	8010d52 <ucdr_deserialize_endian_uint16_t+0xce>
 8010cdc:	f898 3000 	ldrb.w	r3, [r8]
 8010ce0:	706b      	strb	r3, [r5, #1]
 8010ce2:	6923      	ldr	r3, [r4, #16]
 8010ce4:	68a2      	ldr	r2, [r4, #8]
 8010ce6:	7da0      	ldrb	r0, [r4, #22]
 8010ce8:	2102      	movs	r1, #2
 8010cea:	3302      	adds	r3, #2
 8010cec:	1bdb      	subs	r3, r3, r7
 8010cee:	4452      	add	r2, sl
 8010cf0:	7561      	strb	r1, [r4, #21]
 8010cf2:	6123      	str	r3, [r4, #16]
 8010cf4:	60a2      	str	r2, [r4, #8]
 8010cf6:	f080 0001 	eor.w	r0, r0, #1
 8010cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cfe:	2102      	movs	r1, #2
 8010d00:	4620      	mov	r0, r4
 8010d02:	f000 fd83 	bl	801180c <ucdr_check_final_buffer_behavior>
 8010d06:	b178      	cbz	r0, 8010d28 <ucdr_deserialize_endian_uint16_t+0xa4>
 8010d08:	2e01      	cmp	r6, #1
 8010d0a:	68a3      	ldr	r3, [r4, #8]
 8010d0c:	d011      	beq.n	8010d32 <ucdr_deserialize_endian_uint16_t+0xae>
 8010d0e:	785b      	ldrb	r3, [r3, #1]
 8010d10:	702b      	strb	r3, [r5, #0]
 8010d12:	68a3      	ldr	r3, [r4, #8]
 8010d14:	781b      	ldrb	r3, [r3, #0]
 8010d16:	706b      	strb	r3, [r5, #1]
 8010d18:	68a2      	ldr	r2, [r4, #8]
 8010d1a:	6923      	ldr	r3, [r4, #16]
 8010d1c:	3202      	adds	r2, #2
 8010d1e:	3302      	adds	r3, #2
 8010d20:	2102      	movs	r1, #2
 8010d22:	60a2      	str	r2, [r4, #8]
 8010d24:	6123      	str	r3, [r4, #16]
 8010d26:	7561      	strb	r1, [r4, #21]
 8010d28:	7da0      	ldrb	r0, [r4, #22]
 8010d2a:	f080 0001 	eor.w	r0, r0, #1
 8010d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d32:	881b      	ldrh	r3, [r3, #0]
 8010d34:	802b      	strh	r3, [r5, #0]
 8010d36:	e7ef      	b.n	8010d18 <ucdr_deserialize_endian_uint16_t+0x94>
 8010d38:	68a2      	ldr	r2, [r4, #8]
 8010d3a:	6923      	ldr	r3, [r4, #16]
 8010d3c:	7da0      	ldrb	r0, [r4, #22]
 8010d3e:	f884 9015 	strb.w	r9, [r4, #21]
 8010d42:	1bd2      	subs	r2, r2, r7
 8010d44:	1bdb      	subs	r3, r3, r7
 8010d46:	60a2      	str	r2, [r4, #8]
 8010d48:	6123      	str	r3, [r4, #16]
 8010d4a:	f080 0001 	eor.w	r0, r0, #1
 8010d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d52:	68a3      	ldr	r3, [r4, #8]
 8010d54:	781b      	ldrb	r3, [r3, #0]
 8010d56:	706b      	strb	r3, [r5, #1]
 8010d58:	e7c3      	b.n	8010ce2 <ucdr_deserialize_endian_uint16_t+0x5e>
 8010d5a:	4641      	mov	r1, r8
 8010d5c:	463a      	mov	r2, r7
 8010d5e:	4628      	mov	r0, r5
 8010d60:	f009 fcb1 	bl	801a6c6 <memcpy>
 8010d64:	68a1      	ldr	r1, [r4, #8]
 8010d66:	4652      	mov	r2, sl
 8010d68:	19e8      	adds	r0, r5, r7
 8010d6a:	f009 fcac 	bl	801a6c6 <memcpy>
 8010d6e:	e7b8      	b.n	8010ce2 <ucdr_deserialize_endian_uint16_t+0x5e>

08010d70 <ucdr_serialize_uint32_t>:
 8010d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d74:	b082      	sub	sp, #8
 8010d76:	4604      	mov	r4, r0
 8010d78:	9101      	str	r1, [sp, #4]
 8010d7a:	2104      	movs	r1, #4
 8010d7c:	f000 fd98 	bl	80118b0 <ucdr_buffer_alignment>
 8010d80:	4601      	mov	r1, r0
 8010d82:	4620      	mov	r0, r4
 8010d84:	7d67      	ldrb	r7, [r4, #21]
 8010d86:	f000 fdd7 	bl	8011938 <ucdr_advance_buffer>
 8010d8a:	4620      	mov	r0, r4
 8010d8c:	2104      	movs	r1, #4
 8010d8e:	f000 fd31 	bl	80117f4 <ucdr_check_buffer_available_for>
 8010d92:	2800      	cmp	r0, #0
 8010d94:	d139      	bne.n	8010e0a <ucdr_serialize_uint32_t+0x9a>
 8010d96:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 8010d9a:	42ae      	cmp	r6, r5
 8010d9c:	d930      	bls.n	8010e00 <ucdr_serialize_uint32_t+0x90>
 8010d9e:	6922      	ldr	r2, [r4, #16]
 8010da0:	60a6      	str	r6, [r4, #8]
 8010da2:	1b76      	subs	r6, r6, r5
 8010da4:	4432      	add	r2, r6
 8010da6:	f1c6 0804 	rsb	r8, r6, #4
 8010daa:	6122      	str	r2, [r4, #16]
 8010dac:	4641      	mov	r1, r8
 8010dae:	4620      	mov	r0, r4
 8010db0:	f000 fd2c 	bl	801180c <ucdr_check_final_buffer_behavior>
 8010db4:	2800      	cmp	r0, #0
 8010db6:	d04c      	beq.n	8010e52 <ucdr_serialize_uint32_t+0xe2>
 8010db8:	7d23      	ldrb	r3, [r4, #20]
 8010dba:	2b01      	cmp	r3, #1
 8010dbc:	d063      	beq.n	8010e86 <ucdr_serialize_uint32_t+0x116>
 8010dbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010dc2:	702b      	strb	r3, [r5, #0]
 8010dc4:	2e00      	cmp	r6, #0
 8010dc6:	d051      	beq.n	8010e6c <ucdr_serialize_uint32_t+0xfc>
 8010dc8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010dcc:	706b      	strb	r3, [r5, #1]
 8010dce:	2e01      	cmp	r6, #1
 8010dd0:	d050      	beq.n	8010e74 <ucdr_serialize_uint32_t+0x104>
 8010dd2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010dd6:	70ab      	strb	r3, [r5, #2]
 8010dd8:	2e02      	cmp	r6, #2
 8010dda:	d04f      	beq.n	8010e7c <ucdr_serialize_uint32_t+0x10c>
 8010ddc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010de0:	70eb      	strb	r3, [r5, #3]
 8010de2:	6923      	ldr	r3, [r4, #16]
 8010de4:	68a2      	ldr	r2, [r4, #8]
 8010de6:	7da0      	ldrb	r0, [r4, #22]
 8010de8:	3304      	adds	r3, #4
 8010dea:	1b9b      	subs	r3, r3, r6
 8010dec:	4442      	add	r2, r8
 8010dee:	2104      	movs	r1, #4
 8010df0:	f080 0001 	eor.w	r0, r0, #1
 8010df4:	6123      	str	r3, [r4, #16]
 8010df6:	60a2      	str	r2, [r4, #8]
 8010df8:	7561      	strb	r1, [r4, #21]
 8010dfa:	b002      	add	sp, #8
 8010dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e00:	2104      	movs	r1, #4
 8010e02:	4620      	mov	r0, r4
 8010e04:	f000 fd02 	bl	801180c <ucdr_check_final_buffer_behavior>
 8010e08:	b1d0      	cbz	r0, 8010e40 <ucdr_serialize_uint32_t+0xd0>
 8010e0a:	7d23      	ldrb	r3, [r4, #20]
 8010e0c:	2b01      	cmp	r3, #1
 8010e0e:	68a3      	ldr	r3, [r4, #8]
 8010e10:	d01c      	beq.n	8010e4c <ucdr_serialize_uint32_t+0xdc>
 8010e12:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010e16:	701a      	strb	r2, [r3, #0]
 8010e18:	68a3      	ldr	r3, [r4, #8]
 8010e1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010e1e:	705a      	strb	r2, [r3, #1]
 8010e20:	68a3      	ldr	r3, [r4, #8]
 8010e22:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010e26:	709a      	strb	r2, [r3, #2]
 8010e28:	68a3      	ldr	r3, [r4, #8]
 8010e2a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010e2e:	70da      	strb	r2, [r3, #3]
 8010e30:	68a2      	ldr	r2, [r4, #8]
 8010e32:	6923      	ldr	r3, [r4, #16]
 8010e34:	3204      	adds	r2, #4
 8010e36:	3304      	adds	r3, #4
 8010e38:	2104      	movs	r1, #4
 8010e3a:	60a2      	str	r2, [r4, #8]
 8010e3c:	6123      	str	r3, [r4, #16]
 8010e3e:	7561      	strb	r1, [r4, #21]
 8010e40:	7da0      	ldrb	r0, [r4, #22]
 8010e42:	f080 0001 	eor.w	r0, r0, #1
 8010e46:	b002      	add	sp, #8
 8010e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e4c:	9a01      	ldr	r2, [sp, #4]
 8010e4e:	601a      	str	r2, [r3, #0]
 8010e50:	e7ee      	b.n	8010e30 <ucdr_serialize_uint32_t+0xc0>
 8010e52:	68a2      	ldr	r2, [r4, #8]
 8010e54:	6923      	ldr	r3, [r4, #16]
 8010e56:	7da0      	ldrb	r0, [r4, #22]
 8010e58:	7567      	strb	r7, [r4, #21]
 8010e5a:	1b92      	subs	r2, r2, r6
 8010e5c:	1b9b      	subs	r3, r3, r6
 8010e5e:	f080 0001 	eor.w	r0, r0, #1
 8010e62:	60a2      	str	r2, [r4, #8]
 8010e64:	6123      	str	r3, [r4, #16]
 8010e66:	b002      	add	sp, #8
 8010e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e6c:	68a3      	ldr	r3, [r4, #8]
 8010e6e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010e72:	701a      	strb	r2, [r3, #0]
 8010e74:	68a3      	ldr	r3, [r4, #8]
 8010e76:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010e7a:	701a      	strb	r2, [r3, #0]
 8010e7c:	68a3      	ldr	r3, [r4, #8]
 8010e7e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010e82:	701a      	strb	r2, [r3, #0]
 8010e84:	e7ad      	b.n	8010de2 <ucdr_serialize_uint32_t+0x72>
 8010e86:	4628      	mov	r0, r5
 8010e88:	ad01      	add	r5, sp, #4
 8010e8a:	4629      	mov	r1, r5
 8010e8c:	4632      	mov	r2, r6
 8010e8e:	f009 fc1a 	bl	801a6c6 <memcpy>
 8010e92:	68a0      	ldr	r0, [r4, #8]
 8010e94:	4642      	mov	r2, r8
 8010e96:	19a9      	adds	r1, r5, r6
 8010e98:	f009 fc15 	bl	801a6c6 <memcpy>
 8010e9c:	e7a1      	b.n	8010de2 <ucdr_serialize_uint32_t+0x72>
 8010e9e:	bf00      	nop

08010ea0 <ucdr_serialize_endian_uint32_t>:
 8010ea0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ea4:	b083      	sub	sp, #12
 8010ea6:	460d      	mov	r5, r1
 8010ea8:	2104      	movs	r1, #4
 8010eaa:	4604      	mov	r4, r0
 8010eac:	9201      	str	r2, [sp, #4]
 8010eae:	f000 fcff 	bl	80118b0 <ucdr_buffer_alignment>
 8010eb2:	4601      	mov	r1, r0
 8010eb4:	4620      	mov	r0, r4
 8010eb6:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010eba:	f000 fd3d 	bl	8011938 <ucdr_advance_buffer>
 8010ebe:	4620      	mov	r0, r4
 8010ec0:	2104      	movs	r1, #4
 8010ec2:	f000 fc97 	bl	80117f4 <ucdr_check_buffer_available_for>
 8010ec6:	2800      	cmp	r0, #0
 8010ec8:	d138      	bne.n	8010f3c <ucdr_serialize_endian_uint32_t+0x9c>
 8010eca:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8010ece:	42b7      	cmp	r7, r6
 8010ed0:	d92f      	bls.n	8010f32 <ucdr_serialize_endian_uint32_t+0x92>
 8010ed2:	6922      	ldr	r2, [r4, #16]
 8010ed4:	60a7      	str	r7, [r4, #8]
 8010ed6:	1bbf      	subs	r7, r7, r6
 8010ed8:	443a      	add	r2, r7
 8010eda:	f1c7 0904 	rsb	r9, r7, #4
 8010ede:	6122      	str	r2, [r4, #16]
 8010ee0:	4649      	mov	r1, r9
 8010ee2:	4620      	mov	r0, r4
 8010ee4:	f000 fc92 	bl	801180c <ucdr_check_final_buffer_behavior>
 8010ee8:	2800      	cmp	r0, #0
 8010eea:	d04a      	beq.n	8010f82 <ucdr_serialize_endian_uint32_t+0xe2>
 8010eec:	2d01      	cmp	r5, #1
 8010eee:	d063      	beq.n	8010fb8 <ucdr_serialize_endian_uint32_t+0x118>
 8010ef0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010ef4:	7033      	strb	r3, [r6, #0]
 8010ef6:	2f00      	cmp	r7, #0
 8010ef8:	d051      	beq.n	8010f9e <ucdr_serialize_endian_uint32_t+0xfe>
 8010efa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010efe:	7073      	strb	r3, [r6, #1]
 8010f00:	2f01      	cmp	r7, #1
 8010f02:	d050      	beq.n	8010fa6 <ucdr_serialize_endian_uint32_t+0x106>
 8010f04:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010f08:	70b3      	strb	r3, [r6, #2]
 8010f0a:	2f02      	cmp	r7, #2
 8010f0c:	d04f      	beq.n	8010fae <ucdr_serialize_endian_uint32_t+0x10e>
 8010f0e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010f12:	70f3      	strb	r3, [r6, #3]
 8010f14:	6923      	ldr	r3, [r4, #16]
 8010f16:	68a2      	ldr	r2, [r4, #8]
 8010f18:	7da0      	ldrb	r0, [r4, #22]
 8010f1a:	3304      	adds	r3, #4
 8010f1c:	1bdb      	subs	r3, r3, r7
 8010f1e:	444a      	add	r2, r9
 8010f20:	2104      	movs	r1, #4
 8010f22:	f080 0001 	eor.w	r0, r0, #1
 8010f26:	6123      	str	r3, [r4, #16]
 8010f28:	60a2      	str	r2, [r4, #8]
 8010f2a:	7561      	strb	r1, [r4, #21]
 8010f2c:	b003      	add	sp, #12
 8010f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f32:	2104      	movs	r1, #4
 8010f34:	4620      	mov	r0, r4
 8010f36:	f000 fc69 	bl	801180c <ucdr_check_final_buffer_behavior>
 8010f3a:	b1c8      	cbz	r0, 8010f70 <ucdr_serialize_endian_uint32_t+0xd0>
 8010f3c:	2d01      	cmp	r5, #1
 8010f3e:	68a3      	ldr	r3, [r4, #8]
 8010f40:	d01c      	beq.n	8010f7c <ucdr_serialize_endian_uint32_t+0xdc>
 8010f42:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010f46:	701a      	strb	r2, [r3, #0]
 8010f48:	68a3      	ldr	r3, [r4, #8]
 8010f4a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010f4e:	705a      	strb	r2, [r3, #1]
 8010f50:	68a3      	ldr	r3, [r4, #8]
 8010f52:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010f56:	709a      	strb	r2, [r3, #2]
 8010f58:	68a3      	ldr	r3, [r4, #8]
 8010f5a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010f5e:	70da      	strb	r2, [r3, #3]
 8010f60:	68a2      	ldr	r2, [r4, #8]
 8010f62:	6923      	ldr	r3, [r4, #16]
 8010f64:	3204      	adds	r2, #4
 8010f66:	3304      	adds	r3, #4
 8010f68:	2104      	movs	r1, #4
 8010f6a:	60a2      	str	r2, [r4, #8]
 8010f6c:	6123      	str	r3, [r4, #16]
 8010f6e:	7561      	strb	r1, [r4, #21]
 8010f70:	7da0      	ldrb	r0, [r4, #22]
 8010f72:	f080 0001 	eor.w	r0, r0, #1
 8010f76:	b003      	add	sp, #12
 8010f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f7c:	9a01      	ldr	r2, [sp, #4]
 8010f7e:	601a      	str	r2, [r3, #0]
 8010f80:	e7ee      	b.n	8010f60 <ucdr_serialize_endian_uint32_t+0xc0>
 8010f82:	68a2      	ldr	r2, [r4, #8]
 8010f84:	6923      	ldr	r3, [r4, #16]
 8010f86:	7da0      	ldrb	r0, [r4, #22]
 8010f88:	f884 8015 	strb.w	r8, [r4, #21]
 8010f8c:	1bd2      	subs	r2, r2, r7
 8010f8e:	1bdb      	subs	r3, r3, r7
 8010f90:	f080 0001 	eor.w	r0, r0, #1
 8010f94:	60a2      	str	r2, [r4, #8]
 8010f96:	6123      	str	r3, [r4, #16]
 8010f98:	b003      	add	sp, #12
 8010f9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f9e:	68a3      	ldr	r3, [r4, #8]
 8010fa0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010fa4:	701a      	strb	r2, [r3, #0]
 8010fa6:	68a3      	ldr	r3, [r4, #8]
 8010fa8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010fac:	701a      	strb	r2, [r3, #0]
 8010fae:	68a3      	ldr	r3, [r4, #8]
 8010fb0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010fb4:	701a      	strb	r2, [r3, #0]
 8010fb6:	e7ad      	b.n	8010f14 <ucdr_serialize_endian_uint32_t+0x74>
 8010fb8:	ad01      	add	r5, sp, #4
 8010fba:	4629      	mov	r1, r5
 8010fbc:	463a      	mov	r2, r7
 8010fbe:	4630      	mov	r0, r6
 8010fc0:	f009 fb81 	bl	801a6c6 <memcpy>
 8010fc4:	68a0      	ldr	r0, [r4, #8]
 8010fc6:	464a      	mov	r2, r9
 8010fc8:	19e9      	adds	r1, r5, r7
 8010fca:	f009 fb7c 	bl	801a6c6 <memcpy>
 8010fce:	e7a1      	b.n	8010f14 <ucdr_serialize_endian_uint32_t+0x74>

08010fd0 <ucdr_deserialize_uint32_t>:
 8010fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fd4:	460d      	mov	r5, r1
 8010fd6:	2104      	movs	r1, #4
 8010fd8:	4604      	mov	r4, r0
 8010fda:	f000 fc69 	bl	80118b0 <ucdr_buffer_alignment>
 8010fde:	4601      	mov	r1, r0
 8010fe0:	4620      	mov	r0, r4
 8010fe2:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010fe6:	f000 fca7 	bl	8011938 <ucdr_advance_buffer>
 8010fea:	4620      	mov	r0, r4
 8010fec:	2104      	movs	r1, #4
 8010fee:	f000 fc01 	bl	80117f4 <ucdr_check_buffer_available_for>
 8010ff2:	2800      	cmp	r0, #0
 8010ff4:	d138      	bne.n	8011068 <ucdr_deserialize_uint32_t+0x98>
 8010ff6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8010ffa:	42b7      	cmp	r7, r6
 8010ffc:	d92f      	bls.n	801105e <ucdr_deserialize_uint32_t+0x8e>
 8010ffe:	6922      	ldr	r2, [r4, #16]
 8011000:	60a7      	str	r7, [r4, #8]
 8011002:	1bbf      	subs	r7, r7, r6
 8011004:	443a      	add	r2, r7
 8011006:	f1c7 0904 	rsb	r9, r7, #4
 801100a:	6122      	str	r2, [r4, #16]
 801100c:	4649      	mov	r1, r9
 801100e:	4620      	mov	r0, r4
 8011010:	f000 fbfc 	bl	801180c <ucdr_check_final_buffer_behavior>
 8011014:	2800      	cmp	r0, #0
 8011016:	d046      	beq.n	80110a6 <ucdr_deserialize_uint32_t+0xd6>
 8011018:	7d23      	ldrb	r3, [r4, #20]
 801101a:	2b01      	cmp	r3, #1
 801101c:	d05c      	beq.n	80110d8 <ucdr_deserialize_uint32_t+0x108>
 801101e:	78f3      	ldrb	r3, [r6, #3]
 8011020:	702b      	strb	r3, [r5, #0]
 8011022:	2f00      	cmp	r7, #0
 8011024:	d04c      	beq.n	80110c0 <ucdr_deserialize_uint32_t+0xf0>
 8011026:	78b3      	ldrb	r3, [r6, #2]
 8011028:	706b      	strb	r3, [r5, #1]
 801102a:	2f01      	cmp	r7, #1
 801102c:	f105 0302 	add.w	r3, r5, #2
 8011030:	d04a      	beq.n	80110c8 <ucdr_deserialize_uint32_t+0xf8>
 8011032:	7873      	ldrb	r3, [r6, #1]
 8011034:	70ab      	strb	r3, [r5, #2]
 8011036:	2f02      	cmp	r7, #2
 8011038:	f105 0303 	add.w	r3, r5, #3
 801103c:	d048      	beq.n	80110d0 <ucdr_deserialize_uint32_t+0x100>
 801103e:	7833      	ldrb	r3, [r6, #0]
 8011040:	70eb      	strb	r3, [r5, #3]
 8011042:	6923      	ldr	r3, [r4, #16]
 8011044:	68a2      	ldr	r2, [r4, #8]
 8011046:	7da0      	ldrb	r0, [r4, #22]
 8011048:	2104      	movs	r1, #4
 801104a:	3304      	adds	r3, #4
 801104c:	1bdb      	subs	r3, r3, r7
 801104e:	444a      	add	r2, r9
 8011050:	7561      	strb	r1, [r4, #21]
 8011052:	6123      	str	r3, [r4, #16]
 8011054:	60a2      	str	r2, [r4, #8]
 8011056:	f080 0001 	eor.w	r0, r0, #1
 801105a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801105e:	2104      	movs	r1, #4
 8011060:	4620      	mov	r0, r4
 8011062:	f000 fbd3 	bl	801180c <ucdr_check_final_buffer_behavior>
 8011066:	b1b0      	cbz	r0, 8011096 <ucdr_deserialize_uint32_t+0xc6>
 8011068:	7d23      	ldrb	r3, [r4, #20]
 801106a:	2b01      	cmp	r3, #1
 801106c:	68a3      	ldr	r3, [r4, #8]
 801106e:	d017      	beq.n	80110a0 <ucdr_deserialize_uint32_t+0xd0>
 8011070:	78db      	ldrb	r3, [r3, #3]
 8011072:	702b      	strb	r3, [r5, #0]
 8011074:	68a3      	ldr	r3, [r4, #8]
 8011076:	789b      	ldrb	r3, [r3, #2]
 8011078:	706b      	strb	r3, [r5, #1]
 801107a:	68a3      	ldr	r3, [r4, #8]
 801107c:	785b      	ldrb	r3, [r3, #1]
 801107e:	70ab      	strb	r3, [r5, #2]
 8011080:	68a3      	ldr	r3, [r4, #8]
 8011082:	781b      	ldrb	r3, [r3, #0]
 8011084:	70eb      	strb	r3, [r5, #3]
 8011086:	68a2      	ldr	r2, [r4, #8]
 8011088:	6923      	ldr	r3, [r4, #16]
 801108a:	3204      	adds	r2, #4
 801108c:	3304      	adds	r3, #4
 801108e:	2104      	movs	r1, #4
 8011090:	60a2      	str	r2, [r4, #8]
 8011092:	6123      	str	r3, [r4, #16]
 8011094:	7561      	strb	r1, [r4, #21]
 8011096:	7da0      	ldrb	r0, [r4, #22]
 8011098:	f080 0001 	eor.w	r0, r0, #1
 801109c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	602b      	str	r3, [r5, #0]
 80110a4:	e7ef      	b.n	8011086 <ucdr_deserialize_uint32_t+0xb6>
 80110a6:	68a2      	ldr	r2, [r4, #8]
 80110a8:	6923      	ldr	r3, [r4, #16]
 80110aa:	7da0      	ldrb	r0, [r4, #22]
 80110ac:	f884 8015 	strb.w	r8, [r4, #21]
 80110b0:	1bd2      	subs	r2, r2, r7
 80110b2:	1bdb      	subs	r3, r3, r7
 80110b4:	60a2      	str	r2, [r4, #8]
 80110b6:	6123      	str	r3, [r4, #16]
 80110b8:	f080 0001 	eor.w	r0, r0, #1
 80110bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110c0:	68a3      	ldr	r3, [r4, #8]
 80110c2:	789b      	ldrb	r3, [r3, #2]
 80110c4:	706b      	strb	r3, [r5, #1]
 80110c6:	1cab      	adds	r3, r5, #2
 80110c8:	68a2      	ldr	r2, [r4, #8]
 80110ca:	7852      	ldrb	r2, [r2, #1]
 80110cc:	f803 2b01 	strb.w	r2, [r3], #1
 80110d0:	68a2      	ldr	r2, [r4, #8]
 80110d2:	7812      	ldrb	r2, [r2, #0]
 80110d4:	701a      	strb	r2, [r3, #0]
 80110d6:	e7b4      	b.n	8011042 <ucdr_deserialize_uint32_t+0x72>
 80110d8:	4631      	mov	r1, r6
 80110da:	463a      	mov	r2, r7
 80110dc:	4628      	mov	r0, r5
 80110de:	f009 faf2 	bl	801a6c6 <memcpy>
 80110e2:	68a1      	ldr	r1, [r4, #8]
 80110e4:	464a      	mov	r2, r9
 80110e6:	19e8      	adds	r0, r5, r7
 80110e8:	f009 faed 	bl	801a6c6 <memcpy>
 80110ec:	e7a9      	b.n	8011042 <ucdr_deserialize_uint32_t+0x72>
 80110ee:	bf00      	nop

080110f0 <ucdr_deserialize_endian_uint32_t>:
 80110f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110f4:	460e      	mov	r6, r1
 80110f6:	2104      	movs	r1, #4
 80110f8:	4604      	mov	r4, r0
 80110fa:	4615      	mov	r5, r2
 80110fc:	f000 fbd8 	bl	80118b0 <ucdr_buffer_alignment>
 8011100:	4601      	mov	r1, r0
 8011102:	4620      	mov	r0, r4
 8011104:	f894 9015 	ldrb.w	r9, [r4, #21]
 8011108:	f000 fc16 	bl	8011938 <ucdr_advance_buffer>
 801110c:	4620      	mov	r0, r4
 801110e:	2104      	movs	r1, #4
 8011110:	f000 fb70 	bl	80117f4 <ucdr_check_buffer_available_for>
 8011114:	2800      	cmp	r0, #0
 8011116:	d13c      	bne.n	8011192 <ucdr_deserialize_endian_uint32_t+0xa2>
 8011118:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 801111c:	42bb      	cmp	r3, r7
 801111e:	d933      	bls.n	8011188 <ucdr_deserialize_endian_uint32_t+0x98>
 8011120:	6922      	ldr	r2, [r4, #16]
 8011122:	60a3      	str	r3, [r4, #8]
 8011124:	eba3 0807 	sub.w	r8, r3, r7
 8011128:	4442      	add	r2, r8
 801112a:	f1c8 0a04 	rsb	sl, r8, #4
 801112e:	6122      	str	r2, [r4, #16]
 8011130:	4651      	mov	r1, sl
 8011132:	4620      	mov	r0, r4
 8011134:	f000 fb6a 	bl	801180c <ucdr_check_final_buffer_behavior>
 8011138:	2800      	cmp	r0, #0
 801113a:	d048      	beq.n	80111ce <ucdr_deserialize_endian_uint32_t+0xde>
 801113c:	2e01      	cmp	r6, #1
 801113e:	d061      	beq.n	8011204 <ucdr_deserialize_endian_uint32_t+0x114>
 8011140:	78fb      	ldrb	r3, [r7, #3]
 8011142:	702b      	strb	r3, [r5, #0]
 8011144:	f1b8 0f00 	cmp.w	r8, #0
 8011148:	d050      	beq.n	80111ec <ucdr_deserialize_endian_uint32_t+0xfc>
 801114a:	78bb      	ldrb	r3, [r7, #2]
 801114c:	706b      	strb	r3, [r5, #1]
 801114e:	f1b8 0f01 	cmp.w	r8, #1
 8011152:	f105 0302 	add.w	r3, r5, #2
 8011156:	d04d      	beq.n	80111f4 <ucdr_deserialize_endian_uint32_t+0x104>
 8011158:	787b      	ldrb	r3, [r7, #1]
 801115a:	70ab      	strb	r3, [r5, #2]
 801115c:	f1b8 0f02 	cmp.w	r8, #2
 8011160:	f105 0303 	add.w	r3, r5, #3
 8011164:	d04a      	beq.n	80111fc <ucdr_deserialize_endian_uint32_t+0x10c>
 8011166:	783b      	ldrb	r3, [r7, #0]
 8011168:	70eb      	strb	r3, [r5, #3]
 801116a:	6923      	ldr	r3, [r4, #16]
 801116c:	68a2      	ldr	r2, [r4, #8]
 801116e:	7da0      	ldrb	r0, [r4, #22]
 8011170:	2104      	movs	r1, #4
 8011172:	3304      	adds	r3, #4
 8011174:	eba3 0308 	sub.w	r3, r3, r8
 8011178:	4452      	add	r2, sl
 801117a:	7561      	strb	r1, [r4, #21]
 801117c:	6123      	str	r3, [r4, #16]
 801117e:	60a2      	str	r2, [r4, #8]
 8011180:	f080 0001 	eor.w	r0, r0, #1
 8011184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011188:	2104      	movs	r1, #4
 801118a:	4620      	mov	r0, r4
 801118c:	f000 fb3e 	bl	801180c <ucdr_check_final_buffer_behavior>
 8011190:	b1a8      	cbz	r0, 80111be <ucdr_deserialize_endian_uint32_t+0xce>
 8011192:	2e01      	cmp	r6, #1
 8011194:	68a3      	ldr	r3, [r4, #8]
 8011196:	d017      	beq.n	80111c8 <ucdr_deserialize_endian_uint32_t+0xd8>
 8011198:	78db      	ldrb	r3, [r3, #3]
 801119a:	702b      	strb	r3, [r5, #0]
 801119c:	68a3      	ldr	r3, [r4, #8]
 801119e:	789b      	ldrb	r3, [r3, #2]
 80111a0:	706b      	strb	r3, [r5, #1]
 80111a2:	68a3      	ldr	r3, [r4, #8]
 80111a4:	785b      	ldrb	r3, [r3, #1]
 80111a6:	70ab      	strb	r3, [r5, #2]
 80111a8:	68a3      	ldr	r3, [r4, #8]
 80111aa:	781b      	ldrb	r3, [r3, #0]
 80111ac:	70eb      	strb	r3, [r5, #3]
 80111ae:	68a2      	ldr	r2, [r4, #8]
 80111b0:	6923      	ldr	r3, [r4, #16]
 80111b2:	3204      	adds	r2, #4
 80111b4:	3304      	adds	r3, #4
 80111b6:	2104      	movs	r1, #4
 80111b8:	60a2      	str	r2, [r4, #8]
 80111ba:	6123      	str	r3, [r4, #16]
 80111bc:	7561      	strb	r1, [r4, #21]
 80111be:	7da0      	ldrb	r0, [r4, #22]
 80111c0:	f080 0001 	eor.w	r0, r0, #1
 80111c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	602b      	str	r3, [r5, #0]
 80111cc:	e7ef      	b.n	80111ae <ucdr_deserialize_endian_uint32_t+0xbe>
 80111ce:	68a2      	ldr	r2, [r4, #8]
 80111d0:	6923      	ldr	r3, [r4, #16]
 80111d2:	7da0      	ldrb	r0, [r4, #22]
 80111d4:	f884 9015 	strb.w	r9, [r4, #21]
 80111d8:	eba2 0208 	sub.w	r2, r2, r8
 80111dc:	eba3 0308 	sub.w	r3, r3, r8
 80111e0:	60a2      	str	r2, [r4, #8]
 80111e2:	6123      	str	r3, [r4, #16]
 80111e4:	f080 0001 	eor.w	r0, r0, #1
 80111e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111ec:	68a3      	ldr	r3, [r4, #8]
 80111ee:	789b      	ldrb	r3, [r3, #2]
 80111f0:	706b      	strb	r3, [r5, #1]
 80111f2:	1cab      	adds	r3, r5, #2
 80111f4:	68a2      	ldr	r2, [r4, #8]
 80111f6:	7852      	ldrb	r2, [r2, #1]
 80111f8:	f803 2b01 	strb.w	r2, [r3], #1
 80111fc:	68a2      	ldr	r2, [r4, #8]
 80111fe:	7812      	ldrb	r2, [r2, #0]
 8011200:	701a      	strb	r2, [r3, #0]
 8011202:	e7b2      	b.n	801116a <ucdr_deserialize_endian_uint32_t+0x7a>
 8011204:	4639      	mov	r1, r7
 8011206:	4642      	mov	r2, r8
 8011208:	4628      	mov	r0, r5
 801120a:	f009 fa5c 	bl	801a6c6 <memcpy>
 801120e:	68a1      	ldr	r1, [r4, #8]
 8011210:	4652      	mov	r2, sl
 8011212:	eb05 0008 	add.w	r0, r5, r8
 8011216:	f009 fa56 	bl	801a6c6 <memcpy>
 801121a:	e7a6      	b.n	801116a <ucdr_deserialize_endian_uint32_t+0x7a>

0801121c <ucdr_serialize_uint64_t>:
 801121c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011220:	2108      	movs	r1, #8
 8011222:	b082      	sub	sp, #8
 8011224:	4604      	mov	r4, r0
 8011226:	e9cd 2300 	strd	r2, r3, [sp]
 801122a:	f000 fb41 	bl	80118b0 <ucdr_buffer_alignment>
 801122e:	4601      	mov	r1, r0
 8011230:	4620      	mov	r0, r4
 8011232:	7d67      	ldrb	r7, [r4, #21]
 8011234:	f000 fb80 	bl	8011938 <ucdr_advance_buffer>
 8011238:	4620      	mov	r0, r4
 801123a:	2108      	movs	r1, #8
 801123c:	f000 fada 	bl	80117f4 <ucdr_check_buffer_available_for>
 8011240:	2800      	cmp	r0, #0
 8011242:	d14e      	bne.n	80112e2 <ucdr_serialize_uint64_t+0xc6>
 8011244:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8011248:	42b5      	cmp	r5, r6
 801124a:	d945      	bls.n	80112d8 <ucdr_serialize_uint64_t+0xbc>
 801124c:	6923      	ldr	r3, [r4, #16]
 801124e:	60a5      	str	r5, [r4, #8]
 8011250:	1bad      	subs	r5, r5, r6
 8011252:	442b      	add	r3, r5
 8011254:	f1c5 0808 	rsb	r8, r5, #8
 8011258:	6123      	str	r3, [r4, #16]
 801125a:	4641      	mov	r1, r8
 801125c:	4620      	mov	r0, r4
 801125e:	f000 fad5 	bl	801180c <ucdr_check_final_buffer_behavior>
 8011262:	2800      	cmp	r0, #0
 8011264:	d074      	beq.n	8011350 <ucdr_serialize_uint64_t+0x134>
 8011266:	7d23      	ldrb	r3, [r4, #20]
 8011268:	2b01      	cmp	r3, #1
 801126a:	f000 809b 	beq.w	80113a4 <ucdr_serialize_uint64_t+0x188>
 801126e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011272:	7033      	strb	r3, [r6, #0]
 8011274:	2d00      	cmp	r5, #0
 8011276:	d078      	beq.n	801136a <ucdr_serialize_uint64_t+0x14e>
 8011278:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801127c:	7073      	strb	r3, [r6, #1]
 801127e:	2d01      	cmp	r5, #1
 8011280:	d077      	beq.n	8011372 <ucdr_serialize_uint64_t+0x156>
 8011282:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011286:	70b3      	strb	r3, [r6, #2]
 8011288:	2d02      	cmp	r5, #2
 801128a:	d076      	beq.n	801137a <ucdr_serialize_uint64_t+0x15e>
 801128c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011290:	70f3      	strb	r3, [r6, #3]
 8011292:	2d03      	cmp	r5, #3
 8011294:	d075      	beq.n	8011382 <ucdr_serialize_uint64_t+0x166>
 8011296:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801129a:	7133      	strb	r3, [r6, #4]
 801129c:	2d04      	cmp	r5, #4
 801129e:	d074      	beq.n	801138a <ucdr_serialize_uint64_t+0x16e>
 80112a0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80112a4:	7173      	strb	r3, [r6, #5]
 80112a6:	2d05      	cmp	r5, #5
 80112a8:	d073      	beq.n	8011392 <ucdr_serialize_uint64_t+0x176>
 80112aa:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80112ae:	71b3      	strb	r3, [r6, #6]
 80112b0:	2d06      	cmp	r5, #6
 80112b2:	d072      	beq.n	801139a <ucdr_serialize_uint64_t+0x17e>
 80112b4:	f89d 3000 	ldrb.w	r3, [sp]
 80112b8:	71f3      	strb	r3, [r6, #7]
 80112ba:	6923      	ldr	r3, [r4, #16]
 80112bc:	68a2      	ldr	r2, [r4, #8]
 80112be:	7da0      	ldrb	r0, [r4, #22]
 80112c0:	3308      	adds	r3, #8
 80112c2:	1b5d      	subs	r5, r3, r5
 80112c4:	4442      	add	r2, r8
 80112c6:	2308      	movs	r3, #8
 80112c8:	f080 0001 	eor.w	r0, r0, #1
 80112cc:	6125      	str	r5, [r4, #16]
 80112ce:	60a2      	str	r2, [r4, #8]
 80112d0:	7563      	strb	r3, [r4, #21]
 80112d2:	b002      	add	sp, #8
 80112d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112d8:	2108      	movs	r1, #8
 80112da:	4620      	mov	r0, r4
 80112dc:	f000 fa96 	bl	801180c <ucdr_check_final_buffer_behavior>
 80112e0:	b350      	cbz	r0, 8011338 <ucdr_serialize_uint64_t+0x11c>
 80112e2:	7d23      	ldrb	r3, [r4, #20]
 80112e4:	2b01      	cmp	r3, #1
 80112e6:	d02d      	beq.n	8011344 <ucdr_serialize_uint64_t+0x128>
 80112e8:	68a3      	ldr	r3, [r4, #8]
 80112ea:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80112ee:	701a      	strb	r2, [r3, #0]
 80112f0:	68a3      	ldr	r3, [r4, #8]
 80112f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80112f6:	705a      	strb	r2, [r3, #1]
 80112f8:	68a3      	ldr	r3, [r4, #8]
 80112fa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80112fe:	709a      	strb	r2, [r3, #2]
 8011300:	68a3      	ldr	r3, [r4, #8]
 8011302:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011306:	70da      	strb	r2, [r3, #3]
 8011308:	68a3      	ldr	r3, [r4, #8]
 801130a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801130e:	711a      	strb	r2, [r3, #4]
 8011310:	68a3      	ldr	r3, [r4, #8]
 8011312:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011316:	715a      	strb	r2, [r3, #5]
 8011318:	68a3      	ldr	r3, [r4, #8]
 801131a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801131e:	719a      	strb	r2, [r3, #6]
 8011320:	68a3      	ldr	r3, [r4, #8]
 8011322:	f89d 2000 	ldrb.w	r2, [sp]
 8011326:	71da      	strb	r2, [r3, #7]
 8011328:	68a2      	ldr	r2, [r4, #8]
 801132a:	6923      	ldr	r3, [r4, #16]
 801132c:	3208      	adds	r2, #8
 801132e:	3308      	adds	r3, #8
 8011330:	2108      	movs	r1, #8
 8011332:	60a2      	str	r2, [r4, #8]
 8011334:	6123      	str	r3, [r4, #16]
 8011336:	7561      	strb	r1, [r4, #21]
 8011338:	7da0      	ldrb	r0, [r4, #22]
 801133a:	f080 0001 	eor.w	r0, r0, #1
 801133e:	b002      	add	sp, #8
 8011340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011344:	466b      	mov	r3, sp
 8011346:	cb03      	ldmia	r3!, {r0, r1}
 8011348:	68a3      	ldr	r3, [r4, #8]
 801134a:	6018      	str	r0, [r3, #0]
 801134c:	6059      	str	r1, [r3, #4]
 801134e:	e7eb      	b.n	8011328 <ucdr_serialize_uint64_t+0x10c>
 8011350:	68a2      	ldr	r2, [r4, #8]
 8011352:	6923      	ldr	r3, [r4, #16]
 8011354:	7da0      	ldrb	r0, [r4, #22]
 8011356:	7567      	strb	r7, [r4, #21]
 8011358:	1b52      	subs	r2, r2, r5
 801135a:	f080 0001 	eor.w	r0, r0, #1
 801135e:	1b5d      	subs	r5, r3, r5
 8011360:	60a2      	str	r2, [r4, #8]
 8011362:	6125      	str	r5, [r4, #16]
 8011364:	b002      	add	sp, #8
 8011366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801136a:	68a3      	ldr	r3, [r4, #8]
 801136c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011370:	701a      	strb	r2, [r3, #0]
 8011372:	68a3      	ldr	r3, [r4, #8]
 8011374:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011378:	701a      	strb	r2, [r3, #0]
 801137a:	68a3      	ldr	r3, [r4, #8]
 801137c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011380:	701a      	strb	r2, [r3, #0]
 8011382:	68a3      	ldr	r3, [r4, #8]
 8011384:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011388:	701a      	strb	r2, [r3, #0]
 801138a:	68a3      	ldr	r3, [r4, #8]
 801138c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011390:	701a      	strb	r2, [r3, #0]
 8011392:	68a3      	ldr	r3, [r4, #8]
 8011394:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8011398:	701a      	strb	r2, [r3, #0]
 801139a:	68a3      	ldr	r3, [r4, #8]
 801139c:	f89d 2000 	ldrb.w	r2, [sp]
 80113a0:	701a      	strb	r2, [r3, #0]
 80113a2:	e78a      	b.n	80112ba <ucdr_serialize_uint64_t+0x9e>
 80113a4:	4630      	mov	r0, r6
 80113a6:	466e      	mov	r6, sp
 80113a8:	4631      	mov	r1, r6
 80113aa:	462a      	mov	r2, r5
 80113ac:	f009 f98b 	bl	801a6c6 <memcpy>
 80113b0:	68a0      	ldr	r0, [r4, #8]
 80113b2:	4642      	mov	r2, r8
 80113b4:	1971      	adds	r1, r6, r5
 80113b6:	f009 f986 	bl	801a6c6 <memcpy>
 80113ba:	e77e      	b.n	80112ba <ucdr_serialize_uint64_t+0x9e>

080113bc <ucdr_serialize_int16_t>:
 80113bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113c0:	b082      	sub	sp, #8
 80113c2:	460b      	mov	r3, r1
 80113c4:	2102      	movs	r1, #2
 80113c6:	4604      	mov	r4, r0
 80113c8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80113cc:	f000 fa70 	bl	80118b0 <ucdr_buffer_alignment>
 80113d0:	4601      	mov	r1, r0
 80113d2:	4620      	mov	r0, r4
 80113d4:	7d67      	ldrb	r7, [r4, #21]
 80113d6:	f000 faaf 	bl	8011938 <ucdr_advance_buffer>
 80113da:	4620      	mov	r0, r4
 80113dc:	2102      	movs	r1, #2
 80113de:	f000 fa09 	bl	80117f4 <ucdr_check_buffer_available_for>
 80113e2:	bb78      	cbnz	r0, 8011444 <ucdr_serialize_int16_t+0x88>
 80113e4:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 80113e8:	42b5      	cmp	r5, r6
 80113ea:	d926      	bls.n	801143a <ucdr_serialize_int16_t+0x7e>
 80113ec:	6922      	ldr	r2, [r4, #16]
 80113ee:	60a5      	str	r5, [r4, #8]
 80113f0:	1bad      	subs	r5, r5, r6
 80113f2:	442a      	add	r2, r5
 80113f4:	f1c5 0802 	rsb	r8, r5, #2
 80113f8:	6122      	str	r2, [r4, #16]
 80113fa:	4641      	mov	r1, r8
 80113fc:	4620      	mov	r0, r4
 80113fe:	f000 fa05 	bl	801180c <ucdr_check_final_buffer_behavior>
 8011402:	2800      	cmp	r0, #0
 8011404:	d03b      	beq.n	801147e <ucdr_serialize_int16_t+0xc2>
 8011406:	7d23      	ldrb	r3, [r4, #20]
 8011408:	2b01      	cmp	r3, #1
 801140a:	d04a      	beq.n	80114a2 <ucdr_serialize_int16_t+0xe6>
 801140c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011410:	7033      	strb	r3, [r6, #0]
 8011412:	2d00      	cmp	r5, #0
 8011414:	d040      	beq.n	8011498 <ucdr_serialize_int16_t+0xdc>
 8011416:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801141a:	7073      	strb	r3, [r6, #1]
 801141c:	6923      	ldr	r3, [r4, #16]
 801141e:	68a2      	ldr	r2, [r4, #8]
 8011420:	7da0      	ldrb	r0, [r4, #22]
 8011422:	3302      	adds	r3, #2
 8011424:	1b5b      	subs	r3, r3, r5
 8011426:	4442      	add	r2, r8
 8011428:	2102      	movs	r1, #2
 801142a:	f080 0001 	eor.w	r0, r0, #1
 801142e:	6123      	str	r3, [r4, #16]
 8011430:	60a2      	str	r2, [r4, #8]
 8011432:	7561      	strb	r1, [r4, #21]
 8011434:	b002      	add	sp, #8
 8011436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801143a:	2102      	movs	r1, #2
 801143c:	4620      	mov	r0, r4
 801143e:	f000 f9e5 	bl	801180c <ucdr_check_final_buffer_behavior>
 8011442:	b190      	cbz	r0, 801146a <ucdr_serialize_int16_t+0xae>
 8011444:	7d23      	ldrb	r3, [r4, #20]
 8011446:	2b01      	cmp	r3, #1
 8011448:	68a3      	ldr	r3, [r4, #8]
 801144a:	d014      	beq.n	8011476 <ucdr_serialize_int16_t+0xba>
 801144c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011450:	701a      	strb	r2, [r3, #0]
 8011452:	68a3      	ldr	r3, [r4, #8]
 8011454:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011458:	705a      	strb	r2, [r3, #1]
 801145a:	68a2      	ldr	r2, [r4, #8]
 801145c:	6923      	ldr	r3, [r4, #16]
 801145e:	3202      	adds	r2, #2
 8011460:	3302      	adds	r3, #2
 8011462:	2102      	movs	r1, #2
 8011464:	60a2      	str	r2, [r4, #8]
 8011466:	6123      	str	r3, [r4, #16]
 8011468:	7561      	strb	r1, [r4, #21]
 801146a:	7da0      	ldrb	r0, [r4, #22]
 801146c:	f080 0001 	eor.w	r0, r0, #1
 8011470:	b002      	add	sp, #8
 8011472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011476:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801147a:	801a      	strh	r2, [r3, #0]
 801147c:	e7ed      	b.n	801145a <ucdr_serialize_int16_t+0x9e>
 801147e:	68a2      	ldr	r2, [r4, #8]
 8011480:	6923      	ldr	r3, [r4, #16]
 8011482:	7da0      	ldrb	r0, [r4, #22]
 8011484:	7567      	strb	r7, [r4, #21]
 8011486:	1b52      	subs	r2, r2, r5
 8011488:	1b5b      	subs	r3, r3, r5
 801148a:	f080 0001 	eor.w	r0, r0, #1
 801148e:	60a2      	str	r2, [r4, #8]
 8011490:	6123      	str	r3, [r4, #16]
 8011492:	b002      	add	sp, #8
 8011494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011498:	68a3      	ldr	r3, [r4, #8]
 801149a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801149e:	701a      	strb	r2, [r3, #0]
 80114a0:	e7bc      	b.n	801141c <ucdr_serialize_int16_t+0x60>
 80114a2:	4630      	mov	r0, r6
 80114a4:	f10d 0606 	add.w	r6, sp, #6
 80114a8:	4631      	mov	r1, r6
 80114aa:	462a      	mov	r2, r5
 80114ac:	f009 f90b 	bl	801a6c6 <memcpy>
 80114b0:	68a0      	ldr	r0, [r4, #8]
 80114b2:	4642      	mov	r2, r8
 80114b4:	1971      	adds	r1, r6, r5
 80114b6:	f009 f906 	bl	801a6c6 <memcpy>
 80114ba:	e7af      	b.n	801141c <ucdr_serialize_int16_t+0x60>

080114bc <ucdr_deserialize_int16_t>:
 80114bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114c0:	460d      	mov	r5, r1
 80114c2:	2102      	movs	r1, #2
 80114c4:	4604      	mov	r4, r0
 80114c6:	f000 f9f3 	bl	80118b0 <ucdr_buffer_alignment>
 80114ca:	4601      	mov	r1, r0
 80114cc:	4620      	mov	r0, r4
 80114ce:	f894 8015 	ldrb.w	r8, [r4, #21]
 80114d2:	f000 fa31 	bl	8011938 <ucdr_advance_buffer>
 80114d6:	4620      	mov	r0, r4
 80114d8:	2102      	movs	r1, #2
 80114da:	f000 f98b 	bl	80117f4 <ucdr_check_buffer_available_for>
 80114de:	bb60      	cbnz	r0, 801153a <ucdr_deserialize_int16_t+0x7e>
 80114e0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80114e4:	42be      	cmp	r6, r7
 80114e6:	d923      	bls.n	8011530 <ucdr_deserialize_int16_t+0x74>
 80114e8:	6922      	ldr	r2, [r4, #16]
 80114ea:	60a6      	str	r6, [r4, #8]
 80114ec:	1bf6      	subs	r6, r6, r7
 80114ee:	4432      	add	r2, r6
 80114f0:	f1c6 0902 	rsb	r9, r6, #2
 80114f4:	6122      	str	r2, [r4, #16]
 80114f6:	4649      	mov	r1, r9
 80114f8:	4620      	mov	r0, r4
 80114fa:	f000 f987 	bl	801180c <ucdr_check_final_buffer_behavior>
 80114fe:	2800      	cmp	r0, #0
 8011500:	d034      	beq.n	801156c <ucdr_deserialize_int16_t+0xb0>
 8011502:	7d23      	ldrb	r3, [r4, #20]
 8011504:	2b01      	cmp	r3, #1
 8011506:	d042      	beq.n	801158e <ucdr_deserialize_int16_t+0xd2>
 8011508:	787b      	ldrb	r3, [r7, #1]
 801150a:	702b      	strb	r3, [r5, #0]
 801150c:	2e00      	cmp	r6, #0
 801150e:	d03a      	beq.n	8011586 <ucdr_deserialize_int16_t+0xca>
 8011510:	783b      	ldrb	r3, [r7, #0]
 8011512:	706b      	strb	r3, [r5, #1]
 8011514:	6923      	ldr	r3, [r4, #16]
 8011516:	68a2      	ldr	r2, [r4, #8]
 8011518:	7da0      	ldrb	r0, [r4, #22]
 801151a:	2102      	movs	r1, #2
 801151c:	3302      	adds	r3, #2
 801151e:	1b9b      	subs	r3, r3, r6
 8011520:	444a      	add	r2, r9
 8011522:	7561      	strb	r1, [r4, #21]
 8011524:	6123      	str	r3, [r4, #16]
 8011526:	60a2      	str	r2, [r4, #8]
 8011528:	f080 0001 	eor.w	r0, r0, #1
 801152c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011530:	2102      	movs	r1, #2
 8011532:	4620      	mov	r0, r4
 8011534:	f000 f96a 	bl	801180c <ucdr_check_final_buffer_behavior>
 8011538:	b180      	cbz	r0, 801155c <ucdr_deserialize_int16_t+0xa0>
 801153a:	7d23      	ldrb	r3, [r4, #20]
 801153c:	2b01      	cmp	r3, #1
 801153e:	68a3      	ldr	r3, [r4, #8]
 8011540:	d011      	beq.n	8011566 <ucdr_deserialize_int16_t+0xaa>
 8011542:	785b      	ldrb	r3, [r3, #1]
 8011544:	702b      	strb	r3, [r5, #0]
 8011546:	68a3      	ldr	r3, [r4, #8]
 8011548:	781b      	ldrb	r3, [r3, #0]
 801154a:	706b      	strb	r3, [r5, #1]
 801154c:	68a2      	ldr	r2, [r4, #8]
 801154e:	6923      	ldr	r3, [r4, #16]
 8011550:	3202      	adds	r2, #2
 8011552:	3302      	adds	r3, #2
 8011554:	2102      	movs	r1, #2
 8011556:	60a2      	str	r2, [r4, #8]
 8011558:	6123      	str	r3, [r4, #16]
 801155a:	7561      	strb	r1, [r4, #21]
 801155c:	7da0      	ldrb	r0, [r4, #22]
 801155e:	f080 0001 	eor.w	r0, r0, #1
 8011562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011566:	881b      	ldrh	r3, [r3, #0]
 8011568:	802b      	strh	r3, [r5, #0]
 801156a:	e7ef      	b.n	801154c <ucdr_deserialize_int16_t+0x90>
 801156c:	68a2      	ldr	r2, [r4, #8]
 801156e:	6923      	ldr	r3, [r4, #16]
 8011570:	7da0      	ldrb	r0, [r4, #22]
 8011572:	f884 8015 	strb.w	r8, [r4, #21]
 8011576:	1b92      	subs	r2, r2, r6
 8011578:	1b9b      	subs	r3, r3, r6
 801157a:	60a2      	str	r2, [r4, #8]
 801157c:	6123      	str	r3, [r4, #16]
 801157e:	f080 0001 	eor.w	r0, r0, #1
 8011582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011586:	68a3      	ldr	r3, [r4, #8]
 8011588:	781b      	ldrb	r3, [r3, #0]
 801158a:	706b      	strb	r3, [r5, #1]
 801158c:	e7c2      	b.n	8011514 <ucdr_deserialize_int16_t+0x58>
 801158e:	4639      	mov	r1, r7
 8011590:	4632      	mov	r2, r6
 8011592:	4628      	mov	r0, r5
 8011594:	f009 f897 	bl	801a6c6 <memcpy>
 8011598:	68a1      	ldr	r1, [r4, #8]
 801159a:	464a      	mov	r2, r9
 801159c:	19a8      	adds	r0, r5, r6
 801159e:	f009 f892 	bl	801a6c6 <memcpy>
 80115a2:	e7b7      	b.n	8011514 <ucdr_deserialize_int16_t+0x58>

080115a4 <ucdr_serialize_int32_t>:
 80115a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115a8:	b082      	sub	sp, #8
 80115aa:	4604      	mov	r4, r0
 80115ac:	9101      	str	r1, [sp, #4]
 80115ae:	2104      	movs	r1, #4
 80115b0:	f000 f97e 	bl	80118b0 <ucdr_buffer_alignment>
 80115b4:	4601      	mov	r1, r0
 80115b6:	4620      	mov	r0, r4
 80115b8:	7d67      	ldrb	r7, [r4, #21]
 80115ba:	f000 f9bd 	bl	8011938 <ucdr_advance_buffer>
 80115be:	4620      	mov	r0, r4
 80115c0:	2104      	movs	r1, #4
 80115c2:	f000 f917 	bl	80117f4 <ucdr_check_buffer_available_for>
 80115c6:	2800      	cmp	r0, #0
 80115c8:	d139      	bne.n	801163e <ucdr_serialize_int32_t+0x9a>
 80115ca:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 80115ce:	42ae      	cmp	r6, r5
 80115d0:	d930      	bls.n	8011634 <ucdr_serialize_int32_t+0x90>
 80115d2:	6922      	ldr	r2, [r4, #16]
 80115d4:	60a6      	str	r6, [r4, #8]
 80115d6:	1b76      	subs	r6, r6, r5
 80115d8:	4432      	add	r2, r6
 80115da:	f1c6 0804 	rsb	r8, r6, #4
 80115de:	6122      	str	r2, [r4, #16]
 80115e0:	4641      	mov	r1, r8
 80115e2:	4620      	mov	r0, r4
 80115e4:	f000 f912 	bl	801180c <ucdr_check_final_buffer_behavior>
 80115e8:	2800      	cmp	r0, #0
 80115ea:	d04c      	beq.n	8011686 <ucdr_serialize_int32_t+0xe2>
 80115ec:	7d23      	ldrb	r3, [r4, #20]
 80115ee:	2b01      	cmp	r3, #1
 80115f0:	d063      	beq.n	80116ba <ucdr_serialize_int32_t+0x116>
 80115f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80115f6:	702b      	strb	r3, [r5, #0]
 80115f8:	2e00      	cmp	r6, #0
 80115fa:	d051      	beq.n	80116a0 <ucdr_serialize_int32_t+0xfc>
 80115fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011600:	706b      	strb	r3, [r5, #1]
 8011602:	2e01      	cmp	r6, #1
 8011604:	d050      	beq.n	80116a8 <ucdr_serialize_int32_t+0x104>
 8011606:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801160a:	70ab      	strb	r3, [r5, #2]
 801160c:	2e02      	cmp	r6, #2
 801160e:	d04f      	beq.n	80116b0 <ucdr_serialize_int32_t+0x10c>
 8011610:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011614:	70eb      	strb	r3, [r5, #3]
 8011616:	6923      	ldr	r3, [r4, #16]
 8011618:	68a2      	ldr	r2, [r4, #8]
 801161a:	7da0      	ldrb	r0, [r4, #22]
 801161c:	3304      	adds	r3, #4
 801161e:	1b9b      	subs	r3, r3, r6
 8011620:	4442      	add	r2, r8
 8011622:	2104      	movs	r1, #4
 8011624:	f080 0001 	eor.w	r0, r0, #1
 8011628:	6123      	str	r3, [r4, #16]
 801162a:	60a2      	str	r2, [r4, #8]
 801162c:	7561      	strb	r1, [r4, #21]
 801162e:	b002      	add	sp, #8
 8011630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011634:	2104      	movs	r1, #4
 8011636:	4620      	mov	r0, r4
 8011638:	f000 f8e8 	bl	801180c <ucdr_check_final_buffer_behavior>
 801163c:	b1d0      	cbz	r0, 8011674 <ucdr_serialize_int32_t+0xd0>
 801163e:	7d23      	ldrb	r3, [r4, #20]
 8011640:	2b01      	cmp	r3, #1
 8011642:	68a3      	ldr	r3, [r4, #8]
 8011644:	d01c      	beq.n	8011680 <ucdr_serialize_int32_t+0xdc>
 8011646:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801164a:	701a      	strb	r2, [r3, #0]
 801164c:	68a3      	ldr	r3, [r4, #8]
 801164e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011652:	705a      	strb	r2, [r3, #1]
 8011654:	68a3      	ldr	r3, [r4, #8]
 8011656:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801165a:	709a      	strb	r2, [r3, #2]
 801165c:	68a3      	ldr	r3, [r4, #8]
 801165e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011662:	70da      	strb	r2, [r3, #3]
 8011664:	68a2      	ldr	r2, [r4, #8]
 8011666:	6923      	ldr	r3, [r4, #16]
 8011668:	3204      	adds	r2, #4
 801166a:	3304      	adds	r3, #4
 801166c:	2104      	movs	r1, #4
 801166e:	60a2      	str	r2, [r4, #8]
 8011670:	6123      	str	r3, [r4, #16]
 8011672:	7561      	strb	r1, [r4, #21]
 8011674:	7da0      	ldrb	r0, [r4, #22]
 8011676:	f080 0001 	eor.w	r0, r0, #1
 801167a:	b002      	add	sp, #8
 801167c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011680:	9a01      	ldr	r2, [sp, #4]
 8011682:	601a      	str	r2, [r3, #0]
 8011684:	e7ee      	b.n	8011664 <ucdr_serialize_int32_t+0xc0>
 8011686:	68a2      	ldr	r2, [r4, #8]
 8011688:	6923      	ldr	r3, [r4, #16]
 801168a:	7da0      	ldrb	r0, [r4, #22]
 801168c:	7567      	strb	r7, [r4, #21]
 801168e:	1b92      	subs	r2, r2, r6
 8011690:	1b9b      	subs	r3, r3, r6
 8011692:	f080 0001 	eor.w	r0, r0, #1
 8011696:	60a2      	str	r2, [r4, #8]
 8011698:	6123      	str	r3, [r4, #16]
 801169a:	b002      	add	sp, #8
 801169c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116a0:	68a3      	ldr	r3, [r4, #8]
 80116a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80116a6:	701a      	strb	r2, [r3, #0]
 80116a8:	68a3      	ldr	r3, [r4, #8]
 80116aa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80116ae:	701a      	strb	r2, [r3, #0]
 80116b0:	68a3      	ldr	r3, [r4, #8]
 80116b2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80116b6:	701a      	strb	r2, [r3, #0]
 80116b8:	e7ad      	b.n	8011616 <ucdr_serialize_int32_t+0x72>
 80116ba:	4628      	mov	r0, r5
 80116bc:	ad01      	add	r5, sp, #4
 80116be:	4629      	mov	r1, r5
 80116c0:	4632      	mov	r2, r6
 80116c2:	f009 f800 	bl	801a6c6 <memcpy>
 80116c6:	68a0      	ldr	r0, [r4, #8]
 80116c8:	4642      	mov	r2, r8
 80116ca:	19a9      	adds	r1, r5, r6
 80116cc:	f008 fffb 	bl	801a6c6 <memcpy>
 80116d0:	e7a1      	b.n	8011616 <ucdr_serialize_int32_t+0x72>
 80116d2:	bf00      	nop

080116d4 <ucdr_deserialize_int32_t>:
 80116d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116d8:	460d      	mov	r5, r1
 80116da:	2104      	movs	r1, #4
 80116dc:	4604      	mov	r4, r0
 80116de:	f000 f8e7 	bl	80118b0 <ucdr_buffer_alignment>
 80116e2:	4601      	mov	r1, r0
 80116e4:	4620      	mov	r0, r4
 80116e6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80116ea:	f000 f925 	bl	8011938 <ucdr_advance_buffer>
 80116ee:	4620      	mov	r0, r4
 80116f0:	2104      	movs	r1, #4
 80116f2:	f000 f87f 	bl	80117f4 <ucdr_check_buffer_available_for>
 80116f6:	2800      	cmp	r0, #0
 80116f8:	d138      	bne.n	801176c <ucdr_deserialize_int32_t+0x98>
 80116fa:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80116fe:	42b7      	cmp	r7, r6
 8011700:	d92f      	bls.n	8011762 <ucdr_deserialize_int32_t+0x8e>
 8011702:	6922      	ldr	r2, [r4, #16]
 8011704:	60a7      	str	r7, [r4, #8]
 8011706:	1bbf      	subs	r7, r7, r6
 8011708:	443a      	add	r2, r7
 801170a:	f1c7 0904 	rsb	r9, r7, #4
 801170e:	6122      	str	r2, [r4, #16]
 8011710:	4649      	mov	r1, r9
 8011712:	4620      	mov	r0, r4
 8011714:	f000 f87a 	bl	801180c <ucdr_check_final_buffer_behavior>
 8011718:	2800      	cmp	r0, #0
 801171a:	d046      	beq.n	80117aa <ucdr_deserialize_int32_t+0xd6>
 801171c:	7d23      	ldrb	r3, [r4, #20]
 801171e:	2b01      	cmp	r3, #1
 8011720:	d05c      	beq.n	80117dc <ucdr_deserialize_int32_t+0x108>
 8011722:	78f3      	ldrb	r3, [r6, #3]
 8011724:	702b      	strb	r3, [r5, #0]
 8011726:	2f00      	cmp	r7, #0
 8011728:	d04c      	beq.n	80117c4 <ucdr_deserialize_int32_t+0xf0>
 801172a:	78b3      	ldrb	r3, [r6, #2]
 801172c:	706b      	strb	r3, [r5, #1]
 801172e:	2f01      	cmp	r7, #1
 8011730:	f105 0302 	add.w	r3, r5, #2
 8011734:	d04a      	beq.n	80117cc <ucdr_deserialize_int32_t+0xf8>
 8011736:	7873      	ldrb	r3, [r6, #1]
 8011738:	70ab      	strb	r3, [r5, #2]
 801173a:	2f02      	cmp	r7, #2
 801173c:	f105 0303 	add.w	r3, r5, #3
 8011740:	d048      	beq.n	80117d4 <ucdr_deserialize_int32_t+0x100>
 8011742:	7833      	ldrb	r3, [r6, #0]
 8011744:	70eb      	strb	r3, [r5, #3]
 8011746:	6923      	ldr	r3, [r4, #16]
 8011748:	68a2      	ldr	r2, [r4, #8]
 801174a:	7da0      	ldrb	r0, [r4, #22]
 801174c:	2104      	movs	r1, #4
 801174e:	3304      	adds	r3, #4
 8011750:	1bdb      	subs	r3, r3, r7
 8011752:	444a      	add	r2, r9
 8011754:	7561      	strb	r1, [r4, #21]
 8011756:	6123      	str	r3, [r4, #16]
 8011758:	60a2      	str	r2, [r4, #8]
 801175a:	f080 0001 	eor.w	r0, r0, #1
 801175e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011762:	2104      	movs	r1, #4
 8011764:	4620      	mov	r0, r4
 8011766:	f000 f851 	bl	801180c <ucdr_check_final_buffer_behavior>
 801176a:	b1b0      	cbz	r0, 801179a <ucdr_deserialize_int32_t+0xc6>
 801176c:	7d23      	ldrb	r3, [r4, #20]
 801176e:	2b01      	cmp	r3, #1
 8011770:	68a3      	ldr	r3, [r4, #8]
 8011772:	d017      	beq.n	80117a4 <ucdr_deserialize_int32_t+0xd0>
 8011774:	78db      	ldrb	r3, [r3, #3]
 8011776:	702b      	strb	r3, [r5, #0]
 8011778:	68a3      	ldr	r3, [r4, #8]
 801177a:	789b      	ldrb	r3, [r3, #2]
 801177c:	706b      	strb	r3, [r5, #1]
 801177e:	68a3      	ldr	r3, [r4, #8]
 8011780:	785b      	ldrb	r3, [r3, #1]
 8011782:	70ab      	strb	r3, [r5, #2]
 8011784:	68a3      	ldr	r3, [r4, #8]
 8011786:	781b      	ldrb	r3, [r3, #0]
 8011788:	70eb      	strb	r3, [r5, #3]
 801178a:	68a2      	ldr	r2, [r4, #8]
 801178c:	6923      	ldr	r3, [r4, #16]
 801178e:	3204      	adds	r2, #4
 8011790:	3304      	adds	r3, #4
 8011792:	2104      	movs	r1, #4
 8011794:	60a2      	str	r2, [r4, #8]
 8011796:	6123      	str	r3, [r4, #16]
 8011798:	7561      	strb	r1, [r4, #21]
 801179a:	7da0      	ldrb	r0, [r4, #22]
 801179c:	f080 0001 	eor.w	r0, r0, #1
 80117a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	602b      	str	r3, [r5, #0]
 80117a8:	e7ef      	b.n	801178a <ucdr_deserialize_int32_t+0xb6>
 80117aa:	68a2      	ldr	r2, [r4, #8]
 80117ac:	6923      	ldr	r3, [r4, #16]
 80117ae:	7da0      	ldrb	r0, [r4, #22]
 80117b0:	f884 8015 	strb.w	r8, [r4, #21]
 80117b4:	1bd2      	subs	r2, r2, r7
 80117b6:	1bdb      	subs	r3, r3, r7
 80117b8:	60a2      	str	r2, [r4, #8]
 80117ba:	6123      	str	r3, [r4, #16]
 80117bc:	f080 0001 	eor.w	r0, r0, #1
 80117c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117c4:	68a3      	ldr	r3, [r4, #8]
 80117c6:	789b      	ldrb	r3, [r3, #2]
 80117c8:	706b      	strb	r3, [r5, #1]
 80117ca:	1cab      	adds	r3, r5, #2
 80117cc:	68a2      	ldr	r2, [r4, #8]
 80117ce:	7852      	ldrb	r2, [r2, #1]
 80117d0:	f803 2b01 	strb.w	r2, [r3], #1
 80117d4:	68a2      	ldr	r2, [r4, #8]
 80117d6:	7812      	ldrb	r2, [r2, #0]
 80117d8:	701a      	strb	r2, [r3, #0]
 80117da:	e7b4      	b.n	8011746 <ucdr_deserialize_int32_t+0x72>
 80117dc:	4631      	mov	r1, r6
 80117de:	463a      	mov	r2, r7
 80117e0:	4628      	mov	r0, r5
 80117e2:	f008 ff70 	bl	801a6c6 <memcpy>
 80117e6:	68a1      	ldr	r1, [r4, #8]
 80117e8:	464a      	mov	r2, r9
 80117ea:	19e8      	adds	r0, r5, r7
 80117ec:	f008 ff6b 	bl	801a6c6 <memcpy>
 80117f0:	e7a9      	b.n	8011746 <ucdr_deserialize_int32_t+0x72>
 80117f2:	bf00      	nop

080117f4 <ucdr_check_buffer_available_for>:
 80117f4:	7d83      	ldrb	r3, [r0, #22]
 80117f6:	b93b      	cbnz	r3, 8011808 <ucdr_check_buffer_available_for+0x14>
 80117f8:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80117fc:	4419      	add	r1, r3
 80117fe:	4288      	cmp	r0, r1
 8011800:	bf34      	ite	cc
 8011802:	2000      	movcc	r0, #0
 8011804:	2001      	movcs	r0, #1
 8011806:	4770      	bx	lr
 8011808:	2000      	movs	r0, #0
 801180a:	4770      	bx	lr

0801180c <ucdr_check_final_buffer_behavior>:
 801180c:	7d83      	ldrb	r3, [r0, #22]
 801180e:	b943      	cbnz	r3, 8011822 <ucdr_check_final_buffer_behavior+0x16>
 8011810:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8011814:	4291      	cmp	r1, r2
 8011816:	b510      	push	{r4, lr}
 8011818:	4604      	mov	r4, r0
 801181a:	d205      	bcs.n	8011828 <ucdr_check_final_buffer_behavior+0x1c>
 801181c:	2301      	movs	r3, #1
 801181e:	4618      	mov	r0, r3
 8011820:	bd10      	pop	{r4, pc}
 8011822:	2300      	movs	r3, #0
 8011824:	4618      	mov	r0, r3
 8011826:	4770      	bx	lr
 8011828:	6982      	ldr	r2, [r0, #24]
 801182a:	b13a      	cbz	r2, 801183c <ucdr_check_final_buffer_behavior+0x30>
 801182c:	69c1      	ldr	r1, [r0, #28]
 801182e:	4790      	blx	r2
 8011830:	f080 0301 	eor.w	r3, r0, #1
 8011834:	b2db      	uxtb	r3, r3
 8011836:	75a0      	strb	r0, [r4, #22]
 8011838:	4618      	mov	r0, r3
 801183a:	bd10      	pop	{r4, pc}
 801183c:	2001      	movs	r0, #1
 801183e:	75a0      	strb	r0, [r4, #22]
 8011840:	e7fa      	b.n	8011838 <ucdr_check_final_buffer_behavior+0x2c>
 8011842:	bf00      	nop

08011844 <ucdr_set_on_full_buffer_callback>:
 8011844:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8011848:	4770      	bx	lr
 801184a:	bf00      	nop

0801184c <ucdr_init_buffer_origin_offset_endian>:
 801184c:	b430      	push	{r4, r5}
 801184e:	9c02      	ldr	r4, [sp, #8]
 8011850:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8011854:	6001      	str	r1, [r0, #0]
 8011856:	440a      	add	r2, r1
 8011858:	60c3      	str	r3, [r0, #12]
 801185a:	4421      	add	r1, r4
 801185c:	441c      	add	r4, r3
 801185e:	2300      	movs	r3, #0
 8011860:	6104      	str	r4, [r0, #16]
 8011862:	7505      	strb	r5, [r0, #20]
 8011864:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8011868:	bc30      	pop	{r4, r5}
 801186a:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801186e:	7543      	strb	r3, [r0, #21]
 8011870:	7583      	strb	r3, [r0, #22]
 8011872:	4770      	bx	lr

08011874 <ucdr_init_buffer_origin_offset>:
 8011874:	b510      	push	{r4, lr}
 8011876:	b082      	sub	sp, #8
 8011878:	9c04      	ldr	r4, [sp, #16]
 801187a:	9400      	str	r4, [sp, #0]
 801187c:	2401      	movs	r4, #1
 801187e:	9401      	str	r4, [sp, #4]
 8011880:	f7ff ffe4 	bl	801184c <ucdr_init_buffer_origin_offset_endian>
 8011884:	b002      	add	sp, #8
 8011886:	bd10      	pop	{r4, pc}

08011888 <ucdr_init_buffer_origin>:
 8011888:	b510      	push	{r4, lr}
 801188a:	b082      	sub	sp, #8
 801188c:	2400      	movs	r4, #0
 801188e:	9400      	str	r4, [sp, #0]
 8011890:	f7ff fff0 	bl	8011874 <ucdr_init_buffer_origin_offset>
 8011894:	b002      	add	sp, #8
 8011896:	bd10      	pop	{r4, pc}

08011898 <ucdr_init_buffer>:
 8011898:	2300      	movs	r3, #0
 801189a:	f7ff bff5 	b.w	8011888 <ucdr_init_buffer_origin>
 801189e:	bf00      	nop

080118a0 <ucdr_alignment>:
 80118a0:	fbb0 f3f1 	udiv	r3, r0, r1
 80118a4:	fb03 0011 	mls	r0, r3, r1, r0
 80118a8:	1a08      	subs	r0, r1, r0
 80118aa:	3901      	subs	r1, #1
 80118ac:	4008      	ands	r0, r1
 80118ae:	4770      	bx	lr

080118b0 <ucdr_buffer_alignment>:
 80118b0:	7d43      	ldrb	r3, [r0, #21]
 80118b2:	428b      	cmp	r3, r1
 80118b4:	d208      	bcs.n	80118c8 <ucdr_buffer_alignment+0x18>
 80118b6:	6903      	ldr	r3, [r0, #16]
 80118b8:	fbb3 f0f1 	udiv	r0, r3, r1
 80118bc:	fb01 3010 	mls	r0, r1, r0, r3
 80118c0:	1a08      	subs	r0, r1, r0
 80118c2:	3901      	subs	r1, #1
 80118c4:	4008      	ands	r0, r1
 80118c6:	4770      	bx	lr
 80118c8:	2000      	movs	r0, #0
 80118ca:	4770      	bx	lr

080118cc <ucdr_align_to>:
 80118cc:	b570      	push	{r4, r5, r6, lr}
 80118ce:	4604      	mov	r4, r0
 80118d0:	460e      	mov	r6, r1
 80118d2:	f7ff ffed 	bl	80118b0 <ucdr_buffer_alignment>
 80118d6:	68a5      	ldr	r5, [r4, #8]
 80118d8:	6863      	ldr	r3, [r4, #4]
 80118da:	6922      	ldr	r2, [r4, #16]
 80118dc:	7566      	strb	r6, [r4, #21]
 80118de:	4405      	add	r5, r0
 80118e0:	42ab      	cmp	r3, r5
 80118e2:	4410      	add	r0, r2
 80118e4:	bf28      	it	cs
 80118e6:	462b      	movcs	r3, r5
 80118e8:	6120      	str	r0, [r4, #16]
 80118ea:	60a3      	str	r3, [r4, #8]
 80118ec:	bd70      	pop	{r4, r5, r6, pc}
 80118ee:	bf00      	nop

080118f0 <ucdr_buffer_length>:
 80118f0:	6882      	ldr	r2, [r0, #8]
 80118f2:	6800      	ldr	r0, [r0, #0]
 80118f4:	1a10      	subs	r0, r2, r0
 80118f6:	4770      	bx	lr

080118f8 <ucdr_buffer_remaining>:
 80118f8:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80118fc:	1a10      	subs	r0, r2, r0
 80118fe:	4770      	bx	lr

08011900 <ucdr_check_final_buffer_behavior_array>:
 8011900:	b538      	push	{r3, r4, r5, lr}
 8011902:	7d83      	ldrb	r3, [r0, #22]
 8011904:	b963      	cbnz	r3, 8011920 <ucdr_check_final_buffer_behavior_array+0x20>
 8011906:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801190a:	429a      	cmp	r2, r3
 801190c:	4604      	mov	r4, r0
 801190e:	460d      	mov	r5, r1
 8011910:	d308      	bcc.n	8011924 <ucdr_check_final_buffer_behavior_array+0x24>
 8011912:	b139      	cbz	r1, 8011924 <ucdr_check_final_buffer_behavior_array+0x24>
 8011914:	6983      	ldr	r3, [r0, #24]
 8011916:	b163      	cbz	r3, 8011932 <ucdr_check_final_buffer_behavior_array+0x32>
 8011918:	69c1      	ldr	r1, [r0, #28]
 801191a:	4798      	blx	r3
 801191c:	75a0      	strb	r0, [r4, #22]
 801191e:	b108      	cbz	r0, 8011924 <ucdr_check_final_buffer_behavior_array+0x24>
 8011920:	2000      	movs	r0, #0
 8011922:	bd38      	pop	{r3, r4, r5, pc}
 8011924:	4620      	mov	r0, r4
 8011926:	f7ff ffe7 	bl	80118f8 <ucdr_buffer_remaining>
 801192a:	42a8      	cmp	r0, r5
 801192c:	bf28      	it	cs
 801192e:	4628      	movcs	r0, r5
 8011930:	bd38      	pop	{r3, r4, r5, pc}
 8011932:	2301      	movs	r3, #1
 8011934:	7583      	strb	r3, [r0, #22]
 8011936:	e7f3      	b.n	8011920 <ucdr_check_final_buffer_behavior_array+0x20>

08011938 <ucdr_advance_buffer>:
 8011938:	b538      	push	{r3, r4, r5, lr}
 801193a:	4604      	mov	r4, r0
 801193c:	460d      	mov	r5, r1
 801193e:	f7ff ff59 	bl	80117f4 <ucdr_check_buffer_available_for>
 8011942:	b178      	cbz	r0, 8011964 <ucdr_advance_buffer+0x2c>
 8011944:	68a3      	ldr	r3, [r4, #8]
 8011946:	6921      	ldr	r1, [r4, #16]
 8011948:	442b      	add	r3, r5
 801194a:	60a3      	str	r3, [r4, #8]
 801194c:	2301      	movs	r3, #1
 801194e:	4429      	add	r1, r5
 8011950:	7563      	strb	r3, [r4, #21]
 8011952:	6121      	str	r1, [r4, #16]
 8011954:	bd38      	pop	{r3, r4, r5, pc}
 8011956:	68a2      	ldr	r2, [r4, #8]
 8011958:	6923      	ldr	r3, [r4, #16]
 801195a:	4402      	add	r2, r0
 801195c:	4403      	add	r3, r0
 801195e:	1a2d      	subs	r5, r5, r0
 8011960:	60a2      	str	r2, [r4, #8]
 8011962:	6123      	str	r3, [r4, #16]
 8011964:	2201      	movs	r2, #1
 8011966:	4629      	mov	r1, r5
 8011968:	4620      	mov	r0, r4
 801196a:	f7ff ffc9 	bl	8011900 <ucdr_check_final_buffer_behavior_array>
 801196e:	2800      	cmp	r0, #0
 8011970:	d1f1      	bne.n	8011956 <ucdr_advance_buffer+0x1e>
 8011972:	2301      	movs	r3, #1
 8011974:	7563      	strb	r3, [r4, #21]
 8011976:	bd38      	pop	{r3, r4, r5, pc}

08011978 <uxr_buffer_delete_entity>:
 8011978:	b530      	push	{r4, r5, lr}
 801197a:	b08f      	sub	sp, #60	; 0x3c
 801197c:	2403      	movs	r4, #3
 801197e:	2500      	movs	r5, #0
 8011980:	e9cd 4500 	strd	r4, r5, [sp]
 8011984:	9202      	str	r2, [sp, #8]
 8011986:	ab06      	add	r3, sp, #24
 8011988:	2204      	movs	r2, #4
 801198a:	9103      	str	r1, [sp, #12]
 801198c:	4604      	mov	r4, r0
 801198e:	f001 fa85 	bl	8012e9c <uxr_prepare_stream_to_write_submessage>
 8011992:	b918      	cbnz	r0, 801199c <uxr_buffer_delete_entity+0x24>
 8011994:	4604      	mov	r4, r0
 8011996:	4620      	mov	r0, r4
 8011998:	b00f      	add	sp, #60	; 0x3c
 801199a:	bd30      	pop	{r4, r5, pc}
 801199c:	9902      	ldr	r1, [sp, #8]
 801199e:	aa05      	add	r2, sp, #20
 80119a0:	4620      	mov	r0, r4
 80119a2:	f001 fbb5 	bl	8013110 <uxr_init_base_object_request>
 80119a6:	a905      	add	r1, sp, #20
 80119a8:	4604      	mov	r4, r0
 80119aa:	a806      	add	r0, sp, #24
 80119ac:	f002 fdf0 	bl	8014590 <uxr_serialize_DELETE_Payload>
 80119b0:	4620      	mov	r0, r4
 80119b2:	b00f      	add	sp, #60	; 0x3c
 80119b4:	bd30      	pop	{r4, r5, pc}
 80119b6:	bf00      	nop

080119b8 <uxr_common_create_entity>:
 80119b8:	b530      	push	{r4, r5, lr}
 80119ba:	f3c2 4507 	ubfx	r5, r2, #16, #8
 80119be:	b08d      	sub	sp, #52	; 0x34
 80119c0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80119c4:	2d01      	cmp	r5, #1
 80119c6:	bf0c      	ite	eq
 80119c8:	f003 0201 	andeq.w	r2, r3, #1
 80119cc:	2200      	movne	r2, #0
 80119ce:	330e      	adds	r3, #14
 80119d0:	4604      	mov	r4, r0
 80119d2:	441a      	add	r2, r3
 80119d4:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 80119d8:	9001      	str	r0, [sp, #4]
 80119da:	2101      	movs	r1, #1
 80119dc:	9100      	str	r1, [sp, #0]
 80119de:	b292      	uxth	r2, r2
 80119e0:	9903      	ldr	r1, [sp, #12]
 80119e2:	ab04      	add	r3, sp, #16
 80119e4:	4620      	mov	r0, r4
 80119e6:	f001 fa59 	bl	8012e9c <uxr_prepare_stream_to_write_submessage>
 80119ea:	b918      	cbnz	r0, 80119f4 <uxr_common_create_entity+0x3c>
 80119ec:	4604      	mov	r4, r0
 80119ee:	4620      	mov	r0, r4
 80119f0:	b00d      	add	sp, #52	; 0x34
 80119f2:	bd30      	pop	{r4, r5, pc}
 80119f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80119f6:	9902      	ldr	r1, [sp, #8]
 80119f8:	4620      	mov	r0, r4
 80119fa:	f001 fb89 	bl	8013110 <uxr_init_base_object_request>
 80119fe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011a00:	4604      	mov	r4, r0
 8011a02:	a804      	add	r0, sp, #16
 8011a04:	f002 fd18 	bl	8014438 <uxr_serialize_CREATE_Payload>
 8011a08:	4620      	mov	r0, r4
 8011a0a:	b00d      	add	sp, #52	; 0x34
 8011a0c:	bd30      	pop	{r4, r5, pc}
 8011a0e:	bf00      	nop

08011a10 <uxr_buffer_create_participant_bin>:
 8011a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a12:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8011a16:	ac11      	add	r4, sp, #68	; 0x44
 8011a18:	9103      	str	r1, [sp, #12]
 8011a1a:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 8011a1c:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 8011a20:	2103      	movs	r1, #3
 8011a22:	7221      	strb	r1, [r4, #8]
 8011a24:	2301      	movs	r3, #1
 8011a26:	2100      	movs	r1, #0
 8011a28:	7123      	strb	r3, [r4, #4]
 8011a2a:	f89d 7274 	ldrb.w	r7, [sp, #628]	; 0x274
 8011a2e:	9202      	str	r2, [sp, #8]
 8011a30:	4605      	mov	r5, r0
 8011a32:	f88d 1014 	strb.w	r1, [sp, #20]
 8011a36:	b1ce      	cbz	r6, 8011a6c <uxr_buffer_create_participant_bin+0x5c>
 8011a38:	f88d 301c 	strb.w	r3, [sp, #28]
 8011a3c:	9608      	str	r6, [sp, #32]
 8011a3e:	a809      	add	r0, sp, #36	; 0x24
 8011a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011a44:	a915      	add	r1, sp, #84	; 0x54
 8011a46:	f7ff ff27 	bl	8011898 <ucdr_init_buffer>
 8011a4a:	a905      	add	r1, sp, #20
 8011a4c:	a809      	add	r0, sp, #36	; 0x24
 8011a4e:	f002 f8bb 	bl	8013bc8 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8011a52:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011a54:	9401      	str	r4, [sp, #4]
 8011a56:	b283      	uxth	r3, r0
 8011a58:	9700      	str	r7, [sp, #0]
 8011a5a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011a5e:	60e0      	str	r0, [r4, #12]
 8011a60:	4628      	mov	r0, r5
 8011a62:	f7ff ffa9 	bl	80119b8 <uxr_common_create_entity>
 8011a66:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 8011a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a6c:	f88d 601c 	strb.w	r6, [sp, #28]
 8011a70:	e7e5      	b.n	8011a3e <uxr_buffer_create_participant_bin+0x2e>
 8011a72:	bf00      	nop

08011a74 <uxr_buffer_create_topic_bin>:
 8011a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a76:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8011a7a:	ac13      	add	r4, sp, #76	; 0x4c
 8011a7c:	4605      	mov	r5, r0
 8011a7e:	9105      	str	r1, [sp, #20]
 8011a80:	4618      	mov	r0, r3
 8011a82:	a997      	add	r1, sp, #604	; 0x25c
 8011a84:	2602      	movs	r6, #2
 8011a86:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011a8a:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 8011a8e:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 8011a92:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 8011a94:	f000 f994 	bl	8011dc0 <uxr_object_id_to_raw>
 8011a98:	9a9e      	ldr	r2, [sp, #632]	; 0x278
 8011a9a:	9206      	str	r2, [sp, #24]
 8011a9c:	2303      	movs	r3, #3
 8011a9e:	2101      	movs	r1, #1
 8011aa0:	7223      	strb	r3, [r4, #8]
 8011aa2:	a80b      	add	r0, sp, #44	; 0x2c
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011aaa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8011aae:	a917      	add	r1, sp, #92	; 0x5c
 8011ab0:	f88d 301c 	strb.w	r3, [sp, #28]
 8011ab4:	960a      	str	r6, [sp, #40]	; 0x28
 8011ab6:	f7ff feef 	bl	8011898 <ucdr_init_buffer>
 8011aba:	a906      	add	r1, sp, #24
 8011abc:	a80b      	add	r0, sp, #44	; 0x2c
 8011abe:	f002 f8a5 	bl	8013c0c <uxr_serialize_OBJK_Topic_Binary>
 8011ac2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8011ac4:	9401      	str	r4, [sp, #4]
 8011ac6:	9700      	str	r7, [sp, #0]
 8011ac8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011acc:	4628      	mov	r0, r5
 8011ace:	b2b3      	uxth	r3, r6
 8011ad0:	60e6      	str	r6, [r4, #12]
 8011ad2:	f7ff ff71 	bl	80119b8 <uxr_common_create_entity>
 8011ad6:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8011ada:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011adc <uxr_buffer_create_publisher_bin>:
 8011adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ade:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8011ae2:	ac0e      	add	r4, sp, #56	; 0x38
 8011ae4:	4605      	mov	r5, r0
 8011ae6:	9105      	str	r1, [sp, #20]
 8011ae8:	4618      	mov	r0, r3
 8011aea:	2603      	movs	r6, #3
 8011aec:	a992      	add	r1, sp, #584	; 0x248
 8011aee:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011af2:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8011af6:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8011afa:	f000 f961 	bl	8011dc0 <uxr_object_id_to_raw>
 8011afe:	2300      	movs	r3, #0
 8011b00:	a806      	add	r0, sp, #24
 8011b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011b06:	a912      	add	r1, sp, #72	; 0x48
 8011b08:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8011b0c:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8011b10:	7226      	strb	r6, [r4, #8]
 8011b12:	f7ff fec1 	bl	8011898 <ucdr_init_buffer>
 8011b16:	a993      	add	r1, sp, #588	; 0x24c
 8011b18:	a806      	add	r0, sp, #24
 8011b1a:	f002 f92b 	bl	8013d74 <uxr_serialize_OBJK_Publisher_Binary>
 8011b1e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011b20:	9700      	str	r7, [sp, #0]
 8011b22:	9401      	str	r4, [sp, #4]
 8011b24:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011b28:	4628      	mov	r0, r5
 8011b2a:	b2b3      	uxth	r3, r6
 8011b2c:	60e6      	str	r6, [r4, #12]
 8011b2e:	f7ff ff43 	bl	80119b8 <uxr_common_create_entity>
 8011b32:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8011b36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011b38 <uxr_buffer_create_subscriber_bin>:
 8011b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b3a:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8011b3e:	ac0e      	add	r4, sp, #56	; 0x38
 8011b40:	4605      	mov	r5, r0
 8011b42:	9105      	str	r1, [sp, #20]
 8011b44:	4618      	mov	r0, r3
 8011b46:	a992      	add	r1, sp, #584	; 0x248
 8011b48:	2604      	movs	r6, #4
 8011b4a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011b4e:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8011b52:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8011b56:	f000 f933 	bl	8011dc0 <uxr_object_id_to_raw>
 8011b5a:	2103      	movs	r1, #3
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	a806      	add	r0, sp, #24
 8011b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011b64:	7221      	strb	r1, [r4, #8]
 8011b66:	a912      	add	r1, sp, #72	; 0x48
 8011b68:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8011b6c:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8011b70:	f7ff fe92 	bl	8011898 <ucdr_init_buffer>
 8011b74:	a993      	add	r1, sp, #588	; 0x24c
 8011b76:	a806      	add	r0, sp, #24
 8011b78:	f002 f9ac 	bl	8013ed4 <uxr_serialize_OBJK_Subscriber_Binary>
 8011b7c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011b7e:	9700      	str	r7, [sp, #0]
 8011b80:	9401      	str	r4, [sp, #4]
 8011b82:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011b86:	4628      	mov	r0, r5
 8011b88:	b2b3      	uxth	r3, r6
 8011b8a:	60e6      	str	r6, [r4, #12]
 8011b8c:	f7ff ff14 	bl	80119b8 <uxr_common_create_entity>
 8011b90:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8011b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b96:	bf00      	nop

08011b98 <uxr_buffer_create_datawriter_bin>:
 8011b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b9c:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8011ba0:	ac1d      	add	r4, sp, #116	; 0x74
 8011ba2:	2505      	movs	r5, #5
 8011ba4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011ba8:	9105      	str	r1, [sp, #20]
 8011baa:	4606      	mov	r6, r0
 8011bac:	a9a1      	add	r1, sp, #644	; 0x284
 8011bae:	4618      	mov	r0, r3
 8011bb0:	7125      	strb	r5, [r4, #4]
 8011bb2:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8011bb6:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8011bba:	2703      	movs	r7, #3
 8011bbc:	f000 f900 	bl	8011dc0 <uxr_object_id_to_raw>
 8011bc0:	a90e      	add	r1, sp, #56	; 0x38
 8011bc2:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 8011bc4:	7227      	strb	r7, [r4, #8]
 8011bc6:	f000 f8fb 	bl	8011dc0 <uxr_object_id_to_raw>
 8011bca:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8011bce:	f89d 12a5 	ldrb.w	r1, [sp, #677]	; 0x2a5
 8011bd2:	3d00      	subs	r5, #0
 8011bd4:	f04f 0300 	mov.w	r3, #0
 8011bd8:	bf18      	it	ne
 8011bda:	2501      	movne	r5, #1
 8011bdc:	2201      	movs	r2, #1
 8011bde:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8011be2:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 8011be6:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8011bea:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8011bee:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8011bf2:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8011bf6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011bfa:	bb89      	cbnz	r1, 8011c60 <uxr_buffer_create_datawriter_bin+0xc8>
 8011bfc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011c00:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8011c04:	f04f 0c13 	mov.w	ip, #19
 8011c08:	250b      	movs	r5, #11
 8011c0a:	2221      	movs	r2, #33	; 0x21
 8011c0c:	2111      	movs	r1, #17
 8011c0e:	2009      	movs	r0, #9
 8011c10:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8011c14:	b923      	cbnz	r3, 8011c20 <uxr_buffer_create_datawriter_bin+0x88>
 8011c16:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8011c1a:	4672      	mov	r2, lr
 8011c1c:	4661      	mov	r1, ip
 8011c1e:	4628      	mov	r0, r5
 8011c20:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8011c24:	2b01      	cmp	r3, #1
 8011c26:	d025      	beq.n	8011c74 <uxr_buffer_create_datawriter_bin+0xdc>
 8011c28:	2b03      	cmp	r3, #3
 8011c2a:	d029      	beq.n	8011c80 <uxr_buffer_create_datawriter_bin+0xe8>
 8011c2c:	b32b      	cbz	r3, 8011c7a <uxr_buffer_create_datawriter_bin+0xe2>
 8011c2e:	a806      	add	r0, sp, #24
 8011c30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011c34:	a921      	add	r1, sp, #132	; 0x84
 8011c36:	f7ff fe2f 	bl	8011898 <ucdr_init_buffer>
 8011c3a:	a90e      	add	r1, sp, #56	; 0x38
 8011c3c:	a806      	add	r0, sp, #24
 8011c3e:	f002 f9fb 	bl	8014038 <uxr_serialize_OBJK_DataWriter_Binary>
 8011c42:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011c44:	9401      	str	r4, [sp, #4]
 8011c46:	b283      	uxth	r3, r0
 8011c48:	f8cd 8000 	str.w	r8, [sp]
 8011c4c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011c50:	60e0      	str	r0, [r4, #12]
 8011c52:	4630      	mov	r0, r6
 8011c54:	f7ff feb0 	bl	80119b8 <uxr_common_create_entity>
 8011c58:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8011c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c60:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8011c64:	f04f 0c12 	mov.w	ip, #18
 8011c68:	250a      	movs	r5, #10
 8011c6a:	2220      	movs	r2, #32
 8011c6c:	2110      	movs	r1, #16
 8011c6e:	2008      	movs	r0, #8
 8011c70:	2702      	movs	r7, #2
 8011c72:	e7cd      	b.n	8011c10 <uxr_buffer_create_datawriter_bin+0x78>
 8011c74:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8011c78:	e7d9      	b.n	8011c2e <uxr_buffer_create_datawriter_bin+0x96>
 8011c7a:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8011c7e:	e7d6      	b.n	8011c2e <uxr_buffer_create_datawriter_bin+0x96>
 8011c80:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011c84:	e7d3      	b.n	8011c2e <uxr_buffer_create_datawriter_bin+0x96>
 8011c86:	bf00      	nop

08011c88 <uxr_buffer_create_datareader_bin>:
 8011c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c8c:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8011c90:	ac1f      	add	r4, sp, #124	; 0x7c
 8011c92:	2506      	movs	r5, #6
 8011c94:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011c98:	9105      	str	r1, [sp, #20]
 8011c9a:	4606      	mov	r6, r0
 8011c9c:	a9a3      	add	r1, sp, #652	; 0x28c
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	7125      	strb	r5, [r4, #4]
 8011ca2:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 8011ca6:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 8011caa:	2703      	movs	r7, #3
 8011cac:	f000 f888 	bl	8011dc0 <uxr_object_id_to_raw>
 8011cb0:	a90e      	add	r1, sp, #56	; 0x38
 8011cb2:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 8011cb4:	7227      	strb	r7, [r4, #8]
 8011cb6:	f000 f883 	bl	8011dc0 <uxr_object_id_to_raw>
 8011cba:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8011cbe:	f89d 12ad 	ldrb.w	r1, [sp, #685]	; 0x2ad
 8011cc2:	3d00      	subs	r5, #0
 8011cc4:	f04f 0300 	mov.w	r3, #0
 8011cc8:	bf18      	it	ne
 8011cca:	2501      	movne	r5, #1
 8011ccc:	2201      	movs	r2, #1
 8011cce:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8011cd2:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 8011cd6:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8011cda:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8011cde:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8011ce2:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8011ce6:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8011cea:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011cee:	bb89      	cbnz	r1, 8011d54 <uxr_buffer_create_datareader_bin+0xcc>
 8011cf0:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011cf4:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8011cf8:	f04f 0c13 	mov.w	ip, #19
 8011cfc:	250b      	movs	r5, #11
 8011cfe:	2221      	movs	r2, #33	; 0x21
 8011d00:	2111      	movs	r1, #17
 8011d02:	2009      	movs	r0, #9
 8011d04:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 8011d08:	b923      	cbnz	r3, 8011d14 <uxr_buffer_create_datareader_bin+0x8c>
 8011d0a:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8011d0e:	4672      	mov	r2, lr
 8011d10:	4661      	mov	r1, ip
 8011d12:	4628      	mov	r0, r5
 8011d14:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 8011d18:	2b01      	cmp	r3, #1
 8011d1a:	d025      	beq.n	8011d68 <uxr_buffer_create_datareader_bin+0xe0>
 8011d1c:	2b03      	cmp	r3, #3
 8011d1e:	d029      	beq.n	8011d74 <uxr_buffer_create_datareader_bin+0xec>
 8011d20:	b32b      	cbz	r3, 8011d6e <uxr_buffer_create_datareader_bin+0xe6>
 8011d22:	a806      	add	r0, sp, #24
 8011d24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011d28:	a923      	add	r1, sp, #140	; 0x8c
 8011d2a:	f7ff fdb5 	bl	8011898 <ucdr_init_buffer>
 8011d2e:	a90e      	add	r1, sp, #56	; 0x38
 8011d30:	a806      	add	r0, sp, #24
 8011d32:	f002 f945 	bl	8013fc0 <uxr_serialize_OBJK_DataReader_Binary>
 8011d36:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011d38:	9401      	str	r4, [sp, #4]
 8011d3a:	b283      	uxth	r3, r0
 8011d3c:	f8cd 8000 	str.w	r8, [sp]
 8011d40:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011d44:	60e0      	str	r0, [r4, #12]
 8011d46:	4630      	mov	r0, r6
 8011d48:	f7ff fe36 	bl	80119b8 <uxr_common_create_entity>
 8011d4c:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8011d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d54:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8011d58:	f04f 0c12 	mov.w	ip, #18
 8011d5c:	250a      	movs	r5, #10
 8011d5e:	2220      	movs	r2, #32
 8011d60:	2110      	movs	r1, #16
 8011d62:	2008      	movs	r0, #8
 8011d64:	2702      	movs	r7, #2
 8011d66:	e7cd      	b.n	8011d04 <uxr_buffer_create_datareader_bin+0x7c>
 8011d68:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8011d6c:	e7d9      	b.n	8011d22 <uxr_buffer_create_datareader_bin+0x9a>
 8011d6e:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8011d72:	e7d6      	b.n	8011d22 <uxr_buffer_create_datareader_bin+0x9a>
 8011d74:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011d78:	e7d3      	b.n	8011d22 <uxr_buffer_create_datareader_bin+0x9a>
 8011d7a:	bf00      	nop

08011d7c <uxr_object_id>:
 8011d7c:	b082      	sub	sp, #8
 8011d7e:	2300      	movs	r3, #0
 8011d80:	f88d 1006 	strb.w	r1, [sp, #6]
 8011d84:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011d88:	f360 030f 	bfi	r3, r0, #0, #16
 8011d8c:	f362 431f 	bfi	r3, r2, #16, #16
 8011d90:	4618      	mov	r0, r3
 8011d92:	b002      	add	sp, #8
 8011d94:	4770      	bx	lr
 8011d96:	bf00      	nop

08011d98 <uxr_object_id_from_raw>:
 8011d98:	7843      	ldrb	r3, [r0, #1]
 8011d9a:	7801      	ldrb	r1, [r0, #0]
 8011d9c:	b082      	sub	sp, #8
 8011d9e:	f003 000f 	and.w	r0, r3, #15
 8011da2:	f88d 0006 	strb.w	r0, [sp, #6]
 8011da6:	091b      	lsrs	r3, r3, #4
 8011da8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8011dac:	2200      	movs	r2, #0
 8011dae:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8011db2:	f363 020f 	bfi	r2, r3, #0, #16
 8011db6:	f361 421f 	bfi	r2, r1, #16, #16
 8011dba:	4610      	mov	r0, r2
 8011dbc:	b002      	add	sp, #8
 8011dbe:	4770      	bx	lr

08011dc0 <uxr_object_id_to_raw>:
 8011dc0:	4602      	mov	r2, r0
 8011dc2:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8011dc6:	b082      	sub	sp, #8
 8011dc8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8011dcc:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8011dd0:	700a      	strb	r2, [r1, #0]
 8011dd2:	704b      	strb	r3, [r1, #1]
 8011dd4:	b002      	add	sp, #8
 8011dd6:	4770      	bx	lr

08011dd8 <uxr_buffer_request_data>:
 8011dd8:	b530      	push	{r4, r5, lr}
 8011dda:	b095      	sub	sp, #84	; 0x54
 8011ddc:	4604      	mov	r4, r0
 8011dde:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8011de0:	9105      	str	r1, [sp, #20]
 8011de2:	2d00      	cmp	r5, #0
 8011de4:	bf14      	ite	ne
 8011de6:	2101      	movne	r1, #1
 8011de8:	2100      	moveq	r1, #0
 8011dea:	9204      	str	r2, [sp, #16]
 8011dec:	f04f 0200 	mov.w	r2, #0
 8011df0:	9303      	str	r3, [sp, #12]
 8011df2:	f88d 301c 	strb.w	r3, [sp, #28]
 8011df6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8011dfa:	f88d 201d 	strb.w	r2, [sp, #29]
 8011dfe:	f88d 201e 	strb.w	r2, [sp, #30]
 8011e02:	d021      	beq.n	8011e48 <uxr_buffer_request_data+0x70>
 8011e04:	686a      	ldr	r2, [r5, #4]
 8011e06:	682b      	ldr	r3, [r5, #0]
 8011e08:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 8011e0c:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8011e10:	2210      	movs	r2, #16
 8011e12:	2000      	movs	r0, #0
 8011e14:	2108      	movs	r1, #8
 8011e16:	e9cd 1000 	strd	r1, r0, [sp]
 8011e1a:	ab0c      	add	r3, sp, #48	; 0x30
 8011e1c:	9905      	ldr	r1, [sp, #20]
 8011e1e:	4620      	mov	r0, r4
 8011e20:	f001 f83c 	bl	8012e9c <uxr_prepare_stream_to_write_submessage>
 8011e24:	b918      	cbnz	r0, 8011e2e <uxr_buffer_request_data+0x56>
 8011e26:	4604      	mov	r4, r0
 8011e28:	4620      	mov	r0, r4
 8011e2a:	b015      	add	sp, #84	; 0x54
 8011e2c:	bd30      	pop	{r4, r5, pc}
 8011e2e:	9904      	ldr	r1, [sp, #16]
 8011e30:	aa06      	add	r2, sp, #24
 8011e32:	4620      	mov	r0, r4
 8011e34:	f001 f96c 	bl	8013110 <uxr_init_base_object_request>
 8011e38:	a906      	add	r1, sp, #24
 8011e3a:	4604      	mov	r4, r0
 8011e3c:	a80c      	add	r0, sp, #48	; 0x30
 8011e3e:	f002 fc51 	bl	80146e4 <uxr_serialize_READ_DATA_Payload>
 8011e42:	4620      	mov	r0, r4
 8011e44:	b015      	add	sp, #84	; 0x54
 8011e46:	bd30      	pop	{r4, r5, pc}
 8011e48:	2208      	movs	r2, #8
 8011e4a:	e7e2      	b.n	8011e12 <uxr_buffer_request_data+0x3a>

08011e4c <uxr_buffer_cancel_data>:
 8011e4c:	b530      	push	{r4, r5, lr}
 8011e4e:	b095      	sub	sp, #84	; 0x54
 8011e50:	2400      	movs	r4, #0
 8011e52:	2308      	movs	r3, #8
 8011e54:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8011e58:	9300      	str	r3, [sp, #0]
 8011e5a:	9205      	str	r2, [sp, #20]
 8011e5c:	2501      	movs	r5, #1
 8011e5e:	ab0c      	add	r3, sp, #48	; 0x30
 8011e60:	2210      	movs	r2, #16
 8011e62:	f8ad 401c 	strh.w	r4, [sp, #28]
 8011e66:	f88d 401e 	strb.w	r4, [sp, #30]
 8011e6a:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 8011e6e:	f8cd 402a 	str.w	r4, [sp, #42]	; 0x2a
 8011e72:	9103      	str	r1, [sp, #12]
 8011e74:	4604      	mov	r4, r0
 8011e76:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8011e7a:	f001 f80f 	bl	8012e9c <uxr_prepare_stream_to_write_submessage>
 8011e7e:	b918      	cbnz	r0, 8011e88 <uxr_buffer_cancel_data+0x3c>
 8011e80:	4604      	mov	r4, r0
 8011e82:	4620      	mov	r0, r4
 8011e84:	b015      	add	sp, #84	; 0x54
 8011e86:	bd30      	pop	{r4, r5, pc}
 8011e88:	9905      	ldr	r1, [sp, #20]
 8011e8a:	aa06      	add	r2, sp, #24
 8011e8c:	4620      	mov	r0, r4
 8011e8e:	f001 f93f 	bl	8013110 <uxr_init_base_object_request>
 8011e92:	a906      	add	r1, sp, #24
 8011e94:	4604      	mov	r4, r0
 8011e96:	a80c      	add	r0, sp, #48	; 0x30
 8011e98:	f002 fc24 	bl	80146e4 <uxr_serialize_READ_DATA_Payload>
 8011e9c:	4620      	mov	r0, r4
 8011e9e:	b015      	add	sp, #84	; 0x54
 8011ea0:	bd30      	pop	{r4, r5, pc}
 8011ea2:	bf00      	nop

08011ea4 <read_submessage_format>:
 8011ea4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ea8:	b095      	sub	sp, #84	; 0x54
 8011eaa:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 8011eae:	b113      	cbz	r3, 8011eb6 <read_submessage_format+0x12>
 8011eb0:	b015      	add	sp, #84	; 0x54
 8011eb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011eb6:	460c      	mov	r4, r1
 8011eb8:	4616      	mov	r6, r2
 8011eba:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8011ebe:	461d      	mov	r5, r3
 8011ec0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011ec2:	9304      	str	r3, [sp, #16]
 8011ec4:	1a52      	subs	r2, r2, r1
 8011ec6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011ec8:	9305      	str	r3, [sp, #20]
 8011eca:	4607      	mov	r7, r0
 8011ecc:	a80c      	add	r0, sp, #48	; 0x30
 8011ece:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8011ed2:	f7ff fce1 	bl	8011898 <ucdr_init_buffer>
 8011ed6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011eda:	a80c      	add	r0, sp, #48	; 0x30
 8011edc:	f7ff fcb2 	bl	8011844 <ucdr_set_on_full_buffer_callback>
 8011ee0:	69e3      	ldr	r3, [r4, #28]
 8011ee2:	b193      	cbz	r3, 8011f0a <read_submessage_format+0x66>
 8011ee4:	f1b8 0f07 	cmp.w	r8, #7
 8011ee8:	751d      	strb	r5, [r3, #20]
 8011eea:	d03e      	beq.n	8011f6a <read_submessage_format+0xc6>
 8011eec:	f1b8 0f08 	cmp.w	r8, #8
 8011ef0:	d02c      	beq.n	8011f4c <read_submessage_format+0xa8>
 8011ef2:	f1b8 0f06 	cmp.w	r8, #6
 8011ef6:	d011      	beq.n	8011f1c <read_submessage_format+0x78>
 8011ef8:	2201      	movs	r2, #1
 8011efa:	751a      	strb	r2, [r3, #20]
 8011efc:	4631      	mov	r1, r6
 8011efe:	4620      	mov	r0, r4
 8011f00:	f7ff fd1a 	bl	8011938 <ucdr_advance_buffer>
 8011f04:	b015      	add	sp, #84	; 0x54
 8011f06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f0a:	f1b8 0f07 	cmp.w	r8, #7
 8011f0e:	d02c      	beq.n	8011f6a <read_submessage_format+0xc6>
 8011f10:	f1b8 0f08 	cmp.w	r8, #8
 8011f14:	d01a      	beq.n	8011f4c <read_submessage_format+0xa8>
 8011f16:	f1b8 0f06 	cmp.w	r8, #6
 8011f1a:	d1ef      	bne.n	8011efc <read_submessage_format+0x58>
 8011f1c:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 8011f20:	b18d      	cbz	r5, 8011f46 <read_submessage_format+0xa2>
 8011f22:	2306      	movs	r3, #6
 8011f24:	f88d 3016 	strb.w	r3, [sp, #22]
 8011f28:	aa0c      	add	r2, sp, #48	; 0x30
 8011f2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011f2e:	9302      	str	r3, [sp, #8]
 8011f30:	9200      	str	r2, [sp, #0]
 8011f32:	9b04      	ldr	r3, [sp, #16]
 8011f34:	9905      	ldr	r1, [sp, #20]
 8011f36:	9601      	str	r6, [sp, #4]
 8011f38:	464a      	mov	r2, r9
 8011f3a:	4638      	mov	r0, r7
 8011f3c:	47a8      	blx	r5
 8011f3e:	2301      	movs	r3, #1
 8011f40:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8011f44:	69e3      	ldr	r3, [r4, #28]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d1d6      	bne.n	8011ef8 <read_submessage_format+0x54>
 8011f4a:	e7d7      	b.n	8011efc <read_submessage_format+0x58>
 8011f4c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8011f50:	2a00      	cmp	r2, #0
 8011f52:	d0f8      	beq.n	8011f46 <read_submessage_format+0xa2>
 8011f54:	a906      	add	r1, sp, #24
 8011f56:	a80c      	add	r0, sp, #48	; 0x30
 8011f58:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011f5a:	f002 fc89 	bl	8014870 <uxr_deserialize_SampleIdentity>
 8011f5e:	2800      	cmp	r0, #0
 8011f60:	d13c      	bne.n	8011fdc <read_submessage_format+0x138>
 8011f62:	69e3      	ldr	r3, [r4, #28]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d1c7      	bne.n	8011ef8 <read_submessage_format+0x54>
 8011f68:	e7c8      	b.n	8011efc <read_submessage_format+0x58>
 8011f6a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8011f6e:	b132      	cbz	r2, 8011f7e <read_submessage_format+0xda>
 8011f70:	a906      	add	r1, sp, #24
 8011f72:	a80c      	add	r0, sp, #48	; 0x30
 8011f74:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011f76:	f002 f939 	bl	80141ec <uxr_deserialize_BaseObjectRequest>
 8011f7a:	b930      	cbnz	r0, 8011f8a <read_submessage_format+0xe6>
 8011f7c:	69e3      	ldr	r3, [r4, #28]
 8011f7e:	68a2      	ldr	r2, [r4, #8]
 8011f80:	4432      	add	r2, r6
 8011f82:	60a2      	str	r2, [r4, #8]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d1b7      	bne.n	8011ef8 <read_submessage_format+0x54>
 8011f88:	e7b8      	b.n	8011efc <read_submessage_format+0x58>
 8011f8a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8011f8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011f90:	1a52      	subs	r2, r2, r1
 8011f92:	a80c      	add	r0, sp, #48	; 0x30
 8011f94:	1aed      	subs	r5, r5, r3
 8011f96:	f7ff fc7f 	bl	8011898 <ucdr_init_buffer>
 8011f9a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011f9e:	a80c      	add	r0, sp, #48	; 0x30
 8011fa0:	f7ff fc50 	bl	8011844 <ucdr_set_on_full_buffer_callback>
 8011fa4:	4435      	add	r5, r6
 8011fa6:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8011faa:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011fae:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8011fb2:	9002      	str	r0, [sp, #8]
 8011fb4:	2207      	movs	r2, #7
 8011fb6:	f88d 2016 	strb.w	r2, [sp, #22]
 8011fba:	b2ad      	uxth	r5, r5
 8011fbc:	aa0c      	add	r2, sp, #48	; 0x30
 8011fbe:	9200      	str	r2, [sp, #0]
 8011fc0:	9501      	str	r5, [sp, #4]
 8011fc2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011fc6:	b29b      	uxth	r3, r3
 8011fc8:	9905      	ldr	r1, [sp, #20]
 8011fca:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
 8011fce:	464a      	mov	r2, r9
 8011fd0:	4638      	mov	r0, r7
 8011fd2:	47a8      	blx	r5
 8011fd4:	2301      	movs	r3, #1
 8011fd6:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8011fda:	e7cf      	b.n	8011f7c <read_submessage_format+0xd8>
 8011fdc:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8011fe0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011fe2:	1a52      	subs	r2, r2, r1
 8011fe4:	a80c      	add	r0, sp, #48	; 0x30
 8011fe6:	1aed      	subs	r5, r5, r3
 8011fe8:	f7ff fc56 	bl	8011898 <ucdr_init_buffer>
 8011fec:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011ff0:	a80c      	add	r0, sp, #48	; 0x30
 8011ff2:	f7ff fc27 	bl	8011844 <ucdr_set_on_full_buffer_callback>
 8011ff6:	4435      	add	r5, r6
 8011ff8:	2308      	movs	r3, #8
 8011ffa:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8011ffe:	f88d 3016 	strb.w	r3, [sp, #22]
 8012002:	b2ad      	uxth	r5, r5
 8012004:	ab0c      	add	r3, sp, #48	; 0x30
 8012006:	9300      	str	r3, [sp, #0]
 8012008:	9002      	str	r0, [sp, #8]
 801200a:	9501      	str	r5, [sp, #4]
 801200c:	ab06      	add	r3, sp, #24
 801200e:	9905      	ldr	r1, [sp, #20]
 8012010:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 8012014:	464a      	mov	r2, r9
 8012016:	4638      	mov	r0, r7
 8012018:	47a8      	blx	r5
 801201a:	2301      	movs	r3, #1
 801201c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8012020:	e79f      	b.n	8011f62 <read_submessage_format+0xbe>
 8012022:	bf00      	nop

08012024 <on_get_fragmentation_info>:
 8012024:	b500      	push	{lr}
 8012026:	b08b      	sub	sp, #44	; 0x2c
 8012028:	4601      	mov	r1, r0
 801202a:	2204      	movs	r2, #4
 801202c:	a802      	add	r0, sp, #8
 801202e:	f7ff fc33 	bl	8011898 <ucdr_init_buffer>
 8012032:	f10d 0305 	add.w	r3, sp, #5
 8012036:	a802      	add	r0, sp, #8
 8012038:	f10d 0206 	add.w	r2, sp, #6
 801203c:	a901      	add	r1, sp, #4
 801203e:	f001 f9eb 	bl	8013418 <uxr_read_submessage_header>
 8012042:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012046:	2b0d      	cmp	r3, #13
 8012048:	d003      	beq.n	8012052 <on_get_fragmentation_info+0x2e>
 801204a:	2000      	movs	r0, #0
 801204c:	b00b      	add	sp, #44	; 0x2c
 801204e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012052:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012056:	f013 0f02 	tst.w	r3, #2
 801205a:	bf14      	ite	ne
 801205c:	2002      	movne	r0, #2
 801205e:	2001      	moveq	r0, #1
 8012060:	b00b      	add	sp, #44	; 0x2c
 8012062:	f85d fb04 	ldr.w	pc, [sp], #4
 8012066:	bf00      	nop

08012068 <read_submessage_get_info>:
 8012068:	b570      	push	{r4, r5, r6, lr}
 801206a:	2500      	movs	r5, #0
 801206c:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8012070:	4604      	mov	r4, r0
 8012072:	f44f 7224 	mov.w	r2, #656	; 0x290
 8012076:	460e      	mov	r6, r1
 8012078:	a810      	add	r0, sp, #64	; 0x40
 801207a:	4629      	mov	r1, r5
 801207c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8012080:	f008 fa02 	bl	801a488 <memset>
 8012084:	a903      	add	r1, sp, #12
 8012086:	4630      	mov	r0, r6
 8012088:	f002 fa6e 	bl	8014568 <uxr_deserialize_GET_INFO_Payload>
 801208c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012090:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8012094:	4620      	mov	r0, r4
 8012096:	f001 f833 	bl	8013100 <uxr_session_header_offset>
 801209a:	462b      	mov	r3, r5
 801209c:	9000      	str	r0, [sp, #0]
 801209e:	a905      	add	r1, sp, #20
 80120a0:	a808      	add	r0, sp, #32
 80120a2:	220c      	movs	r2, #12
 80120a4:	f7ff fbe6 	bl	8011874 <ucdr_init_buffer_origin_offset>
 80120a8:	a910      	add	r1, sp, #64	; 0x40
 80120aa:	a808      	add	r0, sp, #32
 80120ac:	f002 face 	bl	801464c <uxr_serialize_INFO_Payload>
 80120b0:	9b08      	ldr	r3, [sp, #32]
 80120b2:	462a      	mov	r2, r5
 80120b4:	4629      	mov	r1, r5
 80120b6:	4620      	mov	r0, r4
 80120b8:	f000 ffca 	bl	8013050 <uxr_stamp_session_header>
 80120bc:	a808      	add	r0, sp, #32
 80120be:	f7ff fc17 	bl	80118f0 <ucdr_buffer_length>
 80120c2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80120c4:	4602      	mov	r2, r0
 80120c6:	a905      	add	r1, sp, #20
 80120c8:	e9d3 0400 	ldrd	r0, r4, [r3]
 80120cc:	47a0      	blx	r4
 80120ce:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 80120d2:	bd70      	pop	{r4, r5, r6, pc}

080120d4 <write_submessage_acknack.isra.0>:
 80120d4:	b570      	push	{r4, r5, r6, lr}
 80120d6:	b092      	sub	sp, #72	; 0x48
 80120d8:	4605      	mov	r5, r0
 80120da:	460e      	mov	r6, r1
 80120dc:	4614      	mov	r4, r2
 80120de:	f001 f80f 	bl	8013100 <uxr_session_header_offset>
 80120e2:	a905      	add	r1, sp, #20
 80120e4:	9000      	str	r0, [sp, #0]
 80120e6:	2300      	movs	r3, #0
 80120e8:	a80a      	add	r0, sp, #40	; 0x28
 80120ea:	2211      	movs	r2, #17
 80120ec:	f7ff fbc2 	bl	8011874 <ucdr_init_buffer_origin_offset>
 80120f0:	2218      	movs	r2, #24
 80120f2:	fb02 5404 	mla	r4, r2, r4, r5
 80120f6:	2300      	movs	r3, #0
 80120f8:	2205      	movs	r2, #5
 80120fa:	3450      	adds	r4, #80	; 0x50
 80120fc:	a80a      	add	r0, sp, #40	; 0x28
 80120fe:	210a      	movs	r1, #10
 8012100:	f001 f970 	bl	80133e4 <uxr_buffer_submessage_header>
 8012104:	a903      	add	r1, sp, #12
 8012106:	4620      	mov	r0, r4
 8012108:	f006 fa84 	bl	8018614 <uxr_compute_acknack>
 801210c:	a903      	add	r1, sp, #12
 801210e:	ba43      	rev16	r3, r0
 8012110:	a80a      	add	r0, sp, #40	; 0x28
 8012112:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012116:	f88d 6010 	strb.w	r6, [sp, #16]
 801211a:	f002 fb07 	bl	801472c <uxr_serialize_ACKNACK_Payload>
 801211e:	2200      	movs	r2, #0
 8012120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012122:	4611      	mov	r1, r2
 8012124:	4628      	mov	r0, r5
 8012126:	f000 ff93 	bl	8013050 <uxr_stamp_session_header>
 801212a:	a80a      	add	r0, sp, #40	; 0x28
 801212c:	f7ff fbe0 	bl	80118f0 <ucdr_buffer_length>
 8012130:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8012132:	4602      	mov	r2, r0
 8012134:	a905      	add	r1, sp, #20
 8012136:	e9d3 0400 	ldrd	r0, r4, [r3]
 801213a:	47a0      	blx	r4
 801213c:	b012      	add	sp, #72	; 0x48
 801213e:	bd70      	pop	{r4, r5, r6, pc}

08012140 <uxr_init_session>:
 8012140:	b5d0      	push	{r4, r6, r7, lr}
 8012142:	2300      	movs	r3, #0
 8012144:	2600      	movs	r6, #0
 8012146:	2700      	movs	r7, #0
 8012148:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 801214c:	4604      	mov	r4, r0
 801214e:	6701      	str	r1, [r0, #112]	; 0x70
 8012150:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 8012154:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 8012158:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 801215c:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 8012160:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 8012164:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8012168:	2181      	movs	r1, #129	; 0x81
 801216a:	f000 fedb 	bl	8012f24 <uxr_init_session_info>
 801216e:	f104 0008 	add.w	r0, r4, #8
 8012172:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 8012176:	f001 b851 	b.w	801321c <uxr_init_stream_storage>
 801217a:	bf00      	nop

0801217c <uxr_set_status_callback>:
 801217c:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8012180:	4770      	bx	lr
 8012182:	bf00      	nop

08012184 <uxr_set_topic_callback>:
 8012184:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8012188:	4770      	bx	lr
 801218a:	bf00      	nop

0801218c <uxr_set_request_callback>:
 801218c:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8012190:	4770      	bx	lr
 8012192:	bf00      	nop

08012194 <uxr_set_reply_callback>:
 8012194:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8012198:	4770      	bx	lr
 801219a:	bf00      	nop

0801219c <uxr_create_output_best_effort_stream>:
 801219c:	b510      	push	{r4, lr}
 801219e:	b084      	sub	sp, #16
 80121a0:	e9cd 2100 	strd	r2, r1, [sp]
 80121a4:	4604      	mov	r4, r0
 80121a6:	f000 ffab 	bl	8013100 <uxr_session_header_offset>
 80121aa:	e9dd 2100 	ldrd	r2, r1, [sp]
 80121ae:	4603      	mov	r3, r0
 80121b0:	f104 0008 	add.w	r0, r4, #8
 80121b4:	b004      	add	sp, #16
 80121b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121ba:	f001 b879 	b.w	80132b0 <uxr_add_output_best_effort_buffer>
 80121be:	bf00      	nop

080121c0 <uxr_create_output_reliable_stream>:
 80121c0:	b530      	push	{r4, r5, lr}
 80121c2:	b089      	sub	sp, #36	; 0x24
 80121c4:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80121c8:	9303      	str	r3, [sp, #12]
 80121ca:	4604      	mov	r4, r0
 80121cc:	f000 ff98 	bl	8013100 <uxr_session_header_offset>
 80121d0:	4605      	mov	r5, r0
 80121d2:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80121d6:	9905      	ldr	r1, [sp, #20]
 80121d8:	9500      	str	r5, [sp, #0]
 80121da:	f104 0008 	add.w	r0, r4, #8
 80121de:	f001 f879 	bl	80132d4 <uxr_add_output_reliable_buffer>
 80121e2:	2200      	movs	r2, #0
 80121e4:	b2c3      	uxtb	r3, r0
 80121e6:	f363 0207 	bfi	r2, r3, #0, #8
 80121ea:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80121ee:	f363 220f 	bfi	r2, r3, #8, #8
 80121f2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80121f6:	f363 4217 	bfi	r2, r3, #16, #8
 80121fa:	0e03      	lsrs	r3, r0, #24
 80121fc:	f363 621f 	bfi	r2, r3, #24, #8
 8012200:	4610      	mov	r0, r2
 8012202:	b009      	add	sp, #36	; 0x24
 8012204:	bd30      	pop	{r4, r5, pc}
 8012206:	bf00      	nop

08012208 <uxr_create_input_best_effort_stream>:
 8012208:	b082      	sub	sp, #8
 801220a:	3008      	adds	r0, #8
 801220c:	b002      	add	sp, #8
 801220e:	f001 b87b 	b.w	8013308 <uxr_add_input_best_effort_buffer>
 8012212:	bf00      	nop

08012214 <uxr_create_input_reliable_stream>:
 8012214:	b510      	push	{r4, lr}
 8012216:	b084      	sub	sp, #16
 8012218:	4c0b      	ldr	r4, [pc, #44]	; (8012248 <uxr_create_input_reliable_stream+0x34>)
 801221a:	9400      	str	r4, [sp, #0]
 801221c:	3008      	adds	r0, #8
 801221e:	f001 f889 	bl	8013334 <uxr_add_input_reliable_buffer>
 8012222:	2200      	movs	r2, #0
 8012224:	b2c3      	uxtb	r3, r0
 8012226:	f363 0207 	bfi	r2, r3, #0, #8
 801222a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801222e:	f363 220f 	bfi	r2, r3, #8, #8
 8012232:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012236:	f363 4217 	bfi	r2, r3, #16, #8
 801223a:	0e03      	lsrs	r3, r0, #24
 801223c:	f363 621f 	bfi	r2, r3, #24, #8
 8012240:	4610      	mov	r0, r2
 8012242:	b004      	add	sp, #16
 8012244:	bd10      	pop	{r4, pc}
 8012246:	bf00      	nop
 8012248:	08012025 	.word	0x08012025

0801224c <uxr_epoch_nanos>:
 801224c:	b510      	push	{r4, lr}
 801224e:	4604      	mov	r4, r0
 8012250:	f001 f92a 	bl	80134a8 <uxr_nanos>
 8012254:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8012258:	1ac0      	subs	r0, r0, r3
 801225a:	eb61 0102 	sbc.w	r1, r1, r2
 801225e:	bd10      	pop	{r4, pc}

08012260 <uxr_flash_output_streams>:
 8012260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012264:	7e03      	ldrb	r3, [r0, #24]
 8012266:	b084      	sub	sp, #16
 8012268:	4604      	mov	r4, r0
 801226a:	b1fb      	cbz	r3, 80122ac <uxr_flash_output_streams+0x4c>
 801226c:	f04f 0900 	mov.w	r9, #0
 8012270:	4648      	mov	r0, r9
 8012272:	f10d 0802 	add.w	r8, sp, #2
 8012276:	af03      	add	r7, sp, #12
 8012278:	ae02      	add	r6, sp, #8
 801227a:	2201      	movs	r2, #1
 801227c:	4611      	mov	r1, r2
 801227e:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8012282:	f000 ff75 	bl	8013170 <uxr_stream_id>
 8012286:	3508      	adds	r5, #8
 8012288:	4684      	mov	ip, r0
 801228a:	4643      	mov	r3, r8
 801228c:	4628      	mov	r0, r5
 801228e:	463a      	mov	r2, r7
 8012290:	4631      	mov	r1, r6
 8012292:	f8cd c004 	str.w	ip, [sp, #4]
 8012296:	f006 fa45 	bl	8018724 <uxr_prepare_best_effort_buffer_to_send>
 801229a:	2800      	cmp	r0, #0
 801229c:	d13d      	bne.n	801231a <uxr_flash_output_streams+0xba>
 801229e:	7e23      	ldrb	r3, [r4, #24]
 80122a0:	f109 0901 	add.w	r9, r9, #1
 80122a4:	fa5f f089 	uxtb.w	r0, r9
 80122a8:	4283      	cmp	r3, r0
 80122aa:	d8e6      	bhi.n	801227a <uxr_flash_output_streams+0x1a>
 80122ac:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80122b0:	b383      	cbz	r3, 8012314 <uxr_flash_output_streams+0xb4>
 80122b2:	f04f 0900 	mov.w	r9, #0
 80122b6:	4648      	mov	r0, r9
 80122b8:	f10d 0802 	add.w	r8, sp, #2
 80122bc:	af03      	add	r7, sp, #12
 80122be:	ae02      	add	r6, sp, #8
 80122c0:	2201      	movs	r2, #1
 80122c2:	2102      	movs	r1, #2
 80122c4:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80122c8:	f000 ff52 	bl	8013170 <uxr_stream_id>
 80122cc:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80122d0:	3520      	adds	r5, #32
 80122d2:	9001      	str	r0, [sp, #4]
 80122d4:	e00c      	b.n	80122f0 <uxr_flash_output_streams+0x90>
 80122d6:	9b02      	ldr	r3, [sp, #8]
 80122d8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80122dc:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80122e0:	f000 feb6 	bl	8013050 <uxr_stamp_session_header>
 80122e4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80122e6:	9a03      	ldr	r2, [sp, #12]
 80122e8:	9902      	ldr	r1, [sp, #8]
 80122ea:	e9d3 0a00 	ldrd	r0, sl, [r3]
 80122ee:	47d0      	blx	sl
 80122f0:	4643      	mov	r3, r8
 80122f2:	463a      	mov	r2, r7
 80122f4:	4631      	mov	r1, r6
 80122f6:	4628      	mov	r0, r5
 80122f8:	f006 fc1c 	bl	8018b34 <uxr_prepare_next_reliable_buffer_to_send>
 80122fc:	4603      	mov	r3, r0
 80122fe:	4620      	mov	r0, r4
 8012300:	2b00      	cmp	r3, #0
 8012302:	d1e8      	bne.n	80122d6 <uxr_flash_output_streams+0x76>
 8012304:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8012308:	f109 0901 	add.w	r9, r9, #1
 801230c:	fa5f f089 	uxtb.w	r0, r9
 8012310:	4283      	cmp	r3, r0
 8012312:	d8d5      	bhi.n	80122c0 <uxr_flash_output_streams+0x60>
 8012314:	b004      	add	sp, #16
 8012316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801231a:	9b02      	ldr	r3, [sp, #8]
 801231c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012320:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012324:	4620      	mov	r0, r4
 8012326:	f000 fe93 	bl	8013050 <uxr_stamp_session_header>
 801232a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801232c:	9a03      	ldr	r2, [sp, #12]
 801232e:	9902      	ldr	r1, [sp, #8]
 8012330:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012334:	47a8      	blx	r5
 8012336:	f109 0901 	add.w	r9, r9, #1
 801233a:	7e23      	ldrb	r3, [r4, #24]
 801233c:	fa5f f089 	uxtb.w	r0, r9
 8012340:	4283      	cmp	r3, r0
 8012342:	d89a      	bhi.n	801227a <uxr_flash_output_streams+0x1a>
 8012344:	e7b2      	b.n	80122ac <uxr_flash_output_streams+0x4c>
 8012346:	bf00      	nop

08012348 <read_submessage_info>:
 8012348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801234c:	460d      	mov	r5, r1
 801234e:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8012352:	4669      	mov	r1, sp
 8012354:	4607      	mov	r7, r0
 8012356:	4628      	mov	r0, r5
 8012358:	f002 f80c 	bl	8014374 <uxr_deserialize_BaseObjectReply>
 801235c:	a902      	add	r1, sp, #8
 801235e:	4604      	mov	r4, r0
 8012360:	4628      	mov	r0, r5
 8012362:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8012366:	f7fe fad3 	bl	8010910 <ucdr_deserialize_bool>
 801236a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801236e:	4004      	ands	r4, r0
 8012370:	b2e4      	uxtb	r4, r4
 8012372:	b95b      	cbnz	r3, 801238c <read_submessage_info+0x44>
 8012374:	a987      	add	r1, sp, #540	; 0x21c
 8012376:	4628      	mov	r0, r5
 8012378:	f7fe faca 	bl	8010910 <ucdr_deserialize_bool>
 801237c:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 8012380:	4606      	mov	r6, r0
 8012382:	b94b      	cbnz	r3, 8012398 <read_submessage_info+0x50>
 8012384:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8012388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801238c:	a903      	add	r1, sp, #12
 801238e:	4628      	mov	r0, r5
 8012390:	f001 fe7e 	bl	8014090 <uxr_deserialize_ObjectVariant>
 8012394:	4004      	ands	r4, r0
 8012396:	e7ed      	b.n	8012374 <read_submessage_info+0x2c>
 8012398:	a988      	add	r1, sp, #544	; 0x220
 801239a:	4628      	mov	r0, r5
 801239c:	f7fe fae8 	bl	8010970 <ucdr_deserialize_uint8_t>
 80123a0:	4234      	tst	r4, r6
 80123a2:	d0ef      	beq.n	8012384 <read_submessage_info+0x3c>
 80123a4:	2800      	cmp	r0, #0
 80123a6:	d0ed      	beq.n	8012384 <read_submessage_info+0x3c>
 80123a8:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 80123ac:	2b0d      	cmp	r3, #13
 80123ae:	d1e9      	bne.n	8012384 <read_submessage_info+0x3c>
 80123b0:	4628      	mov	r0, r5
 80123b2:	a98a      	add	r1, sp, #552	; 0x228
 80123b4:	f7ff f882 	bl	80114bc <ucdr_deserialize_int16_t>
 80123b8:	b140      	cbz	r0, 80123cc <read_submessage_info+0x84>
 80123ba:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 80123be:	2b00      	cmp	r3, #0
 80123c0:	dd07      	ble.n	80123d2 <read_submessage_info+0x8a>
 80123c2:	f1b8 0f00 	cmp.w	r8, #0
 80123c6:	bf14      	ite	ne
 80123c8:	2001      	movne	r0, #1
 80123ca:	2002      	moveq	r0, #2
 80123cc:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 80123d0:	e7d8      	b.n	8012384 <read_submessage_info+0x3c>
 80123d2:	2000      	movs	r0, #0
 80123d4:	e7fa      	b.n	80123cc <read_submessage_info+0x84>
 80123d6:	bf00      	nop

080123d8 <read_submessage_list>:
 80123d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123dc:	b098      	sub	sp, #96	; 0x60
 80123de:	f8df 9304 	ldr.w	r9, [pc, #772]	; 80126e4 <read_submessage_list+0x30c>
 80123e2:	920b      	str	r2, [sp, #44]	; 0x2c
 80123e4:	4604      	mov	r4, r0
 80123e6:	4688      	mov	r8, r1
 80123e8:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 80123ec:	aa0e      	add	r2, sp, #56	; 0x38
 80123ee:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 80123f2:	4640      	mov	r0, r8
 80123f4:	f001 f810 	bl	8013418 <uxr_read_submessage_header>
 80123f8:	2800      	cmp	r0, #0
 80123fa:	f000 813d 	beq.w	8012678 <read_submessage_list+0x2a0>
 80123fe:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8012402:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8012406:	3b02      	subs	r3, #2
 8012408:	2b0d      	cmp	r3, #13
 801240a:	d8ed      	bhi.n	80123e8 <read_submessage_list+0x10>
 801240c:	a101      	add	r1, pc, #4	; (adr r1, 8012414 <read_submessage_list+0x3c>)
 801240e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012412:	bf00      	nop
 8012414:	0801266f 	.word	0x0801266f
 8012418:	080123e9 	.word	0x080123e9
 801241c:	0801265f 	.word	0x0801265f
 8012420:	08012603 	.word	0x08012603
 8012424:	080125f9 	.word	0x080125f9
 8012428:	080123e9 	.word	0x080123e9
 801242c:	080123e9 	.word	0x080123e9
 8012430:	0801255b 	.word	0x0801255b
 8012434:	080124ed 	.word	0x080124ed
 8012438:	080124ab 	.word	0x080124ab
 801243c:	080123e9 	.word	0x080123e9
 8012440:	080123e9 	.word	0x080123e9
 8012444:	080123e9 	.word	0x080123e9
 8012448:	0801244d 	.word	0x0801244d
 801244c:	a912      	add	r1, sp, #72	; 0x48
 801244e:	4640      	mov	r0, r8
 8012450:	f002 f9bc 	bl	80147cc <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8012454:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8012458:	2d00      	cmp	r5, #0
 801245a:	f000 8115 	beq.w	8012688 <read_submessage_list+0x2b0>
 801245e:	f001 f823 	bl	80134a8 <uxr_nanos>
 8012462:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8012464:	460b      	mov	r3, r1
 8012466:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012468:	2700      	movs	r7, #0
 801246a:	fbc9 6701 	smlal	r6, r7, r9, r1
 801246e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012472:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012474:	4602      	mov	r2, r0
 8012476:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012478:	460e      	mov	r6, r1
 801247a:	2700      	movs	r7, #0
 801247c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8012480:	9106      	str	r1, [sp, #24]
 8012482:	fbc9 6700 	smlal	r6, r7, r9, r0
 8012486:	9915      	ldr	r1, [sp, #84]	; 0x54
 8012488:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801248c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801248e:	2700      	movs	r7, #0
 8012490:	4608      	mov	r0, r1
 8012492:	4639      	mov	r1, r7
 8012494:	fbc9 0106 	smlal	r0, r1, r9, r6
 8012498:	e9cd 0100 	strd	r0, r1, [sp]
 801249c:	4620      	mov	r0, r4
 801249e:	47a8      	blx	r5
 80124a0:	f04f 0301 	mov.w	r3, #1
 80124a4:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 80124a8:	e79e      	b.n	80123e8 <read_submessage_list+0x10>
 80124aa:	a912      	add	r1, sp, #72	; 0x48
 80124ac:	4640      	mov	r0, r8
 80124ae:	f002 f97b 	bl	80147a8 <uxr_deserialize_HEARTBEAT_Payload>
 80124b2:	2100      	movs	r1, #0
 80124b4:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80124b8:	f000 fe84 	bl	80131c4 <uxr_stream_id_from_raw>
 80124bc:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80124c0:	4603      	mov	r3, r0
 80124c2:	4629      	mov	r1, r5
 80124c4:	f104 0008 	add.w	r0, r4, #8
 80124c8:	9311      	str	r3, [sp, #68]	; 0x44
 80124ca:	f000 ff69 	bl	80133a0 <uxr_get_input_reliable_stream>
 80124ce:	2800      	cmp	r0, #0
 80124d0:	d08a      	beq.n	80123e8 <read_submessage_list+0x10>
 80124d2:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 80124d6:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 80124da:	f006 f88f 	bl	80185fc <uxr_process_heartbeat>
 80124de:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 80124e2:	462a      	mov	r2, r5
 80124e4:	4620      	mov	r0, r4
 80124e6:	f7ff fdf5 	bl	80120d4 <write_submessage_acknack.isra.0>
 80124ea:	e77d      	b.n	80123e8 <read_submessage_list+0x10>
 80124ec:	a912      	add	r1, sp, #72	; 0x48
 80124ee:	4640      	mov	r0, r8
 80124f0:	f002 f932 	bl	8014758 <uxr_deserialize_ACKNACK_Payload>
 80124f4:	2100      	movs	r1, #0
 80124f6:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80124fa:	f000 fe63 	bl	80131c4 <uxr_stream_id_from_raw>
 80124fe:	4603      	mov	r3, r0
 8012500:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8012504:	f104 0008 	add.w	r0, r4, #8
 8012508:	930f      	str	r3, [sp, #60]	; 0x3c
 801250a:	f000 ff33 	bl	8013374 <uxr_get_output_reliable_stream>
 801250e:	4605      	mov	r5, r0
 8012510:	2800      	cmp	r0, #0
 8012512:	f43f af69 	beq.w	80123e8 <read_submessage_list+0x10>
 8012516:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 801251a:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 801251e:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8012522:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8012526:	b289      	uxth	r1, r1
 8012528:	f006 fbac 	bl	8018c84 <uxr_process_acknack>
 801252c:	4628      	mov	r0, r5
 801252e:	f006 fb6f 	bl	8018c10 <uxr_begin_output_nack_buffer_it>
 8012532:	af10      	add	r7, sp, #64	; 0x40
 8012534:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 8012538:	e005      	b.n	8012546 <read_submessage_list+0x16e>
 801253a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801253c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801253e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012540:	e9d3 0600 	ldrd	r0, r6, [r3]
 8012544:	47b0      	blx	r6
 8012546:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 801254a:	aa11      	add	r2, sp, #68	; 0x44
 801254c:	4639      	mov	r1, r7
 801254e:	4628      	mov	r0, r5
 8012550:	f006 fb60 	bl	8018c14 <uxr_next_reliable_nack_buffer_to_send>
 8012554:	2800      	cmp	r0, #0
 8012556:	d1f0      	bne.n	801253a <read_submessage_list+0x162>
 8012558:	e746      	b.n	80123e8 <read_submessage_list+0x10>
 801255a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801255e:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 8012562:	af10      	add	r7, sp, #64	; 0x40
 8012564:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8012568:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 801256c:	4639      	mov	r1, r7
 801256e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8012572:	f89d 6037 	ldrb.w	r6, [sp, #55]	; 0x37
 8012576:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801257a:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
 801257e:	4640      	mov	r0, r8
 8012580:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8012584:	f001 fe32 	bl	80141ec <uxr_deserialize_BaseObjectRequest>
 8012588:	4638      	mov	r0, r7
 801258a:	a911      	add	r1, sp, #68	; 0x44
 801258c:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 8012590:	f000 fddc 	bl	801314c <uxr_parse_base_object_request>
 8012594:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8012598:	9911      	ldr	r1, [sp, #68]	; 0x44
 801259a:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
 801259e:	9112      	str	r1, [sp, #72]	; 0x48
 80125a0:	3d04      	subs	r5, #4
 80125a2:	f006 060e 	and.w	r6, r6, #14
 80125a6:	b2ad      	uxth	r5, r5
 80125a8:	f1ba 0f00 	cmp.w	sl, #0
 80125ac:	d006      	beq.n	80125bc <read_submessage_list+0x1e4>
 80125ae:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80125b2:	9300      	str	r3, [sp, #0]
 80125b4:	463a      	mov	r2, r7
 80125b6:	2300      	movs	r3, #0
 80125b8:	4620      	mov	r0, r4
 80125ba:	47d0      	blx	sl
 80125bc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80125be:	b168      	cbz	r0, 80125dc <read_submessage_list+0x204>
 80125c0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80125c2:	2300      	movs	r3, #0
 80125c4:	3902      	subs	r1, #2
 80125c6:	e002      	b.n	80125ce <read_submessage_list+0x1f6>
 80125c8:	3301      	adds	r3, #1
 80125ca:	4283      	cmp	r3, r0
 80125cc:	d006      	beq.n	80125dc <read_submessage_list+0x204>
 80125ce:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 80125d2:	42ba      	cmp	r2, r7
 80125d4:	d1f8      	bne.n	80125c8 <read_submessage_list+0x1f0>
 80125d6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80125d8:	2100      	movs	r1, #0
 80125da:	54d1      	strb	r1, [r2, r3]
 80125dc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80125de:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80125e0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80125e4:	9302      	str	r3, [sp, #8]
 80125e6:	e9cd 1000 	strd	r1, r0, [sp]
 80125ea:	4633      	mov	r3, r6
 80125ec:	462a      	mov	r2, r5
 80125ee:	4641      	mov	r1, r8
 80125f0:	4620      	mov	r0, r4
 80125f2:	f7ff fc57 	bl	8011ea4 <read_submessage_format>
 80125f6:	e6f7      	b.n	80123e8 <read_submessage_list+0x10>
 80125f8:	4641      	mov	r1, r8
 80125fa:	4620      	mov	r0, r4
 80125fc:	f7ff fea4 	bl	8012348 <read_submessage_info>
 8012600:	e6f2      	b.n	80123e8 <read_submessage_list+0x10>
 8012602:	2a00      	cmp	r2, #0
 8012604:	d03b      	beq.n	801267e <read_submessage_list+0x2a6>
 8012606:	a912      	add	r1, sp, #72	; 0x48
 8012608:	4640      	mov	r0, r8
 801260a:	f002 f801 	bl	8014610 <uxr_deserialize_STATUS_Payload>
 801260e:	a910      	add	r1, sp, #64	; 0x40
 8012610:	aa0f      	add	r2, sp, #60	; 0x3c
 8012612:	a812      	add	r0, sp, #72	; 0x48
 8012614:	f000 fd9a 	bl	801314c <uxr_parse_base_object_request>
 8012618:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 801261c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801261e:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8012622:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8012626:	9111      	str	r1, [sp, #68]	; 0x44
 8012628:	b135      	cbz	r5, 8012638 <read_submessage_list+0x260>
 801262a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 801262e:	9300      	str	r3, [sp, #0]
 8012630:	4632      	mov	r2, r6
 8012632:	463b      	mov	r3, r7
 8012634:	4620      	mov	r0, r4
 8012636:	47a8      	blx	r5
 8012638:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 801263a:	2b00      	cmp	r3, #0
 801263c:	f43f aed4 	beq.w	80123e8 <read_submessage_list+0x10>
 8012640:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8012642:	2100      	movs	r1, #0
 8012644:	3802      	subs	r0, #2
 8012646:	e003      	b.n	8012650 <read_submessage_list+0x278>
 8012648:	3101      	adds	r1, #1
 801264a:	4299      	cmp	r1, r3
 801264c:	f43f aecc 	beq.w	80123e8 <read_submessage_list+0x10>
 8012650:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 8012654:	42b2      	cmp	r2, r6
 8012656:	d1f7      	bne.n	8012648 <read_submessage_list+0x270>
 8012658:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801265a:	545f      	strb	r7, [r3, r1]
 801265c:	e6c4      	b.n	80123e8 <read_submessage_list+0x10>
 801265e:	2a00      	cmp	r2, #0
 8012660:	f47f aec2 	bne.w	80123e8 <read_submessage_list+0x10>
 8012664:	4641      	mov	r1, r8
 8012666:	4620      	mov	r0, r4
 8012668:	f000 fcb4 	bl	8012fd4 <uxr_read_create_session_status>
 801266c:	e6bc      	b.n	80123e8 <read_submessage_list+0x10>
 801266e:	4641      	mov	r1, r8
 8012670:	4620      	mov	r0, r4
 8012672:	f7ff fcf9 	bl	8012068 <read_submessage_get_info>
 8012676:	e6b7      	b.n	80123e8 <read_submessage_list+0x10>
 8012678:	b018      	add	sp, #96	; 0x60
 801267a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801267e:	4641      	mov	r1, r8
 8012680:	4620      	mov	r0, r4
 8012682:	f000 fcb3 	bl	8012fec <uxr_read_delete_session_status>
 8012686:	e6af      	b.n	80123e8 <read_submessage_list+0x10>
 8012688:	f000 ff0e 	bl	80134a8 <uxr_nanos>
 801268c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801268e:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8012690:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012692:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8012694:	2700      	movs	r7, #0
 8012696:	fbc9 6703 	smlal	r6, r7, r9, r3
 801269a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801269c:	eb16 0c00 	adds.w	ip, r6, r0
 80126a0:	4618      	mov	r0, r3
 80126a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80126a4:	eb47 0e01 	adc.w	lr, r7, r1
 80126a8:	461e      	mov	r6, r3
 80126aa:	2100      	movs	r1, #0
 80126ac:	2700      	movs	r7, #0
 80126ae:	fbc9 0105 	smlal	r0, r1, r9, r5
 80126b2:	fbc9 6702 	smlal	r6, r7, r9, r2
 80126b6:	1983      	adds	r3, r0, r6
 80126b8:	eb41 0207 	adc.w	r2, r1, r7
 80126bc:	ebbc 0303 	subs.w	r3, ip, r3
 80126c0:	9308      	str	r3, [sp, #32]
 80126c2:	eb6e 0302 	sbc.w	r3, lr, r2
 80126c6:	9309      	str	r3, [sp, #36]	; 0x24
 80126c8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80126cc:	0fd3      	lsrs	r3, r2, #31
 80126ce:	18c9      	adds	r1, r1, r3
 80126d0:	f142 0200 	adc.w	r2, r2, #0
 80126d4:	084b      	lsrs	r3, r1, #1
 80126d6:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 80126da:	1052      	asrs	r2, r2, #1
 80126dc:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 80126e0:	e6de      	b.n	80124a0 <read_submessage_list+0xc8>
 80126e2:	bf00      	nop
 80126e4:	3b9aca00 	.word	0x3b9aca00

080126e8 <listen_message_reliably>:
 80126e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126ec:	1e0b      	subs	r3, r1, #0
 80126ee:	b09d      	sub	sp, #116	; 0x74
 80126f0:	bfb8      	it	lt
 80126f2:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 80126f6:	9305      	str	r3, [sp, #20]
 80126f8:	4607      	mov	r7, r0
 80126fa:	f000 feb9 	bl	8013470 <uxr_millis>
 80126fe:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8012702:	4681      	mov	r9, r0
 8012704:	2a00      	cmp	r2, #0
 8012706:	f000 8095 	beq.w	8012834 <listen_message_reliably+0x14c>
 801270a:	2600      	movs	r6, #0
 801270c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012710:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8012714:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012718:	4630      	mov	r0, r6
 801271a:	4688      	mov	r8, r1
 801271c:	46ca      	mov	sl, r9
 801271e:	e00f      	b.n	8012740 <listen_message_reliably+0x58>
 8012720:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8012724:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012728:	42a2      	cmp	r2, r4
 801272a:	eb73 0105 	sbcs.w	r1, r3, r5
 801272e:	bfb8      	it	lt
 8012730:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
 8012734:	3601      	adds	r6, #1
 8012736:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801273a:	b2f0      	uxtb	r0, r6
 801273c:	4283      	cmp	r3, r0
 801273e:	d951      	bls.n	80127e4 <listen_message_reliably+0xfc>
 8012740:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8012744:	2201      	movs	r2, #1
 8012746:	2102      	movs	r1, #2
 8012748:	f000 fd12 	bl	8013170 <uxr_stream_id>
 801274c:	00e4      	lsls	r4, r4, #3
 801274e:	f104 0520 	add.w	r5, r4, #32
 8012752:	443d      	add	r5, r7
 8012754:	4601      	mov	r1, r0
 8012756:	4643      	mov	r3, r8
 8012758:	4652      	mov	r2, sl
 801275a:	4628      	mov	r0, r5
 801275c:	9109      	str	r1, [sp, #36]	; 0x24
 801275e:	f006 fa2b 	bl	8018bb8 <uxr_update_output_stream_heartbeat_timestamp>
 8012762:	193b      	adds	r3, r7, r4
 8012764:	2800      	cmp	r0, #0
 8012766:	d0db      	beq.n	8012720 <listen_message_reliably+0x38>
 8012768:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 801276c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8012770:	4638      	mov	r0, r7
 8012772:	f000 fcc5 	bl	8013100 <uxr_session_header_offset>
 8012776:	3501      	adds	r5, #1
 8012778:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 801277c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8012780:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8012784:	9000      	str	r0, [sp, #0]
 8012786:	2300      	movs	r3, #0
 8012788:	4658      	mov	r0, fp
 801278a:	2211      	movs	r2, #17
 801278c:	a90c      	add	r1, sp, #48	; 0x30
 801278e:	f7ff f871 	bl	8011874 <ucdr_init_buffer_origin_offset>
 8012792:	2300      	movs	r3, #0
 8012794:	2205      	movs	r2, #5
 8012796:	210b      	movs	r1, #11
 8012798:	4658      	mov	r0, fp
 801279a:	f000 fe23 	bl	80133e4 <uxr_buffer_submessage_header>
 801279e:	8968      	ldrh	r0, [r5, #10]
 80127a0:	2101      	movs	r1, #1
 80127a2:	f006 fac7 	bl	8018d34 <uxr_seq_num_add>
 80127a6:	892a      	ldrh	r2, [r5, #8]
 80127a8:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80127ac:	4603      	mov	r3, r0
 80127ae:	a90a      	add	r1, sp, #40	; 0x28
 80127b0:	4658      	mov	r0, fp
 80127b2:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 80127b6:	f88d 902c 	strb.w	r9, [sp, #44]	; 0x2c
 80127ba:	f001 ffe1 	bl	8014780 <uxr_serialize_HEARTBEAT_Payload>
 80127be:	2200      	movs	r2, #0
 80127c0:	4611      	mov	r1, r2
 80127c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80127c4:	4638      	mov	r0, r7
 80127c6:	f000 fc43 	bl	8013050 <uxr_stamp_session_header>
 80127ca:	4658      	mov	r0, fp
 80127cc:	f7ff f890 	bl	80118f0 <ucdr_buffer_length>
 80127d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80127d2:	4602      	mov	r2, r0
 80127d4:	a90c      	add	r1, sp, #48	; 0x30
 80127d6:	e9d3 0500 	ldrd	r0, r5, [r3]
 80127da:	443c      	add	r4, r7
 80127dc:	47a8      	blx	r5
 80127de:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80127e2:	e79f      	b.n	8012724 <listen_message_reliably+0x3c>
 80127e4:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 80127e8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80127ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80127f0:	4294      	cmp	r4, r2
 80127f2:	bf08      	it	eq
 80127f4:	428b      	cmpeq	r3, r1
 80127f6:	d01d      	beq.n	8012834 <listen_message_reliably+0x14c>
 80127f8:	eba3 030a 	sub.w	r3, r3, sl
 80127fc:	9905      	ldr	r1, [sp, #20]
 80127fe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012800:	2b00      	cmp	r3, #0
 8012802:	bf08      	it	eq
 8012804:	2301      	moveq	r3, #1
 8012806:	4299      	cmp	r1, r3
 8012808:	bfa8      	it	ge
 801280a:	4619      	movge	r1, r3
 801280c:	6894      	ldr	r4, [r2, #8]
 801280e:	6810      	ldr	r0, [r2, #0]
 8012810:	4689      	mov	r9, r1
 8012812:	460b      	mov	r3, r1
 8012814:	aa08      	add	r2, sp, #32
 8012816:	a907      	add	r1, sp, #28
 8012818:	47a0      	blx	r4
 801281a:	b968      	cbnz	r0, 8012838 <listen_message_reliably+0x150>
 801281c:	9b05      	ldr	r3, [sp, #20]
 801281e:	eba3 0309 	sub.w	r3, r3, r9
 8012822:	2b00      	cmp	r3, #0
 8012824:	9305      	str	r3, [sp, #20]
 8012826:	f73f af68 	bgt.w	80126fa <listen_message_reliably+0x12>
 801282a:	4604      	mov	r4, r0
 801282c:	4620      	mov	r0, r4
 801282e:	b01d      	add	sp, #116	; 0x74
 8012830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012834:	9b05      	ldr	r3, [sp, #20]
 8012836:	e7e1      	b.n	80127fc <listen_message_reliably+0x114>
 8012838:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801283c:	4604      	mov	r4, r0
 801283e:	a80c      	add	r0, sp, #48	; 0x30
 8012840:	f7ff f82a 	bl	8011898 <ucdr_init_buffer>
 8012844:	2500      	movs	r5, #0
 8012846:	a90c      	add	r1, sp, #48	; 0x30
 8012848:	f10d 031a 	add.w	r3, sp, #26
 801284c:	aa06      	add	r2, sp, #24
 801284e:	4638      	mov	r0, r7
 8012850:	f88d 5018 	strb.w	r5, [sp, #24]
 8012854:	f000 fc12 	bl	801307c <uxr_read_session_header>
 8012858:	b918      	cbnz	r0, 8012862 <listen_message_reliably+0x17a>
 801285a:	4620      	mov	r0, r4
 801285c:	b01d      	add	sp, #116	; 0x74
 801285e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012862:	4629      	mov	r1, r5
 8012864:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8012868:	f000 fcac 	bl	80131c4 <uxr_stream_id_from_raw>
 801286c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8012870:	2e01      	cmp	r6, #1
 8012872:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8012876:	900a      	str	r0, [sp, #40]	; 0x28
 8012878:	fa5f fa80 	uxtb.w	sl, r0
 801287c:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8012880:	d04b      	beq.n	801291a <listen_message_reliably+0x232>
 8012882:	2e02      	cmp	r6, #2
 8012884:	d00f      	beq.n	80128a6 <listen_message_reliably+0x1be>
 8012886:	2e00      	cmp	r6, #0
 8012888:	d1e7      	bne.n	801285a <listen_message_reliably+0x172>
 801288a:	4631      	mov	r1, r6
 801288c:	4630      	mov	r0, r6
 801288e:	f000 fc99 	bl	80131c4 <uxr_stream_id_from_raw>
 8012892:	a90c      	add	r1, sp, #48	; 0x30
 8012894:	4602      	mov	r2, r0
 8012896:	4638      	mov	r0, r7
 8012898:	920a      	str	r2, [sp, #40]	; 0x28
 801289a:	f7ff fd9d 	bl	80123d8 <read_submessage_list>
 801289e:	4620      	mov	r0, r4
 80128a0:	b01d      	add	sp, #116	; 0x74
 80128a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128a6:	4629      	mov	r1, r5
 80128a8:	f107 0008 	add.w	r0, r7, #8
 80128ac:	f000 fd78 	bl	80133a0 <uxr_get_input_reliable_stream>
 80128b0:	4680      	mov	r8, r0
 80128b2:	b348      	cbz	r0, 8012908 <listen_message_reliably+0x220>
 80128b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80128b6:	9202      	str	r2, [sp, #8]
 80128b8:	a80c      	add	r0, sp, #48	; 0x30
 80128ba:	f7ff f81d 	bl	80118f8 <ucdr_buffer_remaining>
 80128be:	4603      	mov	r3, r0
 80128c0:	f10d 0019 	add.w	r0, sp, #25
 80128c4:	9000      	str	r0, [sp, #0]
 80128c6:	9a02      	ldr	r2, [sp, #8]
 80128c8:	4649      	mov	r1, r9
 80128ca:	4640      	mov	r0, r8
 80128cc:	f005 fd98 	bl	8018400 <uxr_receive_reliable_message>
 80128d0:	b1d0      	cbz	r0, 8012908 <listen_message_reliably+0x220>
 80128d2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d037      	beq.n	801294a <listen_message_reliably+0x262>
 80128da:	ae14      	add	r6, sp, #80	; 0x50
 80128dc:	f04f 0902 	mov.w	r9, #2
 80128e0:	e008      	b.n	80128f4 <listen_message_reliably+0x20c>
 80128e2:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 80128e6:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 80128ea:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 80128ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80128f0:	f7ff fd72 	bl	80123d8 <read_submessage_list>
 80128f4:	4631      	mov	r1, r6
 80128f6:	2204      	movs	r2, #4
 80128f8:	4640      	mov	r0, r8
 80128fa:	f005 fe01 	bl	8018500 <uxr_next_input_reliable_buffer_available>
 80128fe:	4603      	mov	r3, r0
 8012900:	4631      	mov	r1, r6
 8012902:	4638      	mov	r0, r7
 8012904:	2b00      	cmp	r3, #0
 8012906:	d1ec      	bne.n	80128e2 <listen_message_reliably+0x1fa>
 8012908:	4638      	mov	r0, r7
 801290a:	462a      	mov	r2, r5
 801290c:	4651      	mov	r1, sl
 801290e:	f7ff fbe1 	bl	80120d4 <write_submessage_acknack.isra.0>
 8012912:	4620      	mov	r0, r4
 8012914:	b01d      	add	sp, #116	; 0x74
 8012916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801291a:	4629      	mov	r1, r5
 801291c:	f107 0008 	add.w	r0, r7, #8
 8012920:	f000 fd34 	bl	801338c <uxr_get_input_best_effort_stream>
 8012924:	2800      	cmp	r0, #0
 8012926:	d098      	beq.n	801285a <listen_message_reliably+0x172>
 8012928:	4649      	mov	r1, r9
 801292a:	f005 fce5 	bl	80182f8 <uxr_receive_best_effort_message>
 801292e:	2800      	cmp	r0, #0
 8012930:	d093      	beq.n	801285a <listen_message_reliably+0x172>
 8012932:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8012936:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 801293a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 801293e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012940:	a90c      	add	r1, sp, #48	; 0x30
 8012942:	4638      	mov	r0, r7
 8012944:	f7ff fd48 	bl	80123d8 <read_submessage_list>
 8012948:	e787      	b.n	801285a <listen_message_reliably+0x172>
 801294a:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 801294e:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8012952:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8012956:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012958:	a90c      	add	r1, sp, #48	; 0x30
 801295a:	4638      	mov	r0, r7
 801295c:	f7ff fd3c 	bl	80123d8 <read_submessage_list>
 8012960:	e7bb      	b.n	80128da <listen_message_reliably+0x1f2>
 8012962:	bf00      	nop

08012964 <uxr_run_session_timeout>:
 8012964:	b570      	push	{r4, r5, r6, lr}
 8012966:	4604      	mov	r4, r0
 8012968:	460d      	mov	r5, r1
 801296a:	f000 fd81 	bl	8013470 <uxr_millis>
 801296e:	4606      	mov	r6, r0
 8012970:	4620      	mov	r0, r4
 8012972:	f7ff fc75 	bl	8012260 <uxr_flash_output_streams>
 8012976:	4629      	mov	r1, r5
 8012978:	4620      	mov	r0, r4
 801297a:	f7ff feb5 	bl	80126e8 <listen_message_reliably>
 801297e:	f000 fd77 	bl	8013470 <uxr_millis>
 8012982:	1b83      	subs	r3, r0, r6
 8012984:	1ae9      	subs	r1, r5, r3
 8012986:	2900      	cmp	r1, #0
 8012988:	dcf6      	bgt.n	8012978 <uxr_run_session_timeout+0x14>
 801298a:	f104 0008 	add.w	r0, r4, #8
 801298e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012992:	f000 bd11 	b.w	80133b8 <uxr_output_streams_confirmed>
 8012996:	bf00      	nop

08012998 <uxr_run_session_until_data>:
 8012998:	b570      	push	{r4, r5, r6, lr}
 801299a:	4604      	mov	r4, r0
 801299c:	460d      	mov	r5, r1
 801299e:	f000 fd67 	bl	8013470 <uxr_millis>
 80129a2:	4606      	mov	r6, r0
 80129a4:	4620      	mov	r0, r4
 80129a6:	f7ff fc5b 	bl	8012260 <uxr_flash_output_streams>
 80129aa:	2300      	movs	r3, #0
 80129ac:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 80129b0:	4629      	mov	r1, r5
 80129b2:	e005      	b.n	80129c0 <uxr_run_session_until_data+0x28>
 80129b4:	f000 fd5c 	bl	8013470 <uxr_millis>
 80129b8:	1b83      	subs	r3, r0, r6
 80129ba:	1ae9      	subs	r1, r5, r3
 80129bc:	2900      	cmp	r1, #0
 80129be:	dd07      	ble.n	80129d0 <uxr_run_session_until_data+0x38>
 80129c0:	4620      	mov	r0, r4
 80129c2:	f7ff fe91 	bl	80126e8 <listen_message_reliably>
 80129c6:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 80129ca:	2800      	cmp	r0, #0
 80129cc:	d0f2      	beq.n	80129b4 <uxr_run_session_until_data+0x1c>
 80129ce:	bd70      	pop	{r4, r5, r6, pc}
 80129d0:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 80129d4:	bd70      	pop	{r4, r5, r6, pc}
 80129d6:	bf00      	nop

080129d8 <uxr_run_session_until_confirm_delivery>:
 80129d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129dc:	4606      	mov	r6, r0
 80129de:	460d      	mov	r5, r1
 80129e0:	f000 fd46 	bl	8013470 <uxr_millis>
 80129e4:	4607      	mov	r7, r0
 80129e6:	4630      	mov	r0, r6
 80129e8:	f7ff fc3a 	bl	8012260 <uxr_flash_output_streams>
 80129ec:	2d00      	cmp	r5, #0
 80129ee:	f106 0808 	add.w	r8, r6, #8
 80129f2:	bfa8      	it	ge
 80129f4:	462c      	movge	r4, r5
 80129f6:	da07      	bge.n	8012a08 <uxr_run_session_until_confirm_delivery+0x30>
 80129f8:	e00e      	b.n	8012a18 <uxr_run_session_until_confirm_delivery+0x40>
 80129fa:	f7ff fe75 	bl	80126e8 <listen_message_reliably>
 80129fe:	f000 fd37 	bl	8013470 <uxr_millis>
 8012a02:	1bc3      	subs	r3, r0, r7
 8012a04:	1aec      	subs	r4, r5, r3
 8012a06:	d407      	bmi.n	8012a18 <uxr_run_session_until_confirm_delivery+0x40>
 8012a08:	4640      	mov	r0, r8
 8012a0a:	f000 fcd5 	bl	80133b8 <uxr_output_streams_confirmed>
 8012a0e:	4603      	mov	r3, r0
 8012a10:	4621      	mov	r1, r4
 8012a12:	4630      	mov	r0, r6
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d0f0      	beq.n	80129fa <uxr_run_session_until_confirm_delivery+0x22>
 8012a18:	4640      	mov	r0, r8
 8012a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a1e:	f000 bccb 	b.w	80133b8 <uxr_output_streams_confirmed>
 8012a22:	bf00      	nop

08012a24 <uxr_run_session_until_all_status>:
 8012a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a28:	9d08      	ldr	r5, [sp, #32]
 8012a2a:	460f      	mov	r7, r1
 8012a2c:	4692      	mov	sl, r2
 8012a2e:	461c      	mov	r4, r3
 8012a30:	4606      	mov	r6, r0
 8012a32:	f7ff fc15 	bl	8012260 <uxr_flash_output_streams>
 8012a36:	b125      	cbz	r5, 8012a42 <uxr_run_session_until_all_status+0x1e>
 8012a38:	462a      	mov	r2, r5
 8012a3a:	21ff      	movs	r1, #255	; 0xff
 8012a3c:	4620      	mov	r0, r4
 8012a3e:	f007 fd23 	bl	801a488 <memset>
 8012a42:	e9c6 a41d 	strd	sl, r4, [r6, #116]	; 0x74
 8012a46:	67f5      	str	r5, [r6, #124]	; 0x7c
 8012a48:	f000 fd12 	bl	8013470 <uxr_millis>
 8012a4c:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8012a50:	f1aa 0a02 	sub.w	sl, sl, #2
 8012a54:	4680      	mov	r8, r0
 8012a56:	4639      	mov	r1, r7
 8012a58:	4630      	mov	r0, r6
 8012a5a:	f7ff fe45 	bl	80126e8 <listen_message_reliably>
 8012a5e:	f000 fd07 	bl	8013470 <uxr_millis>
 8012a62:	eba0 0008 	sub.w	r0, r0, r8
 8012a66:	1a39      	subs	r1, r7, r0
 8012a68:	b33d      	cbz	r5, 8012aba <uxr_run_session_until_all_status+0x96>
 8012a6a:	46cc      	mov	ip, r9
 8012a6c:	464a      	mov	r2, r9
 8012a6e:	2301      	movs	r3, #1
 8012a70:	e002      	b.n	8012a78 <uxr_run_session_until_all_status+0x54>
 8012a72:	42ab      	cmp	r3, r5
 8012a74:	d20c      	bcs.n	8012a90 <uxr_run_session_until_all_status+0x6c>
 8012a76:	3301      	adds	r3, #1
 8012a78:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8012a7c:	2cff      	cmp	r4, #255	; 0xff
 8012a7e:	d1f8      	bne.n	8012a72 <uxr_run_session_until_all_status+0x4e>
 8012a80:	42ab      	cmp	r3, r5
 8012a82:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 8012a86:	d213      	bcs.n	8012ab0 <uxr_run_session_until_all_status+0x8c>
 8012a88:	2800      	cmp	r0, #0
 8012a8a:	d0f4      	beq.n	8012a76 <uxr_run_session_until_all_status+0x52>
 8012a8c:	2900      	cmp	r1, #0
 8012a8e:	dce3      	bgt.n	8012a58 <uxr_run_session_until_all_status+0x34>
 8012a90:	2300      	movs	r3, #0
 8012a92:	444d      	add	r5, r9
 8012a94:	67f3      	str	r3, [r6, #124]	; 0x7c
 8012a96:	e001      	b.n	8012a9c <uxr_run_session_until_all_status+0x78>
 8012a98:	2b01      	cmp	r3, #1
 8012a9a:	d812      	bhi.n	8012ac2 <uxr_run_session_until_all_status+0x9e>
 8012a9c:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8012aa0:	4565      	cmp	r5, ip
 8012aa2:	d1f9      	bne.n	8012a98 <uxr_run_session_until_all_status+0x74>
 8012aa4:	2b01      	cmp	r3, #1
 8012aa6:	bf8c      	ite	hi
 8012aa8:	2000      	movhi	r0, #0
 8012aaa:	2001      	movls	r0, #1
 8012aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ab0:	2900      	cmp	r1, #0
 8012ab2:	dded      	ble.n	8012a90 <uxr_run_session_until_all_status+0x6c>
 8012ab4:	2800      	cmp	r0, #0
 8012ab6:	d1cf      	bne.n	8012a58 <uxr_run_session_until_all_status+0x34>
 8012ab8:	e7ea      	b.n	8012a90 <uxr_run_session_until_all_status+0x6c>
 8012aba:	67f5      	str	r5, [r6, #124]	; 0x7c
 8012abc:	2001      	movs	r0, #1
 8012abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ac2:	2000      	movs	r0, #0
 8012ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012ac8 <uxr_create_session>:
 8012ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012acc:	ed2d 8b02 	vpush	{d8}
 8012ad0:	f100 0808 	add.w	r8, r0, #8
 8012ad4:	b0a9      	sub	sp, #164	; 0xa4
 8012ad6:	4604      	mov	r4, r0
 8012ad8:	4640      	mov	r0, r8
 8012ada:	f000 fba9 	bl	8013230 <uxr_reset_stream_storage>
 8012ade:	4620      	mov	r0, r4
 8012ae0:	f000 fb0e 	bl	8013100 <uxr_session_header_offset>
 8012ae4:	a909      	add	r1, sp, #36	; 0x24
 8012ae6:	9000      	str	r0, [sp, #0]
 8012ae8:	2300      	movs	r3, #0
 8012aea:	a810      	add	r0, sp, #64	; 0x40
 8012aec:	221c      	movs	r2, #28
 8012aee:	f7fe fec1 	bl	8011874 <ucdr_init_buffer_origin_offset>
 8012af2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012af4:	8a1a      	ldrh	r2, [r3, #16]
 8012af6:	3a04      	subs	r2, #4
 8012af8:	b292      	uxth	r2, r2
 8012afa:	4620      	mov	r0, r4
 8012afc:	a910      	add	r1, sp, #64	; 0x40
 8012afe:	f000 fa23 	bl	8012f48 <uxr_buffer_create_session>
 8012b02:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012b04:	4620      	mov	r0, r4
 8012b06:	f000 fa8f 	bl	8013028 <uxr_stamp_create_session_header>
 8012b0a:	a810      	add	r0, sp, #64	; 0x40
 8012b0c:	f7fe fef0 	bl	80118f0 <ucdr_buffer_length>
 8012b10:	23ff      	movs	r3, #255	; 0xff
 8012b12:	ee08 0a10 	vmov	s16, r0
 8012b16:	7163      	strb	r3, [r4, #5]
 8012b18:	f04f 090a 	mov.w	r9, #10
 8012b1c:	46c2      	mov	sl, r8
 8012b1e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012b20:	ee18 2a10 	vmov	r2, s16
 8012b24:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012b28:	a909      	add	r1, sp, #36	; 0x24
 8012b2a:	47a8      	blx	r5
 8012b2c:	f000 fca0 	bl	8013470 <uxr_millis>
 8012b30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012b34:	9002      	str	r0, [sp, #8]
 8012b36:	e00c      	b.n	8012b52 <uxr_create_session+0x8a>
 8012b38:	f000 fc9a 	bl	8013470 <uxr_millis>
 8012b3c:	9b02      	ldr	r3, [sp, #8]
 8012b3e:	7962      	ldrb	r2, [r4, #5]
 8012b40:	1ac0      	subs	r0, r0, r3
 8012b42:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	f340 8094 	ble.w	8012c74 <uxr_create_session+0x1ac>
 8012b4c:	2aff      	cmp	r2, #255	; 0xff
 8012b4e:	f040 8097 	bne.w	8012c80 <uxr_create_session+0x1b8>
 8012b52:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8012b54:	a905      	add	r1, sp, #20
 8012b56:	6895      	ldr	r5, [r2, #8]
 8012b58:	6810      	ldr	r0, [r2, #0]
 8012b5a:	aa06      	add	r2, sp, #24
 8012b5c:	47a8      	blx	r5
 8012b5e:	2800      	cmp	r0, #0
 8012b60:	d0ea      	beq.n	8012b38 <uxr_create_session+0x70>
 8012b62:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8012b66:	a818      	add	r0, sp, #96	; 0x60
 8012b68:	f7fe fe96 	bl	8011898 <ucdr_init_buffer>
 8012b6c:	2500      	movs	r5, #0
 8012b6e:	f10d 0312 	add.w	r3, sp, #18
 8012b72:	aa04      	add	r2, sp, #16
 8012b74:	a918      	add	r1, sp, #96	; 0x60
 8012b76:	4620      	mov	r0, r4
 8012b78:	f88d 5010 	strb.w	r5, [sp, #16]
 8012b7c:	f000 fa7e 	bl	801307c <uxr_read_session_header>
 8012b80:	2800      	cmp	r0, #0
 8012b82:	d0d9      	beq.n	8012b38 <uxr_create_session+0x70>
 8012b84:	4629      	mov	r1, r5
 8012b86:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8012b8a:	f000 fb1b 	bl	80131c4 <uxr_stream_id_from_raw>
 8012b8e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8012b92:	2f01      	cmp	r7, #1
 8012b94:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8012b98:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8012b9c:	fa5f f880 	uxtb.w	r8, r0
 8012ba0:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8012ba4:	d04d      	beq.n	8012c42 <uxr_create_session+0x17a>
 8012ba6:	2f02      	cmp	r7, #2
 8012ba8:	d00c      	beq.n	8012bc4 <uxr_create_session+0xfc>
 8012baa:	2f00      	cmp	r7, #0
 8012bac:	d1c4      	bne.n	8012b38 <uxr_create_session+0x70>
 8012bae:	4639      	mov	r1, r7
 8012bb0:	4638      	mov	r0, r7
 8012bb2:	f000 fb07 	bl	80131c4 <uxr_stream_id_from_raw>
 8012bb6:	a918      	add	r1, sp, #96	; 0x60
 8012bb8:	4602      	mov	r2, r0
 8012bba:	4620      	mov	r0, r4
 8012bbc:	9208      	str	r2, [sp, #32]
 8012bbe:	f7ff fc0b 	bl	80123d8 <read_submessage_list>
 8012bc2:	e7b9      	b.n	8012b38 <uxr_create_session+0x70>
 8012bc4:	4629      	mov	r1, r5
 8012bc6:	4650      	mov	r0, sl
 8012bc8:	f000 fbea 	bl	80133a0 <uxr_get_input_reliable_stream>
 8012bcc:	4606      	mov	r6, r0
 8012bce:	b390      	cbz	r0, 8012c36 <uxr_create_session+0x16e>
 8012bd0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012bd2:	9203      	str	r2, [sp, #12]
 8012bd4:	a818      	add	r0, sp, #96	; 0x60
 8012bd6:	f7fe fe8f 	bl	80118f8 <ucdr_buffer_remaining>
 8012bda:	4603      	mov	r3, r0
 8012bdc:	f10d 0011 	add.w	r0, sp, #17
 8012be0:	9000      	str	r0, [sp, #0]
 8012be2:	9a03      	ldr	r2, [sp, #12]
 8012be4:	4659      	mov	r1, fp
 8012be6:	4630      	mov	r0, r6
 8012be8:	f005 fc0a 	bl	8018400 <uxr_receive_reliable_message>
 8012bec:	b318      	cbz	r0, 8012c36 <uxr_create_session+0x16e>
 8012bee:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8012bf2:	b9b3      	cbnz	r3, 8012c22 <uxr_create_session+0x15a>
 8012bf4:	f88d 8020 	strb.w	r8, [sp, #32]
 8012bf8:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8012bfc:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 8012c00:	9a08      	ldr	r2, [sp, #32]
 8012c02:	a918      	add	r1, sp, #96	; 0x60
 8012c04:	4620      	mov	r0, r4
 8012c06:	f7ff fbe7 	bl	80123d8 <read_submessage_list>
 8012c0a:	e00a      	b.n	8012c22 <uxr_create_session+0x15a>
 8012c0c:	f04f 0302 	mov.w	r3, #2
 8012c10:	f88d 8020 	strb.w	r8, [sp, #32]
 8012c14:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8012c18:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 8012c1c:	9a08      	ldr	r2, [sp, #32]
 8012c1e:	f7ff fbdb 	bl	80123d8 <read_submessage_list>
 8012c22:	a920      	add	r1, sp, #128	; 0x80
 8012c24:	2204      	movs	r2, #4
 8012c26:	4630      	mov	r0, r6
 8012c28:	f005 fc6a 	bl	8018500 <uxr_next_input_reliable_buffer_available>
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	a920      	add	r1, sp, #128	; 0x80
 8012c30:	4620      	mov	r0, r4
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d1ea      	bne.n	8012c0c <uxr_create_session+0x144>
 8012c36:	462a      	mov	r2, r5
 8012c38:	4641      	mov	r1, r8
 8012c3a:	4620      	mov	r0, r4
 8012c3c:	f7ff fa4a 	bl	80120d4 <write_submessage_acknack.isra.0>
 8012c40:	e77a      	b.n	8012b38 <uxr_create_session+0x70>
 8012c42:	4629      	mov	r1, r5
 8012c44:	4650      	mov	r0, sl
 8012c46:	f000 fba1 	bl	801338c <uxr_get_input_best_effort_stream>
 8012c4a:	2800      	cmp	r0, #0
 8012c4c:	f43f af74 	beq.w	8012b38 <uxr_create_session+0x70>
 8012c50:	4659      	mov	r1, fp
 8012c52:	f005 fb51 	bl	80182f8 <uxr_receive_best_effort_message>
 8012c56:	2800      	cmp	r0, #0
 8012c58:	f43f af6e 	beq.w	8012b38 <uxr_create_session+0x70>
 8012c5c:	f88d 8020 	strb.w	r8, [sp, #32]
 8012c60:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8012c64:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 8012c68:	9a08      	ldr	r2, [sp, #32]
 8012c6a:	a918      	add	r1, sp, #96	; 0x60
 8012c6c:	4620      	mov	r0, r4
 8012c6e:	f7ff fbb3 	bl	80123d8 <read_submessage_list>
 8012c72:	e761      	b.n	8012b38 <uxr_create_session+0x70>
 8012c74:	f1b9 0901 	subs.w	r9, r9, #1
 8012c78:	d002      	beq.n	8012c80 <uxr_create_session+0x1b8>
 8012c7a:	2aff      	cmp	r2, #255	; 0xff
 8012c7c:	f43f af4f 	beq.w	8012b1e <uxr_create_session+0x56>
 8012c80:	b12a      	cbz	r2, 8012c8e <uxr_create_session+0x1c6>
 8012c82:	2000      	movs	r0, #0
 8012c84:	b029      	add	sp, #164	; 0xa4
 8012c86:	ecbd 8b02 	vpop	{d8}
 8012c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c8e:	4650      	mov	r0, sl
 8012c90:	f000 face 	bl	8013230 <uxr_reset_stream_storage>
 8012c94:	2001      	movs	r0, #1
 8012c96:	b029      	add	sp, #164	; 0xa4
 8012c98:	ecbd 8b02 	vpop	{d8}
 8012c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012ca0 <wait_session_status>:
 8012ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ca4:	4604      	mov	r4, r0
 8012ca6:	b09d      	sub	sp, #116	; 0x74
 8012ca8:	20ff      	movs	r0, #255	; 0xff
 8012caa:	7160      	strb	r0, [r4, #5]
 8012cac:	9304      	str	r3, [sp, #16]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	f000 80b8 	beq.w	8012e24 <wait_session_status+0x184>
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	468b      	mov	fp, r1
 8012cb8:	4692      	mov	sl, r2
 8012cba:	9303      	str	r3, [sp, #12]
 8012cbc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012cbe:	4652      	mov	r2, sl
 8012cc0:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012cc4:	4659      	mov	r1, fp
 8012cc6:	47a8      	blx	r5
 8012cc8:	f000 fbd2 	bl	8013470 <uxr_millis>
 8012ccc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012cd0:	4605      	mov	r5, r0
 8012cd2:	e009      	b.n	8012ce8 <wait_session_status+0x48>
 8012cd4:	f000 fbcc 	bl	8013470 <uxr_millis>
 8012cd8:	1b40      	subs	r0, r0, r5
 8012cda:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	dd42      	ble.n	8012d68 <wait_session_status+0xc8>
 8012ce2:	7960      	ldrb	r0, [r4, #5]
 8012ce4:	28ff      	cmp	r0, #255	; 0xff
 8012ce6:	d148      	bne.n	8012d7a <wait_session_status+0xda>
 8012ce8:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8012cea:	a908      	add	r1, sp, #32
 8012cec:	6896      	ldr	r6, [r2, #8]
 8012cee:	6810      	ldr	r0, [r2, #0]
 8012cf0:	aa09      	add	r2, sp, #36	; 0x24
 8012cf2:	47b0      	blx	r6
 8012cf4:	2800      	cmp	r0, #0
 8012cf6:	d0ed      	beq.n	8012cd4 <wait_session_status+0x34>
 8012cf8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8012cfc:	a80c      	add	r0, sp, #48	; 0x30
 8012cfe:	f7fe fdcb 	bl	8011898 <ucdr_init_buffer>
 8012d02:	2600      	movs	r6, #0
 8012d04:	f10d 031e 	add.w	r3, sp, #30
 8012d08:	aa07      	add	r2, sp, #28
 8012d0a:	a90c      	add	r1, sp, #48	; 0x30
 8012d0c:	4620      	mov	r0, r4
 8012d0e:	f88d 601c 	strb.w	r6, [sp, #28]
 8012d12:	f000 f9b3 	bl	801307c <uxr_read_session_header>
 8012d16:	2800      	cmp	r0, #0
 8012d18:	d0dc      	beq.n	8012cd4 <wait_session_status+0x34>
 8012d1a:	4631      	mov	r1, r6
 8012d1c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8012d20:	f000 fa50 	bl	80131c4 <uxr_stream_id_from_raw>
 8012d24:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8012d28:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8012d2c:	9302      	str	r3, [sp, #8]
 8012d2e:	2f01      	cmp	r7, #1
 8012d30:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8012d34:	fa5f f880 	uxtb.w	r8, r0
 8012d38:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8012d3c:	d058      	beq.n	8012df0 <wait_session_status+0x150>
 8012d3e:	2f02      	cmp	r7, #2
 8012d40:	d021      	beq.n	8012d86 <wait_session_status+0xe6>
 8012d42:	2f00      	cmp	r7, #0
 8012d44:	d1c6      	bne.n	8012cd4 <wait_session_status+0x34>
 8012d46:	4639      	mov	r1, r7
 8012d48:	4638      	mov	r0, r7
 8012d4a:	f000 fa3b 	bl	80131c4 <uxr_stream_id_from_raw>
 8012d4e:	a90c      	add	r1, sp, #48	; 0x30
 8012d50:	4602      	mov	r2, r0
 8012d52:	4620      	mov	r0, r4
 8012d54:	920b      	str	r2, [sp, #44]	; 0x2c
 8012d56:	f7ff fb3f 	bl	80123d8 <read_submessage_list>
 8012d5a:	f000 fb89 	bl	8013470 <uxr_millis>
 8012d5e:	1b40      	subs	r0, r0, r5
 8012d60:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	dcbc      	bgt.n	8012ce2 <wait_session_status+0x42>
 8012d68:	9b03      	ldr	r3, [sp, #12]
 8012d6a:	9a04      	ldr	r2, [sp, #16]
 8012d6c:	7960      	ldrb	r0, [r4, #5]
 8012d6e:	3301      	adds	r3, #1
 8012d70:	429a      	cmp	r2, r3
 8012d72:	9303      	str	r3, [sp, #12]
 8012d74:	d001      	beq.n	8012d7a <wait_session_status+0xda>
 8012d76:	28ff      	cmp	r0, #255	; 0xff
 8012d78:	d0a0      	beq.n	8012cbc <wait_session_status+0x1c>
 8012d7a:	38ff      	subs	r0, #255	; 0xff
 8012d7c:	bf18      	it	ne
 8012d7e:	2001      	movne	r0, #1
 8012d80:	b01d      	add	sp, #116	; 0x74
 8012d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d86:	4631      	mov	r1, r6
 8012d88:	f104 0008 	add.w	r0, r4, #8
 8012d8c:	f000 fb08 	bl	80133a0 <uxr_get_input_reliable_stream>
 8012d90:	4681      	mov	r9, r0
 8012d92:	b338      	cbz	r0, 8012de4 <wait_session_status+0x144>
 8012d94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012d96:	9205      	str	r2, [sp, #20]
 8012d98:	a80c      	add	r0, sp, #48	; 0x30
 8012d9a:	f7fe fdad 	bl	80118f8 <ucdr_buffer_remaining>
 8012d9e:	4603      	mov	r3, r0
 8012da0:	f10d 001d 	add.w	r0, sp, #29
 8012da4:	9000      	str	r0, [sp, #0]
 8012da6:	9a05      	ldr	r2, [sp, #20]
 8012da8:	9902      	ldr	r1, [sp, #8]
 8012daa:	4648      	mov	r0, r9
 8012dac:	f005 fb28 	bl	8018400 <uxr_receive_reliable_message>
 8012db0:	b1c0      	cbz	r0, 8012de4 <wait_session_status+0x144>
 8012db2:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8012db6:	b95b      	cbnz	r3, 8012dd0 <wait_session_status+0x130>
 8012db8:	e03c      	b.n	8012e34 <wait_session_status+0x194>
 8012dba:	f04f 0302 	mov.w	r3, #2
 8012dbe:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8012dc2:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8012dc6:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8012dca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012dcc:	f7ff fb04 	bl	80123d8 <read_submessage_list>
 8012dd0:	a914      	add	r1, sp, #80	; 0x50
 8012dd2:	2204      	movs	r2, #4
 8012dd4:	4648      	mov	r0, r9
 8012dd6:	f005 fb93 	bl	8018500 <uxr_next_input_reliable_buffer_available>
 8012dda:	4603      	mov	r3, r0
 8012ddc:	a914      	add	r1, sp, #80	; 0x50
 8012dde:	4620      	mov	r0, r4
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d1ea      	bne.n	8012dba <wait_session_status+0x11a>
 8012de4:	4632      	mov	r2, r6
 8012de6:	4641      	mov	r1, r8
 8012de8:	4620      	mov	r0, r4
 8012dea:	f7ff f973 	bl	80120d4 <write_submessage_acknack.isra.0>
 8012dee:	e771      	b.n	8012cd4 <wait_session_status+0x34>
 8012df0:	4631      	mov	r1, r6
 8012df2:	f104 0008 	add.w	r0, r4, #8
 8012df6:	f000 fac9 	bl	801338c <uxr_get_input_best_effort_stream>
 8012dfa:	2800      	cmp	r0, #0
 8012dfc:	f43f af6a 	beq.w	8012cd4 <wait_session_status+0x34>
 8012e00:	9902      	ldr	r1, [sp, #8]
 8012e02:	f005 fa79 	bl	80182f8 <uxr_receive_best_effort_message>
 8012e06:	2800      	cmp	r0, #0
 8012e08:	f43f af64 	beq.w	8012cd4 <wait_session_status+0x34>
 8012e0c:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8012e10:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8012e14:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8012e18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012e1a:	a90c      	add	r1, sp, #48	; 0x30
 8012e1c:	4620      	mov	r0, r4
 8012e1e:	f7ff fadb 	bl	80123d8 <read_submessage_list>
 8012e22:	e757      	b.n	8012cd4 <wait_session_status+0x34>
 8012e24:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012e26:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012e2a:	47a0      	blx	r4
 8012e2c:	2001      	movs	r0, #1
 8012e2e:	b01d      	add	sp, #116	; 0x74
 8012e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e34:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8012e38:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8012e3c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8012e40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012e42:	a90c      	add	r1, sp, #48	; 0x30
 8012e44:	4620      	mov	r0, r4
 8012e46:	f7ff fac7 	bl	80123d8 <read_submessage_list>
 8012e4a:	e7c1      	b.n	8012dd0 <wait_session_status+0x130>

08012e4c <uxr_delete_session_retries>:
 8012e4c:	b530      	push	{r4, r5, lr}
 8012e4e:	b08f      	sub	sp, #60	; 0x3c
 8012e50:	4604      	mov	r4, r0
 8012e52:	460d      	mov	r5, r1
 8012e54:	f000 f954 	bl	8013100 <uxr_session_header_offset>
 8012e58:	2300      	movs	r3, #0
 8012e5a:	2210      	movs	r2, #16
 8012e5c:	9000      	str	r0, [sp, #0]
 8012e5e:	a902      	add	r1, sp, #8
 8012e60:	a806      	add	r0, sp, #24
 8012e62:	f7fe fd07 	bl	8011874 <ucdr_init_buffer_origin_offset>
 8012e66:	a906      	add	r1, sp, #24
 8012e68:	4620      	mov	r0, r4
 8012e6a:	f000 f897 	bl	8012f9c <uxr_buffer_delete_session>
 8012e6e:	2200      	movs	r2, #0
 8012e70:	4611      	mov	r1, r2
 8012e72:	9b06      	ldr	r3, [sp, #24]
 8012e74:	4620      	mov	r0, r4
 8012e76:	f000 f8eb 	bl	8013050 <uxr_stamp_session_header>
 8012e7a:	a806      	add	r0, sp, #24
 8012e7c:	f7fe fd38 	bl	80118f0 <ucdr_buffer_length>
 8012e80:	462b      	mov	r3, r5
 8012e82:	4602      	mov	r2, r0
 8012e84:	a902      	add	r1, sp, #8
 8012e86:	4620      	mov	r0, r4
 8012e88:	f7ff ff0a 	bl	8012ca0 <wait_session_status>
 8012e8c:	b118      	cbz	r0, 8012e96 <uxr_delete_session_retries+0x4a>
 8012e8e:	7960      	ldrb	r0, [r4, #5]
 8012e90:	fab0 f080 	clz	r0, r0
 8012e94:	0940      	lsrs	r0, r0, #5
 8012e96:	b00f      	add	sp, #60	; 0x3c
 8012e98:	bd30      	pop	{r4, r5, pc}
 8012e9a:	bf00      	nop

08012e9c <uxr_prepare_stream_to_write_submessage>:
 8012e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ea0:	b082      	sub	sp, #8
 8012ea2:	4682      	mov	sl, r0
 8012ea4:	4610      	mov	r0, r2
 8012ea6:	4615      	mov	r5, r2
 8012ea8:	461e      	mov	r6, r3
 8012eaa:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8012eae:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8012eb2:	9101      	str	r1, [sp, #4]
 8012eb4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8012eb8:	f000 fad4 	bl	8013464 <uxr_submessage_padding>
 8012ebc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012ec0:	f105 0904 	add.w	r9, r5, #4
 8012ec4:	2b01      	cmp	r3, #1
 8012ec6:	4481      	add	r9, r0
 8012ec8:	d01d      	beq.n	8012f06 <uxr_prepare_stream_to_write_submessage+0x6a>
 8012eca:	2b02      	cmp	r3, #2
 8012ecc:	d116      	bne.n	8012efc <uxr_prepare_stream_to_write_submessage+0x60>
 8012ece:	4621      	mov	r1, r4
 8012ed0:	f10a 0008 	add.w	r0, sl, #8
 8012ed4:	f000 fa4e 	bl	8013374 <uxr_get_output_reliable_stream>
 8012ed8:	4604      	mov	r4, r0
 8012eda:	b158      	cbz	r0, 8012ef4 <uxr_prepare_stream_to_write_submessage+0x58>
 8012edc:	4649      	mov	r1, r9
 8012ede:	4632      	mov	r2, r6
 8012ee0:	f005 fcc4 	bl	801886c <uxr_prepare_reliable_buffer_to_write>
 8012ee4:	4604      	mov	r4, r0
 8012ee6:	b12c      	cbz	r4, 8012ef4 <uxr_prepare_stream_to_write_submessage+0x58>
 8012ee8:	4643      	mov	r3, r8
 8012eea:	b2aa      	uxth	r2, r5
 8012eec:	4639      	mov	r1, r7
 8012eee:	4630      	mov	r0, r6
 8012ef0:	f000 fa78 	bl	80133e4 <uxr_buffer_submessage_header>
 8012ef4:	4620      	mov	r0, r4
 8012ef6:	b002      	add	sp, #8
 8012ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012efc:	2400      	movs	r4, #0
 8012efe:	4620      	mov	r0, r4
 8012f00:	b002      	add	sp, #8
 8012f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f06:	4621      	mov	r1, r4
 8012f08:	f10a 0008 	add.w	r0, sl, #8
 8012f0c:	f000 fa2a 	bl	8013364 <uxr_get_output_best_effort_stream>
 8012f10:	4604      	mov	r4, r0
 8012f12:	2800      	cmp	r0, #0
 8012f14:	d0ee      	beq.n	8012ef4 <uxr_prepare_stream_to_write_submessage+0x58>
 8012f16:	4649      	mov	r1, r9
 8012f18:	4632      	mov	r2, r6
 8012f1a:	f005 fbe3 	bl	80186e4 <uxr_prepare_best_effort_buffer_to_write>
 8012f1e:	4604      	mov	r4, r0
 8012f20:	e7e1      	b.n	8012ee6 <uxr_prepare_stream_to_write_submessage+0x4a>
 8012f22:	bf00      	nop

08012f24 <uxr_init_session_info>:
 8012f24:	b470      	push	{r4, r5, r6}
 8012f26:	7102      	strb	r2, [r0, #4]
 8012f28:	0e16      	lsrs	r6, r2, #24
 8012f2a:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8012f2e:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8012f32:	23ff      	movs	r3, #255	; 0xff
 8012f34:	2209      	movs	r2, #9
 8012f36:	7046      	strb	r6, [r0, #1]
 8012f38:	7085      	strb	r5, [r0, #2]
 8012f3a:	70c4      	strb	r4, [r0, #3]
 8012f3c:	7001      	strb	r1, [r0, #0]
 8012f3e:	bc70      	pop	{r4, r5, r6}
 8012f40:	80c2      	strh	r2, [r0, #6]
 8012f42:	7143      	strb	r3, [r0, #5]
 8012f44:	4770      	bx	lr
 8012f46:	bf00      	nop

08012f48 <uxr_buffer_create_session>:
 8012f48:	b570      	push	{r4, r5, r6, lr}
 8012f4a:	b088      	sub	sp, #32
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	4d12      	ldr	r5, [pc, #72]	; (8012f98 <uxr_buffer_create_session+0x50>)
 8012f50:	9307      	str	r3, [sp, #28]
 8012f52:	f8ad 201c 	strh.w	r2, [sp, #28]
 8012f56:	7802      	ldrb	r2, [r0, #0]
 8012f58:	9303      	str	r3, [sp, #12]
 8012f5a:	460c      	mov	r4, r1
 8012f5c:	f88d 200c 	strb.w	r2, [sp, #12]
 8012f60:	2101      	movs	r1, #1
 8012f62:	682a      	ldr	r2, [r5, #0]
 8012f64:	f8d0 6001 	ldr.w	r6, [r0, #1]
 8012f68:	88ad      	ldrh	r5, [r5, #4]
 8012f6a:	80c1      	strh	r1, [r0, #6]
 8012f6c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8012f70:	9200      	str	r2, [sp, #0]
 8012f72:	4619      	mov	r1, r3
 8012f74:	2210      	movs	r2, #16
 8012f76:	4620      	mov	r0, r4
 8012f78:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8012f7c:	9306      	str	r3, [sp, #24]
 8012f7e:	f88d 300d 	strb.w	r3, [sp, #13]
 8012f82:	9602      	str	r6, [sp, #8]
 8012f84:	f8ad 5006 	strh.w	r5, [sp, #6]
 8012f88:	f000 fa2c 	bl	80133e4 <uxr_buffer_submessage_header>
 8012f8c:	4620      	mov	r0, r4
 8012f8e:	4669      	mov	r1, sp
 8012f90:	f001 fa50 	bl	8014434 <uxr_serialize_CREATE_CLIENT_Payload>
 8012f94:	b008      	add	sp, #32
 8012f96:	bd70      	pop	{r4, r5, r6, pc}
 8012f98:	0801b770 	.word	0x0801b770

08012f9c <uxr_buffer_delete_session>:
 8012f9c:	b530      	push	{r4, r5, lr}
 8012f9e:	4b0c      	ldr	r3, [pc, #48]	; (8012fd0 <uxr_buffer_delete_session+0x34>)
 8012fa0:	b083      	sub	sp, #12
 8012fa2:	891b      	ldrh	r3, [r3, #8]
 8012fa4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012fa8:	2202      	movs	r2, #2
 8012faa:	460c      	mov	r4, r1
 8012fac:	80c2      	strh	r2, [r0, #6]
 8012fae:	2300      	movs	r3, #0
 8012fb0:	2204      	movs	r2, #4
 8012fb2:	4608      	mov	r0, r1
 8012fb4:	f44f 7500 	mov.w	r5, #512	; 0x200
 8012fb8:	2103      	movs	r1, #3
 8012fba:	f8ad 5004 	strh.w	r5, [sp, #4]
 8012fbe:	f000 fa11 	bl	80133e4 <uxr_buffer_submessage_header>
 8012fc2:	4620      	mov	r0, r4
 8012fc4:	a901      	add	r1, sp, #4
 8012fc6:	f001 fae3 	bl	8014590 <uxr_serialize_DELETE_Payload>
 8012fca:	b003      	add	sp, #12
 8012fcc:	bd30      	pop	{r4, r5, pc}
 8012fce:	bf00      	nop
 8012fd0:	0801b770 	.word	0x0801b770

08012fd4 <uxr_read_create_session_status>:
 8012fd4:	b510      	push	{r4, lr}
 8012fd6:	b088      	sub	sp, #32
 8012fd8:	4604      	mov	r4, r0
 8012fda:	4608      	mov	r0, r1
 8012fdc:	a901      	add	r1, sp, #4
 8012fde:	f001 fae7 	bl	80145b0 <uxr_deserialize_STATUS_AGENT_Payload>
 8012fe2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012fe6:	7163      	strb	r3, [r4, #5]
 8012fe8:	b008      	add	sp, #32
 8012fea:	bd10      	pop	{r4, pc}

08012fec <uxr_read_delete_session_status>:
 8012fec:	b510      	push	{r4, lr}
 8012fee:	4604      	mov	r4, r0
 8012ff0:	b084      	sub	sp, #16
 8012ff2:	4608      	mov	r0, r1
 8012ff4:	a902      	add	r1, sp, #8
 8012ff6:	f001 fb0b 	bl	8014610 <uxr_deserialize_STATUS_Payload>
 8012ffa:	88e3      	ldrh	r3, [r4, #6]
 8012ffc:	2b02      	cmp	r3, #2
 8012ffe:	d001      	beq.n	8013004 <uxr_read_delete_session_status+0x18>
 8013000:	b004      	add	sp, #16
 8013002:	bd10      	pop	{r4, pc}
 8013004:	f10d 000a 	add.w	r0, sp, #10
 8013008:	f7fe fec6 	bl	8011d98 <uxr_object_id_from_raw>
 801300c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8013010:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8013014:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013018:	b29b      	uxth	r3, r3
 801301a:	2b02      	cmp	r3, #2
 801301c:	bf04      	itt	eq
 801301e:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8013022:	7163      	strbeq	r3, [r4, #5]
 8013024:	b004      	add	sp, #16
 8013026:	bd10      	pop	{r4, pc}

08013028 <uxr_stamp_create_session_header>:
 8013028:	b510      	push	{r4, lr}
 801302a:	4604      	mov	r4, r0
 801302c:	b08a      	sub	sp, #40	; 0x28
 801302e:	a802      	add	r0, sp, #8
 8013030:	2208      	movs	r2, #8
 8013032:	f7fe fc31 	bl	8011898 <ucdr_init_buffer>
 8013036:	f814 1b01 	ldrb.w	r1, [r4], #1
 801303a:	9400      	str	r4, [sp, #0]
 801303c:	2300      	movs	r3, #0
 801303e:	a802      	add	r0, sp, #8
 8013040:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8013044:	461a      	mov	r2, r3
 8013046:	f000 fbcb 	bl	80137e0 <uxr_serialize_message_header>
 801304a:	b00a      	add	sp, #40	; 0x28
 801304c:	bd10      	pop	{r4, pc}
 801304e:	bf00      	nop

08013050 <uxr_stamp_session_header>:
 8013050:	b570      	push	{r4, r5, r6, lr}
 8013052:	4604      	mov	r4, r0
 8013054:	b08c      	sub	sp, #48	; 0x30
 8013056:	460d      	mov	r5, r1
 8013058:	4616      	mov	r6, r2
 801305a:	4619      	mov	r1, r3
 801305c:	a804      	add	r0, sp, #16
 801305e:	2208      	movs	r2, #8
 8013060:	9603      	str	r6, [sp, #12]
 8013062:	f7fe fc19 	bl	8011898 <ucdr_init_buffer>
 8013066:	f814 1b01 	ldrb.w	r1, [r4], #1
 801306a:	9b03      	ldr	r3, [sp, #12]
 801306c:	9400      	str	r4, [sp, #0]
 801306e:	462a      	mov	r2, r5
 8013070:	a804      	add	r0, sp, #16
 8013072:	f000 fbb5 	bl	80137e0 <uxr_serialize_message_header>
 8013076:	b00c      	add	sp, #48	; 0x30
 8013078:	bd70      	pop	{r4, r5, r6, pc}
 801307a:	bf00      	nop

0801307c <uxr_read_session_header>:
 801307c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013080:	4607      	mov	r7, r0
 8013082:	b084      	sub	sp, #16
 8013084:	4608      	mov	r0, r1
 8013086:	460c      	mov	r4, r1
 8013088:	4615      	mov	r5, r2
 801308a:	461e      	mov	r6, r3
 801308c:	f7fe fc34 	bl	80118f8 <ucdr_buffer_remaining>
 8013090:	2808      	cmp	r0, #8
 8013092:	d803      	bhi.n	801309c <uxr_read_session_header+0x20>
 8013094:	2000      	movs	r0, #0
 8013096:	b004      	add	sp, #16
 8013098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801309c:	f10d 080c 	add.w	r8, sp, #12
 80130a0:	4633      	mov	r3, r6
 80130a2:	462a      	mov	r2, r5
 80130a4:	4620      	mov	r0, r4
 80130a6:	f8cd 8000 	str.w	r8, [sp]
 80130aa:	f10d 010b 	add.w	r1, sp, #11
 80130ae:	f000 fbb5 	bl	801381c <uxr_deserialize_message_header>
 80130b2:	783a      	ldrb	r2, [r7, #0]
 80130b4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80130b8:	4293      	cmp	r3, r2
 80130ba:	d1eb      	bne.n	8013094 <uxr_read_session_header+0x18>
 80130bc:	061b      	lsls	r3, r3, #24
 80130be:	d41c      	bmi.n	80130fa <uxr_read_session_header+0x7e>
 80130c0:	f898 2000 	ldrb.w	r2, [r8]
 80130c4:	787b      	ldrb	r3, [r7, #1]
 80130c6:	429a      	cmp	r2, r3
 80130c8:	d003      	beq.n	80130d2 <uxr_read_session_header+0x56>
 80130ca:	2001      	movs	r0, #1
 80130cc:	f080 0001 	eor.w	r0, r0, #1
 80130d0:	e7e1      	b.n	8013096 <uxr_read_session_header+0x1a>
 80130d2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80130d6:	78bb      	ldrb	r3, [r7, #2]
 80130d8:	429a      	cmp	r2, r3
 80130da:	f107 0102 	add.w	r1, r7, #2
 80130de:	d1f4      	bne.n	80130ca <uxr_read_session_header+0x4e>
 80130e0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80130e4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80130e8:	429a      	cmp	r2, r3
 80130ea:	d1ee      	bne.n	80130ca <uxr_read_session_header+0x4e>
 80130ec:	784b      	ldrb	r3, [r1, #1]
 80130ee:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80130f2:	429a      	cmp	r2, r3
 80130f4:	d1e9      	bne.n	80130ca <uxr_read_session_header+0x4e>
 80130f6:	2000      	movs	r0, #0
 80130f8:	e7e8      	b.n	80130cc <uxr_read_session_header+0x50>
 80130fa:	2001      	movs	r0, #1
 80130fc:	e7cb      	b.n	8013096 <uxr_read_session_header+0x1a>
 80130fe:	bf00      	nop

08013100 <uxr_session_header_offset>:
 8013100:	f990 3000 	ldrsb.w	r3, [r0]
 8013104:	2b00      	cmp	r3, #0
 8013106:	bfac      	ite	ge
 8013108:	2008      	movge	r0, #8
 801310a:	2004      	movlt	r0, #4
 801310c:	4770      	bx	lr
 801310e:	bf00      	nop

08013110 <uxr_init_base_object_request>:
 8013110:	b530      	push	{r4, r5, lr}
 8013112:	88c3      	ldrh	r3, [r0, #6]
 8013114:	b083      	sub	sp, #12
 8013116:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 801311a:	9101      	str	r1, [sp, #4]
 801311c:	f1a3 010a 	sub.w	r1, r3, #10
 8013120:	b289      	uxth	r1, r1
 8013122:	42a1      	cmp	r1, r4
 8013124:	d80e      	bhi.n	8013144 <uxr_init_base_object_request+0x34>
 8013126:	3301      	adds	r3, #1
 8013128:	b29c      	uxth	r4, r3
 801312a:	f3c3 2507 	ubfx	r5, r3, #8, #8
 801312e:	b2db      	uxtb	r3, r3
 8013130:	80c4      	strh	r4, [r0, #6]
 8013132:	1c91      	adds	r1, r2, #2
 8013134:	9801      	ldr	r0, [sp, #4]
 8013136:	7015      	strb	r5, [r2, #0]
 8013138:	7053      	strb	r3, [r2, #1]
 801313a:	f7fe fe41 	bl	8011dc0 <uxr_object_id_to_raw>
 801313e:	4620      	mov	r0, r4
 8013140:	b003      	add	sp, #12
 8013142:	bd30      	pop	{r4, r5, pc}
 8013144:	230a      	movs	r3, #10
 8013146:	461c      	mov	r4, r3
 8013148:	2500      	movs	r5, #0
 801314a:	e7f1      	b.n	8013130 <uxr_init_base_object_request+0x20>

0801314c <uxr_parse_base_object_request>:
 801314c:	b570      	push	{r4, r5, r6, lr}
 801314e:	4604      	mov	r4, r0
 8013150:	3002      	adds	r0, #2
 8013152:	460d      	mov	r5, r1
 8013154:	4616      	mov	r6, r2
 8013156:	f7fe fe1f 	bl	8011d98 <uxr_object_id_from_raw>
 801315a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801315e:	8028      	strh	r0, [r5, #0]
 8013160:	806b      	strh	r3, [r5, #2]
 8013162:	7822      	ldrb	r2, [r4, #0]
 8013164:	7863      	ldrb	r3, [r4, #1]
 8013166:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801316a:	8033      	strh	r3, [r6, #0]
 801316c:	bd70      	pop	{r4, r5, r6, pc}
 801316e:	bf00      	nop

08013170 <uxr_stream_id>:
 8013170:	b410      	push	{r4}
 8013172:	2901      	cmp	r1, #1
 8013174:	b083      	sub	sp, #12
 8013176:	d01f      	beq.n	80131b8 <uxr_stream_id+0x48>
 8013178:	2902      	cmp	r1, #2
 801317a:	f04f 0400 	mov.w	r4, #0
 801317e:	d01e      	beq.n	80131be <uxr_stream_id+0x4e>
 8013180:	2300      	movs	r3, #0
 8013182:	f364 0307 	bfi	r3, r4, #0, #8
 8013186:	f360 230f 	bfi	r3, r0, #8, #8
 801318a:	f361 4317 	bfi	r3, r1, #16, #8
 801318e:	f362 631f 	bfi	r3, r2, #24, #8
 8013192:	b2da      	uxtb	r2, r3
 8013194:	2000      	movs	r0, #0
 8013196:	f362 0007 	bfi	r0, r2, #0, #8
 801319a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801319e:	f362 200f 	bfi	r0, r2, #8, #8
 80131a2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80131a6:	f362 4017 	bfi	r0, r2, #16, #8
 80131aa:	0e1b      	lsrs	r3, r3, #24
 80131ac:	f363 601f 	bfi	r0, r3, #24, #8
 80131b0:	b003      	add	sp, #12
 80131b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80131b6:	4770      	bx	lr
 80131b8:	1c44      	adds	r4, r0, #1
 80131ba:	b2e4      	uxtb	r4, r4
 80131bc:	e7e0      	b.n	8013180 <uxr_stream_id+0x10>
 80131be:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 80131c2:	e7dd      	b.n	8013180 <uxr_stream_id+0x10>

080131c4 <uxr_stream_id_from_raw>:
 80131c4:	b410      	push	{r4}
 80131c6:	b083      	sub	sp, #12
 80131c8:	b128      	cbz	r0, 80131d6 <uxr_stream_id_from_raw+0x12>
 80131ca:	0603      	lsls	r3, r0, #24
 80131cc:	d421      	bmi.n	8013212 <uxr_stream_id_from_raw+0x4e>
 80131ce:	1e42      	subs	r2, r0, #1
 80131d0:	b2d2      	uxtb	r2, r2
 80131d2:	2401      	movs	r4, #1
 80131d4:	e001      	b.n	80131da <uxr_stream_id_from_raw+0x16>
 80131d6:	4604      	mov	r4, r0
 80131d8:	4602      	mov	r2, r0
 80131da:	2300      	movs	r3, #0
 80131dc:	f360 0307 	bfi	r3, r0, #0, #8
 80131e0:	f362 230f 	bfi	r3, r2, #8, #8
 80131e4:	f364 4317 	bfi	r3, r4, #16, #8
 80131e8:	f361 631f 	bfi	r3, r1, #24, #8
 80131ec:	b2da      	uxtb	r2, r3
 80131ee:	2000      	movs	r0, #0
 80131f0:	f362 0007 	bfi	r0, r2, #0, #8
 80131f4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80131f8:	f362 200f 	bfi	r0, r2, #8, #8
 80131fc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013200:	f362 4017 	bfi	r0, r2, #16, #8
 8013204:	0e1b      	lsrs	r3, r3, #24
 8013206:	f363 601f 	bfi	r0, r3, #24, #8
 801320a:	b003      	add	sp, #12
 801320c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013210:	4770      	bx	lr
 8013212:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 8013216:	2402      	movs	r4, #2
 8013218:	e7df      	b.n	80131da <uxr_stream_id_from_raw+0x16>
 801321a:	bf00      	nop

0801321c <uxr_init_stream_storage>:
 801321c:	2300      	movs	r3, #0
 801321e:	7403      	strb	r3, [r0, #16]
 8013220:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8013224:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8013228:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 801322c:	4770      	bx	lr
 801322e:	bf00      	nop

08013230 <uxr_reset_stream_storage>:
 8013230:	b570      	push	{r4, r5, r6, lr}
 8013232:	7c03      	ldrb	r3, [r0, #16]
 8013234:	4604      	mov	r4, r0
 8013236:	b153      	cbz	r3, 801324e <uxr_reset_stream_storage+0x1e>
 8013238:	4606      	mov	r6, r0
 801323a:	2500      	movs	r5, #0
 801323c:	4630      	mov	r0, r6
 801323e:	f005 fa4b 	bl	80186d8 <uxr_reset_output_best_effort_stream>
 8013242:	7c23      	ldrb	r3, [r4, #16]
 8013244:	3501      	adds	r5, #1
 8013246:	42ab      	cmp	r3, r5
 8013248:	f106 0610 	add.w	r6, r6, #16
 801324c:	d8f6      	bhi.n	801323c <uxr_reset_stream_storage+0xc>
 801324e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013252:	b163      	cbz	r3, 801326e <uxr_reset_stream_storage+0x3e>
 8013254:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013258:	2500      	movs	r5, #0
 801325a:	4630      	mov	r0, r6
 801325c:	f005 f848 	bl	80182f0 <uxr_reset_input_best_effort_stream>
 8013260:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013264:	3501      	adds	r5, #1
 8013266:	42ab      	cmp	r3, r5
 8013268:	f106 0602 	add.w	r6, r6, #2
 801326c:	d8f5      	bhi.n	801325a <uxr_reset_stream_storage+0x2a>
 801326e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8013272:	b163      	cbz	r3, 801328e <uxr_reset_stream_storage+0x5e>
 8013274:	f104 0618 	add.w	r6, r4, #24
 8013278:	2500      	movs	r5, #0
 801327a:	4630      	mov	r0, r6
 801327c:	f005 facc 	bl	8018818 <uxr_reset_output_reliable_stream>
 8013280:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8013284:	3501      	adds	r5, #1
 8013286:	42ab      	cmp	r3, r5
 8013288:	f106 0628 	add.w	r6, r6, #40	; 0x28
 801328c:	d8f5      	bhi.n	801327a <uxr_reset_stream_storage+0x4a>
 801328e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8013292:	b163      	cbz	r3, 80132ae <uxr_reset_stream_storage+0x7e>
 8013294:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8013298:	2500      	movs	r5, #0
 801329a:	4630      	mov	r0, r6
 801329c:	f005 f890 	bl	80183c0 <uxr_reset_input_reliable_stream>
 80132a0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80132a4:	3501      	adds	r5, #1
 80132a6:	42ab      	cmp	r3, r5
 80132a8:	f106 0618 	add.w	r6, r6, #24
 80132ac:	d8f5      	bhi.n	801329a <uxr_reset_stream_storage+0x6a>
 80132ae:	bd70      	pop	{r4, r5, r6, pc}

080132b0 <uxr_add_output_best_effort_buffer>:
 80132b0:	b530      	push	{r4, r5, lr}
 80132b2:	7c04      	ldrb	r4, [r0, #16]
 80132b4:	1c65      	adds	r5, r4, #1
 80132b6:	b083      	sub	sp, #12
 80132b8:	7405      	strb	r5, [r0, #16]
 80132ba:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80132be:	f005 f9ff 	bl	80186c0 <uxr_init_output_best_effort_stream>
 80132c2:	2201      	movs	r2, #1
 80132c4:	4620      	mov	r0, r4
 80132c6:	4611      	mov	r1, r2
 80132c8:	b003      	add	sp, #12
 80132ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80132ce:	f7ff bf4f 	b.w	8013170 <uxr_stream_id>
 80132d2:	bf00      	nop

080132d4 <uxr_add_output_reliable_buffer>:
 80132d4:	b570      	push	{r4, r5, r6, lr}
 80132d6:	b084      	sub	sp, #16
 80132d8:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80132dc:	f89d 6020 	ldrb.w	r6, [sp, #32]
 80132e0:	9600      	str	r6, [sp, #0]
 80132e2:	2528      	movs	r5, #40	; 0x28
 80132e4:	1c66      	adds	r6, r4, #1
 80132e6:	fb05 0504 	mla	r5, r5, r4, r0
 80132ea:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 80132ee:	f105 0018 	add.w	r0, r5, #24
 80132f2:	f005 fa5f 	bl	80187b4 <uxr_init_output_reliable_stream>
 80132f6:	4620      	mov	r0, r4
 80132f8:	2201      	movs	r2, #1
 80132fa:	2102      	movs	r1, #2
 80132fc:	b004      	add	sp, #16
 80132fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013302:	f7ff bf35 	b.w	8013170 <uxr_stream_id>
 8013306:	bf00      	nop

08013308 <uxr_add_input_best_effort_buffer>:
 8013308:	b510      	push	{r4, lr}
 801330a:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 801330e:	1c62      	adds	r2, r4, #1
 8013310:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8013314:	b082      	sub	sp, #8
 8013316:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 801331a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801331e:	f004 ffe3 	bl	80182e8 <uxr_init_input_best_effort_stream>
 8013322:	4620      	mov	r0, r4
 8013324:	2200      	movs	r2, #0
 8013326:	2101      	movs	r1, #1
 8013328:	b002      	add	sp, #8
 801332a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801332e:	f7ff bf1f 	b.w	8013170 <uxr_stream_id>
 8013332:	bf00      	nop

08013334 <uxr_add_input_reliable_buffer>:
 8013334:	b570      	push	{r4, r5, r6, lr}
 8013336:	b084      	sub	sp, #16
 8013338:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 801333c:	9e08      	ldr	r6, [sp, #32]
 801333e:	9600      	str	r6, [sp, #0]
 8013340:	2518      	movs	r5, #24
 8013342:	1c66      	adds	r6, r4, #1
 8013344:	fb05 0504 	mla	r5, r5, r4, r0
 8013348:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 801334c:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8013350:	f005 f812 	bl	8018378 <uxr_init_input_reliable_stream>
 8013354:	4620      	mov	r0, r4
 8013356:	2200      	movs	r2, #0
 8013358:	2102      	movs	r1, #2
 801335a:	b004      	add	sp, #16
 801335c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013360:	f7ff bf06 	b.w	8013170 <uxr_stream_id>

08013364 <uxr_get_output_best_effort_stream>:
 8013364:	7c03      	ldrb	r3, [r0, #16]
 8013366:	428b      	cmp	r3, r1
 8013368:	bf8c      	ite	hi
 801336a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801336e:	2000      	movls	r0, #0
 8013370:	4770      	bx	lr
 8013372:	bf00      	nop

08013374 <uxr_get_output_reliable_stream>:
 8013374:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8013378:	428b      	cmp	r3, r1
 801337a:	bf83      	ittte	hi
 801337c:	2328      	movhi	r3, #40	; 0x28
 801337e:	fb03 0101 	mlahi	r1, r3, r1, r0
 8013382:	f101 0018 	addhi.w	r0, r1, #24
 8013386:	2000      	movls	r0, #0
 8013388:	4770      	bx	lr
 801338a:	bf00      	nop

0801338c <uxr_get_input_best_effort_stream>:
 801338c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8013390:	428b      	cmp	r3, r1
 8013392:	bf86      	itte	hi
 8013394:	3121      	addhi	r1, #33	; 0x21
 8013396:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 801339a:	2000      	movls	r0, #0
 801339c:	4770      	bx	lr
 801339e:	bf00      	nop

080133a0 <uxr_get_input_reliable_stream>:
 80133a0:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80133a4:	428b      	cmp	r3, r1
 80133a6:	bf83      	ittte	hi
 80133a8:	2318      	movhi	r3, #24
 80133aa:	fb03 0101 	mlahi	r1, r3, r1, r0
 80133ae:	f101 0048 	addhi.w	r0, r1, #72	; 0x48
 80133b2:	2000      	movls	r0, #0
 80133b4:	4770      	bx	lr
 80133b6:	bf00      	nop

080133b8 <uxr_output_streams_confirmed>:
 80133b8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80133bc:	b183      	cbz	r3, 80133e0 <uxr_output_streams_confirmed+0x28>
 80133be:	b570      	push	{r4, r5, r6, lr}
 80133c0:	4606      	mov	r6, r0
 80133c2:	f100 0518 	add.w	r5, r0, #24
 80133c6:	2400      	movs	r4, #0
 80133c8:	e001      	b.n	80133ce <uxr_output_streams_confirmed+0x16>
 80133ca:	3528      	adds	r5, #40	; 0x28
 80133cc:	b138      	cbz	r0, 80133de <uxr_output_streams_confirmed+0x26>
 80133ce:	4628      	mov	r0, r5
 80133d0:	f005 fc86 	bl	8018ce0 <uxr_is_output_up_to_date>
 80133d4:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 80133d8:	3401      	adds	r4, #1
 80133da:	42a3      	cmp	r3, r4
 80133dc:	d8f5      	bhi.n	80133ca <uxr_output_streams_confirmed+0x12>
 80133de:	bd70      	pop	{r4, r5, r6, pc}
 80133e0:	2001      	movs	r0, #1
 80133e2:	4770      	bx	lr

080133e4 <uxr_buffer_submessage_header>:
 80133e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133e6:	4604      	mov	r4, r0
 80133e8:	460e      	mov	r6, r1
 80133ea:	2104      	movs	r1, #4
 80133ec:	4615      	mov	r5, r2
 80133ee:	461f      	mov	r7, r3
 80133f0:	f7fe fa6c 	bl	80118cc <ucdr_align_to>
 80133f4:	2301      	movs	r3, #1
 80133f6:	ea47 0203 	orr.w	r2, r7, r3
 80133fa:	4631      	mov	r1, r6
 80133fc:	7523      	strb	r3, [r4, #20]
 80133fe:	4620      	mov	r0, r4
 8013400:	462b      	mov	r3, r5
 8013402:	f000 fa2b 	bl	801385c <uxr_serialize_submessage_header>
 8013406:	4620      	mov	r0, r4
 8013408:	f7fe fa76 	bl	80118f8 <ucdr_buffer_remaining>
 801340c:	42a8      	cmp	r0, r5
 801340e:	bf34      	ite	cc
 8013410:	2000      	movcc	r0, #0
 8013412:	2001      	movcs	r0, #1
 8013414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013416:	bf00      	nop

08013418 <uxr_read_submessage_header>:
 8013418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801341c:	4604      	mov	r4, r0
 801341e:	460d      	mov	r5, r1
 8013420:	2104      	movs	r1, #4
 8013422:	4616      	mov	r6, r2
 8013424:	4698      	mov	r8, r3
 8013426:	f7fe fa51 	bl	80118cc <ucdr_align_to>
 801342a:	4620      	mov	r0, r4
 801342c:	f7fe fa64 	bl	80118f8 <ucdr_buffer_remaining>
 8013430:	2803      	cmp	r0, #3
 8013432:	bf8c      	ite	hi
 8013434:	2701      	movhi	r7, #1
 8013436:	2700      	movls	r7, #0
 8013438:	d802      	bhi.n	8013440 <uxr_read_submessage_header+0x28>
 801343a:	4638      	mov	r0, r7
 801343c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013440:	4633      	mov	r3, r6
 8013442:	4642      	mov	r2, r8
 8013444:	4620      	mov	r0, r4
 8013446:	4629      	mov	r1, r5
 8013448:	f000 fa1c 	bl	8013884 <uxr_deserialize_submessage_header>
 801344c:	f898 3000 	ldrb.w	r3, [r8]
 8013450:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8013454:	f003 0301 	and.w	r3, r3, #1
 8013458:	f888 2000 	strb.w	r2, [r8]
 801345c:	7523      	strb	r3, [r4, #20]
 801345e:	4638      	mov	r0, r7
 8013460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013464 <uxr_submessage_padding>:
 8013464:	f010 0003 	ands.w	r0, r0, #3
 8013468:	bf18      	it	ne
 801346a:	f1c0 0004 	rsbne	r0, r0, #4
 801346e:	4770      	bx	lr

08013470 <uxr_millis>:
 8013470:	b510      	push	{r4, lr}
 8013472:	b084      	sub	sp, #16
 8013474:	4669      	mov	r1, sp
 8013476:	2001      	movs	r0, #1
 8013478:	f7f0 f9ae 	bl	80037d8 <clock_gettime>
 801347c:	e9dd 2400 	ldrd	r2, r4, [sp]
 8013480:	4907      	ldr	r1, [pc, #28]	; (80134a0 <uxr_millis+0x30>)
 8013482:	9802      	ldr	r0, [sp, #8]
 8013484:	fba2 2301 	umull	r2, r3, r2, r1
 8013488:	fb01 3304 	mla	r3, r1, r4, r3
 801348c:	4604      	mov	r4, r0
 801348e:	1810      	adds	r0, r2, r0
 8013490:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8013494:	4a03      	ldr	r2, [pc, #12]	; (80134a4 <uxr_millis+0x34>)
 8013496:	2300      	movs	r3, #0
 8013498:	f7ed fbb0 	bl	8000bfc <__aeabi_ldivmod>
 801349c:	b004      	add	sp, #16
 801349e:	bd10      	pop	{r4, pc}
 80134a0:	3b9aca00 	.word	0x3b9aca00
 80134a4:	000f4240 	.word	0x000f4240

080134a8 <uxr_nanos>:
 80134a8:	b510      	push	{r4, lr}
 80134aa:	b084      	sub	sp, #16
 80134ac:	4669      	mov	r1, sp
 80134ae:	2001      	movs	r0, #1
 80134b0:	f7f0 f992 	bl	80037d8 <clock_gettime>
 80134b4:	e9dd 2400 	ldrd	r2, r4, [sp]
 80134b8:	4905      	ldr	r1, [pc, #20]	; (80134d0 <uxr_nanos+0x28>)
 80134ba:	9802      	ldr	r0, [sp, #8]
 80134bc:	fba2 2301 	umull	r2, r3, r2, r1
 80134c0:	fb01 3304 	mla	r3, r1, r4, r3
 80134c4:	4604      	mov	r4, r0
 80134c6:	1810      	adds	r0, r2, r0
 80134c8:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 80134cc:	b004      	add	sp, #16
 80134ce:	bd10      	pop	{r4, pc}
 80134d0:	3b9aca00 	.word	0x3b9aca00

080134d4 <on_full_output_buffer_fragmented>:
 80134d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134d8:	460c      	mov	r4, r1
 80134da:	b08a      	sub	sp, #40	; 0x28
 80134dc:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 80134e0:	4606      	mov	r6, r0
 80134e2:	f104 0008 	add.w	r0, r4, #8
 80134e6:	f7ff ff45 	bl	8013374 <uxr_get_output_reliable_stream>
 80134ea:	4605      	mov	r5, r0
 80134ec:	f005 fc02 	bl	8018cf4 <get_available_free_slots>
 80134f0:	b968      	cbnz	r0, 801350e <on_full_output_buffer_fragmented+0x3a>
 80134f2:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 80134f6:	4620      	mov	r0, r4
 80134f8:	4798      	blx	r3
 80134fa:	b918      	cbnz	r0, 8013504 <on_full_output_buffer_fragmented+0x30>
 80134fc:	2001      	movs	r0, #1
 80134fe:	b00a      	add	sp, #40	; 0x28
 8013500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013504:	4628      	mov	r0, r5
 8013506:	f005 fbf5 	bl	8018cf4 <get_available_free_slots>
 801350a:	2800      	cmp	r0, #0
 801350c:	d0f6      	beq.n	80134fc <on_full_output_buffer_fragmented+0x28>
 801350e:	8928      	ldrh	r0, [r5, #8]
 8013510:	89eb      	ldrh	r3, [r5, #14]
 8013512:	7b2a      	ldrb	r2, [r5, #12]
 8013514:	fbb3 f1f0 	udiv	r1, r3, r0
 8013518:	f5c2 427f 	rsb	r2, r2, #65280	; 0xff00
 801351c:	fb00 3111 	mls	r1, r0, r1, r3
 8013520:	b28b      	uxth	r3, r1
 8013522:	32fc      	adds	r2, #252	; 0xfc
 8013524:	6869      	ldr	r1, [r5, #4]
 8013526:	fbb1 f1f0 	udiv	r1, r1, r0
 801352a:	1f0f      	subs	r7, r1, #4
 801352c:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 8013530:	fb01 f103 	mul.w	r1, r1, r3
 8013534:	443a      	add	r2, r7
 8013536:	682b      	ldr	r3, [r5, #0]
 8013538:	fa1f f882 	uxth.w	r8, r2
 801353c:	3104      	adds	r1, #4
 801353e:	4419      	add	r1, r3
 8013540:	eba0 0008 	sub.w	r0, r0, r8
 8013544:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 8013548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801354c:	9300      	str	r3, [sp, #0]
 801354e:	463a      	mov	r2, r7
 8013550:	2300      	movs	r3, #0
 8013552:	a802      	add	r0, sp, #8
 8013554:	f7fe f98e 	bl	8011874 <ucdr_init_buffer_origin_offset>
 8013558:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 801355c:	f102 0308 	add.w	r3, r2, #8
 8013560:	42bb      	cmp	r3, r7
 8013562:	d927      	bls.n	80135b4 <on_full_output_buffer_fragmented+0xe0>
 8013564:	4642      	mov	r2, r8
 8013566:	2300      	movs	r3, #0
 8013568:	210d      	movs	r1, #13
 801356a:	a802      	add	r0, sp, #8
 801356c:	f7ff ff3a 	bl	80133e4 <uxr_buffer_submessage_header>
 8013570:	8928      	ldrh	r0, [r5, #8]
 8013572:	89eb      	ldrh	r3, [r5, #14]
 8013574:	fbb3 f1f0 	udiv	r1, r3, r0
 8013578:	fb00 3111 	mls	r1, r0, r1, r3
 801357c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013580:	b289      	uxth	r1, r1
 8013582:	fbb3 f3f0 	udiv	r3, r3, r0
 8013586:	fb03 f301 	mul.w	r3, r3, r1
 801358a:	50d7      	str	r7, [r2, r3]
 801358c:	89e8      	ldrh	r0, [r5, #14]
 801358e:	2101      	movs	r1, #1
 8013590:	f005 fbd0 	bl	8018d34 <uxr_seq_num_add>
 8013594:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8013598:	81e8      	strh	r0, [r5, #14]
 801359a:	1a52      	subs	r2, r2, r1
 801359c:	4630      	mov	r0, r6
 801359e:	f7fe f97b 	bl	8011898 <ucdr_init_buffer>
 80135a2:	4630      	mov	r0, r6
 80135a4:	490f      	ldr	r1, [pc, #60]	; (80135e4 <on_full_output_buffer_fragmented+0x110>)
 80135a6:	4622      	mov	r2, r4
 80135a8:	f7fe f94c 	bl	8011844 <ucdr_set_on_full_buffer_callback>
 80135ac:	2000      	movs	r0, #0
 80135ae:	b00a      	add	sp, #40	; 0x28
 80135b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135b4:	b292      	uxth	r2, r2
 80135b6:	2302      	movs	r3, #2
 80135b8:	210d      	movs	r1, #13
 80135ba:	a802      	add	r0, sp, #8
 80135bc:	f7ff ff12 	bl	80133e4 <uxr_buffer_submessage_header>
 80135c0:	8928      	ldrh	r0, [r5, #8]
 80135c2:	89eb      	ldrh	r3, [r5, #14]
 80135c4:	fbb3 f2f0 	udiv	r2, r3, r0
 80135c8:	fb00 3212 	mls	r2, r0, r2, r3
 80135cc:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 80135d0:	686b      	ldr	r3, [r5, #4]
 80135d2:	fbb3 f3f0 	udiv	r3, r3, r0
 80135d6:	b292      	uxth	r2, r2
 80135d8:	6828      	ldr	r0, [r5, #0]
 80135da:	fb03 f302 	mul.w	r3, r3, r2
 80135de:	3108      	adds	r1, #8
 80135e0:	50c1      	str	r1, [r0, r3]
 80135e2:	e7d3      	b.n	801358c <on_full_output_buffer_fragmented+0xb8>
 80135e4:	080134d5 	.word	0x080134d5

080135e8 <uxr_prepare_output_stream>:
 80135e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135ea:	b087      	sub	sp, #28
 80135ec:	2407      	movs	r4, #7
 80135ee:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80135f0:	9202      	str	r2, [sp, #8]
 80135f2:	2500      	movs	r5, #0
 80135f4:	1d32      	adds	r2, r6, #4
 80135f6:	e9cd 4500 	strd	r4, r5, [sp]
 80135fa:	9103      	str	r1, [sp, #12]
 80135fc:	461c      	mov	r4, r3
 80135fe:	4606      	mov	r6, r0
 8013600:	f7ff fc4c 	bl	8012e9c <uxr_prepare_stream_to_write_submessage>
 8013604:	f080 0201 	eor.w	r2, r0, #1
 8013608:	b2d2      	uxtb	r2, r2
 801360a:	75a2      	strb	r2, [r4, #22]
 801360c:	b112      	cbz	r2, 8013614 <uxr_prepare_output_stream+0x2c>
 801360e:	4628      	mov	r0, r5
 8013610:	b007      	add	sp, #28
 8013612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013614:	aa05      	add	r2, sp, #20
 8013616:	9902      	ldr	r1, [sp, #8]
 8013618:	4630      	mov	r0, r6
 801361a:	f7ff fd79 	bl	8013110 <uxr_init_base_object_request>
 801361e:	a905      	add	r1, sp, #20
 8013620:	4605      	mov	r5, r0
 8013622:	4620      	mov	r0, r4
 8013624:	f001 f872 	bl	801470c <uxr_serialize_WRITE_DATA_Payload_Data>
 8013628:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801362c:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 8013630:	1a52      	subs	r2, r2, r1
 8013632:	4620      	mov	r0, r4
 8013634:	f7fe f930 	bl	8011898 <ucdr_init_buffer>
 8013638:	4620      	mov	r0, r4
 801363a:	463a      	mov	r2, r7
 801363c:	4631      	mov	r1, r6
 801363e:	f7fe f901 	bl	8011844 <ucdr_set_on_full_buffer_callback>
 8013642:	4628      	mov	r0, r5
 8013644:	b007      	add	sp, #28
 8013646:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013648 <uxr_prepare_output_stream_fragmented>:
 8013648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801364c:	b093      	sub	sp, #76	; 0x4c
 801364e:	4605      	mov	r5, r0
 8013650:	9107      	str	r1, [sp, #28]
 8013652:	3008      	adds	r0, #8
 8013654:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8013658:	9303      	str	r3, [sp, #12]
 801365a:	9206      	str	r2, [sp, #24]
 801365c:	f7ff fe8a 	bl	8013374 <uxr_get_output_reliable_stream>
 8013660:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013664:	2b01      	cmp	r3, #1
 8013666:	f000 8094 	beq.w	8013792 <uxr_prepare_output_stream_fragmented+0x14a>
 801366a:	4604      	mov	r4, r0
 801366c:	2800      	cmp	r0, #0
 801366e:	f000 8090 	beq.w	8013792 <uxr_prepare_output_stream_fragmented+0x14a>
 8013672:	f005 fb3f 	bl	8018cf4 <get_available_free_slots>
 8013676:	2800      	cmp	r0, #0
 8013678:	f000 8086 	beq.w	8013788 <uxr_prepare_output_stream_fragmented+0x140>
 801367c:	8922      	ldrh	r2, [r4, #8]
 801367e:	89e7      	ldrh	r7, [r4, #14]
 8013680:	fbb7 f8f2 	udiv	r8, r7, r2
 8013684:	e9d4 3100 	ldrd	r3, r1, [r4]
 8013688:	fb02 7818 	mls	r8, r2, r8, r7
 801368c:	fa1f f888 	uxth.w	r8, r8
 8013690:	fbb1 f2f2 	udiv	r2, r1, r2
 8013694:	fb02 f808 	mul.w	r8, r2, r8
 8013698:	f108 0804 	add.w	r8, r8, #4
 801369c:	4498      	add	r8, r3
 801369e:	7b23      	ldrb	r3, [r4, #12]
 80136a0:	f858 ac04 	ldr.w	sl, [r8, #-4]
 80136a4:	9204      	str	r2, [sp, #16]
 80136a6:	4553      	cmp	r3, sl
 80136a8:	f1a2 0b04 	sub.w	fp, r2, #4
 80136ac:	d37d      	bcc.n	80137aa <uxr_prepare_output_stream_fragmented+0x162>
 80136ae:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80136b0:	f8cd a000 	str.w	sl, [sp]
 80136b4:	f1ab 0904 	sub.w	r9, fp, #4
 80136b8:	eba9 0903 	sub.w	r9, r9, r3
 80136bc:	3608      	adds	r6, #8
 80136be:	a80a      	add	r0, sp, #40	; 0x28
 80136c0:	2300      	movs	r3, #0
 80136c2:	465a      	mov	r2, fp
 80136c4:	4641      	mov	r1, r8
 80136c6:	fa1f f989 	uxth.w	r9, r9
 80136ca:	9605      	str	r6, [sp, #20]
 80136cc:	f7fe f8d2 	bl	8011874 <ucdr_init_buffer_origin_offset>
 80136d0:	455e      	cmp	r6, fp
 80136d2:	bf34      	ite	cc
 80136d4:	2302      	movcc	r3, #2
 80136d6:	2300      	movcs	r3, #0
 80136d8:	464a      	mov	r2, r9
 80136da:	210d      	movs	r1, #13
 80136dc:	a80a      	add	r0, sp, #40	; 0x28
 80136de:	f7ff fe81 	bl	80133e4 <uxr_buffer_submessage_header>
 80136e2:	8920      	ldrh	r0, [r4, #8]
 80136e4:	fbb7 f3f0 	udiv	r3, r7, r0
 80136e8:	e9d4 2100 	ldrd	r2, r1, [r4]
 80136ec:	fb00 7313 	mls	r3, r0, r3, r7
 80136f0:	b29b      	uxth	r3, r3
 80136f2:	fbb1 f1f0 	udiv	r1, r1, r0
 80136f6:	fb03 f301 	mul.w	r3, r3, r1
 80136fa:	4638      	mov	r0, r7
 80136fc:	f842 b003 	str.w	fp, [r2, r3]
 8013700:	2101      	movs	r1, #1
 8013702:	f005 fb17 	bl	8018d34 <uxr_seq_num_add>
 8013706:	9b04      	ldr	r3, [sp, #16]
 8013708:	9e03      	ldr	r6, [sp, #12]
 801370a:	f1a3 0208 	sub.w	r2, r3, #8
 801370e:	f10a 0104 	add.w	r1, sl, #4
 8013712:	4607      	mov	r7, r0
 8013714:	eba2 020a 	sub.w	r2, r2, sl
 8013718:	4441      	add	r1, r8
 801371a:	4630      	mov	r0, r6
 801371c:	f7fe f8bc 	bl	8011898 <ucdr_init_buffer>
 8013720:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8013722:	81e7      	strh	r7, [r4, #14]
 8013724:	1d1a      	adds	r2, r3, #4
 8013726:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801372a:	bf28      	it	cs
 801372c:	2200      	movcs	r2, #0
 801372e:	b292      	uxth	r2, r2
 8013730:	2300      	movs	r3, #0
 8013732:	2107      	movs	r1, #7
 8013734:	4630      	mov	r0, r6
 8013736:	f7ff fe55 	bl	80133e4 <uxr_buffer_submessage_header>
 801373a:	9906      	ldr	r1, [sp, #24]
 801373c:	aa09      	add	r2, sp, #36	; 0x24
 801373e:	4628      	mov	r0, r5
 8013740:	f7ff fce6 	bl	8013110 <uxr_init_base_object_request>
 8013744:	4604      	mov	r4, r0
 8013746:	b328      	cbz	r0, 8013794 <uxr_prepare_output_stream_fragmented+0x14c>
 8013748:	9e03      	ldr	r6, [sp, #12]
 801374a:	a909      	add	r1, sp, #36	; 0x24
 801374c:	4630      	mov	r0, r6
 801374e:	f000 ffdd 	bl	801470c <uxr_serialize_WRITE_DATA_Payload_Data>
 8013752:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8013756:	4630      	mov	r0, r6
 8013758:	1a52      	subs	r2, r2, r1
 801375a:	f7fe f89d 	bl	8011898 <ucdr_init_buffer>
 801375e:	9a05      	ldr	r2, [sp, #20]
 8013760:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 8013764:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013766:	9b07      	ldr	r3, [sp, #28]
 8013768:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 801376c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801376e:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
 8013772:	4630      	mov	r0, r6
 8013774:	4919      	ldr	r1, [pc, #100]	; (80137dc <uxr_prepare_output_stream_fragmented+0x194>)
 8013776:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 801377a:	462a      	mov	r2, r5
 801377c:	f7fe f862 	bl	8011844 <ucdr_set_on_full_buffer_callback>
 8013780:	4620      	mov	r0, r4
 8013782:	b013      	add	sp, #76	; 0x4c
 8013784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013788:	991e      	ldr	r1, [sp, #120]	; 0x78
 801378a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801378c:	4628      	mov	r0, r5
 801378e:	4798      	blx	r3
 8013790:	b920      	cbnz	r0, 801379c <uxr_prepare_output_stream_fragmented+0x154>
 8013792:	2400      	movs	r4, #0
 8013794:	4620      	mov	r0, r4
 8013796:	b013      	add	sp, #76	; 0x4c
 8013798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801379c:	4620      	mov	r0, r4
 801379e:	f005 faa9 	bl	8018cf4 <get_available_free_slots>
 80137a2:	2800      	cmp	r0, #0
 80137a4:	f47f af6a 	bne.w	801367c <uxr_prepare_output_stream_fragmented+0x34>
 80137a8:	e7f3      	b.n	8013792 <uxr_prepare_output_stream_fragmented+0x14a>
 80137aa:	4638      	mov	r0, r7
 80137ac:	2101      	movs	r1, #1
 80137ae:	f005 fac1 	bl	8018d34 <uxr_seq_num_add>
 80137b2:	8922      	ldrh	r2, [r4, #8]
 80137b4:	fbb0 f8f2 	udiv	r8, r0, r2
 80137b8:	fb02 0818 	mls	r8, r2, r8, r0
 80137bc:	fa1f f888 	uxth.w	r8, r8
 80137c0:	6863      	ldr	r3, [r4, #4]
 80137c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80137c6:	6822      	ldr	r2, [r4, #0]
 80137c8:	fb08 f803 	mul.w	r8, r8, r3
 80137cc:	f108 0804 	add.w	r8, r8, #4
 80137d0:	4490      	add	r8, r2
 80137d2:	7b23      	ldrb	r3, [r4, #12]
 80137d4:	f858 ac04 	ldr.w	sl, [r8, #-4]
 80137d8:	4607      	mov	r7, r0
 80137da:	e768      	b.n	80136ae <uxr_prepare_output_stream_fragmented+0x66>
 80137dc:	080134d5 	.word	0x080134d5

080137e0 <uxr_serialize_message_header>:
 80137e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137e2:	b083      	sub	sp, #12
 80137e4:	4616      	mov	r6, r2
 80137e6:	4604      	mov	r4, r0
 80137e8:	9301      	str	r3, [sp, #4]
 80137ea:	460d      	mov	r5, r1
 80137ec:	9f08      	ldr	r7, [sp, #32]
 80137ee:	f7fd f8a9 	bl	8010944 <ucdr_serialize_uint8_t>
 80137f2:	4631      	mov	r1, r6
 80137f4:	4620      	mov	r0, r4
 80137f6:	f7fd f8a5 	bl	8010944 <ucdr_serialize_uint8_t>
 80137fa:	9a01      	ldr	r2, [sp, #4]
 80137fc:	4620      	mov	r0, r4
 80137fe:	2101      	movs	r1, #1
 8013800:	f7fd f94c 	bl	8010a9c <ucdr_serialize_endian_uint16_t>
 8013804:	062b      	lsls	r3, r5, #24
 8013806:	d501      	bpl.n	801380c <uxr_serialize_message_header+0x2c>
 8013808:	b003      	add	sp, #12
 801380a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801380c:	4639      	mov	r1, r7
 801380e:	4620      	mov	r0, r4
 8013810:	2204      	movs	r2, #4
 8013812:	b003      	add	sp, #12
 8013814:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013818:	f004 bb6e 	b.w	8017ef8 <ucdr_serialize_array_uint8_t>

0801381c <uxr_deserialize_message_header>:
 801381c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801381e:	b083      	sub	sp, #12
 8013820:	4616      	mov	r6, r2
 8013822:	4604      	mov	r4, r0
 8013824:	9301      	str	r3, [sp, #4]
 8013826:	460d      	mov	r5, r1
 8013828:	9f08      	ldr	r7, [sp, #32]
 801382a:	f7fd f8a1 	bl	8010970 <ucdr_deserialize_uint8_t>
 801382e:	4631      	mov	r1, r6
 8013830:	4620      	mov	r0, r4
 8013832:	f7fd f89d 	bl	8010970 <ucdr_deserialize_uint8_t>
 8013836:	9a01      	ldr	r2, [sp, #4]
 8013838:	4620      	mov	r0, r4
 801383a:	2101      	movs	r1, #1
 801383c:	f7fd fa22 	bl	8010c84 <ucdr_deserialize_endian_uint16_t>
 8013840:	f995 3000 	ldrsb.w	r3, [r5]
 8013844:	2b00      	cmp	r3, #0
 8013846:	da01      	bge.n	801384c <uxr_deserialize_message_header+0x30>
 8013848:	b003      	add	sp, #12
 801384a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801384c:	4639      	mov	r1, r7
 801384e:	4620      	mov	r0, r4
 8013850:	2204      	movs	r2, #4
 8013852:	b003      	add	sp, #12
 8013854:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013858:	f004 bbb2 	b.w	8017fc0 <ucdr_deserialize_array_uint8_t>

0801385c <uxr_serialize_submessage_header>:
 801385c:	b530      	push	{r4, r5, lr}
 801385e:	b083      	sub	sp, #12
 8013860:	4615      	mov	r5, r2
 8013862:	4604      	mov	r4, r0
 8013864:	9301      	str	r3, [sp, #4]
 8013866:	f7fd f86d 	bl	8010944 <ucdr_serialize_uint8_t>
 801386a:	4629      	mov	r1, r5
 801386c:	4620      	mov	r0, r4
 801386e:	f7fd f869 	bl	8010944 <ucdr_serialize_uint8_t>
 8013872:	9a01      	ldr	r2, [sp, #4]
 8013874:	4620      	mov	r0, r4
 8013876:	2101      	movs	r1, #1
 8013878:	b003      	add	sp, #12
 801387a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801387e:	f7fd b90d 	b.w	8010a9c <ucdr_serialize_endian_uint16_t>
 8013882:	bf00      	nop

08013884 <uxr_deserialize_submessage_header>:
 8013884:	b530      	push	{r4, r5, lr}
 8013886:	b083      	sub	sp, #12
 8013888:	4615      	mov	r5, r2
 801388a:	4604      	mov	r4, r0
 801388c:	9301      	str	r3, [sp, #4]
 801388e:	f7fd f86f 	bl	8010970 <ucdr_deserialize_uint8_t>
 8013892:	4629      	mov	r1, r5
 8013894:	4620      	mov	r0, r4
 8013896:	f7fd f86b 	bl	8010970 <ucdr_deserialize_uint8_t>
 801389a:	9a01      	ldr	r2, [sp, #4]
 801389c:	4620      	mov	r0, r4
 801389e:	2101      	movs	r1, #1
 80138a0:	b003      	add	sp, #12
 80138a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80138a6:	f7fd b9ed 	b.w	8010c84 <ucdr_deserialize_endian_uint16_t>
 80138aa:	bf00      	nop

080138ac <uxr_serialize_CLIENT_Representation>:
 80138ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138b0:	2204      	movs	r2, #4
 80138b2:	460c      	mov	r4, r1
 80138b4:	4605      	mov	r5, r0
 80138b6:	f004 fb1f 	bl	8017ef8 <ucdr_serialize_array_uint8_t>
 80138ba:	1d21      	adds	r1, r4, #4
 80138bc:	4607      	mov	r7, r0
 80138be:	2202      	movs	r2, #2
 80138c0:	4628      	mov	r0, r5
 80138c2:	f004 fb19 	bl	8017ef8 <ucdr_serialize_array_uint8_t>
 80138c6:	1da1      	adds	r1, r4, #6
 80138c8:	4007      	ands	r7, r0
 80138ca:	2202      	movs	r2, #2
 80138cc:	4628      	mov	r0, r5
 80138ce:	f004 fb13 	bl	8017ef8 <ucdr_serialize_array_uint8_t>
 80138d2:	fa5f f887 	uxtb.w	r8, r7
 80138d6:	2204      	movs	r2, #4
 80138d8:	4607      	mov	r7, r0
 80138da:	f104 0108 	add.w	r1, r4, #8
 80138de:	4628      	mov	r0, r5
 80138e0:	f004 fb0a 	bl	8017ef8 <ucdr_serialize_array_uint8_t>
 80138e4:	ea08 0707 	and.w	r7, r8, r7
 80138e8:	7b21      	ldrb	r1, [r4, #12]
 80138ea:	4680      	mov	r8, r0
 80138ec:	4628      	mov	r0, r5
 80138ee:	f7fd f829 	bl	8010944 <ucdr_serialize_uint8_t>
 80138f2:	ea08 0807 	and.w	r8, r8, r7
 80138f6:	7b61      	ldrb	r1, [r4, #13]
 80138f8:	4607      	mov	r7, r0
 80138fa:	4628      	mov	r0, r5
 80138fc:	f7fc fff2 	bl	80108e4 <ucdr_serialize_bool>
 8013900:	7b63      	ldrb	r3, [r4, #13]
 8013902:	ea08 0707 	and.w	r7, r8, r7
 8013906:	ea07 0600 	and.w	r6, r7, r0
 801390a:	b933      	cbnz	r3, 801391a <uxr_serialize_CLIENT_Representation+0x6e>
 801390c:	8ba1      	ldrh	r1, [r4, #28]
 801390e:	4628      	mov	r0, r5
 8013910:	f7fd f844 	bl	801099c <ucdr_serialize_uint16_t>
 8013914:	4030      	ands	r0, r6
 8013916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801391a:	6921      	ldr	r1, [r4, #16]
 801391c:	4628      	mov	r0, r5
 801391e:	f7fd fa27 	bl	8010d70 <ucdr_serialize_uint32_t>
 8013922:	6923      	ldr	r3, [r4, #16]
 8013924:	b1cb      	cbz	r3, 801395a <uxr_serialize_CLIENT_Representation+0xae>
 8013926:	b1d0      	cbz	r0, 801395e <uxr_serialize_CLIENT_Representation+0xb2>
 8013928:	46a0      	mov	r8, r4
 801392a:	f04f 0900 	mov.w	r9, #0
 801392e:	e002      	b.n	8013936 <uxr_serialize_CLIENT_Representation+0x8a>
 8013930:	f108 0808 	add.w	r8, r8, #8
 8013934:	b198      	cbz	r0, 801395e <uxr_serialize_CLIENT_Representation+0xb2>
 8013936:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801393a:	4628      	mov	r0, r5
 801393c:	f004 fbfc 	bl	8018138 <ucdr_serialize_string>
 8013940:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8013944:	4607      	mov	r7, r0
 8013946:	4628      	mov	r0, r5
 8013948:	f004 fbf6 	bl	8018138 <ucdr_serialize_string>
 801394c:	6923      	ldr	r3, [r4, #16]
 801394e:	f109 0901 	add.w	r9, r9, #1
 8013952:	4038      	ands	r0, r7
 8013954:	4599      	cmp	r9, r3
 8013956:	b2c0      	uxtb	r0, r0
 8013958:	d3ea      	bcc.n	8013930 <uxr_serialize_CLIENT_Representation+0x84>
 801395a:	4006      	ands	r6, r0
 801395c:	e7d6      	b.n	801390c <uxr_serialize_CLIENT_Representation+0x60>
 801395e:	2600      	movs	r6, #0
 8013960:	e7d4      	b.n	801390c <uxr_serialize_CLIENT_Representation+0x60>
 8013962:	bf00      	nop

08013964 <uxr_deserialize_CLIENT_Representation>:
 8013964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013968:	2204      	movs	r2, #4
 801396a:	460c      	mov	r4, r1
 801396c:	4605      	mov	r5, r0
 801396e:	f004 fb27 	bl	8017fc0 <ucdr_deserialize_array_uint8_t>
 8013972:	1d21      	adds	r1, r4, #4
 8013974:	4607      	mov	r7, r0
 8013976:	2202      	movs	r2, #2
 8013978:	4628      	mov	r0, r5
 801397a:	f004 fb21 	bl	8017fc0 <ucdr_deserialize_array_uint8_t>
 801397e:	1da1      	adds	r1, r4, #6
 8013980:	4007      	ands	r7, r0
 8013982:	2202      	movs	r2, #2
 8013984:	4628      	mov	r0, r5
 8013986:	f004 fb1b 	bl	8017fc0 <ucdr_deserialize_array_uint8_t>
 801398a:	fa5f f887 	uxtb.w	r8, r7
 801398e:	2204      	movs	r2, #4
 8013990:	4607      	mov	r7, r0
 8013992:	f104 0108 	add.w	r1, r4, #8
 8013996:	4628      	mov	r0, r5
 8013998:	f004 fb12 	bl	8017fc0 <ucdr_deserialize_array_uint8_t>
 801399c:	ea08 0707 	and.w	r7, r8, r7
 80139a0:	f104 010c 	add.w	r1, r4, #12
 80139a4:	4680      	mov	r8, r0
 80139a6:	4628      	mov	r0, r5
 80139a8:	f7fc ffe2 	bl	8010970 <ucdr_deserialize_uint8_t>
 80139ac:	ea08 0807 	and.w	r8, r8, r7
 80139b0:	f104 010d 	add.w	r1, r4, #13
 80139b4:	4607      	mov	r7, r0
 80139b6:	4628      	mov	r0, r5
 80139b8:	f7fc ffaa 	bl	8010910 <ucdr_deserialize_bool>
 80139bc:	7b63      	ldrb	r3, [r4, #13]
 80139be:	ea08 0707 	and.w	r7, r8, r7
 80139c2:	ea07 0600 	and.w	r6, r7, r0
 80139c6:	b93b      	cbnz	r3, 80139d8 <uxr_deserialize_CLIENT_Representation+0x74>
 80139c8:	f104 011c 	add.w	r1, r4, #28
 80139cc:	4628      	mov	r0, r5
 80139ce:	f7fd f8e5 	bl	8010b9c <ucdr_deserialize_uint16_t>
 80139d2:	4030      	ands	r0, r6
 80139d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139d8:	f104 0110 	add.w	r1, r4, #16
 80139dc:	4628      	mov	r0, r5
 80139de:	f7fd faf7 	bl	8010fd0 <ucdr_deserialize_uint32_t>
 80139e2:	6923      	ldr	r3, [r4, #16]
 80139e4:	2b01      	cmp	r3, #1
 80139e6:	d903      	bls.n	80139f0 <uxr_deserialize_CLIENT_Representation+0x8c>
 80139e8:	2301      	movs	r3, #1
 80139ea:	75ab      	strb	r3, [r5, #22]
 80139ec:	2600      	movs	r6, #0
 80139ee:	e7eb      	b.n	80139c8 <uxr_deserialize_CLIENT_Representation+0x64>
 80139f0:	b1fb      	cbz	r3, 8013a32 <uxr_deserialize_CLIENT_Representation+0xce>
 80139f2:	2800      	cmp	r0, #0
 80139f4:	d0fa      	beq.n	80139ec <uxr_deserialize_CLIENT_Representation+0x88>
 80139f6:	46a0      	mov	r8, r4
 80139f8:	f04f 0900 	mov.w	r9, #0
 80139fc:	e003      	b.n	8013a06 <uxr_deserialize_CLIENT_Representation+0xa2>
 80139fe:	f108 0808 	add.w	r8, r8, #8
 8013a02:	2800      	cmp	r0, #0
 8013a04:	d0f2      	beq.n	80139ec <uxr_deserialize_CLIENT_Representation+0x88>
 8013a06:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013a0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013a0e:	4628      	mov	r0, r5
 8013a10:	f004 fba2 	bl	8018158 <ucdr_deserialize_string>
 8013a14:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8013a18:	4607      	mov	r7, r0
 8013a1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013a1e:	4628      	mov	r0, r5
 8013a20:	f004 fb9a 	bl	8018158 <ucdr_deserialize_string>
 8013a24:	6923      	ldr	r3, [r4, #16]
 8013a26:	f109 0901 	add.w	r9, r9, #1
 8013a2a:	4038      	ands	r0, r7
 8013a2c:	4599      	cmp	r9, r3
 8013a2e:	b2c0      	uxtb	r0, r0
 8013a30:	d3e5      	bcc.n	80139fe <uxr_deserialize_CLIENT_Representation+0x9a>
 8013a32:	4006      	ands	r6, r0
 8013a34:	e7c8      	b.n	80139c8 <uxr_deserialize_CLIENT_Representation+0x64>
 8013a36:	bf00      	nop

08013a38 <uxr_serialize_AGENT_Representation>:
 8013a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a3c:	2204      	movs	r2, #4
 8013a3e:	460c      	mov	r4, r1
 8013a40:	4605      	mov	r5, r0
 8013a42:	f004 fa59 	bl	8017ef8 <ucdr_serialize_array_uint8_t>
 8013a46:	1d21      	adds	r1, r4, #4
 8013a48:	4606      	mov	r6, r0
 8013a4a:	2202      	movs	r2, #2
 8013a4c:	4628      	mov	r0, r5
 8013a4e:	f004 fa53 	bl	8017ef8 <ucdr_serialize_array_uint8_t>
 8013a52:	1da1      	adds	r1, r4, #6
 8013a54:	4006      	ands	r6, r0
 8013a56:	2202      	movs	r2, #2
 8013a58:	4628      	mov	r0, r5
 8013a5a:	f004 fa4d 	bl	8017ef8 <ucdr_serialize_array_uint8_t>
 8013a5e:	b2f6      	uxtb	r6, r6
 8013a60:	4603      	mov	r3, r0
 8013a62:	7a21      	ldrb	r1, [r4, #8]
 8013a64:	4628      	mov	r0, r5
 8013a66:	401e      	ands	r6, r3
 8013a68:	f7fc ff3c 	bl	80108e4 <ucdr_serialize_bool>
 8013a6c:	7a23      	ldrb	r3, [r4, #8]
 8013a6e:	ea00 0706 	and.w	r7, r0, r6
 8013a72:	b913      	cbnz	r3, 8013a7a <uxr_serialize_AGENT_Representation+0x42>
 8013a74:	4638      	mov	r0, r7
 8013a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a7a:	68e1      	ldr	r1, [r4, #12]
 8013a7c:	4628      	mov	r0, r5
 8013a7e:	f7fd f977 	bl	8010d70 <ucdr_serialize_uint32_t>
 8013a82:	68e3      	ldr	r3, [r4, #12]
 8013a84:	b313      	cbz	r3, 8013acc <uxr_serialize_AGENT_Representation+0x94>
 8013a86:	b1e8      	cbz	r0, 8013ac4 <uxr_serialize_AGENT_Representation+0x8c>
 8013a88:	46a0      	mov	r8, r4
 8013a8a:	f04f 0900 	mov.w	r9, #0
 8013a8e:	e002      	b.n	8013a96 <uxr_serialize_AGENT_Representation+0x5e>
 8013a90:	f108 0808 	add.w	r8, r8, #8
 8013a94:	b1b3      	cbz	r3, 8013ac4 <uxr_serialize_AGENT_Representation+0x8c>
 8013a96:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013a9a:	4628      	mov	r0, r5
 8013a9c:	f004 fb4c 	bl	8018138 <ucdr_serialize_string>
 8013aa0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013aa4:	4606      	mov	r6, r0
 8013aa6:	4628      	mov	r0, r5
 8013aa8:	f004 fb46 	bl	8018138 <ucdr_serialize_string>
 8013aac:	68e2      	ldr	r2, [r4, #12]
 8013aae:	f109 0901 	add.w	r9, r9, #1
 8013ab2:	ea06 0300 	and.w	r3, r6, r0
 8013ab6:	4591      	cmp	r9, r2
 8013ab8:	b2db      	uxtb	r3, r3
 8013aba:	d3e9      	bcc.n	8013a90 <uxr_serialize_AGENT_Representation+0x58>
 8013abc:	401f      	ands	r7, r3
 8013abe:	4638      	mov	r0, r7
 8013ac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ac4:	2700      	movs	r7, #0
 8013ac6:	4638      	mov	r0, r7
 8013ac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013acc:	4007      	ands	r7, r0
 8013ace:	e7d1      	b.n	8013a74 <uxr_serialize_AGENT_Representation+0x3c>

08013ad0 <uxr_serialize_ObjectVariant.part.0>:
 8013ad0:	b570      	push	{r4, r5, r6, lr}
 8013ad2:	780b      	ldrb	r3, [r1, #0]
 8013ad4:	3b01      	subs	r3, #1
 8013ad6:	460c      	mov	r4, r1
 8013ad8:	4605      	mov	r5, r0
 8013ada:	2b0d      	cmp	r3, #13
 8013adc:	d869      	bhi.n	8013bb2 <uxr_serialize_ObjectVariant.part.0+0xe2>
 8013ade:	e8df f003 	tbb	[pc, r3]
 8013ae2:	074a      	.short	0x074a
 8013ae4:	07073030 	.word	0x07073030
 8013ae8:	21680707 	.word	0x21680707
 8013aec:	45632121 	.word	0x45632121
 8013af0:	7909      	ldrb	r1, [r1, #4]
 8013af2:	f7fc ff27 	bl	8010944 <ucdr_serialize_uint8_t>
 8013af6:	4606      	mov	r6, r0
 8013af8:	b158      	cbz	r0, 8013b12 <uxr_serialize_ObjectVariant.part.0+0x42>
 8013afa:	7923      	ldrb	r3, [r4, #4]
 8013afc:	2b02      	cmp	r3, #2
 8013afe:	d003      	beq.n	8013b08 <uxr_serialize_ObjectVariant.part.0+0x38>
 8013b00:	2b03      	cmp	r3, #3
 8013b02:	d029      	beq.n	8013b58 <uxr_serialize_ObjectVariant.part.0+0x88>
 8013b04:	2b01      	cmp	r3, #1
 8013b06:	d104      	bne.n	8013b12 <uxr_serialize_ObjectVariant.part.0+0x42>
 8013b08:	68a1      	ldr	r1, [r4, #8]
 8013b0a:	4628      	mov	r0, r5
 8013b0c:	f004 fb14 	bl	8018138 <ucdr_serialize_string>
 8013b10:	4606      	mov	r6, r0
 8013b12:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8013b16:	4628      	mov	r0, r5
 8013b18:	2202      	movs	r2, #2
 8013b1a:	f004 f9ed 	bl	8017ef8 <ucdr_serialize_array_uint8_t>
 8013b1e:	4030      	ands	r0, r6
 8013b20:	b2c0      	uxtb	r0, r0
 8013b22:	bd70      	pop	{r4, r5, r6, pc}
 8013b24:	7909      	ldrb	r1, [r1, #4]
 8013b26:	f7fc ff0d 	bl	8010944 <ucdr_serialize_uint8_t>
 8013b2a:	b1e8      	cbz	r0, 8013b68 <uxr_serialize_ObjectVariant.part.0+0x98>
 8013b2c:	7923      	ldrb	r3, [r4, #4]
 8013b2e:	2b01      	cmp	r3, #1
 8013b30:	d001      	beq.n	8013b36 <uxr_serialize_ObjectVariant.part.0+0x66>
 8013b32:	2b02      	cmp	r3, #2
 8013b34:	d13d      	bne.n	8013bb2 <uxr_serialize_ObjectVariant.part.0+0xe2>
 8013b36:	68a1      	ldr	r1, [r4, #8]
 8013b38:	4628      	mov	r0, r5
 8013b3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b3e:	f004 bafb 	b.w	8018138 <ucdr_serialize_string>
 8013b42:	7909      	ldrb	r1, [r1, #4]
 8013b44:	f7fc fefe 	bl	8010944 <ucdr_serialize_uint8_t>
 8013b48:	4606      	mov	r6, r0
 8013b4a:	2800      	cmp	r0, #0
 8013b4c:	d0e1      	beq.n	8013b12 <uxr_serialize_ObjectVariant.part.0+0x42>
 8013b4e:	7923      	ldrb	r3, [r4, #4]
 8013b50:	2b02      	cmp	r3, #2
 8013b52:	d0d9      	beq.n	8013b08 <uxr_serialize_ObjectVariant.part.0+0x38>
 8013b54:	2b03      	cmp	r3, #3
 8013b56:	d1dc      	bne.n	8013b12 <uxr_serialize_ObjectVariant.part.0+0x42>
 8013b58:	68a2      	ldr	r2, [r4, #8]
 8013b5a:	f104 010c 	add.w	r1, r4, #12
 8013b5e:	4628      	mov	r0, r5
 8013b60:	f004 fabe 	bl	80180e0 <ucdr_serialize_sequence_uint8_t>
 8013b64:	4606      	mov	r6, r0
 8013b66:	e7d4      	b.n	8013b12 <uxr_serialize_ObjectVariant.part.0+0x42>
 8013b68:	2000      	movs	r0, #0
 8013b6a:	bd70      	pop	{r4, r5, r6, pc}
 8013b6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b70:	3104      	adds	r1, #4
 8013b72:	f7ff be9b 	b.w	80138ac <uxr_serialize_CLIENT_Representation>
 8013b76:	7909      	ldrb	r1, [r1, #4]
 8013b78:	f7fc fee4 	bl	8010944 <ucdr_serialize_uint8_t>
 8013b7c:	4606      	mov	r6, r0
 8013b7e:	b158      	cbz	r0, 8013b98 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8013b80:	7923      	ldrb	r3, [r4, #4]
 8013b82:	2b02      	cmp	r3, #2
 8013b84:	d003      	beq.n	8013b8e <uxr_serialize_ObjectVariant.part.0+0xbe>
 8013b86:	2b03      	cmp	r3, #3
 8013b88:	d015      	beq.n	8013bb6 <uxr_serialize_ObjectVariant.part.0+0xe6>
 8013b8a:	2b01      	cmp	r3, #1
 8013b8c:	d104      	bne.n	8013b98 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8013b8e:	68a1      	ldr	r1, [r4, #8]
 8013b90:	4628      	mov	r0, r5
 8013b92:	f004 fad1 	bl	8018138 <ucdr_serialize_string>
 8013b96:	4606      	mov	r6, r0
 8013b98:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8013b9c:	4628      	mov	r0, r5
 8013b9e:	f7fd fc0d 	bl	80113bc <ucdr_serialize_int16_t>
 8013ba2:	4030      	ands	r0, r6
 8013ba4:	b2c0      	uxtb	r0, r0
 8013ba6:	bd70      	pop	{r4, r5, r6, pc}
 8013ba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013bac:	3104      	adds	r1, #4
 8013bae:	f7ff bf43 	b.w	8013a38 <uxr_serialize_AGENT_Representation>
 8013bb2:	2001      	movs	r0, #1
 8013bb4:	bd70      	pop	{r4, r5, r6, pc}
 8013bb6:	68a2      	ldr	r2, [r4, #8]
 8013bb8:	f104 010c 	add.w	r1, r4, #12
 8013bbc:	4628      	mov	r0, r5
 8013bbe:	f004 fa8f 	bl	80180e0 <ucdr_serialize_sequence_uint8_t>
 8013bc2:	4606      	mov	r6, r0
 8013bc4:	e7e8      	b.n	8013b98 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8013bc6:	bf00      	nop

08013bc8 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8013bc8:	b570      	push	{r4, r5, r6, lr}
 8013bca:	460d      	mov	r5, r1
 8013bcc:	7809      	ldrb	r1, [r1, #0]
 8013bce:	4606      	mov	r6, r0
 8013bd0:	f7fc fe88 	bl	80108e4 <ucdr_serialize_bool>
 8013bd4:	782b      	ldrb	r3, [r5, #0]
 8013bd6:	4604      	mov	r4, r0
 8013bd8:	b94b      	cbnz	r3, 8013bee <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8013bda:	7a29      	ldrb	r1, [r5, #8]
 8013bdc:	4630      	mov	r0, r6
 8013bde:	f7fc fe81 	bl	80108e4 <ucdr_serialize_bool>
 8013be2:	7a2b      	ldrb	r3, [r5, #8]
 8013be4:	4004      	ands	r4, r0
 8013be6:	b2e4      	uxtb	r4, r4
 8013be8:	b943      	cbnz	r3, 8013bfc <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8013bea:	4620      	mov	r0, r4
 8013bec:	bd70      	pop	{r4, r5, r6, pc}
 8013bee:	6869      	ldr	r1, [r5, #4]
 8013bf0:	4630      	mov	r0, r6
 8013bf2:	f004 faa1 	bl	8018138 <ucdr_serialize_string>
 8013bf6:	4004      	ands	r4, r0
 8013bf8:	b2e4      	uxtb	r4, r4
 8013bfa:	e7ee      	b.n	8013bda <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8013bfc:	68e9      	ldr	r1, [r5, #12]
 8013bfe:	4630      	mov	r0, r6
 8013c00:	f004 fa9a 	bl	8018138 <ucdr_serialize_string>
 8013c04:	4004      	ands	r4, r0
 8013c06:	4620      	mov	r0, r4
 8013c08:	bd70      	pop	{r4, r5, r6, pc}
 8013c0a:	bf00      	nop

08013c0c <uxr_serialize_OBJK_Topic_Binary>:
 8013c0c:	b570      	push	{r4, r5, r6, lr}
 8013c0e:	460d      	mov	r5, r1
 8013c10:	6809      	ldr	r1, [r1, #0]
 8013c12:	4606      	mov	r6, r0
 8013c14:	f004 fa90 	bl	8018138 <ucdr_serialize_string>
 8013c18:	7929      	ldrb	r1, [r5, #4]
 8013c1a:	4604      	mov	r4, r0
 8013c1c:	4630      	mov	r0, r6
 8013c1e:	f7fc fe61 	bl	80108e4 <ucdr_serialize_bool>
 8013c22:	792b      	ldrb	r3, [r5, #4]
 8013c24:	4004      	ands	r4, r0
 8013c26:	b2e4      	uxtb	r4, r4
 8013c28:	b943      	cbnz	r3, 8013c3c <uxr_serialize_OBJK_Topic_Binary+0x30>
 8013c2a:	7b29      	ldrb	r1, [r5, #12]
 8013c2c:	4630      	mov	r0, r6
 8013c2e:	f7fc fe59 	bl	80108e4 <ucdr_serialize_bool>
 8013c32:	7b2b      	ldrb	r3, [r5, #12]
 8013c34:	4004      	ands	r4, r0
 8013c36:	b93b      	cbnz	r3, 8013c48 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8013c38:	4620      	mov	r0, r4
 8013c3a:	bd70      	pop	{r4, r5, r6, pc}
 8013c3c:	68a9      	ldr	r1, [r5, #8]
 8013c3e:	4630      	mov	r0, r6
 8013c40:	f004 fa7a 	bl	8018138 <ucdr_serialize_string>
 8013c44:	4004      	ands	r4, r0
 8013c46:	e7f0      	b.n	8013c2a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8013c48:	6929      	ldr	r1, [r5, #16]
 8013c4a:	4630      	mov	r0, r6
 8013c4c:	f004 fa74 	bl	8018138 <ucdr_serialize_string>
 8013c50:	4004      	ands	r4, r0
 8013c52:	b2e4      	uxtb	r4, r4
 8013c54:	4620      	mov	r0, r4
 8013c56:	bd70      	pop	{r4, r5, r6, pc}

08013c58 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8013c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c5c:	460c      	mov	r4, r1
 8013c5e:	7809      	ldrb	r1, [r1, #0]
 8013c60:	4606      	mov	r6, r0
 8013c62:	f7fc fe3f 	bl	80108e4 <ucdr_serialize_bool>
 8013c66:	7823      	ldrb	r3, [r4, #0]
 8013c68:	4605      	mov	r5, r0
 8013c6a:	b96b      	cbnz	r3, 8013c88 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8013c6c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8013c70:	4630      	mov	r0, r6
 8013c72:	f7fc fe37 	bl	80108e4 <ucdr_serialize_bool>
 8013c76:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8013c7a:	4005      	ands	r5, r0
 8013c7c:	b2ed      	uxtb	r5, r5
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d169      	bne.n	8013d56 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8013c82:	4628      	mov	r0, r5
 8013c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c88:	6861      	ldr	r1, [r4, #4]
 8013c8a:	4630      	mov	r0, r6
 8013c8c:	f7fd f870 	bl	8010d70 <ucdr_serialize_uint32_t>
 8013c90:	6863      	ldr	r3, [r4, #4]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d06b      	beq.n	8013d6e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8013c96:	2800      	cmp	r0, #0
 8013c98:	d067      	beq.n	8013d6a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013c9a:	68a1      	ldr	r1, [r4, #8]
 8013c9c:	4630      	mov	r0, r6
 8013c9e:	f004 fa4b 	bl	8018138 <ucdr_serialize_string>
 8013ca2:	6863      	ldr	r3, [r4, #4]
 8013ca4:	2b01      	cmp	r3, #1
 8013ca6:	d953      	bls.n	8013d50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013ca8:	2800      	cmp	r0, #0
 8013caa:	d05e      	beq.n	8013d6a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013cac:	68e1      	ldr	r1, [r4, #12]
 8013cae:	4630      	mov	r0, r6
 8013cb0:	f004 fa42 	bl	8018138 <ucdr_serialize_string>
 8013cb4:	6863      	ldr	r3, [r4, #4]
 8013cb6:	2b02      	cmp	r3, #2
 8013cb8:	d94a      	bls.n	8013d50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013cba:	2800      	cmp	r0, #0
 8013cbc:	d055      	beq.n	8013d6a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013cbe:	6921      	ldr	r1, [r4, #16]
 8013cc0:	4630      	mov	r0, r6
 8013cc2:	f004 fa39 	bl	8018138 <ucdr_serialize_string>
 8013cc6:	6863      	ldr	r3, [r4, #4]
 8013cc8:	2b03      	cmp	r3, #3
 8013cca:	d941      	bls.n	8013d50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013ccc:	2800      	cmp	r0, #0
 8013cce:	d04c      	beq.n	8013d6a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013cd0:	6961      	ldr	r1, [r4, #20]
 8013cd2:	4630      	mov	r0, r6
 8013cd4:	f004 fa30 	bl	8018138 <ucdr_serialize_string>
 8013cd8:	6863      	ldr	r3, [r4, #4]
 8013cda:	2b04      	cmp	r3, #4
 8013cdc:	d938      	bls.n	8013d50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013cde:	2800      	cmp	r0, #0
 8013ce0:	d043      	beq.n	8013d6a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013ce2:	69a1      	ldr	r1, [r4, #24]
 8013ce4:	4630      	mov	r0, r6
 8013ce6:	f004 fa27 	bl	8018138 <ucdr_serialize_string>
 8013cea:	6863      	ldr	r3, [r4, #4]
 8013cec:	2b05      	cmp	r3, #5
 8013cee:	d92f      	bls.n	8013d50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013cf0:	2800      	cmp	r0, #0
 8013cf2:	d03a      	beq.n	8013d6a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013cf4:	69e1      	ldr	r1, [r4, #28]
 8013cf6:	4630      	mov	r0, r6
 8013cf8:	f004 fa1e 	bl	8018138 <ucdr_serialize_string>
 8013cfc:	6863      	ldr	r3, [r4, #4]
 8013cfe:	2b06      	cmp	r3, #6
 8013d00:	d926      	bls.n	8013d50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013d02:	b390      	cbz	r0, 8013d6a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d04:	6a21      	ldr	r1, [r4, #32]
 8013d06:	4630      	mov	r0, r6
 8013d08:	f004 fa16 	bl	8018138 <ucdr_serialize_string>
 8013d0c:	6863      	ldr	r3, [r4, #4]
 8013d0e:	2b07      	cmp	r3, #7
 8013d10:	d91e      	bls.n	8013d50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013d12:	b350      	cbz	r0, 8013d6a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d14:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013d16:	4630      	mov	r0, r6
 8013d18:	f004 fa0e 	bl	8018138 <ucdr_serialize_string>
 8013d1c:	6863      	ldr	r3, [r4, #4]
 8013d1e:	2b08      	cmp	r3, #8
 8013d20:	d916      	bls.n	8013d50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013d22:	b310      	cbz	r0, 8013d6a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d24:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013d26:	4630      	mov	r0, r6
 8013d28:	f004 fa06 	bl	8018138 <ucdr_serialize_string>
 8013d2c:	6863      	ldr	r3, [r4, #4]
 8013d2e:	2b09      	cmp	r3, #9
 8013d30:	d90e      	bls.n	8013d50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013d32:	b1d0      	cbz	r0, 8013d6a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d34:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8013d38:	2709      	movs	r7, #9
 8013d3a:	e000      	b.n	8013d3e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8013d3c:	b1a8      	cbz	r0, 8013d6a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d3e:	f858 1b04 	ldr.w	r1, [r8], #4
 8013d42:	4630      	mov	r0, r6
 8013d44:	f004 f9f8 	bl	8018138 <ucdr_serialize_string>
 8013d48:	6862      	ldr	r2, [r4, #4]
 8013d4a:	3701      	adds	r7, #1
 8013d4c:	4297      	cmp	r7, r2
 8013d4e:	d3f5      	bcc.n	8013d3c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8013d50:	4005      	ands	r5, r0
 8013d52:	b2ed      	uxtb	r5, r5
 8013d54:	e78a      	b.n	8013c6c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013d56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013d58:	4630      	mov	r0, r6
 8013d5a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8013d5e:	f004 f9bf 	bl	80180e0 <ucdr_serialize_sequence_uint8_t>
 8013d62:	4005      	ands	r5, r0
 8013d64:	4628      	mov	r0, r5
 8013d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d6a:	2500      	movs	r5, #0
 8013d6c:	e77e      	b.n	8013c6c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013d6e:	4028      	ands	r0, r5
 8013d70:	b2c5      	uxtb	r5, r0
 8013d72:	e77b      	b.n	8013c6c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08013d74 <uxr_serialize_OBJK_Publisher_Binary>:
 8013d74:	b570      	push	{r4, r5, r6, lr}
 8013d76:	460d      	mov	r5, r1
 8013d78:	7809      	ldrb	r1, [r1, #0]
 8013d7a:	4606      	mov	r6, r0
 8013d7c:	f7fc fdb2 	bl	80108e4 <ucdr_serialize_bool>
 8013d80:	782b      	ldrb	r3, [r5, #0]
 8013d82:	4604      	mov	r4, r0
 8013d84:	b94b      	cbnz	r3, 8013d9a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8013d86:	7a29      	ldrb	r1, [r5, #8]
 8013d88:	4630      	mov	r0, r6
 8013d8a:	f7fc fdab 	bl	80108e4 <ucdr_serialize_bool>
 8013d8e:	7a2b      	ldrb	r3, [r5, #8]
 8013d90:	4004      	ands	r4, r0
 8013d92:	b2e4      	uxtb	r4, r4
 8013d94:	b943      	cbnz	r3, 8013da8 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8013d96:	4620      	mov	r0, r4
 8013d98:	bd70      	pop	{r4, r5, r6, pc}
 8013d9a:	6869      	ldr	r1, [r5, #4]
 8013d9c:	4630      	mov	r0, r6
 8013d9e:	f004 f9cb 	bl	8018138 <ucdr_serialize_string>
 8013da2:	4004      	ands	r4, r0
 8013da4:	b2e4      	uxtb	r4, r4
 8013da6:	e7ee      	b.n	8013d86 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8013da8:	f105 010c 	add.w	r1, r5, #12
 8013dac:	4630      	mov	r0, r6
 8013dae:	f7ff ff53 	bl	8013c58 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8013db2:	4004      	ands	r4, r0
 8013db4:	4620      	mov	r0, r4
 8013db6:	bd70      	pop	{r4, r5, r6, pc}

08013db8 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8013db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dbc:	460c      	mov	r4, r1
 8013dbe:	7809      	ldrb	r1, [r1, #0]
 8013dc0:	4606      	mov	r6, r0
 8013dc2:	f7fc fd8f 	bl	80108e4 <ucdr_serialize_bool>
 8013dc6:	7823      	ldrb	r3, [r4, #0]
 8013dc8:	4605      	mov	r5, r0
 8013dca:	b96b      	cbnz	r3, 8013de8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8013dcc:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8013dd0:	4630      	mov	r0, r6
 8013dd2:	f7fc fd87 	bl	80108e4 <ucdr_serialize_bool>
 8013dd6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8013dda:	4005      	ands	r5, r0
 8013ddc:	b2ed      	uxtb	r5, r5
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d169      	bne.n	8013eb6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8013de2:	4628      	mov	r0, r5
 8013de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013de8:	6861      	ldr	r1, [r4, #4]
 8013dea:	4630      	mov	r0, r6
 8013dec:	f7fc ffc0 	bl	8010d70 <ucdr_serialize_uint32_t>
 8013df0:	6863      	ldr	r3, [r4, #4]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d06b      	beq.n	8013ece <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8013df6:	2800      	cmp	r0, #0
 8013df8:	d067      	beq.n	8013eca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013dfa:	68a1      	ldr	r1, [r4, #8]
 8013dfc:	4630      	mov	r0, r6
 8013dfe:	f004 f99b 	bl	8018138 <ucdr_serialize_string>
 8013e02:	6863      	ldr	r3, [r4, #4]
 8013e04:	2b01      	cmp	r3, #1
 8013e06:	d953      	bls.n	8013eb0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e08:	2800      	cmp	r0, #0
 8013e0a:	d05e      	beq.n	8013eca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e0c:	68e1      	ldr	r1, [r4, #12]
 8013e0e:	4630      	mov	r0, r6
 8013e10:	f004 f992 	bl	8018138 <ucdr_serialize_string>
 8013e14:	6863      	ldr	r3, [r4, #4]
 8013e16:	2b02      	cmp	r3, #2
 8013e18:	d94a      	bls.n	8013eb0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e1a:	2800      	cmp	r0, #0
 8013e1c:	d055      	beq.n	8013eca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e1e:	6921      	ldr	r1, [r4, #16]
 8013e20:	4630      	mov	r0, r6
 8013e22:	f004 f989 	bl	8018138 <ucdr_serialize_string>
 8013e26:	6863      	ldr	r3, [r4, #4]
 8013e28:	2b03      	cmp	r3, #3
 8013e2a:	d941      	bls.n	8013eb0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e2c:	2800      	cmp	r0, #0
 8013e2e:	d04c      	beq.n	8013eca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e30:	6961      	ldr	r1, [r4, #20]
 8013e32:	4630      	mov	r0, r6
 8013e34:	f004 f980 	bl	8018138 <ucdr_serialize_string>
 8013e38:	6863      	ldr	r3, [r4, #4]
 8013e3a:	2b04      	cmp	r3, #4
 8013e3c:	d938      	bls.n	8013eb0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e3e:	2800      	cmp	r0, #0
 8013e40:	d043      	beq.n	8013eca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e42:	69a1      	ldr	r1, [r4, #24]
 8013e44:	4630      	mov	r0, r6
 8013e46:	f004 f977 	bl	8018138 <ucdr_serialize_string>
 8013e4a:	6863      	ldr	r3, [r4, #4]
 8013e4c:	2b05      	cmp	r3, #5
 8013e4e:	d92f      	bls.n	8013eb0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e50:	2800      	cmp	r0, #0
 8013e52:	d03a      	beq.n	8013eca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e54:	69e1      	ldr	r1, [r4, #28]
 8013e56:	4630      	mov	r0, r6
 8013e58:	f004 f96e 	bl	8018138 <ucdr_serialize_string>
 8013e5c:	6863      	ldr	r3, [r4, #4]
 8013e5e:	2b06      	cmp	r3, #6
 8013e60:	d926      	bls.n	8013eb0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e62:	b390      	cbz	r0, 8013eca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e64:	6a21      	ldr	r1, [r4, #32]
 8013e66:	4630      	mov	r0, r6
 8013e68:	f004 f966 	bl	8018138 <ucdr_serialize_string>
 8013e6c:	6863      	ldr	r3, [r4, #4]
 8013e6e:	2b07      	cmp	r3, #7
 8013e70:	d91e      	bls.n	8013eb0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e72:	b350      	cbz	r0, 8013eca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e74:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013e76:	4630      	mov	r0, r6
 8013e78:	f004 f95e 	bl	8018138 <ucdr_serialize_string>
 8013e7c:	6863      	ldr	r3, [r4, #4]
 8013e7e:	2b08      	cmp	r3, #8
 8013e80:	d916      	bls.n	8013eb0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e82:	b310      	cbz	r0, 8013eca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e84:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013e86:	4630      	mov	r0, r6
 8013e88:	f004 f956 	bl	8018138 <ucdr_serialize_string>
 8013e8c:	6863      	ldr	r3, [r4, #4]
 8013e8e:	2b09      	cmp	r3, #9
 8013e90:	d90e      	bls.n	8013eb0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e92:	b1d0      	cbz	r0, 8013eca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e94:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8013e98:	2709      	movs	r7, #9
 8013e9a:	e000      	b.n	8013e9e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8013e9c:	b1a8      	cbz	r0, 8013eca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e9e:	f858 1b04 	ldr.w	r1, [r8], #4
 8013ea2:	4630      	mov	r0, r6
 8013ea4:	f004 f948 	bl	8018138 <ucdr_serialize_string>
 8013ea8:	6862      	ldr	r2, [r4, #4]
 8013eaa:	3701      	adds	r7, #1
 8013eac:	4297      	cmp	r7, r2
 8013eae:	d3f5      	bcc.n	8013e9c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8013eb0:	4005      	ands	r5, r0
 8013eb2:	b2ed      	uxtb	r5, r5
 8013eb4:	e78a      	b.n	8013dcc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013eb6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013eb8:	4630      	mov	r0, r6
 8013eba:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8013ebe:	f004 f90f 	bl	80180e0 <ucdr_serialize_sequence_uint8_t>
 8013ec2:	4005      	ands	r5, r0
 8013ec4:	4628      	mov	r0, r5
 8013ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013eca:	2500      	movs	r5, #0
 8013ecc:	e77e      	b.n	8013dcc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013ece:	4028      	ands	r0, r5
 8013ed0:	b2c5      	uxtb	r5, r0
 8013ed2:	e77b      	b.n	8013dcc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08013ed4 <uxr_serialize_OBJK_Subscriber_Binary>:
 8013ed4:	b570      	push	{r4, r5, r6, lr}
 8013ed6:	460d      	mov	r5, r1
 8013ed8:	7809      	ldrb	r1, [r1, #0]
 8013eda:	4606      	mov	r6, r0
 8013edc:	f7fc fd02 	bl	80108e4 <ucdr_serialize_bool>
 8013ee0:	782b      	ldrb	r3, [r5, #0]
 8013ee2:	4604      	mov	r4, r0
 8013ee4:	b94b      	cbnz	r3, 8013efa <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8013ee6:	7a29      	ldrb	r1, [r5, #8]
 8013ee8:	4630      	mov	r0, r6
 8013eea:	f7fc fcfb 	bl	80108e4 <ucdr_serialize_bool>
 8013eee:	7a2b      	ldrb	r3, [r5, #8]
 8013ef0:	4004      	ands	r4, r0
 8013ef2:	b2e4      	uxtb	r4, r4
 8013ef4:	b943      	cbnz	r3, 8013f08 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8013ef6:	4620      	mov	r0, r4
 8013ef8:	bd70      	pop	{r4, r5, r6, pc}
 8013efa:	6869      	ldr	r1, [r5, #4]
 8013efc:	4630      	mov	r0, r6
 8013efe:	f004 f91b 	bl	8018138 <ucdr_serialize_string>
 8013f02:	4004      	ands	r4, r0
 8013f04:	b2e4      	uxtb	r4, r4
 8013f06:	e7ee      	b.n	8013ee6 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8013f08:	f105 010c 	add.w	r1, r5, #12
 8013f0c:	4630      	mov	r0, r6
 8013f0e:	f7ff ff53 	bl	8013db8 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8013f12:	4004      	ands	r4, r0
 8013f14:	4620      	mov	r0, r4
 8013f16:	bd70      	pop	{r4, r5, r6, pc}

08013f18 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8013f18:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8013f1c:	4688      	mov	r8, r1
 8013f1e:	8809      	ldrh	r1, [r1, #0]
 8013f20:	4681      	mov	r9, r0
 8013f22:	f7fc fd3b 	bl	801099c <ucdr_serialize_uint16_t>
 8013f26:	f898 1002 	ldrb.w	r1, [r8, #2]
 8013f2a:	4606      	mov	r6, r0
 8013f2c:	4648      	mov	r0, r9
 8013f2e:	f7fc fcd9 	bl	80108e4 <ucdr_serialize_bool>
 8013f32:	f898 3002 	ldrb.w	r3, [r8, #2]
 8013f36:	4030      	ands	r0, r6
 8013f38:	b2c5      	uxtb	r5, r0
 8013f3a:	b9eb      	cbnz	r3, 8013f78 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8013f3c:	f898 1006 	ldrb.w	r1, [r8, #6]
 8013f40:	4648      	mov	r0, r9
 8013f42:	f7fc fccf 	bl	80108e4 <ucdr_serialize_bool>
 8013f46:	f898 3006 	ldrb.w	r3, [r8, #6]
 8013f4a:	4005      	ands	r5, r0
 8013f4c:	bb7b      	cbnz	r3, 8013fae <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8013f4e:	f898 100c 	ldrb.w	r1, [r8, #12]
 8013f52:	4648      	mov	r0, r9
 8013f54:	f7fc fcc6 	bl	80108e4 <ucdr_serialize_bool>
 8013f58:	f898 300c 	ldrb.w	r3, [r8, #12]
 8013f5c:	4005      	ands	r5, r0
 8013f5e:	b9f3      	cbnz	r3, 8013f9e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8013f60:	f898 1014 	ldrb.w	r1, [r8, #20]
 8013f64:	4648      	mov	r0, r9
 8013f66:	f7fc fcbd 	bl	80108e4 <ucdr_serialize_bool>
 8013f6a:	f898 3014 	ldrb.w	r3, [r8, #20]
 8013f6e:	4005      	ands	r5, r0
 8013f70:	b94b      	cbnz	r3, 8013f86 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8013f72:	4628      	mov	r0, r5
 8013f74:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013f78:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8013f7c:	4648      	mov	r0, r9
 8013f7e:	f7fc fd0d 	bl	801099c <ucdr_serialize_uint16_t>
 8013f82:	4005      	ands	r5, r0
 8013f84:	e7da      	b.n	8013f3c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8013f86:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8013f8a:	4648      	mov	r0, r9
 8013f8c:	f108 011c 	add.w	r1, r8, #28
 8013f90:	f004 f8a6 	bl	80180e0 <ucdr_serialize_sequence_uint8_t>
 8013f94:	4028      	ands	r0, r5
 8013f96:	b2c5      	uxtb	r5, r0
 8013f98:	4628      	mov	r0, r5
 8013f9a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013f9e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013fa2:	4648      	mov	r0, r9
 8013fa4:	f7fc fee4 	bl	8010d70 <ucdr_serialize_uint32_t>
 8013fa8:	4028      	ands	r0, r5
 8013faa:	b2c5      	uxtb	r5, r0
 8013fac:	e7d8      	b.n	8013f60 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8013fae:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8013fb2:	4648      	mov	r0, r9
 8013fb4:	f7fc fedc 	bl	8010d70 <ucdr_serialize_uint32_t>
 8013fb8:	4028      	ands	r0, r5
 8013fba:	b2c5      	uxtb	r5, r0
 8013fbc:	e7c7      	b.n	8013f4e <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8013fbe:	bf00      	nop

08013fc0 <uxr_serialize_OBJK_DataReader_Binary>:
 8013fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fc2:	2202      	movs	r2, #2
 8013fc4:	460c      	mov	r4, r1
 8013fc6:	4606      	mov	r6, r0
 8013fc8:	f003 ff96 	bl	8017ef8 <ucdr_serialize_array_uint8_t>
 8013fcc:	78a1      	ldrb	r1, [r4, #2]
 8013fce:	4605      	mov	r5, r0
 8013fd0:	4630      	mov	r0, r6
 8013fd2:	f7fc fc87 	bl	80108e4 <ucdr_serialize_bool>
 8013fd6:	78a3      	ldrb	r3, [r4, #2]
 8013fd8:	4005      	ands	r5, r0
 8013fda:	b2ed      	uxtb	r5, r5
 8013fdc:	b90b      	cbnz	r3, 8013fe2 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8013fde:	4628      	mov	r0, r5
 8013fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fe2:	f104 0108 	add.w	r1, r4, #8
 8013fe6:	4630      	mov	r0, r6
 8013fe8:	f7ff ff96 	bl	8013f18 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8013fec:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013ff0:	4607      	mov	r7, r0
 8013ff2:	4630      	mov	r0, r6
 8013ff4:	f7fc fc76 	bl	80108e4 <ucdr_serialize_bool>
 8013ff8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013ffc:	4038      	ands	r0, r7
 8013ffe:	b2c7      	uxtb	r7, r0
 8014000:	b95b      	cbnz	r3, 801401a <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8014002:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8014006:	4630      	mov	r0, r6
 8014008:	f7fc fc6c 	bl	80108e4 <ucdr_serialize_bool>
 801400c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014010:	4007      	ands	r7, r0
 8014012:	b94b      	cbnz	r3, 8014028 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8014014:	403d      	ands	r5, r7
 8014016:	4628      	mov	r0, r5
 8014018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801401a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 801401e:	4630      	mov	r0, r6
 8014020:	f7fd f8fc 	bl	801121c <ucdr_serialize_uint64_t>
 8014024:	4007      	ands	r7, r0
 8014026:	e7ec      	b.n	8014002 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8014028:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801402a:	4630      	mov	r0, r6
 801402c:	f004 f884 	bl	8018138 <ucdr_serialize_string>
 8014030:	4007      	ands	r7, r0
 8014032:	b2ff      	uxtb	r7, r7
 8014034:	e7ee      	b.n	8014014 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8014036:	bf00      	nop

08014038 <uxr_serialize_OBJK_DataWriter_Binary>:
 8014038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801403a:	2202      	movs	r2, #2
 801403c:	460d      	mov	r5, r1
 801403e:	4606      	mov	r6, r0
 8014040:	f003 ff5a 	bl	8017ef8 <ucdr_serialize_array_uint8_t>
 8014044:	78a9      	ldrb	r1, [r5, #2]
 8014046:	4604      	mov	r4, r0
 8014048:	4630      	mov	r0, r6
 801404a:	f7fc fc4b 	bl	80108e4 <ucdr_serialize_bool>
 801404e:	78ab      	ldrb	r3, [r5, #2]
 8014050:	4004      	ands	r4, r0
 8014052:	b2e4      	uxtb	r4, r4
 8014054:	b90b      	cbnz	r3, 801405a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8014056:	4620      	mov	r0, r4
 8014058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801405a:	f105 0108 	add.w	r1, r5, #8
 801405e:	4630      	mov	r0, r6
 8014060:	f7ff ff5a 	bl	8013f18 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8014064:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8014068:	4607      	mov	r7, r0
 801406a:	4630      	mov	r0, r6
 801406c:	f7fc fc3a 	bl	80108e4 <ucdr_serialize_bool>
 8014070:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8014074:	4007      	ands	r7, r0
 8014076:	b2ff      	uxtb	r7, r7
 8014078:	b913      	cbnz	r3, 8014080 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801407a:	403c      	ands	r4, r7
 801407c:	4620      	mov	r0, r4
 801407e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014080:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8014084:	4630      	mov	r0, r6
 8014086:	f7fd f8c9 	bl	801121c <ucdr_serialize_uint64_t>
 801408a:	4007      	ands	r7, r0
 801408c:	e7f5      	b.n	801407a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801408e:	bf00      	nop

08014090 <uxr_deserialize_ObjectVariant>:
 8014090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014092:	4605      	mov	r5, r0
 8014094:	460e      	mov	r6, r1
 8014096:	f7fc fc6b 	bl	8010970 <ucdr_deserialize_uint8_t>
 801409a:	b320      	cbz	r0, 80140e6 <uxr_deserialize_ObjectVariant+0x56>
 801409c:	7833      	ldrb	r3, [r6, #0]
 801409e:	3b01      	subs	r3, #1
 80140a0:	4604      	mov	r4, r0
 80140a2:	2b0d      	cmp	r3, #13
 80140a4:	d81d      	bhi.n	80140e2 <uxr_deserialize_ObjectVariant+0x52>
 80140a6:	e8df f003 	tbb	[pc, r3]
 80140aa:	2107      	.short	0x2107
 80140ac:	21214b4b 	.word	0x21214b4b
 80140b0:	381c2121 	.word	0x381c2121
 80140b4:	876a3838 	.word	0x876a3838
 80140b8:	1d31      	adds	r1, r6, #4
 80140ba:	4628      	mov	r0, r5
 80140bc:	f7fc fc58 	bl	8010970 <ucdr_deserialize_uint8_t>
 80140c0:	4607      	mov	r7, r0
 80140c2:	b138      	cbz	r0, 80140d4 <uxr_deserialize_ObjectVariant+0x44>
 80140c4:	7933      	ldrb	r3, [r6, #4]
 80140c6:	2b02      	cmp	r3, #2
 80140c8:	d07c      	beq.n	80141c4 <uxr_deserialize_ObjectVariant+0x134>
 80140ca:	2b03      	cmp	r3, #3
 80140cc:	f000 8082 	beq.w	80141d4 <uxr_deserialize_ObjectVariant+0x144>
 80140d0:	2b01      	cmp	r3, #1
 80140d2:	d077      	beq.n	80141c4 <uxr_deserialize_ObjectVariant+0x134>
 80140d4:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 80140d8:	4628      	mov	r0, r5
 80140da:	f7fd f9ef 	bl	80114bc <ucdr_deserialize_int16_t>
 80140de:	4038      	ands	r0, r7
 80140e0:	b2c4      	uxtb	r4, r0
 80140e2:	4620      	mov	r0, r4
 80140e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140e6:	2400      	movs	r4, #0
 80140e8:	4620      	mov	r0, r4
 80140ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140ec:	1d31      	adds	r1, r6, #4
 80140ee:	4628      	mov	r0, r5
 80140f0:	f7fc fc3e 	bl	8010970 <ucdr_deserialize_uint8_t>
 80140f4:	4607      	mov	r7, r0
 80140f6:	b130      	cbz	r0, 8014106 <uxr_deserialize_ObjectVariant+0x76>
 80140f8:	7933      	ldrb	r3, [r6, #4]
 80140fa:	2b02      	cmp	r3, #2
 80140fc:	d037      	beq.n	801416e <uxr_deserialize_ObjectVariant+0xde>
 80140fe:	2b03      	cmp	r3, #3
 8014100:	d02a      	beq.n	8014158 <uxr_deserialize_ObjectVariant+0xc8>
 8014102:	2b01      	cmp	r3, #1
 8014104:	d033      	beq.n	801416e <uxr_deserialize_ObjectVariant+0xde>
 8014106:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801410a:	4628      	mov	r0, r5
 801410c:	2202      	movs	r2, #2
 801410e:	f003 ff57 	bl	8017fc0 <ucdr_deserialize_array_uint8_t>
 8014112:	4038      	ands	r0, r7
 8014114:	b2c4      	uxtb	r4, r0
 8014116:	4620      	mov	r0, r4
 8014118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801411a:	1d31      	adds	r1, r6, #4
 801411c:	4628      	mov	r0, r5
 801411e:	f7fc fc27 	bl	8010970 <ucdr_deserialize_uint8_t>
 8014122:	2800      	cmp	r0, #0
 8014124:	d0df      	beq.n	80140e6 <uxr_deserialize_ObjectVariant+0x56>
 8014126:	7933      	ldrb	r3, [r6, #4]
 8014128:	2b01      	cmp	r3, #1
 801412a:	d001      	beq.n	8014130 <uxr_deserialize_ObjectVariant+0xa0>
 801412c:	2b02      	cmp	r3, #2
 801412e:	d1d8      	bne.n	80140e2 <uxr_deserialize_ObjectVariant+0x52>
 8014130:	68b1      	ldr	r1, [r6, #8]
 8014132:	4628      	mov	r0, r5
 8014134:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014138:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801413c:	f004 b80c 	b.w	8018158 <ucdr_deserialize_string>
 8014140:	1d31      	adds	r1, r6, #4
 8014142:	4628      	mov	r0, r5
 8014144:	f7fc fc14 	bl	8010970 <ucdr_deserialize_uint8_t>
 8014148:	4607      	mov	r7, r0
 801414a:	2800      	cmp	r0, #0
 801414c:	d0db      	beq.n	8014106 <uxr_deserialize_ObjectVariant+0x76>
 801414e:	7933      	ldrb	r3, [r6, #4]
 8014150:	2b02      	cmp	r3, #2
 8014152:	d00c      	beq.n	801416e <uxr_deserialize_ObjectVariant+0xde>
 8014154:	2b03      	cmp	r3, #3
 8014156:	d1d6      	bne.n	8014106 <uxr_deserialize_ObjectVariant+0x76>
 8014158:	f106 0308 	add.w	r3, r6, #8
 801415c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014160:	f106 010c 	add.w	r1, r6, #12
 8014164:	4628      	mov	r0, r5
 8014166:	f003 ffcd 	bl	8018104 <ucdr_deserialize_sequence_uint8_t>
 801416a:	4607      	mov	r7, r0
 801416c:	e7cb      	b.n	8014106 <uxr_deserialize_ObjectVariant+0x76>
 801416e:	68b1      	ldr	r1, [r6, #8]
 8014170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014174:	4628      	mov	r0, r5
 8014176:	f003 ffef 	bl	8018158 <ucdr_deserialize_string>
 801417a:	4607      	mov	r7, r0
 801417c:	e7c3      	b.n	8014106 <uxr_deserialize_ObjectVariant+0x76>
 801417e:	2204      	movs	r2, #4
 8014180:	18b1      	adds	r1, r6, r2
 8014182:	4628      	mov	r0, r5
 8014184:	f003 ff1c 	bl	8017fc0 <ucdr_deserialize_array_uint8_t>
 8014188:	2202      	movs	r2, #2
 801418a:	4604      	mov	r4, r0
 801418c:	f106 0108 	add.w	r1, r6, #8
 8014190:	4628      	mov	r0, r5
 8014192:	f003 ff15 	bl	8017fc0 <ucdr_deserialize_array_uint8_t>
 8014196:	2202      	movs	r2, #2
 8014198:	4004      	ands	r4, r0
 801419a:	f106 010a 	add.w	r1, r6, #10
 801419e:	4628      	mov	r0, r5
 80141a0:	f003 ff0e 	bl	8017fc0 <ucdr_deserialize_array_uint8_t>
 80141a4:	b2e4      	uxtb	r4, r4
 80141a6:	4603      	mov	r3, r0
 80141a8:	f106 010c 	add.w	r1, r6, #12
 80141ac:	4628      	mov	r0, r5
 80141ae:	401c      	ands	r4, r3
 80141b0:	f7fc fbae 	bl	8010910 <ucdr_deserialize_bool>
 80141b4:	4004      	ands	r4, r0
 80141b6:	e794      	b.n	80140e2 <uxr_deserialize_ObjectVariant+0x52>
 80141b8:	1d31      	adds	r1, r6, #4
 80141ba:	4628      	mov	r0, r5
 80141bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80141c0:	f7ff bbd0 	b.w	8013964 <uxr_deserialize_CLIENT_Representation>
 80141c4:	68b1      	ldr	r1, [r6, #8]
 80141c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80141ca:	4628      	mov	r0, r5
 80141cc:	f003 ffc4 	bl	8018158 <ucdr_deserialize_string>
 80141d0:	4607      	mov	r7, r0
 80141d2:	e77f      	b.n	80140d4 <uxr_deserialize_ObjectVariant+0x44>
 80141d4:	f106 0308 	add.w	r3, r6, #8
 80141d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80141dc:	f106 010c 	add.w	r1, r6, #12
 80141e0:	4628      	mov	r0, r5
 80141e2:	f003 ff8f 	bl	8018104 <ucdr_deserialize_sequence_uint8_t>
 80141e6:	4607      	mov	r7, r0
 80141e8:	e774      	b.n	80140d4 <uxr_deserialize_ObjectVariant+0x44>
 80141ea:	bf00      	nop

080141ec <uxr_deserialize_BaseObjectRequest>:
 80141ec:	b570      	push	{r4, r5, r6, lr}
 80141ee:	2202      	movs	r2, #2
 80141f0:	4605      	mov	r5, r0
 80141f2:	460e      	mov	r6, r1
 80141f4:	f003 fee4 	bl	8017fc0 <ucdr_deserialize_array_uint8_t>
 80141f8:	1cb1      	adds	r1, r6, #2
 80141fa:	4604      	mov	r4, r0
 80141fc:	2202      	movs	r2, #2
 80141fe:	4628      	mov	r0, r5
 8014200:	f003 fede 	bl	8017fc0 <ucdr_deserialize_array_uint8_t>
 8014204:	4020      	ands	r0, r4
 8014206:	b2c0      	uxtb	r0, r0
 8014208:	bd70      	pop	{r4, r5, r6, pc}
 801420a:	bf00      	nop

0801420c <uxr_serialize_AGENT_ActivityInfo>:
 801420c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014210:	460e      	mov	r6, r1
 8014212:	f9b1 1000 	ldrsh.w	r1, [r1]
 8014216:	4607      	mov	r7, r0
 8014218:	f7fd f8d0 	bl	80113bc <ucdr_serialize_int16_t>
 801421c:	6871      	ldr	r1, [r6, #4]
 801421e:	4680      	mov	r8, r0
 8014220:	4638      	mov	r0, r7
 8014222:	f7fc fda5 	bl	8010d70 <ucdr_serialize_uint32_t>
 8014226:	6873      	ldr	r3, [r6, #4]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d06a      	beq.n	8014302 <uxr_serialize_AGENT_ActivityInfo+0xf6>
 801422c:	b318      	cbz	r0, 8014276 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 801422e:	f106 0904 	add.w	r9, r6, #4
 8014232:	2500      	movs	r5, #0
 8014234:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8014238:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 801423c:	7a21      	ldrb	r1, [r4, #8]
 801423e:	4638      	mov	r0, r7
 8014240:	f7fc fb80 	bl	8010944 <ucdr_serialize_uint8_t>
 8014244:	2800      	cmp	r0, #0
 8014246:	d051      	beq.n	80142ec <uxr_serialize_AGENT_ActivityInfo+0xe0>
 8014248:	7a23      	ldrb	r3, [r4, #8]
 801424a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801424e:	00c9      	lsls	r1, r1, #3
 8014250:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 8014254:	2b03      	cmp	r3, #3
 8014256:	d859      	bhi.n	801430c <uxr_serialize_AGENT_ActivityInfo+0x100>
 8014258:	e8df f003 	tbb	[pc, r3]
 801425c:	02122436 	.word	0x02122436
 8014260:	4449      	add	r1, r9
 8014262:	4638      	mov	r0, r7
 8014264:	6889      	ldr	r1, [r1, #8]
 8014266:	f003 ff67 	bl	8018138 <ucdr_serialize_string>
 801426a:	6873      	ldr	r3, [r6, #4]
 801426c:	3501      	adds	r5, #1
 801426e:	429d      	cmp	r5, r3
 8014270:	d240      	bcs.n	80142f4 <uxr_serialize_AGENT_ActivityInfo+0xe8>
 8014272:	2800      	cmp	r0, #0
 8014274:	d1de      	bne.n	8014234 <uxr_serialize_AGENT_ActivityInfo+0x28>
 8014276:	f04f 0800 	mov.w	r8, #0
 801427a:	4640      	mov	r0, r8
 801427c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014280:	3108      	adds	r1, #8
 8014282:	4449      	add	r1, r9
 8014284:	2210      	movs	r2, #16
 8014286:	4638      	mov	r0, r7
 8014288:	f003 fe36 	bl	8017ef8 <ucdr_serialize_array_uint8_t>
 801428c:	44aa      	add	sl, r5
 801428e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8014292:	4604      	mov	r4, r0
 8014294:	f8da 101c 	ldr.w	r1, [sl, #28]
 8014298:	4638      	mov	r0, r7
 801429a:	f7fc fd69 	bl	8010d70 <ucdr_serialize_uint32_t>
 801429e:	4020      	ands	r0, r4
 80142a0:	b2c0      	uxtb	r0, r0
 80142a2:	e7e2      	b.n	801426a <uxr_serialize_AGENT_ActivityInfo+0x5e>
 80142a4:	3108      	adds	r1, #8
 80142a6:	4449      	add	r1, r9
 80142a8:	2204      	movs	r2, #4
 80142aa:	4638      	mov	r0, r7
 80142ac:	f003 fe24 	bl	8017ef8 <ucdr_serialize_array_uint8_t>
 80142b0:	44aa      	add	sl, r5
 80142b2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80142b6:	4604      	mov	r4, r0
 80142b8:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 80142bc:	4638      	mov	r0, r7
 80142be:	f7fc fb6d 	bl	801099c <ucdr_serialize_uint16_t>
 80142c2:	4020      	ands	r0, r4
 80142c4:	b2c0      	uxtb	r0, r0
 80142c6:	e7d0      	b.n	801426a <uxr_serialize_AGENT_ActivityInfo+0x5e>
 80142c8:	3108      	adds	r1, #8
 80142ca:	4449      	add	r1, r9
 80142cc:	2202      	movs	r2, #2
 80142ce:	4638      	mov	r0, r7
 80142d0:	f003 fe12 	bl	8017ef8 <ucdr_serialize_array_uint8_t>
 80142d4:	44aa      	add	sl, r5
 80142d6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80142da:	4604      	mov	r4, r0
 80142dc:	f89a 100e 	ldrb.w	r1, [sl, #14]
 80142e0:	4638      	mov	r0, r7
 80142e2:	f7fc fb2f 	bl	8010944 <ucdr_serialize_uint8_t>
 80142e6:	4020      	ands	r0, r4
 80142e8:	b2c0      	uxtb	r0, r0
 80142ea:	e7be      	b.n	801426a <uxr_serialize_AGENT_ActivityInfo+0x5e>
 80142ec:	6873      	ldr	r3, [r6, #4]
 80142ee:	3501      	adds	r5, #1
 80142f0:	429d      	cmp	r5, r3
 80142f2:	d3c0      	bcc.n	8014276 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 80142f4:	ea08 0000 	and.w	r0, r8, r0
 80142f8:	fa5f f880 	uxtb.w	r8, r0
 80142fc:	4640      	mov	r0, r8
 80142fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014302:	ea08 0800 	and.w	r8, r8, r0
 8014306:	fa5f f888 	uxtb.w	r8, r8
 801430a:	e7b6      	b.n	801427a <uxr_serialize_AGENT_ActivityInfo+0x6e>
 801430c:	6873      	ldr	r3, [r6, #4]
 801430e:	3501      	adds	r5, #1
 8014310:	42ab      	cmp	r3, r5
 8014312:	f104 0418 	add.w	r4, r4, #24
 8014316:	d891      	bhi.n	801423c <uxr_serialize_AGENT_ActivityInfo+0x30>
 8014318:	e7af      	b.n	801427a <uxr_serialize_AGENT_ActivityInfo+0x6e>
 801431a:	bf00      	nop

0801431c <uxr_serialize_ActivityInfoVariant>:
 801431c:	b570      	push	{r4, r5, r6, lr}
 801431e:	460d      	mov	r5, r1
 8014320:	7809      	ldrb	r1, [r1, #0]
 8014322:	4606      	mov	r6, r0
 8014324:	f7fc fb0e 	bl	8010944 <ucdr_serialize_uint8_t>
 8014328:	b130      	cbz	r0, 8014338 <uxr_serialize_ActivityInfoVariant+0x1c>
 801432a:	782b      	ldrb	r3, [r5, #0]
 801432c:	2b06      	cmp	r3, #6
 801432e:	d019      	beq.n	8014364 <uxr_serialize_ActivityInfoVariant+0x48>
 8014330:	2b0d      	cmp	r3, #13
 8014332:	d010      	beq.n	8014356 <uxr_serialize_ActivityInfoVariant+0x3a>
 8014334:	2b05      	cmp	r3, #5
 8014336:	d000      	beq.n	801433a <uxr_serialize_ActivityInfoVariant+0x1e>
 8014338:	bd70      	pop	{r4, r5, r6, pc}
 801433a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801433e:	4630      	mov	r0, r6
 8014340:	f7fd f83c 	bl	80113bc <ucdr_serialize_int16_t>
 8014344:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8014348:	4604      	mov	r4, r0
 801434a:	4630      	mov	r0, r6
 801434c:	f7fc ff66 	bl	801121c <ucdr_serialize_uint64_t>
 8014350:	4020      	ands	r0, r4
 8014352:	b2c0      	uxtb	r0, r0
 8014354:	bd70      	pop	{r4, r5, r6, pc}
 8014356:	f105 0108 	add.w	r1, r5, #8
 801435a:	4630      	mov	r0, r6
 801435c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014360:	f7ff bf54 	b.w	801420c <uxr_serialize_AGENT_ActivityInfo>
 8014364:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8014368:	4630      	mov	r0, r6
 801436a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801436e:	f7fd b825 	b.w	80113bc <ucdr_serialize_int16_t>
 8014372:	bf00      	nop

08014374 <uxr_deserialize_BaseObjectReply>:
 8014374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014378:	2202      	movs	r2, #2
 801437a:	4606      	mov	r6, r0
 801437c:	460f      	mov	r7, r1
 801437e:	f003 fe1f 	bl	8017fc0 <ucdr_deserialize_array_uint8_t>
 8014382:	2202      	movs	r2, #2
 8014384:	1cb9      	adds	r1, r7, #2
 8014386:	4605      	mov	r5, r0
 8014388:	4630      	mov	r0, r6
 801438a:	f003 fe19 	bl	8017fc0 <ucdr_deserialize_array_uint8_t>
 801438e:	1d39      	adds	r1, r7, #4
 8014390:	4680      	mov	r8, r0
 8014392:	4630      	mov	r0, r6
 8014394:	f7fc faec 	bl	8010970 <ucdr_deserialize_uint8_t>
 8014398:	1d79      	adds	r1, r7, #5
 801439a:	4604      	mov	r4, r0
 801439c:	4630      	mov	r0, r6
 801439e:	f7fc fae7 	bl	8010970 <ucdr_deserialize_uint8_t>
 80143a2:	ea05 0508 	and.w	r5, r5, r8
 80143a6:	402c      	ands	r4, r5
 80143a8:	4020      	ands	r0, r4
 80143aa:	b2c0      	uxtb	r0, r0
 80143ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080143b0 <uxr_serialize_ReadSpecification>:
 80143b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143b4:	460e      	mov	r6, r1
 80143b6:	7809      	ldrb	r1, [r1, #0]
 80143b8:	4607      	mov	r7, r0
 80143ba:	f7fc fac3 	bl	8010944 <ucdr_serialize_uint8_t>
 80143be:	7871      	ldrb	r1, [r6, #1]
 80143c0:	4604      	mov	r4, r0
 80143c2:	4638      	mov	r0, r7
 80143c4:	f7fc fabe 	bl	8010944 <ucdr_serialize_uint8_t>
 80143c8:	78b1      	ldrb	r1, [r6, #2]
 80143ca:	4004      	ands	r4, r0
 80143cc:	4638      	mov	r0, r7
 80143ce:	f7fc fa89 	bl	80108e4 <ucdr_serialize_bool>
 80143d2:	78b3      	ldrb	r3, [r6, #2]
 80143d4:	b2e4      	uxtb	r4, r4
 80143d6:	4004      	ands	r4, r0
 80143d8:	b94b      	cbnz	r3, 80143ee <uxr_serialize_ReadSpecification+0x3e>
 80143da:	7a31      	ldrb	r1, [r6, #8]
 80143dc:	4638      	mov	r0, r7
 80143de:	f7fc fa81 	bl	80108e4 <ucdr_serialize_bool>
 80143e2:	7a33      	ldrb	r3, [r6, #8]
 80143e4:	4004      	ands	r4, r0
 80143e6:	b943      	cbnz	r3, 80143fa <uxr_serialize_ReadSpecification+0x4a>
 80143e8:	4620      	mov	r0, r4
 80143ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143ee:	6871      	ldr	r1, [r6, #4]
 80143f0:	4638      	mov	r0, r7
 80143f2:	f003 fea1 	bl	8018138 <ucdr_serialize_string>
 80143f6:	4004      	ands	r4, r0
 80143f8:	e7ef      	b.n	80143da <uxr_serialize_ReadSpecification+0x2a>
 80143fa:	8971      	ldrh	r1, [r6, #10]
 80143fc:	4638      	mov	r0, r7
 80143fe:	f7fc facd 	bl	801099c <ucdr_serialize_uint16_t>
 8014402:	89b1      	ldrh	r1, [r6, #12]
 8014404:	4605      	mov	r5, r0
 8014406:	4638      	mov	r0, r7
 8014408:	f7fc fac8 	bl	801099c <ucdr_serialize_uint16_t>
 801440c:	89f1      	ldrh	r1, [r6, #14]
 801440e:	4005      	ands	r5, r0
 8014410:	4638      	mov	r0, r7
 8014412:	f7fc fac3 	bl	801099c <ucdr_serialize_uint16_t>
 8014416:	8a31      	ldrh	r1, [r6, #16]
 8014418:	4680      	mov	r8, r0
 801441a:	4638      	mov	r0, r7
 801441c:	f7fc fabe 	bl	801099c <ucdr_serialize_uint16_t>
 8014420:	b2ed      	uxtb	r5, r5
 8014422:	4025      	ands	r5, r4
 8014424:	ea08 0505 	and.w	r5, r8, r5
 8014428:	ea00 0405 	and.w	r4, r0, r5
 801442c:	4620      	mov	r0, r4
 801442e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014432:	bf00      	nop

08014434 <uxr_serialize_CREATE_CLIENT_Payload>:
 8014434:	f7ff ba3a 	b.w	80138ac <uxr_serialize_CLIENT_Representation>

08014438 <uxr_serialize_CREATE_Payload>:
 8014438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801443a:	2202      	movs	r2, #2
 801443c:	4606      	mov	r6, r0
 801443e:	460d      	mov	r5, r1
 8014440:	f003 fd5a 	bl	8017ef8 <ucdr_serialize_array_uint8_t>
 8014444:	1ca9      	adds	r1, r5, #2
 8014446:	4604      	mov	r4, r0
 8014448:	2202      	movs	r2, #2
 801444a:	4630      	mov	r0, r6
 801444c:	f003 fd54 	bl	8017ef8 <ucdr_serialize_array_uint8_t>
 8014450:	7929      	ldrb	r1, [r5, #4]
 8014452:	4607      	mov	r7, r0
 8014454:	4630      	mov	r0, r6
 8014456:	f7fc fa75 	bl	8010944 <ucdr_serialize_uint8_t>
 801445a:	b328      	cbz	r0, 80144a8 <uxr_serialize_CREATE_Payload+0x70>
 801445c:	792b      	ldrb	r3, [r5, #4]
 801445e:	403c      	ands	r4, r7
 8014460:	3b01      	subs	r3, #1
 8014462:	b2e4      	uxtb	r4, r4
 8014464:	2b0d      	cmp	r3, #13
 8014466:	d81d      	bhi.n	80144a4 <uxr_serialize_CREATE_Payload+0x6c>
 8014468:	e8df f003 	tbb	[pc, r3]
 801446c:	32320753 	.word	0x32320753
 8014470:	07070707 	.word	0x07070707
 8014474:	2121211c 	.word	0x2121211c
 8014478:	684c      	.short	0x684c
 801447a:	7a29      	ldrb	r1, [r5, #8]
 801447c:	4630      	mov	r0, r6
 801447e:	f7fc fa61 	bl	8010944 <ucdr_serialize_uint8_t>
 8014482:	4607      	mov	r7, r0
 8014484:	b130      	cbz	r0, 8014494 <uxr_serialize_CREATE_Payload+0x5c>
 8014486:	7a2b      	ldrb	r3, [r5, #8]
 8014488:	2b02      	cmp	r3, #2
 801448a:	d035      	beq.n	80144f8 <uxr_serialize_CREATE_Payload+0xc0>
 801448c:	2b03      	cmp	r3, #3
 801448e:	d02b      	beq.n	80144e8 <uxr_serialize_CREATE_Payload+0xb0>
 8014490:	2b01      	cmp	r3, #1
 8014492:	d031      	beq.n	80144f8 <uxr_serialize_CREATE_Payload+0xc0>
 8014494:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8014498:	4630      	mov	r0, r6
 801449a:	2202      	movs	r2, #2
 801449c:	f003 fd2c 	bl	8017ef8 <ucdr_serialize_array_uint8_t>
 80144a0:	4038      	ands	r0, r7
 80144a2:	4004      	ands	r4, r0
 80144a4:	4620      	mov	r0, r4
 80144a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144a8:	2400      	movs	r4, #0
 80144aa:	4620      	mov	r0, r4
 80144ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144ae:	7a29      	ldrb	r1, [r5, #8]
 80144b0:	4630      	mov	r0, r6
 80144b2:	f7fc fa47 	bl	8010944 <ucdr_serialize_uint8_t>
 80144b6:	2800      	cmp	r0, #0
 80144b8:	d0f6      	beq.n	80144a8 <uxr_serialize_CREATE_Payload+0x70>
 80144ba:	7a2b      	ldrb	r3, [r5, #8]
 80144bc:	2b01      	cmp	r3, #1
 80144be:	d001      	beq.n	80144c4 <uxr_serialize_CREATE_Payload+0x8c>
 80144c0:	2b02      	cmp	r3, #2
 80144c2:	d1ef      	bne.n	80144a4 <uxr_serialize_CREATE_Payload+0x6c>
 80144c4:	68e9      	ldr	r1, [r5, #12]
 80144c6:	4630      	mov	r0, r6
 80144c8:	f003 fe36 	bl	8018138 <ucdr_serialize_string>
 80144cc:	4004      	ands	r4, r0
 80144ce:	e7e9      	b.n	80144a4 <uxr_serialize_CREATE_Payload+0x6c>
 80144d0:	7a29      	ldrb	r1, [r5, #8]
 80144d2:	4630      	mov	r0, r6
 80144d4:	f7fc fa36 	bl	8010944 <ucdr_serialize_uint8_t>
 80144d8:	4607      	mov	r7, r0
 80144da:	2800      	cmp	r0, #0
 80144dc:	d0da      	beq.n	8014494 <uxr_serialize_CREATE_Payload+0x5c>
 80144de:	7a2b      	ldrb	r3, [r5, #8]
 80144e0:	2b02      	cmp	r3, #2
 80144e2:	d009      	beq.n	80144f8 <uxr_serialize_CREATE_Payload+0xc0>
 80144e4:	2b03      	cmp	r3, #3
 80144e6:	d1d5      	bne.n	8014494 <uxr_serialize_CREATE_Payload+0x5c>
 80144e8:	68ea      	ldr	r2, [r5, #12]
 80144ea:	f105 0110 	add.w	r1, r5, #16
 80144ee:	4630      	mov	r0, r6
 80144f0:	f003 fdf6 	bl	80180e0 <ucdr_serialize_sequence_uint8_t>
 80144f4:	4607      	mov	r7, r0
 80144f6:	e7cd      	b.n	8014494 <uxr_serialize_CREATE_Payload+0x5c>
 80144f8:	68e9      	ldr	r1, [r5, #12]
 80144fa:	4630      	mov	r0, r6
 80144fc:	f003 fe1c 	bl	8018138 <ucdr_serialize_string>
 8014500:	4607      	mov	r7, r0
 8014502:	e7c7      	b.n	8014494 <uxr_serialize_CREATE_Payload+0x5c>
 8014504:	f105 0108 	add.w	r1, r5, #8
 8014508:	4630      	mov	r0, r6
 801450a:	f7ff fa95 	bl	8013a38 <uxr_serialize_AGENT_Representation>
 801450e:	4004      	ands	r4, r0
 8014510:	e7c8      	b.n	80144a4 <uxr_serialize_CREATE_Payload+0x6c>
 8014512:	7a29      	ldrb	r1, [r5, #8]
 8014514:	4630      	mov	r0, r6
 8014516:	f7fc fa15 	bl	8010944 <ucdr_serialize_uint8_t>
 801451a:	4607      	mov	r7, r0
 801451c:	b130      	cbz	r0, 801452c <uxr_serialize_CREATE_Payload+0xf4>
 801451e:	7a2b      	ldrb	r3, [r5, #8]
 8014520:	2b02      	cmp	r3, #2
 8014522:	d012      	beq.n	801454a <uxr_serialize_CREATE_Payload+0x112>
 8014524:	2b03      	cmp	r3, #3
 8014526:	d016      	beq.n	8014556 <uxr_serialize_CREATE_Payload+0x11e>
 8014528:	2b01      	cmp	r3, #1
 801452a:	d00e      	beq.n	801454a <uxr_serialize_CREATE_Payload+0x112>
 801452c:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 8014530:	4630      	mov	r0, r6
 8014532:	f7fc ff43 	bl	80113bc <ucdr_serialize_int16_t>
 8014536:	4038      	ands	r0, r7
 8014538:	4004      	ands	r4, r0
 801453a:	e7b3      	b.n	80144a4 <uxr_serialize_CREATE_Payload+0x6c>
 801453c:	f105 0108 	add.w	r1, r5, #8
 8014540:	4630      	mov	r0, r6
 8014542:	f7ff f9b3 	bl	80138ac <uxr_serialize_CLIENT_Representation>
 8014546:	4004      	ands	r4, r0
 8014548:	e7ac      	b.n	80144a4 <uxr_serialize_CREATE_Payload+0x6c>
 801454a:	68e9      	ldr	r1, [r5, #12]
 801454c:	4630      	mov	r0, r6
 801454e:	f003 fdf3 	bl	8018138 <ucdr_serialize_string>
 8014552:	4607      	mov	r7, r0
 8014554:	e7ea      	b.n	801452c <uxr_serialize_CREATE_Payload+0xf4>
 8014556:	68ea      	ldr	r2, [r5, #12]
 8014558:	f105 0110 	add.w	r1, r5, #16
 801455c:	4630      	mov	r0, r6
 801455e:	f003 fdbf 	bl	80180e0 <ucdr_serialize_sequence_uint8_t>
 8014562:	4607      	mov	r7, r0
 8014564:	e7e2      	b.n	801452c <uxr_serialize_CREATE_Payload+0xf4>
 8014566:	bf00      	nop

08014568 <uxr_deserialize_GET_INFO_Payload>:
 8014568:	b570      	push	{r4, r5, r6, lr}
 801456a:	2202      	movs	r2, #2
 801456c:	4605      	mov	r5, r0
 801456e:	460e      	mov	r6, r1
 8014570:	f003 fd26 	bl	8017fc0 <ucdr_deserialize_array_uint8_t>
 8014574:	1cb1      	adds	r1, r6, #2
 8014576:	2202      	movs	r2, #2
 8014578:	4604      	mov	r4, r0
 801457a:	4628      	mov	r0, r5
 801457c:	f003 fd20 	bl	8017fc0 <ucdr_deserialize_array_uint8_t>
 8014580:	1d31      	adds	r1, r6, #4
 8014582:	4004      	ands	r4, r0
 8014584:	4628      	mov	r0, r5
 8014586:	f7fc fd23 	bl	8010fd0 <ucdr_deserialize_uint32_t>
 801458a:	b2e4      	uxtb	r4, r4
 801458c:	4020      	ands	r0, r4
 801458e:	bd70      	pop	{r4, r5, r6, pc}

08014590 <uxr_serialize_DELETE_Payload>:
 8014590:	b570      	push	{r4, r5, r6, lr}
 8014592:	2202      	movs	r2, #2
 8014594:	4605      	mov	r5, r0
 8014596:	460e      	mov	r6, r1
 8014598:	f003 fcae 	bl	8017ef8 <ucdr_serialize_array_uint8_t>
 801459c:	1cb1      	adds	r1, r6, #2
 801459e:	4604      	mov	r4, r0
 80145a0:	2202      	movs	r2, #2
 80145a2:	4628      	mov	r0, r5
 80145a4:	f003 fca8 	bl	8017ef8 <ucdr_serialize_array_uint8_t>
 80145a8:	4020      	ands	r0, r4
 80145aa:	b2c0      	uxtb	r0, r0
 80145ac:	bd70      	pop	{r4, r5, r6, pc}
 80145ae:	bf00      	nop

080145b0 <uxr_deserialize_STATUS_AGENT_Payload>:
 80145b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80145b4:	4606      	mov	r6, r0
 80145b6:	460f      	mov	r7, r1
 80145b8:	f7fc f9da 	bl	8010970 <ucdr_deserialize_uint8_t>
 80145bc:	1c79      	adds	r1, r7, #1
 80145be:	4605      	mov	r5, r0
 80145c0:	4630      	mov	r0, r6
 80145c2:	f7fc f9d5 	bl	8010970 <ucdr_deserialize_uint8_t>
 80145c6:	1d39      	adds	r1, r7, #4
 80145c8:	4681      	mov	r9, r0
 80145ca:	2204      	movs	r2, #4
 80145cc:	4630      	mov	r0, r6
 80145ce:	f003 fcf7 	bl	8017fc0 <ucdr_deserialize_array_uint8_t>
 80145d2:	f107 0108 	add.w	r1, r7, #8
 80145d6:	4604      	mov	r4, r0
 80145d8:	2202      	movs	r2, #2
 80145da:	4630      	mov	r0, r6
 80145dc:	f003 fcf0 	bl	8017fc0 <ucdr_deserialize_array_uint8_t>
 80145e0:	f107 010a 	add.w	r1, r7, #10
 80145e4:	4680      	mov	r8, r0
 80145e6:	2202      	movs	r2, #2
 80145e8:	4630      	mov	r0, r6
 80145ea:	f003 fce9 	bl	8017fc0 <ucdr_deserialize_array_uint8_t>
 80145ee:	ea05 0509 	and.w	r5, r5, r9
 80145f2:	b2ed      	uxtb	r5, r5
 80145f4:	402c      	ands	r4, r5
 80145f6:	f107 010c 	add.w	r1, r7, #12
 80145fa:	4605      	mov	r5, r0
 80145fc:	4630      	mov	r0, r6
 80145fe:	f7fc f987 	bl	8010910 <ucdr_deserialize_bool>
 8014602:	ea08 0404 	and.w	r4, r8, r4
 8014606:	4025      	ands	r5, r4
 8014608:	4028      	ands	r0, r5
 801460a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801460e:	bf00      	nop

08014610 <uxr_deserialize_STATUS_Payload>:
 8014610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014614:	2202      	movs	r2, #2
 8014616:	4606      	mov	r6, r0
 8014618:	460f      	mov	r7, r1
 801461a:	f003 fcd1 	bl	8017fc0 <ucdr_deserialize_array_uint8_t>
 801461e:	2202      	movs	r2, #2
 8014620:	1cb9      	adds	r1, r7, #2
 8014622:	4605      	mov	r5, r0
 8014624:	4630      	mov	r0, r6
 8014626:	f003 fccb 	bl	8017fc0 <ucdr_deserialize_array_uint8_t>
 801462a:	1d39      	adds	r1, r7, #4
 801462c:	4680      	mov	r8, r0
 801462e:	4630      	mov	r0, r6
 8014630:	f7fc f99e 	bl	8010970 <ucdr_deserialize_uint8_t>
 8014634:	1d79      	adds	r1, r7, #5
 8014636:	4604      	mov	r4, r0
 8014638:	4630      	mov	r0, r6
 801463a:	f7fc f999 	bl	8010970 <ucdr_deserialize_uint8_t>
 801463e:	ea05 0508 	and.w	r5, r5, r8
 8014642:	402c      	ands	r4, r5
 8014644:	4020      	ands	r0, r4
 8014646:	b2c0      	uxtb	r0, r0
 8014648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801464c <uxr_serialize_INFO_Payload>:
 801464c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014650:	2202      	movs	r2, #2
 8014652:	460c      	mov	r4, r1
 8014654:	4605      	mov	r5, r0
 8014656:	f003 fc4f 	bl	8017ef8 <ucdr_serialize_array_uint8_t>
 801465a:	2202      	movs	r2, #2
 801465c:	4680      	mov	r8, r0
 801465e:	1ca1      	adds	r1, r4, #2
 8014660:	4628      	mov	r0, r5
 8014662:	f003 fc49 	bl	8017ef8 <ucdr_serialize_array_uint8_t>
 8014666:	7921      	ldrb	r1, [r4, #4]
 8014668:	4607      	mov	r7, r0
 801466a:	4628      	mov	r0, r5
 801466c:	f7fc f96a 	bl	8010944 <ucdr_serialize_uint8_t>
 8014670:	7961      	ldrb	r1, [r4, #5]
 8014672:	4606      	mov	r6, r0
 8014674:	4628      	mov	r0, r5
 8014676:	f7fc f965 	bl	8010944 <ucdr_serialize_uint8_t>
 801467a:	ea08 0807 	and.w	r8, r8, r7
 801467e:	ea06 0608 	and.w	r6, r6, r8
 8014682:	4006      	ands	r6, r0
 8014684:	7a21      	ldrb	r1, [r4, #8]
 8014686:	4628      	mov	r0, r5
 8014688:	f7fc f92c 	bl	80108e4 <ucdr_serialize_bool>
 801468c:	7a23      	ldrb	r3, [r4, #8]
 801468e:	b2f7      	uxtb	r7, r6
 8014690:	4606      	mov	r6, r0
 8014692:	b96b      	cbnz	r3, 80146b0 <uxr_serialize_INFO_Payload+0x64>
 8014694:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 8014698:	4628      	mov	r0, r5
 801469a:	f7fc f923 	bl	80108e4 <ucdr_serialize_bool>
 801469e:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 80146a2:	4030      	ands	r0, r6
 80146a4:	b2c6      	uxtb	r6, r0
 80146a6:	b983      	cbnz	r3, 80146ca <uxr_serialize_INFO_Payload+0x7e>
 80146a8:	ea06 0007 	and.w	r0, r6, r7
 80146ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146b0:	7b21      	ldrb	r1, [r4, #12]
 80146b2:	4628      	mov	r0, r5
 80146b4:	f7fc f946 	bl	8010944 <ucdr_serialize_uint8_t>
 80146b8:	b188      	cbz	r0, 80146de <uxr_serialize_INFO_Payload+0x92>
 80146ba:	f104 010c 	add.w	r1, r4, #12
 80146be:	4628      	mov	r0, r5
 80146c0:	f7ff fa06 	bl	8013ad0 <uxr_serialize_ObjectVariant.part.0>
 80146c4:	4030      	ands	r0, r6
 80146c6:	b2c6      	uxtb	r6, r0
 80146c8:	e7e4      	b.n	8014694 <uxr_serialize_INFO_Payload+0x48>
 80146ca:	f504 7108 	add.w	r1, r4, #544	; 0x220
 80146ce:	4628      	mov	r0, r5
 80146d0:	f7ff fe24 	bl	801431c <uxr_serialize_ActivityInfoVariant>
 80146d4:	4006      	ands	r6, r0
 80146d6:	ea06 0007 	and.w	r0, r6, r7
 80146da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146de:	4606      	mov	r6, r0
 80146e0:	e7d8      	b.n	8014694 <uxr_serialize_INFO_Payload+0x48>
 80146e2:	bf00      	nop

080146e4 <uxr_serialize_READ_DATA_Payload>:
 80146e4:	b570      	push	{r4, r5, r6, lr}
 80146e6:	2202      	movs	r2, #2
 80146e8:	4605      	mov	r5, r0
 80146ea:	460e      	mov	r6, r1
 80146ec:	f003 fc04 	bl	8017ef8 <ucdr_serialize_array_uint8_t>
 80146f0:	1cb1      	adds	r1, r6, #2
 80146f2:	2202      	movs	r2, #2
 80146f4:	4604      	mov	r4, r0
 80146f6:	4628      	mov	r0, r5
 80146f8:	f003 fbfe 	bl	8017ef8 <ucdr_serialize_array_uint8_t>
 80146fc:	1d31      	adds	r1, r6, #4
 80146fe:	4004      	ands	r4, r0
 8014700:	4628      	mov	r0, r5
 8014702:	f7ff fe55 	bl	80143b0 <uxr_serialize_ReadSpecification>
 8014706:	b2e4      	uxtb	r4, r4
 8014708:	4020      	ands	r0, r4
 801470a:	bd70      	pop	{r4, r5, r6, pc}

0801470c <uxr_serialize_WRITE_DATA_Payload_Data>:
 801470c:	b570      	push	{r4, r5, r6, lr}
 801470e:	2202      	movs	r2, #2
 8014710:	4605      	mov	r5, r0
 8014712:	460e      	mov	r6, r1
 8014714:	f003 fbf0 	bl	8017ef8 <ucdr_serialize_array_uint8_t>
 8014718:	1cb1      	adds	r1, r6, #2
 801471a:	4604      	mov	r4, r0
 801471c:	2202      	movs	r2, #2
 801471e:	4628      	mov	r0, r5
 8014720:	f003 fbea 	bl	8017ef8 <ucdr_serialize_array_uint8_t>
 8014724:	4020      	ands	r0, r4
 8014726:	b2c0      	uxtb	r0, r0
 8014728:	bd70      	pop	{r4, r5, r6, pc}
 801472a:	bf00      	nop

0801472c <uxr_serialize_ACKNACK_Payload>:
 801472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801472e:	460f      	mov	r7, r1
 8014730:	460e      	mov	r6, r1
 8014732:	f837 1b02 	ldrh.w	r1, [r7], #2
 8014736:	4605      	mov	r5, r0
 8014738:	f7fc f930 	bl	801099c <ucdr_serialize_uint16_t>
 801473c:	4639      	mov	r1, r7
 801473e:	2202      	movs	r2, #2
 8014740:	4604      	mov	r4, r0
 8014742:	4628      	mov	r0, r5
 8014744:	f003 fbd8 	bl	8017ef8 <ucdr_serialize_array_uint8_t>
 8014748:	7931      	ldrb	r1, [r6, #4]
 801474a:	4004      	ands	r4, r0
 801474c:	4628      	mov	r0, r5
 801474e:	f7fc f8f9 	bl	8010944 <ucdr_serialize_uint8_t>
 8014752:	b2e4      	uxtb	r4, r4
 8014754:	4020      	ands	r0, r4
 8014756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014758 <uxr_deserialize_ACKNACK_Payload>:
 8014758:	b570      	push	{r4, r5, r6, lr}
 801475a:	4605      	mov	r5, r0
 801475c:	460e      	mov	r6, r1
 801475e:	f7fc fa1d 	bl	8010b9c <ucdr_deserialize_uint16_t>
 8014762:	1cb1      	adds	r1, r6, #2
 8014764:	2202      	movs	r2, #2
 8014766:	4604      	mov	r4, r0
 8014768:	4628      	mov	r0, r5
 801476a:	f003 fc29 	bl	8017fc0 <ucdr_deserialize_array_uint8_t>
 801476e:	1d31      	adds	r1, r6, #4
 8014770:	4004      	ands	r4, r0
 8014772:	4628      	mov	r0, r5
 8014774:	f7fc f8fc 	bl	8010970 <ucdr_deserialize_uint8_t>
 8014778:	b2e4      	uxtb	r4, r4
 801477a:	4020      	ands	r0, r4
 801477c:	bd70      	pop	{r4, r5, r6, pc}
 801477e:	bf00      	nop

08014780 <uxr_serialize_HEARTBEAT_Payload>:
 8014780:	b570      	push	{r4, r5, r6, lr}
 8014782:	460d      	mov	r5, r1
 8014784:	8809      	ldrh	r1, [r1, #0]
 8014786:	4606      	mov	r6, r0
 8014788:	f7fc f908 	bl	801099c <ucdr_serialize_uint16_t>
 801478c:	8869      	ldrh	r1, [r5, #2]
 801478e:	4604      	mov	r4, r0
 8014790:	4630      	mov	r0, r6
 8014792:	f7fc f903 	bl	801099c <ucdr_serialize_uint16_t>
 8014796:	7929      	ldrb	r1, [r5, #4]
 8014798:	4004      	ands	r4, r0
 801479a:	4630      	mov	r0, r6
 801479c:	f7fc f8d2 	bl	8010944 <ucdr_serialize_uint8_t>
 80147a0:	b2e4      	uxtb	r4, r4
 80147a2:	4020      	ands	r0, r4
 80147a4:	bd70      	pop	{r4, r5, r6, pc}
 80147a6:	bf00      	nop

080147a8 <uxr_deserialize_HEARTBEAT_Payload>:
 80147a8:	b570      	push	{r4, r5, r6, lr}
 80147aa:	4605      	mov	r5, r0
 80147ac:	460e      	mov	r6, r1
 80147ae:	f7fc f9f5 	bl	8010b9c <ucdr_deserialize_uint16_t>
 80147b2:	1cb1      	adds	r1, r6, #2
 80147b4:	4604      	mov	r4, r0
 80147b6:	4628      	mov	r0, r5
 80147b8:	f7fc f9f0 	bl	8010b9c <ucdr_deserialize_uint16_t>
 80147bc:	1d31      	adds	r1, r6, #4
 80147be:	4004      	ands	r4, r0
 80147c0:	4628      	mov	r0, r5
 80147c2:	f7fc f8d5 	bl	8010970 <ucdr_deserialize_uint8_t>
 80147c6:	b2e4      	uxtb	r4, r4
 80147c8:	4020      	ands	r0, r4
 80147ca:	bd70      	pop	{r4, r5, r6, pc}

080147cc <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80147cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147d0:	4605      	mov	r5, r0
 80147d2:	460e      	mov	r6, r1
 80147d4:	f7fc ff7e 	bl	80116d4 <ucdr_deserialize_int32_t>
 80147d8:	1d31      	adds	r1, r6, #4
 80147da:	4607      	mov	r7, r0
 80147dc:	4628      	mov	r0, r5
 80147de:	f7fc fbf7 	bl	8010fd0 <ucdr_deserialize_uint32_t>
 80147e2:	f106 0108 	add.w	r1, r6, #8
 80147e6:	4680      	mov	r8, r0
 80147e8:	4628      	mov	r0, r5
 80147ea:	f7fc ff73 	bl	80116d4 <ucdr_deserialize_int32_t>
 80147ee:	f106 010c 	add.w	r1, r6, #12
 80147f2:	4604      	mov	r4, r0
 80147f4:	4628      	mov	r0, r5
 80147f6:	f7fc fbeb 	bl	8010fd0 <ucdr_deserialize_uint32_t>
 80147fa:	ea07 0708 	and.w	r7, r7, r8
 80147fe:	403c      	ands	r4, r7
 8014800:	f106 0110 	add.w	r1, r6, #16
 8014804:	4004      	ands	r4, r0
 8014806:	4628      	mov	r0, r5
 8014808:	f7fc ff64 	bl	80116d4 <ucdr_deserialize_int32_t>
 801480c:	f106 0114 	add.w	r1, r6, #20
 8014810:	4603      	mov	r3, r0
 8014812:	4628      	mov	r0, r5
 8014814:	461d      	mov	r5, r3
 8014816:	f7fc fbdb 	bl	8010fd0 <ucdr_deserialize_uint32_t>
 801481a:	b2e4      	uxtb	r4, r4
 801481c:	402c      	ands	r4, r5
 801481e:	4020      	ands	r0, r4
 8014820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014824 <uxr_serialize_SampleIdentity>:
 8014824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014828:	220c      	movs	r2, #12
 801482a:	4604      	mov	r4, r0
 801482c:	460d      	mov	r5, r1
 801482e:	f003 fb63 	bl	8017ef8 <ucdr_serialize_array_uint8_t>
 8014832:	2203      	movs	r2, #3
 8014834:	f105 010c 	add.w	r1, r5, #12
 8014838:	4607      	mov	r7, r0
 801483a:	4620      	mov	r0, r4
 801483c:	f003 fb5c 	bl	8017ef8 <ucdr_serialize_array_uint8_t>
 8014840:	7be9      	ldrb	r1, [r5, #15]
 8014842:	4680      	mov	r8, r0
 8014844:	4620      	mov	r0, r4
 8014846:	f7fc f87d 	bl	8010944 <ucdr_serialize_uint8_t>
 801484a:	6929      	ldr	r1, [r5, #16]
 801484c:	4606      	mov	r6, r0
 801484e:	4620      	mov	r0, r4
 8014850:	f7fc fea8 	bl	80115a4 <ucdr_serialize_int32_t>
 8014854:	6969      	ldr	r1, [r5, #20]
 8014856:	4603      	mov	r3, r0
 8014858:	4620      	mov	r0, r4
 801485a:	ea07 0708 	and.w	r7, r7, r8
 801485e:	461c      	mov	r4, r3
 8014860:	f7fc fa86 	bl	8010d70 <ucdr_serialize_uint32_t>
 8014864:	403e      	ands	r6, r7
 8014866:	4034      	ands	r4, r6
 8014868:	4020      	ands	r0, r4
 801486a:	b2c0      	uxtb	r0, r0
 801486c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014870 <uxr_deserialize_SampleIdentity>:
 8014870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014874:	220c      	movs	r2, #12
 8014876:	4604      	mov	r4, r0
 8014878:	460d      	mov	r5, r1
 801487a:	f003 fba1 	bl	8017fc0 <ucdr_deserialize_array_uint8_t>
 801487e:	2203      	movs	r2, #3
 8014880:	f105 010c 	add.w	r1, r5, #12
 8014884:	4607      	mov	r7, r0
 8014886:	4620      	mov	r0, r4
 8014888:	f003 fb9a 	bl	8017fc0 <ucdr_deserialize_array_uint8_t>
 801488c:	f105 010f 	add.w	r1, r5, #15
 8014890:	4680      	mov	r8, r0
 8014892:	4620      	mov	r0, r4
 8014894:	f7fc f86c 	bl	8010970 <ucdr_deserialize_uint8_t>
 8014898:	f105 0110 	add.w	r1, r5, #16
 801489c:	4606      	mov	r6, r0
 801489e:	4620      	mov	r0, r4
 80148a0:	f7fc ff18 	bl	80116d4 <ucdr_deserialize_int32_t>
 80148a4:	f105 0114 	add.w	r1, r5, #20
 80148a8:	4603      	mov	r3, r0
 80148aa:	4620      	mov	r0, r4
 80148ac:	ea07 0708 	and.w	r7, r7, r8
 80148b0:	461c      	mov	r4, r3
 80148b2:	f7fc fb8d 	bl	8010fd0 <ucdr_deserialize_uint32_t>
 80148b6:	403e      	ands	r6, r7
 80148b8:	4034      	ands	r4, r6
 80148ba:	4020      	ands	r0, r4
 80148bc:	b2c0      	uxtb	r0, r0
 80148be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148c2:	bf00      	nop

080148c4 <rcl_client_get_rmw_handle>:
 80148c4:	b110      	cbz	r0, 80148cc <rcl_client_get_rmw_handle+0x8>
 80148c6:	6800      	ldr	r0, [r0, #0]
 80148c8:	b100      	cbz	r0, 80148cc <rcl_client_get_rmw_handle+0x8>
 80148ca:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80148cc:	4770      	bx	lr
 80148ce:	bf00      	nop

080148d0 <rcl_take_response>:
 80148d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148d2:	460e      	mov	r6, r1
 80148d4:	460c      	mov	r4, r1
 80148d6:	4607      	mov	r7, r0
 80148d8:	4694      	mov	ip, r2
 80148da:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80148dc:	b08d      	sub	sp, #52	; 0x34
 80148de:	ad06      	add	r5, sp, #24
 80148e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80148e2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80148e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80148ea:	b337      	cbz	r7, 801493a <rcl_take_response+0x6a>
 80148ec:	683b      	ldr	r3, [r7, #0]
 80148ee:	b323      	cbz	r3, 801493a <rcl_take_response+0x6a>
 80148f0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80148f2:	b310      	cbz	r0, 801493a <rcl_take_response+0x6a>
 80148f4:	4662      	mov	r2, ip
 80148f6:	b31a      	cbz	r2, 8014940 <rcl_take_response+0x70>
 80148f8:	2300      	movs	r3, #0
 80148fa:	2600      	movs	r6, #0
 80148fc:	2700      	movs	r7, #0
 80148fe:	f88d 3007 	strb.w	r3, [sp, #7]
 8014902:	a902      	add	r1, sp, #8
 8014904:	f10d 0307 	add.w	r3, sp, #7
 8014908:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801490c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014910:	f003 f83a 	bl	8017988 <rmw_take_response>
 8014914:	4606      	mov	r6, r0
 8014916:	b9a8      	cbnz	r0, 8014944 <rcl_take_response+0x74>
 8014918:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801491c:	f240 13f5 	movw	r3, #501	; 0x1f5
 8014920:	2a00      	cmp	r2, #0
 8014922:	bf08      	it	eq
 8014924:	461e      	moveq	r6, r3
 8014926:	ad06      	add	r5, sp, #24
 8014928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801492a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801492c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014930:	e884 0003 	stmia.w	r4, {r0, r1}
 8014934:	4630      	mov	r0, r6
 8014936:	b00d      	add	sp, #52	; 0x34
 8014938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801493a:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 801493e:	e7f2      	b.n	8014926 <rcl_take_response+0x56>
 8014940:	260b      	movs	r6, #11
 8014942:	e7f0      	b.n	8014926 <rcl_take_response+0x56>
 8014944:	2601      	movs	r6, #1
 8014946:	e7ee      	b.n	8014926 <rcl_take_response+0x56>

08014948 <rcl_convert_rmw_ret_to_rcl_ret>:
 8014948:	280b      	cmp	r0, #11
 801494a:	dc0d      	bgt.n	8014968 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801494c:	2800      	cmp	r0, #0
 801494e:	db09      	blt.n	8014964 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8014950:	280b      	cmp	r0, #11
 8014952:	d807      	bhi.n	8014964 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8014954:	e8df f000 	tbb	[pc, r0]
 8014958:	07060607 	.word	0x07060607
 801495c:	06060606 	.word	0x06060606
 8014960:	07070606 	.word	0x07070606
 8014964:	2001      	movs	r0, #1
 8014966:	4770      	bx	lr
 8014968:	28cb      	cmp	r0, #203	; 0xcb
 801496a:	bf18      	it	ne
 801496c:	2001      	movne	r0, #1
 801496e:	4770      	bx	lr

08014970 <rcl_get_zero_initialized_context>:
 8014970:	4a03      	ldr	r2, [pc, #12]	; (8014980 <rcl_get_zero_initialized_context+0x10>)
 8014972:	4603      	mov	r3, r0
 8014974:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014978:	e883 0003 	stmia.w	r3, {r0, r1}
 801497c:	4618      	mov	r0, r3
 801497e:	4770      	bx	lr
 8014980:	0801b9f4 	.word	0x0801b9f4

08014984 <rcl_context_is_valid>:
 8014984:	b118      	cbz	r0, 801498e <rcl_context_is_valid+0xa>
 8014986:	6840      	ldr	r0, [r0, #4]
 8014988:	3800      	subs	r0, #0
 801498a:	bf18      	it	ne
 801498c:	2001      	movne	r0, #1
 801498e:	4770      	bx	lr

08014990 <__cleanup_context>:
 8014990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014994:	4606      	mov	r6, r0
 8014996:	6800      	ldr	r0, [r0, #0]
 8014998:	2300      	movs	r3, #0
 801499a:	6073      	str	r3, [r6, #4]
 801499c:	2800      	cmp	r0, #0
 801499e:	d04d      	beq.n	8014a3c <__cleanup_context+0xac>
 80149a0:	6947      	ldr	r7, [r0, #20]
 80149a2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80149a6:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80149aa:	b137      	cbz	r7, 80149ba <__cleanup_context+0x2a>
 80149ac:	3014      	adds	r0, #20
 80149ae:	f000 fb1d 	bl	8014fec <rcl_init_options_fini>
 80149b2:	4607      	mov	r7, r0
 80149b4:	2800      	cmp	r0, #0
 80149b6:	d148      	bne.n	8014a4a <__cleanup_context+0xba>
 80149b8:	6830      	ldr	r0, [r6, #0]
 80149ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80149bc:	b143      	cbz	r3, 80149d0 <__cleanup_context+0x40>
 80149be:	3028      	adds	r0, #40	; 0x28
 80149c0:	f002 fd5e 	bl	8017480 <rmw_context_fini>
 80149c4:	b118      	cbz	r0, 80149ce <__cleanup_context+0x3e>
 80149c6:	2f00      	cmp	r7, #0
 80149c8:	d042      	beq.n	8014a50 <__cleanup_context+0xc0>
 80149ca:	f7fa feb3 	bl	800f734 <rcutils_reset_error>
 80149ce:	6830      	ldr	r0, [r6, #0]
 80149d0:	f8d0 c020 	ldr.w	ip, [r0, #32]
 80149d4:	f1bc 0f00 	cmp.w	ip, #0
 80149d8:	d01c      	beq.n	8014a14 <__cleanup_context+0x84>
 80149da:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80149de:	2a01      	cmp	r2, #1
 80149e0:	f173 0100 	sbcs.w	r1, r3, #0
 80149e4:	db12      	blt.n	8014a0c <__cleanup_context+0x7c>
 80149e6:	2400      	movs	r4, #0
 80149e8:	2500      	movs	r5, #0
 80149ea:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 80149ee:	4649      	mov	r1, r9
 80149f0:	b1c0      	cbz	r0, 8014a24 <__cleanup_context+0x94>
 80149f2:	47c0      	blx	r8
 80149f4:	6831      	ldr	r1, [r6, #0]
 80149f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80149fa:	3401      	adds	r4, #1
 80149fc:	f145 0500 	adc.w	r5, r5, #0
 8014a00:	4294      	cmp	r4, r2
 8014a02:	f8d1 c020 	ldr.w	ip, [r1, #32]
 8014a06:	eb75 0103 	sbcs.w	r1, r5, r3
 8014a0a:	dbee      	blt.n	80149ea <__cleanup_context+0x5a>
 8014a0c:	4660      	mov	r0, ip
 8014a0e:	4649      	mov	r1, r9
 8014a10:	47c0      	blx	r8
 8014a12:	6830      	ldr	r0, [r6, #0]
 8014a14:	4649      	mov	r1, r9
 8014a16:	47c0      	blx	r8
 8014a18:	2300      	movs	r3, #0
 8014a1a:	e9c6 3300 	strd	r3, r3, [r6]
 8014a1e:	4638      	mov	r0, r7
 8014a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a24:	3401      	adds	r4, #1
 8014a26:	f145 0500 	adc.w	r5, r5, #0
 8014a2a:	4294      	cmp	r4, r2
 8014a2c:	eb75 0103 	sbcs.w	r1, r5, r3
 8014a30:	dbdb      	blt.n	80149ea <__cleanup_context+0x5a>
 8014a32:	4660      	mov	r0, ip
 8014a34:	4649      	mov	r1, r9
 8014a36:	47c0      	blx	r8
 8014a38:	6830      	ldr	r0, [r6, #0]
 8014a3a:	e7eb      	b.n	8014a14 <__cleanup_context+0x84>
 8014a3c:	4607      	mov	r7, r0
 8014a3e:	2300      	movs	r3, #0
 8014a40:	e9c6 3300 	strd	r3, r3, [r6]
 8014a44:	4638      	mov	r0, r7
 8014a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a4a:	f7fa fe73 	bl	800f734 <rcutils_reset_error>
 8014a4e:	e7b3      	b.n	80149b8 <__cleanup_context+0x28>
 8014a50:	f7ff ff7a 	bl	8014948 <rcl_convert_rmw_ret_to_rcl_ret>
 8014a54:	4607      	mov	r7, r0
 8014a56:	e7b8      	b.n	80149ca <__cleanup_context+0x3a>

08014a58 <rcl_expand_topic_name>:
 8014a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a5c:	b08b      	sub	sp, #44	; 0x2c
 8014a5e:	9306      	str	r3, [sp, #24]
 8014a60:	2800      	cmp	r0, #0
 8014a62:	f000 80d2 	beq.w	8014c0a <rcl_expand_topic_name+0x1b2>
 8014a66:	460e      	mov	r6, r1
 8014a68:	2900      	cmp	r1, #0
 8014a6a:	f000 80ce 	beq.w	8014c0a <rcl_expand_topic_name+0x1b2>
 8014a6e:	4617      	mov	r7, r2
 8014a70:	2a00      	cmp	r2, #0
 8014a72:	f000 80ca 	beq.w	8014c0a <rcl_expand_topic_name+0x1b2>
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	f000 80c7 	beq.w	8014c0a <rcl_expand_topic_name+0x1b2>
 8014a7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	f000 80c3 	beq.w	8014c0a <rcl_expand_topic_name+0x1b2>
 8014a84:	a909      	add	r1, sp, #36	; 0x24
 8014a86:	2200      	movs	r2, #0
 8014a88:	4680      	mov	r8, r0
 8014a8a:	f001 f899 	bl	8015bc0 <rcl_validate_topic_name>
 8014a8e:	4604      	mov	r4, r0
 8014a90:	2800      	cmp	r0, #0
 8014a92:	f040 80b6 	bne.w	8014c02 <rcl_expand_topic_name+0x1aa>
 8014a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	f040 80bf 	bne.w	8014c1c <rcl_expand_topic_name+0x1c4>
 8014a9e:	4602      	mov	r2, r0
 8014aa0:	a909      	add	r1, sp, #36	; 0x24
 8014aa2:	4630      	mov	r0, r6
 8014aa4:	f002 fa0e 	bl	8016ec4 <rmw_validate_node_name>
 8014aa8:	2800      	cmp	r0, #0
 8014aaa:	f040 80b3 	bne.w	8014c14 <rcl_expand_topic_name+0x1bc>
 8014aae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014ab0:	2a00      	cmp	r2, #0
 8014ab2:	f040 80b8 	bne.w	8014c26 <rcl_expand_topic_name+0x1ce>
 8014ab6:	a909      	add	r1, sp, #36	; 0x24
 8014ab8:	4638      	mov	r0, r7
 8014aba:	f002 f9e5 	bl	8016e88 <rmw_validate_namespace>
 8014abe:	2800      	cmp	r0, #0
 8014ac0:	f040 80a8 	bne.w	8014c14 <rcl_expand_topic_name+0x1bc>
 8014ac4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014ac6:	2c00      	cmp	r4, #0
 8014ac8:	f040 80f6 	bne.w	8014cb8 <rcl_expand_topic_name+0x260>
 8014acc:	217b      	movs	r1, #123	; 0x7b
 8014ace:	4640      	mov	r0, r8
 8014ad0:	f005 fce2 	bl	801a498 <strchr>
 8014ad4:	f898 3000 	ldrb.w	r3, [r8]
 8014ad8:	2b2f      	cmp	r3, #47	; 0x2f
 8014ada:	4605      	mov	r5, r0
 8014adc:	f000 80c4 	beq.w	8014c68 <rcl_expand_topic_name+0x210>
 8014ae0:	2b7e      	cmp	r3, #126	; 0x7e
 8014ae2:	d16f      	bne.n	8014bc4 <rcl_expand_topic_name+0x16c>
 8014ae4:	4638      	mov	r0, r7
 8014ae6:	f7eb fb85 	bl	80001f4 <strlen>
 8014aea:	4b87      	ldr	r3, [pc, #540]	; (8014d08 <rcl_expand_topic_name+0x2b0>)
 8014aec:	4987      	ldr	r1, [pc, #540]	; (8014d0c <rcl_expand_topic_name+0x2b4>)
 8014aee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014af0:	9604      	str	r6, [sp, #16]
 8014af2:	2801      	cmp	r0, #1
 8014af4:	bf0c      	ite	eq
 8014af6:	4618      	moveq	r0, r3
 8014af8:	4608      	movne	r0, r1
 8014afa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014afe:	e9cd 2300 	strd	r2, r3, [sp]
 8014b02:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8014b06:	f108 0101 	add.w	r1, r8, #1
 8014b0a:	9105      	str	r1, [sp, #20]
 8014b0c:	ab14      	add	r3, sp, #80	; 0x50
 8014b0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014b10:	f001 ffe8 	bl	8016ae4 <rcutils_format_string_limit>
 8014b14:	4682      	mov	sl, r0
 8014b16:	2800      	cmp	r0, #0
 8014b18:	f000 80d0 	beq.w	8014cbc <rcl_expand_topic_name+0x264>
 8014b1c:	2d00      	cmp	r5, #0
 8014b1e:	f000 80aa 	beq.w	8014c76 <rcl_expand_topic_name+0x21e>
 8014b22:	217b      	movs	r1, #123	; 0x7b
 8014b24:	f005 fcb8 	bl	801a498 <strchr>
 8014b28:	46d1      	mov	r9, sl
 8014b2a:	4605      	mov	r5, r0
 8014b2c:	9407      	str	r4, [sp, #28]
 8014b2e:	46d3      	mov	fp, sl
 8014b30:	464c      	mov	r4, r9
 8014b32:	2d00      	cmp	r5, #0
 8014b34:	f000 80c7 	beq.w	8014cc6 <rcl_expand_topic_name+0x26e>
 8014b38:	217d      	movs	r1, #125	; 0x7d
 8014b3a:	4620      	mov	r0, r4
 8014b3c:	f005 fcac 	bl	801a498 <strchr>
 8014b40:	eba0 0905 	sub.w	r9, r0, r5
 8014b44:	f109 0a01 	add.w	sl, r9, #1
 8014b48:	4871      	ldr	r0, [pc, #452]	; (8014d10 <rcl_expand_topic_name+0x2b8>)
 8014b4a:	4652      	mov	r2, sl
 8014b4c:	4629      	mov	r1, r5
 8014b4e:	f005 fcb0 	bl	801a4b2 <strncmp>
 8014b52:	2800      	cmp	r0, #0
 8014b54:	f000 808d 	beq.w	8014c72 <rcl_expand_topic_name+0x21a>
 8014b58:	486e      	ldr	r0, [pc, #440]	; (8014d14 <rcl_expand_topic_name+0x2bc>)
 8014b5a:	4652      	mov	r2, sl
 8014b5c:	4629      	mov	r1, r5
 8014b5e:	f005 fca8 	bl	801a4b2 <strncmp>
 8014b62:	b130      	cbz	r0, 8014b72 <rcl_expand_topic_name+0x11a>
 8014b64:	486c      	ldr	r0, [pc, #432]	; (8014d18 <rcl_expand_topic_name+0x2c0>)
 8014b66:	4652      	mov	r2, sl
 8014b68:	4629      	mov	r1, r5
 8014b6a:	f005 fca2 	bl	801a4b2 <strncmp>
 8014b6e:	2800      	cmp	r0, #0
 8014b70:	d15b      	bne.n	8014c2a <rcl_expand_topic_name+0x1d2>
 8014b72:	46b9      	mov	r9, r7
 8014b74:	ab16      	add	r3, sp, #88	; 0x58
 8014b76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014b7a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014b7e:	ab14      	add	r3, sp, #80	; 0x50
 8014b80:	4628      	mov	r0, r5
 8014b82:	cb0c      	ldmia	r3, {r2, r3}
 8014b84:	4651      	mov	r1, sl
 8014b86:	f002 f8f9 	bl	8016d7c <rcutils_strndup>
 8014b8a:	4605      	mov	r5, r0
 8014b8c:	2800      	cmp	r0, #0
 8014b8e:	f000 80a4 	beq.w	8014cda <rcl_expand_topic_name+0x282>
 8014b92:	464a      	mov	r2, r9
 8014b94:	4620      	mov	r0, r4
 8014b96:	ab14      	add	r3, sp, #80	; 0x50
 8014b98:	4629      	mov	r1, r5
 8014b9a:	f001 fff5 	bl	8016b88 <rcutils_repl_str>
 8014b9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014ba0:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014ba2:	4604      	mov	r4, r0
 8014ba4:	4628      	mov	r0, r5
 8014ba6:	4798      	blx	r3
 8014ba8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014baa:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014bac:	4658      	mov	r0, fp
 8014bae:	4798      	blx	r3
 8014bb0:	2c00      	cmp	r4, #0
 8014bb2:	f000 8083 	beq.w	8014cbc <rcl_expand_topic_name+0x264>
 8014bb6:	217b      	movs	r1, #123	; 0x7b
 8014bb8:	4620      	mov	r0, r4
 8014bba:	f005 fc6d 	bl	801a498 <strchr>
 8014bbe:	46a3      	mov	fp, r4
 8014bc0:	4605      	mov	r5, r0
 8014bc2:	e7b6      	b.n	8014b32 <rcl_expand_topic_name+0xda>
 8014bc4:	2800      	cmp	r0, #0
 8014bc6:	d151      	bne.n	8014c6c <rcl_expand_topic_name+0x214>
 8014bc8:	4638      	mov	r0, r7
 8014bca:	f7eb fb13 	bl	80001f4 <strlen>
 8014bce:	4b53      	ldr	r3, [pc, #332]	; (8014d1c <rcl_expand_topic_name+0x2c4>)
 8014bd0:	4a53      	ldr	r2, [pc, #332]	; (8014d20 <rcl_expand_topic_name+0x2c8>)
 8014bd2:	f8cd 8010 	str.w	r8, [sp, #16]
 8014bd6:	2801      	cmp	r0, #1
 8014bd8:	bf0c      	ite	eq
 8014bda:	4618      	moveq	r0, r3
 8014bdc:	4610      	movne	r0, r2
 8014bde:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014be0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014be4:	e9cd 3200 	strd	r3, r2, [sp]
 8014be8:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8014bec:	ab14      	add	r3, sp, #80	; 0x50
 8014bee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014bf0:	f001 ff78 	bl	8016ae4 <rcutils_format_string_limit>
 8014bf4:	4682      	mov	sl, r0
 8014bf6:	4653      	mov	r3, sl
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d05f      	beq.n	8014cbc <rcl_expand_topic_name+0x264>
 8014bfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014bfe:	f8c3 a000 	str.w	sl, [r3]
 8014c02:	4620      	mov	r0, r4
 8014c04:	b00b      	add	sp, #44	; 0x2c
 8014c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c0a:	240b      	movs	r4, #11
 8014c0c:	4620      	mov	r0, r4
 8014c0e:	b00b      	add	sp, #44	; 0x2c
 8014c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c14:	f7ff fe98 	bl	8014948 <rcl_convert_rmw_ret_to_rcl_ret>
 8014c18:	4604      	mov	r4, r0
 8014c1a:	e7f2      	b.n	8014c02 <rcl_expand_topic_name+0x1aa>
 8014c1c:	2467      	movs	r4, #103	; 0x67
 8014c1e:	4620      	mov	r0, r4
 8014c20:	b00b      	add	sp, #44	; 0x2c
 8014c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c26:	24c9      	movs	r4, #201	; 0xc9
 8014c28:	e7eb      	b.n	8014c02 <rcl_expand_topic_name+0x1aa>
 8014c2a:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8014c2e:	9806      	ldr	r0, [sp, #24]
 8014c30:	1c69      	adds	r1, r5, #1
 8014c32:	f7fa fe95 	bl	800f960 <rcutils_string_map_getn>
 8014c36:	4681      	mov	r9, r0
 8014c38:	2800      	cmp	r0, #0
 8014c3a:	d19b      	bne.n	8014b74 <rcl_expand_topic_name+0x11c>
 8014c3c:	aa16      	add	r2, sp, #88	; 0x58
 8014c3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8014c40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014c42:	f8c3 9000 	str.w	r9, [r3]
 8014c46:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014c4a:	ab14      	add	r3, sp, #80	; 0x50
 8014c4c:	cb0c      	ldmia	r3, {r2, r3}
 8014c4e:	4651      	mov	r1, sl
 8014c50:	4628      	mov	r0, r5
 8014c52:	f002 f893 	bl	8016d7c <rcutils_strndup>
 8014c56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c58:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014c5a:	4798      	blx	r3
 8014c5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014c60:	4658      	mov	r0, fp
 8014c62:	4798      	blx	r3
 8014c64:	2469      	movs	r4, #105	; 0x69
 8014c66:	e7cc      	b.n	8014c02 <rcl_expand_topic_name+0x1aa>
 8014c68:	2800      	cmp	r0, #0
 8014c6a:	d03e      	beq.n	8014cea <rcl_expand_topic_name+0x292>
 8014c6c:	46c1      	mov	r9, r8
 8014c6e:	46a2      	mov	sl, r4
 8014c70:	e75c      	b.n	8014b2c <rcl_expand_topic_name+0xd4>
 8014c72:	46b1      	mov	r9, r6
 8014c74:	e77e      	b.n	8014b74 <rcl_expand_topic_name+0x11c>
 8014c76:	f89a 3000 	ldrb.w	r3, [sl]
 8014c7a:	2b2f      	cmp	r3, #47	; 0x2f
 8014c7c:	d0be      	beq.n	8014bfc <rcl_expand_topic_name+0x1a4>
 8014c7e:	4638      	mov	r0, r7
 8014c80:	f7eb fab8 	bl	80001f4 <strlen>
 8014c84:	4b25      	ldr	r3, [pc, #148]	; (8014d1c <rcl_expand_topic_name+0x2c4>)
 8014c86:	4926      	ldr	r1, [pc, #152]	; (8014d20 <rcl_expand_topic_name+0x2c8>)
 8014c88:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014c8a:	f8cd a010 	str.w	sl, [sp, #16]
 8014c8e:	2801      	cmp	r0, #1
 8014c90:	bf0c      	ite	eq
 8014c92:	4618      	moveq	r0, r3
 8014c94:	4608      	movne	r0, r1
 8014c96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014c9a:	e9cd 2300 	strd	r2, r3, [sp]
 8014c9e:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8014ca2:	ab14      	add	r3, sp, #80	; 0x50
 8014ca4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014ca6:	f001 ff1d 	bl	8016ae4 <rcutils_format_string_limit>
 8014caa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014cac:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014cae:	4603      	mov	r3, r0
 8014cb0:	4650      	mov	r0, sl
 8014cb2:	469a      	mov	sl, r3
 8014cb4:	4790      	blx	r2
 8014cb6:	e79e      	b.n	8014bf6 <rcl_expand_topic_name+0x19e>
 8014cb8:	24ca      	movs	r4, #202	; 0xca
 8014cba:	e7a2      	b.n	8014c02 <rcl_expand_topic_name+0x1aa>
 8014cbc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	6013      	str	r3, [r2, #0]
 8014cc2:	240a      	movs	r4, #10
 8014cc4:	e79d      	b.n	8014c02 <rcl_expand_topic_name+0x1aa>
 8014cc6:	465b      	mov	r3, fp
 8014cc8:	9c07      	ldr	r4, [sp, #28]
 8014cca:	46da      	mov	sl, fp
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d1d2      	bne.n	8014c76 <rcl_expand_topic_name+0x21e>
 8014cd0:	f898 3000 	ldrb.w	r3, [r8]
 8014cd4:	2b2f      	cmp	r3, #47	; 0x2f
 8014cd6:	d091      	beq.n	8014bfc <rcl_expand_topic_name+0x1a4>
 8014cd8:	e776      	b.n	8014bc8 <rcl_expand_topic_name+0x170>
 8014cda:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014cdc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014cde:	601d      	str	r5, [r3, #0]
 8014ce0:	4658      	mov	r0, fp
 8014ce2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014ce4:	4798      	blx	r3
 8014ce6:	240a      	movs	r4, #10
 8014ce8:	e78b      	b.n	8014c02 <rcl_expand_topic_name+0x1aa>
 8014cea:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 8014cee:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014cf2:	ab14      	add	r3, sp, #80	; 0x50
 8014cf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014cf6:	4640      	mov	r0, r8
 8014cf8:	f002 f81e 	bl	8016d38 <rcutils_strdup>
 8014cfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014cfe:	2800      	cmp	r0, #0
 8014d00:	bf08      	it	eq
 8014d02:	240a      	moveq	r4, #10
 8014d04:	6018      	str	r0, [r3, #0]
 8014d06:	e77c      	b.n	8014c02 <rcl_expand_topic_name+0x1aa>
 8014d08:	0801b9c0 	.word	0x0801b9c0
 8014d0c:	0801b9fc 	.word	0x0801b9fc
 8014d10:	0801ba0c 	.word	0x0801ba0c
 8014d14:	0801ba14 	.word	0x0801ba14
 8014d18:	0801ba1c 	.word	0x0801ba1c
 8014d1c:	0801b9d0 	.word	0x0801b9d0
 8014d20:	0801ba04 	.word	0x0801ba04

08014d24 <rcl_get_default_topic_name_substitutions>:
 8014d24:	2800      	cmp	r0, #0
 8014d26:	bf0c      	ite	eq
 8014d28:	200b      	moveq	r0, #11
 8014d2a:	2000      	movne	r0, #0
 8014d2c:	4770      	bx	lr
 8014d2e:	bf00      	nop

08014d30 <rcl_init>:
 8014d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d34:	1e07      	subs	r7, r0, #0
 8014d36:	b09f      	sub	sp, #124	; 0x7c
 8014d38:	4688      	mov	r8, r1
 8014d3a:	4692      	mov	sl, r2
 8014d3c:	4699      	mov	r9, r3
 8014d3e:	f340 8097 	ble.w	8014e70 <rcl_init+0x140>
 8014d42:	2900      	cmp	r1, #0
 8014d44:	f000 8097 	beq.w	8014e76 <rcl_init+0x146>
 8014d48:	1f0d      	subs	r5, r1, #4
 8014d4a:	2400      	movs	r4, #0
 8014d4c:	f855 6f04 	ldr.w	r6, [r5, #4]!
 8014d50:	3401      	adds	r4, #1
 8014d52:	2e00      	cmp	r6, #0
 8014d54:	f000 808f 	beq.w	8014e76 <rcl_init+0x146>
 8014d58:	42a7      	cmp	r7, r4
 8014d5a:	d1f7      	bne.n	8014d4c <rcl_init+0x1c>
 8014d5c:	f1ba 0f00 	cmp.w	sl, #0
 8014d60:	f000 8089 	beq.w	8014e76 <rcl_init+0x146>
 8014d64:	f8da 4000 	ldr.w	r4, [sl]
 8014d68:	2c00      	cmp	r4, #0
 8014d6a:	f000 8084 	beq.w	8014e76 <rcl_init+0x146>
 8014d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d70:	ad19      	add	r5, sp, #100	; 0x64
 8014d72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014d74:	6823      	ldr	r3, [r4, #0]
 8014d76:	602b      	str	r3, [r5, #0]
 8014d78:	a819      	add	r0, sp, #100	; 0x64
 8014d7a:	f7fa fcb7 	bl	800f6ec <rcutils_allocator_is_valid>
 8014d7e:	2800      	cmp	r0, #0
 8014d80:	d079      	beq.n	8014e76 <rcl_init+0x146>
 8014d82:	f1b9 0f00 	cmp.w	r9, #0
 8014d86:	d076      	beq.n	8014e76 <rcl_init+0x146>
 8014d88:	f8d9 3000 	ldr.w	r3, [r9]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d177      	bne.n	8014e80 <rcl_init+0x150>
 8014d90:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8014d94:	2178      	movs	r1, #120	; 0x78
 8014d96:	2001      	movs	r0, #1
 8014d98:	4798      	blx	r3
 8014d9a:	4604      	mov	r4, r0
 8014d9c:	f8c9 0000 	str.w	r0, [r9]
 8014da0:	2800      	cmp	r0, #0
 8014da2:	f000 80ba 	beq.w	8014f1a <rcl_init+0x1ea>
 8014da6:	a802      	add	r0, sp, #8
 8014da8:	f002 f804 	bl	8016db4 <rmw_get_zero_initialized_context>
 8014dac:	a902      	add	r1, sp, #8
 8014dae:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014db2:	2250      	movs	r2, #80	; 0x50
 8014db4:	ac19      	add	r4, sp, #100	; 0x64
 8014db6:	f005 fc86 	bl	801a6c6 <memcpy>
 8014dba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014dbc:	f8d9 5000 	ldr.w	r5, [r9]
 8014dc0:	6826      	ldr	r6, [r4, #0]
 8014dc2:	462c      	mov	r4, r5
 8014dc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014dc6:	f105 0114 	add.w	r1, r5, #20
 8014dca:	6026      	str	r6, [r4, #0]
 8014dcc:	4650      	mov	r0, sl
 8014dce:	f000 f931 	bl	8015034 <rcl_init_options_copy>
 8014dd2:	4606      	mov	r6, r0
 8014dd4:	2800      	cmp	r0, #0
 8014dd6:	d144      	bne.n	8014e62 <rcl_init+0x132>
 8014dd8:	f8d9 a000 	ldr.w	sl, [r9]
 8014ddc:	463c      	mov	r4, r7
 8014dde:	17fd      	asrs	r5, r7, #31
 8014de0:	e9ca 4506 	strd	r4, r5, [sl, #24]
 8014de4:	f8ca 0020 	str.w	r0, [sl, #32]
 8014de8:	2f00      	cmp	r7, #0
 8014dea:	d050      	beq.n	8014e8e <rcl_init+0x15e>
 8014dec:	f1b8 0f00 	cmp.w	r8, #0
 8014df0:	d04d      	beq.n	8014e8e <rcl_init+0x15e>
 8014df2:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8014df6:	4638      	mov	r0, r7
 8014df8:	2104      	movs	r1, #4
 8014dfa:	4798      	blx	r3
 8014dfc:	f8ca 0020 	str.w	r0, [sl, #32]
 8014e00:	f8d9 a000 	ldr.w	sl, [r9]
 8014e04:	f8da 3020 	ldr.w	r3, [sl, #32]
 8014e08:	46d3      	mov	fp, sl
 8014e0a:	b34b      	cbz	r3, 8014e60 <rcl_init+0x130>
 8014e0c:	2f01      	cmp	r7, #1
 8014e0e:	f175 0300 	sbcs.w	r3, r5, #0
 8014e12:	db3c      	blt.n	8014e8e <rcl_init+0x15e>
 8014e14:	f1a8 0804 	sub.w	r8, r8, #4
 8014e18:	2600      	movs	r6, #0
 8014e1a:	2700      	movs	r7, #0
 8014e1c:	e00c      	b.n	8014e38 <rcl_init+0x108>
 8014e1e:	f8d8 1000 	ldr.w	r1, [r8]
 8014e22:	f005 fc50 	bl	801a6c6 <memcpy>
 8014e26:	3601      	adds	r6, #1
 8014e28:	f147 0700 	adc.w	r7, r7, #0
 8014e2c:	42bd      	cmp	r5, r7
 8014e2e:	bf08      	it	eq
 8014e30:	42b4      	cmpeq	r4, r6
 8014e32:	d02a      	beq.n	8014e8a <rcl_init+0x15a>
 8014e34:	f8d9 b000 	ldr.w	fp, [r9]
 8014e38:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8014e3c:	f7eb f9da 	bl	80001f4 <strlen>
 8014e40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014e42:	991d      	ldr	r1, [sp, #116]	; 0x74
 8014e44:	f8db a020 	ldr.w	sl, [fp, #32]
 8014e48:	9001      	str	r0, [sp, #4]
 8014e4a:	4798      	blx	r3
 8014e4c:	f8d9 1000 	ldr.w	r1, [r9]
 8014e50:	9a01      	ldr	r2, [sp, #4]
 8014e52:	6a09      	ldr	r1, [r1, #32]
 8014e54:	00b3      	lsls	r3, r6, #2
 8014e56:	f84a 0003 	str.w	r0, [sl, r3]
 8014e5a:	58c8      	ldr	r0, [r1, r3]
 8014e5c:	2800      	cmp	r0, #0
 8014e5e:	d1de      	bne.n	8014e1e <rcl_init+0xee>
 8014e60:	260a      	movs	r6, #10
 8014e62:	4648      	mov	r0, r9
 8014e64:	f7ff fd94 	bl	8014990 <__cleanup_context>
 8014e68:	4630      	mov	r0, r6
 8014e6a:	b01f      	add	sp, #124	; 0x7c
 8014e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e70:	2900      	cmp	r1, #0
 8014e72:	f43f af73 	beq.w	8014d5c <rcl_init+0x2c>
 8014e76:	260b      	movs	r6, #11
 8014e78:	4630      	mov	r0, r6
 8014e7a:	b01f      	add	sp, #124	; 0x7c
 8014e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e80:	2664      	movs	r6, #100	; 0x64
 8014e82:	4630      	mov	r0, r6
 8014e84:	b01f      	add	sp, #124	; 0x7c
 8014e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e8a:	f8d9 a000 	ldr.w	sl, [r9]
 8014e8e:	4a2c      	ldr	r2, [pc, #176]	; (8014f40 <rcl_init+0x210>)
 8014e90:	6813      	ldr	r3, [r2, #0]
 8014e92:	3301      	adds	r3, #1
 8014e94:	d03b      	beq.n	8014f0e <rcl_init+0x1de>
 8014e96:	6013      	str	r3, [r2, #0]
 8014e98:	4619      	mov	r1, r3
 8014e9a:	2000      	movs	r0, #0
 8014e9c:	f8da 4014 	ldr.w	r4, [sl, #20]
 8014ea0:	f8c9 3004 	str.w	r3, [r9, #4]
 8014ea4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014ea6:	3301      	adds	r3, #1
 8014ea8:	e9c4 1006 	strd	r1, r0, [r4, #24]
 8014eac:	d039      	beq.n	8014f22 <rcl_init+0x1f2>
 8014eae:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8014eb2:	b94b      	cbnz	r3, 8014ec8 <rcl_init+0x198>
 8014eb4:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8014eb8:	f000 f962 	bl	8015180 <rcl_get_localhost_only>
 8014ebc:	4606      	mov	r6, r0
 8014ebe:	2800      	cmp	r0, #0
 8014ec0:	d1cf      	bne.n	8014e62 <rcl_init+0x132>
 8014ec2:	f8d9 3000 	ldr.w	r3, [r9]
 8014ec6:	695c      	ldr	r4, [r3, #20]
 8014ec8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014eca:	aa18      	add	r2, sp, #96	; 0x60
 8014ecc:	a917      	add	r1, sp, #92	; 0x5c
 8014ece:	f000 fe65 	bl	8015b9c <rcl_validate_enclave_name>
 8014ed2:	4606      	mov	r6, r0
 8014ed4:	2800      	cmp	r0, #0
 8014ed6:	d1c4      	bne.n	8014e62 <rcl_init+0x132>
 8014ed8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014eda:	bb03      	cbnz	r3, 8014f1e <rcl_init+0x1ee>
 8014edc:	f8d9 1000 	ldr.w	r1, [r9]
 8014ee0:	694b      	ldr	r3, [r1, #20]
 8014ee2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8014ee4:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8014ee8:	f000 fbb8 	bl	801565c <rcl_get_security_options_from_environment>
 8014eec:	4606      	mov	r6, r0
 8014eee:	2800      	cmp	r0, #0
 8014ef0:	d1b7      	bne.n	8014e62 <rcl_init+0x132>
 8014ef2:	f8d9 1000 	ldr.w	r1, [r9]
 8014ef6:	6948      	ldr	r0, [r1, #20]
 8014ef8:	3128      	adds	r1, #40	; 0x28
 8014efa:	3018      	adds	r0, #24
 8014efc:	f002 f988 	bl	8017210 <rmw_init>
 8014f00:	4606      	mov	r6, r0
 8014f02:	2800      	cmp	r0, #0
 8014f04:	d0b8      	beq.n	8014e78 <rcl_init+0x148>
 8014f06:	f7ff fd1f 	bl	8014948 <rcl_convert_rmw_ret_to_rcl_ret>
 8014f0a:	4606      	mov	r6, r0
 8014f0c:	e7a9      	b.n	8014e62 <rcl_init+0x132>
 8014f0e:	2401      	movs	r4, #1
 8014f10:	4618      	mov	r0, r3
 8014f12:	4621      	mov	r1, r4
 8014f14:	6014      	str	r4, [r2, #0]
 8014f16:	4623      	mov	r3, r4
 8014f18:	e7c0      	b.n	8014e9c <rcl_init+0x16c>
 8014f1a:	260a      	movs	r6, #10
 8014f1c:	e7ac      	b.n	8014e78 <rcl_init+0x148>
 8014f1e:	2601      	movs	r6, #1
 8014f20:	e79f      	b.n	8014e62 <rcl_init+0x132>
 8014f22:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8014f26:	f004 fba3 	bl	8019670 <rcl_get_default_domain_id>
 8014f2a:	4606      	mov	r6, r0
 8014f2c:	2800      	cmp	r0, #0
 8014f2e:	d198      	bne.n	8014e62 <rcl_init+0x132>
 8014f30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014f32:	3301      	adds	r3, #1
 8014f34:	f8d9 3000 	ldr.w	r3, [r9]
 8014f38:	bf08      	it	eq
 8014f3a:	6260      	streq	r0, [r4, #36]	; 0x24
 8014f3c:	695c      	ldr	r4, [r3, #20]
 8014f3e:	e7b6      	b.n	8014eae <rcl_init+0x17e>
 8014f40:	20009c50 	.word	0x20009c50

08014f44 <rcl_get_zero_initialized_init_options>:
 8014f44:	2000      	movs	r0, #0
 8014f46:	4770      	bx	lr

08014f48 <rcl_init_options_init>:
 8014f48:	b084      	sub	sp, #16
 8014f4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f4c:	b091      	sub	sp, #68	; 0x44
 8014f4e:	af17      	add	r7, sp, #92	; 0x5c
 8014f50:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 8014f54:	2800      	cmp	r0, #0
 8014f56:	d044      	beq.n	8014fe2 <rcl_init_options_init+0x9a>
 8014f58:	6803      	ldr	r3, [r0, #0]
 8014f5a:	4606      	mov	r6, r0
 8014f5c:	b133      	cbz	r3, 8014f6c <rcl_init_options_init+0x24>
 8014f5e:	2464      	movs	r4, #100	; 0x64
 8014f60:	4620      	mov	r0, r4
 8014f62:	b011      	add	sp, #68	; 0x44
 8014f64:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014f68:	b004      	add	sp, #16
 8014f6a:	4770      	bx	lr
 8014f6c:	4638      	mov	r0, r7
 8014f6e:	f7fa fbbd 	bl	800f6ec <rcutils_allocator_is_valid>
 8014f72:	2800      	cmp	r0, #0
 8014f74:	d035      	beq.n	8014fe2 <rcl_init_options_init+0x9a>
 8014f76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014f78:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014f7a:	2050      	movs	r0, #80	; 0x50
 8014f7c:	4798      	blx	r3
 8014f7e:	4604      	mov	r4, r0
 8014f80:	6030      	str	r0, [r6, #0]
 8014f82:	2800      	cmp	r0, #0
 8014f84:	d02f      	beq.n	8014fe6 <rcl_init_options_init+0x9e>
 8014f86:	46bc      	mov	ip, r7
 8014f88:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014f8c:	4625      	mov	r5, r4
 8014f8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014f90:	f8dc 3000 	ldr.w	r3, [ip]
 8014f94:	602b      	str	r3, [r5, #0]
 8014f96:	a802      	add	r0, sp, #8
 8014f98:	ad02      	add	r5, sp, #8
 8014f9a:	f001 ff13 	bl	8016dc4 <rmw_get_zero_initialized_init_options>
 8014f9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014fa0:	3418      	adds	r4, #24
 8014fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014fa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014fac:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014fb0:	6833      	ldr	r3, [r6, #0]
 8014fb2:	e884 0003 	stmia.w	r4, {r0, r1}
 8014fb6:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8014fba:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014fbe:	f103 0018 	add.w	r0, r3, #24
 8014fc2:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8014fc6:	f002 f849 	bl	801705c <rmw_init_options_init>
 8014fca:	4604      	mov	r4, r0
 8014fcc:	2800      	cmp	r0, #0
 8014fce:	d0c7      	beq.n	8014f60 <rcl_init_options_init+0x18>
 8014fd0:	6830      	ldr	r0, [r6, #0]
 8014fd2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014fd4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014fd6:	4798      	blx	r3
 8014fd8:	4620      	mov	r0, r4
 8014fda:	f7ff fcb5 	bl	8014948 <rcl_convert_rmw_ret_to_rcl_ret>
 8014fde:	4604      	mov	r4, r0
 8014fe0:	e7be      	b.n	8014f60 <rcl_init_options_init+0x18>
 8014fe2:	240b      	movs	r4, #11
 8014fe4:	e7bc      	b.n	8014f60 <rcl_init_options_init+0x18>
 8014fe6:	240a      	movs	r4, #10
 8014fe8:	e7ba      	b.n	8014f60 <rcl_init_options_init+0x18>
 8014fea:	bf00      	nop

08014fec <rcl_init_options_fini>:
 8014fec:	b570      	push	{r4, r5, r6, lr}
 8014fee:	b086      	sub	sp, #24
 8014ff0:	b1c0      	cbz	r0, 8015024 <rcl_init_options_fini+0x38>
 8014ff2:	6804      	ldr	r4, [r0, #0]
 8014ff4:	4606      	mov	r6, r0
 8014ff6:	b1ac      	cbz	r4, 8015024 <rcl_init_options_fini+0x38>
 8014ff8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014ffa:	ad01      	add	r5, sp, #4
 8014ffc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014ffe:	6823      	ldr	r3, [r4, #0]
 8015000:	602b      	str	r3, [r5, #0]
 8015002:	a801      	add	r0, sp, #4
 8015004:	f7fa fb72 	bl	800f6ec <rcutils_allocator_is_valid>
 8015008:	b160      	cbz	r0, 8015024 <rcl_init_options_fini+0x38>
 801500a:	6830      	ldr	r0, [r6, #0]
 801500c:	3018      	adds	r0, #24
 801500e:	f002 f8bf 	bl	8017190 <rmw_init_options_fini>
 8015012:	4604      	mov	r4, r0
 8015014:	b950      	cbnz	r0, 801502c <rcl_init_options_fini+0x40>
 8015016:	6830      	ldr	r0, [r6, #0]
 8015018:	9b02      	ldr	r3, [sp, #8]
 801501a:	9905      	ldr	r1, [sp, #20]
 801501c:	4798      	blx	r3
 801501e:	4620      	mov	r0, r4
 8015020:	b006      	add	sp, #24
 8015022:	bd70      	pop	{r4, r5, r6, pc}
 8015024:	240b      	movs	r4, #11
 8015026:	4620      	mov	r0, r4
 8015028:	b006      	add	sp, #24
 801502a:	bd70      	pop	{r4, r5, r6, pc}
 801502c:	f7ff fc8c 	bl	8014948 <rcl_convert_rmw_ret_to_rcl_ret>
 8015030:	4604      	mov	r4, r0
 8015032:	e7f8      	b.n	8015026 <rcl_init_options_fini+0x3a>

08015034 <rcl_init_options_copy>:
 8015034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015038:	b096      	sub	sp, #88	; 0x58
 801503a:	2800      	cmp	r0, #0
 801503c:	d063      	beq.n	8015106 <rcl_init_options_copy+0xd2>
 801503e:	6806      	ldr	r6, [r0, #0]
 8015040:	4605      	mov	r5, r0
 8015042:	2e00      	cmp	r6, #0
 8015044:	d05f      	beq.n	8015106 <rcl_init_options_copy+0xd2>
 8015046:	460c      	mov	r4, r1
 8015048:	2900      	cmp	r1, #0
 801504a:	d05c      	beq.n	8015106 <rcl_init_options_copy+0xd2>
 801504c:	680b      	ldr	r3, [r1, #0]
 801504e:	b123      	cbz	r3, 801505a <rcl_init_options_copy+0x26>
 8015050:	2664      	movs	r6, #100	; 0x64
 8015052:	4630      	mov	r0, r6
 8015054:	b016      	add	sp, #88	; 0x58
 8015056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801505a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801505c:	af11      	add	r7, sp, #68	; 0x44
 801505e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015060:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 8015064:	6833      	ldr	r3, [r6, #0]
 8015066:	603b      	str	r3, [r7, #0]
 8015068:	4640      	mov	r0, r8
 801506a:	f7fa fb3f 	bl	800f6ec <rcutils_allocator_is_valid>
 801506e:	2800      	cmp	r0, #0
 8015070:	d049      	beq.n	8015106 <rcl_init_options_copy+0xd2>
 8015072:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015074:	9915      	ldr	r1, [sp, #84]	; 0x54
 8015076:	2050      	movs	r0, #80	; 0x50
 8015078:	4798      	blx	r3
 801507a:	4606      	mov	r6, r0
 801507c:	6020      	str	r0, [r4, #0]
 801507e:	2800      	cmp	r0, #0
 8015080:	d077      	beq.n	8015172 <rcl_init_options_copy+0x13e>
 8015082:	46c4      	mov	ip, r8
 8015084:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015088:	4637      	mov	r7, r6
 801508a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801508c:	f8dc 3000 	ldr.w	r3, [ip]
 8015090:	603b      	str	r3, [r7, #0]
 8015092:	a802      	add	r0, sp, #8
 8015094:	af02      	add	r7, sp, #8
 8015096:	f001 fe95 	bl	8016dc4 <rmw_get_zero_initialized_init_options>
 801509a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801509c:	3618      	adds	r6, #24
 801509e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80150a0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80150a2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80150a4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80150a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80150a8:	e897 0003 	ldmia.w	r7, {r0, r1}
 80150ac:	ab16      	add	r3, sp, #88	; 0x58
 80150ae:	e886 0003 	stmia.w	r6, {r0, r1}
 80150b2:	e913 0003 	ldmdb	r3, {r0, r1}
 80150b6:	6823      	ldr	r3, [r4, #0]
 80150b8:	e88d 0003 	stmia.w	sp, {r0, r1}
 80150bc:	f103 0018 	add.w	r0, r3, #24
 80150c0:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80150c4:	f001 ffca 	bl	801705c <rmw_init_options_init>
 80150c8:	4606      	mov	r6, r0
 80150ca:	bb08      	cbnz	r0, 8015110 <rcl_init_options_copy+0xdc>
 80150cc:	682f      	ldr	r7, [r5, #0]
 80150ce:	f8d4 c000 	ldr.w	ip, [r4]
 80150d2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80150d4:	4666      	mov	r6, ip
 80150d6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80150d8:	683b      	ldr	r3, [r7, #0]
 80150da:	6033      	str	r3, [r6, #0]
 80150dc:	f10c 0018 	add.w	r0, ip, #24
 80150e0:	f002 f856 	bl	8017190 <rmw_init_options_fini>
 80150e4:	4607      	mov	r7, r0
 80150e6:	b1f0      	cbz	r0, 8015126 <rcl_init_options_copy+0xf2>
 80150e8:	f7fa fb0e 	bl	800f708 <rcutils_get_error_string>
 80150ec:	f7fa fb22 	bl	800f734 <rcutils_reset_error>
 80150f0:	4620      	mov	r0, r4
 80150f2:	f7ff ff7b 	bl	8014fec <rcl_init_options_fini>
 80150f6:	4606      	mov	r6, r0
 80150f8:	2800      	cmp	r0, #0
 80150fa:	d1aa      	bne.n	8015052 <rcl_init_options_copy+0x1e>
 80150fc:	4638      	mov	r0, r7
 80150fe:	f7ff fc23 	bl	8014948 <rcl_convert_rmw_ret_to_rcl_ret>
 8015102:	4606      	mov	r6, r0
 8015104:	e7a5      	b.n	8015052 <rcl_init_options_copy+0x1e>
 8015106:	260b      	movs	r6, #11
 8015108:	4630      	mov	r0, r6
 801510a:	b016      	add	sp, #88	; 0x58
 801510c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015110:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015112:	9915      	ldr	r1, [sp, #84]	; 0x54
 8015114:	6820      	ldr	r0, [r4, #0]
 8015116:	4798      	blx	r3
 8015118:	4630      	mov	r0, r6
 801511a:	f7ff fc15 	bl	8014948 <rcl_convert_rmw_ret_to_rcl_ret>
 801511e:	4606      	mov	r6, r0
 8015120:	2800      	cmp	r0, #0
 8015122:	d0d3      	beq.n	80150cc <rcl_init_options_copy+0x98>
 8015124:	e795      	b.n	8015052 <rcl_init_options_copy+0x1e>
 8015126:	a802      	add	r0, sp, #8
 8015128:	ae02      	add	r6, sp, #8
 801512a:	6827      	ldr	r7, [r4, #0]
 801512c:	f001 fe4a 	bl	8016dc4 <rmw_get_zero_initialized_init_options>
 8015130:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015132:	3718      	adds	r7, #24
 8015134:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015136:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015138:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801513a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801513c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801513e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8015142:	682a      	ldr	r2, [r5, #0]
 8015144:	6823      	ldr	r3, [r4, #0]
 8015146:	e887 0003 	stmia.w	r7, {r0, r1}
 801514a:	f102 0018 	add.w	r0, r2, #24
 801514e:	f103 0118 	add.w	r1, r3, #24
 8015152:	f001 ffdb 	bl	801710c <rmw_init_options_copy>
 8015156:	4606      	mov	r6, r0
 8015158:	2800      	cmp	r0, #0
 801515a:	f43f af7a 	beq.w	8015052 <rcl_init_options_copy+0x1e>
 801515e:	f7fa fad3 	bl	800f708 <rcutils_get_error_string>
 8015162:	f7fa fae7 	bl	800f734 <rcutils_reset_error>
 8015166:	4620      	mov	r0, r4
 8015168:	f7ff ff40 	bl	8014fec <rcl_init_options_fini>
 801516c:	b118      	cbz	r0, 8015176 <rcl_init_options_copy+0x142>
 801516e:	4606      	mov	r6, r0
 8015170:	e76f      	b.n	8015052 <rcl_init_options_copy+0x1e>
 8015172:	260a      	movs	r6, #10
 8015174:	e76d      	b.n	8015052 <rcl_init_options_copy+0x1e>
 8015176:	4630      	mov	r0, r6
 8015178:	f7ff fbe6 	bl	8014948 <rcl_convert_rmw_ret_to_rcl_ret>
 801517c:	4606      	mov	r6, r0
 801517e:	e768      	b.n	8015052 <rcl_init_options_copy+0x1e>

08015180 <rcl_get_localhost_only>:
 8015180:	b510      	push	{r4, lr}
 8015182:	b082      	sub	sp, #8
 8015184:	2300      	movs	r3, #0
 8015186:	9301      	str	r3, [sp, #4]
 8015188:	b1b8      	cbz	r0, 80151ba <rcl_get_localhost_only+0x3a>
 801518a:	4604      	mov	r4, r0
 801518c:	a901      	add	r1, sp, #4
 801518e:	480c      	ldr	r0, [pc, #48]	; (80151c0 <rcl_get_localhost_only+0x40>)
 8015190:	f001 fce2 	bl	8016b58 <rcutils_get_env>
 8015194:	b110      	cbz	r0, 801519c <rcl_get_localhost_only+0x1c>
 8015196:	2001      	movs	r0, #1
 8015198:	b002      	add	sp, #8
 801519a:	bd10      	pop	{r4, pc}
 801519c:	9b01      	ldr	r3, [sp, #4]
 801519e:	b113      	cbz	r3, 80151a6 <rcl_get_localhost_only+0x26>
 80151a0:	781a      	ldrb	r2, [r3, #0]
 80151a2:	2a31      	cmp	r2, #49	; 0x31
 80151a4:	d004      	beq.n	80151b0 <rcl_get_localhost_only+0x30>
 80151a6:	2302      	movs	r3, #2
 80151a8:	2000      	movs	r0, #0
 80151aa:	7023      	strb	r3, [r4, #0]
 80151ac:	b002      	add	sp, #8
 80151ae:	bd10      	pop	{r4, pc}
 80151b0:	785b      	ldrb	r3, [r3, #1]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d1f7      	bne.n	80151a6 <rcl_get_localhost_only+0x26>
 80151b6:	2301      	movs	r3, #1
 80151b8:	e7f6      	b.n	80151a8 <rcl_get_localhost_only+0x28>
 80151ba:	200b      	movs	r0, #11
 80151bc:	b002      	add	sp, #8
 80151be:	bd10      	pop	{r4, pc}
 80151c0:	0801ba28 	.word	0x0801ba28

080151c4 <rcl_get_zero_initialized_node>:
 80151c4:	4a03      	ldr	r2, [pc, #12]	; (80151d4 <rcl_get_zero_initialized_node+0x10>)
 80151c6:	4603      	mov	r3, r0
 80151c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80151cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80151d0:	4618      	mov	r0, r3
 80151d2:	4770      	bx	lr
 80151d4:	0801ba48 	.word	0x0801ba48

080151d8 <rcl_node_init>:
 80151d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151dc:	b09b      	sub	sp, #108	; 0x6c
 80151de:	4604      	mov	r4, r0
 80151e0:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 80151e4:	f04f 0c00 	mov.w	ip, #0
 80151e8:	a815      	add	r0, sp, #84	; 0x54
 80151ea:	460e      	mov	r6, r1
 80151ec:	4615      	mov	r5, r2
 80151ee:	461f      	mov	r7, r3
 80151f0:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 80151f4:	f004 faf8 	bl	80197e8 <rcl_guard_condition_get_default_options>
 80151f8:	f1b8 0f00 	cmp.w	r8, #0
 80151fc:	f000 80fd 	beq.w	80153fa <rcl_node_init+0x222>
 8015200:	f108 0b04 	add.w	fp, r8, #4
 8015204:	4658      	mov	r0, fp
 8015206:	f7fa fa71 	bl	800f6ec <rcutils_allocator_is_valid>
 801520a:	2800      	cmp	r0, #0
 801520c:	f000 80f5 	beq.w	80153fa <rcl_node_init+0x222>
 8015210:	2e00      	cmp	r6, #0
 8015212:	f000 80f2 	beq.w	80153fa <rcl_node_init+0x222>
 8015216:	2d00      	cmp	r5, #0
 8015218:	f000 80ef 	beq.w	80153fa <rcl_node_init+0x222>
 801521c:	2c00      	cmp	r4, #0
 801521e:	f000 80ec 	beq.w	80153fa <rcl_node_init+0x222>
 8015222:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015226:	f1b9 0f00 	cmp.w	r9, #0
 801522a:	f040 8112 	bne.w	8015452 <rcl_node_init+0x27a>
 801522e:	2f00      	cmp	r7, #0
 8015230:	f000 80e3 	beq.w	80153fa <rcl_node_init+0x222>
 8015234:	4638      	mov	r0, r7
 8015236:	f7ff fba5 	bl	8014984 <rcl_context_is_valid>
 801523a:	4682      	mov	sl, r0
 801523c:	2800      	cmp	r0, #0
 801523e:	f000 80e2 	beq.w	8015406 <rcl_node_init+0x22e>
 8015242:	464a      	mov	r2, r9
 8015244:	a914      	add	r1, sp, #80	; 0x50
 8015246:	4630      	mov	r0, r6
 8015248:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 801524c:	f001 fe3a 	bl	8016ec4 <rmw_validate_node_name>
 8015250:	4681      	mov	r9, r0
 8015252:	2800      	cmp	r0, #0
 8015254:	f040 80d3 	bne.w	80153fe <rcl_node_init+0x226>
 8015258:	9814      	ldr	r0, [sp, #80]	; 0x50
 801525a:	2800      	cmp	r0, #0
 801525c:	f040 8105 	bne.w	801546a <rcl_node_init+0x292>
 8015260:	4628      	mov	r0, r5
 8015262:	f7ea ffc7 	bl	80001f4 <strlen>
 8015266:	2800      	cmp	r0, #0
 8015268:	f040 80d0 	bne.w	801540c <rcl_node_init+0x234>
 801526c:	4d8e      	ldr	r5, [pc, #568]	; (80154a8 <rcl_node_init+0x2d0>)
 801526e:	a914      	add	r1, sp, #80	; 0x50
 8015270:	2200      	movs	r2, #0
 8015272:	4628      	mov	r0, r5
 8015274:	f001 fe08 	bl	8016e88 <rmw_validate_namespace>
 8015278:	4681      	mov	r9, r0
 801527a:	2800      	cmp	r0, #0
 801527c:	f040 80bf 	bne.w	80153fe <rcl_node_init+0x226>
 8015280:	4682      	mov	sl, r0
 8015282:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015284:	2b00      	cmp	r3, #0
 8015286:	f040 80f5 	bne.w	8015474 <rcl_node_init+0x29c>
 801528a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801528e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015292:	9307      	str	r3, [sp, #28]
 8015294:	2030      	movs	r0, #48	; 0x30
 8015296:	4790      	blx	r2
 8015298:	4681      	mov	r9, r0
 801529a:	6060      	str	r0, [r4, #4]
 801529c:	2800      	cmp	r0, #0
 801529e:	f000 80de 	beq.w	801545e <rcl_node_init+0x286>
 80152a2:	9b07      	ldr	r3, [sp, #28]
 80152a4:	e9c0 3308 	strd	r3, r3, [r0, #32]
 80152a8:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 80152ac:	a80a      	add	r0, sp, #40	; 0x28
 80152ae:	f7f9 faad 	bl	800e80c <rcl_node_get_default_options>
 80152b2:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80152b6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80152ba:	46cc      	mov	ip, r9
 80152bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80152c0:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80152c4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80152c8:	6861      	ldr	r1, [r4, #4]
 80152ca:	6027      	str	r7, [r4, #0]
 80152cc:	4640      	mov	r0, r8
 80152ce:	f7f9 fab9 	bl	800e844 <rcl_node_options_copy>
 80152d2:	2800      	cmp	r0, #0
 80152d4:	d167      	bne.n	80153a6 <rcl_node_init+0x1ce>
 80152d6:	4628      	mov	r0, r5
 80152d8:	f7ea ff8c 	bl	80001f4 <strlen>
 80152dc:	4428      	add	r0, r5
 80152de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80152e2:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80152e6:	2b2f      	cmp	r3, #47	; 0x2f
 80152e8:	bf08      	it	eq
 80152ea:	4970      	ldreq	r1, [pc, #448]	; (80154ac <rcl_node_init+0x2d4>)
 80152ec:	f8db 3010 	ldr.w	r3, [fp, #16]
 80152f0:	bf18      	it	ne
 80152f2:	496f      	ldrne	r1, [pc, #444]	; (80154b0 <rcl_node_init+0x2d8>)
 80152f4:	9604      	str	r6, [sp, #16]
 80152f6:	e9cd 1502 	strd	r1, r5, [sp, #8]
 80152fa:	e9cd 3200 	strd	r3, r2, [sp]
 80152fe:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8015302:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015306:	f001 fbed 	bl	8016ae4 <rcutils_format_string_limit>
 801530a:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 801530e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015312:	f8d9 3000 	ldr.w	r3, [r9]
 8015316:	9313      	str	r3, [sp, #76]	; 0x4c
 8015318:	1c59      	adds	r1, r3, #1
 801531a:	f000 80b7 	beq.w	801548c <rcl_node_init+0x2b4>
 801531e:	683a      	ldr	r2, [r7, #0]
 8015320:	f8c9 301c 	str.w	r3, [r9, #28]
 8015324:	6952      	ldr	r2, [r2, #20]
 8015326:	6821      	ldr	r1, [r4, #0]
 8015328:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 801532c:	6808      	ldr	r0, [r1, #0]
 801532e:	f1a2 0201 	sub.w	r2, r2, #1
 8015332:	fab2 f282 	clz	r2, r2
 8015336:	0952      	lsrs	r2, r2, #5
 8015338:	9200      	str	r2, [sp, #0]
 801533a:	4631      	mov	r1, r6
 801533c:	3028      	adds	r0, #40	; 0x28
 801533e:	462a      	mov	r2, r5
 8015340:	f002 f9ce 	bl	80176e0 <rmw_create_node>
 8015344:	6863      	ldr	r3, [r4, #4]
 8015346:	f8c9 0020 	str.w	r0, [r9, #32]
 801534a:	6a18      	ldr	r0, [r3, #32]
 801534c:	b368      	cbz	r0, 80153aa <rcl_node_init+0x1d2>
 801534e:	f002 fa59 	bl	8017804 <rmw_node_get_graph_guard_condition>
 8015352:	4681      	mov	r9, r0
 8015354:	b338      	cbz	r0, 80153a6 <rcl_node_init+0x1ce>
 8015356:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801535a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801535e:	6866      	ldr	r6, [r4, #4]
 8015360:	2008      	movs	r0, #8
 8015362:	4798      	blx	r3
 8015364:	6863      	ldr	r3, [r4, #4]
 8015366:	6270      	str	r0, [r6, #36]	; 0x24
 8015368:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 801536a:	b1f6      	cbz	r6, 80153aa <rcl_node_init+0x1d2>
 801536c:	a808      	add	r0, sp, #32
 801536e:	f004 f9b3 	bl	80196d8 <rcl_get_zero_initialized_guard_condition>
 8015372:	a808      	add	r0, sp, #32
 8015374:	c803      	ldmia	r0, {r0, r1}
 8015376:	e886 0003 	stmia.w	r6, {r0, r1}
 801537a:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 801537e:	ae15      	add	r6, sp, #84	; 0x54
 8015380:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015382:	f8db 3000 	ldr.w	r3, [fp]
 8015386:	6033      	str	r3, [r6, #0]
 8015388:	ab1a      	add	r3, sp, #104	; 0x68
 801538a:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801538e:	6866      	ldr	r6, [r4, #4]
 8015390:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8015392:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015396:	4649      	mov	r1, r9
 8015398:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801539a:	4630      	mov	r0, r6
 801539c:	463a      	mov	r2, r7
 801539e:	f004 f9a5 	bl	80196ec <rcl_guard_condition_init_from_rmw>
 80153a2:	4681      	mov	r9, r0
 80153a4:	b328      	cbz	r0, 80153f2 <rcl_node_init+0x21a>
 80153a6:	6863      	ldr	r3, [r4, #4]
 80153a8:	b1f3      	cbz	r3, 80153e8 <rcl_node_init+0x210>
 80153aa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80153ac:	b128      	cbz	r0, 80153ba <rcl_node_init+0x1e2>
 80153ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80153b2:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80153b6:	4798      	blx	r3
 80153b8:	6863      	ldr	r3, [r4, #4]
 80153ba:	6a18      	ldr	r0, [r3, #32]
 80153bc:	b110      	cbz	r0, 80153c4 <rcl_node_init+0x1ec>
 80153be:	f002 f9a7 	bl	8017710 <rmw_destroy_node>
 80153c2:	6863      	ldr	r3, [r4, #4]
 80153c4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80153c6:	b148      	cbz	r0, 80153dc <rcl_node_init+0x204>
 80153c8:	f004 f9e8 	bl	801979c <rcl_guard_condition_fini>
 80153cc:	6862      	ldr	r2, [r4, #4]
 80153ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80153d2:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80153d4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80153d8:	4798      	blx	r3
 80153da:	6863      	ldr	r3, [r4, #4]
 80153dc:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80153e0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80153e4:	4618      	mov	r0, r3
 80153e6:	4790      	blx	r2
 80153e8:	2300      	movs	r3, #0
 80153ea:	e9c4 3300 	strd	r3, r3, [r4]
 80153ee:	f04f 0901 	mov.w	r9, #1
 80153f2:	f1ba 0f00 	cmp.w	sl, #0
 80153f6:	d125      	bne.n	8015444 <rcl_node_init+0x26c>
 80153f8:	e001      	b.n	80153fe <rcl_node_init+0x226>
 80153fa:	f04f 090b 	mov.w	r9, #11
 80153fe:	4648      	mov	r0, r9
 8015400:	b01b      	add	sp, #108	; 0x6c
 8015402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015406:	f04f 0965 	mov.w	r9, #101	; 0x65
 801540a:	e7f8      	b.n	80153fe <rcl_node_init+0x226>
 801540c:	782b      	ldrb	r3, [r5, #0]
 801540e:	2b2f      	cmp	r3, #47	; 0x2f
 8015410:	f43f af2d 	beq.w	801526e <rcl_node_init+0x96>
 8015414:	4927      	ldr	r1, [pc, #156]	; (80154b4 <rcl_node_init+0x2dc>)
 8015416:	f8db 3010 	ldr.w	r3, [fp, #16]
 801541a:	9300      	str	r3, [sp, #0]
 801541c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015420:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8015424:	9503      	str	r5, [sp, #12]
 8015426:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 801542a:	f001 fb5b 	bl	8016ae4 <rcutils_format_string_limit>
 801542e:	4605      	mov	r5, r0
 8015430:	b348      	cbz	r0, 8015486 <rcl_node_init+0x2ae>
 8015432:	2200      	movs	r2, #0
 8015434:	a914      	add	r1, sp, #80	; 0x50
 8015436:	9214      	str	r2, [sp, #80]	; 0x50
 8015438:	f001 fd26 	bl	8016e88 <rmw_validate_namespace>
 801543c:	4681      	mov	r9, r0
 801543e:	2800      	cmp	r0, #0
 8015440:	f43f af1f 	beq.w	8015282 <rcl_node_init+0xaa>
 8015444:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015448:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801544c:	4628      	mov	r0, r5
 801544e:	4798      	blx	r3
 8015450:	e7d5      	b.n	80153fe <rcl_node_init+0x226>
 8015452:	f04f 0964 	mov.w	r9, #100	; 0x64
 8015456:	4648      	mov	r0, r9
 8015458:	b01b      	add	sp, #108	; 0x6c
 801545a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801545e:	f04f 090a 	mov.w	r9, #10
 8015462:	f1ba 0f00 	cmp.w	sl, #0
 8015466:	d1ed      	bne.n	8015444 <rcl_node_init+0x26c>
 8015468:	e7c9      	b.n	80153fe <rcl_node_init+0x226>
 801546a:	f001 fd7d 	bl	8016f68 <rmw_node_name_validation_result_string>
 801546e:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 8015472:	e7c4      	b.n	80153fe <rcl_node_init+0x226>
 8015474:	4618      	mov	r0, r3
 8015476:	f001 fd19 	bl	8016eac <rmw_namespace_validation_result_string>
 801547a:	f04f 09ca 	mov.w	r9, #202	; 0xca
 801547e:	f1ba 0f00 	cmp.w	sl, #0
 8015482:	d1df      	bne.n	8015444 <rcl_node_init+0x26c>
 8015484:	e7bb      	b.n	80153fe <rcl_node_init+0x226>
 8015486:	f04f 090a 	mov.w	r9, #10
 801548a:	e7b8      	b.n	80153fe <rcl_node_init+0x226>
 801548c:	a813      	add	r0, sp, #76	; 0x4c
 801548e:	f004 f8ef 	bl	8019670 <rcl_get_default_domain_id>
 8015492:	2800      	cmp	r0, #0
 8015494:	d187      	bne.n	80153a6 <rcl_node_init+0x1ce>
 8015496:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015498:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801549c:	1c5a      	adds	r2, r3, #1
 801549e:	bf04      	itt	eq
 80154a0:	9013      	streq	r0, [sp, #76]	; 0x4c
 80154a2:	4603      	moveq	r3, r0
 80154a4:	e73b      	b.n	801531e <rcl_node_init+0x146>
 80154a6:	bf00      	nop
 80154a8:	0801ba40 	.word	0x0801ba40
 80154ac:	0801b9d0 	.word	0x0801b9d0
 80154b0:	0801ba04 	.word	0x0801ba04
 80154b4:	0801ba44 	.word	0x0801ba44

080154b8 <rcl_node_is_valid>:
 80154b8:	b130      	cbz	r0, 80154c8 <rcl_node_is_valid+0x10>
 80154ba:	6843      	ldr	r3, [r0, #4]
 80154bc:	b123      	cbz	r3, 80154c8 <rcl_node_is_valid+0x10>
 80154be:	6a1b      	ldr	r3, [r3, #32]
 80154c0:	b113      	cbz	r3, 80154c8 <rcl_node_is_valid+0x10>
 80154c2:	6800      	ldr	r0, [r0, #0]
 80154c4:	f7ff ba5e 	b.w	8014984 <rcl_context_is_valid>
 80154c8:	2000      	movs	r0, #0
 80154ca:	4770      	bx	lr

080154cc <rcl_node_get_name>:
 80154cc:	b120      	cbz	r0, 80154d8 <rcl_node_get_name+0xc>
 80154ce:	6840      	ldr	r0, [r0, #4]
 80154d0:	b110      	cbz	r0, 80154d8 <rcl_node_get_name+0xc>
 80154d2:	6a00      	ldr	r0, [r0, #32]
 80154d4:	b100      	cbz	r0, 80154d8 <rcl_node_get_name+0xc>
 80154d6:	6880      	ldr	r0, [r0, #8]
 80154d8:	4770      	bx	lr
 80154da:	bf00      	nop

080154dc <rcl_node_get_namespace>:
 80154dc:	b120      	cbz	r0, 80154e8 <rcl_node_get_namespace+0xc>
 80154de:	6840      	ldr	r0, [r0, #4]
 80154e0:	b110      	cbz	r0, 80154e8 <rcl_node_get_namespace+0xc>
 80154e2:	6a00      	ldr	r0, [r0, #32]
 80154e4:	b100      	cbz	r0, 80154e8 <rcl_node_get_namespace+0xc>
 80154e6:	68c0      	ldr	r0, [r0, #12]
 80154e8:	4770      	bx	lr
 80154ea:	bf00      	nop

080154ec <rcl_node_get_options>:
 80154ec:	b128      	cbz	r0, 80154fa <rcl_node_get_options+0xe>
 80154ee:	6840      	ldr	r0, [r0, #4]
 80154f0:	b118      	cbz	r0, 80154fa <rcl_node_get_options+0xe>
 80154f2:	6a03      	ldr	r3, [r0, #32]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	bf08      	it	eq
 80154f8:	2000      	moveq	r0, #0
 80154fa:	4770      	bx	lr

080154fc <rcl_node_get_rmw_handle>:
 80154fc:	b110      	cbz	r0, 8015504 <rcl_node_get_rmw_handle+0x8>
 80154fe:	6840      	ldr	r0, [r0, #4]
 8015500:	b100      	cbz	r0, 8015504 <rcl_node_get_rmw_handle+0x8>
 8015502:	6a00      	ldr	r0, [r0, #32]
 8015504:	4770      	bx	lr
 8015506:	bf00      	nop

08015508 <exact_match_lookup>:
 8015508:	b5f0      	push	{r4, r5, r6, r7, lr}
 801550a:	f102 0708 	add.w	r7, r2, #8
 801550e:	460b      	mov	r3, r1
 8015510:	4614      	mov	r4, r2
 8015512:	4606      	mov	r6, r0
 8015514:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8015518:	b085      	sub	sp, #20
 801551a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801551e:	4618      	mov	r0, r3
 8015520:	4918      	ldr	r1, [pc, #96]	; (8015584 <exact_match_lookup+0x7c>)
 8015522:	e894 000c 	ldmia.w	r4, {r2, r3}
 8015526:	f001 facf 	bl	8016ac8 <rcutils_join_path>
 801552a:	7833      	ldrb	r3, [r6, #0]
 801552c:	2b2f      	cmp	r3, #47	; 0x2f
 801552e:	4605      	mov	r5, r0
 8015530:	d021      	beq.n	8015576 <exact_match_lookup+0x6e>
 8015532:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8015536:	e88d 0003 	stmia.w	sp, {r0, r1}
 801553a:	1c70      	adds	r0, r6, #1
 801553c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015540:	f001 fac8 	bl	8016ad4 <rcutils_to_native_path>
 8015544:	4606      	mov	r6, r0
 8015546:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801554a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801554e:	4631      	mov	r1, r6
 8015550:	e894 000c 	ldmia.w	r4, {r2, r3}
 8015554:	4628      	mov	r0, r5
 8015556:	f001 fab7 	bl	8016ac8 <rcutils_join_path>
 801555a:	6862      	ldr	r2, [r4, #4]
 801555c:	6921      	ldr	r1, [r4, #16]
 801555e:	4603      	mov	r3, r0
 8015560:	4630      	mov	r0, r6
 8015562:	461e      	mov	r6, r3
 8015564:	4790      	blx	r2
 8015566:	4628      	mov	r0, r5
 8015568:	6863      	ldr	r3, [r4, #4]
 801556a:	6921      	ldr	r1, [r4, #16]
 801556c:	4798      	blx	r3
 801556e:	4635      	mov	r5, r6
 8015570:	4628      	mov	r0, r5
 8015572:	b005      	add	sp, #20
 8015574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015576:	7873      	ldrb	r3, [r6, #1]
 8015578:	2b00      	cmp	r3, #0
 801557a:	d1da      	bne.n	8015532 <exact_match_lookup+0x2a>
 801557c:	4628      	mov	r0, r5
 801557e:	b005      	add	sp, #20
 8015580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015582:	bf00      	nop
 8015584:	0801ba8c 	.word	0x0801ba8c

08015588 <rcl_get_secure_root>:
 8015588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801558c:	b085      	sub	sp, #20
 801558e:	b168      	cbz	r0, 80155ac <rcl_get_secure_root+0x24>
 8015590:	4607      	mov	r7, r0
 8015592:	4608      	mov	r0, r1
 8015594:	460c      	mov	r4, r1
 8015596:	f7fa f8a9 	bl	800f6ec <rcutils_allocator_is_valid>
 801559a:	b138      	cbz	r0, 80155ac <rcl_get_secure_root+0x24>
 801559c:	2300      	movs	r3, #0
 801559e:	482d      	ldr	r0, [pc, #180]	; (8015654 <rcl_get_secure_root+0xcc>)
 80155a0:	9303      	str	r3, [sp, #12]
 80155a2:	a903      	add	r1, sp, #12
 80155a4:	f001 fad8 	bl	8016b58 <rcutils_get_env>
 80155a8:	4605      	mov	r5, r0
 80155aa:	b120      	cbz	r0, 80155b6 <rcl_get_secure_root+0x2e>
 80155ac:	2500      	movs	r5, #0
 80155ae:	4628      	mov	r0, r5
 80155b0:	b005      	add	sp, #20
 80155b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80155b6:	9b03      	ldr	r3, [sp, #12]
 80155b8:	781a      	ldrb	r2, [r3, #0]
 80155ba:	2a00      	cmp	r2, #0
 80155bc:	d0f6      	beq.n	80155ac <rcl_get_secure_root+0x24>
 80155be:	f104 090c 	add.w	r9, r4, #12
 80155c2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80155c6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80155ca:	4618      	mov	r0, r3
 80155cc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80155d0:	f001 fbb2 	bl	8016d38 <rcutils_strdup>
 80155d4:	4680      	mov	r8, r0
 80155d6:	2800      	cmp	r0, #0
 80155d8:	d0e8      	beq.n	80155ac <rcl_get_secure_root+0x24>
 80155da:	481f      	ldr	r0, [pc, #124]	; (8015658 <rcl_get_secure_root+0xd0>)
 80155dc:	9503      	str	r5, [sp, #12]
 80155de:	a903      	add	r1, sp, #12
 80155e0:	f001 faba 	bl	8016b58 <rcutils_get_env>
 80155e4:	b160      	cbz	r0, 8015600 <rcl_get_secure_root+0x78>
 80155e6:	2600      	movs	r6, #0
 80155e8:	6863      	ldr	r3, [r4, #4]
 80155ea:	6921      	ldr	r1, [r4, #16]
 80155ec:	4630      	mov	r0, r6
 80155ee:	4798      	blx	r3
 80155f0:	4640      	mov	r0, r8
 80155f2:	6863      	ldr	r3, [r4, #4]
 80155f4:	6921      	ldr	r1, [r4, #16]
 80155f6:	4798      	blx	r3
 80155f8:	4628      	mov	r0, r5
 80155fa:	b005      	add	sp, #20
 80155fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015600:	9b03      	ldr	r3, [sp, #12]
 8015602:	781e      	ldrb	r6, [r3, #0]
 8015604:	b1f6      	cbz	r6, 8015644 <rcl_get_secure_root+0xbc>
 8015606:	e899 0003 	ldmia.w	r9, {r0, r1}
 801560a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801560e:	4618      	mov	r0, r3
 8015610:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015614:	f001 fb90 	bl	8016d38 <rcutils_strdup>
 8015618:	4606      	mov	r6, r0
 801561a:	2800      	cmp	r0, #0
 801561c:	d0e3      	beq.n	80155e6 <rcl_get_secure_root+0x5e>
 801561e:	4622      	mov	r2, r4
 8015620:	4641      	mov	r1, r8
 8015622:	f7ff ff71 	bl	8015508 <exact_match_lookup>
 8015626:	4605      	mov	r5, r0
 8015628:	2d00      	cmp	r5, #0
 801562a:	d0dd      	beq.n	80155e8 <rcl_get_secure_root+0x60>
 801562c:	4628      	mov	r0, r5
 801562e:	f001 fa49 	bl	8016ac4 <rcutils_is_directory>
 8015632:	4607      	mov	r7, r0
 8015634:	2800      	cmp	r0, #0
 8015636:	d1d7      	bne.n	80155e8 <rcl_get_secure_root+0x60>
 8015638:	4628      	mov	r0, r5
 801563a:	6863      	ldr	r3, [r4, #4]
 801563c:	6921      	ldr	r1, [r4, #16]
 801563e:	4798      	blx	r3
 8015640:	463d      	mov	r5, r7
 8015642:	e7d1      	b.n	80155e8 <rcl_get_secure_root+0x60>
 8015644:	4638      	mov	r0, r7
 8015646:	4622      	mov	r2, r4
 8015648:	4641      	mov	r1, r8
 801564a:	f7ff ff5d 	bl	8015508 <exact_match_lookup>
 801564e:	4605      	mov	r5, r0
 8015650:	e7ea      	b.n	8015628 <rcl_get_secure_root+0xa0>
 8015652:	bf00      	nop
 8015654:	0801ba98 	.word	0x0801ba98
 8015658:	0801bab0 	.word	0x0801bab0

0801565c <rcl_get_security_options_from_environment>:
 801565c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015660:	b082      	sub	sp, #8
 8015662:	4607      	mov	r7, r0
 8015664:	4688      	mov	r8, r1
 8015666:	2400      	movs	r4, #0
 8015668:	481d      	ldr	r0, [pc, #116]	; (80156e0 <rcl_get_security_options_from_environment+0x84>)
 801566a:	9401      	str	r4, [sp, #4]
 801566c:	a901      	add	r1, sp, #4
 801566e:	4616      	mov	r6, r2
 8015670:	f001 fa72 	bl	8016b58 <rcutils_get_env>
 8015674:	b120      	cbz	r0, 8015680 <rcl_get_security_options_from_environment+0x24>
 8015676:	2501      	movs	r5, #1
 8015678:	4628      	mov	r0, r5
 801567a:	b002      	add	sp, #8
 801567c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015680:	4918      	ldr	r1, [pc, #96]	; (80156e4 <rcl_get_security_options_from_environment+0x88>)
 8015682:	4604      	mov	r4, r0
 8015684:	9801      	ldr	r0, [sp, #4]
 8015686:	f7ea fdab 	bl	80001e0 <strcmp>
 801568a:	4605      	mov	r5, r0
 801568c:	b9c8      	cbnz	r0, 80156c2 <rcl_get_security_options_from_environment+0x66>
 801568e:	9001      	str	r0, [sp, #4]
 8015690:	b1ee      	cbz	r6, 80156ce <rcl_get_security_options_from_environment+0x72>
 8015692:	4815      	ldr	r0, [pc, #84]	; (80156e8 <rcl_get_security_options_from_environment+0x8c>)
 8015694:	a901      	add	r1, sp, #4
 8015696:	f001 fa5f 	bl	8016b58 <rcutils_get_env>
 801569a:	2800      	cmp	r0, #0
 801569c:	d1eb      	bne.n	8015676 <rcl_get_security_options_from_environment+0x1a>
 801569e:	4913      	ldr	r1, [pc, #76]	; (80156ec <rcl_get_security_options_from_environment+0x90>)
 80156a0:	9801      	ldr	r0, [sp, #4]
 80156a2:	f7ea fd9d 	bl	80001e0 <strcmp>
 80156a6:	fab0 f080 	clz	r0, r0
 80156aa:	0940      	lsrs	r0, r0, #5
 80156ac:	7030      	strb	r0, [r6, #0]
 80156ae:	4641      	mov	r1, r8
 80156b0:	4638      	mov	r0, r7
 80156b2:	f7ff ff69 	bl	8015588 <rcl_get_secure_root>
 80156b6:	b160      	cbz	r0, 80156d2 <rcl_get_security_options_from_environment+0x76>
 80156b8:	6070      	str	r0, [r6, #4]
 80156ba:	4628      	mov	r0, r5
 80156bc:	b002      	add	sp, #8
 80156be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156c2:	4625      	mov	r5, r4
 80156c4:	4628      	mov	r0, r5
 80156c6:	7034      	strb	r4, [r6, #0]
 80156c8:	b002      	add	sp, #8
 80156ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156ce:	250b      	movs	r5, #11
 80156d0:	e7d2      	b.n	8015678 <rcl_get_security_options_from_environment+0x1c>
 80156d2:	7835      	ldrb	r5, [r6, #0]
 80156d4:	f1a5 0501 	sub.w	r5, r5, #1
 80156d8:	fab5 f585 	clz	r5, r5
 80156dc:	096d      	lsrs	r5, r5, #5
 80156de:	e7cb      	b.n	8015678 <rcl_get_security_options_from_environment+0x1c>
 80156e0:	0801ba50 	.word	0x0801ba50
 80156e4:	0801ba64 	.word	0x0801ba64
 80156e8:	0801ba6c 	.word	0x0801ba6c
 80156ec:	0801ba84 	.word	0x0801ba84

080156f0 <rcl_service_get_rmw_handle>:
 80156f0:	b110      	cbz	r0, 80156f8 <rcl_service_get_rmw_handle+0x8>
 80156f2:	6800      	ldr	r0, [r0, #0]
 80156f4:	b100      	cbz	r0, 80156f8 <rcl_service_get_rmw_handle+0x8>
 80156f6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80156f8:	4770      	bx	lr
 80156fa:	bf00      	nop

080156fc <rcl_take_request>:
 80156fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80156fe:	460e      	mov	r6, r1
 8015700:	460c      	mov	r4, r1
 8015702:	4607      	mov	r7, r0
 8015704:	4694      	mov	ip, r2
 8015706:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015708:	b08d      	sub	sp, #52	; 0x34
 801570a:	ad06      	add	r5, sp, #24
 801570c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801570e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8015712:	e885 0003 	stmia.w	r5, {r0, r1}
 8015716:	b1e7      	cbz	r7, 8015752 <rcl_take_request+0x56>
 8015718:	683b      	ldr	r3, [r7, #0]
 801571a:	b1d3      	cbz	r3, 8015752 <rcl_take_request+0x56>
 801571c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801571e:	b1c0      	cbz	r0, 8015752 <rcl_take_request+0x56>
 8015720:	4662      	mov	r2, ip
 8015722:	b30a      	cbz	r2, 8015768 <rcl_take_request+0x6c>
 8015724:	2500      	movs	r5, #0
 8015726:	f10d 0307 	add.w	r3, sp, #7
 801572a:	a902      	add	r1, sp, #8
 801572c:	f88d 5007 	strb.w	r5, [sp, #7]
 8015730:	f002 f86e 	bl	8017810 <rmw_take_request>
 8015734:	4606      	mov	r6, r0
 8015736:	b178      	cbz	r0, 8015758 <rcl_take_request+0x5c>
 8015738:	280a      	cmp	r0, #10
 801573a:	bf18      	it	ne
 801573c:	2601      	movne	r6, #1
 801573e:	ad06      	add	r5, sp, #24
 8015740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015744:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015748:	e884 0003 	stmia.w	r4, {r0, r1}
 801574c:	4630      	mov	r0, r6
 801574e:	b00d      	add	sp, #52	; 0x34
 8015750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015752:	f44f 7616 	mov.w	r6, #600	; 0x258
 8015756:	e7f2      	b.n	801573e <rcl_take_request+0x42>
 8015758:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801575c:	f240 2359 	movw	r3, #601	; 0x259
 8015760:	2a00      	cmp	r2, #0
 8015762:	bf08      	it	eq
 8015764:	461e      	moveq	r6, r3
 8015766:	e7ea      	b.n	801573e <rcl_take_request+0x42>
 8015768:	260b      	movs	r6, #11
 801576a:	e7e8      	b.n	801573e <rcl_take_request+0x42>

0801576c <rcl_send_response>:
 801576c:	b160      	cbz	r0, 8015788 <rcl_send_response+0x1c>
 801576e:	6800      	ldr	r0, [r0, #0]
 8015770:	b150      	cbz	r0, 8015788 <rcl_send_response+0x1c>
 8015772:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8015774:	b140      	cbz	r0, 8015788 <rcl_send_response+0x1c>
 8015776:	b151      	cbz	r1, 801578e <rcl_send_response+0x22>
 8015778:	b510      	push	{r4, lr}
 801577a:	b152      	cbz	r2, 8015792 <rcl_send_response+0x26>
 801577c:	f002 f8a6 	bl	80178cc <rmw_send_response>
 8015780:	3800      	subs	r0, #0
 8015782:	bf18      	it	ne
 8015784:	2001      	movne	r0, #1
 8015786:	bd10      	pop	{r4, pc}
 8015788:	f44f 7016 	mov.w	r0, #600	; 0x258
 801578c:	4770      	bx	lr
 801578e:	200b      	movs	r0, #11
 8015790:	4770      	bx	lr
 8015792:	200b      	movs	r0, #11
 8015794:	bd10      	pop	{r4, pc}
 8015796:	bf00      	nop

08015798 <rcl_get_system_time>:
 8015798:	4608      	mov	r0, r1
 801579a:	f7fa b913 	b.w	800f9c4 <rcutils_system_time_now>
 801579e:	bf00      	nop

080157a0 <rcl_get_steady_time>:
 80157a0:	4608      	mov	r0, r1
 80157a2:	f7fa b937 	b.w	800fa14 <rcutils_steady_time_now>
 80157a6:	bf00      	nop

080157a8 <rcl_get_ros_time>:
 80157a8:	7a03      	ldrb	r3, [r0, #8]
 80157aa:	b510      	push	{r4, lr}
 80157ac:	460c      	mov	r4, r1
 80157ae:	b133      	cbz	r3, 80157be <rcl_get_ros_time+0x16>
 80157b0:	2105      	movs	r1, #5
 80157b2:	f001 f8e5 	bl	8016980 <__atomic_load_8>
 80157b6:	e9c4 0100 	strd	r0, r1, [r4]
 80157ba:	2000      	movs	r0, #0
 80157bc:	bd10      	pop	{r4, pc}
 80157be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80157c2:	4608      	mov	r0, r1
 80157c4:	f7fa b8fe 	b.w	800f9c4 <rcutils_system_time_now>

080157c8 <rcl_clock_init>:
 80157c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80157cc:	4606      	mov	r6, r0
 80157ce:	4610      	mov	r0, r2
 80157d0:	4614      	mov	r4, r2
 80157d2:	460d      	mov	r5, r1
 80157d4:	f7f9 ff8a 	bl	800f6ec <rcutils_allocator_is_valid>
 80157d8:	b128      	cbz	r0, 80157e6 <rcl_clock_init+0x1e>
 80157da:	2e03      	cmp	r6, #3
 80157dc:	d803      	bhi.n	80157e6 <rcl_clock_init+0x1e>
 80157de:	e8df f006 	tbb	[pc, r6]
 80157e2:	2c1b      	.short	0x2c1b
 80157e4:	0554      	.short	0x0554
 80157e6:	200b      	movs	r0, #11
 80157e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80157ec:	2d00      	cmp	r5, #0
 80157ee:	d0fa      	beq.n	80157e6 <rcl_clock_init+0x1e>
 80157f0:	2c00      	cmp	r4, #0
 80157f2:	d0f8      	beq.n	80157e6 <rcl_clock_init+0x1e>
 80157f4:	2600      	movs	r6, #0
 80157f6:	702e      	strb	r6, [r5, #0]
 80157f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80157fa:	f105 0714 	add.w	r7, r5, #20
 80157fe:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8015802:	612e      	str	r6, [r5, #16]
 8015804:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015806:	6823      	ldr	r3, [r4, #0]
 8015808:	603b      	str	r3, [r7, #0]
 801580a:	2303      	movs	r3, #3
 801580c:	4a2b      	ldr	r2, [pc, #172]	; (80158bc <rcl_clock_init+0xf4>)
 801580e:	702b      	strb	r3, [r5, #0]
 8015810:	4630      	mov	r0, r6
 8015812:	60ea      	str	r2, [r5, #12]
 8015814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015818:	2d00      	cmp	r5, #0
 801581a:	d0e4      	beq.n	80157e6 <rcl_clock_init+0x1e>
 801581c:	2600      	movs	r6, #0
 801581e:	702e      	strb	r6, [r5, #0]
 8015820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015822:	f105 0714 	add.w	r7, r5, #20
 8015826:	e9c5 6601 	strd	r6, r6, [r5, #4]
 801582a:	e9c5 6603 	strd	r6, r6, [r5, #12]
 801582e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015830:	6823      	ldr	r3, [r4, #0]
 8015832:	603b      	str	r3, [r7, #0]
 8015834:	4630      	mov	r0, r6
 8015836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801583a:	2d00      	cmp	r5, #0
 801583c:	d0d3      	beq.n	80157e6 <rcl_clock_init+0x1e>
 801583e:	2c00      	cmp	r4, #0
 8015840:	d0d1      	beq.n	80157e6 <rcl_clock_init+0x1e>
 8015842:	2600      	movs	r6, #0
 8015844:	702e      	strb	r6, [r5, #0]
 8015846:	46a4      	mov	ip, r4
 8015848:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801584c:	f105 0714 	add.w	r7, r5, #20
 8015850:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8015854:	e9c5 6603 	strd	r6, r6, [r5, #12]
 8015858:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801585a:	f8dc 3000 	ldr.w	r3, [ip]
 801585e:	603b      	str	r3, [r7, #0]
 8015860:	6921      	ldr	r1, [r4, #16]
 8015862:	6823      	ldr	r3, [r4, #0]
 8015864:	2010      	movs	r0, #16
 8015866:	4798      	blx	r3
 8015868:	4603      	mov	r3, r0
 801586a:	6128      	str	r0, [r5, #16]
 801586c:	b318      	cbz	r0, 80158b6 <rcl_clock_init+0xee>
 801586e:	f04f 0800 	mov.w	r8, #0
 8015872:	f04f 0900 	mov.w	r9, #0
 8015876:	7206      	strb	r6, [r0, #8]
 8015878:	e9c3 8900 	strd	r8, r9, [r3]
 801587c:	2301      	movs	r3, #1
 801587e:	4a10      	ldr	r2, [pc, #64]	; (80158c0 <rcl_clock_init+0xf8>)
 8015880:	702b      	strb	r3, [r5, #0]
 8015882:	4630      	mov	r0, r6
 8015884:	60ea      	str	r2, [r5, #12]
 8015886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801588a:	2d00      	cmp	r5, #0
 801588c:	d0ab      	beq.n	80157e6 <rcl_clock_init+0x1e>
 801588e:	2c00      	cmp	r4, #0
 8015890:	d0a9      	beq.n	80157e6 <rcl_clock_init+0x1e>
 8015892:	2600      	movs	r6, #0
 8015894:	702e      	strb	r6, [r5, #0]
 8015896:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015898:	f105 0714 	add.w	r7, r5, #20
 801589c:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80158a0:	612e      	str	r6, [r5, #16]
 80158a2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80158a4:	6823      	ldr	r3, [r4, #0]
 80158a6:	603b      	str	r3, [r7, #0]
 80158a8:	2302      	movs	r3, #2
 80158aa:	4a06      	ldr	r2, [pc, #24]	; (80158c4 <rcl_clock_init+0xfc>)
 80158ac:	702b      	strb	r3, [r5, #0]
 80158ae:	4630      	mov	r0, r6
 80158b0:	60ea      	str	r2, [r5, #12]
 80158b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158b6:	200a      	movs	r0, #10
 80158b8:	e796      	b.n	80157e8 <rcl_clock_init+0x20>
 80158ba:	bf00      	nop
 80158bc:	080157a1 	.word	0x080157a1
 80158c0:	080157a9 	.word	0x080157a9
 80158c4:	08015799 	.word	0x08015799

080158c8 <rcl_clock_get_now>:
 80158c8:	b140      	cbz	r0, 80158dc <rcl_clock_get_now+0x14>
 80158ca:	b139      	cbz	r1, 80158dc <rcl_clock_get_now+0x14>
 80158cc:	7803      	ldrb	r3, [r0, #0]
 80158ce:	b11b      	cbz	r3, 80158d8 <rcl_clock_get_now+0x10>
 80158d0:	68c3      	ldr	r3, [r0, #12]
 80158d2:	b10b      	cbz	r3, 80158d8 <rcl_clock_get_now+0x10>
 80158d4:	6900      	ldr	r0, [r0, #16]
 80158d6:	4718      	bx	r3
 80158d8:	2001      	movs	r0, #1
 80158da:	4770      	bx	lr
 80158dc:	200b      	movs	r0, #11
 80158de:	4770      	bx	lr

080158e0 <rcl_timer_call>:
 80158e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158e4:	b08b      	sub	sp, #44	; 0x2c
 80158e6:	2800      	cmp	r0, #0
 80158e8:	d06e      	beq.n	80159c8 <rcl_timer_call+0xe8>
 80158ea:	6803      	ldr	r3, [r0, #0]
 80158ec:	f3bf 8f5b 	dmb	ish
 80158f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80158f4:	f3bf 8f5b 	dmb	ish
 80158f8:	4604      	mov	r4, r0
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d159      	bne.n	80159b2 <rcl_timer_call+0xd2>
 80158fe:	6803      	ldr	r3, [r0, #0]
 8015900:	a908      	add	r1, sp, #32
 8015902:	6818      	ldr	r0, [r3, #0]
 8015904:	f7ff ffe0 	bl	80158c8 <rcl_clock_get_now>
 8015908:	4605      	mov	r5, r0
 801590a:	2800      	cmp	r0, #0
 801590c:	d14d      	bne.n	80159aa <rcl_timer_call+0xca>
 801590e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015912:	2a00      	cmp	r2, #0
 8015914:	f173 0100 	sbcs.w	r1, r3, #0
 8015918:	db51      	blt.n	80159be <rcl_timer_call+0xde>
 801591a:	6820      	ldr	r0, [r4, #0]
 801591c:	2605      	movs	r6, #5
 801591e:	9600      	str	r6, [sp, #0]
 8015920:	3020      	adds	r0, #32
 8015922:	f001 f895 	bl	8016a50 <__atomic_exchange_8>
 8015926:	6822      	ldr	r2, [r4, #0]
 8015928:	f3bf 8f5b 	dmb	ish
 801592c:	4682      	mov	sl, r0
 801592e:	f8d2 b010 	ldr.w	fp, [r2, #16]
 8015932:	f3bf 8f5b 	dmb	ish
 8015936:	6820      	ldr	r0, [r4, #0]
 8015938:	460b      	mov	r3, r1
 801593a:	3028      	adds	r0, #40	; 0x28
 801593c:	4631      	mov	r1, r6
 801593e:	9305      	str	r3, [sp, #20]
 8015940:	f001 f81e 	bl	8016980 <__atomic_load_8>
 8015944:	4603      	mov	r3, r0
 8015946:	6820      	ldr	r0, [r4, #0]
 8015948:	460a      	mov	r2, r1
 801594a:	3018      	adds	r0, #24
 801594c:	4631      	mov	r1, r6
 801594e:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8015952:	f001 f815 	bl	8016980 <__atomic_load_8>
 8015956:	9b04      	ldr	r3, [sp, #16]
 8015958:	9a03      	ldr	r2, [sp, #12]
 801595a:	4606      	mov	r6, r0
 801595c:	460f      	mov	r7, r1
 801595e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015962:	eb13 0806 	adds.w	r8, r3, r6
 8015966:	eb42 0907 	adc.w	r9, r2, r7
 801596a:	4580      	cmp	r8, r0
 801596c:	eb79 0301 	sbcs.w	r3, r9, r1
 8015970:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015974:	460a      	mov	r2, r1
 8015976:	da04      	bge.n	8015982 <rcl_timer_call+0xa2>
 8015978:	ea56 0307 	orrs.w	r3, r6, r7
 801597c:	d129      	bne.n	80159d2 <rcl_timer_call+0xf2>
 801597e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8015982:	6820      	ldr	r0, [r4, #0]
 8015984:	2105      	movs	r1, #5
 8015986:	4642      	mov	r2, r8
 8015988:	464b      	mov	r3, r9
 801598a:	3028      	adds	r0, #40	; 0x28
 801598c:	9100      	str	r1, [sp, #0]
 801598e:	f001 f82b 	bl	80169e8 <__atomic_store_8>
 8015992:	f1bb 0f00 	cmp.w	fp, #0
 8015996:	d008      	beq.n	80159aa <rcl_timer_call+0xca>
 8015998:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801599c:	9905      	ldr	r1, [sp, #20]
 801599e:	ebb2 020a 	subs.w	r2, r2, sl
 80159a2:	4620      	mov	r0, r4
 80159a4:	eb63 0301 	sbc.w	r3, r3, r1
 80159a8:	47d8      	blx	fp
 80159aa:	4628      	mov	r0, r5
 80159ac:	b00b      	add	sp, #44	; 0x2c
 80159ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159b2:	f240 3521 	movw	r5, #801	; 0x321
 80159b6:	4628      	mov	r0, r5
 80159b8:	b00b      	add	sp, #44	; 0x2c
 80159ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159be:	2501      	movs	r5, #1
 80159c0:	4628      	mov	r0, r5
 80159c2:	b00b      	add	sp, #44	; 0x2c
 80159c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159c8:	250b      	movs	r5, #11
 80159ca:	4628      	mov	r0, r5
 80159cc:	b00b      	add	sp, #44	; 0x2c
 80159ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159d2:	ebb0 0008 	subs.w	r0, r0, r8
 80159d6:	eb62 0109 	sbc.w	r1, r2, r9
 80159da:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 80159de:	463b      	mov	r3, r7
 80159e0:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 80159e4:	4632      	mov	r2, r6
 80159e6:	f7eb f909 	bl	8000bfc <__aeabi_ldivmod>
 80159ea:	1c43      	adds	r3, r0, #1
 80159ec:	f141 0100 	adc.w	r1, r1, #0
 80159f0:	fb00 7007 	mla	r0, r0, r7, r7
 80159f4:	fb06 0001 	mla	r0, r6, r1, r0
 80159f8:	fba3 6706 	umull	r6, r7, r3, r6
 80159fc:	4407      	add	r7, r0
 80159fe:	eb18 0806 	adds.w	r8, r8, r6
 8015a02:	eb49 0907 	adc.w	r9, r9, r7
 8015a06:	e7bc      	b.n	8015982 <rcl_timer_call+0xa2>

08015a08 <rcl_timer_is_ready>:
 8015a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a0c:	b082      	sub	sp, #8
 8015a0e:	b310      	cbz	r0, 8015a56 <rcl_timer_is_ready+0x4e>
 8015a10:	4688      	mov	r8, r1
 8015a12:	b301      	cbz	r1, 8015a56 <rcl_timer_is_ready+0x4e>
 8015a14:	6803      	ldr	r3, [r0, #0]
 8015a16:	4604      	mov	r4, r0
 8015a18:	4669      	mov	r1, sp
 8015a1a:	6818      	ldr	r0, [r3, #0]
 8015a1c:	f7ff ff54 	bl	80158c8 <rcl_clock_get_now>
 8015a20:	4605      	mov	r5, r0
 8015a22:	b118      	cbz	r0, 8015a2c <rcl_timer_is_ready+0x24>
 8015a24:	4628      	mov	r0, r5
 8015a26:	b002      	add	sp, #8
 8015a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a2c:	6820      	ldr	r0, [r4, #0]
 8015a2e:	2105      	movs	r1, #5
 8015a30:	3028      	adds	r0, #40	; 0x28
 8015a32:	f000 ffa5 	bl	8016980 <__atomic_load_8>
 8015a36:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015a3a:	1ac6      	subs	r6, r0, r3
 8015a3c:	eb61 0702 	sbc.w	r7, r1, r2
 8015a40:	2e01      	cmp	r6, #1
 8015a42:	f177 0300 	sbcs.w	r3, r7, #0
 8015a46:	db0b      	blt.n	8015a60 <rcl_timer_is_ready+0x58>
 8015a48:	462b      	mov	r3, r5
 8015a4a:	4628      	mov	r0, r5
 8015a4c:	f888 3000 	strb.w	r3, [r8]
 8015a50:	b002      	add	sp, #8
 8015a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a56:	250b      	movs	r5, #11
 8015a58:	4628      	mov	r0, r5
 8015a5a:	b002      	add	sp, #8
 8015a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a60:	6823      	ldr	r3, [r4, #0]
 8015a62:	f3bf 8f5b 	dmb	ish
 8015a66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015a6a:	f3bf 8f5b 	dmb	ish
 8015a6e:	fab3 f383 	clz	r3, r3
 8015a72:	095b      	lsrs	r3, r3, #5
 8015a74:	e7e9      	b.n	8015a4a <rcl_timer_is_ready+0x42>
 8015a76:	bf00      	nop

08015a78 <rcl_timer_get_time_until_next_call>:
 8015a78:	b570      	push	{r4, r5, r6, lr}
 8015a7a:	b082      	sub	sp, #8
 8015a7c:	b1d8      	cbz	r0, 8015ab6 <rcl_timer_get_time_until_next_call+0x3e>
 8015a7e:	460d      	mov	r5, r1
 8015a80:	b1c9      	cbz	r1, 8015ab6 <rcl_timer_get_time_until_next_call+0x3e>
 8015a82:	6803      	ldr	r3, [r0, #0]
 8015a84:	4604      	mov	r4, r0
 8015a86:	4669      	mov	r1, sp
 8015a88:	6818      	ldr	r0, [r3, #0]
 8015a8a:	f7ff ff1d 	bl	80158c8 <rcl_clock_get_now>
 8015a8e:	4606      	mov	r6, r0
 8015a90:	b110      	cbz	r0, 8015a98 <rcl_timer_get_time_until_next_call+0x20>
 8015a92:	4630      	mov	r0, r6
 8015a94:	b002      	add	sp, #8
 8015a96:	bd70      	pop	{r4, r5, r6, pc}
 8015a98:	6820      	ldr	r0, [r4, #0]
 8015a9a:	2105      	movs	r1, #5
 8015a9c:	3028      	adds	r0, #40	; 0x28
 8015a9e:	f000 ff6f 	bl	8016980 <__atomic_load_8>
 8015aa2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015aa6:	1ac0      	subs	r0, r0, r3
 8015aa8:	eb61 0102 	sbc.w	r1, r1, r2
 8015aac:	e9c5 0100 	strd	r0, r1, [r5]
 8015ab0:	4630      	mov	r0, r6
 8015ab2:	b002      	add	sp, #8
 8015ab4:	bd70      	pop	{r4, r5, r6, pc}
 8015ab6:	260b      	movs	r6, #11
 8015ab8:	4630      	mov	r0, r6
 8015aba:	b002      	add	sp, #8
 8015abc:	bd70      	pop	{r4, r5, r6, pc}
 8015abe:	bf00      	nop

08015ac0 <rcl_timer_is_canceled>:
 8015ac0:	b168      	cbz	r0, 8015ade <rcl_timer_is_canceled+0x1e>
 8015ac2:	b161      	cbz	r1, 8015ade <rcl_timer_is_canceled+0x1e>
 8015ac4:	6803      	ldr	r3, [r0, #0]
 8015ac6:	f3bf 8f5b 	dmb	ish
 8015aca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015ace:	f3bf 8f5b 	dmb	ish
 8015ad2:	3b00      	subs	r3, #0
 8015ad4:	bf18      	it	ne
 8015ad6:	2301      	movne	r3, #1
 8015ad8:	700b      	strb	r3, [r1, #0]
 8015ada:	2000      	movs	r0, #0
 8015adc:	4770      	bx	lr
 8015ade:	200b      	movs	r0, #11
 8015ae0:	4770      	bx	lr
 8015ae2:	bf00      	nop

08015ae4 <rcl_timer_get_guard_condition>:
 8015ae4:	b130      	cbz	r0, 8015af4 <rcl_timer_get_guard_condition+0x10>
 8015ae6:	6800      	ldr	r0, [r0, #0]
 8015ae8:	b120      	cbz	r0, 8015af4 <rcl_timer_get_guard_condition+0x10>
 8015aea:	68c3      	ldr	r3, [r0, #12]
 8015aec:	b10b      	cbz	r3, 8015af2 <rcl_timer_get_guard_condition+0xe>
 8015aee:	3008      	adds	r0, #8
 8015af0:	4770      	bx	lr
 8015af2:	4618      	mov	r0, r3
 8015af4:	4770      	bx	lr
 8015af6:	bf00      	nop

08015af8 <rcl_validate_enclave_name_with_size>:
 8015af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015afa:	b0c3      	sub	sp, #268	; 0x10c
 8015afc:	b1d0      	cbz	r0, 8015b34 <rcl_validate_enclave_name_with_size+0x3c>
 8015afe:	4615      	mov	r5, r2
 8015b00:	b1c2      	cbz	r2, 8015b34 <rcl_validate_enclave_name_with_size+0x3c>
 8015b02:	461f      	mov	r7, r3
 8015b04:	466a      	mov	r2, sp
 8015b06:	ab01      	add	r3, sp, #4
 8015b08:	460e      	mov	r6, r1
 8015b0a:	f001 f96f 	bl	8016dec <rmw_validate_namespace_with_size>
 8015b0e:	4604      	mov	r4, r0
 8015b10:	b9e0      	cbnz	r0, 8015b4c <rcl_validate_enclave_name_with_size+0x54>
 8015b12:	9b00      	ldr	r3, [sp, #0]
 8015b14:	b923      	cbnz	r3, 8015b20 <rcl_validate_enclave_name_with_size+0x28>
 8015b16:	2300      	movs	r3, #0
 8015b18:	602b      	str	r3, [r5, #0]
 8015b1a:	4620      	mov	r0, r4
 8015b1c:	b043      	add	sp, #268	; 0x10c
 8015b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b20:	2b07      	cmp	r3, #7
 8015b22:	d00b      	beq.n	8015b3c <rcl_validate_enclave_name_with_size+0x44>
 8015b24:	1e5a      	subs	r2, r3, #1
 8015b26:	2a05      	cmp	r2, #5
 8015b28:	d82e      	bhi.n	8015b88 <rcl_validate_enclave_name_with_size+0x90>
 8015b2a:	e8df f002 	tbb	[pc, r2]
 8015b2e:	211e      	.short	0x211e
 8015b30:	152a2724 	.word	0x152a2724
 8015b34:	240b      	movs	r4, #11
 8015b36:	4620      	mov	r0, r4
 8015b38:	b043      	add	sp, #268	; 0x10c
 8015b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b3c:	2eff      	cmp	r6, #255	; 0xff
 8015b3e:	d9ea      	bls.n	8015b16 <rcl_validate_enclave_name_with_size+0x1e>
 8015b40:	602b      	str	r3, [r5, #0]
 8015b42:	2f00      	cmp	r7, #0
 8015b44:	d0e9      	beq.n	8015b1a <rcl_validate_enclave_name_with_size+0x22>
 8015b46:	23fe      	movs	r3, #254	; 0xfe
 8015b48:	603b      	str	r3, [r7, #0]
 8015b4a:	e7e6      	b.n	8015b1a <rcl_validate_enclave_name_with_size+0x22>
 8015b4c:	f7fe fefc 	bl	8014948 <rcl_convert_rmw_ret_to_rcl_ret>
 8015b50:	4604      	mov	r4, r0
 8015b52:	4620      	mov	r0, r4
 8015b54:	b043      	add	sp, #268	; 0x10c
 8015b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b58:	2306      	movs	r3, #6
 8015b5a:	602b      	str	r3, [r5, #0]
 8015b5c:	2f00      	cmp	r7, #0
 8015b5e:	d0dc      	beq.n	8015b1a <rcl_validate_enclave_name_with_size+0x22>
 8015b60:	9b01      	ldr	r3, [sp, #4]
 8015b62:	603b      	str	r3, [r7, #0]
 8015b64:	4620      	mov	r0, r4
 8015b66:	b043      	add	sp, #268	; 0x10c
 8015b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b6a:	2301      	movs	r3, #1
 8015b6c:	602b      	str	r3, [r5, #0]
 8015b6e:	e7f5      	b.n	8015b5c <rcl_validate_enclave_name_with_size+0x64>
 8015b70:	2302      	movs	r3, #2
 8015b72:	602b      	str	r3, [r5, #0]
 8015b74:	e7f2      	b.n	8015b5c <rcl_validate_enclave_name_with_size+0x64>
 8015b76:	2303      	movs	r3, #3
 8015b78:	602b      	str	r3, [r5, #0]
 8015b7a:	e7ef      	b.n	8015b5c <rcl_validate_enclave_name_with_size+0x64>
 8015b7c:	2304      	movs	r3, #4
 8015b7e:	602b      	str	r3, [r5, #0]
 8015b80:	e7ec      	b.n	8015b5c <rcl_validate_enclave_name_with_size+0x64>
 8015b82:	2305      	movs	r3, #5
 8015b84:	602b      	str	r3, [r5, #0]
 8015b86:	e7e9      	b.n	8015b5c <rcl_validate_enclave_name_with_size+0x64>
 8015b88:	4a03      	ldr	r2, [pc, #12]	; (8015b98 <rcl_validate_enclave_name_with_size+0xa0>)
 8015b8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8015b8e:	a802      	add	r0, sp, #8
 8015b90:	f001 f8a6 	bl	8016ce0 <rcutils_snprintf>
 8015b94:	2401      	movs	r4, #1
 8015b96:	e7c0      	b.n	8015b1a <rcl_validate_enclave_name_with_size+0x22>
 8015b98:	0801bad0 	.word	0x0801bad0

08015b9c <rcl_validate_enclave_name>:
 8015b9c:	b168      	cbz	r0, 8015bba <rcl_validate_enclave_name+0x1e>
 8015b9e:	b570      	push	{r4, r5, r6, lr}
 8015ba0:	460d      	mov	r5, r1
 8015ba2:	4616      	mov	r6, r2
 8015ba4:	4604      	mov	r4, r0
 8015ba6:	f7ea fb25 	bl	80001f4 <strlen>
 8015baa:	4633      	mov	r3, r6
 8015bac:	4601      	mov	r1, r0
 8015bae:	462a      	mov	r2, r5
 8015bb0:	4620      	mov	r0, r4
 8015bb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015bb6:	f7ff bf9f 	b.w	8015af8 <rcl_validate_enclave_name_with_size>
 8015bba:	200b      	movs	r0, #11
 8015bbc:	4770      	bx	lr
 8015bbe:	bf00      	nop

08015bc0 <rcl_validate_topic_name>:
 8015bc0:	2800      	cmp	r0, #0
 8015bc2:	f000 808b 	beq.w	8015cdc <rcl_validate_topic_name+0x11c>
 8015bc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015bca:	460e      	mov	r6, r1
 8015bcc:	2900      	cmp	r1, #0
 8015bce:	f000 808c 	beq.w	8015cea <rcl_validate_topic_name+0x12a>
 8015bd2:	4617      	mov	r7, r2
 8015bd4:	4605      	mov	r5, r0
 8015bd6:	f7ea fb0d 	bl	80001f4 <strlen>
 8015bda:	b1b0      	cbz	r0, 8015c0a <rcl_validate_topic_name+0x4a>
 8015bdc:	f895 9000 	ldrb.w	r9, [r5]
 8015be0:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8015d90 <rcl_validate_topic_name+0x1d0>
 8015be4:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8015be8:	f013 0304 	ands.w	r3, r3, #4
 8015bec:	d178      	bne.n	8015ce0 <rcl_validate_topic_name+0x120>
 8015bee:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8015bf2:	f815 2008 	ldrb.w	r2, [r5, r8]
 8015bf6:	2a2f      	cmp	r2, #47	; 0x2f
 8015bf8:	d10e      	bne.n	8015c18 <rcl_validate_topic_name+0x58>
 8015bfa:	2202      	movs	r2, #2
 8015bfc:	6032      	str	r2, [r6, #0]
 8015bfe:	b36f      	cbz	r7, 8015c5c <rcl_validate_topic_name+0x9c>
 8015c00:	f8c7 8000 	str.w	r8, [r7]
 8015c04:	4618      	mov	r0, r3
 8015c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c0a:	2301      	movs	r3, #1
 8015c0c:	6033      	str	r3, [r6, #0]
 8015c0e:	b32f      	cbz	r7, 8015c5c <rcl_validate_topic_name+0x9c>
 8015c10:	2000      	movs	r0, #0
 8015c12:	6038      	str	r0, [r7, #0]
 8015c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c18:	461c      	mov	r4, r3
 8015c1a:	4619      	mov	r1, r3
 8015c1c:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8015c20:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8015c24:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8015c28:	f1be 0f09 	cmp.w	lr, #9
 8015c2c:	d946      	bls.n	8015cbc <rcl_validate_topic_name+0xfc>
 8015c2e:	f022 0e20 	bic.w	lr, r2, #32
 8015c32:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8015c36:	f1be 0f19 	cmp.w	lr, #25
 8015c3a:	d93f      	bls.n	8015cbc <rcl_validate_topic_name+0xfc>
 8015c3c:	2a5f      	cmp	r2, #95	; 0x5f
 8015c3e:	d014      	beq.n	8015c6a <rcl_validate_topic_name+0xaa>
 8015c40:	2a2f      	cmp	r2, #47	; 0x2f
 8015c42:	d05b      	beq.n	8015cfc <rcl_validate_topic_name+0x13c>
 8015c44:	2a7e      	cmp	r2, #126	; 0x7e
 8015c46:	d052      	beq.n	8015cee <rcl_validate_topic_name+0x12e>
 8015c48:	2a7b      	cmp	r2, #123	; 0x7b
 8015c4a:	d00a      	beq.n	8015c62 <rcl_validate_topic_name+0xa2>
 8015c4c:	2a7d      	cmp	r2, #125	; 0x7d
 8015c4e:	d16f      	bne.n	8015d30 <rcl_validate_topic_name+0x170>
 8015c50:	2c00      	cmp	r4, #0
 8015c52:	d15e      	bne.n	8015d12 <rcl_validate_topic_name+0x152>
 8015c54:	2305      	movs	r3, #5
 8015c56:	6033      	str	r3, [r6, #0]
 8015c58:	b107      	cbz	r7, 8015c5c <rcl_validate_topic_name+0x9c>
 8015c5a:	6039      	str	r1, [r7, #0]
 8015c5c:	2000      	movs	r0, #0
 8015c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c62:	2c00      	cmp	r4, #0
 8015c64:	d14c      	bne.n	8015d00 <rcl_validate_topic_name+0x140>
 8015c66:	460b      	mov	r3, r1
 8015c68:	2401      	movs	r4, #1
 8015c6a:	3101      	adds	r1, #1
 8015c6c:	4288      	cmp	r0, r1
 8015c6e:	d1d7      	bne.n	8015c20 <rcl_validate_topic_name+0x60>
 8015c70:	2c00      	cmp	r4, #0
 8015c72:	d156      	bne.n	8015d22 <rcl_validate_topic_name+0x162>
 8015c74:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8015c78:	4620      	mov	r0, r4
 8015c7a:	d061      	beq.n	8015d40 <rcl_validate_topic_name+0x180>
 8015c7c:	f108 0e01 	add.w	lr, r8, #1
 8015c80:	e007      	b.n	8015c92 <rcl_validate_topic_name+0xd2>
 8015c82:	2801      	cmp	r0, #1
 8015c84:	d047      	beq.n	8015d16 <rcl_validate_topic_name+0x156>
 8015c86:	461a      	mov	r2, r3
 8015c88:	4291      	cmp	r1, r2
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	f105 0501 	add.w	r5, r5, #1
 8015c90:	d944      	bls.n	8015d1c <rcl_validate_topic_name+0x15c>
 8015c92:	4580      	cmp	r8, r0
 8015c94:	f100 0301 	add.w	r3, r0, #1
 8015c98:	d037      	beq.n	8015d0a <rcl_validate_topic_name+0x14a>
 8015c9a:	782a      	ldrb	r2, [r5, #0]
 8015c9c:	2a2f      	cmp	r2, #47	; 0x2f
 8015c9e:	d1f0      	bne.n	8015c82 <rcl_validate_topic_name+0xc2>
 8015ca0:	786b      	ldrb	r3, [r5, #1]
 8015ca2:	f81c 4003 	ldrb.w	r4, [ip, r3]
 8015ca6:	1c43      	adds	r3, r0, #1
 8015ca8:	0760      	lsls	r0, r4, #29
 8015caa:	461a      	mov	r2, r3
 8015cac:	d5ec      	bpl.n	8015c88 <rcl_validate_topic_name+0xc8>
 8015cae:	2304      	movs	r3, #4
 8015cb0:	6033      	str	r3, [r6, #0]
 8015cb2:	2f00      	cmp	r7, #0
 8015cb4:	d0d2      	beq.n	8015c5c <rcl_validate_topic_name+0x9c>
 8015cb6:	603a      	str	r2, [r7, #0]
 8015cb8:	2000      	movs	r0, #0
 8015cba:	e7ab      	b.n	8015c14 <rcl_validate_topic_name+0x54>
 8015cbc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015cc0:	0752      	lsls	r2, r2, #29
 8015cc2:	d5d2      	bpl.n	8015c6a <rcl_validate_topic_name+0xaa>
 8015cc4:	2c00      	cmp	r4, #0
 8015cc6:	d0d0      	beq.n	8015c6a <rcl_validate_topic_name+0xaa>
 8015cc8:	2900      	cmp	r1, #0
 8015cca:	d0ce      	beq.n	8015c6a <rcl_validate_topic_name+0xaa>
 8015ccc:	1e4a      	subs	r2, r1, #1
 8015cce:	429a      	cmp	r2, r3
 8015cd0:	d1cb      	bne.n	8015c6a <rcl_validate_topic_name+0xaa>
 8015cd2:	2309      	movs	r3, #9
 8015cd4:	6033      	str	r3, [r6, #0]
 8015cd6:	2f00      	cmp	r7, #0
 8015cd8:	d1bf      	bne.n	8015c5a <rcl_validate_topic_name+0x9a>
 8015cda:	e7bf      	b.n	8015c5c <rcl_validate_topic_name+0x9c>
 8015cdc:	200b      	movs	r0, #11
 8015cde:	4770      	bx	lr
 8015ce0:	2304      	movs	r3, #4
 8015ce2:	6033      	str	r3, [r6, #0]
 8015ce4:	2f00      	cmp	r7, #0
 8015ce6:	d193      	bne.n	8015c10 <rcl_validate_topic_name+0x50>
 8015ce8:	e7b8      	b.n	8015c5c <rcl_validate_topic_name+0x9c>
 8015cea:	200b      	movs	r0, #11
 8015cec:	e792      	b.n	8015c14 <rcl_validate_topic_name+0x54>
 8015cee:	2900      	cmp	r1, #0
 8015cf0:	d0bb      	beq.n	8015c6a <rcl_validate_topic_name+0xaa>
 8015cf2:	2306      	movs	r3, #6
 8015cf4:	6033      	str	r3, [r6, #0]
 8015cf6:	2f00      	cmp	r7, #0
 8015cf8:	d1af      	bne.n	8015c5a <rcl_validate_topic_name+0x9a>
 8015cfa:	e7af      	b.n	8015c5c <rcl_validate_topic_name+0x9c>
 8015cfc:	2c00      	cmp	r4, #0
 8015cfe:	d0b4      	beq.n	8015c6a <rcl_validate_topic_name+0xaa>
 8015d00:	2308      	movs	r3, #8
 8015d02:	6033      	str	r3, [r6, #0]
 8015d04:	2f00      	cmp	r7, #0
 8015d06:	d1a8      	bne.n	8015c5a <rcl_validate_topic_name+0x9a>
 8015d08:	e7a8      	b.n	8015c5c <rcl_validate_topic_name+0x9c>
 8015d0a:	4672      	mov	r2, lr
 8015d0c:	f108 0301 	add.w	r3, r8, #1
 8015d10:	e7ba      	b.n	8015c88 <rcl_validate_topic_name+0xc8>
 8015d12:	2400      	movs	r4, #0
 8015d14:	e7a9      	b.n	8015c6a <rcl_validate_topic_name+0xaa>
 8015d16:	2202      	movs	r2, #2
 8015d18:	4613      	mov	r3, r2
 8015d1a:	e7b5      	b.n	8015c88 <rcl_validate_topic_name+0xc8>
 8015d1c:	2000      	movs	r0, #0
 8015d1e:	6030      	str	r0, [r6, #0]
 8015d20:	e778      	b.n	8015c14 <rcl_validate_topic_name+0x54>
 8015d22:	2205      	movs	r2, #5
 8015d24:	6032      	str	r2, [r6, #0]
 8015d26:	2f00      	cmp	r7, #0
 8015d28:	d098      	beq.n	8015c5c <rcl_validate_topic_name+0x9c>
 8015d2a:	603b      	str	r3, [r7, #0]
 8015d2c:	2000      	movs	r0, #0
 8015d2e:	e771      	b.n	8015c14 <rcl_validate_topic_name+0x54>
 8015d30:	2c00      	cmp	r4, #0
 8015d32:	bf14      	ite	ne
 8015d34:	2308      	movne	r3, #8
 8015d36:	2303      	moveq	r3, #3
 8015d38:	6033      	str	r3, [r6, #0]
 8015d3a:	2f00      	cmp	r7, #0
 8015d3c:	d18d      	bne.n	8015c5a <rcl_validate_topic_name+0x9a>
 8015d3e:	e78d      	b.n	8015c5c <rcl_validate_topic_name+0x9c>
 8015d40:	f108 0401 	add.w	r4, r8, #1
 8015d44:	e007      	b.n	8015d56 <rcl_validate_topic_name+0x196>
 8015d46:	2801      	cmp	r0, #1
 8015d48:	d019      	beq.n	8015d7e <rcl_validate_topic_name+0x1be>
 8015d4a:	461a      	mov	r2, r3
 8015d4c:	4291      	cmp	r1, r2
 8015d4e:	4618      	mov	r0, r3
 8015d50:	f105 0501 	add.w	r5, r5, #1
 8015d54:	d9e2      	bls.n	8015d1c <rcl_validate_topic_name+0x15c>
 8015d56:	4580      	cmp	r8, r0
 8015d58:	f100 0301 	add.w	r3, r0, #1
 8015d5c:	d00b      	beq.n	8015d76 <rcl_validate_topic_name+0x1b6>
 8015d5e:	782a      	ldrb	r2, [r5, #0]
 8015d60:	2a2f      	cmp	r2, #47	; 0x2f
 8015d62:	d1f0      	bne.n	8015d46 <rcl_validate_topic_name+0x186>
 8015d64:	786b      	ldrb	r3, [r5, #1]
 8015d66:	f81c e003 	ldrb.w	lr, [ip, r3]
 8015d6a:	1c43      	adds	r3, r0, #1
 8015d6c:	f01e 0f04 	tst.w	lr, #4
 8015d70:	461a      	mov	r2, r3
 8015d72:	d0eb      	beq.n	8015d4c <rcl_validate_topic_name+0x18c>
 8015d74:	e79b      	b.n	8015cae <rcl_validate_topic_name+0xee>
 8015d76:	4622      	mov	r2, r4
 8015d78:	f108 0301 	add.w	r3, r8, #1
 8015d7c:	e7e6      	b.n	8015d4c <rcl_validate_topic_name+0x18c>
 8015d7e:	2307      	movs	r3, #7
 8015d80:	6033      	str	r3, [r6, #0]
 8015d82:	2f00      	cmp	r7, #0
 8015d84:	f43f af6a 	beq.w	8015c5c <rcl_validate_topic_name+0x9c>
 8015d88:	6038      	str	r0, [r7, #0]
 8015d8a:	2000      	movs	r0, #0
 8015d8c:	e742      	b.n	8015c14 <rcl_validate_topic_name+0x54>
 8015d8e:	bf00      	nop
 8015d90:	0801c158 	.word	0x0801c158

08015d94 <rcl_get_zero_initialized_wait_set>:
 8015d94:	b470      	push	{r4, r5, r6}
 8015d96:	4d07      	ldr	r5, [pc, #28]	; (8015db4 <rcl_get_zero_initialized_wait_set+0x20>)
 8015d98:	4606      	mov	r6, r0
 8015d9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015d9c:	4634      	mov	r4, r6
 8015d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015da8:	682b      	ldr	r3, [r5, #0]
 8015daa:	6023      	str	r3, [r4, #0]
 8015dac:	4630      	mov	r0, r6
 8015dae:	bc70      	pop	{r4, r5, r6}
 8015db0:	4770      	bx	lr
 8015db2:	bf00      	nop
 8015db4:	0801bb30 	.word	0x0801bb30

08015db8 <rcl_wait_set_is_valid>:
 8015db8:	b118      	cbz	r0, 8015dc2 <rcl_wait_set_is_valid+0xa>
 8015dba:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8015dbc:	3800      	subs	r0, #0
 8015dbe:	bf18      	it	ne
 8015dc0:	2001      	movne	r0, #1
 8015dc2:	4770      	bx	lr

08015dc4 <rcl_wait_set_fini>:
 8015dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dc8:	b082      	sub	sp, #8
 8015dca:	2800      	cmp	r0, #0
 8015dcc:	f000 8095 	beq.w	8015efa <rcl_wait_set_fini+0x136>
 8015dd0:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8015dd2:	4604      	mov	r4, r0
 8015dd4:	2e00      	cmp	r6, #0
 8015dd6:	f000 808c 	beq.w	8015ef2 <rcl_wait_set_fini+0x12e>
 8015dda:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8015ddc:	f002 f806 	bl	8017dec <rmw_destroy_wait_set>
 8015de0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015de2:	1e06      	subs	r6, r0, #0
 8015de4:	bf18      	it	ne
 8015de6:	f44f 7661 	movne.w	r6, #900	; 0x384
 8015dea:	2d00      	cmp	r5, #0
 8015dec:	f000 8081 	beq.w	8015ef2 <rcl_wait_set_fini+0x12e>
 8015df0:	6820      	ldr	r0, [r4, #0]
 8015df2:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8015df6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015df8:	2700      	movs	r7, #0
 8015dfa:	6067      	str	r7, [r4, #4]
 8015dfc:	602f      	str	r7, [r5, #0]
 8015dfe:	b120      	cbz	r0, 8015e0a <rcl_wait_set_fini+0x46>
 8015e00:	9101      	str	r1, [sp, #4]
 8015e02:	47c0      	blx	r8
 8015e04:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015e06:	9901      	ldr	r1, [sp, #4]
 8015e08:	6027      	str	r7, [r4, #0]
 8015e0a:	68a8      	ldr	r0, [r5, #8]
 8015e0c:	b120      	cbz	r0, 8015e18 <rcl_wait_set_fini+0x54>
 8015e0e:	47c0      	blx	r8
 8015e10:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015e12:	2300      	movs	r3, #0
 8015e14:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8015e18:	68a0      	ldr	r0, [r4, #8]
 8015e1a:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8015e1c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015e1e:	f04f 0800 	mov.w	r8, #0
 8015e22:	f8c4 800c 	str.w	r8, [r4, #12]
 8015e26:	f8c5 800c 	str.w	r8, [r5, #12]
 8015e2a:	b128      	cbz	r0, 8015e38 <rcl_wait_set_fini+0x74>
 8015e2c:	47b8      	blx	r7
 8015e2e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015e30:	f8c4 8008 	str.w	r8, [r4, #8]
 8015e34:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8015e36:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015e38:	6968      	ldr	r0, [r5, #20]
 8015e3a:	f04f 0800 	mov.w	r8, #0
 8015e3e:	f8c5 8010 	str.w	r8, [r5, #16]
 8015e42:	b128      	cbz	r0, 8015e50 <rcl_wait_set_fini+0x8c>
 8015e44:	47b8      	blx	r7
 8015e46:	f8c5 8014 	str.w	r8, [r5, #20]
 8015e4a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015e4c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8015e4e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015e50:	6920      	ldr	r0, [r4, #16]
 8015e52:	f04f 0800 	mov.w	r8, #0
 8015e56:	f8c4 8014 	str.w	r8, [r4, #20]
 8015e5a:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8015e5e:	b128      	cbz	r0, 8015e6c <rcl_wait_set_fini+0xa8>
 8015e60:	47b8      	blx	r7
 8015e62:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015e64:	f8c4 8010 	str.w	r8, [r4, #16]
 8015e68:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8015e6a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015e6c:	69a0      	ldr	r0, [r4, #24]
 8015e6e:	f04f 0800 	mov.w	r8, #0
 8015e72:	f8c4 801c 	str.w	r8, [r4, #28]
 8015e76:	f8c5 8018 	str.w	r8, [r5, #24]
 8015e7a:	b128      	cbz	r0, 8015e88 <rcl_wait_set_fini+0xc4>
 8015e7c:	9101      	str	r1, [sp, #4]
 8015e7e:	47b8      	blx	r7
 8015e80:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015e82:	9901      	ldr	r1, [sp, #4]
 8015e84:	f8c4 8018 	str.w	r8, [r4, #24]
 8015e88:	6a28      	ldr	r0, [r5, #32]
 8015e8a:	b120      	cbz	r0, 8015e96 <rcl_wait_set_fini+0xd2>
 8015e8c:	47b8      	blx	r7
 8015e8e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015e90:	2300      	movs	r3, #0
 8015e92:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8015e96:	6a20      	ldr	r0, [r4, #32]
 8015e98:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8015e9c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015e9e:	2700      	movs	r7, #0
 8015ea0:	6267      	str	r7, [r4, #36]	; 0x24
 8015ea2:	626f      	str	r7, [r5, #36]	; 0x24
 8015ea4:	b120      	cbz	r0, 8015eb0 <rcl_wait_set_fini+0xec>
 8015ea6:	9101      	str	r1, [sp, #4]
 8015ea8:	47c0      	blx	r8
 8015eaa:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015eac:	9901      	ldr	r1, [sp, #4]
 8015eae:	6227      	str	r7, [r4, #32]
 8015eb0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8015eb2:	b120      	cbz	r0, 8015ebe <rcl_wait_set_fini+0xfa>
 8015eb4:	47c0      	blx	r8
 8015eb6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015eb8:	2300      	movs	r3, #0
 8015eba:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8015ebe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015ec0:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8015ec4:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015ec6:	2700      	movs	r7, #0
 8015ec8:	62e7      	str	r7, [r4, #44]	; 0x2c
 8015eca:	632f      	str	r7, [r5, #48]	; 0x30
 8015ecc:	b120      	cbz	r0, 8015ed8 <rcl_wait_set_fini+0x114>
 8015ece:	9101      	str	r1, [sp, #4]
 8015ed0:	47c0      	blx	r8
 8015ed2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015ed4:	9901      	ldr	r1, [sp, #4]
 8015ed6:	62a7      	str	r7, [r4, #40]	; 0x28
 8015ed8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8015eda:	b120      	cbz	r0, 8015ee6 <rcl_wait_set_fini+0x122>
 8015edc:	47c0      	blx	r8
 8015ede:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 8015ee6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8015ee8:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015eea:	4628      	mov	r0, r5
 8015eec:	4798      	blx	r3
 8015eee:	2300      	movs	r3, #0
 8015ef0:	6323      	str	r3, [r4, #48]	; 0x30
 8015ef2:	4630      	mov	r0, r6
 8015ef4:	b002      	add	sp, #8
 8015ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015efa:	260b      	movs	r6, #11
 8015efc:	4630      	mov	r0, r6
 8015efe:	b002      	add	sp, #8
 8015f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015f04 <rcl_wait_set_add_subscription>:
 8015f04:	b320      	cbz	r0, 8015f50 <rcl_wait_set_add_subscription+0x4c>
 8015f06:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015f08:	b570      	push	{r4, r5, r6, lr}
 8015f0a:	4604      	mov	r4, r0
 8015f0c:	b1d3      	cbz	r3, 8015f44 <rcl_wait_set_add_subscription+0x40>
 8015f0e:	b319      	cbz	r1, 8015f58 <rcl_wait_set_add_subscription+0x54>
 8015f10:	681d      	ldr	r5, [r3, #0]
 8015f12:	6860      	ldr	r0, [r4, #4]
 8015f14:	4285      	cmp	r5, r0
 8015f16:	d218      	bcs.n	8015f4a <rcl_wait_set_add_subscription+0x46>
 8015f18:	6820      	ldr	r0, [r4, #0]
 8015f1a:	1c6e      	adds	r6, r5, #1
 8015f1c:	601e      	str	r6, [r3, #0]
 8015f1e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015f22:	b102      	cbz	r2, 8015f26 <rcl_wait_set_add_subscription+0x22>
 8015f24:	6015      	str	r5, [r2, #0]
 8015f26:	4608      	mov	r0, r1
 8015f28:	f7f8 ff60 	bl	800edec <rcl_subscription_get_rmw_handle>
 8015f2c:	b190      	cbz	r0, 8015f54 <rcl_wait_set_add_subscription+0x50>
 8015f2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015f30:	6842      	ldr	r2, [r0, #4]
 8015f32:	689b      	ldr	r3, [r3, #8]
 8015f34:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015f38:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015f3a:	6853      	ldr	r3, [r2, #4]
 8015f3c:	3301      	adds	r3, #1
 8015f3e:	6053      	str	r3, [r2, #4]
 8015f40:	2000      	movs	r0, #0
 8015f42:	bd70      	pop	{r4, r5, r6, pc}
 8015f44:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015f48:	bd70      	pop	{r4, r5, r6, pc}
 8015f4a:	f240 3086 	movw	r0, #902	; 0x386
 8015f4e:	bd70      	pop	{r4, r5, r6, pc}
 8015f50:	200b      	movs	r0, #11
 8015f52:	4770      	bx	lr
 8015f54:	2001      	movs	r0, #1
 8015f56:	bd70      	pop	{r4, r5, r6, pc}
 8015f58:	200b      	movs	r0, #11
 8015f5a:	bd70      	pop	{r4, r5, r6, pc}

08015f5c <rcl_wait_set_clear>:
 8015f5c:	2800      	cmp	r0, #0
 8015f5e:	d073      	beq.n	8016048 <rcl_wait_set_clear+0xec>
 8015f60:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015f62:	b510      	push	{r4, lr}
 8015f64:	4604      	mov	r4, r0
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d070      	beq.n	801604c <rcl_wait_set_clear+0xf0>
 8015f6a:	6800      	ldr	r0, [r0, #0]
 8015f6c:	b138      	cbz	r0, 8015f7e <rcl_wait_set_clear+0x22>
 8015f6e:	6862      	ldr	r2, [r4, #4]
 8015f70:	2100      	movs	r1, #0
 8015f72:	0092      	lsls	r2, r2, #2
 8015f74:	f004 fa88 	bl	801a488 <memset>
 8015f78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015f7a:	2200      	movs	r2, #0
 8015f7c:	601a      	str	r2, [r3, #0]
 8015f7e:	68a0      	ldr	r0, [r4, #8]
 8015f80:	b138      	cbz	r0, 8015f92 <rcl_wait_set_clear+0x36>
 8015f82:	68e2      	ldr	r2, [r4, #12]
 8015f84:	2100      	movs	r1, #0
 8015f86:	0092      	lsls	r2, r2, #2
 8015f88:	f004 fa7e 	bl	801a488 <memset>
 8015f8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015f8e:	2200      	movs	r2, #0
 8015f90:	60da      	str	r2, [r3, #12]
 8015f92:	69a0      	ldr	r0, [r4, #24]
 8015f94:	b138      	cbz	r0, 8015fa6 <rcl_wait_set_clear+0x4a>
 8015f96:	69e2      	ldr	r2, [r4, #28]
 8015f98:	2100      	movs	r1, #0
 8015f9a:	0092      	lsls	r2, r2, #2
 8015f9c:	f004 fa74 	bl	801a488 <memset>
 8015fa0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015fa2:	2200      	movs	r2, #0
 8015fa4:	619a      	str	r2, [r3, #24]
 8015fa6:	6a20      	ldr	r0, [r4, #32]
 8015fa8:	b138      	cbz	r0, 8015fba <rcl_wait_set_clear+0x5e>
 8015faa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8015fac:	2100      	movs	r1, #0
 8015fae:	0092      	lsls	r2, r2, #2
 8015fb0:	f004 fa6a 	bl	801a488 <memset>
 8015fb4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015fb6:	2200      	movs	r2, #0
 8015fb8:	625a      	str	r2, [r3, #36]	; 0x24
 8015fba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015fbc:	b138      	cbz	r0, 8015fce <rcl_wait_set_clear+0x72>
 8015fbe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015fc0:	2100      	movs	r1, #0
 8015fc2:	0092      	lsls	r2, r2, #2
 8015fc4:	f004 fa60 	bl	801a488 <memset>
 8015fc8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015fca:	2200      	movs	r2, #0
 8015fcc:	631a      	str	r2, [r3, #48]	; 0x30
 8015fce:	6920      	ldr	r0, [r4, #16]
 8015fd0:	b138      	cbz	r0, 8015fe2 <rcl_wait_set_clear+0x86>
 8015fd2:	6962      	ldr	r2, [r4, #20]
 8015fd4:	2100      	movs	r1, #0
 8015fd6:	0092      	lsls	r2, r2, #2
 8015fd8:	f004 fa56 	bl	801a488 <memset>
 8015fdc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015fde:	2200      	movs	r2, #0
 8015fe0:	641a      	str	r2, [r3, #64]	; 0x40
 8015fe2:	6898      	ldr	r0, [r3, #8]
 8015fe4:	b138      	cbz	r0, 8015ff6 <rcl_wait_set_clear+0x9a>
 8015fe6:	685a      	ldr	r2, [r3, #4]
 8015fe8:	2100      	movs	r1, #0
 8015fea:	0092      	lsls	r2, r2, #2
 8015fec:	f004 fa4c 	bl	801a488 <memset>
 8015ff0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	605a      	str	r2, [r3, #4]
 8015ff6:	6958      	ldr	r0, [r3, #20]
 8015ff8:	b138      	cbz	r0, 801600a <rcl_wait_set_clear+0xae>
 8015ffa:	691a      	ldr	r2, [r3, #16]
 8015ffc:	2100      	movs	r1, #0
 8015ffe:	0092      	lsls	r2, r2, #2
 8016000:	f004 fa42 	bl	801a488 <memset>
 8016004:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016006:	2200      	movs	r2, #0
 8016008:	611a      	str	r2, [r3, #16]
 801600a:	6a18      	ldr	r0, [r3, #32]
 801600c:	b138      	cbz	r0, 801601e <rcl_wait_set_clear+0xc2>
 801600e:	69da      	ldr	r2, [r3, #28]
 8016010:	2100      	movs	r1, #0
 8016012:	0092      	lsls	r2, r2, #2
 8016014:	f004 fa38 	bl	801a488 <memset>
 8016018:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801601a:	2200      	movs	r2, #0
 801601c:	61da      	str	r2, [r3, #28]
 801601e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8016020:	b138      	cbz	r0, 8016032 <rcl_wait_set_clear+0xd6>
 8016022:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016024:	2100      	movs	r1, #0
 8016026:	0092      	lsls	r2, r2, #2
 8016028:	f004 fa2e 	bl	801a488 <memset>
 801602c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801602e:	2200      	movs	r2, #0
 8016030:	629a      	str	r2, [r3, #40]	; 0x28
 8016032:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8016034:	b138      	cbz	r0, 8016046 <rcl_wait_set_clear+0xea>
 8016036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016038:	2100      	movs	r1, #0
 801603a:	0092      	lsls	r2, r2, #2
 801603c:	f004 fa24 	bl	801a488 <memset>
 8016040:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016042:	2000      	movs	r0, #0
 8016044:	6358      	str	r0, [r3, #52]	; 0x34
 8016046:	bd10      	pop	{r4, pc}
 8016048:	200b      	movs	r0, #11
 801604a:	4770      	bx	lr
 801604c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016050:	bd10      	pop	{r4, pc}
 8016052:	bf00      	nop

08016054 <rcl_wait_set_resize>:
 8016054:	2800      	cmp	r0, #0
 8016056:	f000 81a6 	beq.w	80163a6 <rcl_wait_set_resize+0x352>
 801605a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801605e:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 8016062:	b083      	sub	sp, #12
 8016064:	4604      	mov	r4, r0
 8016066:	f1ba 0f00 	cmp.w	sl, #0
 801606a:	f000 819e 	beq.w	80163aa <rcl_wait_set_resize+0x356>
 801606e:	461e      	mov	r6, r3
 8016070:	e9da b313 	ldrd	fp, r3, [sl, #76]	; 0x4c
 8016074:	f04f 0800 	mov.w	r8, #0
 8016078:	f8da 9058 	ldr.w	r9, [sl, #88]	; 0x58
 801607c:	9300      	str	r3, [sp, #0]
 801607e:	f8c0 8004 	str.w	r8, [r0, #4]
 8016082:	460f      	mov	r7, r1
 8016084:	4615      	mov	r5, r2
 8016086:	f8ca 8000 	str.w	r8, [sl]
 801608a:	2900      	cmp	r1, #0
 801608c:	f000 80c9 	beq.w	8016222 <rcl_wait_set_resize+0x1ce>
 8016090:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8016094:	6800      	ldr	r0, [r0, #0]
 8016096:	4651      	mov	r1, sl
 8016098:	464a      	mov	r2, r9
 801609a:	4798      	blx	r3
 801609c:	6020      	str	r0, [r4, #0]
 801609e:	2800      	cmp	r0, #0
 80160a0:	f000 80d8 	beq.w	8016254 <rcl_wait_set_resize+0x200>
 80160a4:	4652      	mov	r2, sl
 80160a6:	4641      	mov	r1, r8
 80160a8:	f004 f9ee 	bl	801a488 <memset>
 80160ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80160ae:	6067      	str	r7, [r4, #4]
 80160b0:	6898      	ldr	r0, [r3, #8]
 80160b2:	f8c3 8004 	str.w	r8, [r3, #4]
 80160b6:	9301      	str	r3, [sp, #4]
 80160b8:	464a      	mov	r2, r9
 80160ba:	9b00      	ldr	r3, [sp, #0]
 80160bc:	4651      	mov	r1, sl
 80160be:	4798      	blx	r3
 80160c0:	9b01      	ldr	r3, [sp, #4]
 80160c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80160c4:	6098      	str	r0, [r3, #8]
 80160c6:	6897      	ldr	r7, [r2, #8]
 80160c8:	2f00      	cmp	r7, #0
 80160ca:	f000 80be 	beq.w	801624a <rcl_wait_set_resize+0x1f6>
 80160ce:	4652      	mov	r2, sl
 80160d0:	4641      	mov	r1, r8
 80160d2:	4638      	mov	r0, r7
 80160d4:	f004 f9d8 	bl	801a488 <memset>
 80160d8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80160dc:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80160e0:	2700      	movs	r7, #0
 80160e2:	e9da 2313 	ldrd	r2, r3, [sl, #76]	; 0x4c
 80160e6:	60e7      	str	r7, [r4, #12]
 80160e8:	f8ca 700c 	str.w	r7, [sl, #12]
 80160ec:	2d00      	cmp	r5, #0
 80160ee:	f040 80b5 	bne.w	801625c <rcl_wait_set_resize+0x208>
 80160f2:	68a0      	ldr	r0, [r4, #8]
 80160f4:	b130      	cbz	r0, 8016104 <rcl_wait_set_resize+0xb0>
 80160f6:	4641      	mov	r1, r8
 80160f8:	4790      	blx	r2
 80160fa:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80160fe:	60a5      	str	r5, [r4, #8]
 8016100:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8016104:	2700      	movs	r7, #0
 8016106:	19ad      	adds	r5, r5, r6
 8016108:	f8ca 7010 	str.w	r7, [sl, #16]
 801610c:	f040 80be 	bne.w	801628c <rcl_wait_set_resize+0x238>
 8016110:	f8da 0014 	ldr.w	r0, [sl, #20]
 8016114:	b148      	cbz	r0, 801612a <rcl_wait_set_resize+0xd6>
 8016116:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 801611a:	4641      	mov	r1, r8
 801611c:	4798      	blx	r3
 801611e:	f8ca 5014 	str.w	r5, [sl, #20]
 8016122:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016126:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 801612a:	2500      	movs	r5, #0
 801612c:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 8016130:	6165      	str	r5, [r4, #20]
 8016132:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 8016136:	2e00      	cmp	r6, #0
 8016138:	f040 80bf 	bne.w	80162ba <rcl_wait_set_resize+0x266>
 801613c:	6920      	ldr	r0, [r4, #16]
 801613e:	b140      	cbz	r0, 8016152 <rcl_wait_set_resize+0xfe>
 8016140:	4641      	mov	r1, r8
 8016142:	47c8      	blx	r9
 8016144:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016148:	6126      	str	r6, [r4, #16]
 801614a:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 801614e:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8016152:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016154:	2500      	movs	r5, #0
 8016156:	61e5      	str	r5, [r4, #28]
 8016158:	f8ca 5018 	str.w	r5, [sl, #24]
 801615c:	2b00      	cmp	r3, #0
 801615e:	f040 80c1 	bne.w	80162e4 <rcl_wait_set_resize+0x290>
 8016162:	69a0      	ldr	r0, [r4, #24]
 8016164:	b128      	cbz	r0, 8016172 <rcl_wait_set_resize+0x11e>
 8016166:	4641      	mov	r1, r8
 8016168:	47c8      	blx	r9
 801616a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801616c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016170:	61a3      	str	r3, [r4, #24]
 8016172:	f8da 0020 	ldr.w	r0, [sl, #32]
 8016176:	b130      	cbz	r0, 8016186 <rcl_wait_set_resize+0x132>
 8016178:	4641      	mov	r1, r8
 801617a:	47c8      	blx	r9
 801617c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016180:	2300      	movs	r3, #0
 8016182:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8016186:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016188:	f8da 7058 	ldr.w	r7, [sl, #88]	; 0x58
 801618c:	2600      	movs	r6, #0
 801618e:	e9da 8913 	ldrd	r8, r9, [sl, #76]	; 0x4c
 8016192:	6266      	str	r6, [r4, #36]	; 0x24
 8016194:	f8ca 6024 	str.w	r6, [sl, #36]	; 0x24
 8016198:	2b00      	cmp	r3, #0
 801619a:	f000 80c8 	beq.w	801632e <rcl_wait_set_resize+0x2da>
 801619e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80161a2:	6a20      	ldr	r0, [r4, #32]
 80161a4:	4651      	mov	r1, sl
 80161a6:	463a      	mov	r2, r7
 80161a8:	47c8      	blx	r9
 80161aa:	6220      	str	r0, [r4, #32]
 80161ac:	2800      	cmp	r0, #0
 80161ae:	d051      	beq.n	8016254 <rcl_wait_set_resize+0x200>
 80161b0:	4652      	mov	r2, sl
 80161b2:	4631      	mov	r1, r6
 80161b4:	f004 f968 	bl	801a488 <memset>
 80161b8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80161ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80161bc:	6263      	str	r3, [r4, #36]	; 0x24
 80161be:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80161c0:	62ae      	str	r6, [r5, #40]	; 0x28
 80161c2:	463a      	mov	r2, r7
 80161c4:	4651      	mov	r1, sl
 80161c6:	47c8      	blx	r9
 80161c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80161ca:	62e8      	str	r0, [r5, #44]	; 0x2c
 80161cc:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80161ce:	2d00      	cmp	r5, #0
 80161d0:	f000 8105 	beq.w	80163de <rcl_wait_set_resize+0x38a>
 80161d4:	4652      	mov	r2, sl
 80161d6:	4631      	mov	r1, r6
 80161d8:	4628      	mov	r0, r5
 80161da:	f004 f955 	bl	801a488 <memset>
 80161de:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80161e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80161e4:	f8da 6058 	ldr.w	r6, [sl, #88]	; 0x58
 80161e8:	2500      	movs	r5, #0
 80161ea:	e9da 7913 	ldrd	r7, r9, [sl, #76]	; 0x4c
 80161ee:	62e5      	str	r5, [r4, #44]	; 0x2c
 80161f0:	f8ca 5030 	str.w	r5, [sl, #48]	; 0x30
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	f040 80af 	bne.w	8016358 <rcl_wait_set_resize+0x304>
 80161fa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80161fc:	b128      	cbz	r0, 801620a <rcl_wait_set_resize+0x1b6>
 80161fe:	4631      	mov	r1, r6
 8016200:	47b8      	blx	r7
 8016202:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016204:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016208:	62a3      	str	r3, [r4, #40]	; 0x28
 801620a:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 801620e:	b310      	cbz	r0, 8016256 <rcl_wait_set_resize+0x202>
 8016210:	4631      	mov	r1, r6
 8016212:	47b8      	blx	r7
 8016214:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016216:	2000      	movs	r0, #0
 8016218:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 801621c:	b003      	add	sp, #12
 801621e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016222:	6800      	ldr	r0, [r0, #0]
 8016224:	b120      	cbz	r0, 8016230 <rcl_wait_set_resize+0x1dc>
 8016226:	4649      	mov	r1, r9
 8016228:	47d8      	blx	fp
 801622a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801622e:	6027      	str	r7, [r4, #0]
 8016230:	f8da 0008 	ldr.w	r0, [sl, #8]
 8016234:	2800      	cmp	r0, #0
 8016236:	f43f af51 	beq.w	80160dc <rcl_wait_set_resize+0x88>
 801623a:	4649      	mov	r1, r9
 801623c:	47d8      	blx	fp
 801623e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016242:	2300      	movs	r3, #0
 8016244:	e9ca 3301 	strd	r3, r3, [sl, #4]
 8016248:	e748      	b.n	80160dc <rcl_wait_set_resize+0x88>
 801624a:	6820      	ldr	r0, [r4, #0]
 801624c:	4649      	mov	r1, r9
 801624e:	47d8      	blx	fp
 8016250:	e9c4 7700 	strd	r7, r7, [r4]
 8016254:	200a      	movs	r0, #10
 8016256:	b003      	add	sp, #12
 8016258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801625c:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8016260:	68a0      	ldr	r0, [r4, #8]
 8016262:	4642      	mov	r2, r8
 8016264:	4649      	mov	r1, r9
 8016266:	4798      	blx	r3
 8016268:	60a0      	str	r0, [r4, #8]
 801626a:	2800      	cmp	r0, #0
 801626c:	d0f2      	beq.n	8016254 <rcl_wait_set_resize+0x200>
 801626e:	4639      	mov	r1, r7
 8016270:	464a      	mov	r2, r9
 8016272:	f004 f909 	bl	801a488 <memset>
 8016276:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801627a:	60e5      	str	r5, [r4, #12]
 801627c:	2700      	movs	r7, #0
 801627e:	19ad      	adds	r5, r5, r6
 8016280:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8016284:	f8ca 7010 	str.w	r7, [sl, #16]
 8016288:	f43f af42 	beq.w	8016110 <rcl_wait_set_resize+0xbc>
 801628c:	00ad      	lsls	r5, r5, #2
 801628e:	4642      	mov	r2, r8
 8016290:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 8016294:	f8da 0014 	ldr.w	r0, [sl, #20]
 8016298:	4629      	mov	r1, r5
 801629a:	4798      	blx	r3
 801629c:	4680      	mov	r8, r0
 801629e:	f8ca 0014 	str.w	r0, [sl, #20]
 80162a2:	2800      	cmp	r0, #0
 80162a4:	f000 8084 	beq.w	80163b0 <rcl_wait_set_resize+0x35c>
 80162a8:	462a      	mov	r2, r5
 80162aa:	4639      	mov	r1, r7
 80162ac:	f004 f8ec 	bl	801a488 <memset>
 80162b0:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80162b4:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80162b8:	e737      	b.n	801612a <rcl_wait_set_resize+0xd6>
 80162ba:	ea4f 0986 	mov.w	r9, r6, lsl #2
 80162be:	6920      	ldr	r0, [r4, #16]
 80162c0:	4642      	mov	r2, r8
 80162c2:	4649      	mov	r1, r9
 80162c4:	47b8      	blx	r7
 80162c6:	6120      	str	r0, [r4, #16]
 80162c8:	2800      	cmp	r0, #0
 80162ca:	d0c3      	beq.n	8016254 <rcl_wait_set_resize+0x200>
 80162cc:	464a      	mov	r2, r9
 80162ce:	4629      	mov	r1, r5
 80162d0:	f004 f8da 	bl	801a488 <memset>
 80162d4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80162d8:	6166      	str	r6, [r4, #20]
 80162da:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 80162de:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80162e2:	e736      	b.n	8016152 <rcl_wait_set_resize+0xfe>
 80162e4:	009e      	lsls	r6, r3, #2
 80162e6:	69a0      	ldr	r0, [r4, #24]
 80162e8:	4631      	mov	r1, r6
 80162ea:	4642      	mov	r2, r8
 80162ec:	47b8      	blx	r7
 80162ee:	61a0      	str	r0, [r4, #24]
 80162f0:	2800      	cmp	r0, #0
 80162f2:	d0af      	beq.n	8016254 <rcl_wait_set_resize+0x200>
 80162f4:	4632      	mov	r2, r6
 80162f6:	4629      	mov	r1, r5
 80162f8:	f004 f8c6 	bl	801a488 <memset>
 80162fc:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016300:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016302:	61e3      	str	r3, [r4, #28]
 8016304:	f8da 0020 	ldr.w	r0, [sl, #32]
 8016308:	f8ca 501c 	str.w	r5, [sl, #28]
 801630c:	4642      	mov	r2, r8
 801630e:	4631      	mov	r1, r6
 8016310:	47b8      	blx	r7
 8016312:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016314:	f8ca 0020 	str.w	r0, [sl, #32]
 8016318:	6a1f      	ldr	r7, [r3, #32]
 801631a:	2f00      	cmp	r7, #0
 801631c:	d058      	beq.n	80163d0 <rcl_wait_set_resize+0x37c>
 801631e:	4632      	mov	r2, r6
 8016320:	4629      	mov	r1, r5
 8016322:	4638      	mov	r0, r7
 8016324:	f004 f8b0 	bl	801a488 <memset>
 8016328:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801632c:	e72b      	b.n	8016186 <rcl_wait_set_resize+0x132>
 801632e:	6a20      	ldr	r0, [r4, #32]
 8016330:	b128      	cbz	r0, 801633e <rcl_wait_set_resize+0x2ea>
 8016332:	4639      	mov	r1, r7
 8016334:	47c0      	blx	r8
 8016336:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016338:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801633c:	6223      	str	r3, [r4, #32]
 801633e:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 8016342:	2800      	cmp	r0, #0
 8016344:	f43f af4d 	beq.w	80161e2 <rcl_wait_set_resize+0x18e>
 8016348:	4639      	mov	r1, r7
 801634a:	47c0      	blx	r8
 801634c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016350:	2300      	movs	r3, #0
 8016352:	e9ca 330a 	strd	r3, r3, [sl, #40]	; 0x28
 8016356:	e744      	b.n	80161e2 <rcl_wait_set_resize+0x18e>
 8016358:	ea4f 0883 	mov.w	r8, r3, lsl #2
 801635c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801635e:	4641      	mov	r1, r8
 8016360:	4632      	mov	r2, r6
 8016362:	47c8      	blx	r9
 8016364:	62a0      	str	r0, [r4, #40]	; 0x28
 8016366:	2800      	cmp	r0, #0
 8016368:	f43f af74 	beq.w	8016254 <rcl_wait_set_resize+0x200>
 801636c:	4642      	mov	r2, r8
 801636e:	4629      	mov	r1, r5
 8016370:	f004 f88a 	bl	801a488 <memset>
 8016374:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016378:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801637a:	62e3      	str	r3, [r4, #44]	; 0x2c
 801637c:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8016380:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 8016384:	4632      	mov	r2, r6
 8016386:	4641      	mov	r1, r8
 8016388:	47c8      	blx	r9
 801638a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801638c:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8016390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016392:	b35b      	cbz	r3, 80163ec <rcl_wait_set_resize+0x398>
 8016394:	4642      	mov	r2, r8
 8016396:	4618      	mov	r0, r3
 8016398:	4629      	mov	r1, r5
 801639a:	f004 f875 	bl	801a488 <memset>
 801639e:	4628      	mov	r0, r5
 80163a0:	b003      	add	sp, #12
 80163a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163a6:	200b      	movs	r0, #11
 80163a8:	4770      	bx	lr
 80163aa:	f44f 7061 	mov.w	r0, #900	; 0x384
 80163ae:	e752      	b.n	8016256 <rcl_wait_set_resize+0x202>
 80163b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80163b2:	68a0      	ldr	r0, [r4, #8]
 80163b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80163b6:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80163b8:	4790      	blx	r2
 80163ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80163bc:	6920      	ldr	r0, [r4, #16]
 80163be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80163c0:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80163c2:	e9c4 8802 	strd	r8, r8, [r4, #8]
 80163c6:	4790      	blx	r2
 80163c8:	e9c4 8804 	strd	r8, r8, [r4, #16]
 80163cc:	200a      	movs	r0, #10
 80163ce:	e742      	b.n	8016256 <rcl_wait_set_resize+0x202>
 80163d0:	69a0      	ldr	r0, [r4, #24]
 80163d2:	4641      	mov	r1, r8
 80163d4:	47c8      	blx	r9
 80163d6:	e9c4 7706 	strd	r7, r7, [r4, #24]
 80163da:	200a      	movs	r0, #10
 80163dc:	e73b      	b.n	8016256 <rcl_wait_set_resize+0x202>
 80163de:	6a20      	ldr	r0, [r4, #32]
 80163e0:	4639      	mov	r1, r7
 80163e2:	47c0      	blx	r8
 80163e4:	e9c4 5508 	strd	r5, r5, [r4, #32]
 80163e8:	200a      	movs	r0, #10
 80163ea:	e734      	b.n	8016256 <rcl_wait_set_resize+0x202>
 80163ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80163ee:	9300      	str	r3, [sp, #0]
 80163f0:	4631      	mov	r1, r6
 80163f2:	47b8      	blx	r7
 80163f4:	9b00      	ldr	r3, [sp, #0]
 80163f6:	200a      	movs	r0, #10
 80163f8:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 80163fc:	e72b      	b.n	8016256 <rcl_wait_set_resize+0x202>
 80163fe:	bf00      	nop

08016400 <rcl_wait_set_init>:
 8016400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016404:	b084      	sub	sp, #16
 8016406:	4604      	mov	r4, r0
 8016408:	a810      	add	r0, sp, #64	; 0x40
 801640a:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 801640e:	460f      	mov	r7, r1
 8016410:	4690      	mov	r8, r2
 8016412:	4699      	mov	r9, r3
 8016414:	f7f9 f96a 	bl	800f6ec <rcutils_allocator_is_valid>
 8016418:	2800      	cmp	r0, #0
 801641a:	d06b      	beq.n	80164f4 <rcl_wait_set_init+0xf4>
 801641c:	2c00      	cmp	r4, #0
 801641e:	d069      	beq.n	80164f4 <rcl_wait_set_init+0xf4>
 8016420:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016422:	b125      	cbz	r5, 801642e <rcl_wait_set_init+0x2e>
 8016424:	2564      	movs	r5, #100	; 0x64
 8016426:	4628      	mov	r0, r5
 8016428:	b004      	add	sp, #16
 801642a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801642e:	f1ba 0f00 	cmp.w	sl, #0
 8016432:	d05f      	beq.n	80164f4 <rcl_wait_set_init+0xf4>
 8016434:	4650      	mov	r0, sl
 8016436:	f7fe faa5 	bl	8014984 <rcl_context_is_valid>
 801643a:	2800      	cmp	r0, #0
 801643c:	d067      	beq.n	801650e <rcl_wait_set_init+0x10e>
 801643e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016440:	9914      	ldr	r1, [sp, #80]	; 0x50
 8016442:	205c      	movs	r0, #92	; 0x5c
 8016444:	4798      	blx	r3
 8016446:	6320      	str	r0, [r4, #48]	; 0x30
 8016448:	2800      	cmp	r0, #0
 801644a:	d062      	beq.n	8016512 <rcl_wait_set_init+0x112>
 801644c:	225c      	movs	r2, #92	; 0x5c
 801644e:	4629      	mov	r1, r5
 8016450:	f004 f81a 	bl	801a488 <memset>
 8016454:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8016458:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801645c:	6b26      	ldr	r6, [r4, #48]	; 0x30
 801645e:	f8dc e000 	ldr.w	lr, [ip]
 8016462:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 8016466:	f106 0c48 	add.w	ip, r6, #72	; 0x48
 801646a:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801646e:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8016472:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 8016476:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 801647a:	60b5      	str	r5, [r6, #8]
 801647c:	6075      	str	r5, [r6, #4]
 801647e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016482:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8016486:	1899      	adds	r1, r3, r2
 8016488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801648a:	f8da 0000 	ldr.w	r0, [sl]
 801648e:	f8cc e000 	str.w	lr, [ip]
 8016492:	4419      	add	r1, r3
 8016494:	4441      	add	r1, r8
 8016496:	3028      	adds	r0, #40	; 0x28
 8016498:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 801649c:	f001 fc9c 	bl	8017dd8 <rmw_create_wait_set>
 80164a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80164a2:	63f0      	str	r0, [r6, #60]	; 0x3c
 80164a4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80164a6:	b350      	cbz	r0, 80164fe <rcl_wait_set_init+0xfe>
 80164a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164aa:	9302      	str	r3, [sp, #8]
 80164ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80164ae:	9301      	str	r3, [sp, #4]
 80164b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80164b2:	9300      	str	r3, [sp, #0]
 80164b4:	4642      	mov	r2, r8
 80164b6:	464b      	mov	r3, r9
 80164b8:	4639      	mov	r1, r7
 80164ba:	4620      	mov	r0, r4
 80164bc:	f7ff fdca 	bl	8016054 <rcl_wait_set_resize>
 80164c0:	4605      	mov	r5, r0
 80164c2:	2800      	cmp	r0, #0
 80164c4:	d0af      	beq.n	8016426 <rcl_wait_set_init+0x26>
 80164c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80164c8:	bb2b      	cbnz	r3, 8016516 <rcl_wait_set_init+0x116>
 80164ca:	2600      	movs	r6, #0
 80164cc:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80164d0:	9600      	str	r6, [sp, #0]
 80164d2:	4633      	mov	r3, r6
 80164d4:	4632      	mov	r2, r6
 80164d6:	4631      	mov	r1, r6
 80164d8:	4620      	mov	r0, r4
 80164da:	f7ff fdbb 	bl	8016054 <rcl_wait_set_resize>
 80164de:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80164e0:	2800      	cmp	r0, #0
 80164e2:	d0a0      	beq.n	8016426 <rcl_wait_set_init+0x26>
 80164e4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80164e6:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80164e8:	4798      	blx	r3
 80164ea:	4628      	mov	r0, r5
 80164ec:	6326      	str	r6, [r4, #48]	; 0x30
 80164ee:	b004      	add	sp, #16
 80164f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164f4:	250b      	movs	r5, #11
 80164f6:	4628      	mov	r0, r5
 80164f8:	b004      	add	sp, #16
 80164fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164fe:	2501      	movs	r5, #1
 8016500:	f001 fc74 	bl	8017dec <rmw_destroy_wait_set>
 8016504:	2800      	cmp	r0, #0
 8016506:	bf18      	it	ne
 8016508:	f44f 7561 	movne.w	r5, #900	; 0x384
 801650c:	e7dd      	b.n	80164ca <rcl_wait_set_init+0xca>
 801650e:	2565      	movs	r5, #101	; 0x65
 8016510:	e789      	b.n	8016426 <rcl_wait_set_init+0x26>
 8016512:	250a      	movs	r5, #10
 8016514:	e787      	b.n	8016426 <rcl_wait_set_init+0x26>
 8016516:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8016518:	e7f2      	b.n	8016500 <rcl_wait_set_init+0x100>
 801651a:	bf00      	nop

0801651c <rcl_wait_set_add_guard_condition>:
 801651c:	b320      	cbz	r0, 8016568 <rcl_wait_set_add_guard_condition+0x4c>
 801651e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016520:	b570      	push	{r4, r5, r6, lr}
 8016522:	4604      	mov	r4, r0
 8016524:	b1d3      	cbz	r3, 801655c <rcl_wait_set_add_guard_condition+0x40>
 8016526:	b319      	cbz	r1, 8016570 <rcl_wait_set_add_guard_condition+0x54>
 8016528:	68dd      	ldr	r5, [r3, #12]
 801652a:	68e0      	ldr	r0, [r4, #12]
 801652c:	4285      	cmp	r5, r0
 801652e:	d218      	bcs.n	8016562 <rcl_wait_set_add_guard_condition+0x46>
 8016530:	68a0      	ldr	r0, [r4, #8]
 8016532:	1c6e      	adds	r6, r5, #1
 8016534:	60de      	str	r6, [r3, #12]
 8016536:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801653a:	b102      	cbz	r2, 801653e <rcl_wait_set_add_guard_condition+0x22>
 801653c:	6015      	str	r5, [r2, #0]
 801653e:	4608      	mov	r0, r1
 8016540:	f003 f96c 	bl	801981c <rcl_guard_condition_get_rmw_handle>
 8016544:	b190      	cbz	r0, 801656c <rcl_wait_set_add_guard_condition+0x50>
 8016546:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016548:	6842      	ldr	r2, [r0, #4]
 801654a:	695b      	ldr	r3, [r3, #20]
 801654c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016550:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016552:	6913      	ldr	r3, [r2, #16]
 8016554:	3301      	adds	r3, #1
 8016556:	6113      	str	r3, [r2, #16]
 8016558:	2000      	movs	r0, #0
 801655a:	bd70      	pop	{r4, r5, r6, pc}
 801655c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016560:	bd70      	pop	{r4, r5, r6, pc}
 8016562:	f240 3086 	movw	r0, #902	; 0x386
 8016566:	bd70      	pop	{r4, r5, r6, pc}
 8016568:	200b      	movs	r0, #11
 801656a:	4770      	bx	lr
 801656c:	2001      	movs	r0, #1
 801656e:	bd70      	pop	{r4, r5, r6, pc}
 8016570:	200b      	movs	r0, #11
 8016572:	bd70      	pop	{r4, r5, r6, pc}

08016574 <rcl_wait_set_add_timer>:
 8016574:	b340      	cbz	r0, 80165c8 <rcl_wait_set_add_timer+0x54>
 8016576:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016578:	b570      	push	{r4, r5, r6, lr}
 801657a:	4604      	mov	r4, r0
 801657c:	b1f3      	cbz	r3, 80165bc <rcl_wait_set_add_timer+0x48>
 801657e:	b329      	cbz	r1, 80165cc <rcl_wait_set_add_timer+0x58>
 8016580:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8016582:	6965      	ldr	r5, [r4, #20]
 8016584:	42a8      	cmp	r0, r5
 8016586:	d21c      	bcs.n	80165c2 <rcl_wait_set_add_timer+0x4e>
 8016588:	6925      	ldr	r5, [r4, #16]
 801658a:	1c46      	adds	r6, r0, #1
 801658c:	641e      	str	r6, [r3, #64]	; 0x40
 801658e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8016592:	b102      	cbz	r2, 8016596 <rcl_wait_set_add_timer+0x22>
 8016594:	6010      	str	r0, [r2, #0]
 8016596:	4608      	mov	r0, r1
 8016598:	f7ff faa4 	bl	8015ae4 <rcl_timer_get_guard_condition>
 801659c:	b168      	cbz	r0, 80165ba <rcl_wait_set_add_timer+0x46>
 801659e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80165a0:	68e3      	ldr	r3, [r4, #12]
 80165a2:	6c15      	ldr	r5, [r2, #64]	; 0x40
 80165a4:	3b01      	subs	r3, #1
 80165a6:	441d      	add	r5, r3
 80165a8:	f003 f938 	bl	801981c <rcl_guard_condition_get_rmw_handle>
 80165ac:	b180      	cbz	r0, 80165d0 <rcl_wait_set_add_timer+0x5c>
 80165ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80165b0:	6842      	ldr	r2, [r0, #4]
 80165b2:	695b      	ldr	r3, [r3, #20]
 80165b4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80165b8:	2000      	movs	r0, #0
 80165ba:	bd70      	pop	{r4, r5, r6, pc}
 80165bc:	f44f 7061 	mov.w	r0, #900	; 0x384
 80165c0:	bd70      	pop	{r4, r5, r6, pc}
 80165c2:	f240 3086 	movw	r0, #902	; 0x386
 80165c6:	bd70      	pop	{r4, r5, r6, pc}
 80165c8:	200b      	movs	r0, #11
 80165ca:	4770      	bx	lr
 80165cc:	200b      	movs	r0, #11
 80165ce:	bd70      	pop	{r4, r5, r6, pc}
 80165d0:	2001      	movs	r0, #1
 80165d2:	bd70      	pop	{r4, r5, r6, pc}

080165d4 <rcl_wait_set_add_client>:
 80165d4:	b320      	cbz	r0, 8016620 <rcl_wait_set_add_client+0x4c>
 80165d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80165d8:	b570      	push	{r4, r5, r6, lr}
 80165da:	4604      	mov	r4, r0
 80165dc:	b1d3      	cbz	r3, 8016614 <rcl_wait_set_add_client+0x40>
 80165de:	b319      	cbz	r1, 8016628 <rcl_wait_set_add_client+0x54>
 80165e0:	699d      	ldr	r5, [r3, #24]
 80165e2:	69e0      	ldr	r0, [r4, #28]
 80165e4:	4285      	cmp	r5, r0
 80165e6:	d218      	bcs.n	801661a <rcl_wait_set_add_client+0x46>
 80165e8:	69a0      	ldr	r0, [r4, #24]
 80165ea:	1c6e      	adds	r6, r5, #1
 80165ec:	619e      	str	r6, [r3, #24]
 80165ee:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80165f2:	b102      	cbz	r2, 80165f6 <rcl_wait_set_add_client+0x22>
 80165f4:	6015      	str	r5, [r2, #0]
 80165f6:	4608      	mov	r0, r1
 80165f8:	f7fe f964 	bl	80148c4 <rcl_client_get_rmw_handle>
 80165fc:	b190      	cbz	r0, 8016624 <rcl_wait_set_add_client+0x50>
 80165fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016600:	6842      	ldr	r2, [r0, #4]
 8016602:	6a1b      	ldr	r3, [r3, #32]
 8016604:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016608:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801660a:	69d3      	ldr	r3, [r2, #28]
 801660c:	3301      	adds	r3, #1
 801660e:	61d3      	str	r3, [r2, #28]
 8016610:	2000      	movs	r0, #0
 8016612:	bd70      	pop	{r4, r5, r6, pc}
 8016614:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016618:	bd70      	pop	{r4, r5, r6, pc}
 801661a:	f240 3086 	movw	r0, #902	; 0x386
 801661e:	bd70      	pop	{r4, r5, r6, pc}
 8016620:	200b      	movs	r0, #11
 8016622:	4770      	bx	lr
 8016624:	2001      	movs	r0, #1
 8016626:	bd70      	pop	{r4, r5, r6, pc}
 8016628:	200b      	movs	r0, #11
 801662a:	bd70      	pop	{r4, r5, r6, pc}

0801662c <rcl_wait_set_add_service>:
 801662c:	b320      	cbz	r0, 8016678 <rcl_wait_set_add_service+0x4c>
 801662e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016630:	b570      	push	{r4, r5, r6, lr}
 8016632:	4604      	mov	r4, r0
 8016634:	b1d3      	cbz	r3, 801666c <rcl_wait_set_add_service+0x40>
 8016636:	b319      	cbz	r1, 8016680 <rcl_wait_set_add_service+0x54>
 8016638:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801663a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801663c:	4285      	cmp	r5, r0
 801663e:	d218      	bcs.n	8016672 <rcl_wait_set_add_service+0x46>
 8016640:	6a20      	ldr	r0, [r4, #32]
 8016642:	1c6e      	adds	r6, r5, #1
 8016644:	625e      	str	r6, [r3, #36]	; 0x24
 8016646:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801664a:	b102      	cbz	r2, 801664e <rcl_wait_set_add_service+0x22>
 801664c:	6015      	str	r5, [r2, #0]
 801664e:	4608      	mov	r0, r1
 8016650:	f7ff f84e 	bl	80156f0 <rcl_service_get_rmw_handle>
 8016654:	b190      	cbz	r0, 801667c <rcl_wait_set_add_service+0x50>
 8016656:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016658:	6842      	ldr	r2, [r0, #4]
 801665a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801665c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016660:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016662:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8016664:	3301      	adds	r3, #1
 8016666:	6293      	str	r3, [r2, #40]	; 0x28
 8016668:	2000      	movs	r0, #0
 801666a:	bd70      	pop	{r4, r5, r6, pc}
 801666c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016670:	bd70      	pop	{r4, r5, r6, pc}
 8016672:	f240 3086 	movw	r0, #902	; 0x386
 8016676:	bd70      	pop	{r4, r5, r6, pc}
 8016678:	200b      	movs	r0, #11
 801667a:	4770      	bx	lr
 801667c:	2001      	movs	r0, #1
 801667e:	bd70      	pop	{r4, r5, r6, pc}
 8016680:	200b      	movs	r0, #11
 8016682:	bd70      	pop	{r4, r5, r6, pc}
 8016684:	0000      	movs	r0, r0
	...

08016688 <rcl_wait>:
 8016688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801668c:	b08f      	sub	sp, #60	; 0x3c
 801668e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016692:	2800      	cmp	r0, #0
 8016694:	f000 814c 	beq.w	8016930 <rcl_wait+0x2a8>
 8016698:	6b05      	ldr	r5, [r0, #48]	; 0x30
 801669a:	4604      	mov	r4, r0
 801669c:	2d00      	cmp	r5, #0
 801669e:	f000 80bc 	beq.w	801681a <rcl_wait+0x192>
 80166a2:	6843      	ldr	r3, [r0, #4]
 80166a4:	b973      	cbnz	r3, 80166c4 <rcl_wait+0x3c>
 80166a6:	68e3      	ldr	r3, [r4, #12]
 80166a8:	b963      	cbnz	r3, 80166c4 <rcl_wait+0x3c>
 80166aa:	6963      	ldr	r3, [r4, #20]
 80166ac:	b953      	cbnz	r3, 80166c4 <rcl_wait+0x3c>
 80166ae:	69e3      	ldr	r3, [r4, #28]
 80166b0:	b943      	cbnz	r3, 80166c4 <rcl_wait+0x3c>
 80166b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80166b4:	b933      	cbnz	r3, 80166c4 <rcl_wait+0x3c>
 80166b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80166b8:	b923      	cbnz	r3, 80166c4 <rcl_wait+0x3c>
 80166ba:	f240 3085 	movw	r0, #901	; 0x385
 80166be:	b00f      	add	sp, #60	; 0x3c
 80166c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80166c8:	2a01      	cmp	r2, #1
 80166ca:	f173 0300 	sbcs.w	r3, r3, #0
 80166ce:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80166d0:	db56      	blt.n	8016780 <rcl_wait+0xf8>
 80166d2:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80166d6:	2900      	cmp	r1, #0
 80166d8:	f000 8149 	beq.w	801696e <rcl_wait+0x2e6>
 80166dc:	2300      	movs	r3, #0
 80166de:	9307      	str	r3, [sp, #28]
 80166e0:	469b      	mov	fp, r3
 80166e2:	f04f 0800 	mov.w	r8, #0
 80166e6:	f04f 0900 	mov.w	r9, #0
 80166ea:	e00d      	b.n	8016708 <rcl_wait+0x80>
 80166ec:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80166ee:	6922      	ldr	r2, [r4, #16]
 80166f0:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80166f2:	f842 000a 	str.w	r0, [r2, sl]
 80166f6:	f118 0801 	adds.w	r8, r8, #1
 80166fa:	f149 0900 	adc.w	r9, r9, #0
 80166fe:	2300      	movs	r3, #0
 8016700:	4599      	cmp	r9, r3
 8016702:	bf08      	it	eq
 8016704:	4588      	cmpeq	r8, r1
 8016706:	d243      	bcs.n	8016790 <rcl_wait+0x108>
 8016708:	6922      	ldr	r2, [r4, #16]
 801670a:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 801670e:	f852 000a 	ldr.w	r0, [r2, sl]
 8016712:	2800      	cmp	r0, #0
 8016714:	d0ef      	beq.n	80166f6 <rcl_wait+0x6e>
 8016716:	68e2      	ldr	r2, [r4, #12]
 8016718:	6969      	ldr	r1, [r5, #20]
 801671a:	4442      	add	r2, r8
 801671c:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8016720:	b13b      	cbz	r3, 8016732 <rcl_wait+0xaa>
 8016722:	692a      	ldr	r2, [r5, #16]
 8016724:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8016728:	6921      	ldr	r1, [r4, #16]
 801672a:	3201      	adds	r2, #1
 801672c:	f851 000a 	ldr.w	r0, [r1, sl]
 8016730:	612a      	str	r2, [r5, #16]
 8016732:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8016736:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
 801673a:	f7ff f9c1 	bl	8015ac0 <rcl_timer_is_canceled>
 801673e:	2800      	cmp	r0, #0
 8016740:	d1bd      	bne.n	80166be <rcl_wait+0x36>
 8016742:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8016746:	2a00      	cmp	r2, #0
 8016748:	d1d0      	bne.n	80166ec <rcl_wait+0x64>
 801674a:	6922      	ldr	r2, [r4, #16]
 801674c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016750:	f852 000a 	ldr.w	r0, [r2, sl]
 8016754:	a90a      	add	r1, sp, #40	; 0x28
 8016756:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801675a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801675e:	f7ff f98b 	bl	8015a78 <rcl_timer_get_time_until_next_call>
 8016762:	2800      	cmp	r0, #0
 8016764:	d1ab      	bne.n	80166be <rcl_wait+0x36>
 8016766:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801676a:	42b2      	cmp	r2, r6
 801676c:	eb73 0107 	sbcs.w	r1, r3, r7
 8016770:	da03      	bge.n	801677a <rcl_wait+0xf2>
 8016772:	461f      	mov	r7, r3
 8016774:	2301      	movs	r3, #1
 8016776:	4616      	mov	r6, r2
 8016778:	9307      	str	r3, [sp, #28]
 801677a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801677c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 801677e:	e7ba      	b.n	80166f6 <rcl_wait+0x6e>
 8016780:	2900      	cmp	r1, #0
 8016782:	f000 80de 	beq.w	8016942 <rcl_wait+0x2ba>
 8016786:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801678a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801678e:	e7a5      	b.n	80166dc <rcl_wait+0x54>
 8016790:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016794:	4313      	orrs	r3, r2
 8016796:	d145      	bne.n	8016824 <rcl_wait+0x19c>
 8016798:	2300      	movs	r3, #0
 801679a:	2200      	movs	r2, #0
 801679c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80167a0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80167a4:	ab0a      	add	r3, sp, #40	; 0x28
 80167a6:	9302      	str	r3, [sp, #8]
 80167a8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80167aa:	9301      	str	r3, [sp, #4]
 80167ac:	f105 0334 	add.w	r3, r5, #52	; 0x34
 80167b0:	9300      	str	r3, [sp, #0]
 80167b2:	f105 0228 	add.w	r2, r5, #40	; 0x28
 80167b6:	f105 031c 	add.w	r3, r5, #28
 80167ba:	f105 0110 	add.w	r1, r5, #16
 80167be:	1d28      	adds	r0, r5, #4
 80167c0:	f001 f98a 	bl	8017ad8 <rmw_wait>
 80167c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80167c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80167c8:	4680      	mov	r8, r0
 80167ca:	b30a      	cbz	r2, 8016810 <rcl_wait+0x188>
 80167cc:	2500      	movs	r5, #0
 80167ce:	462f      	mov	r7, r5
 80167d0:	e004      	b.n	80167dc <rcl_wait+0x154>
 80167d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80167d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80167d6:	3501      	adds	r5, #1
 80167d8:	42aa      	cmp	r2, r5
 80167da:	d919      	bls.n	8016810 <rcl_wait+0x188>
 80167dc:	6922      	ldr	r2, [r4, #16]
 80167de:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80167e2:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 80167e6:	00ae      	lsls	r6, r5, #2
 80167e8:	2800      	cmp	r0, #0
 80167ea:	d0f3      	beq.n	80167d4 <rcl_wait+0x14c>
 80167ec:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 80167f0:	f7ff f90a 	bl	8015a08 <rcl_timer_is_ready>
 80167f4:	2800      	cmp	r0, #0
 80167f6:	f47f af62 	bne.w	80166be <rcl_wait+0x36>
 80167fa:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 80167fe:	2a00      	cmp	r2, #0
 8016800:	d1e7      	bne.n	80167d2 <rcl_wait+0x14a>
 8016802:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016804:	6921      	ldr	r1, [r4, #16]
 8016806:	518a      	str	r2, [r1, r6]
 8016808:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801680a:	3501      	adds	r5, #1
 801680c:	42aa      	cmp	r2, r5
 801680e:	d8e5      	bhi.n	80167dc <rcl_wait+0x154>
 8016810:	f038 0002 	bics.w	r0, r8, #2
 8016814:	d029      	beq.n	801686a <rcl_wait+0x1e2>
 8016816:	2001      	movs	r0, #1
 8016818:	e751      	b.n	80166be <rcl_wait+0x36>
 801681a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801681e:	b00f      	add	sp, #60	; 0x3c
 8016820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016824:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016828:	2a01      	cmp	r2, #1
 801682a:	f173 0300 	sbcs.w	r3, r3, #0
 801682e:	f2c0 8083 	blt.w	8016938 <rcl_wait+0x2b0>
 8016832:	2e00      	cmp	r6, #0
 8016834:	f177 0300 	sbcs.w	r3, r7, #0
 8016838:	bfbc      	itt	lt
 801683a:	2600      	movlt	r6, #0
 801683c:	2700      	movlt	r7, #0
 801683e:	a34e      	add	r3, pc, #312	; (adr r3, 8016978 <rcl_wait+0x2f0>)
 8016840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016844:	4630      	mov	r0, r6
 8016846:	4639      	mov	r1, r7
 8016848:	f7ea f9d8 	bl	8000bfc <__aeabi_ldivmod>
 801684c:	a34a      	add	r3, pc, #296	; (adr r3, 8016978 <rcl_wait+0x2f0>)
 801684e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016852:	4680      	mov	r8, r0
 8016854:	4689      	mov	r9, r1
 8016856:	4630      	mov	r0, r6
 8016858:	4639      	mov	r1, r7
 801685a:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 801685e:	f7ea f9cd 	bl	8000bfc <__aeabi_ldivmod>
 8016862:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016866:	ab0a      	add	r3, sp, #40	; 0x28
 8016868:	e79d      	b.n	80167a6 <rcl_wait+0x11e>
 801686a:	6866      	ldr	r6, [r4, #4]
 801686c:	4602      	mov	r2, r0
 801686e:	b91e      	cbnz	r6, 8016878 <rcl_wait+0x1f0>
 8016870:	e00d      	b.n	801688e <rcl_wait+0x206>
 8016872:	3201      	adds	r2, #1
 8016874:	42b2      	cmp	r2, r6
 8016876:	d00a      	beq.n	801688e <rcl_wait+0x206>
 8016878:	6899      	ldr	r1, [r3, #8]
 801687a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801687e:	2900      	cmp	r1, #0
 8016880:	d1f7      	bne.n	8016872 <rcl_wait+0x1ea>
 8016882:	6825      	ldr	r5, [r4, #0]
 8016884:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016888:	3201      	adds	r2, #1
 801688a:	42b2      	cmp	r2, r6
 801688c:	d1f4      	bne.n	8016878 <rcl_wait+0x1f0>
 801688e:	68e6      	ldr	r6, [r4, #12]
 8016890:	2200      	movs	r2, #0
 8016892:	b91e      	cbnz	r6, 801689c <rcl_wait+0x214>
 8016894:	e00d      	b.n	80168b2 <rcl_wait+0x22a>
 8016896:	3201      	adds	r2, #1
 8016898:	42b2      	cmp	r2, r6
 801689a:	d00a      	beq.n	80168b2 <rcl_wait+0x22a>
 801689c:	6959      	ldr	r1, [r3, #20]
 801689e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80168a2:	2900      	cmp	r1, #0
 80168a4:	d1f7      	bne.n	8016896 <rcl_wait+0x20e>
 80168a6:	68a5      	ldr	r5, [r4, #8]
 80168a8:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80168ac:	3201      	adds	r2, #1
 80168ae:	42b2      	cmp	r2, r6
 80168b0:	d1f4      	bne.n	801689c <rcl_wait+0x214>
 80168b2:	69e6      	ldr	r6, [r4, #28]
 80168b4:	2200      	movs	r2, #0
 80168b6:	b91e      	cbnz	r6, 80168c0 <rcl_wait+0x238>
 80168b8:	e00d      	b.n	80168d6 <rcl_wait+0x24e>
 80168ba:	3201      	adds	r2, #1
 80168bc:	42b2      	cmp	r2, r6
 80168be:	d00a      	beq.n	80168d6 <rcl_wait+0x24e>
 80168c0:	6a19      	ldr	r1, [r3, #32]
 80168c2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80168c6:	2900      	cmp	r1, #0
 80168c8:	d1f7      	bne.n	80168ba <rcl_wait+0x232>
 80168ca:	69a5      	ldr	r5, [r4, #24]
 80168cc:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80168d0:	3201      	adds	r2, #1
 80168d2:	42b2      	cmp	r2, r6
 80168d4:	d1f4      	bne.n	80168c0 <rcl_wait+0x238>
 80168d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80168d8:	2200      	movs	r2, #0
 80168da:	b91e      	cbnz	r6, 80168e4 <rcl_wait+0x25c>
 80168dc:	e00d      	b.n	80168fa <rcl_wait+0x272>
 80168de:	3201      	adds	r2, #1
 80168e0:	4296      	cmp	r6, r2
 80168e2:	d00a      	beq.n	80168fa <rcl_wait+0x272>
 80168e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80168e6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80168ea:	2900      	cmp	r1, #0
 80168ec:	d1f7      	bne.n	80168de <rcl_wait+0x256>
 80168ee:	6a25      	ldr	r5, [r4, #32]
 80168f0:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80168f4:	3201      	adds	r2, #1
 80168f6:	4296      	cmp	r6, r2
 80168f8:	d1f4      	bne.n	80168e4 <rcl_wait+0x25c>
 80168fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80168fc:	2200      	movs	r2, #0
 80168fe:	b91e      	cbnz	r6, 8016908 <rcl_wait+0x280>
 8016900:	e00d      	b.n	801691e <rcl_wait+0x296>
 8016902:	3201      	adds	r2, #1
 8016904:	42b2      	cmp	r2, r6
 8016906:	d00a      	beq.n	801691e <rcl_wait+0x296>
 8016908:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801690a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801690e:	2900      	cmp	r1, #0
 8016910:	d1f7      	bne.n	8016902 <rcl_wait+0x27a>
 8016912:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8016914:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016918:	3201      	adds	r2, #1
 801691a:	42b2      	cmp	r2, r6
 801691c:	d1f4      	bne.n	8016908 <rcl_wait+0x280>
 801691e:	f1b8 0f02 	cmp.w	r8, #2
 8016922:	f47f aecc 	bne.w	80166be <rcl_wait+0x36>
 8016926:	9b07      	ldr	r3, [sp, #28]
 8016928:	2b00      	cmp	r3, #0
 801692a:	bf08      	it	eq
 801692c:	2002      	moveq	r0, #2
 801692e:	e6c6      	b.n	80166be <rcl_wait+0x36>
 8016930:	200b      	movs	r0, #11
 8016932:	b00f      	add	sp, #60	; 0x3c
 8016934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016938:	9b07      	ldr	r3, [sp, #28]
 801693a:	2b00      	cmp	r3, #0
 801693c:	f47f af79 	bne.w	8016832 <rcl_wait+0x1aa>
 8016940:	e731      	b.n	80167a6 <rcl_wait+0x11e>
 8016942:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016946:	4313      	orrs	r3, r2
 8016948:	bf08      	it	eq
 801694a:	9107      	streq	r1, [sp, #28]
 801694c:	f43f af24 	beq.w	8016798 <rcl_wait+0x110>
 8016950:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016954:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8016958:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801695c:	2a01      	cmp	r2, #1
 801695e:	f173 0300 	sbcs.w	r3, r3, #0
 8016962:	f04f 0300 	mov.w	r3, #0
 8016966:	9307      	str	r3, [sp, #28]
 8016968:	f6bf af63 	bge.w	8016832 <rcl_wait+0x1aa>
 801696c:	e71b      	b.n	80167a6 <rcl_wait+0x11e>
 801696e:	4632      	mov	r2, r6
 8016970:	463b      	mov	r3, r7
 8016972:	e7f3      	b.n	801695c <rcl_wait+0x2d4>
 8016974:	f3af 8000 	nop.w
 8016978:	3b9aca00 	.word	0x3b9aca00
 801697c:	00000000 	.word	0x00000000

08016980 <__atomic_load_8>:
 8016980:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8016984:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8016988:	4b14      	ldr	r3, [pc, #80]	; (80169dc <__atomic_load_8+0x5c>)
 801698a:	4a15      	ldr	r2, [pc, #84]	; (80169e0 <__atomic_load_8+0x60>)
 801698c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8016990:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8016994:	fb03 f301 	mul.w	r3, r3, r1
 8016998:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 801699c:	fba2 1203 	umull	r1, r2, r2, r3
 80169a0:	0912      	lsrs	r2, r2, #4
 80169a2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80169a6:	b430      	push	{r4, r5}
 80169a8:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 80169ac:	4c0d      	ldr	r4, [pc, #52]	; (80169e4 <__atomic_load_8+0x64>)
 80169ae:	1a9b      	subs	r3, r3, r2
 80169b0:	18e1      	adds	r1, r4, r3
 80169b2:	f04f 0501 	mov.w	r5, #1
 80169b6:	e8d1 2f4f 	ldrexb	r2, [r1]
 80169ba:	e8c1 5f4c 	strexb	ip, r5, [r1]
 80169be:	f1bc 0f00 	cmp.w	ip, #0
 80169c2:	d1f8      	bne.n	80169b6 <__atomic_load_8+0x36>
 80169c4:	f3bf 8f5b 	dmb	ish
 80169c8:	b2d2      	uxtb	r2, r2
 80169ca:	2a00      	cmp	r2, #0
 80169cc:	d1f3      	bne.n	80169b6 <__atomic_load_8+0x36>
 80169ce:	e9d0 0100 	ldrd	r0, r1, [r0]
 80169d2:	f3bf 8f5b 	dmb	ish
 80169d6:	54e2      	strb	r2, [r4, r3]
 80169d8:	bc30      	pop	{r4, r5}
 80169da:	4770      	bx	lr
 80169dc:	27d4eb2d 	.word	0x27d4eb2d
 80169e0:	b21642c9 	.word	0xb21642c9
 80169e4:	20009c54 	.word	0x20009c54

080169e8 <__atomic_store_8>:
 80169e8:	b4f0      	push	{r4, r5, r6, r7}
 80169ea:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 80169ee:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 80169f2:	4914      	ldr	r1, [pc, #80]	; (8016a44 <__atomic_store_8+0x5c>)
 80169f4:	4c14      	ldr	r4, [pc, #80]	; (8016a48 <__atomic_store_8+0x60>)
 80169f6:	4e15      	ldr	r6, [pc, #84]	; (8016a4c <__atomic_store_8+0x64>)
 80169f8:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 80169fc:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8016a00:	fb01 f105 	mul.w	r1, r1, r5
 8016a04:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8016a08:	fba4 5401 	umull	r5, r4, r4, r1
 8016a0c:	0924      	lsrs	r4, r4, #4
 8016a0e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8016a12:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 8016a16:	1b09      	subs	r1, r1, r4
 8016a18:	1875      	adds	r5, r6, r1
 8016a1a:	f04f 0701 	mov.w	r7, #1
 8016a1e:	e8d5 4f4f 	ldrexb	r4, [r5]
 8016a22:	e8c5 7f4c 	strexb	ip, r7, [r5]
 8016a26:	f1bc 0f00 	cmp.w	ip, #0
 8016a2a:	d1f8      	bne.n	8016a1e <__atomic_store_8+0x36>
 8016a2c:	f3bf 8f5b 	dmb	ish
 8016a30:	b2e4      	uxtb	r4, r4
 8016a32:	2c00      	cmp	r4, #0
 8016a34:	d1f3      	bne.n	8016a1e <__atomic_store_8+0x36>
 8016a36:	e9c0 2300 	strd	r2, r3, [r0]
 8016a3a:	f3bf 8f5b 	dmb	ish
 8016a3e:	5474      	strb	r4, [r6, r1]
 8016a40:	bcf0      	pop	{r4, r5, r6, r7}
 8016a42:	4770      	bx	lr
 8016a44:	27d4eb2d 	.word	0x27d4eb2d
 8016a48:	b21642c9 	.word	0xb21642c9
 8016a4c:	20009c54 	.word	0x20009c54

08016a50 <__atomic_exchange_8>:
 8016a50:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8016a54:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8016a58:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8016a5c:	4c16      	ldr	r4, [pc, #88]	; (8016ab8 <__atomic_exchange_8+0x68>)
 8016a5e:	4917      	ldr	r1, [pc, #92]	; (8016abc <__atomic_exchange_8+0x6c>)
 8016a60:	4e17      	ldr	r6, [pc, #92]	; (8016ac0 <__atomic_exchange_8+0x70>)
 8016a62:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8016a66:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8016a6a:	fb04 f505 	mul.w	r5, r4, r5
 8016a6e:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 8016a72:	fba1 4105 	umull	r4, r1, r1, r5
 8016a76:	0909      	lsrs	r1, r1, #4
 8016a78:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8016a7c:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8016a80:	1a6c      	subs	r4, r5, r1
 8016a82:	1931      	adds	r1, r6, r4
 8016a84:	f04f 0701 	mov.w	r7, #1
 8016a88:	e8d1 5f4f 	ldrexb	r5, [r1]
 8016a8c:	e8c1 7f4c 	strexb	ip, r7, [r1]
 8016a90:	f1bc 0f00 	cmp.w	ip, #0
 8016a94:	d1f8      	bne.n	8016a88 <__atomic_exchange_8+0x38>
 8016a96:	f3bf 8f5b 	dmb	ish
 8016a9a:	b2ed      	uxtb	r5, r5
 8016a9c:	2d00      	cmp	r5, #0
 8016a9e:	d1f3      	bne.n	8016a88 <__atomic_exchange_8+0x38>
 8016aa0:	e9d0 8900 	ldrd	r8, r9, [r0]
 8016aa4:	e9c0 2300 	strd	r2, r3, [r0]
 8016aa8:	f3bf 8f5b 	dmb	ish
 8016aac:	5535      	strb	r5, [r6, r4]
 8016aae:	4640      	mov	r0, r8
 8016ab0:	4649      	mov	r1, r9
 8016ab2:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8016ab6:	4770      	bx	lr
 8016ab8:	27d4eb2d 	.word	0x27d4eb2d
 8016abc:	b21642c9 	.word	0xb21642c9
 8016ac0:	20009c54 	.word	0x20009c54

08016ac4 <rcutils_is_directory>:
 8016ac4:	2000      	movs	r0, #0
 8016ac6:	4770      	bx	lr

08016ac8 <rcutils_join_path>:
 8016ac8:	b082      	sub	sp, #8
 8016aca:	e88d 000c 	stmia.w	sp, {r2, r3}
 8016ace:	2000      	movs	r0, #0
 8016ad0:	b002      	add	sp, #8
 8016ad2:	4770      	bx	lr

08016ad4 <rcutils_to_native_path>:
 8016ad4:	b084      	sub	sp, #16
 8016ad6:	a801      	add	r0, sp, #4
 8016ad8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8016adc:	b004      	add	sp, #16
 8016ade:	2000      	movs	r0, #0
 8016ae0:	4770      	bx	lr
 8016ae2:	bf00      	nop

08016ae4 <rcutils_format_string_limit>:
 8016ae4:	b40f      	push	{r0, r1, r2, r3}
 8016ae6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ae8:	b083      	sub	sp, #12
 8016aea:	ac08      	add	r4, sp, #32
 8016aec:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016aee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016af2:	b34e      	cbz	r6, 8016b48 <rcutils_format_string_limit+0x64>
 8016af4:	a808      	add	r0, sp, #32
 8016af6:	f7f8 fdf9 	bl	800f6ec <rcutils_allocator_is_valid>
 8016afa:	b328      	cbz	r0, 8016b48 <rcutils_format_string_limit+0x64>
 8016afc:	2100      	movs	r1, #0
 8016afe:	ab0f      	add	r3, sp, #60	; 0x3c
 8016b00:	4608      	mov	r0, r1
 8016b02:	4632      	mov	r2, r6
 8016b04:	e9cd 3300 	strd	r3, r3, [sp]
 8016b08:	f000 f904 	bl	8016d14 <rcutils_vsnprintf>
 8016b0c:	1c43      	adds	r3, r0, #1
 8016b0e:	4605      	mov	r5, r0
 8016b10:	d01a      	beq.n	8016b48 <rcutils_format_string_limit+0x64>
 8016b12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016b14:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016b16:	1c47      	adds	r7, r0, #1
 8016b18:	429f      	cmp	r7, r3
 8016b1a:	bf84      	itt	hi
 8016b1c:	461f      	movhi	r7, r3
 8016b1e:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 8016b22:	4638      	mov	r0, r7
 8016b24:	9b08      	ldr	r3, [sp, #32]
 8016b26:	4798      	blx	r3
 8016b28:	4604      	mov	r4, r0
 8016b2a:	b168      	cbz	r0, 8016b48 <rcutils_format_string_limit+0x64>
 8016b2c:	9b01      	ldr	r3, [sp, #4]
 8016b2e:	4632      	mov	r2, r6
 8016b30:	4639      	mov	r1, r7
 8016b32:	f000 f8ef 	bl	8016d14 <rcutils_vsnprintf>
 8016b36:	2800      	cmp	r0, #0
 8016b38:	db02      	blt.n	8016b40 <rcutils_format_string_limit+0x5c>
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	5563      	strb	r3, [r4, r5]
 8016b3e:	e004      	b.n	8016b4a <rcutils_format_string_limit+0x66>
 8016b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b42:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016b44:	4620      	mov	r0, r4
 8016b46:	4798      	blx	r3
 8016b48:	2400      	movs	r4, #0
 8016b4a:	4620      	mov	r0, r4
 8016b4c:	b003      	add	sp, #12
 8016b4e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016b52:	b004      	add	sp, #16
 8016b54:	4770      	bx	lr
 8016b56:	bf00      	nop

08016b58 <rcutils_get_env>:
 8016b58:	b168      	cbz	r0, 8016b76 <rcutils_get_env+0x1e>
 8016b5a:	b510      	push	{r4, lr}
 8016b5c:	460c      	mov	r4, r1
 8016b5e:	b129      	cbz	r1, 8016b6c <rcutils_get_env+0x14>
 8016b60:	f002 ff8c 	bl	8019a7c <getenv>
 8016b64:	b120      	cbz	r0, 8016b70 <rcutils_get_env+0x18>
 8016b66:	6020      	str	r0, [r4, #0]
 8016b68:	2000      	movs	r0, #0
 8016b6a:	bd10      	pop	{r4, pc}
 8016b6c:	4803      	ldr	r0, [pc, #12]	; (8016b7c <rcutils_get_env+0x24>)
 8016b6e:	bd10      	pop	{r4, pc}
 8016b70:	4b03      	ldr	r3, [pc, #12]	; (8016b80 <rcutils_get_env+0x28>)
 8016b72:	6023      	str	r3, [r4, #0]
 8016b74:	bd10      	pop	{r4, pc}
 8016b76:	4803      	ldr	r0, [pc, #12]	; (8016b84 <rcutils_get_env+0x2c>)
 8016b78:	4770      	bx	lr
 8016b7a:	bf00      	nop
 8016b7c:	0801bb80 	.word	0x0801bb80
 8016b80:	0801bca4 	.word	0x0801bca4
 8016b84:	0801bb64 	.word	0x0801bb64

08016b88 <rcutils_repl_str>:
 8016b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b8c:	ed2d 8b02 	vpush	{d8}
 8016b90:	b087      	sub	sp, #28
 8016b92:	4680      	mov	r8, r0
 8016b94:	4608      	mov	r0, r1
 8016b96:	f8cd 8000 	str.w	r8, [sp]
 8016b9a:	ee08 2a10 	vmov	s16, r2
 8016b9e:	468a      	mov	sl, r1
 8016ba0:	4699      	mov	r9, r3
 8016ba2:	f7e9 fb27 	bl	80001f4 <strlen>
 8016ba6:	2600      	movs	r6, #0
 8016ba8:	4647      	mov	r7, r8
 8016baa:	9001      	str	r0, [sp, #4]
 8016bac:	46b3      	mov	fp, r6
 8016bae:	2510      	movs	r5, #16
 8016bb0:	46b0      	mov	r8, r6
 8016bb2:	e01d      	b.n	8016bf0 <rcutils_repl_str+0x68>
 8016bb4:	f10b 0b01 	add.w	fp, fp, #1
 8016bb8:	455e      	cmp	r6, fp
 8016bba:	d211      	bcs.n	8016be0 <rcutils_repl_str+0x58>
 8016bbc:	442e      	add	r6, r5
 8016bbe:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016bc2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016bc6:	00b1      	lsls	r1, r6, #2
 8016bc8:	4798      	blx	r3
 8016bca:	2800      	cmp	r0, #0
 8016bcc:	f000 8084 	beq.w	8016cd8 <rcutils_repl_str+0x150>
 8016bd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016bd4:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8016bd8:	bf28      	it	cs
 8016bda:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8016bde:	4680      	mov	r8, r0
 8016be0:	9a00      	ldr	r2, [sp, #0]
 8016be2:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8016be6:	1aa2      	subs	r2, r4, r2
 8016be8:	f843 2c04 	str.w	r2, [r3, #-4]
 8016bec:	9b01      	ldr	r3, [sp, #4]
 8016bee:	18e7      	adds	r7, r4, r3
 8016bf0:	4651      	mov	r1, sl
 8016bf2:	4638      	mov	r0, r7
 8016bf4:	f003 fc6f 	bl	801a4d6 <strstr>
 8016bf8:	4604      	mov	r4, r0
 8016bfa:	4640      	mov	r0, r8
 8016bfc:	2c00      	cmp	r4, #0
 8016bfe:	d1d9      	bne.n	8016bb4 <rcutils_repl_str+0x2c>
 8016c00:	46b8      	mov	r8, r7
 8016c02:	4607      	mov	r7, r0
 8016c04:	4640      	mov	r0, r8
 8016c06:	f7e9 faf5 	bl	80001f4 <strlen>
 8016c0a:	9b00      	ldr	r3, [sp, #0]
 8016c0c:	eba8 0303 	sub.w	r3, r8, r3
 8016c10:	181d      	adds	r5, r3, r0
 8016c12:	9504      	str	r5, [sp, #16]
 8016c14:	f1bb 0f00 	cmp.w	fp, #0
 8016c18:	d03d      	beq.n	8016c96 <rcutils_repl_str+0x10e>
 8016c1a:	ee18 0a10 	vmov	r0, s16
 8016c1e:	f7e9 fae9 	bl	80001f4 <strlen>
 8016c22:	9b01      	ldr	r3, [sp, #4]
 8016c24:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016c28:	1ac3      	subs	r3, r0, r3
 8016c2a:	fb0b 5303 	mla	r3, fp, r3, r5
 8016c2e:	9305      	str	r3, [sp, #20]
 8016c30:	4606      	mov	r6, r0
 8016c32:	1c58      	adds	r0, r3, #1
 8016c34:	f8d9 3000 	ldr.w	r3, [r9]
 8016c38:	4798      	blx	r3
 8016c3a:	9003      	str	r0, [sp, #12]
 8016c3c:	2800      	cmp	r0, #0
 8016c3e:	d04c      	beq.n	8016cda <rcutils_repl_str+0x152>
 8016c40:	683a      	ldr	r2, [r7, #0]
 8016c42:	9900      	ldr	r1, [sp, #0]
 8016c44:	f003 fd3f 	bl	801a6c6 <memcpy>
 8016c48:	9b03      	ldr	r3, [sp, #12]
 8016c4a:	683d      	ldr	r5, [r7, #0]
 8016c4c:	ee18 8a10 	vmov	r8, s16
 8016c50:	441d      	add	r5, r3
 8016c52:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8016c56:	9302      	str	r3, [sp, #8]
 8016c58:	46ba      	mov	sl, r7
 8016c5a:	4632      	mov	r2, r6
 8016c5c:	4641      	mov	r1, r8
 8016c5e:	4628      	mov	r0, r5
 8016c60:	f003 fd31 	bl	801a6c6 <memcpy>
 8016c64:	9b01      	ldr	r3, [sp, #4]
 8016c66:	f85a 2b04 	ldr.w	r2, [sl], #4
 8016c6a:	441a      	add	r2, r3
 8016c6c:	9b00      	ldr	r3, [sp, #0]
 8016c6e:	1899      	adds	r1, r3, r2
 8016c70:	9b02      	ldr	r3, [sp, #8]
 8016c72:	4435      	add	r5, r6
 8016c74:	429c      	cmp	r4, r3
 8016c76:	4628      	mov	r0, r5
 8016c78:	d025      	beq.n	8016cc6 <rcutils_repl_str+0x13e>
 8016c7a:	f8da 3000 	ldr.w	r3, [sl]
 8016c7e:	3401      	adds	r4, #1
 8016c80:	1a9a      	subs	r2, r3, r2
 8016c82:	4415      	add	r5, r2
 8016c84:	f003 fd1f 	bl	801a6c6 <memcpy>
 8016c88:	455c      	cmp	r4, fp
 8016c8a:	d3e6      	bcc.n	8016c5a <rcutils_repl_str+0xd2>
 8016c8c:	9a03      	ldr	r2, [sp, #12]
 8016c8e:	9905      	ldr	r1, [sp, #20]
 8016c90:	2300      	movs	r3, #0
 8016c92:	5453      	strb	r3, [r2, r1]
 8016c94:	e00b      	b.n	8016cae <rcutils_repl_str+0x126>
 8016c96:	4628      	mov	r0, r5
 8016c98:	f8d9 3000 	ldr.w	r3, [r9]
 8016c9c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016ca0:	3001      	adds	r0, #1
 8016ca2:	4798      	blx	r3
 8016ca4:	9003      	str	r0, [sp, #12]
 8016ca6:	b110      	cbz	r0, 8016cae <rcutils_repl_str+0x126>
 8016ca8:	9900      	ldr	r1, [sp, #0]
 8016caa:	f003 fd04 	bl	801a6b6 <strcpy>
 8016cae:	4638      	mov	r0, r7
 8016cb0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016cb4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016cb8:	4798      	blx	r3
 8016cba:	9803      	ldr	r0, [sp, #12]
 8016cbc:	b007      	add	sp, #28
 8016cbe:	ecbd 8b02 	vpop	{d8}
 8016cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cc6:	9b04      	ldr	r3, [sp, #16]
 8016cc8:	3401      	adds	r4, #1
 8016cca:	1a9a      	subs	r2, r3, r2
 8016ccc:	4415      	add	r5, r2
 8016cce:	f003 fcfa 	bl	801a6c6 <memcpy>
 8016cd2:	455c      	cmp	r4, fp
 8016cd4:	d3c1      	bcc.n	8016c5a <rcutils_repl_str+0xd2>
 8016cd6:	e7d9      	b.n	8016c8c <rcutils_repl_str+0x104>
 8016cd8:	4647      	mov	r7, r8
 8016cda:	2300      	movs	r3, #0
 8016cdc:	9303      	str	r3, [sp, #12]
 8016cde:	e7e6      	b.n	8016cae <rcutils_repl_str+0x126>

08016ce0 <rcutils_snprintf>:
 8016ce0:	b40c      	push	{r2, r3}
 8016ce2:	b530      	push	{r4, r5, lr}
 8016ce4:	b083      	sub	sp, #12
 8016ce6:	ab06      	add	r3, sp, #24
 8016ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8016cec:	9301      	str	r3, [sp, #4]
 8016cee:	b152      	cbz	r2, 8016d06 <rcutils_snprintf+0x26>
 8016cf0:	b138      	cbz	r0, 8016d02 <rcutils_snprintf+0x22>
 8016cf2:	b141      	cbz	r1, 8016d06 <rcutils_snprintf+0x26>
 8016cf4:	f003 fb0a 	bl	801a30c <vsniprintf>
 8016cf8:	b003      	add	sp, #12
 8016cfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016cfe:	b002      	add	sp, #8
 8016d00:	4770      	bx	lr
 8016d02:	2900      	cmp	r1, #0
 8016d04:	d0f6      	beq.n	8016cf4 <rcutils_snprintf+0x14>
 8016d06:	f003 fca9 	bl	801a65c <__errno>
 8016d0a:	2316      	movs	r3, #22
 8016d0c:	6003      	str	r3, [r0, #0]
 8016d0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016d12:	e7f1      	b.n	8016cf8 <rcutils_snprintf+0x18>

08016d14 <rcutils_vsnprintf>:
 8016d14:	b570      	push	{r4, r5, r6, lr}
 8016d16:	b13a      	cbz	r2, 8016d28 <rcutils_vsnprintf+0x14>
 8016d18:	b120      	cbz	r0, 8016d24 <rcutils_vsnprintf+0x10>
 8016d1a:	b129      	cbz	r1, 8016d28 <rcutils_vsnprintf+0x14>
 8016d1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d20:	f003 baf4 	b.w	801a30c <vsniprintf>
 8016d24:	2900      	cmp	r1, #0
 8016d26:	d0f9      	beq.n	8016d1c <rcutils_vsnprintf+0x8>
 8016d28:	f003 fc98 	bl	801a65c <__errno>
 8016d2c:	2316      	movs	r3, #22
 8016d2e:	6003      	str	r3, [r0, #0]
 8016d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016d34:	bd70      	pop	{r4, r5, r6, pc}
 8016d36:	bf00      	nop

08016d38 <rcutils_strdup>:
 8016d38:	b084      	sub	sp, #16
 8016d3a:	b570      	push	{r4, r5, r6, lr}
 8016d3c:	b082      	sub	sp, #8
 8016d3e:	ac07      	add	r4, sp, #28
 8016d40:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8016d44:	4605      	mov	r5, r0
 8016d46:	b1b0      	cbz	r0, 8016d76 <rcutils_strdup+0x3e>
 8016d48:	f7e9 fa54 	bl	80001f4 <strlen>
 8016d4c:	1c42      	adds	r2, r0, #1
 8016d4e:	9b07      	ldr	r3, [sp, #28]
 8016d50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016d52:	9201      	str	r2, [sp, #4]
 8016d54:	4606      	mov	r6, r0
 8016d56:	4610      	mov	r0, r2
 8016d58:	4798      	blx	r3
 8016d5a:	4604      	mov	r4, r0
 8016d5c:	b128      	cbz	r0, 8016d6a <rcutils_strdup+0x32>
 8016d5e:	9a01      	ldr	r2, [sp, #4]
 8016d60:	4629      	mov	r1, r5
 8016d62:	f003 fcb0 	bl	801a6c6 <memcpy>
 8016d66:	2300      	movs	r3, #0
 8016d68:	55a3      	strb	r3, [r4, r6]
 8016d6a:	4620      	mov	r0, r4
 8016d6c:	b002      	add	sp, #8
 8016d6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d72:	b004      	add	sp, #16
 8016d74:	4770      	bx	lr
 8016d76:	4604      	mov	r4, r0
 8016d78:	e7f7      	b.n	8016d6a <rcutils_strdup+0x32>
 8016d7a:	bf00      	nop

08016d7c <rcutils_strndup>:
 8016d7c:	b082      	sub	sp, #8
 8016d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d80:	460e      	mov	r6, r1
 8016d82:	a906      	add	r1, sp, #24
 8016d84:	e881 000c 	stmia.w	r1, {r2, r3}
 8016d88:	4605      	mov	r5, r0
 8016d8a:	b180      	cbz	r0, 8016dae <rcutils_strndup+0x32>
 8016d8c:	1c77      	adds	r7, r6, #1
 8016d8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016d90:	4638      	mov	r0, r7
 8016d92:	4790      	blx	r2
 8016d94:	4604      	mov	r4, r0
 8016d96:	b128      	cbz	r0, 8016da4 <rcutils_strndup+0x28>
 8016d98:	463a      	mov	r2, r7
 8016d9a:	4629      	mov	r1, r5
 8016d9c:	f003 fc93 	bl	801a6c6 <memcpy>
 8016da0:	2300      	movs	r3, #0
 8016da2:	55a3      	strb	r3, [r4, r6]
 8016da4:	4620      	mov	r0, r4
 8016da6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016daa:	b002      	add	sp, #8
 8016dac:	4770      	bx	lr
 8016dae:	4604      	mov	r4, r0
 8016db0:	e7f8      	b.n	8016da4 <rcutils_strndup+0x28>
 8016db2:	bf00      	nop

08016db4 <rmw_get_zero_initialized_context>:
 8016db4:	b510      	push	{r4, lr}
 8016db6:	2250      	movs	r2, #80	; 0x50
 8016db8:	4604      	mov	r4, r0
 8016dba:	2100      	movs	r1, #0
 8016dbc:	f003 fb64 	bl	801a488 <memset>
 8016dc0:	4620      	mov	r0, r4
 8016dc2:	bd10      	pop	{r4, pc}

08016dc4 <rmw_get_zero_initialized_init_options>:
 8016dc4:	b510      	push	{r4, lr}
 8016dc6:	2238      	movs	r2, #56	; 0x38
 8016dc8:	4604      	mov	r4, r0
 8016dca:	2100      	movs	r1, #0
 8016dcc:	f003 fb5c 	bl	801a488 <memset>
 8016dd0:	f104 0010 	add.w	r0, r4, #16
 8016dd4:	f000 f806 	bl	8016de4 <rmw_get_default_security_options>
 8016dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016ddc:	60e3      	str	r3, [r4, #12]
 8016dde:	4620      	mov	r0, r4
 8016de0:	bd10      	pop	{r4, pc}
 8016de2:	bf00      	nop

08016de4 <rmw_get_default_security_options>:
 8016de4:	2200      	movs	r2, #0
 8016de6:	7002      	strb	r2, [r0, #0]
 8016de8:	6042      	str	r2, [r0, #4]
 8016dea:	4770      	bx	lr

08016dec <rmw_validate_namespace_with_size>:
 8016dec:	b340      	cbz	r0, 8016e40 <rmw_validate_namespace_with_size+0x54>
 8016dee:	b5d0      	push	{r4, r6, r7, lr}
 8016df0:	4614      	mov	r4, r2
 8016df2:	b0c2      	sub	sp, #264	; 0x108
 8016df4:	b332      	cbz	r2, 8016e44 <rmw_validate_namespace_with_size+0x58>
 8016df6:	2901      	cmp	r1, #1
 8016df8:	460f      	mov	r7, r1
 8016dfa:	461e      	mov	r6, r3
 8016dfc:	d102      	bne.n	8016e04 <rmw_validate_namespace_with_size+0x18>
 8016dfe:	7803      	ldrb	r3, [r0, #0]
 8016e00:	2b2f      	cmp	r3, #47	; 0x2f
 8016e02:	d019      	beq.n	8016e38 <rmw_validate_namespace_with_size+0x4c>
 8016e04:	aa01      	add	r2, sp, #4
 8016e06:	4669      	mov	r1, sp
 8016e08:	f7f8 fe44 	bl	800fa94 <rmw_validate_full_topic_name>
 8016e0c:	b990      	cbnz	r0, 8016e34 <rmw_validate_namespace_with_size+0x48>
 8016e0e:	9b00      	ldr	r3, [sp, #0]
 8016e10:	b14b      	cbz	r3, 8016e26 <rmw_validate_namespace_with_size+0x3a>
 8016e12:	2b07      	cmp	r3, #7
 8016e14:	d007      	beq.n	8016e26 <rmw_validate_namespace_with_size+0x3a>
 8016e16:	1e5a      	subs	r2, r3, #1
 8016e18:	2a05      	cmp	r2, #5
 8016e1a:	d82b      	bhi.n	8016e74 <rmw_validate_namespace_with_size+0x88>
 8016e1c:	e8df f002 	tbb	[pc, r2]
 8016e20:	24211e1b 	.word	0x24211e1b
 8016e24:	1427      	.short	0x1427
 8016e26:	2ff5      	cmp	r7, #245	; 0xf5
 8016e28:	d906      	bls.n	8016e38 <rmw_validate_namespace_with_size+0x4c>
 8016e2a:	2307      	movs	r3, #7
 8016e2c:	6023      	str	r3, [r4, #0]
 8016e2e:	b10e      	cbz	r6, 8016e34 <rmw_validate_namespace_with_size+0x48>
 8016e30:	23f4      	movs	r3, #244	; 0xf4
 8016e32:	6033      	str	r3, [r6, #0]
 8016e34:	b042      	add	sp, #264	; 0x108
 8016e36:	bdd0      	pop	{r4, r6, r7, pc}
 8016e38:	2000      	movs	r0, #0
 8016e3a:	6020      	str	r0, [r4, #0]
 8016e3c:	b042      	add	sp, #264	; 0x108
 8016e3e:	bdd0      	pop	{r4, r6, r7, pc}
 8016e40:	200b      	movs	r0, #11
 8016e42:	4770      	bx	lr
 8016e44:	200b      	movs	r0, #11
 8016e46:	e7f5      	b.n	8016e34 <rmw_validate_namespace_with_size+0x48>
 8016e48:	2306      	movs	r3, #6
 8016e4a:	6023      	str	r3, [r4, #0]
 8016e4c:	2e00      	cmp	r6, #0
 8016e4e:	d0f1      	beq.n	8016e34 <rmw_validate_namespace_with_size+0x48>
 8016e50:	9b01      	ldr	r3, [sp, #4]
 8016e52:	6033      	str	r3, [r6, #0]
 8016e54:	e7ee      	b.n	8016e34 <rmw_validate_namespace_with_size+0x48>
 8016e56:	2301      	movs	r3, #1
 8016e58:	6023      	str	r3, [r4, #0]
 8016e5a:	e7f7      	b.n	8016e4c <rmw_validate_namespace_with_size+0x60>
 8016e5c:	2302      	movs	r3, #2
 8016e5e:	6023      	str	r3, [r4, #0]
 8016e60:	e7f4      	b.n	8016e4c <rmw_validate_namespace_with_size+0x60>
 8016e62:	2303      	movs	r3, #3
 8016e64:	6023      	str	r3, [r4, #0]
 8016e66:	e7f1      	b.n	8016e4c <rmw_validate_namespace_with_size+0x60>
 8016e68:	2304      	movs	r3, #4
 8016e6a:	6023      	str	r3, [r4, #0]
 8016e6c:	e7ee      	b.n	8016e4c <rmw_validate_namespace_with_size+0x60>
 8016e6e:	2305      	movs	r3, #5
 8016e70:	6023      	str	r3, [r4, #0]
 8016e72:	e7eb      	b.n	8016e4c <rmw_validate_namespace_with_size+0x60>
 8016e74:	4a03      	ldr	r2, [pc, #12]	; (8016e84 <rmw_validate_namespace_with_size+0x98>)
 8016e76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016e7a:	a802      	add	r0, sp, #8
 8016e7c:	f7ff ff30 	bl	8016ce0 <rcutils_snprintf>
 8016e80:	2001      	movs	r0, #1
 8016e82:	e7d7      	b.n	8016e34 <rmw_validate_namespace_with_size+0x48>
 8016e84:	0801bb9c 	.word	0x0801bb9c

08016e88 <rmw_validate_namespace>:
 8016e88:	b168      	cbz	r0, 8016ea6 <rmw_validate_namespace+0x1e>
 8016e8a:	b570      	push	{r4, r5, r6, lr}
 8016e8c:	460d      	mov	r5, r1
 8016e8e:	4616      	mov	r6, r2
 8016e90:	4604      	mov	r4, r0
 8016e92:	f7e9 f9af 	bl	80001f4 <strlen>
 8016e96:	4633      	mov	r3, r6
 8016e98:	4601      	mov	r1, r0
 8016e9a:	462a      	mov	r2, r5
 8016e9c:	4620      	mov	r0, r4
 8016e9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016ea2:	f7ff bfa3 	b.w	8016dec <rmw_validate_namespace_with_size>
 8016ea6:	200b      	movs	r0, #11
 8016ea8:	4770      	bx	lr
 8016eaa:	bf00      	nop

08016eac <rmw_namespace_validation_result_string>:
 8016eac:	2807      	cmp	r0, #7
 8016eae:	bf9a      	itte	ls
 8016eb0:	4b02      	ldrls	r3, [pc, #8]	; (8016ebc <rmw_namespace_validation_result_string+0x10>)
 8016eb2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016eb6:	4802      	ldrhi	r0, [pc, #8]	; (8016ec0 <rmw_namespace_validation_result_string+0x14>)
 8016eb8:	4770      	bx	lr
 8016eba:	bf00      	nop
 8016ebc:	0801bd94 	.word	0x0801bd94
 8016ec0:	0801bbec 	.word	0x0801bbec

08016ec4 <rmw_validate_node_name>:
 8016ec4:	2800      	cmp	r0, #0
 8016ec6:	d03b      	beq.n	8016f40 <rmw_validate_node_name+0x7c>
 8016ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ecc:	460f      	mov	r7, r1
 8016ece:	2900      	cmp	r1, #0
 8016ed0:	d038      	beq.n	8016f44 <rmw_validate_node_name+0x80>
 8016ed2:	4615      	mov	r5, r2
 8016ed4:	4604      	mov	r4, r0
 8016ed6:	f7e9 f98d 	bl	80001f4 <strlen>
 8016eda:	b1e0      	cbz	r0, 8016f16 <rmw_validate_node_name+0x52>
 8016edc:	1e63      	subs	r3, r4, #1
 8016ede:	eb03 0e00 	add.w	lr, r3, r0
 8016ee2:	f1c4 0c01 	rsb	ip, r4, #1
 8016ee6:	eb0c 0803 	add.w	r8, ip, r3
 8016eea:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8016eee:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 8016ef2:	f026 0220 	bic.w	r2, r6, #32
 8016ef6:	2909      	cmp	r1, #9
 8016ef8:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 8016efc:	d913      	bls.n	8016f26 <rmw_validate_node_name+0x62>
 8016efe:	2a19      	cmp	r2, #25
 8016f00:	d911      	bls.n	8016f26 <rmw_validate_node_name+0x62>
 8016f02:	2e5f      	cmp	r6, #95	; 0x5f
 8016f04:	d00f      	beq.n	8016f26 <rmw_validate_node_name+0x62>
 8016f06:	2302      	movs	r3, #2
 8016f08:	603b      	str	r3, [r7, #0]
 8016f0a:	b10d      	cbz	r5, 8016f10 <rmw_validate_node_name+0x4c>
 8016f0c:	f8c5 8000 	str.w	r8, [r5]
 8016f10:	2000      	movs	r0, #0
 8016f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f16:	2301      	movs	r3, #1
 8016f18:	603b      	str	r3, [r7, #0]
 8016f1a:	2d00      	cmp	r5, #0
 8016f1c:	d0f8      	beq.n	8016f10 <rmw_validate_node_name+0x4c>
 8016f1e:	2000      	movs	r0, #0
 8016f20:	6028      	str	r0, [r5, #0]
 8016f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f26:	4573      	cmp	r3, lr
 8016f28:	d1dd      	bne.n	8016ee6 <rmw_validate_node_name+0x22>
 8016f2a:	7822      	ldrb	r2, [r4, #0]
 8016f2c:	4b0d      	ldr	r3, [pc, #52]	; (8016f64 <rmw_validate_node_name+0xa0>)
 8016f2e:	5cd3      	ldrb	r3, [r2, r3]
 8016f30:	f013 0304 	ands.w	r3, r3, #4
 8016f34:	d110      	bne.n	8016f58 <rmw_validate_node_name+0x94>
 8016f36:	28ff      	cmp	r0, #255	; 0xff
 8016f38:	d806      	bhi.n	8016f48 <rmw_validate_node_name+0x84>
 8016f3a:	603b      	str	r3, [r7, #0]
 8016f3c:	4618      	mov	r0, r3
 8016f3e:	e7e8      	b.n	8016f12 <rmw_validate_node_name+0x4e>
 8016f40:	200b      	movs	r0, #11
 8016f42:	4770      	bx	lr
 8016f44:	200b      	movs	r0, #11
 8016f46:	e7e4      	b.n	8016f12 <rmw_validate_node_name+0x4e>
 8016f48:	2204      	movs	r2, #4
 8016f4a:	603a      	str	r2, [r7, #0]
 8016f4c:	2d00      	cmp	r5, #0
 8016f4e:	d0df      	beq.n	8016f10 <rmw_validate_node_name+0x4c>
 8016f50:	22fe      	movs	r2, #254	; 0xfe
 8016f52:	4618      	mov	r0, r3
 8016f54:	602a      	str	r2, [r5, #0]
 8016f56:	e7dc      	b.n	8016f12 <rmw_validate_node_name+0x4e>
 8016f58:	2303      	movs	r3, #3
 8016f5a:	603b      	str	r3, [r7, #0]
 8016f5c:	2d00      	cmp	r5, #0
 8016f5e:	d1de      	bne.n	8016f1e <rmw_validate_node_name+0x5a>
 8016f60:	e7d6      	b.n	8016f10 <rmw_validate_node_name+0x4c>
 8016f62:	bf00      	nop
 8016f64:	0801c158 	.word	0x0801c158

08016f68 <rmw_node_name_validation_result_string>:
 8016f68:	2804      	cmp	r0, #4
 8016f6a:	bf9a      	itte	ls
 8016f6c:	4b02      	ldrls	r3, [pc, #8]	; (8016f78 <rmw_node_name_validation_result_string+0x10>)
 8016f6e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016f72:	4802      	ldrhi	r0, [pc, #8]	; (8016f7c <rmw_node_name_validation_result_string+0x14>)
 8016f74:	4770      	bx	lr
 8016f76:	bf00      	nop
 8016f78:	0801bea0 	.word	0x0801bea0
 8016f7c:	0801bdb4 	.word	0x0801bdb4

08016f80 <get_memory>:
 8016f80:	4603      	mov	r3, r0
 8016f82:	6840      	ldr	r0, [r0, #4]
 8016f84:	b158      	cbz	r0, 8016f9e <get_memory+0x1e>
 8016f86:	6882      	ldr	r2, [r0, #8]
 8016f88:	605a      	str	r2, [r3, #4]
 8016f8a:	b10a      	cbz	r2, 8016f90 <get_memory+0x10>
 8016f8c:	2100      	movs	r1, #0
 8016f8e:	6051      	str	r1, [r2, #4]
 8016f90:	681a      	ldr	r2, [r3, #0]
 8016f92:	6082      	str	r2, [r0, #8]
 8016f94:	b102      	cbz	r2, 8016f98 <get_memory+0x18>
 8016f96:	6050      	str	r0, [r2, #4]
 8016f98:	2200      	movs	r2, #0
 8016f9a:	6042      	str	r2, [r0, #4]
 8016f9c:	6018      	str	r0, [r3, #0]
 8016f9e:	4770      	bx	lr

08016fa0 <put_memory>:
 8016fa0:	684b      	ldr	r3, [r1, #4]
 8016fa2:	b10b      	cbz	r3, 8016fa8 <put_memory+0x8>
 8016fa4:	688a      	ldr	r2, [r1, #8]
 8016fa6:	609a      	str	r2, [r3, #8]
 8016fa8:	688a      	ldr	r2, [r1, #8]
 8016faa:	b102      	cbz	r2, 8016fae <put_memory+0xe>
 8016fac:	6053      	str	r3, [r2, #4]
 8016fae:	6803      	ldr	r3, [r0, #0]
 8016fb0:	428b      	cmp	r3, r1
 8016fb2:	6843      	ldr	r3, [r0, #4]
 8016fb4:	bf08      	it	eq
 8016fb6:	6002      	streq	r2, [r0, #0]
 8016fb8:	608b      	str	r3, [r1, #8]
 8016fba:	b103      	cbz	r3, 8016fbe <put_memory+0x1e>
 8016fbc:	6059      	str	r1, [r3, #4]
 8016fbe:	2300      	movs	r3, #0
 8016fc0:	604b      	str	r3, [r1, #4]
 8016fc2:	6041      	str	r1, [r0, #4]
 8016fc4:	4770      	bx	lr
 8016fc6:	bf00      	nop

08016fc8 <rmw_destroy_client>:
 8016fc8:	b570      	push	{r4, r5, r6, lr}
 8016fca:	b128      	cbz	r0, 8016fd8 <rmw_destroy_client+0x10>
 8016fcc:	4604      	mov	r4, r0
 8016fce:	6800      	ldr	r0, [r0, #0]
 8016fd0:	460d      	mov	r5, r1
 8016fd2:	f7f9 fc3d 	bl	8010850 <is_uxrce_rmw_identifier_valid>
 8016fd6:	b910      	cbnz	r0, 8016fde <rmw_destroy_client+0x16>
 8016fd8:	2401      	movs	r4, #1
 8016fda:	4620      	mov	r0, r4
 8016fdc:	bd70      	pop	{r4, r5, r6, pc}
 8016fde:	6863      	ldr	r3, [r4, #4]
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d0f9      	beq.n	8016fd8 <rmw_destroy_client+0x10>
 8016fe4:	2d00      	cmp	r5, #0
 8016fe6:	d0f7      	beq.n	8016fd8 <rmw_destroy_client+0x10>
 8016fe8:	6828      	ldr	r0, [r5, #0]
 8016fea:	f7f9 fc31 	bl	8010850 <is_uxrce_rmw_identifier_valid>
 8016fee:	2800      	cmp	r0, #0
 8016ff0:	d0f2      	beq.n	8016fd8 <rmw_destroy_client+0x10>
 8016ff2:	686e      	ldr	r6, [r5, #4]
 8016ff4:	2e00      	cmp	r6, #0
 8016ff6:	d0ef      	beq.n	8016fd8 <rmw_destroy_client+0x10>
 8016ff8:	6864      	ldr	r4, [r4, #4]
 8016ffa:	6932      	ldr	r2, [r6, #16]
 8016ffc:	6920      	ldr	r0, [r4, #16]
 8016ffe:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017002:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017006:	6819      	ldr	r1, [r3, #0]
 8017008:	f7fa ff20 	bl	8011e4c <uxr_buffer_cancel_data>
 801700c:	4602      	mov	r2, r0
 801700e:	6920      	ldr	r0, [r4, #16]
 8017010:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017014:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017018:	f7f9 fb9a 	bl	8010750 <run_xrce_session>
 801701c:	6920      	ldr	r0, [r4, #16]
 801701e:	6932      	ldr	r2, [r6, #16]
 8017020:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017024:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017028:	6819      	ldr	r1, [r3, #0]
 801702a:	f7fa fca5 	bl	8011978 <uxr_buffer_delete_entity>
 801702e:	4602      	mov	r2, r0
 8017030:	6920      	ldr	r0, [r4, #16]
 8017032:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017036:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801703a:	f7f9 fb89 	bl	8010750 <run_xrce_session>
 801703e:	2800      	cmp	r0, #0
 8017040:	4628      	mov	r0, r5
 8017042:	bf14      	ite	ne
 8017044:	2400      	movne	r4, #0
 8017046:	2402      	moveq	r4, #2
 8017048:	f7f9 fa72 	bl	8010530 <rmw_uxrce_fini_client_memory>
 801704c:	e7c5      	b.n	8016fda <rmw_destroy_client+0x12>
 801704e:	bf00      	nop

08017050 <rmw_get_implementation_identifier>:
 8017050:	4b01      	ldr	r3, [pc, #4]	; (8017058 <rmw_get_implementation_identifier+0x8>)
 8017052:	6818      	ldr	r0, [r3, #0]
 8017054:	4770      	bx	lr
 8017056:	bf00      	nop
 8017058:	0801becc 	.word	0x0801becc

0801705c <rmw_init_options_init>:
 801705c:	b084      	sub	sp, #16
 801705e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017062:	ad09      	add	r5, sp, #36	; 0x24
 8017064:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8017068:	b130      	cbz	r0, 8017078 <rmw_init_options_init+0x1c>
 801706a:	4604      	mov	r4, r0
 801706c:	4628      	mov	r0, r5
 801706e:	f7f8 fb3d 	bl	800f6ec <rcutils_allocator_is_valid>
 8017072:	b108      	cbz	r0, 8017078 <rmw_init_options_init+0x1c>
 8017074:	68a3      	ldr	r3, [r4, #8]
 8017076:	b123      	cbz	r3, 8017082 <rmw_init_options_init+0x26>
 8017078:	200b      	movs	r0, #11
 801707a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801707e:	b004      	add	sp, #16
 8017080:	4770      	bx	lr
 8017082:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017084:	4f1c      	ldr	r7, [pc, #112]	; (80170f8 <rmw_init_options_init+0x9c>)
 8017086:	682e      	ldr	r6, [r5, #0]
 8017088:	683d      	ldr	r5, [r7, #0]
 801708a:	60a5      	str	r5, [r4, #8]
 801708c:	f04f 0800 	mov.w	r8, #0
 8017090:	f04f 0900 	mov.w	r9, #0
 8017094:	f104 0520 	add.w	r5, r4, #32
 8017098:	e9c4 8900 	strd	r8, r9, [r4]
 801709c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801709e:	4b17      	ldr	r3, [pc, #92]	; (80170fc <rmw_init_options_init+0xa0>)
 80170a0:	4817      	ldr	r0, [pc, #92]	; (8017100 <rmw_init_options_init+0xa4>)
 80170a2:	602e      	str	r6, [r5, #0]
 80170a4:	4917      	ldr	r1, [pc, #92]	; (8017104 <rmw_init_options_init+0xa8>)
 80170a6:	61e3      	str	r3, [r4, #28]
 80170a8:	2203      	movs	r2, #3
 80170aa:	f7f9 f991 	bl	80103d0 <rmw_uxrce_init_init_options_impl_memory>
 80170ae:	4814      	ldr	r0, [pc, #80]	; (8017100 <rmw_init_options_init+0xa4>)
 80170b0:	f7ff ff66 	bl	8016f80 <get_memory>
 80170b4:	b1e8      	cbz	r0, 80170f2 <rmw_init_options_init+0x96>
 80170b6:	4a14      	ldr	r2, [pc, #80]	; (8017108 <rmw_init_options_init+0xac>)
 80170b8:	68c3      	ldr	r3, [r0, #12]
 80170ba:	6851      	ldr	r1, [r2, #4]
 80170bc:	7810      	ldrb	r0, [r2, #0]
 80170be:	6363      	str	r3, [r4, #52]	; 0x34
 80170c0:	7418      	strb	r0, [r3, #16]
 80170c2:	6159      	str	r1, [r3, #20]
 80170c4:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 80170c8:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 80170cc:	e9c3 5006 	strd	r5, r0, [r3, #24]
 80170d0:	e9c3 1208 	strd	r1, r2, [r3, #32]
 80170d4:	f7fc f9e8 	bl	80134a8 <uxr_nanos>
 80170d8:	f002 fdd4 	bl	8019c84 <srand>
 80170dc:	f002 fe00 	bl	8019ce0 <rand>
 80170e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80170e2:	6298      	str	r0, [r3, #40]	; 0x28
 80170e4:	2800      	cmp	r0, #0
 80170e6:	d0f9      	beq.n	80170dc <rmw_init_options_init+0x80>
 80170e8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80170ec:	2000      	movs	r0, #0
 80170ee:	b004      	add	sp, #16
 80170f0:	4770      	bx	lr
 80170f2:	2001      	movs	r0, #1
 80170f4:	e7c1      	b.n	801707a <rmw_init_options_init+0x1e>
 80170f6:	bf00      	nop
 80170f8:	0801becc 	.word	0x0801becc
 80170fc:	0801ba40 	.word	0x0801ba40
 8017100:	2000d1e4 	.word	0x2000d1e4
 8017104:	2000ce38 	.word	0x2000ce38
 8017108:	20009ec8 	.word	0x20009ec8

0801710c <rmw_init_options_copy>:
 801710c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801710e:	b158      	cbz	r0, 8017128 <rmw_init_options_copy+0x1c>
 8017110:	460e      	mov	r6, r1
 8017112:	b149      	cbz	r1, 8017128 <rmw_init_options_copy+0x1c>
 8017114:	4604      	mov	r4, r0
 8017116:	6880      	ldr	r0, [r0, #8]
 8017118:	b120      	cbz	r0, 8017124 <rmw_init_options_copy+0x18>
 801711a:	4b1b      	ldr	r3, [pc, #108]	; (8017188 <rmw_init_options_copy+0x7c>)
 801711c:	6819      	ldr	r1, [r3, #0]
 801711e:	f7e9 f85f 	bl	80001e0 <strcmp>
 8017122:	bb60      	cbnz	r0, 801717e <rmw_init_options_copy+0x72>
 8017124:	68b3      	ldr	r3, [r6, #8]
 8017126:	b113      	cbz	r3, 801712e <rmw_init_options_copy+0x22>
 8017128:	230b      	movs	r3, #11
 801712a:	4618      	mov	r0, r3
 801712c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801712e:	4623      	mov	r3, r4
 8017130:	4632      	mov	r2, r6
 8017132:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8017136:	681d      	ldr	r5, [r3, #0]
 8017138:	6858      	ldr	r0, [r3, #4]
 801713a:	6899      	ldr	r1, [r3, #8]
 801713c:	68df      	ldr	r7, [r3, #12]
 801713e:	60d7      	str	r7, [r2, #12]
 8017140:	3310      	adds	r3, #16
 8017142:	4563      	cmp	r3, ip
 8017144:	6015      	str	r5, [r2, #0]
 8017146:	6050      	str	r0, [r2, #4]
 8017148:	6091      	str	r1, [r2, #8]
 801714a:	f102 0210 	add.w	r2, r2, #16
 801714e:	d1f2      	bne.n	8017136 <rmw_init_options_copy+0x2a>
 8017150:	6819      	ldr	r1, [r3, #0]
 8017152:	685b      	ldr	r3, [r3, #4]
 8017154:	480d      	ldr	r0, [pc, #52]	; (801718c <rmw_init_options_copy+0x80>)
 8017156:	6053      	str	r3, [r2, #4]
 8017158:	6011      	str	r1, [r2, #0]
 801715a:	f7ff ff11 	bl	8016f80 <get_memory>
 801715e:	b188      	cbz	r0, 8017184 <rmw_init_options_copy+0x78>
 8017160:	68c5      	ldr	r5, [r0, #12]
 8017162:	6375      	str	r5, [r6, #52]	; 0x34
 8017164:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8017166:	3610      	adds	r6, #16
 8017168:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801716a:	f105 0410 	add.w	r4, r5, #16
 801716e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017170:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8017174:	2300      	movs	r3, #0
 8017176:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801717a:	4618      	mov	r0, r3
 801717c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801717e:	230c      	movs	r3, #12
 8017180:	4618      	mov	r0, r3
 8017182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017184:	2301      	movs	r3, #1
 8017186:	e7d0      	b.n	801712a <rmw_init_options_copy+0x1e>
 8017188:	0801becc 	.word	0x0801becc
 801718c:	2000d1e4 	.word	0x2000d1e4

08017190 <rmw_init_options_fini>:
 8017190:	2800      	cmp	r0, #0
 8017192:	d036      	beq.n	8017202 <rmw_init_options_fini+0x72>
 8017194:	b530      	push	{r4, r5, lr}
 8017196:	4604      	mov	r4, r0
 8017198:	b08f      	sub	sp, #60	; 0x3c
 801719a:	3020      	adds	r0, #32
 801719c:	f7f8 faa6 	bl	800f6ec <rcutils_allocator_is_valid>
 80171a0:	b328      	cbz	r0, 80171ee <rmw_init_options_fini+0x5e>
 80171a2:	68a0      	ldr	r0, [r4, #8]
 80171a4:	b120      	cbz	r0, 80171b0 <rmw_init_options_fini+0x20>
 80171a6:	4b18      	ldr	r3, [pc, #96]	; (8017208 <rmw_init_options_fini+0x78>)
 80171a8:	6819      	ldr	r1, [r3, #0]
 80171aa:	f7e9 f819 	bl	80001e0 <strcmp>
 80171ae:	bb30      	cbnz	r0, 80171fe <rmw_init_options_fini+0x6e>
 80171b0:	4b16      	ldr	r3, [pc, #88]	; (801720c <rmw_init_options_fini+0x7c>)
 80171b2:	6819      	ldr	r1, [r3, #0]
 80171b4:	b1f9      	cbz	r1, 80171f6 <rmw_init_options_fini+0x66>
 80171b6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80171b8:	e001      	b.n	80171be <rmw_init_options_fini+0x2e>
 80171ba:	6889      	ldr	r1, [r1, #8]
 80171bc:	b1d9      	cbz	r1, 80171f6 <rmw_init_options_fini+0x66>
 80171be:	68cb      	ldr	r3, [r1, #12]
 80171c0:	429a      	cmp	r2, r3
 80171c2:	d1fa      	bne.n	80171ba <rmw_init_options_fini+0x2a>
 80171c4:	4811      	ldr	r0, [pc, #68]	; (801720c <rmw_init_options_fini+0x7c>)
 80171c6:	f7ff feeb 	bl	8016fa0 <put_memory>
 80171ca:	466d      	mov	r5, sp
 80171cc:	4668      	mov	r0, sp
 80171ce:	f7ff fdf9 	bl	8016dc4 <rmw_get_zero_initialized_init_options>
 80171d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80171d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80171d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80171d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80171da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80171dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80171de:	e895 0003 	ldmia.w	r5, {r0, r1}
 80171e2:	e884 0003 	stmia.w	r4, {r0, r1}
 80171e6:	2300      	movs	r3, #0
 80171e8:	4618      	mov	r0, r3
 80171ea:	b00f      	add	sp, #60	; 0x3c
 80171ec:	bd30      	pop	{r4, r5, pc}
 80171ee:	230b      	movs	r3, #11
 80171f0:	4618      	mov	r0, r3
 80171f2:	b00f      	add	sp, #60	; 0x3c
 80171f4:	bd30      	pop	{r4, r5, pc}
 80171f6:	2301      	movs	r3, #1
 80171f8:	4618      	mov	r0, r3
 80171fa:	b00f      	add	sp, #60	; 0x3c
 80171fc:	bd30      	pop	{r4, r5, pc}
 80171fe:	230c      	movs	r3, #12
 8017200:	e7f2      	b.n	80171e8 <rmw_init_options_fini+0x58>
 8017202:	230b      	movs	r3, #11
 8017204:	4618      	mov	r0, r3
 8017206:	4770      	bx	lr
 8017208:	0801becc 	.word	0x0801becc
 801720c:	2000d1e4 	.word	0x2000d1e4

08017210 <rmw_init>:
 8017210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017214:	b082      	sub	sp, #8
 8017216:	2800      	cmp	r0, #0
 8017218:	f000 80d6 	beq.w	80173c8 <rmw_init+0x1b8>
 801721c:	460e      	mov	r6, r1
 801721e:	2900      	cmp	r1, #0
 8017220:	f000 80d2 	beq.w	80173c8 <rmw_init+0x1b8>
 8017224:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017226:	4605      	mov	r5, r0
 8017228:	2b00      	cmp	r3, #0
 801722a:	f000 80cd 	beq.w	80173c8 <rmw_init+0x1b8>
 801722e:	4b79      	ldr	r3, [pc, #484]	; (8017414 <rmw_init+0x204>)
 8017230:	6880      	ldr	r0, [r0, #8]
 8017232:	f8d3 9000 	ldr.w	r9, [r3]
 8017236:	b128      	cbz	r0, 8017244 <rmw_init+0x34>
 8017238:	4649      	mov	r1, r9
 801723a:	f7e8 ffd1 	bl	80001e0 <strcmp>
 801723e:	2800      	cmp	r0, #0
 8017240:	f040 80cc 	bne.w	80173dc <rmw_init+0x1cc>
 8017244:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017248:	68eb      	ldr	r3, [r5, #12]
 801724a:	61f3      	str	r3, [r6, #28]
 801724c:	e9c6 0100 	strd	r0, r1, [r6]
 8017250:	2201      	movs	r2, #1
 8017252:	4971      	ldr	r1, [pc, #452]	; (8017418 <rmw_init+0x208>)
 8017254:	4871      	ldr	r0, [pc, #452]	; (801741c <rmw_init+0x20c>)
 8017256:	f8c6 9008 	str.w	r9, [r6, #8]
 801725a:	f7f9 f861 	bl	8010320 <rmw_uxrce_init_session_memory>
 801725e:	4870      	ldr	r0, [pc, #448]	; (8017420 <rmw_init+0x210>)
 8017260:	4970      	ldr	r1, [pc, #448]	; (8017424 <rmw_init+0x214>)
 8017262:	2204      	movs	r2, #4
 8017264:	f7f9 f896 	bl	8010394 <rmw_uxrce_init_static_input_buffer_memory>
 8017268:	486c      	ldr	r0, [pc, #432]	; (801741c <rmw_init+0x20c>)
 801726a:	f7ff fe89 	bl	8016f80 <get_memory>
 801726e:	2800      	cmp	r0, #0
 8017270:	f000 80af 	beq.w	80173d2 <rmw_init+0x1c2>
 8017274:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8017276:	68c4      	ldr	r4, [r0, #12]
 8017278:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801727a:	7c39      	ldrb	r1, [r7, #16]
 801727c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8017280:	9001      	str	r0, [sp, #4]
 8017282:	6a38      	ldr	r0, [r7, #32]
 8017284:	9000      	str	r0, [sp, #0]
 8017286:	f104 0a10 	add.w	sl, r4, #16
 801728a:	4650      	mov	r0, sl
 801728c:	f000 ffe8 	bl	8018260 <uxr_set_custom_transport_callbacks>
 8017290:	f241 5294 	movw	r2, #5524	; 0x1594
 8017294:	f241 5398 	movw	r3, #5528	; 0x1598
 8017298:	f04f 0800 	mov.w	r8, #0
 801729c:	f241 509c 	movw	r0, #5532	; 0x159c
 80172a0:	f504 51ad 	add.w	r1, r4, #5536	; 0x15a0
 80172a4:	f844 8002 	str.w	r8, [r4, r2]
 80172a8:	f844 8003 	str.w	r8, [r4, r3]
 80172ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80172b0:	f504 735e 	add.w	r3, r4, #888	; 0x378
 80172b4:	f844 8000 	str.w	r8, [r4, r0]
 80172b8:	e9c4 33e1 	strd	r3, r3, [r4, #900]	; 0x384
 80172bc:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 80172c0:	4859      	ldr	r0, [pc, #356]	; (8017428 <rmw_init+0x218>)
 80172c2:	f8c1 8000 	str.w	r8, [r1]
 80172c6:	2201      	movs	r2, #1
 80172c8:	e9c4 98da 	strd	r9, r8, [r4, #872]	; 0x368
 80172cc:	4957      	ldr	r1, [pc, #348]	; (801742c <rmw_init+0x21c>)
 80172ce:	64b4      	str	r4, [r6, #72]	; 0x48
 80172d0:	f7f9 f80c 	bl	80102ec <rmw_uxrce_init_node_memory>
 80172d4:	4956      	ldr	r1, [pc, #344]	; (8017430 <rmw_init+0x220>)
 80172d6:	4857      	ldr	r0, [pc, #348]	; (8017434 <rmw_init+0x224>)
 80172d8:	2205      	movs	r2, #5
 80172da:	f7f8 ffed 	bl	80102b8 <rmw_uxrce_init_subscription_memory>
 80172de:	4956      	ldr	r1, [pc, #344]	; (8017438 <rmw_init+0x228>)
 80172e0:	4856      	ldr	r0, [pc, #344]	; (801743c <rmw_init+0x22c>)
 80172e2:	220a      	movs	r2, #10
 80172e4:	f7f8 ffce 	bl	8010284 <rmw_uxrce_init_publisher_memory>
 80172e8:	4955      	ldr	r1, [pc, #340]	; (8017440 <rmw_init+0x230>)
 80172ea:	4856      	ldr	r0, [pc, #344]	; (8017444 <rmw_init+0x234>)
 80172ec:	2201      	movs	r2, #1
 80172ee:	f7f8 ff95 	bl	801021c <rmw_uxrce_init_service_memory>
 80172f2:	4955      	ldr	r1, [pc, #340]	; (8017448 <rmw_init+0x238>)
 80172f4:	4855      	ldr	r0, [pc, #340]	; (801744c <rmw_init+0x23c>)
 80172f6:	2201      	movs	r2, #1
 80172f8:	f7f8 ffaa 	bl	8010250 <rmw_uxrce_init_client_memory>
 80172fc:	4954      	ldr	r1, [pc, #336]	; (8017450 <rmw_init+0x240>)
 80172fe:	4855      	ldr	r0, [pc, #340]	; (8017454 <rmw_init+0x244>)
 8017300:	220f      	movs	r2, #15
 8017302:	f7f9 f82b 	bl	801035c <rmw_uxrce_init_topic_memory>
 8017306:	4954      	ldr	r1, [pc, #336]	; (8017458 <rmw_init+0x248>)
 8017308:	4854      	ldr	r0, [pc, #336]	; (801745c <rmw_init+0x24c>)
 801730a:	2203      	movs	r2, #3
 801730c:	f7f9 f860 	bl	80103d0 <rmw_uxrce_init_init_options_impl_memory>
 8017310:	4953      	ldr	r1, [pc, #332]	; (8017460 <rmw_init+0x250>)
 8017312:	4854      	ldr	r0, [pc, #336]	; (8017464 <rmw_init+0x254>)
 8017314:	2204      	movs	r2, #4
 8017316:	f7f9 f875 	bl	8010404 <rmw_uxrce_init_wait_set_memory>
 801731a:	4953      	ldr	r1, [pc, #332]	; (8017468 <rmw_init+0x258>)
 801731c:	4853      	ldr	r0, [pc, #332]	; (801746c <rmw_init+0x25c>)
 801731e:	2204      	movs	r2, #4
 8017320:	f7f9 f88c 	bl	801043c <rmw_uxrce_init_guard_condition_memory>
 8017324:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8017326:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 8017328:	4642      	mov	r2, r8
 801732a:	f000 fbbd 	bl	8017aa8 <rmw_uxrce_transport_init>
 801732e:	4607      	mov	r7, r0
 8017330:	2800      	cmp	r0, #0
 8017332:	d158      	bne.n	80173e6 <rmw_init+0x1d6>
 8017334:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8017336:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 801733a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801733c:	4628      	mov	r0, r5
 801733e:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8017342:	f7fa fefd 	bl	8012140 <uxr_init_session>
 8017346:	494a      	ldr	r1, [pc, #296]	; (8017470 <rmw_init+0x260>)
 8017348:	4622      	mov	r2, r4
 801734a:	4628      	mov	r0, r5
 801734c:	f7fa ff1a 	bl	8012184 <uxr_set_topic_callback>
 8017350:	4948      	ldr	r1, [pc, #288]	; (8017474 <rmw_init+0x264>)
 8017352:	463a      	mov	r2, r7
 8017354:	4628      	mov	r0, r5
 8017356:	f7fa ff11 	bl	801217c <uxr_set_status_callback>
 801735a:	4947      	ldr	r1, [pc, #284]	; (8017478 <rmw_init+0x268>)
 801735c:	463a      	mov	r2, r7
 801735e:	4628      	mov	r0, r5
 8017360:	f7fa ff14 	bl	801218c <uxr_set_request_callback>
 8017364:	4945      	ldr	r1, [pc, #276]	; (801747c <rmw_init+0x26c>)
 8017366:	463a      	mov	r2, r7
 8017368:	4628      	mov	r0, r5
 801736a:	f7fa ff13 	bl	8012194 <uxr_set_reply_callback>
 801736e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8017372:	2304      	movs	r3, #4
 8017374:	0092      	lsls	r2, r2, #2
 8017376:	f504 7165 	add.w	r1, r4, #916	; 0x394
 801737a:	4628      	mov	r0, r5
 801737c:	f7fa ff4a 	bl	8012214 <uxr_create_input_reliable_stream>
 8017380:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8017384:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8017388:	0092      	lsls	r2, r2, #2
 801738a:	2304      	movs	r3, #4
 801738c:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8017390:	4628      	mov	r0, r5
 8017392:	f7fa ff15 	bl	80121c0 <uxr_create_output_reliable_stream>
 8017396:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 801739a:	4628      	mov	r0, r5
 801739c:	f7fa ff34 	bl	8012208 <uxr_create_input_best_effort_stream>
 80173a0:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 80173a4:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 80173a8:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80173ac:	4628      	mov	r0, r5
 80173ae:	3114      	adds	r1, #20
 80173b0:	f7fa fef4 	bl	801219c <uxr_create_output_best_effort_stream>
 80173b4:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 80173b8:	4628      	mov	r0, r5
 80173ba:	f7fb fb85 	bl	8012ac8 <uxr_create_session>
 80173be:	b1f8      	cbz	r0, 8017400 <rmw_init+0x1f0>
 80173c0:	4638      	mov	r0, r7
 80173c2:	b002      	add	sp, #8
 80173c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173c8:	270b      	movs	r7, #11
 80173ca:	4638      	mov	r0, r7
 80173cc:	b002      	add	sp, #8
 80173ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173d2:	2701      	movs	r7, #1
 80173d4:	4638      	mov	r0, r7
 80173d6:	b002      	add	sp, #8
 80173d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173dc:	270c      	movs	r7, #12
 80173de:	4638      	mov	r0, r7
 80173e0:	b002      	add	sp, #8
 80173e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173e6:	4650      	mov	r0, sl
 80173e8:	f000 ff7a 	bl	80182e0 <uxr_close_custom_transport>
 80173ec:	480b      	ldr	r0, [pc, #44]	; (801741c <rmw_init+0x20c>)
 80173ee:	4621      	mov	r1, r4
 80173f0:	f7ff fdd6 	bl	8016fa0 <put_memory>
 80173f4:	4638      	mov	r0, r7
 80173f6:	f8c6 8048 	str.w	r8, [r6, #72]	; 0x48
 80173fa:	b002      	add	sp, #8
 80173fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017400:	4650      	mov	r0, sl
 8017402:	f000 ff6d 	bl	80182e0 <uxr_close_custom_transport>
 8017406:	4805      	ldr	r0, [pc, #20]	; (801741c <rmw_init+0x20c>)
 8017408:	4621      	mov	r1, r4
 801740a:	f7ff fdc9 	bl	8016fa0 <put_memory>
 801740e:	64b7      	str	r7, [r6, #72]	; 0x48
 8017410:	2701      	movs	r7, #1
 8017412:	e7d5      	b.n	80173c0 <rmw_init+0x1b0>
 8017414:	0801becc 	.word	0x0801becc
 8017418:	2000d2c0 	.word	0x2000d2c0
 801741c:	2000d090 	.word	0x2000d090
 8017420:	20009ee8 	.word	0x20009ee8
 8017424:	2000acc8 	.word	0x2000acc8
 8017428:	2000cebc 	.word	0x2000cebc
 801742c:	2000d0a0 	.word	0x2000d0a0
 8017430:	2000a7f0 	.word	0x2000a7f0
 8017434:	2000d154 	.word	0x2000d154
 8017438:	20009f08 	.word	0x20009f08
 801743c:	20009ef8 	.word	0x20009ef8
 8017440:	2000d1f8 	.word	0x2000d1f8
 8017444:	2000d144 	.word	0x2000d144
 8017448:	2000ac00 	.word	0x2000ac00
 801744c:	2000a778 	.word	0x2000a778
 8017450:	2000cecc 	.word	0x2000cecc
 8017454:	2000d080 	.word	0x2000d080
 8017458:	2000ce38 	.word	0x2000ce38
 801745c:	2000d1e4 	.word	0x2000d1e4
 8017460:	2000cdc8 	.word	0x2000cdc8
 8017464:	2000e868 	.word	0x2000e868
 8017468:	2000d164 	.word	0x2000d164
 801746c:	2000d070 	.word	0x2000d070
 8017470:	08019831 	.word	0x08019831
 8017474:	08019829 	.word	0x08019829
 8017478:	080198c5 	.word	0x080198c5
 801747c:	0801995d 	.word	0x0801995d

08017480 <rmw_context_fini>:
 8017480:	4b17      	ldr	r3, [pc, #92]	; (80174e0 <rmw_context_fini+0x60>)
 8017482:	b570      	push	{r4, r5, r6, lr}
 8017484:	681c      	ldr	r4, [r3, #0]
 8017486:	4605      	mov	r5, r0
 8017488:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801748a:	b33c      	cbz	r4, 80174dc <rmw_context_fini+0x5c>
 801748c:	2600      	movs	r6, #0
 801748e:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 8017492:	691a      	ldr	r2, [r3, #16]
 8017494:	4282      	cmp	r2, r0
 8017496:	d018      	beq.n	80174ca <rmw_context_fini+0x4a>
 8017498:	2c00      	cmp	r4, #0
 801749a:	d1f8      	bne.n	801748e <rmw_context_fini+0xe>
 801749c:	b188      	cbz	r0, 80174c2 <rmw_context_fini+0x42>
 801749e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80174a2:	789b      	ldrb	r3, [r3, #2]
 80174a4:	2b01      	cmp	r3, #1
 80174a6:	bf14      	ite	ne
 80174a8:	210a      	movne	r1, #10
 80174aa:	2100      	moveq	r1, #0
 80174ac:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80174b0:	f7fb fccc 	bl	8012e4c <uxr_delete_session_retries>
 80174b4:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 80174b6:	f7f8 ffdb 	bl	8010470 <rmw_uxrce_fini_session_memory>
 80174ba:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 80174bc:	3010      	adds	r0, #16
 80174be:	f000 ff0f 	bl	80182e0 <uxr_close_custom_transport>
 80174c2:	2300      	movs	r3, #0
 80174c4:	4630      	mov	r0, r6
 80174c6:	64ab      	str	r3, [r5, #72]	; 0x48
 80174c8:	bd70      	pop	{r4, r5, r6, pc}
 80174ca:	f103 0018 	add.w	r0, r3, #24
 80174ce:	f000 f91f 	bl	8017710 <rmw_destroy_node>
 80174d2:	4606      	mov	r6, r0
 80174d4:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 80174d6:	2c00      	cmp	r4, #0
 80174d8:	d1d9      	bne.n	801748e <rmw_context_fini+0xe>
 80174da:	e7df      	b.n	801749c <rmw_context_fini+0x1c>
 80174dc:	4626      	mov	r6, r4
 80174de:	e7dd      	b.n	801749c <rmw_context_fini+0x1c>
 80174e0:	2000cebc 	.word	0x2000cebc

080174e4 <create_topic>:
 80174e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174e8:	4605      	mov	r5, r0
 80174ea:	b084      	sub	sp, #16
 80174ec:	482b      	ldr	r0, [pc, #172]	; (801759c <create_topic+0xb8>)
 80174ee:	460f      	mov	r7, r1
 80174f0:	4616      	mov	r6, r2
 80174f2:	f7ff fd45 	bl	8016f80 <get_memory>
 80174f6:	4604      	mov	r4, r0
 80174f8:	2800      	cmp	r0, #0
 80174fa:	d036      	beq.n	801756a <create_topic+0x86>
 80174fc:	692a      	ldr	r2, [r5, #16]
 80174fe:	68c4      	ldr	r4, [r0, #12]
 8017500:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80175a4 <create_topic+0xc0>
 8017504:	61a5      	str	r5, [r4, #24]
 8017506:	f241 5396 	movw	r3, #5526	; 0x1596
 801750a:	6166      	str	r6, [r4, #20]
 801750c:	5ad0      	ldrh	r0, [r2, r3]
 801750e:	1c41      	adds	r1, r0, #1
 8017510:	52d1      	strh	r1, [r2, r3]
 8017512:	2102      	movs	r1, #2
 8017514:	f7fa fc32 	bl	8011d7c <uxr_object_id>
 8017518:	4641      	mov	r1, r8
 801751a:	6120      	str	r0, [r4, #16]
 801751c:	223c      	movs	r2, #60	; 0x3c
 801751e:	4638      	mov	r0, r7
 8017520:	f7f9 f97c 	bl	801081c <generate_topic_name>
 8017524:	4607      	mov	r7, r0
 8017526:	b320      	cbz	r0, 8017572 <create_topic+0x8e>
 8017528:	4f1d      	ldr	r7, [pc, #116]	; (80175a0 <create_topic+0xbc>)
 801752a:	4630      	mov	r0, r6
 801752c:	4639      	mov	r1, r7
 801752e:	2264      	movs	r2, #100	; 0x64
 8017530:	f7f9 f944 	bl	80107bc <generate_type_name>
 8017534:	4606      	mov	r6, r0
 8017536:	b320      	cbz	r0, 8017582 <create_topic+0x9e>
 8017538:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
 801753c:	2106      	movs	r1, #6
 801753e:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8017542:	9701      	str	r7, [sp, #4]
 8017544:	f8cd 8000 	str.w	r8, [sp]
 8017548:	9102      	str	r1, [sp, #8]
 801754a:	6811      	ldr	r1, [r2, #0]
 801754c:	6922      	ldr	r2, [r4, #16]
 801754e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017552:	f7fa fa8f 	bl	8011a74 <uxr_buffer_create_topic_bin>
 8017556:	4602      	mov	r2, r0
 8017558:	6928      	ldr	r0, [r5, #16]
 801755a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801755e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8017562:	f7f9 f8f5 	bl	8010750 <run_xrce_session>
 8017566:	4605      	mov	r5, r0
 8017568:	b198      	cbz	r0, 8017592 <create_topic+0xae>
 801756a:	4620      	mov	r0, r4
 801756c:	b004      	add	sp, #16
 801756e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017572:	4620      	mov	r0, r4
 8017574:	f7f8 fff2 	bl	801055c <rmw_uxrce_fini_topic_memory>
 8017578:	463c      	mov	r4, r7
 801757a:	4620      	mov	r0, r4
 801757c:	b004      	add	sp, #16
 801757e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017582:	4620      	mov	r0, r4
 8017584:	f7f8 ffea 	bl	801055c <rmw_uxrce_fini_topic_memory>
 8017588:	4634      	mov	r4, r6
 801758a:	4620      	mov	r0, r4
 801758c:	b004      	add	sp, #16
 801758e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017592:	4620      	mov	r0, r4
 8017594:	f7f8 ffe2 	bl	801055c <rmw_uxrce_fini_topic_memory>
 8017598:	462c      	mov	r4, r5
 801759a:	e7e6      	b.n	801756a <create_topic+0x86>
 801759c:	2000d080 	.word	0x2000d080
 80175a0:	20009ca8 	.word	0x20009ca8
 80175a4:	20009c6c 	.word	0x20009c6c

080175a8 <destroy_topic>:
 80175a8:	b538      	push	{r3, r4, r5, lr}
 80175aa:	6985      	ldr	r5, [r0, #24]
 80175ac:	b1d5      	cbz	r5, 80175e4 <destroy_topic+0x3c>
 80175ae:	4604      	mov	r4, r0
 80175b0:	6928      	ldr	r0, [r5, #16]
 80175b2:	6922      	ldr	r2, [r4, #16]
 80175b4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80175b8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80175bc:	6819      	ldr	r1, [r3, #0]
 80175be:	f7fa f9db 	bl	8011978 <uxr_buffer_delete_entity>
 80175c2:	4602      	mov	r2, r0
 80175c4:	6928      	ldr	r0, [r5, #16]
 80175c6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80175ca:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80175ce:	f7f9 f8bf 	bl	8010750 <run_xrce_session>
 80175d2:	2800      	cmp	r0, #0
 80175d4:	4620      	mov	r0, r4
 80175d6:	bf14      	ite	ne
 80175d8:	2400      	movne	r4, #0
 80175da:	2402      	moveq	r4, #2
 80175dc:	f7f8 ffbe 	bl	801055c <rmw_uxrce_fini_topic_memory>
 80175e0:	4620      	mov	r0, r4
 80175e2:	bd38      	pop	{r3, r4, r5, pc}
 80175e4:	2401      	movs	r4, #1
 80175e6:	4620      	mov	r0, r4
 80175e8:	bd38      	pop	{r3, r4, r5, pc}
 80175ea:	bf00      	nop

080175ec <create_node>:
 80175ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80175f0:	b083      	sub	sp, #12
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d05f      	beq.n	80176b6 <create_node+0xca>
 80175f6:	4606      	mov	r6, r0
 80175f8:	4835      	ldr	r0, [pc, #212]	; (80176d0 <create_node+0xe4>)
 80175fa:	460f      	mov	r7, r1
 80175fc:	4690      	mov	r8, r2
 80175fe:	461d      	mov	r5, r3
 8017600:	f7ff fcbe 	bl	8016f80 <get_memory>
 8017604:	2800      	cmp	r0, #0
 8017606:	d056      	beq.n	80176b6 <create_node+0xca>
 8017608:	68c4      	ldr	r4, [r0, #12]
 801760a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 801760c:	6123      	str	r3, [r4, #16]
 801760e:	f7ff fd1f 	bl	8017050 <rmw_get_implementation_identifier>
 8017612:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8017616:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801761a:	f8c4 9020 	str.w	r9, [r4, #32]
 801761e:	4630      	mov	r0, r6
 8017620:	f7e8 fde8 	bl	80001f4 <strlen>
 8017624:	1c42      	adds	r2, r0, #1
 8017626:	2a3c      	cmp	r2, #60	; 0x3c
 8017628:	f104 0518 	add.w	r5, r4, #24
 801762c:	d840      	bhi.n	80176b0 <create_node+0xc4>
 801762e:	4648      	mov	r0, r9
 8017630:	4631      	mov	r1, r6
 8017632:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8017636:	f003 f846 	bl	801a6c6 <memcpy>
 801763a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 801763e:	4638      	mov	r0, r7
 8017640:	f7e8 fdd8 	bl	80001f4 <strlen>
 8017644:	1c42      	adds	r2, r0, #1
 8017646:	2a3c      	cmp	r2, #60	; 0x3c
 8017648:	d832      	bhi.n	80176b0 <create_node+0xc4>
 801764a:	4639      	mov	r1, r7
 801764c:	4648      	mov	r0, r9
 801764e:	f003 f83a 	bl	801a6c6 <memcpy>
 8017652:	f241 5394 	movw	r3, #5524	; 0x1594
 8017656:	6922      	ldr	r2, [r4, #16]
 8017658:	5ad0      	ldrh	r0, [r2, r3]
 801765a:	2101      	movs	r1, #1
 801765c:	eb00 0c01 	add.w	ip, r0, r1
 8017660:	f822 c003 	strh.w	ip, [r2, r3]
 8017664:	f7fa fb8a 	bl	8011d7c <uxr_object_id>
 8017668:	6160      	str	r0, [r4, #20]
 801766a:	783b      	ldrb	r3, [r7, #0]
 801766c:	2b2f      	cmp	r3, #47	; 0x2f
 801766e:	d127      	bne.n	80176c0 <create_node+0xd4>
 8017670:	787b      	ldrb	r3, [r7, #1]
 8017672:	bb2b      	cbnz	r3, 80176c0 <create_node+0xd4>
 8017674:	4a17      	ldr	r2, [pc, #92]	; (80176d4 <create_node+0xe8>)
 8017676:	4818      	ldr	r0, [pc, #96]	; (80176d8 <create_node+0xec>)
 8017678:	4633      	mov	r3, r6
 801767a:	213c      	movs	r1, #60	; 0x3c
 801767c:	f002 fda4 	bl	801a1c8 <sniprintf>
 8017680:	6920      	ldr	r0, [r4, #16]
 8017682:	4b15      	ldr	r3, [pc, #84]	; (80176d8 <create_node+0xec>)
 8017684:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8017688:	9300      	str	r3, [sp, #0]
 801768a:	2306      	movs	r3, #6
 801768c:	9301      	str	r3, [sp, #4]
 801768e:	6811      	ldr	r1, [r2, #0]
 8017690:	6962      	ldr	r2, [r4, #20]
 8017692:	fa1f f388 	uxth.w	r3, r8
 8017696:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801769a:	f7fa f9b9 	bl	8011a10 <uxr_buffer_create_participant_bin>
 801769e:	4602      	mov	r2, r0
 80176a0:	6920      	ldr	r0, [r4, #16]
 80176a2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80176a6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80176aa:	f7f9 f851 	bl	8010750 <run_xrce_session>
 80176ae:	b918      	cbnz	r0, 80176b8 <create_node+0xcc>
 80176b0:	4628      	mov	r0, r5
 80176b2:	f7f8 fee3 	bl	801047c <rmw_uxrce_fini_node_memory>
 80176b6:	2500      	movs	r5, #0
 80176b8:	4628      	mov	r0, r5
 80176ba:	b003      	add	sp, #12
 80176bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176c0:	4a06      	ldr	r2, [pc, #24]	; (80176dc <create_node+0xf0>)
 80176c2:	9600      	str	r6, [sp, #0]
 80176c4:	463b      	mov	r3, r7
 80176c6:	213c      	movs	r1, #60	; 0x3c
 80176c8:	4803      	ldr	r0, [pc, #12]	; (80176d8 <create_node+0xec>)
 80176ca:	f002 fd7d 	bl	801a1c8 <sniprintf>
 80176ce:	e7d7      	b.n	8017680 <create_node+0x94>
 80176d0:	2000cebc 	.word	0x2000cebc
 80176d4:	0801b9c4 	.word	0x0801b9c4
 80176d8:	20009d0c 	.word	0x20009d0c
 80176dc:	0801ba04 	.word	0x0801ba04

080176e0 <rmw_create_node>:
 80176e0:	b199      	cbz	r1, 801770a <rmw_create_node+0x2a>
 80176e2:	b430      	push	{r4, r5}
 80176e4:	4615      	mov	r5, r2
 80176e6:	461a      	mov	r2, r3
 80176e8:	780b      	ldrb	r3, [r1, #0]
 80176ea:	460c      	mov	r4, r1
 80176ec:	b153      	cbz	r3, 8017704 <rmw_create_node+0x24>
 80176ee:	b14d      	cbz	r5, 8017704 <rmw_create_node+0x24>
 80176f0:	782b      	ldrb	r3, [r5, #0]
 80176f2:	b13b      	cbz	r3, 8017704 <rmw_create_node+0x24>
 80176f4:	b902      	cbnz	r2, 80176f8 <rmw_create_node+0x18>
 80176f6:	69c2      	ldr	r2, [r0, #28]
 80176f8:	4603      	mov	r3, r0
 80176fa:	4629      	mov	r1, r5
 80176fc:	4620      	mov	r0, r4
 80176fe:	bc30      	pop	{r4, r5}
 8017700:	f7ff bf74 	b.w	80175ec <create_node>
 8017704:	2000      	movs	r0, #0
 8017706:	bc30      	pop	{r4, r5}
 8017708:	4770      	bx	lr
 801770a:	2000      	movs	r0, #0
 801770c:	4770      	bx	lr
 801770e:	bf00      	nop

08017710 <rmw_destroy_node>:
 8017710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017712:	2800      	cmp	r0, #0
 8017714:	d066      	beq.n	80177e4 <rmw_destroy_node+0xd4>
 8017716:	4607      	mov	r7, r0
 8017718:	6800      	ldr	r0, [r0, #0]
 801771a:	b128      	cbz	r0, 8017728 <rmw_destroy_node+0x18>
 801771c:	4b34      	ldr	r3, [pc, #208]	; (80177f0 <rmw_destroy_node+0xe0>)
 801771e:	6819      	ldr	r1, [r3, #0]
 8017720:	f7e8 fd5e 	bl	80001e0 <strcmp>
 8017724:	2800      	cmp	r0, #0
 8017726:	d15d      	bne.n	80177e4 <rmw_destroy_node+0xd4>
 8017728:	687c      	ldr	r4, [r7, #4]
 801772a:	2c00      	cmp	r4, #0
 801772c:	d05a      	beq.n	80177e4 <rmw_destroy_node+0xd4>
 801772e:	4b31      	ldr	r3, [pc, #196]	; (80177f4 <rmw_destroy_node+0xe4>)
 8017730:	681d      	ldr	r5, [r3, #0]
 8017732:	2d00      	cmp	r5, #0
 8017734:	d059      	beq.n	80177ea <rmw_destroy_node+0xda>
 8017736:	2600      	movs	r6, #0
 8017738:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 801773c:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8017740:	429c      	cmp	r4, r3
 8017742:	d047      	beq.n	80177d4 <rmw_destroy_node+0xc4>
 8017744:	2d00      	cmp	r5, #0
 8017746:	d1f7      	bne.n	8017738 <rmw_destroy_node+0x28>
 8017748:	4b2b      	ldr	r3, [pc, #172]	; (80177f8 <rmw_destroy_node+0xe8>)
 801774a:	681d      	ldr	r5, [r3, #0]
 801774c:	b15d      	cbz	r5, 8017766 <rmw_destroy_node+0x56>
 801774e:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 8017752:	6a0b      	ldr	r3, [r1, #32]
 8017754:	429c      	cmp	r4, r3
 8017756:	d1f9      	bne.n	801774c <rmw_destroy_node+0x3c>
 8017758:	317c      	adds	r1, #124	; 0x7c
 801775a:	4638      	mov	r0, r7
 801775c:	f7f8 fcac 	bl	80100b8 <rmw_destroy_subscription>
 8017760:	4606      	mov	r6, r0
 8017762:	2d00      	cmp	r5, #0
 8017764:	d1f3      	bne.n	801774e <rmw_destroy_node+0x3e>
 8017766:	4b25      	ldr	r3, [pc, #148]	; (80177fc <rmw_destroy_node+0xec>)
 8017768:	681d      	ldr	r5, [r3, #0]
 801776a:	b15d      	cbz	r5, 8017784 <rmw_destroy_node+0x74>
 801776c:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 8017770:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8017772:	429c      	cmp	r4, r3
 8017774:	d1f9      	bne.n	801776a <rmw_destroy_node+0x5a>
 8017776:	317c      	adds	r1, #124	; 0x7c
 8017778:	4638      	mov	r0, r7
 801777a:	f000 f951 	bl	8017a20 <rmw_destroy_service>
 801777e:	4606      	mov	r6, r0
 8017780:	2d00      	cmp	r5, #0
 8017782:	d1f3      	bne.n	801776c <rmw_destroy_node+0x5c>
 8017784:	4b1e      	ldr	r3, [pc, #120]	; (8017800 <rmw_destroy_node+0xf0>)
 8017786:	681d      	ldr	r5, [r3, #0]
 8017788:	b15d      	cbz	r5, 80177a2 <rmw_destroy_node+0x92>
 801778a:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 801778e:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8017790:	429c      	cmp	r4, r3
 8017792:	d1f9      	bne.n	8017788 <rmw_destroy_node+0x78>
 8017794:	317c      	adds	r1, #124	; 0x7c
 8017796:	4638      	mov	r0, r7
 8017798:	f7ff fc16 	bl	8016fc8 <rmw_destroy_client>
 801779c:	4606      	mov	r6, r0
 801779e:	2d00      	cmp	r5, #0
 80177a0:	d1f3      	bne.n	801778a <rmw_destroy_node+0x7a>
 80177a2:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 80177a6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80177aa:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80177ae:	6819      	ldr	r1, [r3, #0]
 80177b0:	f7fa f8e2 	bl	8011978 <uxr_buffer_delete_entity>
 80177b4:	4602      	mov	r2, r0
 80177b6:	6920      	ldr	r0, [r4, #16]
 80177b8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80177bc:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80177c0:	f7f8 ffc6 	bl	8010750 <run_xrce_session>
 80177c4:	2800      	cmp	r0, #0
 80177c6:	bf08      	it	eq
 80177c8:	2602      	moveq	r6, #2
 80177ca:	4638      	mov	r0, r7
 80177cc:	f7f8 fe56 	bl	801047c <rmw_uxrce_fini_node_memory>
 80177d0:	4630      	mov	r0, r6
 80177d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177d4:	3184      	adds	r1, #132	; 0x84
 80177d6:	4638      	mov	r0, r7
 80177d8:	f7f8 fb3c 	bl	800fe54 <rmw_destroy_publisher>
 80177dc:	4606      	mov	r6, r0
 80177de:	2d00      	cmp	r5, #0
 80177e0:	d1aa      	bne.n	8017738 <rmw_destroy_node+0x28>
 80177e2:	e7b1      	b.n	8017748 <rmw_destroy_node+0x38>
 80177e4:	2601      	movs	r6, #1
 80177e6:	4630      	mov	r0, r6
 80177e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177ea:	462e      	mov	r6, r5
 80177ec:	e7ac      	b.n	8017748 <rmw_destroy_node+0x38>
 80177ee:	bf00      	nop
 80177f0:	0801becc 	.word	0x0801becc
 80177f4:	20009ef8 	.word	0x20009ef8
 80177f8:	2000d154 	.word	0x2000d154
 80177fc:	2000d144 	.word	0x2000d144
 8017800:	2000a778 	.word	0x2000a778

08017804 <rmw_node_get_graph_guard_condition>:
 8017804:	6843      	ldr	r3, [r0, #4]
 8017806:	6918      	ldr	r0, [r3, #16]
 8017808:	f500 705a 	add.w	r0, r0, #872	; 0x368
 801780c:	4770      	bx	lr
 801780e:	bf00      	nop

08017810 <rmw_take_request>:
 8017810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017814:	4605      	mov	r5, r0
 8017816:	6800      	ldr	r0, [r0, #0]
 8017818:	b089      	sub	sp, #36	; 0x24
 801781a:	460c      	mov	r4, r1
 801781c:	4690      	mov	r8, r2
 801781e:	461e      	mov	r6, r3
 8017820:	b128      	cbz	r0, 801782e <rmw_take_request+0x1e>
 8017822:	4b28      	ldr	r3, [pc, #160]	; (80178c4 <rmw_take_request+0xb4>)
 8017824:	6819      	ldr	r1, [r3, #0]
 8017826:	f7e8 fcdb 	bl	80001e0 <strcmp>
 801782a:	2800      	cmp	r0, #0
 801782c:	d146      	bne.n	80178bc <rmw_take_request+0xac>
 801782e:	b10e      	cbz	r6, 8017834 <rmw_take_request+0x24>
 8017830:	2300      	movs	r3, #0
 8017832:	7033      	strb	r3, [r6, #0]
 8017834:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8017838:	f7f8 ff12 	bl	8010660 <rmw_uxrce_clean_expired_static_input_buffer>
 801783c:	4648      	mov	r0, r9
 801783e:	f7f8 fee5 	bl	801060c <rmw_uxrce_find_static_input_buffer_by_owner>
 8017842:	4607      	mov	r7, r0
 8017844:	b3b0      	cbz	r0, 80178b4 <rmw_take_request+0xa4>
 8017846:	68c5      	ldr	r5, [r0, #12]
 8017848:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 801784c:	f8d5 183c 	ldr.w	r1, [r5, #2108]	; 0x83c
 8017850:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8017854:	7423      	strb	r3, [r4, #16]
 8017856:	e9c4 1208 	strd	r1, r2, [r4, #32]
 801785a:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 801785e:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 8017862:	74e2      	strb	r2, [r4, #19]
 8017864:	f8a4 3011 	strh.w	r3, [r4, #17]
 8017868:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 801786c:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 8017870:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 8017874:	61e1      	str	r1, [r4, #28]
 8017876:	6162      	str	r2, [r4, #20]
 8017878:	61a3      	str	r3, [r4, #24]
 801787a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801787e:	689b      	ldr	r3, [r3, #8]
 8017880:	4798      	blx	r3
 8017882:	6844      	ldr	r4, [r0, #4]
 8017884:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8017888:	f105 0110 	add.w	r1, r5, #16
 801788c:	4668      	mov	r0, sp
 801788e:	f7fa f803 	bl	8011898 <ucdr_init_buffer>
 8017892:	68e3      	ldr	r3, [r4, #12]
 8017894:	4641      	mov	r1, r8
 8017896:	4668      	mov	r0, sp
 8017898:	4798      	blx	r3
 801789a:	4639      	mov	r1, r7
 801789c:	4604      	mov	r4, r0
 801789e:	480a      	ldr	r0, [pc, #40]	; (80178c8 <rmw_take_request+0xb8>)
 80178a0:	f7ff fb7e 	bl	8016fa0 <put_memory>
 80178a4:	b106      	cbz	r6, 80178a8 <rmw_take_request+0x98>
 80178a6:	7034      	strb	r4, [r6, #0]
 80178a8:	f084 0001 	eor.w	r0, r4, #1
 80178ac:	b2c0      	uxtb	r0, r0
 80178ae:	b009      	add	sp, #36	; 0x24
 80178b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178b4:	2001      	movs	r0, #1
 80178b6:	b009      	add	sp, #36	; 0x24
 80178b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178bc:	200c      	movs	r0, #12
 80178be:	b009      	add	sp, #36	; 0x24
 80178c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178c4:	0801becc 	.word	0x0801becc
 80178c8:	20009ee8 	.word	0x20009ee8

080178cc <rmw_send_response>:
 80178cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178ce:	4605      	mov	r5, r0
 80178d0:	6800      	ldr	r0, [r0, #0]
 80178d2:	b091      	sub	sp, #68	; 0x44
 80178d4:	460c      	mov	r4, r1
 80178d6:	4617      	mov	r7, r2
 80178d8:	b128      	cbz	r0, 80178e6 <rmw_send_response+0x1a>
 80178da:	4b2a      	ldr	r3, [pc, #168]	; (8017984 <rmw_send_response+0xb8>)
 80178dc:	6819      	ldr	r1, [r3, #0]
 80178de:	f7e8 fc7f 	bl	80001e0 <strcmp>
 80178e2:	2800      	cmp	r0, #0
 80178e4:	d143      	bne.n	801796e <rmw_send_response+0xa2>
 80178e6:	4623      	mov	r3, r4
 80178e8:	4626      	mov	r6, r4
 80178ea:	f853 0f04 	ldr.w	r0, [r3, #4]!
 80178ee:	f836 ef01 	ldrh.w	lr, [r6, #1]!
 80178f2:	6859      	ldr	r1, [r3, #4]
 80178f4:	686d      	ldr	r5, [r5, #4]
 80178f6:	689a      	ldr	r2, [r3, #8]
 80178f8:	78b3      	ldrb	r3, [r6, #2]
 80178fa:	f894 c000 	ldrb.w	ip, [r4]
 80178fe:	6966      	ldr	r6, [r4, #20]
 8017900:	f88d 3016 	strb.w	r3, [sp, #22]
 8017904:	ab02      	add	r3, sp, #8
 8017906:	f8ad e014 	strh.w	lr, [sp, #20]
 801790a:	f88d c017 	strb.w	ip, [sp, #23]
 801790e:	9606      	str	r6, [sp, #24]
 8017910:	c307      	stmia	r3!, {r0, r1, r2}
 8017912:	696b      	ldr	r3, [r5, #20]
 8017914:	6922      	ldr	r2, [r4, #16]
 8017916:	9207      	str	r2, [sp, #28]
 8017918:	68db      	ldr	r3, [r3, #12]
 801791a:	6fae      	ldr	r6, [r5, #120]	; 0x78
 801791c:	4798      	blx	r3
 801791e:	4603      	mov	r3, r0
 8017920:	4638      	mov	r0, r7
 8017922:	685c      	ldr	r4, [r3, #4]
 8017924:	6923      	ldr	r3, [r4, #16]
 8017926:	4798      	blx	r3
 8017928:	6933      	ldr	r3, [r6, #16]
 801792a:	3018      	adds	r0, #24
 801792c:	9000      	str	r0, [sp, #0]
 801792e:	692a      	ldr	r2, [r5, #16]
 8017930:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8017932:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8017936:	ab08      	add	r3, sp, #32
 8017938:	f7fb fe56 	bl	80135e8 <uxr_prepare_output_stream>
 801793c:	b910      	cbnz	r0, 8017944 <rmw_send_response+0x78>
 801793e:	2001      	movs	r0, #1
 8017940:	b011      	add	sp, #68	; 0x44
 8017942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017944:	a902      	add	r1, sp, #8
 8017946:	a808      	add	r0, sp, #32
 8017948:	f7fc ff6c 	bl	8014824 <uxr_serialize_SampleIdentity>
 801794c:	68a3      	ldr	r3, [r4, #8]
 801794e:	a908      	add	r1, sp, #32
 8017950:	4638      	mov	r0, r7
 8017952:	4798      	blx	r3
 8017954:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8017958:	6930      	ldr	r0, [r6, #16]
 801795a:	2b01      	cmp	r3, #1
 801795c:	d00a      	beq.n	8017974 <rmw_send_response+0xa8>
 801795e:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8017960:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017964:	f7fb f838 	bl	80129d8 <uxr_run_session_until_confirm_delivery>
 8017968:	2000      	movs	r0, #0
 801796a:	b011      	add	sp, #68	; 0x44
 801796c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801796e:	200c      	movs	r0, #12
 8017970:	b011      	add	sp, #68	; 0x44
 8017972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017974:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017978:	f7fa fc72 	bl	8012260 <uxr_flash_output_streams>
 801797c:	2000      	movs	r0, #0
 801797e:	b011      	add	sp, #68	; 0x44
 8017980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017982:	bf00      	nop
 8017984:	0801becc 	.word	0x0801becc

08017988 <rmw_take_response>:
 8017988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801798c:	4604      	mov	r4, r0
 801798e:	6800      	ldr	r0, [r0, #0]
 8017990:	b089      	sub	sp, #36	; 0x24
 8017992:	4688      	mov	r8, r1
 8017994:	4617      	mov	r7, r2
 8017996:	461d      	mov	r5, r3
 8017998:	b120      	cbz	r0, 80179a4 <rmw_take_response+0x1c>
 801799a:	4b1f      	ldr	r3, [pc, #124]	; (8017a18 <rmw_take_response+0x90>)
 801799c:	6819      	ldr	r1, [r3, #0]
 801799e:	f7e8 fc1f 	bl	80001e0 <strcmp>
 80179a2:	bb88      	cbnz	r0, 8017a08 <rmw_take_response+0x80>
 80179a4:	b10d      	cbz	r5, 80179aa <rmw_take_response+0x22>
 80179a6:	2300      	movs	r3, #0
 80179a8:	702b      	strb	r3, [r5, #0]
 80179aa:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80179ae:	f7f8 fe57 	bl	8010660 <rmw_uxrce_clean_expired_static_input_buffer>
 80179b2:	4648      	mov	r0, r9
 80179b4:	f7f8 fe2a 	bl	801060c <rmw_uxrce_find_static_input_buffer_by_owner>
 80179b8:	4606      	mov	r6, r0
 80179ba:	b348      	cbz	r0, 8017a10 <rmw_take_response+0x88>
 80179bc:	68c4      	ldr	r4, [r0, #12]
 80179be:	f8d9 1014 	ldr.w	r1, [r9, #20]
 80179c2:	f604 0328 	addw	r3, r4, #2088	; 0x828
 80179c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179ca:	68c9      	ldr	r1, [r1, #12]
 80179cc:	e9c8 2308 	strd	r2, r3, [r8, #32]
 80179d0:	4788      	blx	r1
 80179d2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80179d6:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 80179da:	f104 0110 	add.w	r1, r4, #16
 80179de:	4668      	mov	r0, sp
 80179e0:	f7f9 ff5a 	bl	8011898 <ucdr_init_buffer>
 80179e4:	4639      	mov	r1, r7
 80179e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80179ea:	4668      	mov	r0, sp
 80179ec:	4798      	blx	r3
 80179ee:	4631      	mov	r1, r6
 80179f0:	4604      	mov	r4, r0
 80179f2:	480a      	ldr	r0, [pc, #40]	; (8017a1c <rmw_take_response+0x94>)
 80179f4:	f7ff fad4 	bl	8016fa0 <put_memory>
 80179f8:	b105      	cbz	r5, 80179fc <rmw_take_response+0x74>
 80179fa:	702c      	strb	r4, [r5, #0]
 80179fc:	f084 0001 	eor.w	r0, r4, #1
 8017a00:	b2c0      	uxtb	r0, r0
 8017a02:	b009      	add	sp, #36	; 0x24
 8017a04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a08:	200c      	movs	r0, #12
 8017a0a:	b009      	add	sp, #36	; 0x24
 8017a0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a10:	2001      	movs	r0, #1
 8017a12:	b009      	add	sp, #36	; 0x24
 8017a14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a18:	0801becc 	.word	0x0801becc
 8017a1c:	20009ee8 	.word	0x20009ee8

08017a20 <rmw_destroy_service>:
 8017a20:	b570      	push	{r4, r5, r6, lr}
 8017a22:	b128      	cbz	r0, 8017a30 <rmw_destroy_service+0x10>
 8017a24:	4604      	mov	r4, r0
 8017a26:	6800      	ldr	r0, [r0, #0]
 8017a28:	460d      	mov	r5, r1
 8017a2a:	f7f8 ff11 	bl	8010850 <is_uxrce_rmw_identifier_valid>
 8017a2e:	b910      	cbnz	r0, 8017a36 <rmw_destroy_service+0x16>
 8017a30:	2401      	movs	r4, #1
 8017a32:	4620      	mov	r0, r4
 8017a34:	bd70      	pop	{r4, r5, r6, pc}
 8017a36:	6863      	ldr	r3, [r4, #4]
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d0f9      	beq.n	8017a30 <rmw_destroy_service+0x10>
 8017a3c:	2d00      	cmp	r5, #0
 8017a3e:	d0f7      	beq.n	8017a30 <rmw_destroy_service+0x10>
 8017a40:	6828      	ldr	r0, [r5, #0]
 8017a42:	f7f8 ff05 	bl	8010850 <is_uxrce_rmw_identifier_valid>
 8017a46:	2800      	cmp	r0, #0
 8017a48:	d0f2      	beq.n	8017a30 <rmw_destroy_service+0x10>
 8017a4a:	686e      	ldr	r6, [r5, #4]
 8017a4c:	2e00      	cmp	r6, #0
 8017a4e:	d0ef      	beq.n	8017a30 <rmw_destroy_service+0x10>
 8017a50:	6864      	ldr	r4, [r4, #4]
 8017a52:	6932      	ldr	r2, [r6, #16]
 8017a54:	6920      	ldr	r0, [r4, #16]
 8017a56:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017a5a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017a5e:	6819      	ldr	r1, [r3, #0]
 8017a60:	f7fa f9f4 	bl	8011e4c <uxr_buffer_cancel_data>
 8017a64:	4602      	mov	r2, r0
 8017a66:	6920      	ldr	r0, [r4, #16]
 8017a68:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017a6c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017a70:	f7f8 fe6e 	bl	8010750 <run_xrce_session>
 8017a74:	6920      	ldr	r0, [r4, #16]
 8017a76:	6932      	ldr	r2, [r6, #16]
 8017a78:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017a7c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017a80:	6819      	ldr	r1, [r3, #0]
 8017a82:	f7f9 ff79 	bl	8011978 <uxr_buffer_delete_entity>
 8017a86:	4602      	mov	r2, r0
 8017a88:	6920      	ldr	r0, [r4, #16]
 8017a8a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017a8e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017a92:	f7f8 fe5d 	bl	8010750 <run_xrce_session>
 8017a96:	2800      	cmp	r0, #0
 8017a98:	4628      	mov	r0, r5
 8017a9a:	bf14      	ite	ne
 8017a9c:	2400      	movne	r4, #0
 8017a9e:	2402      	moveq	r4, #2
 8017aa0:	f7f8 fd30 	bl	8010504 <rmw_uxrce_fini_service_memory>
 8017aa4:	e7c5      	b.n	8017a32 <rmw_destroy_service+0x12>
 8017aa6:	bf00      	nop

08017aa8 <rmw_uxrce_transport_init>:
 8017aa8:	b508      	push	{r3, lr}
 8017aaa:	b108      	cbz	r0, 8017ab0 <rmw_uxrce_transport_init+0x8>
 8017aac:	f100 0210 	add.w	r2, r0, #16
 8017ab0:	b139      	cbz	r1, 8017ac2 <rmw_uxrce_transport_init+0x1a>
 8017ab2:	6949      	ldr	r1, [r1, #20]
 8017ab4:	4610      	mov	r0, r2
 8017ab6:	f000 fbdf 	bl	8018278 <uxr_init_custom_transport>
 8017aba:	f080 0001 	eor.w	r0, r0, #1
 8017abe:	b2c0      	uxtb	r0, r0
 8017ac0:	bd08      	pop	{r3, pc}
 8017ac2:	4b04      	ldr	r3, [pc, #16]	; (8017ad4 <rmw_uxrce_transport_init+0x2c>)
 8017ac4:	4610      	mov	r0, r2
 8017ac6:	6859      	ldr	r1, [r3, #4]
 8017ac8:	f000 fbd6 	bl	8018278 <uxr_init_custom_transport>
 8017acc:	f080 0001 	eor.w	r0, r0, #1
 8017ad0:	b2c0      	uxtb	r0, r0
 8017ad2:	bd08      	pop	{r3, pc}
 8017ad4:	20009ec8 	.word	0x20009ec8

08017ad8 <rmw_wait>:
 8017ad8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017adc:	460f      	mov	r7, r1
 8017ade:	4606      	mov	r6, r0
 8017ae0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017ae2:	469a      	mov	sl, r3
 8017ae4:	4615      	mov	r5, r2
 8017ae6:	2a00      	cmp	r2, #0
 8017ae8:	f000 8122 	beq.w	8017d30 <rmw_wait+0x258>
 8017aec:	2900      	cmp	r1, #0
 8017aee:	f000 812a 	beq.w	8017d46 <rmw_wait+0x26e>
 8017af2:	e9d1 2300 	ldrd	r2, r3, [r1]
 8017af6:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8017afa:	015c      	lsls	r4, r3, #5
 8017afc:	ebbb 0b02 	subs.w	fp, fp, r2
 8017b00:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
 8017b04:	eb64 0403 	sbc.w	r4, r4, r3
 8017b08:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8017b0c:	00a4      	lsls	r4, r4, #2
 8017b0e:	ea44 749b 	orr.w	r4, r4, fp, lsr #30
 8017b12:	eb10 0b02 	adds.w	fp, r0, r2
 8017b16:	eb43 0404 	adc.w	r4, r3, r4
 8017b1a:	4aad      	ldr	r2, [pc, #692]	; (8017dd0 <rmw_wait+0x2f8>)
 8017b1c:	2300      	movs	r3, #0
 8017b1e:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8017b22:	f7e9 f8bb 	bl	8000c9c <__aeabi_uldivmod>
 8017b26:	00e4      	lsls	r4, r4, #3
 8017b28:	ea44 745b 	orr.w	r4, r4, fp, lsr #29
 8017b2c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8017b30:	eb1b 0800 	adds.w	r8, fp, r0
 8017b34:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8017b38:	eb44 0901 	adc.w	r9, r4, r1
 8017b3c:	2300      	movs	r3, #0
 8017b3e:	4542      	cmp	r2, r8
 8017b40:	eb73 0109 	sbcs.w	r1, r3, r9
 8017b44:	f2c0 80f2 	blt.w	8017d2c <rmw_wait+0x254>
 8017b48:	f7f8 fd8a 	bl	8010660 <rmw_uxrce_clean_expired_static_input_buffer>
 8017b4c:	4ba1      	ldr	r3, [pc, #644]	; (8017dd4 <rmw_wait+0x2fc>)
 8017b4e:	681c      	ldr	r4, [r3, #0]
 8017b50:	b144      	cbz	r4, 8017b64 <rmw_wait+0x8c>
 8017b52:	4623      	mov	r3, r4
 8017b54:	f241 50a4 	movw	r0, #5540	; 0x15a4
 8017b58:	2100      	movs	r1, #0
 8017b5a:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8017b5e:	5411      	strb	r1, [r2, r0]
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	d1fa      	bne.n	8017b5a <rmw_wait+0x82>
 8017b64:	b185      	cbz	r5, 8017b88 <rmw_wait+0xb0>
 8017b66:	6829      	ldr	r1, [r5, #0]
 8017b68:	b171      	cbz	r1, 8017b88 <rmw_wait+0xb0>
 8017b6a:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8017b6e:	2300      	movs	r3, #0
 8017b70:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8017b74:	2001      	movs	r0, #1
 8017b76:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8017b7a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8017b7c:	3301      	adds	r3, #1
 8017b7e:	6912      	ldr	r2, [r2, #16]
 8017b80:	4299      	cmp	r1, r3
 8017b82:	f802 000c 	strb.w	r0, [r2, ip]
 8017b86:	d1f6      	bne.n	8017b76 <rmw_wait+0x9e>
 8017b88:	f1ba 0f00 	cmp.w	sl, #0
 8017b8c:	d011      	beq.n	8017bb2 <rmw_wait+0xda>
 8017b8e:	f8da 1000 	ldr.w	r1, [sl]
 8017b92:	b171      	cbz	r1, 8017bb2 <rmw_wait+0xda>
 8017b94:	f8da e004 	ldr.w	lr, [sl, #4]
 8017b98:	2300      	movs	r3, #0
 8017b9a:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8017b9e:	2001      	movs	r0, #1
 8017ba0:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8017ba4:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8017ba6:	3301      	adds	r3, #1
 8017ba8:	6912      	ldr	r2, [r2, #16]
 8017baa:	4299      	cmp	r1, r3
 8017bac:	f802 000c 	strb.w	r0, [r2, ip]
 8017bb0:	d1f6      	bne.n	8017ba0 <rmw_wait+0xc8>
 8017bb2:	b186      	cbz	r6, 8017bd6 <rmw_wait+0xfe>
 8017bb4:	6831      	ldr	r1, [r6, #0]
 8017bb6:	b171      	cbz	r1, 8017bd6 <rmw_wait+0xfe>
 8017bb8:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8017bbc:	2300      	movs	r3, #0
 8017bbe:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8017bc2:	2001      	movs	r0, #1
 8017bc4:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8017bc8:	6a12      	ldr	r2, [r2, #32]
 8017bca:	3301      	adds	r3, #1
 8017bcc:	6912      	ldr	r2, [r2, #16]
 8017bce:	4299      	cmp	r1, r3
 8017bd0:	f802 000c 	strb.w	r0, [r2, ip]
 8017bd4:	d1f6      	bne.n	8017bc4 <rmw_wait+0xec>
 8017bd6:	b34c      	cbz	r4, 8017c2c <rmw_wait+0x154>
 8017bd8:	4622      	mov	r2, r4
 8017bda:	2300      	movs	r3, #0
 8017bdc:	f241 50a4 	movw	r0, #5540	; 0x15a4
 8017be0:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 8017be4:	5c09      	ldrb	r1, [r1, r0]
 8017be6:	440b      	add	r3, r1
 8017be8:	b2db      	uxtb	r3, r3
 8017bea:	2a00      	cmp	r2, #0
 8017bec:	d1f8      	bne.n	8017be0 <rmw_wait+0x108>
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	f000 8082 	beq.w	8017cf8 <rmw_wait+0x220>
 8017bf4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8017bf8:	d00d      	beq.n	8017c16 <rmw_wait+0x13e>
 8017bfa:	ee07 8a90 	vmov	s15, r8
 8017bfe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017c02:	ee07 3a90 	vmov	s15, r3
 8017c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017c0e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8017c12:	ee17 8a90 	vmov	r8, s15
 8017c16:	f241 59a4 	movw	r9, #5540	; 0x15a4
 8017c1a:	68e0      	ldr	r0, [r4, #12]
 8017c1c:	f810 3009 	ldrb.w	r3, [r0, r9]
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	f040 8093 	bne.w	8017d4c <rmw_wait+0x274>
 8017c26:	68a4      	ldr	r4, [r4, #8]
 8017c28:	2c00      	cmp	r4, #0
 8017c2a:	d1f6      	bne.n	8017c1a <rmw_wait+0x142>
 8017c2c:	2d00      	cmp	r5, #0
 8017c2e:	f000 80ac 	beq.w	8017d8a <rmw_wait+0x2b2>
 8017c32:	682b      	ldr	r3, [r5, #0]
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	f000 8093 	beq.w	8017d60 <rmw_wait+0x288>
 8017c3a:	2400      	movs	r4, #0
 8017c3c:	46a0      	mov	r8, r4
 8017c3e:	686b      	ldr	r3, [r5, #4]
 8017c40:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017c44:	f7f8 fce2 	bl	801060c <rmw_uxrce_find_static_input_buffer_by_owner>
 8017c48:	2800      	cmp	r0, #0
 8017c4a:	d05f      	beq.n	8017d0c <rmw_wait+0x234>
 8017c4c:	682b      	ldr	r3, [r5, #0]
 8017c4e:	3401      	adds	r4, #1
 8017c50:	42a3      	cmp	r3, r4
 8017c52:	f04f 0801 	mov.w	r8, #1
 8017c56:	d8f2      	bhi.n	8017c3e <rmw_wait+0x166>
 8017c58:	f1ba 0f00 	cmp.w	sl, #0
 8017c5c:	d012      	beq.n	8017c84 <rmw_wait+0x1ac>
 8017c5e:	f8da 3000 	ldr.w	r3, [sl]
 8017c62:	b17b      	cbz	r3, 8017c84 <rmw_wait+0x1ac>
 8017c64:	2400      	movs	r4, #0
 8017c66:	f8da 3004 	ldr.w	r3, [sl, #4]
 8017c6a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017c6e:	f7f8 fccd 	bl	801060c <rmw_uxrce_find_static_input_buffer_by_owner>
 8017c72:	2800      	cmp	r0, #0
 8017c74:	d052      	beq.n	8017d1c <rmw_wait+0x244>
 8017c76:	f8da 3000 	ldr.w	r3, [sl]
 8017c7a:	3401      	adds	r4, #1
 8017c7c:	42a3      	cmp	r3, r4
 8017c7e:	f04f 0801 	mov.w	r8, #1
 8017c82:	d8f0      	bhi.n	8017c66 <rmw_wait+0x18e>
 8017c84:	b1e6      	cbz	r6, 8017cc0 <rmw_wait+0x1e8>
 8017c86:	6833      	ldr	r3, [r6, #0]
 8017c88:	b1d3      	cbz	r3, 8017cc0 <rmw_wait+0x1e8>
 8017c8a:	2400      	movs	r4, #0
 8017c8c:	6873      	ldr	r3, [r6, #4]
 8017c8e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017c92:	f7f8 fcbb 	bl	801060c <rmw_uxrce_find_static_input_buffer_by_owner>
 8017c96:	b160      	cbz	r0, 8017cb2 <rmw_wait+0x1da>
 8017c98:	6833      	ldr	r3, [r6, #0]
 8017c9a:	3401      	adds	r4, #1
 8017c9c:	42a3      	cmp	r3, r4
 8017c9e:	d96c      	bls.n	8017d7a <rmw_wait+0x2a2>
 8017ca0:	6873      	ldr	r3, [r6, #4]
 8017ca2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017ca6:	f04f 0801 	mov.w	r8, #1
 8017caa:	f7f8 fcaf 	bl	801060c <rmw_uxrce_find_static_input_buffer_by_owner>
 8017cae:	2800      	cmp	r0, #0
 8017cb0:	d1f2      	bne.n	8017c98 <rmw_wait+0x1c0>
 8017cb2:	e9d6 3200 	ldrd	r3, r2, [r6]
 8017cb6:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017cba:	3401      	adds	r4, #1
 8017cbc:	42a3      	cmp	r3, r4
 8017cbe:	d8e5      	bhi.n	8017c8c <rmw_wait+0x1b4>
 8017cc0:	b1a7      	cbz	r7, 8017cec <rmw_wait+0x214>
 8017cc2:	683c      	ldr	r4, [r7, #0]
 8017cc4:	b194      	cbz	r4, 8017cec <rmw_wait+0x214>
 8017cc6:	2300      	movs	r3, #0
 8017cc8:	461d      	mov	r5, r3
 8017cca:	e004      	b.n	8017cd6 <rmw_wait+0x1fe>
 8017ccc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8017cd0:	3301      	adds	r3, #1
 8017cd2:	42a3      	cmp	r3, r4
 8017cd4:	d00a      	beq.n	8017cec <rmw_wait+0x214>
 8017cd6:	6878      	ldr	r0, [r7, #4]
 8017cd8:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8017cdc:	7c0a      	ldrb	r2, [r1, #16]
 8017cde:	2a00      	cmp	r2, #0
 8017ce0:	d0f4      	beq.n	8017ccc <rmw_wait+0x1f4>
 8017ce2:	3301      	adds	r3, #1
 8017ce4:	42a3      	cmp	r3, r4
 8017ce6:	740d      	strb	r5, [r1, #16]
 8017ce8:	4690      	mov	r8, r2
 8017cea:	d1f4      	bne.n	8017cd6 <rmw_wait+0x1fe>
 8017cec:	f1b8 0f00 	cmp.w	r8, #0
 8017cf0:	d040      	beq.n	8017d74 <rmw_wait+0x29c>
 8017cf2:	2000      	movs	r0, #0
 8017cf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cf8:	68e0      	ldr	r0, [r4, #12]
 8017cfa:	2100      	movs	r1, #0
 8017cfc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017d00:	f7fa fe30 	bl	8012964 <uxr_run_session_timeout>
 8017d04:	68a4      	ldr	r4, [r4, #8]
 8017d06:	2c00      	cmp	r4, #0
 8017d08:	d1f6      	bne.n	8017cf8 <rmw_wait+0x220>
 8017d0a:	e78f      	b.n	8017c2c <rmw_wait+0x154>
 8017d0c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8017d10:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017d14:	3401      	adds	r4, #1
 8017d16:	42a3      	cmp	r3, r4
 8017d18:	d891      	bhi.n	8017c3e <rmw_wait+0x166>
 8017d1a:	e79d      	b.n	8017c58 <rmw_wait+0x180>
 8017d1c:	e9da 3200 	ldrd	r3, r2, [sl]
 8017d20:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017d24:	3401      	adds	r4, #1
 8017d26:	429c      	cmp	r4, r3
 8017d28:	d39d      	bcc.n	8017c66 <rmw_wait+0x18e>
 8017d2a:	e7ab      	b.n	8017c84 <rmw_wait+0x1ac>
 8017d2c:	4690      	mov	r8, r2
 8017d2e:	e70b      	b.n	8017b48 <rmw_wait+0x70>
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	f47f aedb 	bne.w	8017aec <rmw_wait+0x14>
 8017d36:	2800      	cmp	r0, #0
 8017d38:	f47f aed8 	bne.w	8017aec <rmw_wait+0x14>
 8017d3c:	2f00      	cmp	r7, #0
 8017d3e:	d0d8      	beq.n	8017cf2 <rmw_wait+0x21a>
 8017d40:	2900      	cmp	r1, #0
 8017d42:	f47f aed6 	bne.w	8017af2 <rmw_wait+0x1a>
 8017d46:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8017d4a:	e6fd      	b.n	8017b48 <rmw_wait+0x70>
 8017d4c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017d50:	4641      	mov	r1, r8
 8017d52:	f7fa fe21 	bl	8012998 <uxr_run_session_until_data>
 8017d56:	68a4      	ldr	r4, [r4, #8]
 8017d58:	2c00      	cmp	r4, #0
 8017d5a:	f47f af5e 	bne.w	8017c1a <rmw_wait+0x142>
 8017d5e:	e765      	b.n	8017c2c <rmw_wait+0x154>
 8017d60:	f1ba 0f00 	cmp.w	sl, #0
 8017d64:	d11e      	bne.n	8017da4 <rmw_wait+0x2cc>
 8017d66:	b35e      	cbz	r6, 8017dc0 <rmw_wait+0x2e8>
 8017d68:	6833      	ldr	r3, [r6, #0]
 8017d6a:	46d0      	mov	r8, sl
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d18c      	bne.n	8017c8a <rmw_wait+0x1b2>
 8017d70:	2f00      	cmp	r7, #0
 8017d72:	d1a6      	bne.n	8017cc2 <rmw_wait+0x1ea>
 8017d74:	2002      	movs	r0, #2
 8017d76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d7a:	2f00      	cmp	r7, #0
 8017d7c:	d0b9      	beq.n	8017cf2 <rmw_wait+0x21a>
 8017d7e:	683c      	ldr	r4, [r7, #0]
 8017d80:	f04f 0801 	mov.w	r8, #1
 8017d84:	2c00      	cmp	r4, #0
 8017d86:	d19e      	bne.n	8017cc6 <rmw_wait+0x1ee>
 8017d88:	e7b3      	b.n	8017cf2 <rmw_wait+0x21a>
 8017d8a:	f1ba 0f00 	cmp.w	sl, #0
 8017d8e:	d0ea      	beq.n	8017d66 <rmw_wait+0x28e>
 8017d90:	f8da 3000 	ldr.w	r3, [sl]
 8017d94:	46a8      	mov	r8, r5
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	f47f af64 	bne.w	8017c64 <rmw_wait+0x18c>
 8017d9c:	2e00      	cmp	r6, #0
 8017d9e:	f47f af72 	bne.w	8017c86 <rmw_wait+0x1ae>
 8017da2:	e009      	b.n	8017db8 <rmw_wait+0x2e0>
 8017da4:	f8da 2000 	ldr.w	r2, [sl]
 8017da8:	4698      	mov	r8, r3
 8017daa:	2a00      	cmp	r2, #0
 8017dac:	f47f af5a 	bne.w	8017c64 <rmw_wait+0x18c>
 8017db0:	4690      	mov	r8, r2
 8017db2:	2e00      	cmp	r6, #0
 8017db4:	f47f af67 	bne.w	8017c86 <rmw_wait+0x1ae>
 8017db8:	46b0      	mov	r8, r6
 8017dba:	2f00      	cmp	r7, #0
 8017dbc:	d181      	bne.n	8017cc2 <rmw_wait+0x1ea>
 8017dbe:	e7d9      	b.n	8017d74 <rmw_wait+0x29c>
 8017dc0:	2f00      	cmp	r7, #0
 8017dc2:	d0d7      	beq.n	8017d74 <rmw_wait+0x29c>
 8017dc4:	683c      	ldr	r4, [r7, #0]
 8017dc6:	46b0      	mov	r8, r6
 8017dc8:	2c00      	cmp	r4, #0
 8017dca:	f47f af7c 	bne.w	8017cc6 <rmw_wait+0x1ee>
 8017dce:	e7d1      	b.n	8017d74 <rmw_wait+0x29c>
 8017dd0:	000f4240 	.word	0x000f4240
 8017dd4:	2000d090 	.word	0x2000d090

08017dd8 <rmw_create_wait_set>:
 8017dd8:	b508      	push	{r3, lr}
 8017dda:	4803      	ldr	r0, [pc, #12]	; (8017de8 <rmw_create_wait_set+0x10>)
 8017ddc:	f7ff f8d0 	bl	8016f80 <get_memory>
 8017de0:	b108      	cbz	r0, 8017de6 <rmw_create_wait_set+0xe>
 8017de2:	68c0      	ldr	r0, [r0, #12]
 8017de4:	3010      	adds	r0, #16
 8017de6:	bd08      	pop	{r3, pc}
 8017de8:	2000e868 	.word	0x2000e868

08017dec <rmw_destroy_wait_set>:
 8017dec:	b508      	push	{r3, lr}
 8017dee:	4b08      	ldr	r3, [pc, #32]	; (8017e10 <rmw_destroy_wait_set+0x24>)
 8017df0:	6819      	ldr	r1, [r3, #0]
 8017df2:	b911      	cbnz	r1, 8017dfa <rmw_destroy_wait_set+0xe>
 8017df4:	e00a      	b.n	8017e0c <rmw_destroy_wait_set+0x20>
 8017df6:	6889      	ldr	r1, [r1, #8]
 8017df8:	b141      	cbz	r1, 8017e0c <rmw_destroy_wait_set+0x20>
 8017dfa:	68cb      	ldr	r3, [r1, #12]
 8017dfc:	3310      	adds	r3, #16
 8017dfe:	4298      	cmp	r0, r3
 8017e00:	d1f9      	bne.n	8017df6 <rmw_destroy_wait_set+0xa>
 8017e02:	4803      	ldr	r0, [pc, #12]	; (8017e10 <rmw_destroy_wait_set+0x24>)
 8017e04:	f7ff f8cc 	bl	8016fa0 <put_memory>
 8017e08:	2000      	movs	r0, #0
 8017e0a:	bd08      	pop	{r3, pc}
 8017e0c:	2001      	movs	r0, #1
 8017e0e:	bd08      	pop	{r3, pc}
 8017e10:	2000e868 	.word	0x2000e868

08017e14 <rmw_uros_epoch_nanos>:
 8017e14:	4b05      	ldr	r3, [pc, #20]	; (8017e2c <rmw_uros_epoch_nanos+0x18>)
 8017e16:	681b      	ldr	r3, [r3, #0]
 8017e18:	b123      	cbz	r3, 8017e24 <rmw_uros_epoch_nanos+0x10>
 8017e1a:	68d8      	ldr	r0, [r3, #12]
 8017e1c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017e20:	f7fa ba14 	b.w	801224c <uxr_epoch_nanos>
 8017e24:	2000      	movs	r0, #0
 8017e26:	2100      	movs	r1, #0
 8017e28:	4770      	bx	lr
 8017e2a:	bf00      	nop
 8017e2c:	2000d090 	.word	0x2000d090

08017e30 <ucdr_serialize_endian_array_char>:
 8017e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e34:	4619      	mov	r1, r3
 8017e36:	461e      	mov	r6, r3
 8017e38:	4690      	mov	r8, r2
 8017e3a:	4604      	mov	r4, r0
 8017e3c:	f7f9 fcda 	bl	80117f4 <ucdr_check_buffer_available_for>
 8017e40:	b9e0      	cbnz	r0, 8017e7c <ucdr_serialize_endian_array_char+0x4c>
 8017e42:	4637      	mov	r7, r6
 8017e44:	e009      	b.n	8017e5a <ucdr_serialize_endian_array_char+0x2a>
 8017e46:	68a0      	ldr	r0, [r4, #8]
 8017e48:	f002 fc3d 	bl	801a6c6 <memcpy>
 8017e4c:	68a2      	ldr	r2, [r4, #8]
 8017e4e:	6923      	ldr	r3, [r4, #16]
 8017e50:	442a      	add	r2, r5
 8017e52:	442b      	add	r3, r5
 8017e54:	1b7f      	subs	r7, r7, r5
 8017e56:	60a2      	str	r2, [r4, #8]
 8017e58:	6123      	str	r3, [r4, #16]
 8017e5a:	2201      	movs	r2, #1
 8017e5c:	4639      	mov	r1, r7
 8017e5e:	4620      	mov	r0, r4
 8017e60:	f7f9 fd4e 	bl	8011900 <ucdr_check_final_buffer_behavior_array>
 8017e64:	1bf1      	subs	r1, r6, r7
 8017e66:	4441      	add	r1, r8
 8017e68:	4605      	mov	r5, r0
 8017e6a:	4602      	mov	r2, r0
 8017e6c:	2800      	cmp	r0, #0
 8017e6e:	d1ea      	bne.n	8017e46 <ucdr_serialize_endian_array_char+0x16>
 8017e70:	2301      	movs	r3, #1
 8017e72:	7da0      	ldrb	r0, [r4, #22]
 8017e74:	7563      	strb	r3, [r4, #21]
 8017e76:	4058      	eors	r0, r3
 8017e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e7c:	4632      	mov	r2, r6
 8017e7e:	68a0      	ldr	r0, [r4, #8]
 8017e80:	4641      	mov	r1, r8
 8017e82:	f002 fc20 	bl	801a6c6 <memcpy>
 8017e86:	68a2      	ldr	r2, [r4, #8]
 8017e88:	6923      	ldr	r3, [r4, #16]
 8017e8a:	4432      	add	r2, r6
 8017e8c:	4433      	add	r3, r6
 8017e8e:	60a2      	str	r2, [r4, #8]
 8017e90:	6123      	str	r3, [r4, #16]
 8017e92:	e7ed      	b.n	8017e70 <ucdr_serialize_endian_array_char+0x40>

08017e94 <ucdr_deserialize_endian_array_char>:
 8017e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e98:	4619      	mov	r1, r3
 8017e9a:	461e      	mov	r6, r3
 8017e9c:	4690      	mov	r8, r2
 8017e9e:	4604      	mov	r4, r0
 8017ea0:	f7f9 fca8 	bl	80117f4 <ucdr_check_buffer_available_for>
 8017ea4:	b9e0      	cbnz	r0, 8017ee0 <ucdr_deserialize_endian_array_char+0x4c>
 8017ea6:	4637      	mov	r7, r6
 8017ea8:	e009      	b.n	8017ebe <ucdr_deserialize_endian_array_char+0x2a>
 8017eaa:	68a1      	ldr	r1, [r4, #8]
 8017eac:	f002 fc0b 	bl	801a6c6 <memcpy>
 8017eb0:	68a2      	ldr	r2, [r4, #8]
 8017eb2:	6923      	ldr	r3, [r4, #16]
 8017eb4:	442a      	add	r2, r5
 8017eb6:	442b      	add	r3, r5
 8017eb8:	1b7f      	subs	r7, r7, r5
 8017eba:	60a2      	str	r2, [r4, #8]
 8017ebc:	6123      	str	r3, [r4, #16]
 8017ebe:	2201      	movs	r2, #1
 8017ec0:	4639      	mov	r1, r7
 8017ec2:	4620      	mov	r0, r4
 8017ec4:	f7f9 fd1c 	bl	8011900 <ucdr_check_final_buffer_behavior_array>
 8017ec8:	4605      	mov	r5, r0
 8017eca:	1bf0      	subs	r0, r6, r7
 8017ecc:	4440      	add	r0, r8
 8017ece:	462a      	mov	r2, r5
 8017ed0:	2d00      	cmp	r5, #0
 8017ed2:	d1ea      	bne.n	8017eaa <ucdr_deserialize_endian_array_char+0x16>
 8017ed4:	2301      	movs	r3, #1
 8017ed6:	7da0      	ldrb	r0, [r4, #22]
 8017ed8:	7563      	strb	r3, [r4, #21]
 8017eda:	4058      	eors	r0, r3
 8017edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ee0:	4632      	mov	r2, r6
 8017ee2:	68a1      	ldr	r1, [r4, #8]
 8017ee4:	4640      	mov	r0, r8
 8017ee6:	f002 fbee 	bl	801a6c6 <memcpy>
 8017eea:	68a2      	ldr	r2, [r4, #8]
 8017eec:	6923      	ldr	r3, [r4, #16]
 8017eee:	4432      	add	r2, r6
 8017ef0:	4433      	add	r3, r6
 8017ef2:	60a2      	str	r2, [r4, #8]
 8017ef4:	6123      	str	r3, [r4, #16]
 8017ef6:	e7ed      	b.n	8017ed4 <ucdr_deserialize_endian_array_char+0x40>

08017ef8 <ucdr_serialize_array_uint8_t>:
 8017ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017efc:	4688      	mov	r8, r1
 8017efe:	4611      	mov	r1, r2
 8017f00:	4616      	mov	r6, r2
 8017f02:	4604      	mov	r4, r0
 8017f04:	f7f9 fc76 	bl	80117f4 <ucdr_check_buffer_available_for>
 8017f08:	b9e0      	cbnz	r0, 8017f44 <ucdr_serialize_array_uint8_t+0x4c>
 8017f0a:	4637      	mov	r7, r6
 8017f0c:	e009      	b.n	8017f22 <ucdr_serialize_array_uint8_t+0x2a>
 8017f0e:	68a0      	ldr	r0, [r4, #8]
 8017f10:	f002 fbd9 	bl	801a6c6 <memcpy>
 8017f14:	68a2      	ldr	r2, [r4, #8]
 8017f16:	6923      	ldr	r3, [r4, #16]
 8017f18:	442a      	add	r2, r5
 8017f1a:	442b      	add	r3, r5
 8017f1c:	1b7f      	subs	r7, r7, r5
 8017f1e:	60a2      	str	r2, [r4, #8]
 8017f20:	6123      	str	r3, [r4, #16]
 8017f22:	2201      	movs	r2, #1
 8017f24:	4639      	mov	r1, r7
 8017f26:	4620      	mov	r0, r4
 8017f28:	f7f9 fcea 	bl	8011900 <ucdr_check_final_buffer_behavior_array>
 8017f2c:	1bf1      	subs	r1, r6, r7
 8017f2e:	4441      	add	r1, r8
 8017f30:	4605      	mov	r5, r0
 8017f32:	4602      	mov	r2, r0
 8017f34:	2800      	cmp	r0, #0
 8017f36:	d1ea      	bne.n	8017f0e <ucdr_serialize_array_uint8_t+0x16>
 8017f38:	2301      	movs	r3, #1
 8017f3a:	7da0      	ldrb	r0, [r4, #22]
 8017f3c:	7563      	strb	r3, [r4, #21]
 8017f3e:	4058      	eors	r0, r3
 8017f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f44:	4632      	mov	r2, r6
 8017f46:	68a0      	ldr	r0, [r4, #8]
 8017f48:	4641      	mov	r1, r8
 8017f4a:	f002 fbbc 	bl	801a6c6 <memcpy>
 8017f4e:	68a3      	ldr	r3, [r4, #8]
 8017f50:	6922      	ldr	r2, [r4, #16]
 8017f52:	4433      	add	r3, r6
 8017f54:	4432      	add	r2, r6
 8017f56:	60a3      	str	r3, [r4, #8]
 8017f58:	6122      	str	r2, [r4, #16]
 8017f5a:	e7ed      	b.n	8017f38 <ucdr_serialize_array_uint8_t+0x40>

08017f5c <ucdr_serialize_endian_array_uint8_t>:
 8017f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f60:	4619      	mov	r1, r3
 8017f62:	461e      	mov	r6, r3
 8017f64:	4690      	mov	r8, r2
 8017f66:	4604      	mov	r4, r0
 8017f68:	f7f9 fc44 	bl	80117f4 <ucdr_check_buffer_available_for>
 8017f6c:	b9e0      	cbnz	r0, 8017fa8 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8017f6e:	4637      	mov	r7, r6
 8017f70:	e009      	b.n	8017f86 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8017f72:	68a0      	ldr	r0, [r4, #8]
 8017f74:	f002 fba7 	bl	801a6c6 <memcpy>
 8017f78:	68a2      	ldr	r2, [r4, #8]
 8017f7a:	6923      	ldr	r3, [r4, #16]
 8017f7c:	442a      	add	r2, r5
 8017f7e:	442b      	add	r3, r5
 8017f80:	1b7f      	subs	r7, r7, r5
 8017f82:	60a2      	str	r2, [r4, #8]
 8017f84:	6123      	str	r3, [r4, #16]
 8017f86:	2201      	movs	r2, #1
 8017f88:	4639      	mov	r1, r7
 8017f8a:	4620      	mov	r0, r4
 8017f8c:	f7f9 fcb8 	bl	8011900 <ucdr_check_final_buffer_behavior_array>
 8017f90:	1bf1      	subs	r1, r6, r7
 8017f92:	4441      	add	r1, r8
 8017f94:	4605      	mov	r5, r0
 8017f96:	4602      	mov	r2, r0
 8017f98:	2800      	cmp	r0, #0
 8017f9a:	d1ea      	bne.n	8017f72 <ucdr_serialize_endian_array_uint8_t+0x16>
 8017f9c:	2301      	movs	r3, #1
 8017f9e:	7da0      	ldrb	r0, [r4, #22]
 8017fa0:	7563      	strb	r3, [r4, #21]
 8017fa2:	4058      	eors	r0, r3
 8017fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fa8:	4632      	mov	r2, r6
 8017faa:	68a0      	ldr	r0, [r4, #8]
 8017fac:	4641      	mov	r1, r8
 8017fae:	f002 fb8a 	bl	801a6c6 <memcpy>
 8017fb2:	68a2      	ldr	r2, [r4, #8]
 8017fb4:	6923      	ldr	r3, [r4, #16]
 8017fb6:	4432      	add	r2, r6
 8017fb8:	4433      	add	r3, r6
 8017fba:	60a2      	str	r2, [r4, #8]
 8017fbc:	6123      	str	r3, [r4, #16]
 8017fbe:	e7ed      	b.n	8017f9c <ucdr_serialize_endian_array_uint8_t+0x40>

08017fc0 <ucdr_deserialize_array_uint8_t>:
 8017fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fc4:	4688      	mov	r8, r1
 8017fc6:	4611      	mov	r1, r2
 8017fc8:	4616      	mov	r6, r2
 8017fca:	4604      	mov	r4, r0
 8017fcc:	f7f9 fc12 	bl	80117f4 <ucdr_check_buffer_available_for>
 8017fd0:	b9e0      	cbnz	r0, 801800c <ucdr_deserialize_array_uint8_t+0x4c>
 8017fd2:	4637      	mov	r7, r6
 8017fd4:	e009      	b.n	8017fea <ucdr_deserialize_array_uint8_t+0x2a>
 8017fd6:	68a1      	ldr	r1, [r4, #8]
 8017fd8:	f002 fb75 	bl	801a6c6 <memcpy>
 8017fdc:	68a2      	ldr	r2, [r4, #8]
 8017fde:	6923      	ldr	r3, [r4, #16]
 8017fe0:	442a      	add	r2, r5
 8017fe2:	442b      	add	r3, r5
 8017fe4:	1b7f      	subs	r7, r7, r5
 8017fe6:	60a2      	str	r2, [r4, #8]
 8017fe8:	6123      	str	r3, [r4, #16]
 8017fea:	2201      	movs	r2, #1
 8017fec:	4639      	mov	r1, r7
 8017fee:	4620      	mov	r0, r4
 8017ff0:	f7f9 fc86 	bl	8011900 <ucdr_check_final_buffer_behavior_array>
 8017ff4:	4605      	mov	r5, r0
 8017ff6:	1bf0      	subs	r0, r6, r7
 8017ff8:	4440      	add	r0, r8
 8017ffa:	462a      	mov	r2, r5
 8017ffc:	2d00      	cmp	r5, #0
 8017ffe:	d1ea      	bne.n	8017fd6 <ucdr_deserialize_array_uint8_t+0x16>
 8018000:	2301      	movs	r3, #1
 8018002:	7da0      	ldrb	r0, [r4, #22]
 8018004:	7563      	strb	r3, [r4, #21]
 8018006:	4058      	eors	r0, r3
 8018008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801800c:	4632      	mov	r2, r6
 801800e:	68a1      	ldr	r1, [r4, #8]
 8018010:	4640      	mov	r0, r8
 8018012:	f002 fb58 	bl	801a6c6 <memcpy>
 8018016:	68a3      	ldr	r3, [r4, #8]
 8018018:	6922      	ldr	r2, [r4, #16]
 801801a:	4433      	add	r3, r6
 801801c:	4432      	add	r2, r6
 801801e:	60a3      	str	r3, [r4, #8]
 8018020:	6122      	str	r2, [r4, #16]
 8018022:	e7ed      	b.n	8018000 <ucdr_deserialize_array_uint8_t+0x40>

08018024 <ucdr_deserialize_endian_array_uint8_t>:
 8018024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018028:	4619      	mov	r1, r3
 801802a:	461e      	mov	r6, r3
 801802c:	4690      	mov	r8, r2
 801802e:	4604      	mov	r4, r0
 8018030:	f7f9 fbe0 	bl	80117f4 <ucdr_check_buffer_available_for>
 8018034:	b9e0      	cbnz	r0, 8018070 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8018036:	4637      	mov	r7, r6
 8018038:	e009      	b.n	801804e <ucdr_deserialize_endian_array_uint8_t+0x2a>
 801803a:	68a1      	ldr	r1, [r4, #8]
 801803c:	f002 fb43 	bl	801a6c6 <memcpy>
 8018040:	68a2      	ldr	r2, [r4, #8]
 8018042:	6923      	ldr	r3, [r4, #16]
 8018044:	442a      	add	r2, r5
 8018046:	442b      	add	r3, r5
 8018048:	1b7f      	subs	r7, r7, r5
 801804a:	60a2      	str	r2, [r4, #8]
 801804c:	6123      	str	r3, [r4, #16]
 801804e:	2201      	movs	r2, #1
 8018050:	4639      	mov	r1, r7
 8018052:	4620      	mov	r0, r4
 8018054:	f7f9 fc54 	bl	8011900 <ucdr_check_final_buffer_behavior_array>
 8018058:	4605      	mov	r5, r0
 801805a:	1bf0      	subs	r0, r6, r7
 801805c:	4440      	add	r0, r8
 801805e:	462a      	mov	r2, r5
 8018060:	2d00      	cmp	r5, #0
 8018062:	d1ea      	bne.n	801803a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8018064:	2301      	movs	r3, #1
 8018066:	7da0      	ldrb	r0, [r4, #22]
 8018068:	7563      	strb	r3, [r4, #21]
 801806a:	4058      	eors	r0, r3
 801806c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018070:	4632      	mov	r2, r6
 8018072:	68a1      	ldr	r1, [r4, #8]
 8018074:	4640      	mov	r0, r8
 8018076:	f002 fb26 	bl	801a6c6 <memcpy>
 801807a:	68a2      	ldr	r2, [r4, #8]
 801807c:	6923      	ldr	r3, [r4, #16]
 801807e:	4432      	add	r2, r6
 8018080:	4433      	add	r3, r6
 8018082:	60a2      	str	r2, [r4, #8]
 8018084:	6123      	str	r3, [r4, #16]
 8018086:	e7ed      	b.n	8018064 <ucdr_deserialize_endian_array_uint8_t+0x40>

08018088 <ucdr_serialize_sequence_char>:
 8018088:	b570      	push	{r4, r5, r6, lr}
 801808a:	460e      	mov	r6, r1
 801808c:	4615      	mov	r5, r2
 801808e:	7d01      	ldrb	r1, [r0, #20]
 8018090:	4604      	mov	r4, r0
 8018092:	f7f8 ff05 	bl	8010ea0 <ucdr_serialize_endian_uint32_t>
 8018096:	b90d      	cbnz	r5, 801809c <ucdr_serialize_sequence_char+0x14>
 8018098:	2001      	movs	r0, #1
 801809a:	bd70      	pop	{r4, r5, r6, pc}
 801809c:	7d21      	ldrb	r1, [r4, #20]
 801809e:	462b      	mov	r3, r5
 80180a0:	4632      	mov	r2, r6
 80180a2:	4620      	mov	r0, r4
 80180a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80180a8:	f7ff bec2 	b.w	8017e30 <ucdr_serialize_endian_array_char>

080180ac <ucdr_deserialize_sequence_char>:
 80180ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180b0:	461d      	mov	r5, r3
 80180b2:	4616      	mov	r6, r2
 80180b4:	460f      	mov	r7, r1
 80180b6:	461a      	mov	r2, r3
 80180b8:	7d01      	ldrb	r1, [r0, #20]
 80180ba:	4604      	mov	r4, r0
 80180bc:	f7f9 f818 	bl	80110f0 <ucdr_deserialize_endian_uint32_t>
 80180c0:	682b      	ldr	r3, [r5, #0]
 80180c2:	429e      	cmp	r6, r3
 80180c4:	bf3c      	itt	cc
 80180c6:	2201      	movcc	r2, #1
 80180c8:	75a2      	strbcc	r2, [r4, #22]
 80180ca:	b913      	cbnz	r3, 80180d2 <ucdr_deserialize_sequence_char+0x26>
 80180cc:	2001      	movs	r0, #1
 80180ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180d2:	7d21      	ldrb	r1, [r4, #20]
 80180d4:	463a      	mov	r2, r7
 80180d6:	4620      	mov	r0, r4
 80180d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80180dc:	f7ff beda 	b.w	8017e94 <ucdr_deserialize_endian_array_char>

080180e0 <ucdr_serialize_sequence_uint8_t>:
 80180e0:	b570      	push	{r4, r5, r6, lr}
 80180e2:	460e      	mov	r6, r1
 80180e4:	4615      	mov	r5, r2
 80180e6:	7d01      	ldrb	r1, [r0, #20]
 80180e8:	4604      	mov	r4, r0
 80180ea:	f7f8 fed9 	bl	8010ea0 <ucdr_serialize_endian_uint32_t>
 80180ee:	b90d      	cbnz	r5, 80180f4 <ucdr_serialize_sequence_uint8_t+0x14>
 80180f0:	2001      	movs	r0, #1
 80180f2:	bd70      	pop	{r4, r5, r6, pc}
 80180f4:	7d21      	ldrb	r1, [r4, #20]
 80180f6:	462b      	mov	r3, r5
 80180f8:	4632      	mov	r2, r6
 80180fa:	4620      	mov	r0, r4
 80180fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018100:	f7ff bf2c 	b.w	8017f5c <ucdr_serialize_endian_array_uint8_t>

08018104 <ucdr_deserialize_sequence_uint8_t>:
 8018104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018108:	461d      	mov	r5, r3
 801810a:	4616      	mov	r6, r2
 801810c:	460f      	mov	r7, r1
 801810e:	461a      	mov	r2, r3
 8018110:	7d01      	ldrb	r1, [r0, #20]
 8018112:	4604      	mov	r4, r0
 8018114:	f7f8 ffec 	bl	80110f0 <ucdr_deserialize_endian_uint32_t>
 8018118:	682b      	ldr	r3, [r5, #0]
 801811a:	429e      	cmp	r6, r3
 801811c:	bf3c      	itt	cc
 801811e:	2201      	movcc	r2, #1
 8018120:	75a2      	strbcc	r2, [r4, #22]
 8018122:	b913      	cbnz	r3, 801812a <ucdr_deserialize_sequence_uint8_t+0x26>
 8018124:	2001      	movs	r0, #1
 8018126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801812a:	7d21      	ldrb	r1, [r4, #20]
 801812c:	463a      	mov	r2, r7
 801812e:	4620      	mov	r0, r4
 8018130:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018134:	f7ff bf76 	b.w	8018024 <ucdr_deserialize_endian_array_uint8_t>

08018138 <ucdr_serialize_string>:
 8018138:	b510      	push	{r4, lr}
 801813a:	b082      	sub	sp, #8
 801813c:	4604      	mov	r4, r0
 801813e:	4608      	mov	r0, r1
 8018140:	9101      	str	r1, [sp, #4]
 8018142:	f7e8 f857 	bl	80001f4 <strlen>
 8018146:	9901      	ldr	r1, [sp, #4]
 8018148:	4602      	mov	r2, r0
 801814a:	3201      	adds	r2, #1
 801814c:	4620      	mov	r0, r4
 801814e:	b002      	add	sp, #8
 8018150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018154:	f7ff bf98 	b.w	8018088 <ucdr_serialize_sequence_char>

08018158 <ucdr_deserialize_string>:
 8018158:	b500      	push	{lr}
 801815a:	b083      	sub	sp, #12
 801815c:	ab01      	add	r3, sp, #4
 801815e:	f7ff ffa5 	bl	80180ac <ucdr_deserialize_sequence_char>
 8018162:	b003      	add	sp, #12
 8018164:	f85d fb04 	ldr.w	pc, [sp], #4

08018168 <get_custom_error>:
 8018168:	4b01      	ldr	r3, [pc, #4]	; (8018170 <get_custom_error+0x8>)
 801816a:	7818      	ldrb	r0, [r3, #0]
 801816c:	4770      	bx	lr
 801816e:	bf00      	nop
 8018170:	20009d48 	.word	0x20009d48

08018174 <recv_custom_msg>:
 8018174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018178:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 801817c:	b089      	sub	sp, #36	; 0x24
 801817e:	2600      	movs	r6, #0
 8018180:	4604      	mov	r4, r0
 8018182:	9305      	str	r3, [sp, #20]
 8018184:	468a      	mov	sl, r1
 8018186:	4693      	mov	fp, r2
 8018188:	f88d 601e 	strb.w	r6, [sp, #30]
 801818c:	b325      	cbz	r5, 80181d8 <recv_custom_msg+0x64>
 801818e:	f200 2902 	addw	r9, r0, #514	; 0x202
 8018192:	f10d 081f 	add.w	r8, sp, #31
 8018196:	af05      	add	r7, sp, #20
 8018198:	f10d 061e 	add.w	r6, sp, #30
 801819c:	f44f 7500 	mov.w	r5, #512	; 0x200
 80181a0:	e002      	b.n	80181a8 <recv_custom_msg+0x34>
 80181a2:	9b05      	ldr	r3, [sp, #20]
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	dd0f      	ble.n	80181c8 <recv_custom_msg+0x54>
 80181a8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80181ac:	e9cd 5600 	strd	r5, r6, [sp]
 80181b0:	4623      	mov	r3, r4
 80181b2:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 80181b6:	4622      	mov	r2, r4
 80181b8:	4648      	mov	r0, r9
 80181ba:	f000 ffc9 	bl	8019150 <uxr_read_framed_msg>
 80181be:	2800      	cmp	r0, #0
 80181c0:	d0ef      	beq.n	80181a2 <recv_custom_msg+0x2e>
 80181c2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80181c6:	b1b3      	cbz	r3, 80181f6 <recv_custom_msg+0x82>
 80181c8:	4b0f      	ldr	r3, [pc, #60]	; (8018208 <recv_custom_msg+0x94>)
 80181ca:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80181ce:	701a      	strb	r2, [r3, #0]
 80181d0:	2000      	movs	r0, #0
 80181d2:	b009      	add	sp, #36	; 0x24
 80181d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181d8:	f10d 021f 	add.w	r2, sp, #31
 80181dc:	9200      	str	r2, [sp, #0]
 80181de:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 80181e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80181e6:	4601      	mov	r1, r0
 80181e8:	47a8      	blx	r5
 80181ea:	2800      	cmp	r0, #0
 80181ec:	d0ec      	beq.n	80181c8 <recv_custom_msg+0x54>
 80181ee:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d1e8      	bne.n	80181c8 <recv_custom_msg+0x54>
 80181f6:	f8cb 0000 	str.w	r0, [fp]
 80181fa:	2001      	movs	r0, #1
 80181fc:	f8ca 4000 	str.w	r4, [sl]
 8018200:	b009      	add	sp, #36	; 0x24
 8018202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018206:	bf00      	nop
 8018208:	20009d48 	.word	0x20009d48

0801820c <send_custom_msg>:
 801820c:	b570      	push	{r4, r5, r6, lr}
 801820e:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8018212:	b086      	sub	sp, #24
 8018214:	4616      	mov	r6, r2
 8018216:	b975      	cbnz	r5, 8018236 <send_custom_msg+0x2a>
 8018218:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 801821c:	f10d 0317 	add.w	r3, sp, #23
 8018220:	47a0      	blx	r4
 8018222:	b108      	cbz	r0, 8018228 <send_custom_msg+0x1c>
 8018224:	42b0      	cmp	r0, r6
 8018226:	d015      	beq.n	8018254 <send_custom_msg+0x48>
 8018228:	4b0c      	ldr	r3, [pc, #48]	; (801825c <send_custom_msg+0x50>)
 801822a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801822e:	701a      	strb	r2, [r3, #0]
 8018230:	2000      	movs	r0, #0
 8018232:	b006      	add	sp, #24
 8018234:	bd70      	pop	{r4, r5, r6, pc}
 8018236:	460b      	mov	r3, r1
 8018238:	2200      	movs	r2, #0
 801823a:	f10d 0117 	add.w	r1, sp, #23
 801823e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8018242:	9600      	str	r6, [sp, #0]
 8018244:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8018248:	4602      	mov	r2, r0
 801824a:	f200 2002 	addw	r0, r0, #514	; 0x202
 801824e:	f000 fd97 	bl	8018d80 <uxr_write_framed_msg>
 8018252:	e7e6      	b.n	8018222 <send_custom_msg+0x16>
 8018254:	2001      	movs	r0, #1
 8018256:	b006      	add	sp, #24
 8018258:	bd70      	pop	{r4, r5, r6, pc}
 801825a:	bf00      	nop
 801825c:	20009d48 	.word	0x20009d48

08018260 <uxr_set_custom_transport_callbacks>:
 8018260:	b430      	push	{r4, r5}
 8018262:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 8018266:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 801826a:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 801826e:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8018272:	bc30      	pop	{r4, r5}
 8018274:	4770      	bx	lr
 8018276:	bf00      	nop

08018278 <uxr_init_custom_transport>:
 8018278:	b538      	push	{r3, r4, r5, lr}
 801827a:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 801827e:	b303      	cbz	r3, 80182c2 <uxr_init_custom_transport+0x4a>
 8018280:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8018284:	4604      	mov	r4, r0
 8018286:	b1e2      	cbz	r2, 80182c2 <uxr_init_custom_transport+0x4a>
 8018288:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 801828c:	b1ca      	cbz	r2, 80182c2 <uxr_init_custom_transport+0x4a>
 801828e:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8018292:	b1b2      	cbz	r2, 80182c2 <uxr_init_custom_transport+0x4a>
 8018294:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8018298:	4798      	blx	r3
 801829a:	4605      	mov	r5, r0
 801829c:	b188      	cbz	r0, 80182c2 <uxr_init_custom_transport+0x4a>
 801829e:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80182a2:	b98b      	cbnz	r3, 80182c8 <uxr_init_custom_transport+0x50>
 80182a4:	480b      	ldr	r0, [pc, #44]	; (80182d4 <uxr_init_custom_transport+0x5c>)
 80182a6:	490c      	ldr	r1, [pc, #48]	; (80182d8 <uxr_init_custom_transport+0x60>)
 80182a8:	4a0c      	ldr	r2, [pc, #48]	; (80182dc <uxr_init_custom_transport+0x64>)
 80182aa:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 80182ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80182b2:	e9c4 019f 	strd	r0, r1, [r4, #636]	; 0x27c
 80182b6:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 80182ba:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 80182be:	4628      	mov	r0, r5
 80182c0:	bd38      	pop	{r3, r4, r5, pc}
 80182c2:	2500      	movs	r5, #0
 80182c4:	4628      	mov	r0, r5
 80182c6:	bd38      	pop	{r3, r4, r5, pc}
 80182c8:	2100      	movs	r1, #0
 80182ca:	f204 2002 	addw	r0, r4, #514	; 0x202
 80182ce:	f000 fd51 	bl	8018d74 <uxr_init_framing_io>
 80182d2:	e7e7      	b.n	80182a4 <uxr_init_custom_transport+0x2c>
 80182d4:	0801820d 	.word	0x0801820d
 80182d8:	08018175 	.word	0x08018175
 80182dc:	08018169 	.word	0x08018169

080182e0 <uxr_close_custom_transport>:
 80182e0:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 80182e4:	4718      	bx	r3
 80182e6:	bf00      	nop

080182e8 <uxr_init_input_best_effort_stream>:
 80182e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80182ec:	8003      	strh	r3, [r0, #0]
 80182ee:	4770      	bx	lr

080182f0 <uxr_reset_input_best_effort_stream>:
 80182f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80182f4:	8003      	strh	r3, [r0, #0]
 80182f6:	4770      	bx	lr

080182f8 <uxr_receive_best_effort_message>:
 80182f8:	b538      	push	{r3, r4, r5, lr}
 80182fa:	4604      	mov	r4, r0
 80182fc:	8800      	ldrh	r0, [r0, #0]
 80182fe:	460d      	mov	r5, r1
 8018300:	f000 fd20 	bl	8018d44 <uxr_seq_num_cmp>
 8018304:	4603      	mov	r3, r0
 8018306:	2b00      	cmp	r3, #0
 8018308:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 801830c:	bfb8      	it	lt
 801830e:	8025      	strhlt	r5, [r4, #0]
 8018310:	bd38      	pop	{r3, r4, r5, pc}
 8018312:	bf00      	nop

08018314 <on_full_input_buffer>:
 8018314:	b570      	push	{r4, r5, r6, lr}
 8018316:	6802      	ldr	r2, [r0, #0]
 8018318:	460d      	mov	r5, r1
 801831a:	6809      	ldr	r1, [r1, #0]
 801831c:	686c      	ldr	r4, [r5, #4]
 801831e:	1a53      	subs	r3, r2, r1
 8018320:	4606      	mov	r6, r0
 8018322:	8928      	ldrh	r0, [r5, #8]
 8018324:	fbb4 f4f0 	udiv	r4, r4, r0
 8018328:	fbb3 f3f4 	udiv	r3, r3, r4
 801832c:	3301      	adds	r3, #1
 801832e:	b29b      	uxth	r3, r3
 8018330:	fbb3 f2f0 	udiv	r2, r3, r0
 8018334:	fb00 3312 	mls	r3, r0, r2, r3
 8018338:	b29b      	uxth	r3, r3
 801833a:	fb04 f403 	mul.w	r4, r4, r3
 801833e:	1d23      	adds	r3, r4, #4
 8018340:	440b      	add	r3, r1
 8018342:	7d28      	ldrb	r0, [r5, #20]
 8018344:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8018348:	b110      	cbz	r0, 8018350 <on_full_input_buffer+0x3c>
 801834a:	2000      	movs	r0, #0
 801834c:	f843 0c04 	str.w	r0, [r3, #-4]
 8018350:	2a03      	cmp	r2, #3
 8018352:	d801      	bhi.n	8018358 <on_full_input_buffer+0x44>
 8018354:	2001      	movs	r0, #1
 8018356:	bd70      	pop	{r4, r5, r6, pc}
 8018358:	3408      	adds	r4, #8
 801835a:	6933      	ldr	r3, [r6, #16]
 801835c:	4421      	add	r1, r4
 801835e:	4630      	mov	r0, r6
 8018360:	3a04      	subs	r2, #4
 8018362:	f7f9 fa91 	bl	8011888 <ucdr_init_buffer_origin>
 8018366:	4630      	mov	r0, r6
 8018368:	4902      	ldr	r1, [pc, #8]	; (8018374 <on_full_input_buffer+0x60>)
 801836a:	462a      	mov	r2, r5
 801836c:	f7f9 fa6a 	bl	8011844 <ucdr_set_on_full_buffer_callback>
 8018370:	2000      	movs	r0, #0
 8018372:	bd70      	pop	{r4, r5, r6, pc}
 8018374:	08018315 	.word	0x08018315

08018378 <uxr_init_input_reliable_stream>:
 8018378:	b470      	push	{r4, r5, r6}
 801837a:	9c03      	ldr	r4, [sp, #12]
 801837c:	6001      	str	r1, [r0, #0]
 801837e:	2600      	movs	r6, #0
 8018380:	8103      	strh	r3, [r0, #8]
 8018382:	6042      	str	r2, [r0, #4]
 8018384:	6104      	str	r4, [r0, #16]
 8018386:	7506      	strb	r6, [r0, #20]
 8018388:	b1ab      	cbz	r3, 80183b6 <uxr_init_input_reliable_stream+0x3e>
 801838a:	600e      	str	r6, [r1, #0]
 801838c:	8901      	ldrh	r1, [r0, #8]
 801838e:	2901      	cmp	r1, #1
 8018390:	d911      	bls.n	80183b6 <uxr_init_input_reliable_stream+0x3e>
 8018392:	2201      	movs	r2, #1
 8018394:	e9d0 5400 	ldrd	r5, r4, [r0]
 8018398:	fbb2 f3f1 	udiv	r3, r2, r1
 801839c:	fb01 2313 	mls	r3, r1, r3, r2
 80183a0:	b29b      	uxth	r3, r3
 80183a2:	fbb4 f1f1 	udiv	r1, r4, r1
 80183a6:	fb03 f301 	mul.w	r3, r3, r1
 80183aa:	3201      	adds	r2, #1
 80183ac:	50ee      	str	r6, [r5, r3]
 80183ae:	8901      	ldrh	r1, [r0, #8]
 80183b0:	b292      	uxth	r2, r2
 80183b2:	4291      	cmp	r1, r2
 80183b4:	d8ee      	bhi.n	8018394 <uxr_init_input_reliable_stream+0x1c>
 80183b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80183ba:	bc70      	pop	{r4, r5, r6}
 80183bc:	60c3      	str	r3, [r0, #12]
 80183be:	4770      	bx	lr

080183c0 <uxr_reset_input_reliable_stream>:
 80183c0:	8902      	ldrh	r2, [r0, #8]
 80183c2:	b1ca      	cbz	r2, 80183f8 <uxr_reset_input_reliable_stream+0x38>
 80183c4:	b470      	push	{r4, r5, r6}
 80183c6:	2400      	movs	r4, #0
 80183c8:	4621      	mov	r1, r4
 80183ca:	4626      	mov	r6, r4
 80183cc:	fbb1 f3f2 	udiv	r3, r1, r2
 80183d0:	fb02 1313 	mls	r3, r2, r3, r1
 80183d4:	e9d0 5100 	ldrd	r5, r1, [r0]
 80183d8:	b29b      	uxth	r3, r3
 80183da:	fbb1 f2f2 	udiv	r2, r1, r2
 80183de:	fb03 f302 	mul.w	r3, r3, r2
 80183e2:	3401      	adds	r4, #1
 80183e4:	50ee      	str	r6, [r5, r3]
 80183e6:	8902      	ldrh	r2, [r0, #8]
 80183e8:	b2a1      	uxth	r1, r4
 80183ea:	428a      	cmp	r2, r1
 80183ec:	d8ee      	bhi.n	80183cc <uxr_reset_input_reliable_stream+0xc>
 80183ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80183f2:	bc70      	pop	{r4, r5, r6}
 80183f4:	60c3      	str	r3, [r0, #12]
 80183f6:	4770      	bx	lr
 80183f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80183fc:	60c3      	str	r3, [r0, #12]
 80183fe:	4770      	bx	lr

08018400 <uxr_receive_reliable_message>:
 8018400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018404:	4604      	mov	r4, r0
 8018406:	460d      	mov	r5, r1
 8018408:	8901      	ldrh	r1, [r0, #8]
 801840a:	8980      	ldrh	r0, [r0, #12]
 801840c:	4690      	mov	r8, r2
 801840e:	461f      	mov	r7, r3
 8018410:	f000 fc90 	bl	8018d34 <uxr_seq_num_add>
 8018414:	4629      	mov	r1, r5
 8018416:	4606      	mov	r6, r0
 8018418:	89a0      	ldrh	r0, [r4, #12]
 801841a:	f000 fc93 	bl	8018d44 <uxr_seq_num_cmp>
 801841e:	2800      	cmp	r0, #0
 8018420:	db0a      	blt.n	8018438 <uxr_receive_reliable_message+0x38>
 8018422:	2600      	movs	r6, #0
 8018424:	89e0      	ldrh	r0, [r4, #14]
 8018426:	4629      	mov	r1, r5
 8018428:	f000 fc8c 	bl	8018d44 <uxr_seq_num_cmp>
 801842c:	2800      	cmp	r0, #0
 801842e:	bfb8      	it	lt
 8018430:	81e5      	strhlt	r5, [r4, #14]
 8018432:	4630      	mov	r0, r6
 8018434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018438:	4630      	mov	r0, r6
 801843a:	4629      	mov	r1, r5
 801843c:	f000 fc82 	bl	8018d44 <uxr_seq_num_cmp>
 8018440:	2800      	cmp	r0, #0
 8018442:	dbee      	blt.n	8018422 <uxr_receive_reliable_message+0x22>
 8018444:	6923      	ldr	r3, [r4, #16]
 8018446:	4640      	mov	r0, r8
 8018448:	4798      	blx	r3
 801844a:	2101      	movs	r1, #1
 801844c:	4681      	mov	r9, r0
 801844e:	89a0      	ldrh	r0, [r4, #12]
 8018450:	f000 fc70 	bl	8018d34 <uxr_seq_num_add>
 8018454:	f1b9 0f00 	cmp.w	r9, #0
 8018458:	d101      	bne.n	801845e <uxr_receive_reliable_message+0x5e>
 801845a:	4285      	cmp	r5, r0
 801845c:	d049      	beq.n	80184f2 <uxr_receive_reliable_message+0xf2>
 801845e:	8921      	ldrh	r1, [r4, #8]
 8018460:	fbb5 f3f1 	udiv	r3, r5, r1
 8018464:	fb01 5313 	mls	r3, r1, r3, r5
 8018468:	b29b      	uxth	r3, r3
 801846a:	6862      	ldr	r2, [r4, #4]
 801846c:	6820      	ldr	r0, [r4, #0]
 801846e:	fbb2 f2f1 	udiv	r2, r2, r1
 8018472:	fb03 f302 	mul.w	r3, r3, r2
 8018476:	3304      	adds	r3, #4
 8018478:	4418      	add	r0, r3
 801847a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801847e:	2b00      	cmp	r3, #0
 8018480:	d1cf      	bne.n	8018422 <uxr_receive_reliable_message+0x22>
 8018482:	4641      	mov	r1, r8
 8018484:	463a      	mov	r2, r7
 8018486:	f002 f91e 	bl	801a6c6 <memcpy>
 801848a:	8921      	ldrh	r1, [r4, #8]
 801848c:	fbb5 f3f1 	udiv	r3, r5, r1
 8018490:	fb01 5313 	mls	r3, r1, r3, r5
 8018494:	b29b      	uxth	r3, r3
 8018496:	6862      	ldr	r2, [r4, #4]
 8018498:	fbb2 f2f1 	udiv	r2, r2, r1
 801849c:	6821      	ldr	r1, [r4, #0]
 801849e:	fb03 f302 	mul.w	r3, r3, r2
 80184a2:	2201      	movs	r2, #1
 80184a4:	50cf      	str	r7, [r1, r3]
 80184a6:	9b08      	ldr	r3, [sp, #32]
 80184a8:	701a      	strb	r2, [r3, #0]
 80184aa:	f1b9 0f00 	cmp.w	r9, #0
 80184ae:	d0b8      	beq.n	8018422 <uxr_receive_reliable_message+0x22>
 80184b0:	89a6      	ldrh	r6, [r4, #12]
 80184b2:	e001      	b.n	80184b8 <uxr_receive_reliable_message+0xb8>
 80184b4:	2801      	cmp	r0, #1
 80184b6:	d1b4      	bne.n	8018422 <uxr_receive_reliable_message+0x22>
 80184b8:	4630      	mov	r0, r6
 80184ba:	2101      	movs	r1, #1
 80184bc:	f000 fc3a 	bl	8018d34 <uxr_seq_num_add>
 80184c0:	8921      	ldrh	r1, [r4, #8]
 80184c2:	fbb0 f3f1 	udiv	r3, r0, r1
 80184c6:	fb01 0313 	mls	r3, r1, r3, r0
 80184ca:	b29b      	uxth	r3, r3
 80184cc:	6862      	ldr	r2, [r4, #4]
 80184ce:	fbb2 f2f1 	udiv	r2, r2, r1
 80184d2:	4606      	mov	r6, r0
 80184d4:	fb03 f302 	mul.w	r3, r3, r2
 80184d8:	6820      	ldr	r0, [r4, #0]
 80184da:	3304      	adds	r3, #4
 80184dc:	4418      	add	r0, r3
 80184de:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d09d      	beq.n	8018422 <uxr_receive_reliable_message+0x22>
 80184e6:	6923      	ldr	r3, [r4, #16]
 80184e8:	4798      	blx	r3
 80184ea:	2802      	cmp	r0, #2
 80184ec:	d1e2      	bne.n	80184b4 <uxr_receive_reliable_message+0xb4>
 80184ee:	2601      	movs	r6, #1
 80184f0:	e798      	b.n	8018424 <uxr_receive_reliable_message+0x24>
 80184f2:	9b08      	ldr	r3, [sp, #32]
 80184f4:	81a5      	strh	r5, [r4, #12]
 80184f6:	2601      	movs	r6, #1
 80184f8:	f883 9000 	strb.w	r9, [r3]
 80184fc:	e792      	b.n	8018424 <uxr_receive_reliable_message+0x24>
 80184fe:	bf00      	nop

08018500 <uxr_next_input_reliable_buffer_available>:
 8018500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018504:	4604      	mov	r4, r0
 8018506:	460e      	mov	r6, r1
 8018508:	8980      	ldrh	r0, [r0, #12]
 801850a:	2101      	movs	r1, #1
 801850c:	4617      	mov	r7, r2
 801850e:	f000 fc11 	bl	8018d34 <uxr_seq_num_add>
 8018512:	8921      	ldrh	r1, [r4, #8]
 8018514:	fbb0 f3f1 	udiv	r3, r0, r1
 8018518:	fb01 0313 	mls	r3, r1, r3, r0
 801851c:	b29b      	uxth	r3, r3
 801851e:	6862      	ldr	r2, [r4, #4]
 8018520:	fbb2 f2f1 	udiv	r2, r2, r1
 8018524:	fb03 f302 	mul.w	r3, r3, r2
 8018528:	6822      	ldr	r2, [r4, #0]
 801852a:	3304      	adds	r3, #4
 801852c:	eb02 0803 	add.w	r8, r2, r3
 8018530:	f858 9c04 	ldr.w	r9, [r8, #-4]
 8018534:	f1b9 0f00 	cmp.w	r9, #0
 8018538:	d025      	beq.n	8018586 <uxr_next_input_reliable_buffer_available+0x86>
 801853a:	6923      	ldr	r3, [r4, #16]
 801853c:	4605      	mov	r5, r0
 801853e:	4640      	mov	r0, r8
 8018540:	4798      	blx	r3
 8018542:	4682      	mov	sl, r0
 8018544:	b310      	cbz	r0, 801858c <uxr_next_input_reliable_buffer_available+0x8c>
 8018546:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801854a:	e005      	b.n	8018558 <uxr_next_input_reliable_buffer_available+0x58>
 801854c:	6923      	ldr	r3, [r4, #16]
 801854e:	4798      	blx	r3
 8018550:	2802      	cmp	r0, #2
 8018552:	d032      	beq.n	80185ba <uxr_next_input_reliable_buffer_available+0xba>
 8018554:	2801      	cmp	r0, #1
 8018556:	d116      	bne.n	8018586 <uxr_next_input_reliable_buffer_available+0x86>
 8018558:	4650      	mov	r0, sl
 801855a:	2101      	movs	r1, #1
 801855c:	f000 fbea 	bl	8018d34 <uxr_seq_num_add>
 8018560:	8921      	ldrh	r1, [r4, #8]
 8018562:	fbb0 f3f1 	udiv	r3, r0, r1
 8018566:	fb01 0313 	mls	r3, r1, r3, r0
 801856a:	b29b      	uxth	r3, r3
 801856c:	6862      	ldr	r2, [r4, #4]
 801856e:	fbb2 f2f1 	udiv	r2, r2, r1
 8018572:	4682      	mov	sl, r0
 8018574:	fb03 f302 	mul.w	r3, r3, r2
 8018578:	6820      	ldr	r0, [r4, #0]
 801857a:	3304      	adds	r3, #4
 801857c:	4418      	add	r0, r3
 801857e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018582:	2b00      	cmp	r3, #0
 8018584:	d1e2      	bne.n	801854c <uxr_next_input_reliable_buffer_available+0x4c>
 8018586:	2000      	movs	r0, #0
 8018588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801858c:	464a      	mov	r2, r9
 801858e:	4641      	mov	r1, r8
 8018590:	4630      	mov	r0, r6
 8018592:	f7f9 f981 	bl	8011898 <ucdr_init_buffer>
 8018596:	8921      	ldrh	r1, [r4, #8]
 8018598:	fbb5 f3f1 	udiv	r3, r5, r1
 801859c:	fb01 5313 	mls	r3, r1, r3, r5
 80185a0:	b29b      	uxth	r3, r3
 80185a2:	6862      	ldr	r2, [r4, #4]
 80185a4:	fbb2 f2f1 	udiv	r2, r2, r1
 80185a8:	6821      	ldr	r1, [r4, #0]
 80185aa:	fb03 f302 	mul.w	r3, r3, r2
 80185ae:	2001      	movs	r0, #1
 80185b0:	f841 a003 	str.w	sl, [r1, r3]
 80185b4:	81a5      	strh	r5, [r4, #12]
 80185b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185ba:	8922      	ldrh	r2, [r4, #8]
 80185bc:	fbb5 f0f2 	udiv	r0, r5, r2
 80185c0:	fb02 5510 	mls	r5, r2, r0, r5
 80185c4:	b2ad      	uxth	r5, r5
 80185c6:	6863      	ldr	r3, [r4, #4]
 80185c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80185cc:	fb05 f503 	mul.w	r5, r5, r3
 80185d0:	6823      	ldr	r3, [r4, #0]
 80185d2:	2000      	movs	r0, #0
 80185d4:	5158      	str	r0, [r3, r5]
 80185d6:	eba9 0207 	sub.w	r2, r9, r7
 80185da:	eb08 0107 	add.w	r1, r8, r7
 80185de:	4630      	mov	r0, r6
 80185e0:	f7f9 f95a 	bl	8011898 <ucdr_init_buffer>
 80185e4:	4630      	mov	r0, r6
 80185e6:	4904      	ldr	r1, [pc, #16]	; (80185f8 <uxr_next_input_reliable_buffer_available+0xf8>)
 80185e8:	4622      	mov	r2, r4
 80185ea:	f7f9 f92b 	bl	8011844 <ucdr_set_on_full_buffer_callback>
 80185ee:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80185f2:	2001      	movs	r0, #1
 80185f4:	e7c8      	b.n	8018588 <uxr_next_input_reliable_buffer_available+0x88>
 80185f6:	bf00      	nop
 80185f8:	08018315 	.word	0x08018315

080185fc <uxr_process_heartbeat>:
 80185fc:	b538      	push	{r3, r4, r5, lr}
 80185fe:	4611      	mov	r1, r2
 8018600:	4604      	mov	r4, r0
 8018602:	89c0      	ldrh	r0, [r0, #14]
 8018604:	4615      	mov	r5, r2
 8018606:	f000 fb9d 	bl	8018d44 <uxr_seq_num_cmp>
 801860a:	2800      	cmp	r0, #0
 801860c:	bfb8      	it	lt
 801860e:	81e5      	strhlt	r5, [r4, #14]
 8018610:	bd38      	pop	{r3, r4, r5, pc}
 8018612:	bf00      	nop

08018614 <uxr_compute_acknack>:
 8018614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018618:	8903      	ldrh	r3, [r0, #8]
 801861a:	8986      	ldrh	r6, [r0, #12]
 801861c:	4604      	mov	r4, r0
 801861e:	460d      	mov	r5, r1
 8018620:	b1d3      	cbz	r3, 8018658 <uxr_compute_acknack+0x44>
 8018622:	4630      	mov	r0, r6
 8018624:	2701      	movs	r7, #1
 8018626:	e003      	b.n	8018630 <uxr_compute_acknack+0x1c>
 8018628:	4567      	cmp	r7, ip
 801862a:	d215      	bcs.n	8018658 <uxr_compute_acknack+0x44>
 801862c:	89a0      	ldrh	r0, [r4, #12]
 801862e:	3701      	adds	r7, #1
 8018630:	b2b9      	uxth	r1, r7
 8018632:	f000 fb7f 	bl	8018d34 <uxr_seq_num_add>
 8018636:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801863a:	fbb0 f2fc 	udiv	r2, r0, ip
 801863e:	e9d4 1300 	ldrd	r1, r3, [r4]
 8018642:	fb0c 0212 	mls	r2, ip, r2, r0
 8018646:	b292      	uxth	r2, r2
 8018648:	fbb3 f3fc 	udiv	r3, r3, ip
 801864c:	fb02 1303 	mla	r3, r2, r3, r1
 8018650:	681b      	ldr	r3, [r3, #0]
 8018652:	2b00      	cmp	r3, #0
 8018654:	d1e8      	bne.n	8018628 <uxr_compute_acknack+0x14>
 8018656:	4606      	mov	r6, r0
 8018658:	802e      	strh	r6, [r5, #0]
 801865a:	4630      	mov	r0, r6
 801865c:	2101      	movs	r1, #1
 801865e:	89e6      	ldrh	r6, [r4, #14]
 8018660:	f000 fb6c 	bl	8018d3c <uxr_seq_num_sub>
 8018664:	4601      	mov	r1, r0
 8018666:	4630      	mov	r0, r6
 8018668:	f000 fb68 	bl	8018d3c <uxr_seq_num_sub>
 801866c:	4606      	mov	r6, r0
 801866e:	b318      	cbz	r0, 80186b8 <uxr_compute_acknack+0xa4>
 8018670:	f04f 0900 	mov.w	r9, #0
 8018674:	464f      	mov	r7, r9
 8018676:	f04f 0801 	mov.w	r8, #1
 801867a:	fa1f f189 	uxth.w	r1, r9
 801867e:	8828      	ldrh	r0, [r5, #0]
 8018680:	f000 fb58 	bl	8018d34 <uxr_seq_num_add>
 8018684:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018688:	6822      	ldr	r2, [r4, #0]
 801868a:	fbb0 f1fc 	udiv	r1, r0, ip
 801868e:	fb01 011c 	mls	r1, r1, ip, r0
 8018692:	b289      	uxth	r1, r1
 8018694:	6863      	ldr	r3, [r4, #4]
 8018696:	fbb3 f3fc 	udiv	r3, r3, ip
 801869a:	fb01 2303 	mla	r3, r1, r3, r2
 801869e:	fa08 f209 	lsl.w	r2, r8, r9
 80186a2:	681b      	ldr	r3, [r3, #0]
 80186a4:	f109 0901 	add.w	r9, r9, #1
 80186a8:	b90b      	cbnz	r3, 80186ae <uxr_compute_acknack+0x9a>
 80186aa:	4317      	orrs	r7, r2
 80186ac:	b2bf      	uxth	r7, r7
 80186ae:	454e      	cmp	r6, r9
 80186b0:	d1e3      	bne.n	801867a <uxr_compute_acknack+0x66>
 80186b2:	4638      	mov	r0, r7
 80186b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80186b8:	4607      	mov	r7, r0
 80186ba:	4638      	mov	r0, r7
 80186bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080186c0 <uxr_init_output_best_effort_stream>:
 80186c0:	b410      	push	{r4}
 80186c2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80186c6:	81c4      	strh	r4, [r0, #14]
 80186c8:	e9c0 1300 	strd	r1, r3, [r0]
 80186cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80186d0:	7303      	strb	r3, [r0, #12]
 80186d2:	6082      	str	r2, [r0, #8]
 80186d4:	4770      	bx	lr
 80186d6:	bf00      	nop

080186d8 <uxr_reset_output_best_effort_stream>:
 80186d8:	7b02      	ldrb	r2, [r0, #12]
 80186da:	6042      	str	r2, [r0, #4]
 80186dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80186e0:	81c3      	strh	r3, [r0, #14]
 80186e2:	4770      	bx	lr

080186e4 <uxr_prepare_best_effort_buffer_to_write>:
 80186e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80186e6:	4604      	mov	r4, r0
 80186e8:	b083      	sub	sp, #12
 80186ea:	6840      	ldr	r0, [r0, #4]
 80186ec:	460d      	mov	r5, r1
 80186ee:	4616      	mov	r6, r2
 80186f0:	f7fa feb8 	bl	8013464 <uxr_submessage_padding>
 80186f4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80186f8:	4410      	add	r0, r2
 80186fa:	1942      	adds	r2, r0, r5
 80186fc:	4293      	cmp	r3, r2
 80186fe:	bf2c      	ite	cs
 8018700:	2701      	movcs	r7, #1
 8018702:	2700      	movcc	r7, #0
 8018704:	d202      	bcs.n	801870c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8018706:	4638      	mov	r0, r7
 8018708:	b003      	add	sp, #12
 801870a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801870c:	9000      	str	r0, [sp, #0]
 801870e:	6821      	ldr	r1, [r4, #0]
 8018710:	4630      	mov	r0, r6
 8018712:	2300      	movs	r3, #0
 8018714:	f7f9 f8ae 	bl	8011874 <ucdr_init_buffer_origin_offset>
 8018718:	6861      	ldr	r1, [r4, #4]
 801871a:	4638      	mov	r0, r7
 801871c:	4429      	add	r1, r5
 801871e:	6061      	str	r1, [r4, #4]
 8018720:	b003      	add	sp, #12
 8018722:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018724 <uxr_prepare_best_effort_buffer_to_send>:
 8018724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018728:	6845      	ldr	r5, [r0, #4]
 801872a:	4604      	mov	r4, r0
 801872c:	7b00      	ldrb	r0, [r0, #12]
 801872e:	4285      	cmp	r5, r0
 8018730:	bf8c      	ite	hi
 8018732:	2701      	movhi	r7, #1
 8018734:	2700      	movls	r7, #0
 8018736:	d802      	bhi.n	801873e <uxr_prepare_best_effort_buffer_to_send+0x1a>
 8018738:	4638      	mov	r0, r7
 801873a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801873e:	4688      	mov	r8, r1
 8018740:	89e0      	ldrh	r0, [r4, #14]
 8018742:	2101      	movs	r1, #1
 8018744:	4615      	mov	r5, r2
 8018746:	461e      	mov	r6, r3
 8018748:	f000 faf4 	bl	8018d34 <uxr_seq_num_add>
 801874c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018750:	81e0      	strh	r0, [r4, #14]
 8018752:	8030      	strh	r0, [r6, #0]
 8018754:	f8c8 2000 	str.w	r2, [r8]
 8018758:	602b      	str	r3, [r5, #0]
 801875a:	7b23      	ldrb	r3, [r4, #12]
 801875c:	6063      	str	r3, [r4, #4]
 801875e:	4638      	mov	r0, r7
 8018760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018764 <on_full_output_buffer>:
 8018764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018766:	6802      	ldr	r2, [r0, #0]
 8018768:	460d      	mov	r5, r1
 801876a:	6809      	ldr	r1, [r1, #0]
 801876c:	892f      	ldrh	r7, [r5, #8]
 801876e:	686c      	ldr	r4, [r5, #4]
 8018770:	fbb4 f4f7 	udiv	r4, r4, r7
 8018774:	1a53      	subs	r3, r2, r1
 8018776:	fbb3 f3f4 	udiv	r3, r3, r4
 801877a:	3301      	adds	r3, #1
 801877c:	b29b      	uxth	r3, r3
 801877e:	fbb3 f2f7 	udiv	r2, r3, r7
 8018782:	fb07 3312 	mls	r3, r7, r2, r3
 8018786:	b29b      	uxth	r3, r3
 8018788:	fb04 f403 	mul.w	r4, r4, r3
 801878c:	7b2f      	ldrb	r7, [r5, #12]
 801878e:	590a      	ldr	r2, [r1, r4]
 8018790:	6903      	ldr	r3, [r0, #16]
 8018792:	443c      	add	r4, r7
 8018794:	3408      	adds	r4, #8
 8018796:	1bd2      	subs	r2, r2, r7
 8018798:	4606      	mov	r6, r0
 801879a:	4421      	add	r1, r4
 801879c:	3a04      	subs	r2, #4
 801879e:	f7f9 f873 	bl	8011888 <ucdr_init_buffer_origin>
 80187a2:	4630      	mov	r0, r6
 80187a4:	4902      	ldr	r1, [pc, #8]	; (80187b0 <on_full_output_buffer+0x4c>)
 80187a6:	462a      	mov	r2, r5
 80187a8:	f7f9 f84c 	bl	8011844 <ucdr_set_on_full_buffer_callback>
 80187ac:	2000      	movs	r0, #0
 80187ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80187b0:	08018765 	.word	0x08018765

080187b4 <uxr_init_output_reliable_stream>:
 80187b4:	b430      	push	{r4, r5}
 80187b6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80187ba:	6001      	str	r1, [r0, #0]
 80187bc:	8103      	strh	r3, [r0, #8]
 80187be:	6042      	str	r2, [r0, #4]
 80187c0:	7304      	strb	r4, [r0, #12]
 80187c2:	b1b3      	cbz	r3, 80187f2 <uxr_init_output_reliable_stream+0x3e>
 80187c4:	600c      	str	r4, [r1, #0]
 80187c6:	8901      	ldrh	r1, [r0, #8]
 80187c8:	2901      	cmp	r1, #1
 80187ca:	d912      	bls.n	80187f2 <uxr_init_output_reliable_stream+0x3e>
 80187cc:	2201      	movs	r2, #1
 80187ce:	e9d0 5400 	ldrd	r5, r4, [r0]
 80187d2:	fbb2 f3f1 	udiv	r3, r2, r1
 80187d6:	fb01 2313 	mls	r3, r1, r3, r2
 80187da:	b29b      	uxth	r3, r3
 80187dc:	fbb4 f1f1 	udiv	r1, r4, r1
 80187e0:	fb03 f301 	mul.w	r3, r3, r1
 80187e4:	7b01      	ldrb	r1, [r0, #12]
 80187e6:	50e9      	str	r1, [r5, r3]
 80187e8:	3201      	adds	r2, #1
 80187ea:	8901      	ldrh	r1, [r0, #8]
 80187ec:	b292      	uxth	r2, r2
 80187ee:	4291      	cmp	r1, r2
 80187f0:	d8ed      	bhi.n	80187ce <uxr_init_output_reliable_stream+0x1a>
 80187f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80187f6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80187fa:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80187fe:	4b05      	ldr	r3, [pc, #20]	; (8018814 <uxr_init_output_reliable_stream+0x60>)
 8018800:	f8c0 300e 	str.w	r3, [r0, #14]
 8018804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018808:	2300      	movs	r3, #0
 801880a:	bc30      	pop	{r4, r5}
 801880c:	8242      	strh	r2, [r0, #18]
 801880e:	8403      	strh	r3, [r0, #32]
 8018810:	4770      	bx	lr
 8018812:	bf00      	nop
 8018814:	ffff0000 	.word	0xffff0000

08018818 <uxr_reset_output_reliable_stream>:
 8018818:	8902      	ldrh	r2, [r0, #8]
 801881a:	b430      	push	{r4, r5}
 801881c:	b19a      	cbz	r2, 8018846 <uxr_reset_output_reliable_stream+0x2e>
 801881e:	2400      	movs	r4, #0
 8018820:	4621      	mov	r1, r4
 8018822:	fbb1 f3f2 	udiv	r3, r1, r2
 8018826:	fb02 1313 	mls	r3, r2, r3, r1
 801882a:	e9d0 5100 	ldrd	r5, r1, [r0]
 801882e:	b29b      	uxth	r3, r3
 8018830:	fbb1 f2f2 	udiv	r2, r1, r2
 8018834:	fb03 f302 	mul.w	r3, r3, r2
 8018838:	7b02      	ldrb	r2, [r0, #12]
 801883a:	50ea      	str	r2, [r5, r3]
 801883c:	3401      	adds	r4, #1
 801883e:	8902      	ldrh	r2, [r0, #8]
 8018840:	b2a1      	uxth	r1, r4
 8018842:	428a      	cmp	r2, r1
 8018844:	d8ed      	bhi.n	8018822 <uxr_reset_output_reliable_stream+0xa>
 8018846:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801884a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801884e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8018852:	4b05      	ldr	r3, [pc, #20]	; (8018868 <uxr_reset_output_reliable_stream+0x50>)
 8018854:	f8c0 300e 	str.w	r3, [r0, #14]
 8018858:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801885c:	2300      	movs	r3, #0
 801885e:	bc30      	pop	{r4, r5}
 8018860:	8242      	strh	r2, [r0, #18]
 8018862:	8403      	strh	r3, [r0, #32]
 8018864:	4770      	bx	lr
 8018866:	bf00      	nop
 8018868:	ffff0000 	.word	0xffff0000

0801886c <uxr_prepare_reliable_buffer_to_write>:
 801886c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018870:	89c5      	ldrh	r5, [r0, #14]
 8018872:	4604      	mov	r4, r0
 8018874:	8900      	ldrh	r0, [r0, #8]
 8018876:	fbb5 f3f0 	udiv	r3, r5, r0
 801887a:	4688      	mov	r8, r1
 801887c:	e9d4 1600 	ldrd	r1, r6, [r4]
 8018880:	fb00 5313 	mls	r3, r0, r3, r5
 8018884:	b29b      	uxth	r3, r3
 8018886:	fbb6 f0f0 	udiv	r0, r6, r0
 801888a:	fb00 f303 	mul.w	r3, r0, r3
 801888e:	3304      	adds	r3, #4
 8018890:	18cb      	adds	r3, r1, r3
 8018892:	b091      	sub	sp, #68	; 0x44
 8018894:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8018898:	9004      	str	r0, [sp, #16]
 801889a:	2104      	movs	r1, #4
 801889c:	4630      	mov	r0, r6
 801889e:	9305      	str	r3, [sp, #20]
 80188a0:	9206      	str	r2, [sp, #24]
 80188a2:	f7f8 fffd 	bl	80118a0 <ucdr_alignment>
 80188a6:	1833      	adds	r3, r6, r0
 80188a8:	9804      	ldr	r0, [sp, #16]
 80188aa:	9303      	str	r3, [sp, #12]
 80188ac:	eb03 0708 	add.w	r7, r3, r8
 80188b0:	1f06      	subs	r6, r0, #4
 80188b2:	42b7      	cmp	r7, r6
 80188b4:	f240 80dc 	bls.w	8018a70 <uxr_prepare_reliable_buffer_to_write+0x204>
 80188b8:	f894 e00c 	ldrb.w	lr, [r4, #12]
 80188bc:	eb0e 0308 	add.w	r3, lr, r8
 80188c0:	42b3      	cmp	r3, r6
 80188c2:	f240 80c2 	bls.w	8018a4a <uxr_prepare_reliable_buffer_to_write+0x1de>
 80188c6:	9b03      	ldr	r3, [sp, #12]
 80188c8:	3304      	adds	r3, #4
 80188ca:	42b3      	cmp	r3, r6
 80188cc:	f080 8112 	bcs.w	8018af4 <uxr_prepare_reliable_buffer_to_write+0x288>
 80188d0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80188d4:	f1bc 0f00 	cmp.w	ip, #0
 80188d8:	f000 8127 	beq.w	8018b2a <uxr_prepare_reliable_buffer_to_write+0x2be>
 80188dc:	e9d4 7300 	ldrd	r7, r3, [r4]
 80188e0:	2100      	movs	r1, #0
 80188e2:	4608      	mov	r0, r1
 80188e4:	460a      	mov	r2, r1
 80188e6:	fbb3 f9fc 	udiv	r9, r3, ip
 80188ea:	fbb2 f3fc 	udiv	r3, r2, ip
 80188ee:	fb0c 2313 	mls	r3, ip, r3, r2
 80188f2:	b29b      	uxth	r3, r3
 80188f4:	fb09 7303 	mla	r3, r9, r3, r7
 80188f8:	3101      	adds	r1, #1
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	459e      	cmp	lr, r3
 80188fe:	bf08      	it	eq
 8018900:	3001      	addeq	r0, #1
 8018902:	b28a      	uxth	r2, r1
 8018904:	bf08      	it	eq
 8018906:	b280      	uxtheq	r0, r0
 8018908:	4562      	cmp	r2, ip
 801890a:	d3ee      	bcc.n	80188ea <uxr_prepare_reliable_buffer_to_write+0x7e>
 801890c:	9b03      	ldr	r3, [sp, #12]
 801890e:	1f37      	subs	r7, r6, #4
 8018910:	b2bf      	uxth	r7, r7
 8018912:	eba7 0903 	sub.w	r9, r7, r3
 8018916:	fa1f f989 	uxth.w	r9, r9
 801891a:	eba7 070e 	sub.w	r7, r7, lr
 801891e:	b2bf      	uxth	r7, r7
 8018920:	eba8 0809 	sub.w	r8, r8, r9
 8018924:	fbb8 faf7 	udiv	sl, r8, r7
 8018928:	fb07 831a 	mls	r3, r7, sl, r8
 801892c:	9707      	str	r7, [sp, #28]
 801892e:	2b00      	cmp	r3, #0
 8018930:	f040 80bf 	bne.w	8018ab2 <uxr_prepare_reliable_buffer_to_write+0x246>
 8018934:	fa1f fa8a 	uxth.w	sl, sl
 8018938:	4582      	cmp	sl, r0
 801893a:	f200 8095 	bhi.w	8018a68 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 801893e:	f10d 0b20 	add.w	fp, sp, #32
 8018942:	f1ba 0f00 	cmp.w	sl, #0
 8018946:	d03a      	beq.n	80189be <uxr_prepare_reliable_buffer_to_write+0x152>
 8018948:	f04f 0800 	mov.w	r8, #0
 801894c:	f10d 0b20 	add.w	fp, sp, #32
 8018950:	e000      	b.n	8018954 <uxr_prepare_reliable_buffer_to_write+0xe8>
 8018952:	46b9      	mov	r9, r7
 8018954:	e9d4 3200 	ldrd	r3, r2, [r4]
 8018958:	fbb5 f1fc 	udiv	r1, r5, ip
 801895c:	fb0c 5111 	mls	r1, ip, r1, r5
 8018960:	b289      	uxth	r1, r1
 8018962:	fbb2 f2fc 	udiv	r2, r2, ip
 8018966:	fb01 f102 	mul.w	r1, r1, r2
 801896a:	3104      	adds	r1, #4
 801896c:	4419      	add	r1, r3
 801896e:	4632      	mov	r2, r6
 8018970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018974:	9300      	str	r3, [sp, #0]
 8018976:	4658      	mov	r0, fp
 8018978:	2300      	movs	r3, #0
 801897a:	f7f8 ff7b 	bl	8011874 <ucdr_init_buffer_origin_offset>
 801897e:	464a      	mov	r2, r9
 8018980:	2300      	movs	r3, #0
 8018982:	210d      	movs	r1, #13
 8018984:	4658      	mov	r0, fp
 8018986:	f7fa fd2d 	bl	80133e4 <uxr_buffer_submessage_header>
 801898a:	8920      	ldrh	r0, [r4, #8]
 801898c:	fbb5 f3f0 	udiv	r3, r5, r0
 8018990:	e9d4 2100 	ldrd	r2, r1, [r4]
 8018994:	fb00 5313 	mls	r3, r0, r3, r5
 8018998:	b29b      	uxth	r3, r3
 801899a:	fbb1 f1f0 	udiv	r1, r1, r0
 801899e:	fb03 f301 	mul.w	r3, r3, r1
 80189a2:	4628      	mov	r0, r5
 80189a4:	50d6      	str	r6, [r2, r3]
 80189a6:	2101      	movs	r1, #1
 80189a8:	f000 f9c4 	bl	8018d34 <uxr_seq_num_add>
 80189ac:	f108 0801 	add.w	r8, r8, #1
 80189b0:	fa1f f388 	uxth.w	r3, r8
 80189b4:	459a      	cmp	sl, r3
 80189b6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80189ba:	4605      	mov	r5, r0
 80189bc:	d8c9      	bhi.n	8018952 <uxr_prepare_reliable_buffer_to_write+0xe6>
 80189be:	fbb5 f1fc 	udiv	r1, r5, ip
 80189c2:	fb0c 5111 	mls	r1, ip, r1, r5
 80189c6:	b289      	uxth	r1, r1
 80189c8:	6863      	ldr	r3, [r4, #4]
 80189ca:	fbb3 fcfc 	udiv	ip, r3, ip
 80189ce:	6823      	ldr	r3, [r4, #0]
 80189d0:	fb01 f10c 	mul.w	r1, r1, ip
 80189d4:	3104      	adds	r1, #4
 80189d6:	4419      	add	r1, r3
 80189d8:	4632      	mov	r2, r6
 80189da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80189de:	9300      	str	r3, [sp, #0]
 80189e0:	4658      	mov	r0, fp
 80189e2:	2300      	movs	r3, #0
 80189e4:	f7f8 ff46 	bl	8011874 <ucdr_init_buffer_origin_offset>
 80189e8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80189ec:	4658      	mov	r0, fp
 80189ee:	fa1f f288 	uxth.w	r2, r8
 80189f2:	2302      	movs	r3, #2
 80189f4:	210d      	movs	r1, #13
 80189f6:	f7fa fcf5 	bl	80133e4 <uxr_buffer_submessage_header>
 80189fa:	e9d4 3200 	ldrd	r3, r2, [r4]
 80189fe:	8921      	ldrh	r1, [r4, #8]
 8018a00:	9f03      	ldr	r7, [sp, #12]
 8018a02:	9307      	str	r3, [sp, #28]
 8018a04:	9b05      	ldr	r3, [sp, #20]
 8018a06:	7b26      	ldrb	r6, [r4, #12]
 8018a08:	fbb5 f0f1 	udiv	r0, r5, r1
 8018a0c:	fbb2 f2f1 	udiv	r2, r2, r1
 8018a10:	fb01 5010 	mls	r0, r1, r0, r5
 8018a14:	1d39      	adds	r1, r7, #4
 8018a16:	440b      	add	r3, r1
 8018a18:	b280      	uxth	r0, r0
 8018a1a:	fb00 f002 	mul.w	r0, r0, r2
 8018a1e:	4619      	mov	r1, r3
 8018a20:	3604      	adds	r6, #4
 8018a22:	9b07      	ldr	r3, [sp, #28]
 8018a24:	9a04      	ldr	r2, [sp, #16]
 8018a26:	4446      	add	r6, r8
 8018a28:	501e      	str	r6, [r3, r0]
 8018a2a:	9e06      	ldr	r6, [sp, #24]
 8018a2c:	3a08      	subs	r2, #8
 8018a2e:	1bd2      	subs	r2, r2, r7
 8018a30:	4630      	mov	r0, r6
 8018a32:	f7f8 ff31 	bl	8011898 <ucdr_init_buffer>
 8018a36:	4630      	mov	r0, r6
 8018a38:	493d      	ldr	r1, [pc, #244]	; (8018b30 <uxr_prepare_reliable_buffer_to_write+0x2c4>)
 8018a3a:	4622      	mov	r2, r4
 8018a3c:	f7f8 ff02 	bl	8011844 <ucdr_set_on_full_buffer_callback>
 8018a40:	2001      	movs	r0, #1
 8018a42:	81e5      	strh	r5, [r4, #14]
 8018a44:	b011      	add	sp, #68	; 0x44
 8018a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a4a:	2101      	movs	r1, #1
 8018a4c:	89e0      	ldrh	r0, [r4, #14]
 8018a4e:	f000 f971 	bl	8018d34 <uxr_seq_num_add>
 8018a52:	8921      	ldrh	r1, [r4, #8]
 8018a54:	4605      	mov	r5, r0
 8018a56:	8a60      	ldrh	r0, [r4, #18]
 8018a58:	f000 f96c 	bl	8018d34 <uxr_seq_num_add>
 8018a5c:	4601      	mov	r1, r0
 8018a5e:	4628      	mov	r0, r5
 8018a60:	f000 f970 	bl	8018d44 <uxr_seq_num_cmp>
 8018a64:	2800      	cmp	r0, #0
 8018a66:	dd2a      	ble.n	8018abe <uxr_prepare_reliable_buffer_to_write+0x252>
 8018a68:	2000      	movs	r0, #0
 8018a6a:	b011      	add	sp, #68	; 0x44
 8018a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a70:	8921      	ldrh	r1, [r4, #8]
 8018a72:	8a60      	ldrh	r0, [r4, #18]
 8018a74:	f000 f95e 	bl	8018d34 <uxr_seq_num_add>
 8018a78:	4601      	mov	r1, r0
 8018a7a:	4628      	mov	r0, r5
 8018a7c:	f000 f962 	bl	8018d44 <uxr_seq_num_cmp>
 8018a80:	2800      	cmp	r0, #0
 8018a82:	dcf1      	bgt.n	8018a68 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 8018a84:	8921      	ldrh	r1, [r4, #8]
 8018a86:	fbb5 f3f1 	udiv	r3, r5, r1
 8018a8a:	e9d4 4200 	ldrd	r4, r2, [r4]
 8018a8e:	fb01 5313 	mls	r3, r1, r3, r5
 8018a92:	b29b      	uxth	r3, r3
 8018a94:	fbb2 f2f1 	udiv	r2, r2, r1
 8018a98:	fb03 f302 	mul.w	r3, r3, r2
 8018a9c:	e9dd 1005 	ldrd	r1, r0, [sp, #20]
 8018aa0:	50e7      	str	r7, [r4, r3]
 8018aa2:	9b03      	ldr	r3, [sp, #12]
 8018aa4:	9300      	str	r3, [sp, #0]
 8018aa6:	463a      	mov	r2, r7
 8018aa8:	2300      	movs	r3, #0
 8018aaa:	f7f8 fee3 	bl	8011874 <ucdr_init_buffer_origin_offset>
 8018aae:	2001      	movs	r0, #1
 8018ab0:	e7db      	b.n	8018a6a <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8018ab2:	f10a 0a01 	add.w	sl, sl, #1
 8018ab6:	fa1f fa8a 	uxth.w	sl, sl
 8018aba:	9307      	str	r3, [sp, #28]
 8018abc:	e73c      	b.n	8018938 <uxr_prepare_reliable_buffer_to_write+0xcc>
 8018abe:	8920      	ldrh	r0, [r4, #8]
 8018ac0:	fbb5 f3f0 	udiv	r3, r5, r0
 8018ac4:	fb00 5313 	mls	r3, r0, r3, r5
 8018ac8:	b29b      	uxth	r3, r3
 8018aca:	6862      	ldr	r2, [r4, #4]
 8018acc:	6821      	ldr	r1, [r4, #0]
 8018ace:	fbb2 f0f0 	udiv	r0, r2, r0
 8018ad2:	fb03 f300 	mul.w	r3, r3, r0
 8018ad6:	7b22      	ldrb	r2, [r4, #12]
 8018ad8:	9806      	ldr	r0, [sp, #24]
 8018ada:	3304      	adds	r3, #4
 8018adc:	4419      	add	r1, r3
 8018ade:	4442      	add	r2, r8
 8018ae0:	f841 2c04 	str.w	r2, [r1, #-4]
 8018ae4:	7b23      	ldrb	r3, [r4, #12]
 8018ae6:	9300      	str	r3, [sp, #0]
 8018ae8:	2300      	movs	r3, #0
 8018aea:	f7f8 fec3 	bl	8011874 <ucdr_init_buffer_origin_offset>
 8018aee:	81e5      	strh	r5, [r4, #14]
 8018af0:	2001      	movs	r0, #1
 8018af2:	e7ba      	b.n	8018a6a <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8018af4:	4628      	mov	r0, r5
 8018af6:	2101      	movs	r1, #1
 8018af8:	f000 f91c 	bl	8018d34 <uxr_seq_num_add>
 8018afc:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018b00:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018b04:	fbb3 f1fc 	udiv	r1, r3, ip
 8018b08:	fbb0 f3fc 	udiv	r3, r0, ip
 8018b0c:	fb0c 0313 	mls	r3, ip, r3, r0
 8018b10:	b29b      	uxth	r3, r3
 8018b12:	fb03 f301 	mul.w	r3, r3, r1
 8018b16:	3304      	adds	r3, #4
 8018b18:	18d3      	adds	r3, r2, r3
 8018b1a:	9305      	str	r3, [sp, #20]
 8018b1c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018b20:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8018b24:	9303      	str	r3, [sp, #12]
 8018b26:	4605      	mov	r5, r0
 8018b28:	e6d4      	b.n	80188d4 <uxr_prepare_reliable_buffer_to_write+0x68>
 8018b2a:	4660      	mov	r0, ip
 8018b2c:	e6ee      	b.n	801890c <uxr_prepare_reliable_buffer_to_write+0xa0>
 8018b2e:	bf00      	nop
 8018b30:	08018765 	.word	0x08018765

08018b34 <uxr_prepare_next_reliable_buffer_to_send>:
 8018b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b38:	4605      	mov	r5, r0
 8018b3a:	4688      	mov	r8, r1
 8018b3c:	8a00      	ldrh	r0, [r0, #16]
 8018b3e:	2101      	movs	r1, #1
 8018b40:	4617      	mov	r7, r2
 8018b42:	461e      	mov	r6, r3
 8018b44:	f000 f8f6 	bl	8018d34 <uxr_seq_num_add>
 8018b48:	8030      	strh	r0, [r6, #0]
 8018b4a:	892a      	ldrh	r2, [r5, #8]
 8018b4c:	fbb0 f3f2 	udiv	r3, r0, r2
 8018b50:	fb02 0413 	mls	r4, r2, r3, r0
 8018b54:	b2a4      	uxth	r4, r4
 8018b56:	686b      	ldr	r3, [r5, #4]
 8018b58:	fbb3 f2f2 	udiv	r2, r3, r2
 8018b5c:	682b      	ldr	r3, [r5, #0]
 8018b5e:	89e9      	ldrh	r1, [r5, #14]
 8018b60:	fb04 f402 	mul.w	r4, r4, r2
 8018b64:	3404      	adds	r4, #4
 8018b66:	4423      	add	r3, r4
 8018b68:	f8c8 3000 	str.w	r3, [r8]
 8018b6c:	682b      	ldr	r3, [r5, #0]
 8018b6e:	441c      	add	r4, r3
 8018b70:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018b74:	603b      	str	r3, [r7, #0]
 8018b76:	f000 f8e5 	bl	8018d44 <uxr_seq_num_cmp>
 8018b7a:	2800      	cmp	r0, #0
 8018b7c:	dd02      	ble.n	8018b84 <uxr_prepare_next_reliable_buffer_to_send+0x50>
 8018b7e:	2000      	movs	r0, #0
 8018b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b84:	683a      	ldr	r2, [r7, #0]
 8018b86:	7b2b      	ldrb	r3, [r5, #12]
 8018b88:	429a      	cmp	r2, r3
 8018b8a:	d9f8      	bls.n	8018b7e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018b8c:	8a69      	ldrh	r1, [r5, #18]
 8018b8e:	8a28      	ldrh	r0, [r5, #16]
 8018b90:	f000 f8d4 	bl	8018d3c <uxr_seq_num_sub>
 8018b94:	892b      	ldrh	r3, [r5, #8]
 8018b96:	4283      	cmp	r3, r0
 8018b98:	d0f1      	beq.n	8018b7e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018b9a:	8830      	ldrh	r0, [r6, #0]
 8018b9c:	89eb      	ldrh	r3, [r5, #14]
 8018b9e:	8228      	strh	r0, [r5, #16]
 8018ba0:	4298      	cmp	r0, r3
 8018ba2:	d002      	beq.n	8018baa <uxr_prepare_next_reliable_buffer_to_send+0x76>
 8018ba4:	2001      	movs	r0, #1
 8018ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018baa:	2101      	movs	r1, #1
 8018bac:	f000 f8c2 	bl	8018d34 <uxr_seq_num_add>
 8018bb0:	81e8      	strh	r0, [r5, #14]
 8018bb2:	2001      	movs	r0, #1
 8018bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018bb8 <uxr_update_output_stream_heartbeat_timestamp>:
 8018bb8:	b5d0      	push	{r4, r6, r7, lr}
 8018bba:	8a01      	ldrh	r1, [r0, #16]
 8018bbc:	4604      	mov	r4, r0
 8018bbe:	8a40      	ldrh	r0, [r0, #18]
 8018bc0:	4616      	mov	r6, r2
 8018bc2:	461f      	mov	r7, r3
 8018bc4:	f000 f8be 	bl	8018d44 <uxr_seq_num_cmp>
 8018bc8:	2800      	cmp	r0, #0
 8018bca:	db07      	blt.n	8018bdc <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8018bcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018bd0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018bd4:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8018bd8:	2000      	movs	r0, #0
 8018bda:	bdd0      	pop	{r4, r6, r7, pc}
 8018bdc:	f894 0020 	ldrb.w	r0, [r4, #32]
 8018be0:	b948      	cbnz	r0, 8018bf6 <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 8018be2:	2301      	movs	r3, #1
 8018be4:	f884 3020 	strb.w	r3, [r4, #32]
 8018be8:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 8018bec:	f147 0200 	adc.w	r2, r7, #0
 8018bf0:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8018bf4:	bdd0      	pop	{r4, r6, r7, pc}
 8018bf6:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8018bfa:	4296      	cmp	r6, r2
 8018bfc:	eb77 0303 	sbcs.w	r3, r7, r3
 8018c00:	bfa5      	ittet	ge
 8018c02:	3001      	addge	r0, #1
 8018c04:	f884 0020 	strbge.w	r0, [r4, #32]
 8018c08:	2000      	movlt	r0, #0
 8018c0a:	2001      	movge	r0, #1
 8018c0c:	e7ec      	b.n	8018be8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8018c0e:	bf00      	nop

08018c10 <uxr_begin_output_nack_buffer_it>:
 8018c10:	8a40      	ldrh	r0, [r0, #18]
 8018c12:	4770      	bx	lr

08018c14 <uxr_next_reliable_nack_buffer_to_send>:
 8018c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c18:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 8018c1c:	f1b9 0f00 	cmp.w	r9, #0
 8018c20:	d011      	beq.n	8018c46 <uxr_next_reliable_nack_buffer_to_send+0x32>
 8018c22:	4605      	mov	r5, r0
 8018c24:	8818      	ldrh	r0, [r3, #0]
 8018c26:	460f      	mov	r7, r1
 8018c28:	4690      	mov	r8, r2
 8018c2a:	461e      	mov	r6, r3
 8018c2c:	2101      	movs	r1, #1
 8018c2e:	f000 f881 	bl	8018d34 <uxr_seq_num_add>
 8018c32:	8030      	strh	r0, [r6, #0]
 8018c34:	8a29      	ldrh	r1, [r5, #16]
 8018c36:	f000 f885 	bl	8018d44 <uxr_seq_num_cmp>
 8018c3a:	2800      	cmp	r0, #0
 8018c3c:	dd06      	ble.n	8018c4c <uxr_next_reliable_nack_buffer_to_send+0x38>
 8018c3e:	f04f 0900 	mov.w	r9, #0
 8018c42:	f885 9021 	strb.w	r9, [r5, #33]	; 0x21
 8018c46:	4648      	mov	r0, r9
 8018c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c4c:	892a      	ldrh	r2, [r5, #8]
 8018c4e:	8830      	ldrh	r0, [r6, #0]
 8018c50:	fbb0 f4f2 	udiv	r4, r0, r2
 8018c54:	fb02 0414 	mls	r4, r2, r4, r0
 8018c58:	b2a4      	uxth	r4, r4
 8018c5a:	686b      	ldr	r3, [r5, #4]
 8018c5c:	fbb3 f2f2 	udiv	r2, r3, r2
 8018c60:	682b      	ldr	r3, [r5, #0]
 8018c62:	fb04 f402 	mul.w	r4, r4, r2
 8018c66:	3404      	adds	r4, #4
 8018c68:	4423      	add	r3, r4
 8018c6a:	603b      	str	r3, [r7, #0]
 8018c6c:	682b      	ldr	r3, [r5, #0]
 8018c6e:	441c      	add	r4, r3
 8018c70:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018c74:	f8c8 3000 	str.w	r3, [r8]
 8018c78:	7b2a      	ldrb	r2, [r5, #12]
 8018c7a:	429a      	cmp	r2, r3
 8018c7c:	d0d6      	beq.n	8018c2c <uxr_next_reliable_nack_buffer_to_send+0x18>
 8018c7e:	4648      	mov	r0, r9
 8018c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018c84 <uxr_process_acknack>:
 8018c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c86:	4604      	mov	r4, r0
 8018c88:	460e      	mov	r6, r1
 8018c8a:	4610      	mov	r0, r2
 8018c8c:	2101      	movs	r1, #1
 8018c8e:	f000 f855 	bl	8018d3c <uxr_seq_num_sub>
 8018c92:	8a61      	ldrh	r1, [r4, #18]
 8018c94:	f000 f852 	bl	8018d3c <uxr_seq_num_sub>
 8018c98:	b1c0      	cbz	r0, 8018ccc <uxr_process_acknack+0x48>
 8018c9a:	4605      	mov	r5, r0
 8018c9c:	2700      	movs	r7, #0
 8018c9e:	2101      	movs	r1, #1
 8018ca0:	8a60      	ldrh	r0, [r4, #18]
 8018ca2:	f000 f847 	bl	8018d34 <uxr_seq_num_add>
 8018ca6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018caa:	fbb0 f3fc 	udiv	r3, r0, ip
 8018cae:	e9d4 2100 	ldrd	r2, r1, [r4]
 8018cb2:	fb0c 0313 	mls	r3, ip, r3, r0
 8018cb6:	b29b      	uxth	r3, r3
 8018cb8:	fbb1 f1fc 	udiv	r1, r1, ip
 8018cbc:	3701      	adds	r7, #1
 8018cbe:	fb03 f301 	mul.w	r3, r3, r1
 8018cc2:	42bd      	cmp	r5, r7
 8018cc4:	7b21      	ldrb	r1, [r4, #12]
 8018cc6:	8260      	strh	r0, [r4, #18]
 8018cc8:	50d1      	str	r1, [r2, r3]
 8018cca:	d1e8      	bne.n	8018c9e <uxr_process_acknack+0x1a>
 8018ccc:	3e00      	subs	r6, #0
 8018cce:	f04f 0300 	mov.w	r3, #0
 8018cd2:	bf18      	it	ne
 8018cd4:	2601      	movne	r6, #1
 8018cd6:	f884 3020 	strb.w	r3, [r4, #32]
 8018cda:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8018cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018ce0 <uxr_is_output_up_to_date>:
 8018ce0:	8a01      	ldrh	r1, [r0, #16]
 8018ce2:	8a40      	ldrh	r0, [r0, #18]
 8018ce4:	b508      	push	{r3, lr}
 8018ce6:	f000 f82d 	bl	8018d44 <uxr_seq_num_cmp>
 8018cea:	fab0 f080 	clz	r0, r0
 8018cee:	0940      	lsrs	r0, r0, #5
 8018cf0:	bd08      	pop	{r3, pc}
 8018cf2:	bf00      	nop

08018cf4 <get_available_free_slots>:
 8018cf4:	8901      	ldrh	r1, [r0, #8]
 8018cf6:	b1d9      	cbz	r1, 8018d30 <get_available_free_slots+0x3c>
 8018cf8:	b4f0      	push	{r4, r5, r6, r7}
 8018cfa:	2400      	movs	r4, #0
 8018cfc:	6845      	ldr	r5, [r0, #4]
 8018cfe:	6807      	ldr	r7, [r0, #0]
 8018d00:	7b06      	ldrb	r6, [r0, #12]
 8018d02:	fbb5 f5f1 	udiv	r5, r5, r1
 8018d06:	4620      	mov	r0, r4
 8018d08:	4622      	mov	r2, r4
 8018d0a:	fbb2 f3f1 	udiv	r3, r2, r1
 8018d0e:	fb01 2313 	mls	r3, r1, r3, r2
 8018d12:	b29b      	uxth	r3, r3
 8018d14:	fb05 7303 	mla	r3, r5, r3, r7
 8018d18:	3401      	adds	r4, #1
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	429e      	cmp	r6, r3
 8018d1e:	bf08      	it	eq
 8018d20:	3001      	addeq	r0, #1
 8018d22:	b2a2      	uxth	r2, r4
 8018d24:	bf08      	it	eq
 8018d26:	b280      	uxtheq	r0, r0
 8018d28:	428a      	cmp	r2, r1
 8018d2a:	d3ee      	bcc.n	8018d0a <get_available_free_slots+0x16>
 8018d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8018d2e:	4770      	bx	lr
 8018d30:	4608      	mov	r0, r1
 8018d32:	4770      	bx	lr

08018d34 <uxr_seq_num_add>:
 8018d34:	4408      	add	r0, r1
 8018d36:	b280      	uxth	r0, r0
 8018d38:	4770      	bx	lr
 8018d3a:	bf00      	nop

08018d3c <uxr_seq_num_sub>:
 8018d3c:	1a40      	subs	r0, r0, r1
 8018d3e:	b280      	uxth	r0, r0
 8018d40:	4770      	bx	lr
 8018d42:	bf00      	nop

08018d44 <uxr_seq_num_cmp>:
 8018d44:	4288      	cmp	r0, r1
 8018d46:	d011      	beq.n	8018d6c <uxr_seq_num_cmp+0x28>
 8018d48:	d309      	bcc.n	8018d5e <uxr_seq_num_cmp+0x1a>
 8018d4a:	4288      	cmp	r0, r1
 8018d4c:	d910      	bls.n	8018d70 <uxr_seq_num_cmp+0x2c>
 8018d4e:	1a40      	subs	r0, r0, r1
 8018d50:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8018d54:	bfd4      	ite	le
 8018d56:	2001      	movle	r0, #1
 8018d58:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8018d5c:	4770      	bx	lr
 8018d5e:	1a0b      	subs	r3, r1, r0
 8018d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018d64:	daf1      	bge.n	8018d4a <uxr_seq_num_cmp+0x6>
 8018d66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018d6a:	4770      	bx	lr
 8018d6c:	2000      	movs	r0, #0
 8018d6e:	4770      	bx	lr
 8018d70:	2001      	movs	r0, #1
 8018d72:	4770      	bx	lr

08018d74 <uxr_init_framing_io>:
 8018d74:	2300      	movs	r3, #0
 8018d76:	7041      	strb	r1, [r0, #1]
 8018d78:	7003      	strb	r3, [r0, #0]
 8018d7a:	8583      	strh	r3, [r0, #44]	; 0x2c
 8018d7c:	4770      	bx	lr
 8018d7e:	bf00      	nop

08018d80 <uxr_write_framed_msg>:
 8018d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d84:	7845      	ldrb	r5, [r0, #1]
 8018d86:	b085      	sub	sp, #20
 8018d88:	4604      	mov	r4, r0
 8018d8a:	f1a5 0c7d 	sub.w	ip, r5, #125	; 0x7d
 8018d8e:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 8018d92:	f1bc 0f01 	cmp.w	ip, #1
 8018d96:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8018d9a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8018d9e:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
 8018da2:	460e      	mov	r6, r1
 8018da4:	4617      	mov	r7, r2
 8018da6:	469b      	mov	fp, r3
 8018da8:	f240 8116 	bls.w	8018fd8 <uxr_write_framed_msg+0x258>
 8018dac:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8018db0:	2302      	movs	r3, #2
 8018db2:	2a01      	cmp	r2, #1
 8018db4:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8018db8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8018dbc:	f240 8091 	bls.w	8018ee2 <uxr_write_framed_msg+0x162>
 8018dc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018dc2:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8018dc6:	b2d9      	uxtb	r1, r3
 8018dc8:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8018dcc:	2203      	movs	r2, #3
 8018dce:	2b01      	cmp	r3, #1
 8018dd0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018dd4:	f240 809a 	bls.w	8018f0c <uxr_write_framed_msg+0x18c>
 8018dd8:	18a3      	adds	r3, r4, r2
 8018dda:	3201      	adds	r2, #1
 8018ddc:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8018de0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018de4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018de6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8018dea:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8018dee:	2901      	cmp	r1, #1
 8018df0:	eb04 0102 	add.w	r1, r4, r2
 8018df4:	f240 8101 	bls.w	8018ffa <uxr_write_framed_msg+0x27a>
 8018df8:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8018dfc:	3201      	adds	r2, #1
 8018dfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e00:	b2d2      	uxtb	r2, r2
 8018e02:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	f000 8106 	beq.w	8019018 <uxr_write_framed_msg+0x298>
 8018e0c:	f04f 0a00 	mov.w	sl, #0
 8018e10:	46d1      	mov	r9, sl
 8018e12:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8018e16:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8018e1a:	2901      	cmp	r1, #1
 8018e1c:	f240 80a3 	bls.w	8018f66 <uxr_write_framed_msg+0x1e6>
 8018e20:	2a29      	cmp	r2, #41	; 0x29
 8018e22:	d87f      	bhi.n	8018f24 <uxr_write_framed_msg+0x1a4>
 8018e24:	18a1      	adds	r1, r4, r2
 8018e26:	3201      	adds	r2, #1
 8018e28:	b2d2      	uxtb	r2, r2
 8018e2a:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8018e2e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018e32:	ea8a 0303 	eor.w	r3, sl, r3
 8018e36:	4984      	ldr	r1, [pc, #528]	; (8019048 <uxr_write_framed_msg+0x2c8>)
 8018e38:	b2db      	uxtb	r3, r3
 8018e3a:	f109 0901 	add.w	r9, r9, #1
 8018e3e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8018e42:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 8018e46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e48:	454b      	cmp	r3, r9
 8018e4a:	d8e2      	bhi.n	8018e12 <uxr_write_framed_msg+0x92>
 8018e4c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8018e50:	fa5f f98a 	uxtb.w	r9, sl
 8018e54:	9301      	str	r3, [sp, #4]
 8018e56:	f04f 0b00 	mov.w	fp, #0
 8018e5a:	f88d 900c 	strb.w	r9, [sp, #12]
 8018e5e:	f88d 300d 	strb.w	r3, [sp, #13]
 8018e62:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 8018e66:	fa5f f18a 	uxtb.w	r1, sl
 8018e6a:	2901      	cmp	r1, #1
 8018e6c:	d920      	bls.n	8018eb0 <uxr_write_framed_msg+0x130>
 8018e6e:	2a29      	cmp	r2, #41	; 0x29
 8018e70:	f240 808b 	bls.w	8018f8a <uxr_write_framed_msg+0x20a>
 8018e74:	2500      	movs	r5, #0
 8018e76:	e000      	b.n	8018e7a <uxr_write_framed_msg+0xfa>
 8018e78:	b160      	cbz	r0, 8018e94 <uxr_write_framed_msg+0x114>
 8018e7a:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8018e7e:	1b52      	subs	r2, r2, r5
 8018e80:	4421      	add	r1, r4
 8018e82:	4643      	mov	r3, r8
 8018e84:	4638      	mov	r0, r7
 8018e86:	47b0      	blx	r6
 8018e88:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8018e8c:	4405      	add	r5, r0
 8018e8e:	4295      	cmp	r5, r2
 8018e90:	d3f2      	bcc.n	8018e78 <uxr_write_framed_msg+0xf8>
 8018e92:	d003      	beq.n	8018e9c <uxr_write_framed_msg+0x11c>
 8018e94:	2000      	movs	r0, #0
 8018e96:	b005      	add	sp, #20
 8018e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e9c:	fa5f f18a 	uxtb.w	r1, sl
 8018ea0:	f04f 0300 	mov.w	r3, #0
 8018ea4:	2901      	cmp	r1, #1
 8018ea6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8018eaa:	f04f 0200 	mov.w	r2, #0
 8018eae:	d86c      	bhi.n	8018f8a <uxr_write_framed_msg+0x20a>
 8018eb0:	1c51      	adds	r1, r2, #1
 8018eb2:	b2c9      	uxtb	r1, r1
 8018eb4:	2929      	cmp	r1, #41	; 0x29
 8018eb6:	d8dd      	bhi.n	8018e74 <uxr_write_framed_msg+0xf4>
 8018eb8:	18a0      	adds	r0, r4, r2
 8018eba:	3202      	adds	r2, #2
 8018ebc:	f089 0920 	eor.w	r9, r9, #32
 8018ec0:	b2d2      	uxtb	r2, r2
 8018ec2:	4659      	mov	r1, fp
 8018ec4:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8018ec8:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 8018ecc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8018ed0:	f04f 0b01 	mov.w	fp, #1
 8018ed4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018ed8:	2900      	cmp	r1, #0
 8018eda:	d162      	bne.n	8018fa2 <uxr_write_framed_msg+0x222>
 8018edc:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018ee0:	e7bf      	b.n	8018e62 <uxr_write_framed_msg+0xe2>
 8018ee2:	2204      	movs	r2, #4
 8018ee4:	2503      	movs	r5, #3
 8018ee6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8018ee8:	4423      	add	r3, r4
 8018eea:	b2c9      	uxtb	r1, r1
 8018eec:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8018ef0:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 8018ef4:	4425      	add	r5, r4
 8018ef6:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8018efa:	f080 0020 	eor.w	r0, r0, #32
 8018efe:	2b01      	cmp	r3, #1
 8018f00:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 8018f04:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018f08:	f63f af66 	bhi.w	8018dd8 <uxr_write_framed_msg+0x58>
 8018f0c:	18a3      	adds	r3, r4, r2
 8018f0e:	f081 0120 	eor.w	r1, r1, #32
 8018f12:	3202      	adds	r2, #2
 8018f14:	207d      	movs	r0, #125	; 0x7d
 8018f16:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 8018f1a:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
 8018f1e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018f22:	e75f      	b.n	8018de4 <uxr_write_framed_msg+0x64>
 8018f24:	2500      	movs	r5, #0
 8018f26:	e001      	b.n	8018f2c <uxr_write_framed_msg+0x1ac>
 8018f28:	2800      	cmp	r0, #0
 8018f2a:	d0b3      	beq.n	8018e94 <uxr_write_framed_msg+0x114>
 8018f2c:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8018f30:	1b52      	subs	r2, r2, r5
 8018f32:	4421      	add	r1, r4
 8018f34:	4643      	mov	r3, r8
 8018f36:	4638      	mov	r0, r7
 8018f38:	47b0      	blx	r6
 8018f3a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8018f3e:	4405      	add	r5, r0
 8018f40:	4295      	cmp	r5, r2
 8018f42:	d3f1      	bcc.n	8018f28 <uxr_write_framed_msg+0x1a8>
 8018f44:	d1a6      	bne.n	8018e94 <uxr_write_framed_msg+0x114>
 8018f46:	f04f 0300 	mov.w	r3, #0
 8018f4a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8018f4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018f50:	454b      	cmp	r3, r9
 8018f52:	d971      	bls.n	8019038 <uxr_write_framed_msg+0x2b8>
 8018f54:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8018f58:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8018f5c:	2901      	cmp	r1, #1
 8018f5e:	f04f 0200 	mov.w	r2, #0
 8018f62:	f63f af5d 	bhi.w	8018e20 <uxr_write_framed_msg+0xa0>
 8018f66:	1c51      	adds	r1, r2, #1
 8018f68:	b2c9      	uxtb	r1, r1
 8018f6a:	2929      	cmp	r1, #41	; 0x29
 8018f6c:	d8da      	bhi.n	8018f24 <uxr_write_framed_msg+0x1a4>
 8018f6e:	18a0      	adds	r0, r4, r2
 8018f70:	3202      	adds	r2, #2
 8018f72:	b2d2      	uxtb	r2, r2
 8018f74:	f083 0120 	eor.w	r1, r3, #32
 8018f78:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8018f7c:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8018f80:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 8018f84:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018f88:	e753      	b.n	8018e32 <uxr_write_framed_msg+0xb2>
 8018f8a:	18a0      	adds	r0, r4, r2
 8018f8c:	3201      	adds	r2, #1
 8018f8e:	b2d2      	uxtb	r2, r2
 8018f90:	4659      	mov	r1, fp
 8018f92:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 8018f96:	f04f 0b01 	mov.w	fp, #1
 8018f9a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018f9e:	2900      	cmp	r1, #0
 8018fa0:	d09c      	beq.n	8018edc <uxr_write_framed_msg+0x15c>
 8018fa2:	2500      	movs	r5, #0
 8018fa4:	e002      	b.n	8018fac <uxr_write_framed_msg+0x22c>
 8018fa6:	2800      	cmp	r0, #0
 8018fa8:	f43f af74 	beq.w	8018e94 <uxr_write_framed_msg+0x114>
 8018fac:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8018fb0:	1b52      	subs	r2, r2, r5
 8018fb2:	4421      	add	r1, r4
 8018fb4:	4643      	mov	r3, r8
 8018fb6:	4638      	mov	r0, r7
 8018fb8:	47b0      	blx	r6
 8018fba:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8018fbe:	4405      	add	r5, r0
 8018fc0:	4295      	cmp	r5, r2
 8018fc2:	d3f0      	bcc.n	8018fa6 <uxr_write_framed_msg+0x226>
 8018fc4:	f47f af66 	bne.w	8018e94 <uxr_write_framed_msg+0x114>
 8018fc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018fca:	2300      	movs	r3, #0
 8018fcc:	b290      	uxth	r0, r2
 8018fce:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8018fd2:	b005      	add	sp, #20
 8018fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fd8:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8018fdc:	f085 0520 	eor.w	r5, r5, #32
 8018fe0:	2303      	movs	r3, #3
 8018fe2:	217d      	movs	r1, #125	; 0x7d
 8018fe4:	2a01      	cmp	r2, #1
 8018fe6:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
 8018fea:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8018fee:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8018ff2:	d814      	bhi.n	801901e <uxr_write_framed_msg+0x29e>
 8018ff4:	2205      	movs	r2, #5
 8018ff6:	2504      	movs	r5, #4
 8018ff8:	e775      	b.n	8018ee6 <uxr_write_framed_msg+0x166>
 8018ffa:	f083 0320 	eor.w	r3, r3, #32
 8018ffe:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
 8019002:	3202      	adds	r2, #2
 8019004:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019006:	b2d2      	uxtb	r2, r2
 8019008:	207d      	movs	r0, #125	; 0x7d
 801900a:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 801900e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019012:	2b00      	cmp	r3, #0
 8019014:	f47f aefa 	bne.w	8018e0c <uxr_write_framed_msg+0x8c>
 8019018:	9301      	str	r3, [sp, #4]
 801901a:	4699      	mov	r9, r3
 801901c:	e71b      	b.n	8018e56 <uxr_write_framed_msg+0xd6>
 801901e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019020:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8019024:	b2d9      	uxtb	r1, r3
 8019026:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 801902a:	2204      	movs	r2, #4
 801902c:	2b01      	cmp	r3, #1
 801902e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019032:	f63f aed1 	bhi.w	8018dd8 <uxr_write_framed_msg+0x58>
 8019036:	e769      	b.n	8018f0c <uxr_write_framed_msg+0x18c>
 8019038:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801903c:	fa5f f98a 	uxtb.w	r9, sl
 8019040:	9301      	str	r3, [sp, #4]
 8019042:	2200      	movs	r2, #0
 8019044:	e707      	b.n	8018e56 <uxr_write_framed_msg+0xd6>
 8019046:	bf00      	nop
 8019048:	0801bed0 	.word	0x0801bed0

0801904c <uxr_framing_read_transport>:
 801904c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019050:	4604      	mov	r4, r0
 8019052:	b083      	sub	sp, #12
 8019054:	461f      	mov	r7, r3
 8019056:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 801905a:	4689      	mov	r9, r1
 801905c:	4692      	mov	sl, r2
 801905e:	f7fa fa07 	bl	8013470 <uxr_millis>
 8019062:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019066:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 801906a:	42b3      	cmp	r3, r6
 801906c:	4680      	mov	r8, r0
 801906e:	d05f      	beq.n	8019130 <uxr_framing_read_transport+0xe4>
 8019070:	d81b      	bhi.n	80190aa <uxr_framing_read_transport+0x5e>
 8019072:	1e75      	subs	r5, r6, #1
 8019074:	1aed      	subs	r5, r5, r3
 8019076:	b2ed      	uxtb	r5, r5
 8019078:	2600      	movs	r6, #0
 801907a:	455d      	cmp	r5, fp
 801907c:	d81e      	bhi.n	80190bc <uxr_framing_read_transport+0x70>
 801907e:	19ab      	adds	r3, r5, r6
 8019080:	455b      	cmp	r3, fp
 8019082:	bf84      	itt	hi
 8019084:	ebab 0605 	subhi.w	r6, fp, r5
 8019088:	b2f6      	uxtbhi	r6, r6
 801908a:	b9e5      	cbnz	r5, 80190c6 <uxr_framing_read_transport+0x7a>
 801908c:	f04f 0b00 	mov.w	fp, #0
 8019090:	f7fa f9ee 	bl	8013470 <uxr_millis>
 8019094:	683b      	ldr	r3, [r7, #0]
 8019096:	eba0 0008 	sub.w	r0, r0, r8
 801909a:	1a1b      	subs	r3, r3, r0
 801909c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80190a0:	4658      	mov	r0, fp
 80190a2:	603b      	str	r3, [r7, #0]
 80190a4:	b003      	add	sp, #12
 80190a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190aa:	2e00      	cmp	r6, #0
 80190ac:	d048      	beq.n	8019140 <uxr_framing_read_transport+0xf4>
 80190ae:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 80190b2:	b2ed      	uxtb	r5, r5
 80190b4:	3e01      	subs	r6, #1
 80190b6:	455d      	cmp	r5, fp
 80190b8:	b2f6      	uxtb	r6, r6
 80190ba:	d9e0      	bls.n	801907e <uxr_framing_read_transport+0x32>
 80190bc:	fa5f f58b 	uxtb.w	r5, fp
 80190c0:	2600      	movs	r6, #0
 80190c2:	2d00      	cmp	r5, #0
 80190c4:	d0e2      	beq.n	801908c <uxr_framing_read_transport+0x40>
 80190c6:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80190ca:	3102      	adds	r1, #2
 80190cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80190ce:	9300      	str	r3, [sp, #0]
 80190d0:	683b      	ldr	r3, [r7, #0]
 80190d2:	4421      	add	r1, r4
 80190d4:	462a      	mov	r2, r5
 80190d6:	4650      	mov	r0, sl
 80190d8:	47c8      	blx	r9
 80190da:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80190de:	4a1b      	ldr	r2, [pc, #108]	; (801914c <uxr_framing_read_transport+0x100>)
 80190e0:	4403      	add	r3, r0
 80190e2:	0859      	lsrs	r1, r3, #1
 80190e4:	fba2 2101 	umull	r2, r1, r2, r1
 80190e8:	0889      	lsrs	r1, r1, #2
 80190ea:	222a      	movs	r2, #42	; 0x2a
 80190ec:	fb02 3111 	mls	r1, r2, r1, r3
 80190f0:	4683      	mov	fp, r0
 80190f2:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 80190f6:	2800      	cmp	r0, #0
 80190f8:	d0c8      	beq.n	801908c <uxr_framing_read_transport+0x40>
 80190fa:	42a8      	cmp	r0, r5
 80190fc:	d1c8      	bne.n	8019090 <uxr_framing_read_transport+0x44>
 80190fe:	b31e      	cbz	r6, 8019148 <uxr_framing_read_transport+0xfc>
 8019100:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019102:	9300      	str	r3, [sp, #0]
 8019104:	3102      	adds	r1, #2
 8019106:	4421      	add	r1, r4
 8019108:	4632      	mov	r2, r6
 801910a:	2300      	movs	r3, #0
 801910c:	4650      	mov	r0, sl
 801910e:	47c8      	blx	r9
 8019110:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019114:	490d      	ldr	r1, [pc, #52]	; (801914c <uxr_framing_read_transport+0x100>)
 8019116:	181a      	adds	r2, r3, r0
 8019118:	0853      	lsrs	r3, r2, #1
 801911a:	fba1 1303 	umull	r1, r3, r1, r3
 801911e:	089b      	lsrs	r3, r3, #2
 8019120:	212a      	movs	r1, #42	; 0x2a
 8019122:	fb01 2313 	mls	r3, r1, r3, r2
 8019126:	eb00 0b05 	add.w	fp, r0, r5
 801912a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801912e:	e7af      	b.n	8019090 <uxr_framing_read_transport+0x44>
 8019130:	2600      	movs	r6, #0
 8019132:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8019136:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8019138:	d9c0      	bls.n	80190bc <uxr_framing_read_transport+0x70>
 801913a:	2102      	movs	r1, #2
 801913c:	2529      	movs	r5, #41	; 0x29
 801913e:	e7c5      	b.n	80190cc <uxr_framing_read_transport+0x80>
 8019140:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8019144:	b2ed      	uxtb	r5, r5
 8019146:	e798      	b.n	801907a <uxr_framing_read_transport+0x2e>
 8019148:	46ab      	mov	fp, r5
 801914a:	e7a1      	b.n	8019090 <uxr_framing_read_transport+0x44>
 801914c:	30c30c31 	.word	0x30c30c31

08019150 <uxr_read_framed_msg>:
 8019150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019154:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 8019158:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 801915c:	42ae      	cmp	r6, r5
 801915e:	b083      	sub	sp, #12
 8019160:	4604      	mov	r4, r0
 8019162:	461f      	mov	r7, r3
 8019164:	4689      	mov	r9, r1
 8019166:	4692      	mov	sl, r2
 8019168:	f000 817d 	beq.w	8019466 <uxr_read_framed_msg+0x316>
 801916c:	7823      	ldrb	r3, [r4, #0]
 801916e:	4ecc      	ldr	r6, [pc, #816]	; (80194a0 <uxr_read_framed_msg+0x350>)
 8019170:	f8df 8330 	ldr.w	r8, [pc, #816]	; 80194a4 <uxr_read_framed_msg+0x354>
 8019174:	2b07      	cmp	r3, #7
 8019176:	d8fd      	bhi.n	8019174 <uxr_read_framed_msg+0x24>
 8019178:	e8df f013 	tbh	[pc, r3, lsl #1]
 801917c:	00f40113 	.word	0x00f40113
 8019180:	00b700d4 	.word	0x00b700d4
 8019184:	004d008e 	.word	0x004d008e
 8019188:	00080030 	.word	0x00080030
 801918c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019190:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019194:	4298      	cmp	r0, r3
 8019196:	f000 8141 	beq.w	801941c <uxr_read_framed_msg+0x2cc>
 801919a:	18e2      	adds	r2, r4, r3
 801919c:	7891      	ldrb	r1, [r2, #2]
 801919e:	297d      	cmp	r1, #125	; 0x7d
 80191a0:	f000 81a2 	beq.w	80194e8 <uxr_read_framed_msg+0x398>
 80191a4:	3301      	adds	r3, #1
 80191a6:	085a      	lsrs	r2, r3, #1
 80191a8:	fba6 0202 	umull	r0, r2, r6, r2
 80191ac:	0892      	lsrs	r2, r2, #2
 80191ae:	202a      	movs	r0, #42	; 0x2a
 80191b0:	fb00 3312 	mls	r3, r0, r2, r3
 80191b4:	297e      	cmp	r1, #126	; 0x7e
 80191b6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80191ba:	f000 8251 	beq.w	8019660 <uxr_read_framed_msg+0x510>
 80191be:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80191c0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80191c2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80191c6:	b29b      	uxth	r3, r3
 80191c8:	2100      	movs	r1, #0
 80191ca:	429a      	cmp	r2, r3
 80191cc:	86a3      	strh	r3, [r4, #52]	; 0x34
 80191ce:	7021      	strb	r1, [r4, #0]
 80191d0:	f000 8182 	beq.w	80194d8 <uxr_read_framed_msg+0x388>
 80191d4:	2000      	movs	r0, #0
 80191d6:	b003      	add	sp, #12
 80191d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191dc:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80191e0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80191e4:	4298      	cmp	r0, r3
 80191e6:	f000 8128 	beq.w	801943a <uxr_read_framed_msg+0x2ea>
 80191ea:	18e2      	adds	r2, r4, r3
 80191ec:	7891      	ldrb	r1, [r2, #2]
 80191ee:	297d      	cmp	r1, #125	; 0x7d
 80191f0:	f000 8196 	beq.w	8019520 <uxr_read_framed_msg+0x3d0>
 80191f4:	3301      	adds	r3, #1
 80191f6:	085a      	lsrs	r2, r3, #1
 80191f8:	fba6 0202 	umull	r0, r2, r6, r2
 80191fc:	0892      	lsrs	r2, r2, #2
 80191fe:	202a      	movs	r0, #42	; 0x2a
 8019200:	fb00 3312 	mls	r3, r0, r2, r3
 8019204:	297e      	cmp	r1, #126	; 0x7e
 8019206:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801920a:	f000 8219 	beq.w	8019640 <uxr_read_framed_msg+0x4f0>
 801920e:	2307      	movs	r3, #7
 8019210:	86a1      	strh	r1, [r4, #52]	; 0x34
 8019212:	7023      	strb	r3, [r4, #0]
 8019214:	e7ae      	b.n	8019174 <uxr_read_framed_msg+0x24>
 8019216:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019218:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 801921a:	429d      	cmp	r5, r3
 801921c:	d937      	bls.n	801928e <uxr_read_framed_msg+0x13e>
 801921e:	ee07 9a90 	vmov	s15, r9
 8019222:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8019226:	e01e      	b.n	8019266 <uxr_read_framed_msg+0x116>
 8019228:	f89e e002 	ldrb.w	lr, [lr, #2]
 801922c:	f1be 0f7d 	cmp.w	lr, #125	; 0x7d
 8019230:	f000 80d2 	beq.w	80193d8 <uxr_read_framed_msg+0x288>
 8019234:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8019238:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801923c:	f000 8214 	beq.w	8019668 <uxr_read_framed_msg+0x518>
 8019240:	f807 e003 	strb.w	lr, [r7, r3]
 8019244:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8019246:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019248:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 801924a:	ea80 010e 	eor.w	r1, r0, lr
 801924e:	b2c9      	uxtb	r1, r1
 8019250:	3301      	adds	r3, #1
 8019252:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 8019256:	b29b      	uxth	r3, r3
 8019258:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 801925c:	42ab      	cmp	r3, r5
 801925e:	86e2      	strh	r2, [r4, #54]	; 0x36
 8019260:	8663      	strh	r3, [r4, #50]	; 0x32
 8019262:	f080 8121 	bcs.w	80194a8 <uxr_read_framed_msg+0x358>
 8019266:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 801926a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801926e:	f101 0b01 	add.w	fp, r1, #1
 8019272:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8019276:	fba6 9202 	umull	r9, r2, r6, r2
 801927a:	0892      	lsrs	r2, r2, #2
 801927c:	4288      	cmp	r0, r1
 801927e:	eb04 0e01 	add.w	lr, r4, r1
 8019282:	fb0c b212 	mls	r2, ip, r2, fp
 8019286:	d1cf      	bne.n	8019228 <uxr_read_framed_msg+0xd8>
 8019288:	ee17 9a90 	vmov	r9, s15
 801928c:	429d      	cmp	r5, r3
 801928e:	f040 8112 	bne.w	80194b6 <uxr_read_framed_msg+0x366>
 8019292:	2306      	movs	r3, #6
 8019294:	7023      	strb	r3, [r4, #0]
 8019296:	e76d      	b.n	8019174 <uxr_read_framed_msg+0x24>
 8019298:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801929c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80192a0:	4298      	cmp	r0, r3
 80192a2:	f000 80bb 	beq.w	801941c <uxr_read_framed_msg+0x2cc>
 80192a6:	18e2      	adds	r2, r4, r3
 80192a8:	7891      	ldrb	r1, [r2, #2]
 80192aa:	297d      	cmp	r1, #125	; 0x7d
 80192ac:	f000 8153 	beq.w	8019556 <uxr_read_framed_msg+0x406>
 80192b0:	3301      	adds	r3, #1
 80192b2:	085a      	lsrs	r2, r3, #1
 80192b4:	fba6 0202 	umull	r0, r2, r6, r2
 80192b8:	0892      	lsrs	r2, r2, #2
 80192ba:	202a      	movs	r0, #42	; 0x2a
 80192bc:	fb00 3212 	mls	r2, r0, r2, r3
 80192c0:	297e      	cmp	r1, #126	; 0x7e
 80192c2:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80192c6:	f000 81cb 	beq.w	8019660 <uxr_read_framed_msg+0x510>
 80192ca:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80192cc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80192d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80192d2:	b29b      	uxth	r3, r3
 80192d4:	2000      	movs	r0, #0
 80192d6:	428b      	cmp	r3, r1
 80192d8:	8623      	strh	r3, [r4, #48]	; 0x30
 80192da:	8660      	strh	r0, [r4, #50]	; 0x32
 80192dc:	86e0      	strh	r0, [r4, #54]	; 0x36
 80192de:	f240 80db 	bls.w	8019498 <uxr_read_framed_msg+0x348>
 80192e2:	7020      	strb	r0, [r4, #0]
 80192e4:	b003      	add	sp, #12
 80192e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192ea:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80192ee:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80192f2:	4298      	cmp	r0, r3
 80192f4:	f000 80a1 	beq.w	801943a <uxr_read_framed_msg+0x2ea>
 80192f8:	18e2      	adds	r2, r4, r3
 80192fa:	7891      	ldrb	r1, [r2, #2]
 80192fc:	297d      	cmp	r1, #125	; 0x7d
 80192fe:	f000 8167 	beq.w	80195d0 <uxr_read_framed_msg+0x480>
 8019302:	3301      	adds	r3, #1
 8019304:	085a      	lsrs	r2, r3, #1
 8019306:	fba6 0202 	umull	r0, r2, r6, r2
 801930a:	0892      	lsrs	r2, r2, #2
 801930c:	202a      	movs	r0, #42	; 0x2a
 801930e:	fb00 3312 	mls	r3, r0, r2, r3
 8019312:	297e      	cmp	r1, #126	; 0x7e
 8019314:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019318:	f000 8192 	beq.w	8019640 <uxr_read_framed_msg+0x4f0>
 801931c:	2304      	movs	r3, #4
 801931e:	8621      	strh	r1, [r4, #48]	; 0x30
 8019320:	7023      	strb	r3, [r4, #0]
 8019322:	e727      	b.n	8019174 <uxr_read_framed_msg+0x24>
 8019324:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019328:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801932c:	4290      	cmp	r0, r2
 801932e:	f000 80b1 	beq.w	8019494 <uxr_read_framed_msg+0x344>
 8019332:	18a3      	adds	r3, r4, r2
 8019334:	7899      	ldrb	r1, [r3, #2]
 8019336:	297d      	cmp	r1, #125	; 0x7d
 8019338:	f000 8166 	beq.w	8019608 <uxr_read_framed_msg+0x4b8>
 801933c:	3201      	adds	r2, #1
 801933e:	0850      	lsrs	r0, r2, #1
 8019340:	fba6 3000 	umull	r3, r0, r6, r0
 8019344:	0880      	lsrs	r0, r0, #2
 8019346:	232a      	movs	r3, #42	; 0x2a
 8019348:	fb03 2210 	mls	r2, r3, r0, r2
 801934c:	297e      	cmp	r1, #126	; 0x7e
 801934e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8019352:	f000 8187 	beq.w	8019664 <uxr_read_framed_msg+0x514>
 8019356:	7863      	ldrb	r3, [r4, #1]
 8019358:	428b      	cmp	r3, r1
 801935a:	bf0c      	ite	eq
 801935c:	2303      	moveq	r3, #3
 801935e:	2300      	movne	r3, #0
 8019360:	7023      	strb	r3, [r4, #0]
 8019362:	e707      	b.n	8019174 <uxr_read_framed_msg+0x24>
 8019364:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019368:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801936c:	2200      	movs	r2, #0
 801936e:	4299      	cmp	r1, r3
 8019370:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8019374:	d063      	beq.n	801943e <uxr_read_framed_msg+0x2ee>
 8019376:	18e2      	adds	r2, r4, r3
 8019378:	7892      	ldrb	r2, [r2, #2]
 801937a:	2a7d      	cmp	r2, #125	; 0x7d
 801937c:	f000 8107 	beq.w	801958e <uxr_read_framed_msg+0x43e>
 8019380:	1c59      	adds	r1, r3, #1
 8019382:	084b      	lsrs	r3, r1, #1
 8019384:	fba6 0303 	umull	r0, r3, r6, r3
 8019388:	089b      	lsrs	r3, r3, #2
 801938a:	202a      	movs	r0, #42	; 0x2a
 801938c:	fb00 1313 	mls	r3, r0, r3, r1
 8019390:	2a7e      	cmp	r2, #126	; 0x7e
 8019392:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8019396:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801939a:	d050      	beq.n	801943e <uxr_read_framed_msg+0x2ee>
 801939c:	2302      	movs	r3, #2
 801939e:	7023      	strb	r3, [r4, #0]
 80193a0:	e6e8      	b.n	8019174 <uxr_read_framed_msg+0x24>
 80193a2:	f894 e02c 	ldrb.w	lr, [r4, #44]	; 0x2c
 80193a6:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80193aa:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80193ae:	1c51      	adds	r1, r2, #1
 80193b0:	084b      	lsrs	r3, r1, #1
 80193b2:	fba6 5303 	umull	r5, r3, r6, r3
 80193b6:	089b      	lsrs	r3, r3, #2
 80193b8:	fb0c 1313 	mls	r3, ip, r3, r1
 80193bc:	4596      	cmp	lr, r2
 80193be:	eb04 0002 	add.w	r0, r4, r2
 80193c2:	b2da      	uxtb	r2, r3
 80193c4:	f43f af06 	beq.w	80191d4 <uxr_read_framed_msg+0x84>
 80193c8:	7883      	ldrb	r3, [r0, #2]
 80193ca:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80193ce:	2b7e      	cmp	r3, #126	; 0x7e
 80193d0:	d1ed      	bne.n	80193ae <uxr_read_framed_msg+0x25e>
 80193d2:	2301      	movs	r3, #1
 80193d4:	7023      	strb	r3, [r4, #0]
 80193d6:	e6cd      	b.n	8019174 <uxr_read_framed_msg+0x24>
 80193d8:	f101 0b01 	add.w	fp, r1, #1
 80193dc:	ea4f 025b 	mov.w	r2, fp, lsr #1
 80193e0:	fba6 e202 	umull	lr, r2, r6, r2
 80193e4:	3102      	adds	r1, #2
 80193e6:	0892      	lsrs	r2, r2, #2
 80193e8:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 80193ec:	fb0c b212 	mls	r2, ip, r2, fp
 80193f0:	fba6 9e0e 	umull	r9, lr, r6, lr
 80193f4:	eb04 0b02 	add.w	fp, r4, r2
 80193f8:	b2d2      	uxtb	r2, r2
 80193fa:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 80193fe:	4290      	cmp	r0, r2
 8019400:	fb0c 111e 	mls	r1, ip, lr, r1
 8019404:	f43f af40 	beq.w	8019288 <uxr_read_framed_msg+0x138>
 8019408:	f89b e002 	ldrb.w	lr, [fp, #2]
 801940c:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8019410:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8019414:	d036      	beq.n	8019484 <uxr_read_framed_msg+0x334>
 8019416:	f08e 0e20 	eor.w	lr, lr, #32
 801941a:	e711      	b.n	8019240 <uxr_read_framed_msg+0xf0>
 801941c:	2301      	movs	r3, #1
 801941e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019420:	4649      	mov	r1, r9
 8019422:	e9cd 2300 	strd	r2, r3, [sp]
 8019426:	4620      	mov	r0, r4
 8019428:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801942a:	4652      	mov	r2, sl
 801942c:	f7ff fe0e 	bl	801904c <uxr_framing_read_transport>
 8019430:	2800      	cmp	r0, #0
 8019432:	f43f aecf 	beq.w	80191d4 <uxr_read_framed_msg+0x84>
 8019436:	7823      	ldrb	r3, [r4, #0]
 8019438:	e69c      	b.n	8019174 <uxr_read_framed_msg+0x24>
 801943a:	2302      	movs	r3, #2
 801943c:	e7ef      	b.n	801941e <uxr_read_framed_msg+0x2ce>
 801943e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019440:	2304      	movs	r3, #4
 8019442:	e9cd 2300 	strd	r2, r3, [sp]
 8019446:	4649      	mov	r1, r9
 8019448:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801944a:	4652      	mov	r2, sl
 801944c:	4620      	mov	r0, r4
 801944e:	f7ff fdfd 	bl	801904c <uxr_framing_read_transport>
 8019452:	2800      	cmp	r0, #0
 8019454:	d1ef      	bne.n	8019436 <uxr_read_framed_msg+0x2e6>
 8019456:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 801945a:	387e      	subs	r0, #126	; 0x7e
 801945c:	bf18      	it	ne
 801945e:	2001      	movne	r0, #1
 8019460:	2800      	cmp	r0, #0
 8019462:	d0e8      	beq.n	8019436 <uxr_read_framed_msg+0x2e6>
 8019464:	e6b6      	b.n	80191d4 <uxr_read_framed_msg+0x84>
 8019466:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8019468:	2305      	movs	r3, #5
 801946a:	e9cd 5300 	strd	r5, r3, [sp]
 801946e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019470:	f7ff fdec 	bl	801904c <uxr_framing_read_transport>
 8019474:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8019478:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801947c:	429a      	cmp	r2, r3
 801947e:	f43f aea9 	beq.w	80191d4 <uxr_read_framed_msg+0x84>
 8019482:	e673      	b.n	801916c <uxr_read_framed_msg+0x1c>
 8019484:	429d      	cmp	r5, r3
 8019486:	ee17 9a90 	vmov	r9, s15
 801948a:	f43f af02 	beq.w	8019292 <uxr_read_framed_msg+0x142>
 801948e:	2301      	movs	r3, #1
 8019490:	7023      	strb	r3, [r4, #0]
 8019492:	e66f      	b.n	8019174 <uxr_read_framed_msg+0x24>
 8019494:	2303      	movs	r3, #3
 8019496:	e7c2      	b.n	801941e <uxr_read_framed_msg+0x2ce>
 8019498:	2305      	movs	r3, #5
 801949a:	7023      	strb	r3, [r4, #0]
 801949c:	e66a      	b.n	8019174 <uxr_read_framed_msg+0x24>
 801949e:	bf00      	nop
 80194a0:	30c30c31 	.word	0x30c30c31
 80194a4:	0801bed0 	.word	0x0801bed0
 80194a8:	ee17 9a90 	vmov	r9, s15
 80194ac:	f43f aef1 	beq.w	8019292 <uxr_read_framed_msg+0x142>
 80194b0:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 80194b4:	d08d      	beq.n	80193d2 <uxr_read_framed_msg+0x282>
 80194b6:	1aeb      	subs	r3, r5, r3
 80194b8:	3302      	adds	r3, #2
 80194ba:	9301      	str	r3, [sp, #4]
 80194bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80194be:	9300      	str	r3, [sp, #0]
 80194c0:	4652      	mov	r2, sl
 80194c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80194c4:	4649      	mov	r1, r9
 80194c6:	4620      	mov	r0, r4
 80194c8:	f7ff fdc0 	bl	801904c <uxr_framing_read_transport>
 80194cc:	fab0 f080 	clz	r0, r0
 80194d0:	0940      	lsrs	r0, r0, #5
 80194d2:	2800      	cmp	r0, #0
 80194d4:	d0af      	beq.n	8019436 <uxr_read_framed_msg+0x2e6>
 80194d6:	e67d      	b.n	80191d4 <uxr_read_framed_msg+0x84>
 80194d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80194da:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80194de:	7013      	strb	r3, [r2, #0]
 80194e0:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 80194e2:	b003      	add	sp, #12
 80194e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194e8:	1c59      	adds	r1, r3, #1
 80194ea:	084a      	lsrs	r2, r1, #1
 80194ec:	fba6 5202 	umull	r5, r2, r6, r2
 80194f0:	0892      	lsrs	r2, r2, #2
 80194f2:	252a      	movs	r5, #42	; 0x2a
 80194f4:	fb05 1212 	mls	r2, r5, r2, r1
 80194f8:	b2d1      	uxtb	r1, r2
 80194fa:	4288      	cmp	r0, r1
 80194fc:	d08e      	beq.n	801941c <uxr_read_framed_msg+0x2cc>
 80194fe:	3302      	adds	r3, #2
 8019500:	4422      	add	r2, r4
 8019502:	0858      	lsrs	r0, r3, #1
 8019504:	fba6 1000 	umull	r1, r0, r6, r0
 8019508:	7891      	ldrb	r1, [r2, #2]
 801950a:	0882      	lsrs	r2, r0, #2
 801950c:	fb05 3312 	mls	r3, r5, r2, r3
 8019510:	297e      	cmp	r1, #126	; 0x7e
 8019512:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019516:	f000 80a3 	beq.w	8019660 <uxr_read_framed_msg+0x510>
 801951a:	f081 0120 	eor.w	r1, r1, #32
 801951e:	e64e      	b.n	80191be <uxr_read_framed_msg+0x6e>
 8019520:	1c59      	adds	r1, r3, #1
 8019522:	084a      	lsrs	r2, r1, #1
 8019524:	fba6 5202 	umull	r5, r2, r6, r2
 8019528:	0892      	lsrs	r2, r2, #2
 801952a:	252a      	movs	r5, #42	; 0x2a
 801952c:	fb05 1212 	mls	r2, r5, r2, r1
 8019530:	b2d1      	uxtb	r1, r2
 8019532:	4288      	cmp	r0, r1
 8019534:	d081      	beq.n	801943a <uxr_read_framed_msg+0x2ea>
 8019536:	3302      	adds	r3, #2
 8019538:	4422      	add	r2, r4
 801953a:	0858      	lsrs	r0, r3, #1
 801953c:	fba6 1000 	umull	r1, r0, r6, r0
 8019540:	7891      	ldrb	r1, [r2, #2]
 8019542:	0882      	lsrs	r2, r0, #2
 8019544:	fb05 3312 	mls	r3, r5, r2, r3
 8019548:	297e      	cmp	r1, #126	; 0x7e
 801954a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801954e:	d077      	beq.n	8019640 <uxr_read_framed_msg+0x4f0>
 8019550:	f081 0120 	eor.w	r1, r1, #32
 8019554:	e65b      	b.n	801920e <uxr_read_framed_msg+0xbe>
 8019556:	1c59      	adds	r1, r3, #1
 8019558:	084a      	lsrs	r2, r1, #1
 801955a:	fba6 5202 	umull	r5, r2, r6, r2
 801955e:	0892      	lsrs	r2, r2, #2
 8019560:	252a      	movs	r5, #42	; 0x2a
 8019562:	fb05 1212 	mls	r2, r5, r2, r1
 8019566:	b2d1      	uxtb	r1, r2
 8019568:	4288      	cmp	r0, r1
 801956a:	f43f af57 	beq.w	801941c <uxr_read_framed_msg+0x2cc>
 801956e:	3302      	adds	r3, #2
 8019570:	4422      	add	r2, r4
 8019572:	0858      	lsrs	r0, r3, #1
 8019574:	fba6 1000 	umull	r1, r0, r6, r0
 8019578:	7891      	ldrb	r1, [r2, #2]
 801957a:	0882      	lsrs	r2, r0, #2
 801957c:	fb05 3312 	mls	r3, r5, r2, r3
 8019580:	297e      	cmp	r1, #126	; 0x7e
 8019582:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019586:	d06b      	beq.n	8019660 <uxr_read_framed_msg+0x510>
 8019588:	f081 0120 	eor.w	r1, r1, #32
 801958c:	e69d      	b.n	80192ca <uxr_read_framed_msg+0x17a>
 801958e:	1c5d      	adds	r5, r3, #1
 8019590:	086a      	lsrs	r2, r5, #1
 8019592:	fba6 0202 	umull	r0, r2, r6, r2
 8019596:	0892      	lsrs	r2, r2, #2
 8019598:	202a      	movs	r0, #42	; 0x2a
 801959a:	fb00 5212 	mls	r2, r0, r2, r5
 801959e:	b2d5      	uxtb	r5, r2
 80195a0:	42a9      	cmp	r1, r5
 80195a2:	f43f af4c 	beq.w	801943e <uxr_read_framed_msg+0x2ee>
 80195a6:	3302      	adds	r3, #2
 80195a8:	4422      	add	r2, r4
 80195aa:	0859      	lsrs	r1, r3, #1
 80195ac:	fba6 5101 	umull	r5, r1, r6, r1
 80195b0:	7895      	ldrb	r5, [r2, #2]
 80195b2:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 80195b6:	088a      	lsrs	r2, r1, #2
 80195b8:	fb00 3312 	mls	r3, r0, r2, r3
 80195bc:	2d7e      	cmp	r5, #126	; 0x7e
 80195be:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80195c2:	f43f af3c 	beq.w	801943e <uxr_read_framed_msg+0x2ee>
 80195c6:	f085 0520 	eor.w	r5, r5, #32
 80195ca:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 80195ce:	e6e5      	b.n	801939c <uxr_read_framed_msg+0x24c>
 80195d0:	1c59      	adds	r1, r3, #1
 80195d2:	084a      	lsrs	r2, r1, #1
 80195d4:	fba6 5202 	umull	r5, r2, r6, r2
 80195d8:	0892      	lsrs	r2, r2, #2
 80195da:	252a      	movs	r5, #42	; 0x2a
 80195dc:	fb05 1212 	mls	r2, r5, r2, r1
 80195e0:	b2d1      	uxtb	r1, r2
 80195e2:	4288      	cmp	r0, r1
 80195e4:	f43f af29 	beq.w	801943a <uxr_read_framed_msg+0x2ea>
 80195e8:	3302      	adds	r3, #2
 80195ea:	4422      	add	r2, r4
 80195ec:	0858      	lsrs	r0, r3, #1
 80195ee:	fba6 1000 	umull	r1, r0, r6, r0
 80195f2:	7891      	ldrb	r1, [r2, #2]
 80195f4:	0882      	lsrs	r2, r0, #2
 80195f6:	fb05 3312 	mls	r3, r5, r2, r3
 80195fa:	297e      	cmp	r1, #126	; 0x7e
 80195fc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019600:	d01e      	beq.n	8019640 <uxr_read_framed_msg+0x4f0>
 8019602:	f081 0120 	eor.w	r1, r1, #32
 8019606:	e689      	b.n	801931c <uxr_read_framed_msg+0x1cc>
 8019608:	1c51      	adds	r1, r2, #1
 801960a:	084b      	lsrs	r3, r1, #1
 801960c:	fba6 5303 	umull	r5, r3, r6, r3
 8019610:	089b      	lsrs	r3, r3, #2
 8019612:	252a      	movs	r5, #42	; 0x2a
 8019614:	fb05 1313 	mls	r3, r5, r3, r1
 8019618:	b2d9      	uxtb	r1, r3
 801961a:	4288      	cmp	r0, r1
 801961c:	f43f af3a 	beq.w	8019494 <uxr_read_framed_msg+0x344>
 8019620:	3202      	adds	r2, #2
 8019622:	4423      	add	r3, r4
 8019624:	0850      	lsrs	r0, r2, #1
 8019626:	789b      	ldrb	r3, [r3, #2]
 8019628:	fba6 1000 	umull	r1, r0, r6, r0
 801962c:	0880      	lsrs	r0, r0, #2
 801962e:	fb05 2210 	mls	r2, r5, r0, r2
 8019632:	2b7e      	cmp	r3, #126	; 0x7e
 8019634:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8019638:	d014      	beq.n	8019664 <uxr_read_framed_msg+0x514>
 801963a:	f083 0120 	eor.w	r1, r3, #32
 801963e:	e68a      	b.n	8019356 <uxr_read_framed_msg+0x206>
 8019640:	2302      	movs	r3, #2
 8019642:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019644:	4649      	mov	r1, r9
 8019646:	e9cd 2300 	strd	r2, r3, [sp]
 801964a:	4620      	mov	r0, r4
 801964c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801964e:	4652      	mov	r2, sl
 8019650:	f7ff fcfc 	bl	801904c <uxr_framing_read_transport>
 8019654:	2800      	cmp	r0, #0
 8019656:	f47f aeee 	bne.w	8019436 <uxr_read_framed_msg+0x2e6>
 801965a:	2301      	movs	r3, #1
 801965c:	7023      	strb	r3, [r4, #0]
 801965e:	e589      	b.n	8019174 <uxr_read_framed_msg+0x24>
 8019660:	2301      	movs	r3, #1
 8019662:	e7ee      	b.n	8019642 <uxr_read_framed_msg+0x4f2>
 8019664:	2303      	movs	r3, #3
 8019666:	e7ec      	b.n	8019642 <uxr_read_framed_msg+0x4f2>
 8019668:	ee17 9a90 	vmov	r9, s15
 801966c:	e6b1      	b.n	80193d2 <uxr_read_framed_msg+0x282>
 801966e:	bf00      	nop

08019670 <rcl_get_default_domain_id>:
 8019670:	b530      	push	{r4, r5, lr}
 8019672:	b083      	sub	sp, #12
 8019674:	2300      	movs	r3, #0
 8019676:	9300      	str	r3, [sp, #0]
 8019678:	b1d0      	cbz	r0, 80196b0 <rcl_get_default_domain_id+0x40>
 801967a:	4604      	mov	r4, r0
 801967c:	4669      	mov	r1, sp
 801967e:	4815      	ldr	r0, [pc, #84]	; (80196d4 <rcl_get_default_domain_id+0x64>)
 8019680:	f7fd fa6a 	bl	8016b58 <rcutils_get_env>
 8019684:	4602      	mov	r2, r0
 8019686:	b110      	cbz	r0, 801968e <rcl_get_default_domain_id+0x1e>
 8019688:	2001      	movs	r0, #1
 801968a:	b003      	add	sp, #12
 801968c:	bd30      	pop	{r4, r5, pc}
 801968e:	9b00      	ldr	r3, [sp, #0]
 8019690:	b18b      	cbz	r3, 80196b6 <rcl_get_default_domain_id+0x46>
 8019692:	7818      	ldrb	r0, [r3, #0]
 8019694:	2800      	cmp	r0, #0
 8019696:	d0f8      	beq.n	801968a <rcl_get_default_domain_id+0x1a>
 8019698:	4618      	mov	r0, r3
 801969a:	a901      	add	r1, sp, #4
 801969c:	9201      	str	r2, [sp, #4]
 801969e:	f000 fc07 	bl	8019eb0 <strtoul>
 80196a2:	4605      	mov	r5, r0
 80196a4:	b150      	cbz	r0, 80196bc <rcl_get_default_domain_id+0x4c>
 80196a6:	1c43      	adds	r3, r0, #1
 80196a8:	d00d      	beq.n	80196c6 <rcl_get_default_domain_id+0x56>
 80196aa:	6025      	str	r5, [r4, #0]
 80196ac:	2000      	movs	r0, #0
 80196ae:	e7ec      	b.n	801968a <rcl_get_default_domain_id+0x1a>
 80196b0:	200b      	movs	r0, #11
 80196b2:	b003      	add	sp, #12
 80196b4:	bd30      	pop	{r4, r5, pc}
 80196b6:	4618      	mov	r0, r3
 80196b8:	b003      	add	sp, #12
 80196ba:	bd30      	pop	{r4, r5, pc}
 80196bc:	9b01      	ldr	r3, [sp, #4]
 80196be:	781b      	ldrb	r3, [r3, #0]
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d0f2      	beq.n	80196aa <rcl_get_default_domain_id+0x3a>
 80196c4:	e7e0      	b.n	8019688 <rcl_get_default_domain_id+0x18>
 80196c6:	f000 ffc9 	bl	801a65c <__errno>
 80196ca:	6803      	ldr	r3, [r0, #0]
 80196cc:	2b22      	cmp	r3, #34	; 0x22
 80196ce:	d1ec      	bne.n	80196aa <rcl_get_default_domain_id+0x3a>
 80196d0:	e7da      	b.n	8019688 <rcl_get_default_domain_id+0x18>
 80196d2:	bf00      	nop
 80196d4:	0801c0d0 	.word	0x0801c0d0

080196d8 <rcl_get_zero_initialized_guard_condition>:
 80196d8:	4a03      	ldr	r2, [pc, #12]	; (80196e8 <rcl_get_zero_initialized_guard_condition+0x10>)
 80196da:	4603      	mov	r3, r0
 80196dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80196e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80196e4:	4618      	mov	r0, r3
 80196e6:	4770      	bx	lr
 80196e8:	0801c0e0 	.word	0x0801c0e0

080196ec <rcl_guard_condition_init_from_rmw>:
 80196ec:	b082      	sub	sp, #8
 80196ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196f2:	b086      	sub	sp, #24
 80196f4:	ac0c      	add	r4, sp, #48	; 0x30
 80196f6:	4684      	mov	ip, r0
 80196f8:	f844 3f04 	str.w	r3, [r4, #4]!
 80196fc:	460f      	mov	r7, r1
 80196fe:	4690      	mov	r8, r2
 8019700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019702:	ad01      	add	r5, sp, #4
 8019704:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019706:	6823      	ldr	r3, [r4, #0]
 8019708:	602b      	str	r3, [r5, #0]
 801970a:	a801      	add	r0, sp, #4
 801970c:	4664      	mov	r4, ip
 801970e:	f7f5 ffed 	bl	800f6ec <rcutils_allocator_is_valid>
 8019712:	b328      	cbz	r0, 8019760 <rcl_guard_condition_init_from_rmw+0x74>
 8019714:	b324      	cbz	r4, 8019760 <rcl_guard_condition_init_from_rmw+0x74>
 8019716:	6866      	ldr	r6, [r4, #4]
 8019718:	b9e6      	cbnz	r6, 8019754 <rcl_guard_condition_init_from_rmw+0x68>
 801971a:	f1b8 0f00 	cmp.w	r8, #0
 801971e:	d01f      	beq.n	8019760 <rcl_guard_condition_init_from_rmw+0x74>
 8019720:	4640      	mov	r0, r8
 8019722:	f7fb f92f 	bl	8014984 <rcl_context_is_valid>
 8019726:	b308      	cbz	r0, 801976c <rcl_guard_condition_init_from_rmw+0x80>
 8019728:	9b01      	ldr	r3, [sp, #4]
 801972a:	9905      	ldr	r1, [sp, #20]
 801972c:	201c      	movs	r0, #28
 801972e:	4798      	blx	r3
 8019730:	4605      	mov	r5, r0
 8019732:	6060      	str	r0, [r4, #4]
 8019734:	b340      	cbz	r0, 8019788 <rcl_guard_condition_init_from_rmw+0x9c>
 8019736:	b1df      	cbz	r7, 8019770 <rcl_guard_condition_init_from_rmw+0x84>
 8019738:	6007      	str	r7, [r0, #0]
 801973a:	7106      	strb	r6, [r0, #4]
 801973c:	ac01      	add	r4, sp, #4
 801973e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019740:	3508      	adds	r5, #8
 8019742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019744:	6823      	ldr	r3, [r4, #0]
 8019746:	602b      	str	r3, [r5, #0]
 8019748:	2000      	movs	r0, #0
 801974a:	b006      	add	sp, #24
 801974c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019750:	b002      	add	sp, #8
 8019752:	4770      	bx	lr
 8019754:	2064      	movs	r0, #100	; 0x64
 8019756:	b006      	add	sp, #24
 8019758:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801975c:	b002      	add	sp, #8
 801975e:	4770      	bx	lr
 8019760:	200b      	movs	r0, #11
 8019762:	b006      	add	sp, #24
 8019764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019768:	b002      	add	sp, #8
 801976a:	4770      	bx	lr
 801976c:	2065      	movs	r0, #101	; 0x65
 801976e:	e7f2      	b.n	8019756 <rcl_guard_condition_init_from_rmw+0x6a>
 8019770:	f8d8 0000 	ldr.w	r0, [r8]
 8019774:	3028      	adds	r0, #40	; 0x28
 8019776:	f000 f93b 	bl	80199f0 <rmw_create_guard_condition>
 801977a:	6028      	str	r0, [r5, #0]
 801977c:	6865      	ldr	r5, [r4, #4]
 801977e:	682e      	ldr	r6, [r5, #0]
 8019780:	b126      	cbz	r6, 801978c <rcl_guard_condition_init_from_rmw+0xa0>
 8019782:	2301      	movs	r3, #1
 8019784:	712b      	strb	r3, [r5, #4]
 8019786:	e7d9      	b.n	801973c <rcl_guard_condition_init_from_rmw+0x50>
 8019788:	200a      	movs	r0, #10
 801978a:	e7e4      	b.n	8019756 <rcl_guard_condition_init_from_rmw+0x6a>
 801978c:	4628      	mov	r0, r5
 801978e:	9b02      	ldr	r3, [sp, #8]
 8019790:	9905      	ldr	r1, [sp, #20]
 8019792:	4798      	blx	r3
 8019794:	6066      	str	r6, [r4, #4]
 8019796:	2001      	movs	r0, #1
 8019798:	e7dd      	b.n	8019756 <rcl_guard_condition_init_from_rmw+0x6a>
 801979a:	bf00      	nop

0801979c <rcl_guard_condition_fini>:
 801979c:	b570      	push	{r4, r5, r6, lr}
 801979e:	b082      	sub	sp, #8
 80197a0:	b1f0      	cbz	r0, 80197e0 <rcl_guard_condition_fini+0x44>
 80197a2:	4604      	mov	r4, r0
 80197a4:	6840      	ldr	r0, [r0, #4]
 80197a6:	b158      	cbz	r0, 80197c0 <rcl_guard_condition_fini+0x24>
 80197a8:	6803      	ldr	r3, [r0, #0]
 80197aa:	68c6      	ldr	r6, [r0, #12]
 80197ac:	6981      	ldr	r1, [r0, #24]
 80197ae:	b15b      	cbz	r3, 80197c8 <rcl_guard_condition_fini+0x2c>
 80197b0:	7905      	ldrb	r5, [r0, #4]
 80197b2:	b95d      	cbnz	r5, 80197cc <rcl_guard_condition_fini+0x30>
 80197b4:	47b0      	blx	r6
 80197b6:	2300      	movs	r3, #0
 80197b8:	4628      	mov	r0, r5
 80197ba:	6063      	str	r3, [r4, #4]
 80197bc:	b002      	add	sp, #8
 80197be:	bd70      	pop	{r4, r5, r6, pc}
 80197c0:	4605      	mov	r5, r0
 80197c2:	4628      	mov	r0, r5
 80197c4:	b002      	add	sp, #8
 80197c6:	bd70      	pop	{r4, r5, r6, pc}
 80197c8:	461d      	mov	r5, r3
 80197ca:	e7f3      	b.n	80197b4 <rcl_guard_condition_fini+0x18>
 80197cc:	4618      	mov	r0, r3
 80197ce:	9101      	str	r1, [sp, #4]
 80197d0:	f000 f922 	bl	8019a18 <rmw_destroy_guard_condition>
 80197d4:	1e05      	subs	r5, r0, #0
 80197d6:	9901      	ldr	r1, [sp, #4]
 80197d8:	6860      	ldr	r0, [r4, #4]
 80197da:	bf18      	it	ne
 80197dc:	2501      	movne	r5, #1
 80197de:	e7e9      	b.n	80197b4 <rcl_guard_condition_fini+0x18>
 80197e0:	250b      	movs	r5, #11
 80197e2:	4628      	mov	r0, r5
 80197e4:	b002      	add	sp, #8
 80197e6:	bd70      	pop	{r4, r5, r6, pc}

080197e8 <rcl_guard_condition_get_default_options>:
 80197e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80197ea:	b087      	sub	sp, #28
 80197ec:	4607      	mov	r7, r0
 80197ee:	466c      	mov	r4, sp
 80197f0:	4668      	mov	r0, sp
 80197f2:	f7f5 ff6d 	bl	800f6d0 <rcutils_get_default_allocator>
 80197f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80197f8:	4d07      	ldr	r5, [pc, #28]	; (8019818 <rcl_guard_condition_get_default_options+0x30>)
 80197fa:	f8d4 c000 	ldr.w	ip, [r4]
 80197fe:	462e      	mov	r6, r5
 8019800:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8019802:	462c      	mov	r4, r5
 8019804:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019806:	463c      	mov	r4, r7
 8019808:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801980a:	4638      	mov	r0, r7
 801980c:	f8c6 c000 	str.w	ip, [r6]
 8019810:	f8c4 c000 	str.w	ip, [r4]
 8019814:	b007      	add	sp, #28
 8019816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019818:	20009d4c 	.word	0x20009d4c

0801981c <rcl_guard_condition_get_rmw_handle>:
 801981c:	b110      	cbz	r0, 8019824 <rcl_guard_condition_get_rmw_handle+0x8>
 801981e:	6840      	ldr	r0, [r0, #4]
 8019820:	b100      	cbz	r0, 8019824 <rcl_guard_condition_get_rmw_handle+0x8>
 8019822:	6800      	ldr	r0, [r0, #0]
 8019824:	4770      	bx	lr
 8019826:	bf00      	nop

08019828 <on_status>:
 8019828:	b082      	sub	sp, #8
 801982a:	b002      	add	sp, #8
 801982c:	4770      	bx	lr
 801982e:	bf00      	nop

08019830 <on_topic>:
 8019830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019834:	4a21      	ldr	r2, [pc, #132]	; (80198bc <on_topic+0x8c>)
 8019836:	b094      	sub	sp, #80	; 0x50
 8019838:	6812      	ldr	r2, [r2, #0]
 801983a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801983c:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8019840:	9113      	str	r1, [sp, #76]	; 0x4c
 8019842:	9312      	str	r3, [sp, #72]	; 0x48
 8019844:	b3ba      	cbz	r2, 80198b6 <on_topic+0x86>
 8019846:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801984a:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801984e:	e001      	b.n	8019854 <on_topic+0x24>
 8019850:	6892      	ldr	r2, [r2, #8]
 8019852:	b382      	cbz	r2, 80198b6 <on_topic+0x86>
 8019854:	68d4      	ldr	r4, [r2, #12]
 8019856:	8aa3      	ldrh	r3, [r4, #20]
 8019858:	428b      	cmp	r3, r1
 801985a:	d1f9      	bne.n	8019850 <on_topic+0x20>
 801985c:	7da3      	ldrb	r3, [r4, #22]
 801985e:	4283      	cmp	r3, r0
 8019860:	d1f6      	bne.n	8019850 <on_topic+0x20>
 8019862:	2248      	movs	r2, #72	; 0x48
 8019864:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8019868:	4668      	mov	r0, sp
 801986a:	f000 ff2c 	bl	801a6c6 <memcpy>
 801986e:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8019872:	4620      	mov	r0, r4
 8019874:	f7f6 fe7e 	bl	8010574 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019878:	4607      	mov	r7, r0
 801987a:	b1e0      	cbz	r0, 80198b6 <on_topic+0x86>
 801987c:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8019880:	462a      	mov	r2, r5
 8019882:	4630      	mov	r0, r6
 8019884:	f108 0110 	add.w	r1, r8, #16
 8019888:	f7fe fb9a 	bl	8017fc0 <ucdr_deserialize_array_uint8_t>
 801988c:	b930      	cbnz	r0, 801989c <on_topic+0x6c>
 801988e:	480c      	ldr	r0, [pc, #48]	; (80198c0 <on_topic+0x90>)
 8019890:	4639      	mov	r1, r7
 8019892:	b014      	add	sp, #80	; 0x50
 8019894:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019898:	f7fd bb82 	b.w	8016fa0 <put_memory>
 801989c:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 80198a0:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 80198a4:	f7fe fab6 	bl	8017e14 <rmw_uros_epoch_nanos>
 80198a8:	f608 0218 	addw	r2, r8, #2072	; 0x818
 80198ac:	2305      	movs	r3, #5
 80198ae:	e9c2 0100 	strd	r0, r1, [r2]
 80198b2:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 80198b6:	b014      	add	sp, #80	; 0x50
 80198b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198bc:	2000d154 	.word	0x2000d154
 80198c0:	20009ee8 	.word	0x20009ee8

080198c4 <on_request>:
 80198c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80198c8:	4822      	ldr	r0, [pc, #136]	; (8019954 <on_request+0x90>)
 80198ca:	b095      	sub	sp, #84	; 0x54
 80198cc:	9113      	str	r1, [sp, #76]	; 0x4c
 80198ce:	6801      	ldr	r1, [r0, #0]
 80198d0:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80198d2:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 80198d6:	2900      	cmp	r1, #0
 80198d8:	d039      	beq.n	801994e <on_request+0x8a>
 80198da:	461d      	mov	r5, r3
 80198dc:	e001      	b.n	80198e2 <on_request+0x1e>
 80198de:	6889      	ldr	r1, [r1, #8]
 80198e0:	b3a9      	cbz	r1, 801994e <on_request+0x8a>
 80198e2:	68cc      	ldr	r4, [r1, #12]
 80198e4:	8b20      	ldrh	r0, [r4, #24]
 80198e6:	4290      	cmp	r0, r2
 80198e8:	d1f9      	bne.n	80198de <on_request+0x1a>
 80198ea:	2248      	movs	r2, #72	; 0x48
 80198ec:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80198f0:	4668      	mov	r0, sp
 80198f2:	f000 fee8 	bl	801a6c6 <memcpy>
 80198f6:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80198fa:	4620      	mov	r0, r4
 80198fc:	f7f6 fe3a 	bl	8010574 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019900:	4680      	mov	r8, r0
 8019902:	b320      	cbz	r0, 801994e <on_request+0x8a>
 8019904:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8019908:	4632      	mov	r2, r6
 801990a:	4638      	mov	r0, r7
 801990c:	f109 0110 	add.w	r1, r9, #16
 8019910:	f7fe fb56 	bl	8017fc0 <ucdr_deserialize_array_uint8_t>
 8019914:	b930      	cbnz	r0, 8019924 <on_request+0x60>
 8019916:	4810      	ldr	r0, [pc, #64]	; (8019958 <on_request+0x94>)
 8019918:	4641      	mov	r1, r8
 801991a:	b015      	add	sp, #84	; 0x54
 801991c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019920:	f7fd bb3e 	b.w	8016fa0 <put_memory>
 8019924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019926:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 801992a:	f609 0428 	addw	r4, r9, #2088	; 0x828
 801992e:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 8019932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019934:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019938:	e884 0003 	stmia.w	r4, {r0, r1}
 801993c:	f7fe fa6a 	bl	8017e14 <rmw_uros_epoch_nanos>
 8019940:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8019944:	2303      	movs	r3, #3
 8019946:	e9c2 0100 	strd	r0, r1, [r2]
 801994a:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 801994e:	b015      	add	sp, #84	; 0x54
 8019950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019954:	2000d144 	.word	0x2000d144
 8019958:	20009ee8 	.word	0x20009ee8

0801995c <on_reply>:
 801995c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019960:	4821      	ldr	r0, [pc, #132]	; (80199e8 <on_reply+0x8c>)
 8019962:	b095      	sub	sp, #84	; 0x54
 8019964:	9113      	str	r1, [sp, #76]	; 0x4c
 8019966:	6801      	ldr	r1, [r0, #0]
 8019968:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801996a:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 801996e:	b3b9      	cbz	r1, 80199e0 <on_reply+0x84>
 8019970:	461d      	mov	r5, r3
 8019972:	e001      	b.n	8019978 <on_reply+0x1c>
 8019974:	6889      	ldr	r1, [r1, #8]
 8019976:	b399      	cbz	r1, 80199e0 <on_reply+0x84>
 8019978:	68cc      	ldr	r4, [r1, #12]
 801997a:	8b20      	ldrh	r0, [r4, #24]
 801997c:	4290      	cmp	r0, r2
 801997e:	d1f9      	bne.n	8019974 <on_reply+0x18>
 8019980:	2248      	movs	r2, #72	; 0x48
 8019982:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8019986:	4668      	mov	r0, sp
 8019988:	f000 fe9d 	bl	801a6c6 <memcpy>
 801998c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8019990:	4620      	mov	r0, r4
 8019992:	f7f6 fdef 	bl	8010574 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019996:	4680      	mov	r8, r0
 8019998:	b310      	cbz	r0, 80199e0 <on_reply+0x84>
 801999a:	f8d0 900c 	ldr.w	r9, [r0, #12]
 801999e:	4632      	mov	r2, r6
 80199a0:	4638      	mov	r0, r7
 80199a2:	f109 0110 	add.w	r1, r9, #16
 80199a6:	f7fe fb0b 	bl	8017fc0 <ucdr_deserialize_array_uint8_t>
 80199aa:	b930      	cbnz	r0, 80199ba <on_reply+0x5e>
 80199ac:	480f      	ldr	r0, [pc, #60]	; (80199ec <on_reply+0x90>)
 80199ae:	4641      	mov	r1, r8
 80199b0:	b015      	add	sp, #84	; 0x54
 80199b2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80199b6:	f7fd baf3 	b.w	8016fa0 <put_memory>
 80199ba:	b2aa      	uxth	r2, r5
 80199bc:	2300      	movs	r3, #0
 80199be:	f609 0128 	addw	r1, r9, #2088	; 0x828
 80199c2:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 80199c6:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 80199ca:	e9c1 2300 	strd	r2, r3, [r1]
 80199ce:	f7fe fa21 	bl	8017e14 <rmw_uros_epoch_nanos>
 80199d2:	f609 0218 	addw	r2, r9, #2072	; 0x818
 80199d6:	2304      	movs	r3, #4
 80199d8:	e9c2 0100 	strd	r0, r1, [r2]
 80199dc:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 80199e0:	b015      	add	sp, #84	; 0x54
 80199e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80199e6:	bf00      	nop
 80199e8:	2000a778 	.word	0x2000a778
 80199ec:	20009ee8 	.word	0x20009ee8

080199f0 <rmw_create_guard_condition>:
 80199f0:	b538      	push	{r3, r4, r5, lr}
 80199f2:	4605      	mov	r5, r0
 80199f4:	4807      	ldr	r0, [pc, #28]	; (8019a14 <rmw_create_guard_condition+0x24>)
 80199f6:	f7fd fac3 	bl	8016f80 <get_memory>
 80199fa:	b148      	cbz	r0, 8019a10 <rmw_create_guard_condition+0x20>
 80199fc:	68c4      	ldr	r4, [r0, #12]
 80199fe:	2300      	movs	r3, #0
 8019a00:	61e5      	str	r5, [r4, #28]
 8019a02:	7423      	strb	r3, [r4, #16]
 8019a04:	f7fd fb24 	bl	8017050 <rmw_get_implementation_identifier>
 8019a08:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8019a0c:	f104 0014 	add.w	r0, r4, #20
 8019a10:	bd38      	pop	{r3, r4, r5, pc}
 8019a12:	bf00      	nop
 8019a14:	2000d070 	.word	0x2000d070

08019a18 <rmw_destroy_guard_condition>:
 8019a18:	b508      	push	{r3, lr}
 8019a1a:	4b08      	ldr	r3, [pc, #32]	; (8019a3c <rmw_destroy_guard_condition+0x24>)
 8019a1c:	6819      	ldr	r1, [r3, #0]
 8019a1e:	b911      	cbnz	r1, 8019a26 <rmw_destroy_guard_condition+0xe>
 8019a20:	e00a      	b.n	8019a38 <rmw_destroy_guard_condition+0x20>
 8019a22:	6889      	ldr	r1, [r1, #8]
 8019a24:	b141      	cbz	r1, 8019a38 <rmw_destroy_guard_condition+0x20>
 8019a26:	68cb      	ldr	r3, [r1, #12]
 8019a28:	3314      	adds	r3, #20
 8019a2a:	4298      	cmp	r0, r3
 8019a2c:	d1f9      	bne.n	8019a22 <rmw_destroy_guard_condition+0xa>
 8019a2e:	4803      	ldr	r0, [pc, #12]	; (8019a3c <rmw_destroy_guard_condition+0x24>)
 8019a30:	f7fd fab6 	bl	8016fa0 <put_memory>
 8019a34:	2000      	movs	r0, #0
 8019a36:	bd08      	pop	{r3, pc}
 8019a38:	2001      	movs	r0, #1
 8019a3a:	bd08      	pop	{r3, pc}
 8019a3c:	2000d070 	.word	0x2000d070

08019a40 <calloc>:
 8019a40:	4b02      	ldr	r3, [pc, #8]	; (8019a4c <calloc+0xc>)
 8019a42:	460a      	mov	r2, r1
 8019a44:	4601      	mov	r1, r0
 8019a46:	6818      	ldr	r0, [r3, #0]
 8019a48:	f000 b802 	b.w	8019a50 <_calloc_r>
 8019a4c:	200000e8 	.word	0x200000e8

08019a50 <_calloc_r>:
 8019a50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019a52:	fba1 2402 	umull	r2, r4, r1, r2
 8019a56:	b94c      	cbnz	r4, 8019a6c <_calloc_r+0x1c>
 8019a58:	4611      	mov	r1, r2
 8019a5a:	9201      	str	r2, [sp, #4]
 8019a5c:	f000 f886 	bl	8019b6c <_malloc_r>
 8019a60:	9a01      	ldr	r2, [sp, #4]
 8019a62:	4605      	mov	r5, r0
 8019a64:	b930      	cbnz	r0, 8019a74 <_calloc_r+0x24>
 8019a66:	4628      	mov	r0, r5
 8019a68:	b003      	add	sp, #12
 8019a6a:	bd30      	pop	{r4, r5, pc}
 8019a6c:	220c      	movs	r2, #12
 8019a6e:	6002      	str	r2, [r0, #0]
 8019a70:	2500      	movs	r5, #0
 8019a72:	e7f8      	b.n	8019a66 <_calloc_r+0x16>
 8019a74:	4621      	mov	r1, r4
 8019a76:	f000 fd07 	bl	801a488 <memset>
 8019a7a:	e7f4      	b.n	8019a66 <_calloc_r+0x16>

08019a7c <getenv>:
 8019a7c:	b507      	push	{r0, r1, r2, lr}
 8019a7e:	4b04      	ldr	r3, [pc, #16]	; (8019a90 <getenv+0x14>)
 8019a80:	4601      	mov	r1, r0
 8019a82:	aa01      	add	r2, sp, #4
 8019a84:	6818      	ldr	r0, [r3, #0]
 8019a86:	f000 f805 	bl	8019a94 <_findenv_r>
 8019a8a:	b003      	add	sp, #12
 8019a8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019a90:	200000e8 	.word	0x200000e8

08019a94 <_findenv_r>:
 8019a94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a98:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8019b08 <_findenv_r+0x74>
 8019a9c:	4607      	mov	r7, r0
 8019a9e:	4689      	mov	r9, r1
 8019aa0:	4616      	mov	r6, r2
 8019aa2:	f000 fe3d 	bl	801a720 <__env_lock>
 8019aa6:	f8da 4000 	ldr.w	r4, [sl]
 8019aaa:	b134      	cbz	r4, 8019aba <_findenv_r+0x26>
 8019aac:	464b      	mov	r3, r9
 8019aae:	4698      	mov	r8, r3
 8019ab0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019ab4:	b13a      	cbz	r2, 8019ac6 <_findenv_r+0x32>
 8019ab6:	2a3d      	cmp	r2, #61	; 0x3d
 8019ab8:	d1f9      	bne.n	8019aae <_findenv_r+0x1a>
 8019aba:	4638      	mov	r0, r7
 8019abc:	f000 fe36 	bl	801a72c <__env_unlock>
 8019ac0:	2000      	movs	r0, #0
 8019ac2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ac6:	eba8 0809 	sub.w	r8, r8, r9
 8019aca:	46a3      	mov	fp, r4
 8019acc:	f854 0b04 	ldr.w	r0, [r4], #4
 8019ad0:	2800      	cmp	r0, #0
 8019ad2:	d0f2      	beq.n	8019aba <_findenv_r+0x26>
 8019ad4:	4642      	mov	r2, r8
 8019ad6:	4649      	mov	r1, r9
 8019ad8:	f000 fceb 	bl	801a4b2 <strncmp>
 8019adc:	2800      	cmp	r0, #0
 8019ade:	d1f4      	bne.n	8019aca <_findenv_r+0x36>
 8019ae0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019ae4:	eb03 0508 	add.w	r5, r3, r8
 8019ae8:	f813 3008 	ldrb.w	r3, [r3, r8]
 8019aec:	2b3d      	cmp	r3, #61	; 0x3d
 8019aee:	d1ec      	bne.n	8019aca <_findenv_r+0x36>
 8019af0:	f8da 3000 	ldr.w	r3, [sl]
 8019af4:	ebab 0303 	sub.w	r3, fp, r3
 8019af8:	109b      	asrs	r3, r3, #2
 8019afa:	4638      	mov	r0, r7
 8019afc:	6033      	str	r3, [r6, #0]
 8019afe:	f000 fe15 	bl	801a72c <__env_unlock>
 8019b02:	1c68      	adds	r0, r5, #1
 8019b04:	e7dd      	b.n	8019ac2 <_findenv_r+0x2e>
 8019b06:	bf00      	nop
 8019b08:	200000ec 	.word	0x200000ec

08019b0c <malloc>:
 8019b0c:	4b02      	ldr	r3, [pc, #8]	; (8019b18 <malloc+0xc>)
 8019b0e:	4601      	mov	r1, r0
 8019b10:	6818      	ldr	r0, [r3, #0]
 8019b12:	f000 b82b 	b.w	8019b6c <_malloc_r>
 8019b16:	bf00      	nop
 8019b18:	200000e8 	.word	0x200000e8

08019b1c <free>:
 8019b1c:	4b02      	ldr	r3, [pc, #8]	; (8019b28 <free+0xc>)
 8019b1e:	4601      	mov	r1, r0
 8019b20:	6818      	ldr	r0, [r3, #0]
 8019b22:	f000 be09 	b.w	801a738 <_free_r>
 8019b26:	bf00      	nop
 8019b28:	200000e8 	.word	0x200000e8

08019b2c <sbrk_aligned>:
 8019b2c:	b570      	push	{r4, r5, r6, lr}
 8019b2e:	4e0e      	ldr	r6, [pc, #56]	; (8019b68 <sbrk_aligned+0x3c>)
 8019b30:	460c      	mov	r4, r1
 8019b32:	6831      	ldr	r1, [r6, #0]
 8019b34:	4605      	mov	r5, r0
 8019b36:	b911      	cbnz	r1, 8019b3e <sbrk_aligned+0x12>
 8019b38:	f000 fd6e 	bl	801a618 <_sbrk_r>
 8019b3c:	6030      	str	r0, [r6, #0]
 8019b3e:	4621      	mov	r1, r4
 8019b40:	4628      	mov	r0, r5
 8019b42:	f000 fd69 	bl	801a618 <_sbrk_r>
 8019b46:	1c43      	adds	r3, r0, #1
 8019b48:	d00a      	beq.n	8019b60 <sbrk_aligned+0x34>
 8019b4a:	1cc4      	adds	r4, r0, #3
 8019b4c:	f024 0403 	bic.w	r4, r4, #3
 8019b50:	42a0      	cmp	r0, r4
 8019b52:	d007      	beq.n	8019b64 <sbrk_aligned+0x38>
 8019b54:	1a21      	subs	r1, r4, r0
 8019b56:	4628      	mov	r0, r5
 8019b58:	f000 fd5e 	bl	801a618 <_sbrk_r>
 8019b5c:	3001      	adds	r0, #1
 8019b5e:	d101      	bne.n	8019b64 <sbrk_aligned+0x38>
 8019b60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8019b64:	4620      	mov	r0, r4
 8019b66:	bd70      	pop	{r4, r5, r6, pc}
 8019b68:	20009d64 	.word	0x20009d64

08019b6c <_malloc_r>:
 8019b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b70:	1ccd      	adds	r5, r1, #3
 8019b72:	f025 0503 	bic.w	r5, r5, #3
 8019b76:	3508      	adds	r5, #8
 8019b78:	2d0c      	cmp	r5, #12
 8019b7a:	bf38      	it	cc
 8019b7c:	250c      	movcc	r5, #12
 8019b7e:	2d00      	cmp	r5, #0
 8019b80:	4607      	mov	r7, r0
 8019b82:	db01      	blt.n	8019b88 <_malloc_r+0x1c>
 8019b84:	42a9      	cmp	r1, r5
 8019b86:	d905      	bls.n	8019b94 <_malloc_r+0x28>
 8019b88:	230c      	movs	r3, #12
 8019b8a:	603b      	str	r3, [r7, #0]
 8019b8c:	2600      	movs	r6, #0
 8019b8e:	4630      	mov	r0, r6
 8019b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019b94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8019c68 <_malloc_r+0xfc>
 8019b98:	f000 f868 	bl	8019c6c <__malloc_lock>
 8019b9c:	f8d8 3000 	ldr.w	r3, [r8]
 8019ba0:	461c      	mov	r4, r3
 8019ba2:	bb5c      	cbnz	r4, 8019bfc <_malloc_r+0x90>
 8019ba4:	4629      	mov	r1, r5
 8019ba6:	4638      	mov	r0, r7
 8019ba8:	f7ff ffc0 	bl	8019b2c <sbrk_aligned>
 8019bac:	1c43      	adds	r3, r0, #1
 8019bae:	4604      	mov	r4, r0
 8019bb0:	d155      	bne.n	8019c5e <_malloc_r+0xf2>
 8019bb2:	f8d8 4000 	ldr.w	r4, [r8]
 8019bb6:	4626      	mov	r6, r4
 8019bb8:	2e00      	cmp	r6, #0
 8019bba:	d145      	bne.n	8019c48 <_malloc_r+0xdc>
 8019bbc:	2c00      	cmp	r4, #0
 8019bbe:	d048      	beq.n	8019c52 <_malloc_r+0xe6>
 8019bc0:	6823      	ldr	r3, [r4, #0]
 8019bc2:	4631      	mov	r1, r6
 8019bc4:	4638      	mov	r0, r7
 8019bc6:	eb04 0903 	add.w	r9, r4, r3
 8019bca:	f000 fd25 	bl	801a618 <_sbrk_r>
 8019bce:	4581      	cmp	r9, r0
 8019bd0:	d13f      	bne.n	8019c52 <_malloc_r+0xe6>
 8019bd2:	6821      	ldr	r1, [r4, #0]
 8019bd4:	1a6d      	subs	r5, r5, r1
 8019bd6:	4629      	mov	r1, r5
 8019bd8:	4638      	mov	r0, r7
 8019bda:	f7ff ffa7 	bl	8019b2c <sbrk_aligned>
 8019bde:	3001      	adds	r0, #1
 8019be0:	d037      	beq.n	8019c52 <_malloc_r+0xe6>
 8019be2:	6823      	ldr	r3, [r4, #0]
 8019be4:	442b      	add	r3, r5
 8019be6:	6023      	str	r3, [r4, #0]
 8019be8:	f8d8 3000 	ldr.w	r3, [r8]
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d038      	beq.n	8019c62 <_malloc_r+0xf6>
 8019bf0:	685a      	ldr	r2, [r3, #4]
 8019bf2:	42a2      	cmp	r2, r4
 8019bf4:	d12b      	bne.n	8019c4e <_malloc_r+0xe2>
 8019bf6:	2200      	movs	r2, #0
 8019bf8:	605a      	str	r2, [r3, #4]
 8019bfa:	e00f      	b.n	8019c1c <_malloc_r+0xb0>
 8019bfc:	6822      	ldr	r2, [r4, #0]
 8019bfe:	1b52      	subs	r2, r2, r5
 8019c00:	d41f      	bmi.n	8019c42 <_malloc_r+0xd6>
 8019c02:	2a0b      	cmp	r2, #11
 8019c04:	d917      	bls.n	8019c36 <_malloc_r+0xca>
 8019c06:	1961      	adds	r1, r4, r5
 8019c08:	42a3      	cmp	r3, r4
 8019c0a:	6025      	str	r5, [r4, #0]
 8019c0c:	bf18      	it	ne
 8019c0e:	6059      	strne	r1, [r3, #4]
 8019c10:	6863      	ldr	r3, [r4, #4]
 8019c12:	bf08      	it	eq
 8019c14:	f8c8 1000 	streq.w	r1, [r8]
 8019c18:	5162      	str	r2, [r4, r5]
 8019c1a:	604b      	str	r3, [r1, #4]
 8019c1c:	4638      	mov	r0, r7
 8019c1e:	f104 060b 	add.w	r6, r4, #11
 8019c22:	f000 f829 	bl	8019c78 <__malloc_unlock>
 8019c26:	f026 0607 	bic.w	r6, r6, #7
 8019c2a:	1d23      	adds	r3, r4, #4
 8019c2c:	1af2      	subs	r2, r6, r3
 8019c2e:	d0ae      	beq.n	8019b8e <_malloc_r+0x22>
 8019c30:	1b9b      	subs	r3, r3, r6
 8019c32:	50a3      	str	r3, [r4, r2]
 8019c34:	e7ab      	b.n	8019b8e <_malloc_r+0x22>
 8019c36:	42a3      	cmp	r3, r4
 8019c38:	6862      	ldr	r2, [r4, #4]
 8019c3a:	d1dd      	bne.n	8019bf8 <_malloc_r+0x8c>
 8019c3c:	f8c8 2000 	str.w	r2, [r8]
 8019c40:	e7ec      	b.n	8019c1c <_malloc_r+0xb0>
 8019c42:	4623      	mov	r3, r4
 8019c44:	6864      	ldr	r4, [r4, #4]
 8019c46:	e7ac      	b.n	8019ba2 <_malloc_r+0x36>
 8019c48:	4634      	mov	r4, r6
 8019c4a:	6876      	ldr	r6, [r6, #4]
 8019c4c:	e7b4      	b.n	8019bb8 <_malloc_r+0x4c>
 8019c4e:	4613      	mov	r3, r2
 8019c50:	e7cc      	b.n	8019bec <_malloc_r+0x80>
 8019c52:	230c      	movs	r3, #12
 8019c54:	603b      	str	r3, [r7, #0]
 8019c56:	4638      	mov	r0, r7
 8019c58:	f000 f80e 	bl	8019c78 <__malloc_unlock>
 8019c5c:	e797      	b.n	8019b8e <_malloc_r+0x22>
 8019c5e:	6025      	str	r5, [r4, #0]
 8019c60:	e7dc      	b.n	8019c1c <_malloc_r+0xb0>
 8019c62:	605b      	str	r3, [r3, #4]
 8019c64:	deff      	udf	#255	; 0xff
 8019c66:	bf00      	nop
 8019c68:	20009d60 	.word	0x20009d60

08019c6c <__malloc_lock>:
 8019c6c:	4801      	ldr	r0, [pc, #4]	; (8019c74 <__malloc_lock+0x8>)
 8019c6e:	f000 bd20 	b.w	801a6b2 <__retarget_lock_acquire_recursive>
 8019c72:	bf00      	nop
 8019c74:	20009ea9 	.word	0x20009ea9

08019c78 <__malloc_unlock>:
 8019c78:	4801      	ldr	r0, [pc, #4]	; (8019c80 <__malloc_unlock+0x8>)
 8019c7a:	f000 bd1b 	b.w	801a6b4 <__retarget_lock_release_recursive>
 8019c7e:	bf00      	nop
 8019c80:	20009ea9 	.word	0x20009ea9

08019c84 <srand>:
 8019c84:	b538      	push	{r3, r4, r5, lr}
 8019c86:	4b10      	ldr	r3, [pc, #64]	; (8019cc8 <srand+0x44>)
 8019c88:	681d      	ldr	r5, [r3, #0]
 8019c8a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8019c8c:	4604      	mov	r4, r0
 8019c8e:	b9b3      	cbnz	r3, 8019cbe <srand+0x3a>
 8019c90:	2018      	movs	r0, #24
 8019c92:	f7ff ff3b 	bl	8019b0c <malloc>
 8019c96:	4602      	mov	r2, r0
 8019c98:	6328      	str	r0, [r5, #48]	; 0x30
 8019c9a:	b920      	cbnz	r0, 8019ca6 <srand+0x22>
 8019c9c:	4b0b      	ldr	r3, [pc, #44]	; (8019ccc <srand+0x48>)
 8019c9e:	480c      	ldr	r0, [pc, #48]	; (8019cd0 <srand+0x4c>)
 8019ca0:	2146      	movs	r1, #70	; 0x46
 8019ca2:	f000 fd1f 	bl	801a6e4 <__assert_func>
 8019ca6:	490b      	ldr	r1, [pc, #44]	; (8019cd4 <srand+0x50>)
 8019ca8:	4b0b      	ldr	r3, [pc, #44]	; (8019cd8 <srand+0x54>)
 8019caa:	e9c0 1300 	strd	r1, r3, [r0]
 8019cae:	4b0b      	ldr	r3, [pc, #44]	; (8019cdc <srand+0x58>)
 8019cb0:	6083      	str	r3, [r0, #8]
 8019cb2:	230b      	movs	r3, #11
 8019cb4:	8183      	strh	r3, [r0, #12]
 8019cb6:	2100      	movs	r1, #0
 8019cb8:	2001      	movs	r0, #1
 8019cba:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019cbe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8019cc0:	2200      	movs	r2, #0
 8019cc2:	611c      	str	r4, [r3, #16]
 8019cc4:	615a      	str	r2, [r3, #20]
 8019cc6:	bd38      	pop	{r3, r4, r5, pc}
 8019cc8:	200000e8 	.word	0x200000e8
 8019ccc:	0801c0e8 	.word	0x0801c0e8
 8019cd0:	0801c0ff 	.word	0x0801c0ff
 8019cd4:	abcd330e 	.word	0xabcd330e
 8019cd8:	e66d1234 	.word	0xe66d1234
 8019cdc:	0005deec 	.word	0x0005deec

08019ce0 <rand>:
 8019ce0:	4b16      	ldr	r3, [pc, #88]	; (8019d3c <rand+0x5c>)
 8019ce2:	b510      	push	{r4, lr}
 8019ce4:	681c      	ldr	r4, [r3, #0]
 8019ce6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019ce8:	b9b3      	cbnz	r3, 8019d18 <rand+0x38>
 8019cea:	2018      	movs	r0, #24
 8019cec:	f7ff ff0e 	bl	8019b0c <malloc>
 8019cf0:	4602      	mov	r2, r0
 8019cf2:	6320      	str	r0, [r4, #48]	; 0x30
 8019cf4:	b920      	cbnz	r0, 8019d00 <rand+0x20>
 8019cf6:	4b12      	ldr	r3, [pc, #72]	; (8019d40 <rand+0x60>)
 8019cf8:	4812      	ldr	r0, [pc, #72]	; (8019d44 <rand+0x64>)
 8019cfa:	2152      	movs	r1, #82	; 0x52
 8019cfc:	f000 fcf2 	bl	801a6e4 <__assert_func>
 8019d00:	4911      	ldr	r1, [pc, #68]	; (8019d48 <rand+0x68>)
 8019d02:	4b12      	ldr	r3, [pc, #72]	; (8019d4c <rand+0x6c>)
 8019d04:	e9c0 1300 	strd	r1, r3, [r0]
 8019d08:	4b11      	ldr	r3, [pc, #68]	; (8019d50 <rand+0x70>)
 8019d0a:	6083      	str	r3, [r0, #8]
 8019d0c:	230b      	movs	r3, #11
 8019d0e:	8183      	strh	r3, [r0, #12]
 8019d10:	2100      	movs	r1, #0
 8019d12:	2001      	movs	r0, #1
 8019d14:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019d18:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019d1a:	480e      	ldr	r0, [pc, #56]	; (8019d54 <rand+0x74>)
 8019d1c:	690b      	ldr	r3, [r1, #16]
 8019d1e:	694c      	ldr	r4, [r1, #20]
 8019d20:	4a0d      	ldr	r2, [pc, #52]	; (8019d58 <rand+0x78>)
 8019d22:	4358      	muls	r0, r3
 8019d24:	fb02 0004 	mla	r0, r2, r4, r0
 8019d28:	fba3 3202 	umull	r3, r2, r3, r2
 8019d2c:	3301      	adds	r3, #1
 8019d2e:	eb40 0002 	adc.w	r0, r0, r2
 8019d32:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8019d36:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019d3a:	bd10      	pop	{r4, pc}
 8019d3c:	200000e8 	.word	0x200000e8
 8019d40:	0801c0e8 	.word	0x0801c0e8
 8019d44:	0801c0ff 	.word	0x0801c0ff
 8019d48:	abcd330e 	.word	0xabcd330e
 8019d4c:	e66d1234 	.word	0xe66d1234
 8019d50:	0005deec 	.word	0x0005deec
 8019d54:	5851f42d 	.word	0x5851f42d
 8019d58:	4c957f2d 	.word	0x4c957f2d

08019d5c <realloc>:
 8019d5c:	4b02      	ldr	r3, [pc, #8]	; (8019d68 <realloc+0xc>)
 8019d5e:	460a      	mov	r2, r1
 8019d60:	4601      	mov	r1, r0
 8019d62:	6818      	ldr	r0, [r3, #0]
 8019d64:	f000 b802 	b.w	8019d6c <_realloc_r>
 8019d68:	200000e8 	.word	0x200000e8

08019d6c <_realloc_r>:
 8019d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d70:	4680      	mov	r8, r0
 8019d72:	4614      	mov	r4, r2
 8019d74:	460e      	mov	r6, r1
 8019d76:	b921      	cbnz	r1, 8019d82 <_realloc_r+0x16>
 8019d78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019d7c:	4611      	mov	r1, r2
 8019d7e:	f7ff bef5 	b.w	8019b6c <_malloc_r>
 8019d82:	b92a      	cbnz	r2, 8019d90 <_realloc_r+0x24>
 8019d84:	f000 fcd8 	bl	801a738 <_free_r>
 8019d88:	4625      	mov	r5, r4
 8019d8a:	4628      	mov	r0, r5
 8019d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d90:	f000 fd1e 	bl	801a7d0 <_malloc_usable_size_r>
 8019d94:	4284      	cmp	r4, r0
 8019d96:	4607      	mov	r7, r0
 8019d98:	d802      	bhi.n	8019da0 <_realloc_r+0x34>
 8019d9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019d9e:	d812      	bhi.n	8019dc6 <_realloc_r+0x5a>
 8019da0:	4621      	mov	r1, r4
 8019da2:	4640      	mov	r0, r8
 8019da4:	f7ff fee2 	bl	8019b6c <_malloc_r>
 8019da8:	4605      	mov	r5, r0
 8019daa:	2800      	cmp	r0, #0
 8019dac:	d0ed      	beq.n	8019d8a <_realloc_r+0x1e>
 8019dae:	42bc      	cmp	r4, r7
 8019db0:	4622      	mov	r2, r4
 8019db2:	4631      	mov	r1, r6
 8019db4:	bf28      	it	cs
 8019db6:	463a      	movcs	r2, r7
 8019db8:	f000 fc85 	bl	801a6c6 <memcpy>
 8019dbc:	4631      	mov	r1, r6
 8019dbe:	4640      	mov	r0, r8
 8019dc0:	f000 fcba 	bl	801a738 <_free_r>
 8019dc4:	e7e1      	b.n	8019d8a <_realloc_r+0x1e>
 8019dc6:	4635      	mov	r5, r6
 8019dc8:	e7df      	b.n	8019d8a <_realloc_r+0x1e>
	...

08019dcc <_strtoul_l.constprop.0>:
 8019dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019dd0:	4f36      	ldr	r7, [pc, #216]	; (8019eac <_strtoul_l.constprop.0+0xe0>)
 8019dd2:	4686      	mov	lr, r0
 8019dd4:	460d      	mov	r5, r1
 8019dd6:	4628      	mov	r0, r5
 8019dd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019ddc:	5d3e      	ldrb	r6, [r7, r4]
 8019dde:	f016 0608 	ands.w	r6, r6, #8
 8019de2:	d1f8      	bne.n	8019dd6 <_strtoul_l.constprop.0+0xa>
 8019de4:	2c2d      	cmp	r4, #45	; 0x2d
 8019de6:	d130      	bne.n	8019e4a <_strtoul_l.constprop.0+0x7e>
 8019de8:	782c      	ldrb	r4, [r5, #0]
 8019dea:	2601      	movs	r6, #1
 8019dec:	1c85      	adds	r5, r0, #2
 8019dee:	2b00      	cmp	r3, #0
 8019df0:	d057      	beq.n	8019ea2 <_strtoul_l.constprop.0+0xd6>
 8019df2:	2b10      	cmp	r3, #16
 8019df4:	d109      	bne.n	8019e0a <_strtoul_l.constprop.0+0x3e>
 8019df6:	2c30      	cmp	r4, #48	; 0x30
 8019df8:	d107      	bne.n	8019e0a <_strtoul_l.constprop.0+0x3e>
 8019dfa:	7828      	ldrb	r0, [r5, #0]
 8019dfc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8019e00:	2858      	cmp	r0, #88	; 0x58
 8019e02:	d149      	bne.n	8019e98 <_strtoul_l.constprop.0+0xcc>
 8019e04:	786c      	ldrb	r4, [r5, #1]
 8019e06:	2310      	movs	r3, #16
 8019e08:	3502      	adds	r5, #2
 8019e0a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8019e0e:	2700      	movs	r7, #0
 8019e10:	fbb8 f8f3 	udiv	r8, r8, r3
 8019e14:	fb03 f908 	mul.w	r9, r3, r8
 8019e18:	ea6f 0909 	mvn.w	r9, r9
 8019e1c:	4638      	mov	r0, r7
 8019e1e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8019e22:	f1bc 0f09 	cmp.w	ip, #9
 8019e26:	d815      	bhi.n	8019e54 <_strtoul_l.constprop.0+0x88>
 8019e28:	4664      	mov	r4, ip
 8019e2a:	42a3      	cmp	r3, r4
 8019e2c:	dd23      	ble.n	8019e76 <_strtoul_l.constprop.0+0xaa>
 8019e2e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8019e32:	d007      	beq.n	8019e44 <_strtoul_l.constprop.0+0x78>
 8019e34:	4580      	cmp	r8, r0
 8019e36:	d31b      	bcc.n	8019e70 <_strtoul_l.constprop.0+0xa4>
 8019e38:	d101      	bne.n	8019e3e <_strtoul_l.constprop.0+0x72>
 8019e3a:	45a1      	cmp	r9, r4
 8019e3c:	db18      	blt.n	8019e70 <_strtoul_l.constprop.0+0xa4>
 8019e3e:	fb00 4003 	mla	r0, r0, r3, r4
 8019e42:	2701      	movs	r7, #1
 8019e44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019e48:	e7e9      	b.n	8019e1e <_strtoul_l.constprop.0+0x52>
 8019e4a:	2c2b      	cmp	r4, #43	; 0x2b
 8019e4c:	bf04      	itt	eq
 8019e4e:	782c      	ldrbeq	r4, [r5, #0]
 8019e50:	1c85      	addeq	r5, r0, #2
 8019e52:	e7cc      	b.n	8019dee <_strtoul_l.constprop.0+0x22>
 8019e54:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8019e58:	f1bc 0f19 	cmp.w	ip, #25
 8019e5c:	d801      	bhi.n	8019e62 <_strtoul_l.constprop.0+0x96>
 8019e5e:	3c37      	subs	r4, #55	; 0x37
 8019e60:	e7e3      	b.n	8019e2a <_strtoul_l.constprop.0+0x5e>
 8019e62:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8019e66:	f1bc 0f19 	cmp.w	ip, #25
 8019e6a:	d804      	bhi.n	8019e76 <_strtoul_l.constprop.0+0xaa>
 8019e6c:	3c57      	subs	r4, #87	; 0x57
 8019e6e:	e7dc      	b.n	8019e2a <_strtoul_l.constprop.0+0x5e>
 8019e70:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8019e74:	e7e6      	b.n	8019e44 <_strtoul_l.constprop.0+0x78>
 8019e76:	1c7b      	adds	r3, r7, #1
 8019e78:	d106      	bne.n	8019e88 <_strtoul_l.constprop.0+0xbc>
 8019e7a:	2322      	movs	r3, #34	; 0x22
 8019e7c:	f8ce 3000 	str.w	r3, [lr]
 8019e80:	4638      	mov	r0, r7
 8019e82:	b932      	cbnz	r2, 8019e92 <_strtoul_l.constprop.0+0xc6>
 8019e84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e88:	b106      	cbz	r6, 8019e8c <_strtoul_l.constprop.0+0xc0>
 8019e8a:	4240      	negs	r0, r0
 8019e8c:	2a00      	cmp	r2, #0
 8019e8e:	d0f9      	beq.n	8019e84 <_strtoul_l.constprop.0+0xb8>
 8019e90:	b107      	cbz	r7, 8019e94 <_strtoul_l.constprop.0+0xc8>
 8019e92:	1e69      	subs	r1, r5, #1
 8019e94:	6011      	str	r1, [r2, #0]
 8019e96:	e7f5      	b.n	8019e84 <_strtoul_l.constprop.0+0xb8>
 8019e98:	2430      	movs	r4, #48	; 0x30
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	d1b5      	bne.n	8019e0a <_strtoul_l.constprop.0+0x3e>
 8019e9e:	2308      	movs	r3, #8
 8019ea0:	e7b3      	b.n	8019e0a <_strtoul_l.constprop.0+0x3e>
 8019ea2:	2c30      	cmp	r4, #48	; 0x30
 8019ea4:	d0a9      	beq.n	8019dfa <_strtoul_l.constprop.0+0x2e>
 8019ea6:	230a      	movs	r3, #10
 8019ea8:	e7af      	b.n	8019e0a <_strtoul_l.constprop.0+0x3e>
 8019eaa:	bf00      	nop
 8019eac:	0801c158 	.word	0x0801c158

08019eb0 <strtoul>:
 8019eb0:	4613      	mov	r3, r2
 8019eb2:	460a      	mov	r2, r1
 8019eb4:	4601      	mov	r1, r0
 8019eb6:	4802      	ldr	r0, [pc, #8]	; (8019ec0 <strtoul+0x10>)
 8019eb8:	6800      	ldr	r0, [r0, #0]
 8019eba:	f7ff bf87 	b.w	8019dcc <_strtoul_l.constprop.0>
 8019ebe:	bf00      	nop
 8019ec0:	200000e8 	.word	0x200000e8

08019ec4 <std>:
 8019ec4:	2300      	movs	r3, #0
 8019ec6:	b510      	push	{r4, lr}
 8019ec8:	4604      	mov	r4, r0
 8019eca:	e9c0 3300 	strd	r3, r3, [r0]
 8019ece:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019ed2:	6083      	str	r3, [r0, #8]
 8019ed4:	8181      	strh	r1, [r0, #12]
 8019ed6:	6643      	str	r3, [r0, #100]	; 0x64
 8019ed8:	81c2      	strh	r2, [r0, #14]
 8019eda:	6183      	str	r3, [r0, #24]
 8019edc:	4619      	mov	r1, r3
 8019ede:	2208      	movs	r2, #8
 8019ee0:	305c      	adds	r0, #92	; 0x5c
 8019ee2:	f000 fad1 	bl	801a488 <memset>
 8019ee6:	4b0d      	ldr	r3, [pc, #52]	; (8019f1c <std+0x58>)
 8019ee8:	6263      	str	r3, [r4, #36]	; 0x24
 8019eea:	4b0d      	ldr	r3, [pc, #52]	; (8019f20 <std+0x5c>)
 8019eec:	62a3      	str	r3, [r4, #40]	; 0x28
 8019eee:	4b0d      	ldr	r3, [pc, #52]	; (8019f24 <std+0x60>)
 8019ef0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019ef2:	4b0d      	ldr	r3, [pc, #52]	; (8019f28 <std+0x64>)
 8019ef4:	6323      	str	r3, [r4, #48]	; 0x30
 8019ef6:	4b0d      	ldr	r3, [pc, #52]	; (8019f2c <std+0x68>)
 8019ef8:	6224      	str	r4, [r4, #32]
 8019efa:	429c      	cmp	r4, r3
 8019efc:	d006      	beq.n	8019f0c <std+0x48>
 8019efe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8019f02:	4294      	cmp	r4, r2
 8019f04:	d002      	beq.n	8019f0c <std+0x48>
 8019f06:	33d0      	adds	r3, #208	; 0xd0
 8019f08:	429c      	cmp	r4, r3
 8019f0a:	d105      	bne.n	8019f18 <std+0x54>
 8019f0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f14:	f000 bbcc 	b.w	801a6b0 <__retarget_lock_init_recursive>
 8019f18:	bd10      	pop	{r4, pc}
 8019f1a:	bf00      	nop
 8019f1c:	0801a231 	.word	0x0801a231
 8019f20:	0801a253 	.word	0x0801a253
 8019f24:	0801a28b 	.word	0x0801a28b
 8019f28:	0801a2af 	.word	0x0801a2af
 8019f2c:	20009d68 	.word	0x20009d68

08019f30 <stdio_exit_handler>:
 8019f30:	4a02      	ldr	r2, [pc, #8]	; (8019f3c <stdio_exit_handler+0xc>)
 8019f32:	4903      	ldr	r1, [pc, #12]	; (8019f40 <stdio_exit_handler+0x10>)
 8019f34:	4803      	ldr	r0, [pc, #12]	; (8019f44 <stdio_exit_handler+0x14>)
 8019f36:	f000 b869 	b.w	801a00c <_fwalk_sglue>
 8019f3a:	bf00      	nop
 8019f3c:	20000090 	.word	0x20000090
 8019f40:	0801b145 	.word	0x0801b145
 8019f44:	2000009c 	.word	0x2000009c

08019f48 <cleanup_stdio>:
 8019f48:	6841      	ldr	r1, [r0, #4]
 8019f4a:	4b0c      	ldr	r3, [pc, #48]	; (8019f7c <cleanup_stdio+0x34>)
 8019f4c:	4299      	cmp	r1, r3
 8019f4e:	b510      	push	{r4, lr}
 8019f50:	4604      	mov	r4, r0
 8019f52:	d001      	beq.n	8019f58 <cleanup_stdio+0x10>
 8019f54:	f001 f8f6 	bl	801b144 <_fflush_r>
 8019f58:	68a1      	ldr	r1, [r4, #8]
 8019f5a:	4b09      	ldr	r3, [pc, #36]	; (8019f80 <cleanup_stdio+0x38>)
 8019f5c:	4299      	cmp	r1, r3
 8019f5e:	d002      	beq.n	8019f66 <cleanup_stdio+0x1e>
 8019f60:	4620      	mov	r0, r4
 8019f62:	f001 f8ef 	bl	801b144 <_fflush_r>
 8019f66:	68e1      	ldr	r1, [r4, #12]
 8019f68:	4b06      	ldr	r3, [pc, #24]	; (8019f84 <cleanup_stdio+0x3c>)
 8019f6a:	4299      	cmp	r1, r3
 8019f6c:	d004      	beq.n	8019f78 <cleanup_stdio+0x30>
 8019f6e:	4620      	mov	r0, r4
 8019f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f74:	f001 b8e6 	b.w	801b144 <_fflush_r>
 8019f78:	bd10      	pop	{r4, pc}
 8019f7a:	bf00      	nop
 8019f7c:	20009d68 	.word	0x20009d68
 8019f80:	20009dd0 	.word	0x20009dd0
 8019f84:	20009e38 	.word	0x20009e38

08019f88 <global_stdio_init.part.0>:
 8019f88:	b510      	push	{r4, lr}
 8019f8a:	4b0b      	ldr	r3, [pc, #44]	; (8019fb8 <global_stdio_init.part.0+0x30>)
 8019f8c:	4c0b      	ldr	r4, [pc, #44]	; (8019fbc <global_stdio_init.part.0+0x34>)
 8019f8e:	4a0c      	ldr	r2, [pc, #48]	; (8019fc0 <global_stdio_init.part.0+0x38>)
 8019f90:	601a      	str	r2, [r3, #0]
 8019f92:	4620      	mov	r0, r4
 8019f94:	2200      	movs	r2, #0
 8019f96:	2104      	movs	r1, #4
 8019f98:	f7ff ff94 	bl	8019ec4 <std>
 8019f9c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8019fa0:	2201      	movs	r2, #1
 8019fa2:	2109      	movs	r1, #9
 8019fa4:	f7ff ff8e 	bl	8019ec4 <std>
 8019fa8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8019fac:	2202      	movs	r2, #2
 8019fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019fb2:	2112      	movs	r1, #18
 8019fb4:	f7ff bf86 	b.w	8019ec4 <std>
 8019fb8:	20009ea0 	.word	0x20009ea0
 8019fbc:	20009d68 	.word	0x20009d68
 8019fc0:	08019f31 	.word	0x08019f31

08019fc4 <__sfp_lock_acquire>:
 8019fc4:	4801      	ldr	r0, [pc, #4]	; (8019fcc <__sfp_lock_acquire+0x8>)
 8019fc6:	f000 bb74 	b.w	801a6b2 <__retarget_lock_acquire_recursive>
 8019fca:	bf00      	nop
 8019fcc:	20009eaa 	.word	0x20009eaa

08019fd0 <__sfp_lock_release>:
 8019fd0:	4801      	ldr	r0, [pc, #4]	; (8019fd8 <__sfp_lock_release+0x8>)
 8019fd2:	f000 bb6f 	b.w	801a6b4 <__retarget_lock_release_recursive>
 8019fd6:	bf00      	nop
 8019fd8:	20009eaa 	.word	0x20009eaa

08019fdc <__sinit>:
 8019fdc:	b510      	push	{r4, lr}
 8019fde:	4604      	mov	r4, r0
 8019fe0:	f7ff fff0 	bl	8019fc4 <__sfp_lock_acquire>
 8019fe4:	6a23      	ldr	r3, [r4, #32]
 8019fe6:	b11b      	cbz	r3, 8019ff0 <__sinit+0x14>
 8019fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019fec:	f7ff bff0 	b.w	8019fd0 <__sfp_lock_release>
 8019ff0:	4b04      	ldr	r3, [pc, #16]	; (801a004 <__sinit+0x28>)
 8019ff2:	6223      	str	r3, [r4, #32]
 8019ff4:	4b04      	ldr	r3, [pc, #16]	; (801a008 <__sinit+0x2c>)
 8019ff6:	681b      	ldr	r3, [r3, #0]
 8019ff8:	2b00      	cmp	r3, #0
 8019ffa:	d1f5      	bne.n	8019fe8 <__sinit+0xc>
 8019ffc:	f7ff ffc4 	bl	8019f88 <global_stdio_init.part.0>
 801a000:	e7f2      	b.n	8019fe8 <__sinit+0xc>
 801a002:	bf00      	nop
 801a004:	08019f49 	.word	0x08019f49
 801a008:	20009ea0 	.word	0x20009ea0

0801a00c <_fwalk_sglue>:
 801a00c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a010:	4607      	mov	r7, r0
 801a012:	4688      	mov	r8, r1
 801a014:	4614      	mov	r4, r2
 801a016:	2600      	movs	r6, #0
 801a018:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a01c:	f1b9 0901 	subs.w	r9, r9, #1
 801a020:	d505      	bpl.n	801a02e <_fwalk_sglue+0x22>
 801a022:	6824      	ldr	r4, [r4, #0]
 801a024:	2c00      	cmp	r4, #0
 801a026:	d1f7      	bne.n	801a018 <_fwalk_sglue+0xc>
 801a028:	4630      	mov	r0, r6
 801a02a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a02e:	89ab      	ldrh	r3, [r5, #12]
 801a030:	2b01      	cmp	r3, #1
 801a032:	d907      	bls.n	801a044 <_fwalk_sglue+0x38>
 801a034:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a038:	3301      	adds	r3, #1
 801a03a:	d003      	beq.n	801a044 <_fwalk_sglue+0x38>
 801a03c:	4629      	mov	r1, r5
 801a03e:	4638      	mov	r0, r7
 801a040:	47c0      	blx	r8
 801a042:	4306      	orrs	r6, r0
 801a044:	3568      	adds	r5, #104	; 0x68
 801a046:	e7e9      	b.n	801a01c <_fwalk_sglue+0x10>

0801a048 <iprintf>:
 801a048:	b40f      	push	{r0, r1, r2, r3}
 801a04a:	b507      	push	{r0, r1, r2, lr}
 801a04c:	4906      	ldr	r1, [pc, #24]	; (801a068 <iprintf+0x20>)
 801a04e:	ab04      	add	r3, sp, #16
 801a050:	6808      	ldr	r0, [r1, #0]
 801a052:	f853 2b04 	ldr.w	r2, [r3], #4
 801a056:	6881      	ldr	r1, [r0, #8]
 801a058:	9301      	str	r3, [sp, #4]
 801a05a:	f000 fd43 	bl	801aae4 <_vfiprintf_r>
 801a05e:	b003      	add	sp, #12
 801a060:	f85d eb04 	ldr.w	lr, [sp], #4
 801a064:	b004      	add	sp, #16
 801a066:	4770      	bx	lr
 801a068:	200000e8 	.word	0x200000e8

0801a06c <setvbuf>:
 801a06c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a070:	461d      	mov	r5, r3
 801a072:	4b54      	ldr	r3, [pc, #336]	; (801a1c4 <setvbuf+0x158>)
 801a074:	681f      	ldr	r7, [r3, #0]
 801a076:	4604      	mov	r4, r0
 801a078:	460e      	mov	r6, r1
 801a07a:	4690      	mov	r8, r2
 801a07c:	b127      	cbz	r7, 801a088 <setvbuf+0x1c>
 801a07e:	6a3b      	ldr	r3, [r7, #32]
 801a080:	b913      	cbnz	r3, 801a088 <setvbuf+0x1c>
 801a082:	4638      	mov	r0, r7
 801a084:	f7ff ffaa 	bl	8019fdc <__sinit>
 801a088:	f1b8 0f02 	cmp.w	r8, #2
 801a08c:	d006      	beq.n	801a09c <setvbuf+0x30>
 801a08e:	f1b8 0f01 	cmp.w	r8, #1
 801a092:	f200 8094 	bhi.w	801a1be <setvbuf+0x152>
 801a096:	2d00      	cmp	r5, #0
 801a098:	f2c0 8091 	blt.w	801a1be <setvbuf+0x152>
 801a09c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a09e:	07da      	lsls	r2, r3, #31
 801a0a0:	d405      	bmi.n	801a0ae <setvbuf+0x42>
 801a0a2:	89a3      	ldrh	r3, [r4, #12]
 801a0a4:	059b      	lsls	r3, r3, #22
 801a0a6:	d402      	bmi.n	801a0ae <setvbuf+0x42>
 801a0a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a0aa:	f000 fb02 	bl	801a6b2 <__retarget_lock_acquire_recursive>
 801a0ae:	4621      	mov	r1, r4
 801a0b0:	4638      	mov	r0, r7
 801a0b2:	f001 f847 	bl	801b144 <_fflush_r>
 801a0b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a0b8:	b141      	cbz	r1, 801a0cc <setvbuf+0x60>
 801a0ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a0be:	4299      	cmp	r1, r3
 801a0c0:	d002      	beq.n	801a0c8 <setvbuf+0x5c>
 801a0c2:	4638      	mov	r0, r7
 801a0c4:	f000 fb38 	bl	801a738 <_free_r>
 801a0c8:	2300      	movs	r3, #0
 801a0ca:	6363      	str	r3, [r4, #52]	; 0x34
 801a0cc:	2300      	movs	r3, #0
 801a0ce:	61a3      	str	r3, [r4, #24]
 801a0d0:	6063      	str	r3, [r4, #4]
 801a0d2:	89a3      	ldrh	r3, [r4, #12]
 801a0d4:	0618      	lsls	r0, r3, #24
 801a0d6:	d503      	bpl.n	801a0e0 <setvbuf+0x74>
 801a0d8:	6921      	ldr	r1, [r4, #16]
 801a0da:	4638      	mov	r0, r7
 801a0dc:	f000 fb2c 	bl	801a738 <_free_r>
 801a0e0:	89a3      	ldrh	r3, [r4, #12]
 801a0e2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801a0e6:	f023 0303 	bic.w	r3, r3, #3
 801a0ea:	f1b8 0f02 	cmp.w	r8, #2
 801a0ee:	81a3      	strh	r3, [r4, #12]
 801a0f0:	d05f      	beq.n	801a1b2 <setvbuf+0x146>
 801a0f2:	ab01      	add	r3, sp, #4
 801a0f4:	466a      	mov	r2, sp
 801a0f6:	4621      	mov	r1, r4
 801a0f8:	4638      	mov	r0, r7
 801a0fa:	f001 f85d 	bl	801b1b8 <__swhatbuf_r>
 801a0fe:	89a3      	ldrh	r3, [r4, #12]
 801a100:	4318      	orrs	r0, r3
 801a102:	81a0      	strh	r0, [r4, #12]
 801a104:	bb2d      	cbnz	r5, 801a152 <setvbuf+0xe6>
 801a106:	9d00      	ldr	r5, [sp, #0]
 801a108:	4628      	mov	r0, r5
 801a10a:	f7ff fcff 	bl	8019b0c <malloc>
 801a10e:	4606      	mov	r6, r0
 801a110:	2800      	cmp	r0, #0
 801a112:	d150      	bne.n	801a1b6 <setvbuf+0x14a>
 801a114:	f8dd 9000 	ldr.w	r9, [sp]
 801a118:	45a9      	cmp	r9, r5
 801a11a:	d13e      	bne.n	801a19a <setvbuf+0x12e>
 801a11c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801a120:	2200      	movs	r2, #0
 801a122:	60a2      	str	r2, [r4, #8]
 801a124:	f104 0247 	add.w	r2, r4, #71	; 0x47
 801a128:	6022      	str	r2, [r4, #0]
 801a12a:	6122      	str	r2, [r4, #16]
 801a12c:	2201      	movs	r2, #1
 801a12e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a132:	6162      	str	r2, [r4, #20]
 801a134:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a136:	f043 0302 	orr.w	r3, r3, #2
 801a13a:	07d1      	lsls	r1, r2, #31
 801a13c:	81a3      	strh	r3, [r4, #12]
 801a13e:	d404      	bmi.n	801a14a <setvbuf+0xde>
 801a140:	059b      	lsls	r3, r3, #22
 801a142:	d402      	bmi.n	801a14a <setvbuf+0xde>
 801a144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a146:	f000 fab5 	bl	801a6b4 <__retarget_lock_release_recursive>
 801a14a:	4628      	mov	r0, r5
 801a14c:	b003      	add	sp, #12
 801a14e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a152:	2e00      	cmp	r6, #0
 801a154:	d0d8      	beq.n	801a108 <setvbuf+0x9c>
 801a156:	6a3b      	ldr	r3, [r7, #32]
 801a158:	b913      	cbnz	r3, 801a160 <setvbuf+0xf4>
 801a15a:	4638      	mov	r0, r7
 801a15c:	f7ff ff3e 	bl	8019fdc <__sinit>
 801a160:	f1b8 0f01 	cmp.w	r8, #1
 801a164:	bf08      	it	eq
 801a166:	89a3      	ldrheq	r3, [r4, #12]
 801a168:	6026      	str	r6, [r4, #0]
 801a16a:	bf04      	itt	eq
 801a16c:	f043 0301 	orreq.w	r3, r3, #1
 801a170:	81a3      	strheq	r3, [r4, #12]
 801a172:	89a3      	ldrh	r3, [r4, #12]
 801a174:	f013 0208 	ands.w	r2, r3, #8
 801a178:	e9c4 6504 	strd	r6, r5, [r4, #16]
 801a17c:	d01d      	beq.n	801a1ba <setvbuf+0x14e>
 801a17e:	07da      	lsls	r2, r3, #31
 801a180:	bf41      	itttt	mi
 801a182:	2200      	movmi	r2, #0
 801a184:	426d      	negmi	r5, r5
 801a186:	60a2      	strmi	r2, [r4, #8]
 801a188:	61a5      	strmi	r5, [r4, #24]
 801a18a:	bf58      	it	pl
 801a18c:	60a5      	strpl	r5, [r4, #8]
 801a18e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801a190:	f015 0501 	ands.w	r5, r5, #1
 801a194:	d0d4      	beq.n	801a140 <setvbuf+0xd4>
 801a196:	2500      	movs	r5, #0
 801a198:	e7d7      	b.n	801a14a <setvbuf+0xde>
 801a19a:	4648      	mov	r0, r9
 801a19c:	f7ff fcb6 	bl	8019b0c <malloc>
 801a1a0:	4606      	mov	r6, r0
 801a1a2:	2800      	cmp	r0, #0
 801a1a4:	d0ba      	beq.n	801a11c <setvbuf+0xb0>
 801a1a6:	89a3      	ldrh	r3, [r4, #12]
 801a1a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a1ac:	81a3      	strh	r3, [r4, #12]
 801a1ae:	464d      	mov	r5, r9
 801a1b0:	e7d1      	b.n	801a156 <setvbuf+0xea>
 801a1b2:	2500      	movs	r5, #0
 801a1b4:	e7b4      	b.n	801a120 <setvbuf+0xb4>
 801a1b6:	46a9      	mov	r9, r5
 801a1b8:	e7f5      	b.n	801a1a6 <setvbuf+0x13a>
 801a1ba:	60a2      	str	r2, [r4, #8]
 801a1bc:	e7e7      	b.n	801a18e <setvbuf+0x122>
 801a1be:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801a1c2:	e7c2      	b.n	801a14a <setvbuf+0xde>
 801a1c4:	200000e8 	.word	0x200000e8

0801a1c8 <sniprintf>:
 801a1c8:	b40c      	push	{r2, r3}
 801a1ca:	b530      	push	{r4, r5, lr}
 801a1cc:	4b17      	ldr	r3, [pc, #92]	; (801a22c <sniprintf+0x64>)
 801a1ce:	1e0c      	subs	r4, r1, #0
 801a1d0:	681d      	ldr	r5, [r3, #0]
 801a1d2:	b09d      	sub	sp, #116	; 0x74
 801a1d4:	da08      	bge.n	801a1e8 <sniprintf+0x20>
 801a1d6:	238b      	movs	r3, #139	; 0x8b
 801a1d8:	602b      	str	r3, [r5, #0]
 801a1da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a1de:	b01d      	add	sp, #116	; 0x74
 801a1e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a1e4:	b002      	add	sp, #8
 801a1e6:	4770      	bx	lr
 801a1e8:	f44f 7302 	mov.w	r3, #520	; 0x208
 801a1ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a1f0:	bf14      	ite	ne
 801a1f2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801a1f6:	4623      	moveq	r3, r4
 801a1f8:	9304      	str	r3, [sp, #16]
 801a1fa:	9307      	str	r3, [sp, #28]
 801a1fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a200:	9002      	str	r0, [sp, #8]
 801a202:	9006      	str	r0, [sp, #24]
 801a204:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a208:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a20a:	ab21      	add	r3, sp, #132	; 0x84
 801a20c:	a902      	add	r1, sp, #8
 801a20e:	4628      	mov	r0, r5
 801a210:	9301      	str	r3, [sp, #4]
 801a212:	f000 fb3f 	bl	801a894 <_svfiprintf_r>
 801a216:	1c43      	adds	r3, r0, #1
 801a218:	bfbc      	itt	lt
 801a21a:	238b      	movlt	r3, #139	; 0x8b
 801a21c:	602b      	strlt	r3, [r5, #0]
 801a21e:	2c00      	cmp	r4, #0
 801a220:	d0dd      	beq.n	801a1de <sniprintf+0x16>
 801a222:	9b02      	ldr	r3, [sp, #8]
 801a224:	2200      	movs	r2, #0
 801a226:	701a      	strb	r2, [r3, #0]
 801a228:	e7d9      	b.n	801a1de <sniprintf+0x16>
 801a22a:	bf00      	nop
 801a22c:	200000e8 	.word	0x200000e8

0801a230 <__sread>:
 801a230:	b510      	push	{r4, lr}
 801a232:	460c      	mov	r4, r1
 801a234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a238:	f000 f9dc 	bl	801a5f4 <_read_r>
 801a23c:	2800      	cmp	r0, #0
 801a23e:	bfab      	itete	ge
 801a240:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a242:	89a3      	ldrhlt	r3, [r4, #12]
 801a244:	181b      	addge	r3, r3, r0
 801a246:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a24a:	bfac      	ite	ge
 801a24c:	6563      	strge	r3, [r4, #84]	; 0x54
 801a24e:	81a3      	strhlt	r3, [r4, #12]
 801a250:	bd10      	pop	{r4, pc}

0801a252 <__swrite>:
 801a252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a256:	461f      	mov	r7, r3
 801a258:	898b      	ldrh	r3, [r1, #12]
 801a25a:	05db      	lsls	r3, r3, #23
 801a25c:	4605      	mov	r5, r0
 801a25e:	460c      	mov	r4, r1
 801a260:	4616      	mov	r6, r2
 801a262:	d505      	bpl.n	801a270 <__swrite+0x1e>
 801a264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a268:	2302      	movs	r3, #2
 801a26a:	2200      	movs	r2, #0
 801a26c:	f000 f9b0 	bl	801a5d0 <_lseek_r>
 801a270:	89a3      	ldrh	r3, [r4, #12]
 801a272:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a276:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a27a:	81a3      	strh	r3, [r4, #12]
 801a27c:	4632      	mov	r2, r6
 801a27e:	463b      	mov	r3, r7
 801a280:	4628      	mov	r0, r5
 801a282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a286:	f000 b9d7 	b.w	801a638 <_write_r>

0801a28a <__sseek>:
 801a28a:	b510      	push	{r4, lr}
 801a28c:	460c      	mov	r4, r1
 801a28e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a292:	f000 f99d 	bl	801a5d0 <_lseek_r>
 801a296:	1c43      	adds	r3, r0, #1
 801a298:	89a3      	ldrh	r3, [r4, #12]
 801a29a:	bf15      	itete	ne
 801a29c:	6560      	strne	r0, [r4, #84]	; 0x54
 801a29e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a2a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a2a6:	81a3      	strheq	r3, [r4, #12]
 801a2a8:	bf18      	it	ne
 801a2aa:	81a3      	strhne	r3, [r4, #12]
 801a2ac:	bd10      	pop	{r4, pc}

0801a2ae <__sclose>:
 801a2ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a2b2:	f000 b927 	b.w	801a504 <_close_r>

0801a2b6 <_vsniprintf_r>:
 801a2b6:	b530      	push	{r4, r5, lr}
 801a2b8:	4614      	mov	r4, r2
 801a2ba:	2c00      	cmp	r4, #0
 801a2bc:	b09b      	sub	sp, #108	; 0x6c
 801a2be:	4605      	mov	r5, r0
 801a2c0:	461a      	mov	r2, r3
 801a2c2:	da05      	bge.n	801a2d0 <_vsniprintf_r+0x1a>
 801a2c4:	238b      	movs	r3, #139	; 0x8b
 801a2c6:	6003      	str	r3, [r0, #0]
 801a2c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a2cc:	b01b      	add	sp, #108	; 0x6c
 801a2ce:	bd30      	pop	{r4, r5, pc}
 801a2d0:	f44f 7302 	mov.w	r3, #520	; 0x208
 801a2d4:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a2d8:	bf14      	ite	ne
 801a2da:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801a2de:	4623      	moveq	r3, r4
 801a2e0:	9302      	str	r3, [sp, #8]
 801a2e2:	9305      	str	r3, [sp, #20]
 801a2e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a2e8:	9100      	str	r1, [sp, #0]
 801a2ea:	9104      	str	r1, [sp, #16]
 801a2ec:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a2f0:	4669      	mov	r1, sp
 801a2f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801a2f4:	f000 face 	bl	801a894 <_svfiprintf_r>
 801a2f8:	1c43      	adds	r3, r0, #1
 801a2fa:	bfbc      	itt	lt
 801a2fc:	238b      	movlt	r3, #139	; 0x8b
 801a2fe:	602b      	strlt	r3, [r5, #0]
 801a300:	2c00      	cmp	r4, #0
 801a302:	d0e3      	beq.n	801a2cc <_vsniprintf_r+0x16>
 801a304:	9b00      	ldr	r3, [sp, #0]
 801a306:	2200      	movs	r2, #0
 801a308:	701a      	strb	r2, [r3, #0]
 801a30a:	e7df      	b.n	801a2cc <_vsniprintf_r+0x16>

0801a30c <vsniprintf>:
 801a30c:	b507      	push	{r0, r1, r2, lr}
 801a30e:	9300      	str	r3, [sp, #0]
 801a310:	4613      	mov	r3, r2
 801a312:	460a      	mov	r2, r1
 801a314:	4601      	mov	r1, r0
 801a316:	4803      	ldr	r0, [pc, #12]	; (801a324 <vsniprintf+0x18>)
 801a318:	6800      	ldr	r0, [r0, #0]
 801a31a:	f7ff ffcc 	bl	801a2b6 <_vsniprintf_r>
 801a31e:	b003      	add	sp, #12
 801a320:	f85d fb04 	ldr.w	pc, [sp], #4
 801a324:	200000e8 	.word	0x200000e8

0801a328 <__swbuf_r>:
 801a328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a32a:	460e      	mov	r6, r1
 801a32c:	4614      	mov	r4, r2
 801a32e:	4605      	mov	r5, r0
 801a330:	b118      	cbz	r0, 801a33a <__swbuf_r+0x12>
 801a332:	6a03      	ldr	r3, [r0, #32]
 801a334:	b90b      	cbnz	r3, 801a33a <__swbuf_r+0x12>
 801a336:	f7ff fe51 	bl	8019fdc <__sinit>
 801a33a:	69a3      	ldr	r3, [r4, #24]
 801a33c:	60a3      	str	r3, [r4, #8]
 801a33e:	89a3      	ldrh	r3, [r4, #12]
 801a340:	071a      	lsls	r2, r3, #28
 801a342:	d525      	bpl.n	801a390 <__swbuf_r+0x68>
 801a344:	6923      	ldr	r3, [r4, #16]
 801a346:	b31b      	cbz	r3, 801a390 <__swbuf_r+0x68>
 801a348:	6823      	ldr	r3, [r4, #0]
 801a34a:	6922      	ldr	r2, [r4, #16]
 801a34c:	1a98      	subs	r0, r3, r2
 801a34e:	6963      	ldr	r3, [r4, #20]
 801a350:	b2f6      	uxtb	r6, r6
 801a352:	4283      	cmp	r3, r0
 801a354:	4637      	mov	r7, r6
 801a356:	dc04      	bgt.n	801a362 <__swbuf_r+0x3a>
 801a358:	4621      	mov	r1, r4
 801a35a:	4628      	mov	r0, r5
 801a35c:	f000 fef2 	bl	801b144 <_fflush_r>
 801a360:	b9e0      	cbnz	r0, 801a39c <__swbuf_r+0x74>
 801a362:	68a3      	ldr	r3, [r4, #8]
 801a364:	3b01      	subs	r3, #1
 801a366:	60a3      	str	r3, [r4, #8]
 801a368:	6823      	ldr	r3, [r4, #0]
 801a36a:	1c5a      	adds	r2, r3, #1
 801a36c:	6022      	str	r2, [r4, #0]
 801a36e:	701e      	strb	r6, [r3, #0]
 801a370:	6962      	ldr	r2, [r4, #20]
 801a372:	1c43      	adds	r3, r0, #1
 801a374:	429a      	cmp	r2, r3
 801a376:	d004      	beq.n	801a382 <__swbuf_r+0x5a>
 801a378:	89a3      	ldrh	r3, [r4, #12]
 801a37a:	07db      	lsls	r3, r3, #31
 801a37c:	d506      	bpl.n	801a38c <__swbuf_r+0x64>
 801a37e:	2e0a      	cmp	r6, #10
 801a380:	d104      	bne.n	801a38c <__swbuf_r+0x64>
 801a382:	4621      	mov	r1, r4
 801a384:	4628      	mov	r0, r5
 801a386:	f000 fedd 	bl	801b144 <_fflush_r>
 801a38a:	b938      	cbnz	r0, 801a39c <__swbuf_r+0x74>
 801a38c:	4638      	mov	r0, r7
 801a38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a390:	4621      	mov	r1, r4
 801a392:	4628      	mov	r0, r5
 801a394:	f000 f806 	bl	801a3a4 <__swsetup_r>
 801a398:	2800      	cmp	r0, #0
 801a39a:	d0d5      	beq.n	801a348 <__swbuf_r+0x20>
 801a39c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a3a0:	e7f4      	b.n	801a38c <__swbuf_r+0x64>
	...

0801a3a4 <__swsetup_r>:
 801a3a4:	b538      	push	{r3, r4, r5, lr}
 801a3a6:	4b2a      	ldr	r3, [pc, #168]	; (801a450 <__swsetup_r+0xac>)
 801a3a8:	4605      	mov	r5, r0
 801a3aa:	6818      	ldr	r0, [r3, #0]
 801a3ac:	460c      	mov	r4, r1
 801a3ae:	b118      	cbz	r0, 801a3b8 <__swsetup_r+0x14>
 801a3b0:	6a03      	ldr	r3, [r0, #32]
 801a3b2:	b90b      	cbnz	r3, 801a3b8 <__swsetup_r+0x14>
 801a3b4:	f7ff fe12 	bl	8019fdc <__sinit>
 801a3b8:	89a3      	ldrh	r3, [r4, #12]
 801a3ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a3be:	0718      	lsls	r0, r3, #28
 801a3c0:	d422      	bmi.n	801a408 <__swsetup_r+0x64>
 801a3c2:	06d9      	lsls	r1, r3, #27
 801a3c4:	d407      	bmi.n	801a3d6 <__swsetup_r+0x32>
 801a3c6:	2309      	movs	r3, #9
 801a3c8:	602b      	str	r3, [r5, #0]
 801a3ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a3ce:	81a3      	strh	r3, [r4, #12]
 801a3d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a3d4:	e034      	b.n	801a440 <__swsetup_r+0x9c>
 801a3d6:	0758      	lsls	r0, r3, #29
 801a3d8:	d512      	bpl.n	801a400 <__swsetup_r+0x5c>
 801a3da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a3dc:	b141      	cbz	r1, 801a3f0 <__swsetup_r+0x4c>
 801a3de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a3e2:	4299      	cmp	r1, r3
 801a3e4:	d002      	beq.n	801a3ec <__swsetup_r+0x48>
 801a3e6:	4628      	mov	r0, r5
 801a3e8:	f000 f9a6 	bl	801a738 <_free_r>
 801a3ec:	2300      	movs	r3, #0
 801a3ee:	6363      	str	r3, [r4, #52]	; 0x34
 801a3f0:	89a3      	ldrh	r3, [r4, #12]
 801a3f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a3f6:	81a3      	strh	r3, [r4, #12]
 801a3f8:	2300      	movs	r3, #0
 801a3fa:	6063      	str	r3, [r4, #4]
 801a3fc:	6923      	ldr	r3, [r4, #16]
 801a3fe:	6023      	str	r3, [r4, #0]
 801a400:	89a3      	ldrh	r3, [r4, #12]
 801a402:	f043 0308 	orr.w	r3, r3, #8
 801a406:	81a3      	strh	r3, [r4, #12]
 801a408:	6923      	ldr	r3, [r4, #16]
 801a40a:	b94b      	cbnz	r3, 801a420 <__swsetup_r+0x7c>
 801a40c:	89a3      	ldrh	r3, [r4, #12]
 801a40e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a416:	d003      	beq.n	801a420 <__swsetup_r+0x7c>
 801a418:	4621      	mov	r1, r4
 801a41a:	4628      	mov	r0, r5
 801a41c:	f000 fef2 	bl	801b204 <__smakebuf_r>
 801a420:	89a0      	ldrh	r0, [r4, #12]
 801a422:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a426:	f010 0301 	ands.w	r3, r0, #1
 801a42a:	d00a      	beq.n	801a442 <__swsetup_r+0x9e>
 801a42c:	2300      	movs	r3, #0
 801a42e:	60a3      	str	r3, [r4, #8]
 801a430:	6963      	ldr	r3, [r4, #20]
 801a432:	425b      	negs	r3, r3
 801a434:	61a3      	str	r3, [r4, #24]
 801a436:	6923      	ldr	r3, [r4, #16]
 801a438:	b943      	cbnz	r3, 801a44c <__swsetup_r+0xa8>
 801a43a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a43e:	d1c4      	bne.n	801a3ca <__swsetup_r+0x26>
 801a440:	bd38      	pop	{r3, r4, r5, pc}
 801a442:	0781      	lsls	r1, r0, #30
 801a444:	bf58      	it	pl
 801a446:	6963      	ldrpl	r3, [r4, #20]
 801a448:	60a3      	str	r3, [r4, #8]
 801a44a:	e7f4      	b.n	801a436 <__swsetup_r+0x92>
 801a44c:	2000      	movs	r0, #0
 801a44e:	e7f7      	b.n	801a440 <__swsetup_r+0x9c>
 801a450:	200000e8 	.word	0x200000e8

0801a454 <memmove>:
 801a454:	4288      	cmp	r0, r1
 801a456:	b510      	push	{r4, lr}
 801a458:	eb01 0402 	add.w	r4, r1, r2
 801a45c:	d902      	bls.n	801a464 <memmove+0x10>
 801a45e:	4284      	cmp	r4, r0
 801a460:	4623      	mov	r3, r4
 801a462:	d807      	bhi.n	801a474 <memmove+0x20>
 801a464:	1e43      	subs	r3, r0, #1
 801a466:	42a1      	cmp	r1, r4
 801a468:	d008      	beq.n	801a47c <memmove+0x28>
 801a46a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a46e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a472:	e7f8      	b.n	801a466 <memmove+0x12>
 801a474:	4402      	add	r2, r0
 801a476:	4601      	mov	r1, r0
 801a478:	428a      	cmp	r2, r1
 801a47a:	d100      	bne.n	801a47e <memmove+0x2a>
 801a47c:	bd10      	pop	{r4, pc}
 801a47e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a482:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a486:	e7f7      	b.n	801a478 <memmove+0x24>

0801a488 <memset>:
 801a488:	4402      	add	r2, r0
 801a48a:	4603      	mov	r3, r0
 801a48c:	4293      	cmp	r3, r2
 801a48e:	d100      	bne.n	801a492 <memset+0xa>
 801a490:	4770      	bx	lr
 801a492:	f803 1b01 	strb.w	r1, [r3], #1
 801a496:	e7f9      	b.n	801a48c <memset+0x4>

0801a498 <strchr>:
 801a498:	b2c9      	uxtb	r1, r1
 801a49a:	4603      	mov	r3, r0
 801a49c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a4a0:	b11a      	cbz	r2, 801a4aa <strchr+0x12>
 801a4a2:	428a      	cmp	r2, r1
 801a4a4:	d1f9      	bne.n	801a49a <strchr+0x2>
 801a4a6:	4618      	mov	r0, r3
 801a4a8:	4770      	bx	lr
 801a4aa:	2900      	cmp	r1, #0
 801a4ac:	bf18      	it	ne
 801a4ae:	2300      	movne	r3, #0
 801a4b0:	e7f9      	b.n	801a4a6 <strchr+0xe>

0801a4b2 <strncmp>:
 801a4b2:	b510      	push	{r4, lr}
 801a4b4:	b16a      	cbz	r2, 801a4d2 <strncmp+0x20>
 801a4b6:	3901      	subs	r1, #1
 801a4b8:	1884      	adds	r4, r0, r2
 801a4ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a4be:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a4c2:	429a      	cmp	r2, r3
 801a4c4:	d103      	bne.n	801a4ce <strncmp+0x1c>
 801a4c6:	42a0      	cmp	r0, r4
 801a4c8:	d001      	beq.n	801a4ce <strncmp+0x1c>
 801a4ca:	2a00      	cmp	r2, #0
 801a4cc:	d1f5      	bne.n	801a4ba <strncmp+0x8>
 801a4ce:	1ad0      	subs	r0, r2, r3
 801a4d0:	bd10      	pop	{r4, pc}
 801a4d2:	4610      	mov	r0, r2
 801a4d4:	e7fc      	b.n	801a4d0 <strncmp+0x1e>

0801a4d6 <strstr>:
 801a4d6:	780a      	ldrb	r2, [r1, #0]
 801a4d8:	b570      	push	{r4, r5, r6, lr}
 801a4da:	b96a      	cbnz	r2, 801a4f8 <strstr+0x22>
 801a4dc:	bd70      	pop	{r4, r5, r6, pc}
 801a4de:	429a      	cmp	r2, r3
 801a4e0:	d109      	bne.n	801a4f6 <strstr+0x20>
 801a4e2:	460c      	mov	r4, r1
 801a4e4:	4605      	mov	r5, r0
 801a4e6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801a4ea:	2b00      	cmp	r3, #0
 801a4ec:	d0f6      	beq.n	801a4dc <strstr+0x6>
 801a4ee:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801a4f2:	429e      	cmp	r6, r3
 801a4f4:	d0f7      	beq.n	801a4e6 <strstr+0x10>
 801a4f6:	3001      	adds	r0, #1
 801a4f8:	7803      	ldrb	r3, [r0, #0]
 801a4fa:	2b00      	cmp	r3, #0
 801a4fc:	d1ef      	bne.n	801a4de <strstr+0x8>
 801a4fe:	4618      	mov	r0, r3
 801a500:	e7ec      	b.n	801a4dc <strstr+0x6>
	...

0801a504 <_close_r>:
 801a504:	b538      	push	{r3, r4, r5, lr}
 801a506:	4d06      	ldr	r5, [pc, #24]	; (801a520 <_close_r+0x1c>)
 801a508:	2300      	movs	r3, #0
 801a50a:	4604      	mov	r4, r0
 801a50c:	4608      	mov	r0, r1
 801a50e:	602b      	str	r3, [r5, #0]
 801a510:	f7e9 fc5a 	bl	8003dc8 <_close>
 801a514:	1c43      	adds	r3, r0, #1
 801a516:	d102      	bne.n	801a51e <_close_r+0x1a>
 801a518:	682b      	ldr	r3, [r5, #0]
 801a51a:	b103      	cbz	r3, 801a51e <_close_r+0x1a>
 801a51c:	6023      	str	r3, [r4, #0]
 801a51e:	bd38      	pop	{r3, r4, r5, pc}
 801a520:	20009ea4 	.word	0x20009ea4

0801a524 <_reclaim_reent>:
 801a524:	4b29      	ldr	r3, [pc, #164]	; (801a5cc <_reclaim_reent+0xa8>)
 801a526:	681b      	ldr	r3, [r3, #0]
 801a528:	4283      	cmp	r3, r0
 801a52a:	b570      	push	{r4, r5, r6, lr}
 801a52c:	4604      	mov	r4, r0
 801a52e:	d04b      	beq.n	801a5c8 <_reclaim_reent+0xa4>
 801a530:	69c3      	ldr	r3, [r0, #28]
 801a532:	b143      	cbz	r3, 801a546 <_reclaim_reent+0x22>
 801a534:	68db      	ldr	r3, [r3, #12]
 801a536:	2b00      	cmp	r3, #0
 801a538:	d144      	bne.n	801a5c4 <_reclaim_reent+0xa0>
 801a53a:	69e3      	ldr	r3, [r4, #28]
 801a53c:	6819      	ldr	r1, [r3, #0]
 801a53e:	b111      	cbz	r1, 801a546 <_reclaim_reent+0x22>
 801a540:	4620      	mov	r0, r4
 801a542:	f000 f8f9 	bl	801a738 <_free_r>
 801a546:	6961      	ldr	r1, [r4, #20]
 801a548:	b111      	cbz	r1, 801a550 <_reclaim_reent+0x2c>
 801a54a:	4620      	mov	r0, r4
 801a54c:	f000 f8f4 	bl	801a738 <_free_r>
 801a550:	69e1      	ldr	r1, [r4, #28]
 801a552:	b111      	cbz	r1, 801a55a <_reclaim_reent+0x36>
 801a554:	4620      	mov	r0, r4
 801a556:	f000 f8ef 	bl	801a738 <_free_r>
 801a55a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a55c:	b111      	cbz	r1, 801a564 <_reclaim_reent+0x40>
 801a55e:	4620      	mov	r0, r4
 801a560:	f000 f8ea 	bl	801a738 <_free_r>
 801a564:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a566:	b111      	cbz	r1, 801a56e <_reclaim_reent+0x4a>
 801a568:	4620      	mov	r0, r4
 801a56a:	f000 f8e5 	bl	801a738 <_free_r>
 801a56e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a570:	b111      	cbz	r1, 801a578 <_reclaim_reent+0x54>
 801a572:	4620      	mov	r0, r4
 801a574:	f000 f8e0 	bl	801a738 <_free_r>
 801a578:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801a57a:	b111      	cbz	r1, 801a582 <_reclaim_reent+0x5e>
 801a57c:	4620      	mov	r0, r4
 801a57e:	f000 f8db 	bl	801a738 <_free_r>
 801a582:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801a584:	b111      	cbz	r1, 801a58c <_reclaim_reent+0x68>
 801a586:	4620      	mov	r0, r4
 801a588:	f000 f8d6 	bl	801a738 <_free_r>
 801a58c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801a58e:	b111      	cbz	r1, 801a596 <_reclaim_reent+0x72>
 801a590:	4620      	mov	r0, r4
 801a592:	f000 f8d1 	bl	801a738 <_free_r>
 801a596:	6a23      	ldr	r3, [r4, #32]
 801a598:	b1b3      	cbz	r3, 801a5c8 <_reclaim_reent+0xa4>
 801a59a:	4620      	mov	r0, r4
 801a59c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a5a0:	4718      	bx	r3
 801a5a2:	5949      	ldr	r1, [r1, r5]
 801a5a4:	b941      	cbnz	r1, 801a5b8 <_reclaim_reent+0x94>
 801a5a6:	3504      	adds	r5, #4
 801a5a8:	69e3      	ldr	r3, [r4, #28]
 801a5aa:	2d80      	cmp	r5, #128	; 0x80
 801a5ac:	68d9      	ldr	r1, [r3, #12]
 801a5ae:	d1f8      	bne.n	801a5a2 <_reclaim_reent+0x7e>
 801a5b0:	4620      	mov	r0, r4
 801a5b2:	f000 f8c1 	bl	801a738 <_free_r>
 801a5b6:	e7c0      	b.n	801a53a <_reclaim_reent+0x16>
 801a5b8:	680e      	ldr	r6, [r1, #0]
 801a5ba:	4620      	mov	r0, r4
 801a5bc:	f000 f8bc 	bl	801a738 <_free_r>
 801a5c0:	4631      	mov	r1, r6
 801a5c2:	e7ef      	b.n	801a5a4 <_reclaim_reent+0x80>
 801a5c4:	2500      	movs	r5, #0
 801a5c6:	e7ef      	b.n	801a5a8 <_reclaim_reent+0x84>
 801a5c8:	bd70      	pop	{r4, r5, r6, pc}
 801a5ca:	bf00      	nop
 801a5cc:	200000e8 	.word	0x200000e8

0801a5d0 <_lseek_r>:
 801a5d0:	b538      	push	{r3, r4, r5, lr}
 801a5d2:	4d07      	ldr	r5, [pc, #28]	; (801a5f0 <_lseek_r+0x20>)
 801a5d4:	4604      	mov	r4, r0
 801a5d6:	4608      	mov	r0, r1
 801a5d8:	4611      	mov	r1, r2
 801a5da:	2200      	movs	r2, #0
 801a5dc:	602a      	str	r2, [r5, #0]
 801a5de:	461a      	mov	r2, r3
 801a5e0:	f7e9 fc09 	bl	8003df6 <_lseek>
 801a5e4:	1c43      	adds	r3, r0, #1
 801a5e6:	d102      	bne.n	801a5ee <_lseek_r+0x1e>
 801a5e8:	682b      	ldr	r3, [r5, #0]
 801a5ea:	b103      	cbz	r3, 801a5ee <_lseek_r+0x1e>
 801a5ec:	6023      	str	r3, [r4, #0]
 801a5ee:	bd38      	pop	{r3, r4, r5, pc}
 801a5f0:	20009ea4 	.word	0x20009ea4

0801a5f4 <_read_r>:
 801a5f4:	b538      	push	{r3, r4, r5, lr}
 801a5f6:	4d07      	ldr	r5, [pc, #28]	; (801a614 <_read_r+0x20>)
 801a5f8:	4604      	mov	r4, r0
 801a5fa:	4608      	mov	r0, r1
 801a5fc:	4611      	mov	r1, r2
 801a5fe:	2200      	movs	r2, #0
 801a600:	602a      	str	r2, [r5, #0]
 801a602:	461a      	mov	r2, r3
 801a604:	f7e9 fc08 	bl	8003e18 <_read>
 801a608:	1c43      	adds	r3, r0, #1
 801a60a:	d102      	bne.n	801a612 <_read_r+0x1e>
 801a60c:	682b      	ldr	r3, [r5, #0]
 801a60e:	b103      	cbz	r3, 801a612 <_read_r+0x1e>
 801a610:	6023      	str	r3, [r4, #0]
 801a612:	bd38      	pop	{r3, r4, r5, pc}
 801a614:	20009ea4 	.word	0x20009ea4

0801a618 <_sbrk_r>:
 801a618:	b538      	push	{r3, r4, r5, lr}
 801a61a:	4d06      	ldr	r5, [pc, #24]	; (801a634 <_sbrk_r+0x1c>)
 801a61c:	2300      	movs	r3, #0
 801a61e:	4604      	mov	r4, r0
 801a620:	4608      	mov	r0, r1
 801a622:	602b      	str	r3, [r5, #0]
 801a624:	f7ea f888 	bl	8004738 <_sbrk>
 801a628:	1c43      	adds	r3, r0, #1
 801a62a:	d102      	bne.n	801a632 <_sbrk_r+0x1a>
 801a62c:	682b      	ldr	r3, [r5, #0]
 801a62e:	b103      	cbz	r3, 801a632 <_sbrk_r+0x1a>
 801a630:	6023      	str	r3, [r4, #0]
 801a632:	bd38      	pop	{r3, r4, r5, pc}
 801a634:	20009ea4 	.word	0x20009ea4

0801a638 <_write_r>:
 801a638:	b538      	push	{r3, r4, r5, lr}
 801a63a:	4d07      	ldr	r5, [pc, #28]	; (801a658 <_write_r+0x20>)
 801a63c:	4604      	mov	r4, r0
 801a63e:	4608      	mov	r0, r1
 801a640:	4611      	mov	r1, r2
 801a642:	2200      	movs	r2, #0
 801a644:	602a      	str	r2, [r5, #0]
 801a646:	461a      	mov	r2, r3
 801a648:	f7e9 fb92 	bl	8003d70 <_write>
 801a64c:	1c43      	adds	r3, r0, #1
 801a64e:	d102      	bne.n	801a656 <_write_r+0x1e>
 801a650:	682b      	ldr	r3, [r5, #0]
 801a652:	b103      	cbz	r3, 801a656 <_write_r+0x1e>
 801a654:	6023      	str	r3, [r4, #0]
 801a656:	bd38      	pop	{r3, r4, r5, pc}
 801a658:	20009ea4 	.word	0x20009ea4

0801a65c <__errno>:
 801a65c:	4b01      	ldr	r3, [pc, #4]	; (801a664 <__errno+0x8>)
 801a65e:	6818      	ldr	r0, [r3, #0]
 801a660:	4770      	bx	lr
 801a662:	bf00      	nop
 801a664:	200000e8 	.word	0x200000e8

0801a668 <__libc_init_array>:
 801a668:	b570      	push	{r4, r5, r6, lr}
 801a66a:	4d0d      	ldr	r5, [pc, #52]	; (801a6a0 <__libc_init_array+0x38>)
 801a66c:	4c0d      	ldr	r4, [pc, #52]	; (801a6a4 <__libc_init_array+0x3c>)
 801a66e:	1b64      	subs	r4, r4, r5
 801a670:	10a4      	asrs	r4, r4, #2
 801a672:	2600      	movs	r6, #0
 801a674:	42a6      	cmp	r6, r4
 801a676:	d109      	bne.n	801a68c <__libc_init_array+0x24>
 801a678:	4d0b      	ldr	r5, [pc, #44]	; (801a6a8 <__libc_init_array+0x40>)
 801a67a:	4c0c      	ldr	r4, [pc, #48]	; (801a6ac <__libc_init_array+0x44>)
 801a67c:	f000 fe6e 	bl	801b35c <_init>
 801a680:	1b64      	subs	r4, r4, r5
 801a682:	10a4      	asrs	r4, r4, #2
 801a684:	2600      	movs	r6, #0
 801a686:	42a6      	cmp	r6, r4
 801a688:	d105      	bne.n	801a696 <__libc_init_array+0x2e>
 801a68a:	bd70      	pop	{r4, r5, r6, pc}
 801a68c:	f855 3b04 	ldr.w	r3, [r5], #4
 801a690:	4798      	blx	r3
 801a692:	3601      	adds	r6, #1
 801a694:	e7ee      	b.n	801a674 <__libc_init_array+0xc>
 801a696:	f855 3b04 	ldr.w	r3, [r5], #4
 801a69a:	4798      	blx	r3
 801a69c:	3601      	adds	r6, #1
 801a69e:	e7f2      	b.n	801a686 <__libc_init_array+0x1e>
 801a6a0:	0801c2d0 	.word	0x0801c2d0
 801a6a4:	0801c2d0 	.word	0x0801c2d0
 801a6a8:	0801c2d0 	.word	0x0801c2d0
 801a6ac:	0801c2d4 	.word	0x0801c2d4

0801a6b0 <__retarget_lock_init_recursive>:
 801a6b0:	4770      	bx	lr

0801a6b2 <__retarget_lock_acquire_recursive>:
 801a6b2:	4770      	bx	lr

0801a6b4 <__retarget_lock_release_recursive>:
 801a6b4:	4770      	bx	lr

0801a6b6 <strcpy>:
 801a6b6:	4603      	mov	r3, r0
 801a6b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a6bc:	f803 2b01 	strb.w	r2, [r3], #1
 801a6c0:	2a00      	cmp	r2, #0
 801a6c2:	d1f9      	bne.n	801a6b8 <strcpy+0x2>
 801a6c4:	4770      	bx	lr

0801a6c6 <memcpy>:
 801a6c6:	440a      	add	r2, r1
 801a6c8:	4291      	cmp	r1, r2
 801a6ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801a6ce:	d100      	bne.n	801a6d2 <memcpy+0xc>
 801a6d0:	4770      	bx	lr
 801a6d2:	b510      	push	{r4, lr}
 801a6d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a6d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a6dc:	4291      	cmp	r1, r2
 801a6de:	d1f9      	bne.n	801a6d4 <memcpy+0xe>
 801a6e0:	bd10      	pop	{r4, pc}
	...

0801a6e4 <__assert_func>:
 801a6e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a6e6:	4614      	mov	r4, r2
 801a6e8:	461a      	mov	r2, r3
 801a6ea:	4b09      	ldr	r3, [pc, #36]	; (801a710 <__assert_func+0x2c>)
 801a6ec:	681b      	ldr	r3, [r3, #0]
 801a6ee:	4605      	mov	r5, r0
 801a6f0:	68d8      	ldr	r0, [r3, #12]
 801a6f2:	b14c      	cbz	r4, 801a708 <__assert_func+0x24>
 801a6f4:	4b07      	ldr	r3, [pc, #28]	; (801a714 <__assert_func+0x30>)
 801a6f6:	9100      	str	r1, [sp, #0]
 801a6f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a6fc:	4906      	ldr	r1, [pc, #24]	; (801a718 <__assert_func+0x34>)
 801a6fe:	462b      	mov	r3, r5
 801a700:	f000 fd48 	bl	801b194 <fiprintf>
 801a704:	f000 fddc 	bl	801b2c0 <abort>
 801a708:	4b04      	ldr	r3, [pc, #16]	; (801a71c <__assert_func+0x38>)
 801a70a:	461c      	mov	r4, r3
 801a70c:	e7f3      	b.n	801a6f6 <__assert_func+0x12>
 801a70e:	bf00      	nop
 801a710:	200000e8 	.word	0x200000e8
 801a714:	0801c258 	.word	0x0801c258
 801a718:	0801c265 	.word	0x0801c265
 801a71c:	0801c293 	.word	0x0801c293

0801a720 <__env_lock>:
 801a720:	4801      	ldr	r0, [pc, #4]	; (801a728 <__env_lock+0x8>)
 801a722:	f7ff bfc6 	b.w	801a6b2 <__retarget_lock_acquire_recursive>
 801a726:	bf00      	nop
 801a728:	20009ea8 	.word	0x20009ea8

0801a72c <__env_unlock>:
 801a72c:	4801      	ldr	r0, [pc, #4]	; (801a734 <__env_unlock+0x8>)
 801a72e:	f7ff bfc1 	b.w	801a6b4 <__retarget_lock_release_recursive>
 801a732:	bf00      	nop
 801a734:	20009ea8 	.word	0x20009ea8

0801a738 <_free_r>:
 801a738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a73a:	2900      	cmp	r1, #0
 801a73c:	d044      	beq.n	801a7c8 <_free_r+0x90>
 801a73e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a742:	9001      	str	r0, [sp, #4]
 801a744:	2b00      	cmp	r3, #0
 801a746:	f1a1 0404 	sub.w	r4, r1, #4
 801a74a:	bfb8      	it	lt
 801a74c:	18e4      	addlt	r4, r4, r3
 801a74e:	f7ff fa8d 	bl	8019c6c <__malloc_lock>
 801a752:	4a1e      	ldr	r2, [pc, #120]	; (801a7cc <_free_r+0x94>)
 801a754:	9801      	ldr	r0, [sp, #4]
 801a756:	6813      	ldr	r3, [r2, #0]
 801a758:	b933      	cbnz	r3, 801a768 <_free_r+0x30>
 801a75a:	6063      	str	r3, [r4, #4]
 801a75c:	6014      	str	r4, [r2, #0]
 801a75e:	b003      	add	sp, #12
 801a760:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a764:	f7ff ba88 	b.w	8019c78 <__malloc_unlock>
 801a768:	42a3      	cmp	r3, r4
 801a76a:	d908      	bls.n	801a77e <_free_r+0x46>
 801a76c:	6825      	ldr	r5, [r4, #0]
 801a76e:	1961      	adds	r1, r4, r5
 801a770:	428b      	cmp	r3, r1
 801a772:	bf01      	itttt	eq
 801a774:	6819      	ldreq	r1, [r3, #0]
 801a776:	685b      	ldreq	r3, [r3, #4]
 801a778:	1949      	addeq	r1, r1, r5
 801a77a:	6021      	streq	r1, [r4, #0]
 801a77c:	e7ed      	b.n	801a75a <_free_r+0x22>
 801a77e:	461a      	mov	r2, r3
 801a780:	685b      	ldr	r3, [r3, #4]
 801a782:	b10b      	cbz	r3, 801a788 <_free_r+0x50>
 801a784:	42a3      	cmp	r3, r4
 801a786:	d9fa      	bls.n	801a77e <_free_r+0x46>
 801a788:	6811      	ldr	r1, [r2, #0]
 801a78a:	1855      	adds	r5, r2, r1
 801a78c:	42a5      	cmp	r5, r4
 801a78e:	d10b      	bne.n	801a7a8 <_free_r+0x70>
 801a790:	6824      	ldr	r4, [r4, #0]
 801a792:	4421      	add	r1, r4
 801a794:	1854      	adds	r4, r2, r1
 801a796:	42a3      	cmp	r3, r4
 801a798:	6011      	str	r1, [r2, #0]
 801a79a:	d1e0      	bne.n	801a75e <_free_r+0x26>
 801a79c:	681c      	ldr	r4, [r3, #0]
 801a79e:	685b      	ldr	r3, [r3, #4]
 801a7a0:	6053      	str	r3, [r2, #4]
 801a7a2:	440c      	add	r4, r1
 801a7a4:	6014      	str	r4, [r2, #0]
 801a7a6:	e7da      	b.n	801a75e <_free_r+0x26>
 801a7a8:	d902      	bls.n	801a7b0 <_free_r+0x78>
 801a7aa:	230c      	movs	r3, #12
 801a7ac:	6003      	str	r3, [r0, #0]
 801a7ae:	e7d6      	b.n	801a75e <_free_r+0x26>
 801a7b0:	6825      	ldr	r5, [r4, #0]
 801a7b2:	1961      	adds	r1, r4, r5
 801a7b4:	428b      	cmp	r3, r1
 801a7b6:	bf04      	itt	eq
 801a7b8:	6819      	ldreq	r1, [r3, #0]
 801a7ba:	685b      	ldreq	r3, [r3, #4]
 801a7bc:	6063      	str	r3, [r4, #4]
 801a7be:	bf04      	itt	eq
 801a7c0:	1949      	addeq	r1, r1, r5
 801a7c2:	6021      	streq	r1, [r4, #0]
 801a7c4:	6054      	str	r4, [r2, #4]
 801a7c6:	e7ca      	b.n	801a75e <_free_r+0x26>
 801a7c8:	b003      	add	sp, #12
 801a7ca:	bd30      	pop	{r4, r5, pc}
 801a7cc:	20009d60 	.word	0x20009d60

0801a7d0 <_malloc_usable_size_r>:
 801a7d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a7d4:	1f18      	subs	r0, r3, #4
 801a7d6:	2b00      	cmp	r3, #0
 801a7d8:	bfbc      	itt	lt
 801a7da:	580b      	ldrlt	r3, [r1, r0]
 801a7dc:	18c0      	addlt	r0, r0, r3
 801a7de:	4770      	bx	lr

0801a7e0 <__ssputs_r>:
 801a7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a7e4:	688e      	ldr	r6, [r1, #8]
 801a7e6:	461f      	mov	r7, r3
 801a7e8:	42be      	cmp	r6, r7
 801a7ea:	680b      	ldr	r3, [r1, #0]
 801a7ec:	4682      	mov	sl, r0
 801a7ee:	460c      	mov	r4, r1
 801a7f0:	4690      	mov	r8, r2
 801a7f2:	d82c      	bhi.n	801a84e <__ssputs_r+0x6e>
 801a7f4:	898a      	ldrh	r2, [r1, #12]
 801a7f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a7fa:	d026      	beq.n	801a84a <__ssputs_r+0x6a>
 801a7fc:	6965      	ldr	r5, [r4, #20]
 801a7fe:	6909      	ldr	r1, [r1, #16]
 801a800:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a804:	eba3 0901 	sub.w	r9, r3, r1
 801a808:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a80c:	1c7b      	adds	r3, r7, #1
 801a80e:	444b      	add	r3, r9
 801a810:	106d      	asrs	r5, r5, #1
 801a812:	429d      	cmp	r5, r3
 801a814:	bf38      	it	cc
 801a816:	461d      	movcc	r5, r3
 801a818:	0553      	lsls	r3, r2, #21
 801a81a:	d527      	bpl.n	801a86c <__ssputs_r+0x8c>
 801a81c:	4629      	mov	r1, r5
 801a81e:	f7ff f9a5 	bl	8019b6c <_malloc_r>
 801a822:	4606      	mov	r6, r0
 801a824:	b360      	cbz	r0, 801a880 <__ssputs_r+0xa0>
 801a826:	6921      	ldr	r1, [r4, #16]
 801a828:	464a      	mov	r2, r9
 801a82a:	f7ff ff4c 	bl	801a6c6 <memcpy>
 801a82e:	89a3      	ldrh	r3, [r4, #12]
 801a830:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a838:	81a3      	strh	r3, [r4, #12]
 801a83a:	6126      	str	r6, [r4, #16]
 801a83c:	6165      	str	r5, [r4, #20]
 801a83e:	444e      	add	r6, r9
 801a840:	eba5 0509 	sub.w	r5, r5, r9
 801a844:	6026      	str	r6, [r4, #0]
 801a846:	60a5      	str	r5, [r4, #8]
 801a848:	463e      	mov	r6, r7
 801a84a:	42be      	cmp	r6, r7
 801a84c:	d900      	bls.n	801a850 <__ssputs_r+0x70>
 801a84e:	463e      	mov	r6, r7
 801a850:	6820      	ldr	r0, [r4, #0]
 801a852:	4632      	mov	r2, r6
 801a854:	4641      	mov	r1, r8
 801a856:	f7ff fdfd 	bl	801a454 <memmove>
 801a85a:	68a3      	ldr	r3, [r4, #8]
 801a85c:	1b9b      	subs	r3, r3, r6
 801a85e:	60a3      	str	r3, [r4, #8]
 801a860:	6823      	ldr	r3, [r4, #0]
 801a862:	4433      	add	r3, r6
 801a864:	6023      	str	r3, [r4, #0]
 801a866:	2000      	movs	r0, #0
 801a868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a86c:	462a      	mov	r2, r5
 801a86e:	f7ff fa7d 	bl	8019d6c <_realloc_r>
 801a872:	4606      	mov	r6, r0
 801a874:	2800      	cmp	r0, #0
 801a876:	d1e0      	bne.n	801a83a <__ssputs_r+0x5a>
 801a878:	6921      	ldr	r1, [r4, #16]
 801a87a:	4650      	mov	r0, sl
 801a87c:	f7ff ff5c 	bl	801a738 <_free_r>
 801a880:	230c      	movs	r3, #12
 801a882:	f8ca 3000 	str.w	r3, [sl]
 801a886:	89a3      	ldrh	r3, [r4, #12]
 801a888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a88c:	81a3      	strh	r3, [r4, #12]
 801a88e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a892:	e7e9      	b.n	801a868 <__ssputs_r+0x88>

0801a894 <_svfiprintf_r>:
 801a894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a898:	4698      	mov	r8, r3
 801a89a:	898b      	ldrh	r3, [r1, #12]
 801a89c:	061b      	lsls	r3, r3, #24
 801a89e:	b09d      	sub	sp, #116	; 0x74
 801a8a0:	4607      	mov	r7, r0
 801a8a2:	460d      	mov	r5, r1
 801a8a4:	4614      	mov	r4, r2
 801a8a6:	d50e      	bpl.n	801a8c6 <_svfiprintf_r+0x32>
 801a8a8:	690b      	ldr	r3, [r1, #16]
 801a8aa:	b963      	cbnz	r3, 801a8c6 <_svfiprintf_r+0x32>
 801a8ac:	2140      	movs	r1, #64	; 0x40
 801a8ae:	f7ff f95d 	bl	8019b6c <_malloc_r>
 801a8b2:	6028      	str	r0, [r5, #0]
 801a8b4:	6128      	str	r0, [r5, #16]
 801a8b6:	b920      	cbnz	r0, 801a8c2 <_svfiprintf_r+0x2e>
 801a8b8:	230c      	movs	r3, #12
 801a8ba:	603b      	str	r3, [r7, #0]
 801a8bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a8c0:	e0d0      	b.n	801aa64 <_svfiprintf_r+0x1d0>
 801a8c2:	2340      	movs	r3, #64	; 0x40
 801a8c4:	616b      	str	r3, [r5, #20]
 801a8c6:	2300      	movs	r3, #0
 801a8c8:	9309      	str	r3, [sp, #36]	; 0x24
 801a8ca:	2320      	movs	r3, #32
 801a8cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a8d0:	f8cd 800c 	str.w	r8, [sp, #12]
 801a8d4:	2330      	movs	r3, #48	; 0x30
 801a8d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801aa7c <_svfiprintf_r+0x1e8>
 801a8da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a8de:	f04f 0901 	mov.w	r9, #1
 801a8e2:	4623      	mov	r3, r4
 801a8e4:	469a      	mov	sl, r3
 801a8e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a8ea:	b10a      	cbz	r2, 801a8f0 <_svfiprintf_r+0x5c>
 801a8ec:	2a25      	cmp	r2, #37	; 0x25
 801a8ee:	d1f9      	bne.n	801a8e4 <_svfiprintf_r+0x50>
 801a8f0:	ebba 0b04 	subs.w	fp, sl, r4
 801a8f4:	d00b      	beq.n	801a90e <_svfiprintf_r+0x7a>
 801a8f6:	465b      	mov	r3, fp
 801a8f8:	4622      	mov	r2, r4
 801a8fa:	4629      	mov	r1, r5
 801a8fc:	4638      	mov	r0, r7
 801a8fe:	f7ff ff6f 	bl	801a7e0 <__ssputs_r>
 801a902:	3001      	adds	r0, #1
 801a904:	f000 80a9 	beq.w	801aa5a <_svfiprintf_r+0x1c6>
 801a908:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a90a:	445a      	add	r2, fp
 801a90c:	9209      	str	r2, [sp, #36]	; 0x24
 801a90e:	f89a 3000 	ldrb.w	r3, [sl]
 801a912:	2b00      	cmp	r3, #0
 801a914:	f000 80a1 	beq.w	801aa5a <_svfiprintf_r+0x1c6>
 801a918:	2300      	movs	r3, #0
 801a91a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a91e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a922:	f10a 0a01 	add.w	sl, sl, #1
 801a926:	9304      	str	r3, [sp, #16]
 801a928:	9307      	str	r3, [sp, #28]
 801a92a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a92e:	931a      	str	r3, [sp, #104]	; 0x68
 801a930:	4654      	mov	r4, sl
 801a932:	2205      	movs	r2, #5
 801a934:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a938:	4850      	ldr	r0, [pc, #320]	; (801aa7c <_svfiprintf_r+0x1e8>)
 801a93a:	f7e5 fc69 	bl	8000210 <memchr>
 801a93e:	9a04      	ldr	r2, [sp, #16]
 801a940:	b9d8      	cbnz	r0, 801a97a <_svfiprintf_r+0xe6>
 801a942:	06d0      	lsls	r0, r2, #27
 801a944:	bf44      	itt	mi
 801a946:	2320      	movmi	r3, #32
 801a948:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a94c:	0711      	lsls	r1, r2, #28
 801a94e:	bf44      	itt	mi
 801a950:	232b      	movmi	r3, #43	; 0x2b
 801a952:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a956:	f89a 3000 	ldrb.w	r3, [sl]
 801a95a:	2b2a      	cmp	r3, #42	; 0x2a
 801a95c:	d015      	beq.n	801a98a <_svfiprintf_r+0xf6>
 801a95e:	9a07      	ldr	r2, [sp, #28]
 801a960:	4654      	mov	r4, sl
 801a962:	2000      	movs	r0, #0
 801a964:	f04f 0c0a 	mov.w	ip, #10
 801a968:	4621      	mov	r1, r4
 801a96a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a96e:	3b30      	subs	r3, #48	; 0x30
 801a970:	2b09      	cmp	r3, #9
 801a972:	d94d      	bls.n	801aa10 <_svfiprintf_r+0x17c>
 801a974:	b1b0      	cbz	r0, 801a9a4 <_svfiprintf_r+0x110>
 801a976:	9207      	str	r2, [sp, #28]
 801a978:	e014      	b.n	801a9a4 <_svfiprintf_r+0x110>
 801a97a:	eba0 0308 	sub.w	r3, r0, r8
 801a97e:	fa09 f303 	lsl.w	r3, r9, r3
 801a982:	4313      	orrs	r3, r2
 801a984:	9304      	str	r3, [sp, #16]
 801a986:	46a2      	mov	sl, r4
 801a988:	e7d2      	b.n	801a930 <_svfiprintf_r+0x9c>
 801a98a:	9b03      	ldr	r3, [sp, #12]
 801a98c:	1d19      	adds	r1, r3, #4
 801a98e:	681b      	ldr	r3, [r3, #0]
 801a990:	9103      	str	r1, [sp, #12]
 801a992:	2b00      	cmp	r3, #0
 801a994:	bfbb      	ittet	lt
 801a996:	425b      	neglt	r3, r3
 801a998:	f042 0202 	orrlt.w	r2, r2, #2
 801a99c:	9307      	strge	r3, [sp, #28]
 801a99e:	9307      	strlt	r3, [sp, #28]
 801a9a0:	bfb8      	it	lt
 801a9a2:	9204      	strlt	r2, [sp, #16]
 801a9a4:	7823      	ldrb	r3, [r4, #0]
 801a9a6:	2b2e      	cmp	r3, #46	; 0x2e
 801a9a8:	d10c      	bne.n	801a9c4 <_svfiprintf_r+0x130>
 801a9aa:	7863      	ldrb	r3, [r4, #1]
 801a9ac:	2b2a      	cmp	r3, #42	; 0x2a
 801a9ae:	d134      	bne.n	801aa1a <_svfiprintf_r+0x186>
 801a9b0:	9b03      	ldr	r3, [sp, #12]
 801a9b2:	1d1a      	adds	r2, r3, #4
 801a9b4:	681b      	ldr	r3, [r3, #0]
 801a9b6:	9203      	str	r2, [sp, #12]
 801a9b8:	2b00      	cmp	r3, #0
 801a9ba:	bfb8      	it	lt
 801a9bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a9c0:	3402      	adds	r4, #2
 801a9c2:	9305      	str	r3, [sp, #20]
 801a9c4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801aa8c <_svfiprintf_r+0x1f8>
 801a9c8:	7821      	ldrb	r1, [r4, #0]
 801a9ca:	2203      	movs	r2, #3
 801a9cc:	4650      	mov	r0, sl
 801a9ce:	f7e5 fc1f 	bl	8000210 <memchr>
 801a9d2:	b138      	cbz	r0, 801a9e4 <_svfiprintf_r+0x150>
 801a9d4:	9b04      	ldr	r3, [sp, #16]
 801a9d6:	eba0 000a 	sub.w	r0, r0, sl
 801a9da:	2240      	movs	r2, #64	; 0x40
 801a9dc:	4082      	lsls	r2, r0
 801a9de:	4313      	orrs	r3, r2
 801a9e0:	3401      	adds	r4, #1
 801a9e2:	9304      	str	r3, [sp, #16]
 801a9e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a9e8:	4825      	ldr	r0, [pc, #148]	; (801aa80 <_svfiprintf_r+0x1ec>)
 801a9ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a9ee:	2206      	movs	r2, #6
 801a9f0:	f7e5 fc0e 	bl	8000210 <memchr>
 801a9f4:	2800      	cmp	r0, #0
 801a9f6:	d038      	beq.n	801aa6a <_svfiprintf_r+0x1d6>
 801a9f8:	4b22      	ldr	r3, [pc, #136]	; (801aa84 <_svfiprintf_r+0x1f0>)
 801a9fa:	bb1b      	cbnz	r3, 801aa44 <_svfiprintf_r+0x1b0>
 801a9fc:	9b03      	ldr	r3, [sp, #12]
 801a9fe:	3307      	adds	r3, #7
 801aa00:	f023 0307 	bic.w	r3, r3, #7
 801aa04:	3308      	adds	r3, #8
 801aa06:	9303      	str	r3, [sp, #12]
 801aa08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa0a:	4433      	add	r3, r6
 801aa0c:	9309      	str	r3, [sp, #36]	; 0x24
 801aa0e:	e768      	b.n	801a8e2 <_svfiprintf_r+0x4e>
 801aa10:	fb0c 3202 	mla	r2, ip, r2, r3
 801aa14:	460c      	mov	r4, r1
 801aa16:	2001      	movs	r0, #1
 801aa18:	e7a6      	b.n	801a968 <_svfiprintf_r+0xd4>
 801aa1a:	2300      	movs	r3, #0
 801aa1c:	3401      	adds	r4, #1
 801aa1e:	9305      	str	r3, [sp, #20]
 801aa20:	4619      	mov	r1, r3
 801aa22:	f04f 0c0a 	mov.w	ip, #10
 801aa26:	4620      	mov	r0, r4
 801aa28:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aa2c:	3a30      	subs	r2, #48	; 0x30
 801aa2e:	2a09      	cmp	r2, #9
 801aa30:	d903      	bls.n	801aa3a <_svfiprintf_r+0x1a6>
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d0c6      	beq.n	801a9c4 <_svfiprintf_r+0x130>
 801aa36:	9105      	str	r1, [sp, #20]
 801aa38:	e7c4      	b.n	801a9c4 <_svfiprintf_r+0x130>
 801aa3a:	fb0c 2101 	mla	r1, ip, r1, r2
 801aa3e:	4604      	mov	r4, r0
 801aa40:	2301      	movs	r3, #1
 801aa42:	e7f0      	b.n	801aa26 <_svfiprintf_r+0x192>
 801aa44:	ab03      	add	r3, sp, #12
 801aa46:	9300      	str	r3, [sp, #0]
 801aa48:	462a      	mov	r2, r5
 801aa4a:	4b0f      	ldr	r3, [pc, #60]	; (801aa88 <_svfiprintf_r+0x1f4>)
 801aa4c:	a904      	add	r1, sp, #16
 801aa4e:	4638      	mov	r0, r7
 801aa50:	f3af 8000 	nop.w
 801aa54:	1c42      	adds	r2, r0, #1
 801aa56:	4606      	mov	r6, r0
 801aa58:	d1d6      	bne.n	801aa08 <_svfiprintf_r+0x174>
 801aa5a:	89ab      	ldrh	r3, [r5, #12]
 801aa5c:	065b      	lsls	r3, r3, #25
 801aa5e:	f53f af2d 	bmi.w	801a8bc <_svfiprintf_r+0x28>
 801aa62:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aa64:	b01d      	add	sp, #116	; 0x74
 801aa66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa6a:	ab03      	add	r3, sp, #12
 801aa6c:	9300      	str	r3, [sp, #0]
 801aa6e:	462a      	mov	r2, r5
 801aa70:	4b05      	ldr	r3, [pc, #20]	; (801aa88 <_svfiprintf_r+0x1f4>)
 801aa72:	a904      	add	r1, sp, #16
 801aa74:	4638      	mov	r0, r7
 801aa76:	f000 f9bd 	bl	801adf4 <_printf_i>
 801aa7a:	e7eb      	b.n	801aa54 <_svfiprintf_r+0x1c0>
 801aa7c:	0801c294 	.word	0x0801c294
 801aa80:	0801c29e 	.word	0x0801c29e
 801aa84:	00000000 	.word	0x00000000
 801aa88:	0801a7e1 	.word	0x0801a7e1
 801aa8c:	0801c29a 	.word	0x0801c29a

0801aa90 <__sfputc_r>:
 801aa90:	6893      	ldr	r3, [r2, #8]
 801aa92:	3b01      	subs	r3, #1
 801aa94:	2b00      	cmp	r3, #0
 801aa96:	b410      	push	{r4}
 801aa98:	6093      	str	r3, [r2, #8]
 801aa9a:	da08      	bge.n	801aaae <__sfputc_r+0x1e>
 801aa9c:	6994      	ldr	r4, [r2, #24]
 801aa9e:	42a3      	cmp	r3, r4
 801aaa0:	db01      	blt.n	801aaa6 <__sfputc_r+0x16>
 801aaa2:	290a      	cmp	r1, #10
 801aaa4:	d103      	bne.n	801aaae <__sfputc_r+0x1e>
 801aaa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aaaa:	f7ff bc3d 	b.w	801a328 <__swbuf_r>
 801aaae:	6813      	ldr	r3, [r2, #0]
 801aab0:	1c58      	adds	r0, r3, #1
 801aab2:	6010      	str	r0, [r2, #0]
 801aab4:	7019      	strb	r1, [r3, #0]
 801aab6:	4608      	mov	r0, r1
 801aab8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aabc:	4770      	bx	lr

0801aabe <__sfputs_r>:
 801aabe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aac0:	4606      	mov	r6, r0
 801aac2:	460f      	mov	r7, r1
 801aac4:	4614      	mov	r4, r2
 801aac6:	18d5      	adds	r5, r2, r3
 801aac8:	42ac      	cmp	r4, r5
 801aaca:	d101      	bne.n	801aad0 <__sfputs_r+0x12>
 801aacc:	2000      	movs	r0, #0
 801aace:	e007      	b.n	801aae0 <__sfputs_r+0x22>
 801aad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aad4:	463a      	mov	r2, r7
 801aad6:	4630      	mov	r0, r6
 801aad8:	f7ff ffda 	bl	801aa90 <__sfputc_r>
 801aadc:	1c43      	adds	r3, r0, #1
 801aade:	d1f3      	bne.n	801aac8 <__sfputs_r+0xa>
 801aae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801aae4 <_vfiprintf_r>:
 801aae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aae8:	460d      	mov	r5, r1
 801aaea:	b09d      	sub	sp, #116	; 0x74
 801aaec:	4614      	mov	r4, r2
 801aaee:	4698      	mov	r8, r3
 801aaf0:	4606      	mov	r6, r0
 801aaf2:	b118      	cbz	r0, 801aafc <_vfiprintf_r+0x18>
 801aaf4:	6a03      	ldr	r3, [r0, #32]
 801aaf6:	b90b      	cbnz	r3, 801aafc <_vfiprintf_r+0x18>
 801aaf8:	f7ff fa70 	bl	8019fdc <__sinit>
 801aafc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801aafe:	07d9      	lsls	r1, r3, #31
 801ab00:	d405      	bmi.n	801ab0e <_vfiprintf_r+0x2a>
 801ab02:	89ab      	ldrh	r3, [r5, #12]
 801ab04:	059a      	lsls	r2, r3, #22
 801ab06:	d402      	bmi.n	801ab0e <_vfiprintf_r+0x2a>
 801ab08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ab0a:	f7ff fdd2 	bl	801a6b2 <__retarget_lock_acquire_recursive>
 801ab0e:	89ab      	ldrh	r3, [r5, #12]
 801ab10:	071b      	lsls	r3, r3, #28
 801ab12:	d501      	bpl.n	801ab18 <_vfiprintf_r+0x34>
 801ab14:	692b      	ldr	r3, [r5, #16]
 801ab16:	b99b      	cbnz	r3, 801ab40 <_vfiprintf_r+0x5c>
 801ab18:	4629      	mov	r1, r5
 801ab1a:	4630      	mov	r0, r6
 801ab1c:	f7ff fc42 	bl	801a3a4 <__swsetup_r>
 801ab20:	b170      	cbz	r0, 801ab40 <_vfiprintf_r+0x5c>
 801ab22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ab24:	07dc      	lsls	r4, r3, #31
 801ab26:	d504      	bpl.n	801ab32 <_vfiprintf_r+0x4e>
 801ab28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ab2c:	b01d      	add	sp, #116	; 0x74
 801ab2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab32:	89ab      	ldrh	r3, [r5, #12]
 801ab34:	0598      	lsls	r0, r3, #22
 801ab36:	d4f7      	bmi.n	801ab28 <_vfiprintf_r+0x44>
 801ab38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ab3a:	f7ff fdbb 	bl	801a6b4 <__retarget_lock_release_recursive>
 801ab3e:	e7f3      	b.n	801ab28 <_vfiprintf_r+0x44>
 801ab40:	2300      	movs	r3, #0
 801ab42:	9309      	str	r3, [sp, #36]	; 0x24
 801ab44:	2320      	movs	r3, #32
 801ab46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ab4a:	f8cd 800c 	str.w	r8, [sp, #12]
 801ab4e:	2330      	movs	r3, #48	; 0x30
 801ab50:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801ad04 <_vfiprintf_r+0x220>
 801ab54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ab58:	f04f 0901 	mov.w	r9, #1
 801ab5c:	4623      	mov	r3, r4
 801ab5e:	469a      	mov	sl, r3
 801ab60:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ab64:	b10a      	cbz	r2, 801ab6a <_vfiprintf_r+0x86>
 801ab66:	2a25      	cmp	r2, #37	; 0x25
 801ab68:	d1f9      	bne.n	801ab5e <_vfiprintf_r+0x7a>
 801ab6a:	ebba 0b04 	subs.w	fp, sl, r4
 801ab6e:	d00b      	beq.n	801ab88 <_vfiprintf_r+0xa4>
 801ab70:	465b      	mov	r3, fp
 801ab72:	4622      	mov	r2, r4
 801ab74:	4629      	mov	r1, r5
 801ab76:	4630      	mov	r0, r6
 801ab78:	f7ff ffa1 	bl	801aabe <__sfputs_r>
 801ab7c:	3001      	adds	r0, #1
 801ab7e:	f000 80a9 	beq.w	801acd4 <_vfiprintf_r+0x1f0>
 801ab82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ab84:	445a      	add	r2, fp
 801ab86:	9209      	str	r2, [sp, #36]	; 0x24
 801ab88:	f89a 3000 	ldrb.w	r3, [sl]
 801ab8c:	2b00      	cmp	r3, #0
 801ab8e:	f000 80a1 	beq.w	801acd4 <_vfiprintf_r+0x1f0>
 801ab92:	2300      	movs	r3, #0
 801ab94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ab98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ab9c:	f10a 0a01 	add.w	sl, sl, #1
 801aba0:	9304      	str	r3, [sp, #16]
 801aba2:	9307      	str	r3, [sp, #28]
 801aba4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801aba8:	931a      	str	r3, [sp, #104]	; 0x68
 801abaa:	4654      	mov	r4, sl
 801abac:	2205      	movs	r2, #5
 801abae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801abb2:	4854      	ldr	r0, [pc, #336]	; (801ad04 <_vfiprintf_r+0x220>)
 801abb4:	f7e5 fb2c 	bl	8000210 <memchr>
 801abb8:	9a04      	ldr	r2, [sp, #16]
 801abba:	b9d8      	cbnz	r0, 801abf4 <_vfiprintf_r+0x110>
 801abbc:	06d1      	lsls	r1, r2, #27
 801abbe:	bf44      	itt	mi
 801abc0:	2320      	movmi	r3, #32
 801abc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801abc6:	0713      	lsls	r3, r2, #28
 801abc8:	bf44      	itt	mi
 801abca:	232b      	movmi	r3, #43	; 0x2b
 801abcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801abd0:	f89a 3000 	ldrb.w	r3, [sl]
 801abd4:	2b2a      	cmp	r3, #42	; 0x2a
 801abd6:	d015      	beq.n	801ac04 <_vfiprintf_r+0x120>
 801abd8:	9a07      	ldr	r2, [sp, #28]
 801abda:	4654      	mov	r4, sl
 801abdc:	2000      	movs	r0, #0
 801abde:	f04f 0c0a 	mov.w	ip, #10
 801abe2:	4621      	mov	r1, r4
 801abe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801abe8:	3b30      	subs	r3, #48	; 0x30
 801abea:	2b09      	cmp	r3, #9
 801abec:	d94d      	bls.n	801ac8a <_vfiprintf_r+0x1a6>
 801abee:	b1b0      	cbz	r0, 801ac1e <_vfiprintf_r+0x13a>
 801abf0:	9207      	str	r2, [sp, #28]
 801abf2:	e014      	b.n	801ac1e <_vfiprintf_r+0x13a>
 801abf4:	eba0 0308 	sub.w	r3, r0, r8
 801abf8:	fa09 f303 	lsl.w	r3, r9, r3
 801abfc:	4313      	orrs	r3, r2
 801abfe:	9304      	str	r3, [sp, #16]
 801ac00:	46a2      	mov	sl, r4
 801ac02:	e7d2      	b.n	801abaa <_vfiprintf_r+0xc6>
 801ac04:	9b03      	ldr	r3, [sp, #12]
 801ac06:	1d19      	adds	r1, r3, #4
 801ac08:	681b      	ldr	r3, [r3, #0]
 801ac0a:	9103      	str	r1, [sp, #12]
 801ac0c:	2b00      	cmp	r3, #0
 801ac0e:	bfbb      	ittet	lt
 801ac10:	425b      	neglt	r3, r3
 801ac12:	f042 0202 	orrlt.w	r2, r2, #2
 801ac16:	9307      	strge	r3, [sp, #28]
 801ac18:	9307      	strlt	r3, [sp, #28]
 801ac1a:	bfb8      	it	lt
 801ac1c:	9204      	strlt	r2, [sp, #16]
 801ac1e:	7823      	ldrb	r3, [r4, #0]
 801ac20:	2b2e      	cmp	r3, #46	; 0x2e
 801ac22:	d10c      	bne.n	801ac3e <_vfiprintf_r+0x15a>
 801ac24:	7863      	ldrb	r3, [r4, #1]
 801ac26:	2b2a      	cmp	r3, #42	; 0x2a
 801ac28:	d134      	bne.n	801ac94 <_vfiprintf_r+0x1b0>
 801ac2a:	9b03      	ldr	r3, [sp, #12]
 801ac2c:	1d1a      	adds	r2, r3, #4
 801ac2e:	681b      	ldr	r3, [r3, #0]
 801ac30:	9203      	str	r2, [sp, #12]
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	bfb8      	it	lt
 801ac36:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801ac3a:	3402      	adds	r4, #2
 801ac3c:	9305      	str	r3, [sp, #20]
 801ac3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801ad14 <_vfiprintf_r+0x230>
 801ac42:	7821      	ldrb	r1, [r4, #0]
 801ac44:	2203      	movs	r2, #3
 801ac46:	4650      	mov	r0, sl
 801ac48:	f7e5 fae2 	bl	8000210 <memchr>
 801ac4c:	b138      	cbz	r0, 801ac5e <_vfiprintf_r+0x17a>
 801ac4e:	9b04      	ldr	r3, [sp, #16]
 801ac50:	eba0 000a 	sub.w	r0, r0, sl
 801ac54:	2240      	movs	r2, #64	; 0x40
 801ac56:	4082      	lsls	r2, r0
 801ac58:	4313      	orrs	r3, r2
 801ac5a:	3401      	adds	r4, #1
 801ac5c:	9304      	str	r3, [sp, #16]
 801ac5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac62:	4829      	ldr	r0, [pc, #164]	; (801ad08 <_vfiprintf_r+0x224>)
 801ac64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ac68:	2206      	movs	r2, #6
 801ac6a:	f7e5 fad1 	bl	8000210 <memchr>
 801ac6e:	2800      	cmp	r0, #0
 801ac70:	d03f      	beq.n	801acf2 <_vfiprintf_r+0x20e>
 801ac72:	4b26      	ldr	r3, [pc, #152]	; (801ad0c <_vfiprintf_r+0x228>)
 801ac74:	bb1b      	cbnz	r3, 801acbe <_vfiprintf_r+0x1da>
 801ac76:	9b03      	ldr	r3, [sp, #12]
 801ac78:	3307      	adds	r3, #7
 801ac7a:	f023 0307 	bic.w	r3, r3, #7
 801ac7e:	3308      	adds	r3, #8
 801ac80:	9303      	str	r3, [sp, #12]
 801ac82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac84:	443b      	add	r3, r7
 801ac86:	9309      	str	r3, [sp, #36]	; 0x24
 801ac88:	e768      	b.n	801ab5c <_vfiprintf_r+0x78>
 801ac8a:	fb0c 3202 	mla	r2, ip, r2, r3
 801ac8e:	460c      	mov	r4, r1
 801ac90:	2001      	movs	r0, #1
 801ac92:	e7a6      	b.n	801abe2 <_vfiprintf_r+0xfe>
 801ac94:	2300      	movs	r3, #0
 801ac96:	3401      	adds	r4, #1
 801ac98:	9305      	str	r3, [sp, #20]
 801ac9a:	4619      	mov	r1, r3
 801ac9c:	f04f 0c0a 	mov.w	ip, #10
 801aca0:	4620      	mov	r0, r4
 801aca2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aca6:	3a30      	subs	r2, #48	; 0x30
 801aca8:	2a09      	cmp	r2, #9
 801acaa:	d903      	bls.n	801acb4 <_vfiprintf_r+0x1d0>
 801acac:	2b00      	cmp	r3, #0
 801acae:	d0c6      	beq.n	801ac3e <_vfiprintf_r+0x15a>
 801acb0:	9105      	str	r1, [sp, #20]
 801acb2:	e7c4      	b.n	801ac3e <_vfiprintf_r+0x15a>
 801acb4:	fb0c 2101 	mla	r1, ip, r1, r2
 801acb8:	4604      	mov	r4, r0
 801acba:	2301      	movs	r3, #1
 801acbc:	e7f0      	b.n	801aca0 <_vfiprintf_r+0x1bc>
 801acbe:	ab03      	add	r3, sp, #12
 801acc0:	9300      	str	r3, [sp, #0]
 801acc2:	462a      	mov	r2, r5
 801acc4:	4b12      	ldr	r3, [pc, #72]	; (801ad10 <_vfiprintf_r+0x22c>)
 801acc6:	a904      	add	r1, sp, #16
 801acc8:	4630      	mov	r0, r6
 801acca:	f3af 8000 	nop.w
 801acce:	4607      	mov	r7, r0
 801acd0:	1c78      	adds	r0, r7, #1
 801acd2:	d1d6      	bne.n	801ac82 <_vfiprintf_r+0x19e>
 801acd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801acd6:	07d9      	lsls	r1, r3, #31
 801acd8:	d405      	bmi.n	801ace6 <_vfiprintf_r+0x202>
 801acda:	89ab      	ldrh	r3, [r5, #12]
 801acdc:	059a      	lsls	r2, r3, #22
 801acde:	d402      	bmi.n	801ace6 <_vfiprintf_r+0x202>
 801ace0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ace2:	f7ff fce7 	bl	801a6b4 <__retarget_lock_release_recursive>
 801ace6:	89ab      	ldrh	r3, [r5, #12]
 801ace8:	065b      	lsls	r3, r3, #25
 801acea:	f53f af1d 	bmi.w	801ab28 <_vfiprintf_r+0x44>
 801acee:	9809      	ldr	r0, [sp, #36]	; 0x24
 801acf0:	e71c      	b.n	801ab2c <_vfiprintf_r+0x48>
 801acf2:	ab03      	add	r3, sp, #12
 801acf4:	9300      	str	r3, [sp, #0]
 801acf6:	462a      	mov	r2, r5
 801acf8:	4b05      	ldr	r3, [pc, #20]	; (801ad10 <_vfiprintf_r+0x22c>)
 801acfa:	a904      	add	r1, sp, #16
 801acfc:	4630      	mov	r0, r6
 801acfe:	f000 f879 	bl	801adf4 <_printf_i>
 801ad02:	e7e4      	b.n	801acce <_vfiprintf_r+0x1ea>
 801ad04:	0801c294 	.word	0x0801c294
 801ad08:	0801c29e 	.word	0x0801c29e
 801ad0c:	00000000 	.word	0x00000000
 801ad10:	0801aabf 	.word	0x0801aabf
 801ad14:	0801c29a 	.word	0x0801c29a

0801ad18 <_printf_common>:
 801ad18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad1c:	4616      	mov	r6, r2
 801ad1e:	4699      	mov	r9, r3
 801ad20:	688a      	ldr	r2, [r1, #8]
 801ad22:	690b      	ldr	r3, [r1, #16]
 801ad24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ad28:	4293      	cmp	r3, r2
 801ad2a:	bfb8      	it	lt
 801ad2c:	4613      	movlt	r3, r2
 801ad2e:	6033      	str	r3, [r6, #0]
 801ad30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ad34:	4607      	mov	r7, r0
 801ad36:	460c      	mov	r4, r1
 801ad38:	b10a      	cbz	r2, 801ad3e <_printf_common+0x26>
 801ad3a:	3301      	adds	r3, #1
 801ad3c:	6033      	str	r3, [r6, #0]
 801ad3e:	6823      	ldr	r3, [r4, #0]
 801ad40:	0699      	lsls	r1, r3, #26
 801ad42:	bf42      	ittt	mi
 801ad44:	6833      	ldrmi	r3, [r6, #0]
 801ad46:	3302      	addmi	r3, #2
 801ad48:	6033      	strmi	r3, [r6, #0]
 801ad4a:	6825      	ldr	r5, [r4, #0]
 801ad4c:	f015 0506 	ands.w	r5, r5, #6
 801ad50:	d106      	bne.n	801ad60 <_printf_common+0x48>
 801ad52:	f104 0a19 	add.w	sl, r4, #25
 801ad56:	68e3      	ldr	r3, [r4, #12]
 801ad58:	6832      	ldr	r2, [r6, #0]
 801ad5a:	1a9b      	subs	r3, r3, r2
 801ad5c:	42ab      	cmp	r3, r5
 801ad5e:	dc26      	bgt.n	801adae <_printf_common+0x96>
 801ad60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ad64:	1e13      	subs	r3, r2, #0
 801ad66:	6822      	ldr	r2, [r4, #0]
 801ad68:	bf18      	it	ne
 801ad6a:	2301      	movne	r3, #1
 801ad6c:	0692      	lsls	r2, r2, #26
 801ad6e:	d42b      	bmi.n	801adc8 <_printf_common+0xb0>
 801ad70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ad74:	4649      	mov	r1, r9
 801ad76:	4638      	mov	r0, r7
 801ad78:	47c0      	blx	r8
 801ad7a:	3001      	adds	r0, #1
 801ad7c:	d01e      	beq.n	801adbc <_printf_common+0xa4>
 801ad7e:	6823      	ldr	r3, [r4, #0]
 801ad80:	6922      	ldr	r2, [r4, #16]
 801ad82:	f003 0306 	and.w	r3, r3, #6
 801ad86:	2b04      	cmp	r3, #4
 801ad88:	bf02      	ittt	eq
 801ad8a:	68e5      	ldreq	r5, [r4, #12]
 801ad8c:	6833      	ldreq	r3, [r6, #0]
 801ad8e:	1aed      	subeq	r5, r5, r3
 801ad90:	68a3      	ldr	r3, [r4, #8]
 801ad92:	bf0c      	ite	eq
 801ad94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ad98:	2500      	movne	r5, #0
 801ad9a:	4293      	cmp	r3, r2
 801ad9c:	bfc4      	itt	gt
 801ad9e:	1a9b      	subgt	r3, r3, r2
 801ada0:	18ed      	addgt	r5, r5, r3
 801ada2:	2600      	movs	r6, #0
 801ada4:	341a      	adds	r4, #26
 801ada6:	42b5      	cmp	r5, r6
 801ada8:	d11a      	bne.n	801ade0 <_printf_common+0xc8>
 801adaa:	2000      	movs	r0, #0
 801adac:	e008      	b.n	801adc0 <_printf_common+0xa8>
 801adae:	2301      	movs	r3, #1
 801adb0:	4652      	mov	r2, sl
 801adb2:	4649      	mov	r1, r9
 801adb4:	4638      	mov	r0, r7
 801adb6:	47c0      	blx	r8
 801adb8:	3001      	adds	r0, #1
 801adba:	d103      	bne.n	801adc4 <_printf_common+0xac>
 801adbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801adc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801adc4:	3501      	adds	r5, #1
 801adc6:	e7c6      	b.n	801ad56 <_printf_common+0x3e>
 801adc8:	18e1      	adds	r1, r4, r3
 801adca:	1c5a      	adds	r2, r3, #1
 801adcc:	2030      	movs	r0, #48	; 0x30
 801adce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801add2:	4422      	add	r2, r4
 801add4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801add8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801addc:	3302      	adds	r3, #2
 801adde:	e7c7      	b.n	801ad70 <_printf_common+0x58>
 801ade0:	2301      	movs	r3, #1
 801ade2:	4622      	mov	r2, r4
 801ade4:	4649      	mov	r1, r9
 801ade6:	4638      	mov	r0, r7
 801ade8:	47c0      	blx	r8
 801adea:	3001      	adds	r0, #1
 801adec:	d0e6      	beq.n	801adbc <_printf_common+0xa4>
 801adee:	3601      	adds	r6, #1
 801adf0:	e7d9      	b.n	801ada6 <_printf_common+0x8e>
	...

0801adf4 <_printf_i>:
 801adf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801adf8:	7e0f      	ldrb	r7, [r1, #24]
 801adfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801adfc:	2f78      	cmp	r7, #120	; 0x78
 801adfe:	4691      	mov	r9, r2
 801ae00:	4680      	mov	r8, r0
 801ae02:	460c      	mov	r4, r1
 801ae04:	469a      	mov	sl, r3
 801ae06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ae0a:	d807      	bhi.n	801ae1c <_printf_i+0x28>
 801ae0c:	2f62      	cmp	r7, #98	; 0x62
 801ae0e:	d80a      	bhi.n	801ae26 <_printf_i+0x32>
 801ae10:	2f00      	cmp	r7, #0
 801ae12:	f000 80d4 	beq.w	801afbe <_printf_i+0x1ca>
 801ae16:	2f58      	cmp	r7, #88	; 0x58
 801ae18:	f000 80c0 	beq.w	801af9c <_printf_i+0x1a8>
 801ae1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ae20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ae24:	e03a      	b.n	801ae9c <_printf_i+0xa8>
 801ae26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ae2a:	2b15      	cmp	r3, #21
 801ae2c:	d8f6      	bhi.n	801ae1c <_printf_i+0x28>
 801ae2e:	a101      	add	r1, pc, #4	; (adr r1, 801ae34 <_printf_i+0x40>)
 801ae30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ae34:	0801ae8d 	.word	0x0801ae8d
 801ae38:	0801aea1 	.word	0x0801aea1
 801ae3c:	0801ae1d 	.word	0x0801ae1d
 801ae40:	0801ae1d 	.word	0x0801ae1d
 801ae44:	0801ae1d 	.word	0x0801ae1d
 801ae48:	0801ae1d 	.word	0x0801ae1d
 801ae4c:	0801aea1 	.word	0x0801aea1
 801ae50:	0801ae1d 	.word	0x0801ae1d
 801ae54:	0801ae1d 	.word	0x0801ae1d
 801ae58:	0801ae1d 	.word	0x0801ae1d
 801ae5c:	0801ae1d 	.word	0x0801ae1d
 801ae60:	0801afa5 	.word	0x0801afa5
 801ae64:	0801aecd 	.word	0x0801aecd
 801ae68:	0801af5f 	.word	0x0801af5f
 801ae6c:	0801ae1d 	.word	0x0801ae1d
 801ae70:	0801ae1d 	.word	0x0801ae1d
 801ae74:	0801afc7 	.word	0x0801afc7
 801ae78:	0801ae1d 	.word	0x0801ae1d
 801ae7c:	0801aecd 	.word	0x0801aecd
 801ae80:	0801ae1d 	.word	0x0801ae1d
 801ae84:	0801ae1d 	.word	0x0801ae1d
 801ae88:	0801af67 	.word	0x0801af67
 801ae8c:	682b      	ldr	r3, [r5, #0]
 801ae8e:	1d1a      	adds	r2, r3, #4
 801ae90:	681b      	ldr	r3, [r3, #0]
 801ae92:	602a      	str	r2, [r5, #0]
 801ae94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ae98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ae9c:	2301      	movs	r3, #1
 801ae9e:	e09f      	b.n	801afe0 <_printf_i+0x1ec>
 801aea0:	6820      	ldr	r0, [r4, #0]
 801aea2:	682b      	ldr	r3, [r5, #0]
 801aea4:	0607      	lsls	r7, r0, #24
 801aea6:	f103 0104 	add.w	r1, r3, #4
 801aeaa:	6029      	str	r1, [r5, #0]
 801aeac:	d501      	bpl.n	801aeb2 <_printf_i+0xbe>
 801aeae:	681e      	ldr	r6, [r3, #0]
 801aeb0:	e003      	b.n	801aeba <_printf_i+0xc6>
 801aeb2:	0646      	lsls	r6, r0, #25
 801aeb4:	d5fb      	bpl.n	801aeae <_printf_i+0xba>
 801aeb6:	f9b3 6000 	ldrsh.w	r6, [r3]
 801aeba:	2e00      	cmp	r6, #0
 801aebc:	da03      	bge.n	801aec6 <_printf_i+0xd2>
 801aebe:	232d      	movs	r3, #45	; 0x2d
 801aec0:	4276      	negs	r6, r6
 801aec2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aec6:	485a      	ldr	r0, [pc, #360]	; (801b030 <_printf_i+0x23c>)
 801aec8:	230a      	movs	r3, #10
 801aeca:	e012      	b.n	801aef2 <_printf_i+0xfe>
 801aecc:	682b      	ldr	r3, [r5, #0]
 801aece:	6820      	ldr	r0, [r4, #0]
 801aed0:	1d19      	adds	r1, r3, #4
 801aed2:	6029      	str	r1, [r5, #0]
 801aed4:	0605      	lsls	r5, r0, #24
 801aed6:	d501      	bpl.n	801aedc <_printf_i+0xe8>
 801aed8:	681e      	ldr	r6, [r3, #0]
 801aeda:	e002      	b.n	801aee2 <_printf_i+0xee>
 801aedc:	0641      	lsls	r1, r0, #25
 801aede:	d5fb      	bpl.n	801aed8 <_printf_i+0xe4>
 801aee0:	881e      	ldrh	r6, [r3, #0]
 801aee2:	4853      	ldr	r0, [pc, #332]	; (801b030 <_printf_i+0x23c>)
 801aee4:	2f6f      	cmp	r7, #111	; 0x6f
 801aee6:	bf0c      	ite	eq
 801aee8:	2308      	moveq	r3, #8
 801aeea:	230a      	movne	r3, #10
 801aeec:	2100      	movs	r1, #0
 801aeee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801aef2:	6865      	ldr	r5, [r4, #4]
 801aef4:	60a5      	str	r5, [r4, #8]
 801aef6:	2d00      	cmp	r5, #0
 801aef8:	bfa2      	ittt	ge
 801aefa:	6821      	ldrge	r1, [r4, #0]
 801aefc:	f021 0104 	bicge.w	r1, r1, #4
 801af00:	6021      	strge	r1, [r4, #0]
 801af02:	b90e      	cbnz	r6, 801af08 <_printf_i+0x114>
 801af04:	2d00      	cmp	r5, #0
 801af06:	d04b      	beq.n	801afa0 <_printf_i+0x1ac>
 801af08:	4615      	mov	r5, r2
 801af0a:	fbb6 f1f3 	udiv	r1, r6, r3
 801af0e:	fb03 6711 	mls	r7, r3, r1, r6
 801af12:	5dc7      	ldrb	r7, [r0, r7]
 801af14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801af18:	4637      	mov	r7, r6
 801af1a:	42bb      	cmp	r3, r7
 801af1c:	460e      	mov	r6, r1
 801af1e:	d9f4      	bls.n	801af0a <_printf_i+0x116>
 801af20:	2b08      	cmp	r3, #8
 801af22:	d10b      	bne.n	801af3c <_printf_i+0x148>
 801af24:	6823      	ldr	r3, [r4, #0]
 801af26:	07de      	lsls	r6, r3, #31
 801af28:	d508      	bpl.n	801af3c <_printf_i+0x148>
 801af2a:	6923      	ldr	r3, [r4, #16]
 801af2c:	6861      	ldr	r1, [r4, #4]
 801af2e:	4299      	cmp	r1, r3
 801af30:	bfde      	ittt	le
 801af32:	2330      	movle	r3, #48	; 0x30
 801af34:	f805 3c01 	strble.w	r3, [r5, #-1]
 801af38:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801af3c:	1b52      	subs	r2, r2, r5
 801af3e:	6122      	str	r2, [r4, #16]
 801af40:	f8cd a000 	str.w	sl, [sp]
 801af44:	464b      	mov	r3, r9
 801af46:	aa03      	add	r2, sp, #12
 801af48:	4621      	mov	r1, r4
 801af4a:	4640      	mov	r0, r8
 801af4c:	f7ff fee4 	bl	801ad18 <_printf_common>
 801af50:	3001      	adds	r0, #1
 801af52:	d14a      	bne.n	801afea <_printf_i+0x1f6>
 801af54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801af58:	b004      	add	sp, #16
 801af5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af5e:	6823      	ldr	r3, [r4, #0]
 801af60:	f043 0320 	orr.w	r3, r3, #32
 801af64:	6023      	str	r3, [r4, #0]
 801af66:	4833      	ldr	r0, [pc, #204]	; (801b034 <_printf_i+0x240>)
 801af68:	2778      	movs	r7, #120	; 0x78
 801af6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801af6e:	6823      	ldr	r3, [r4, #0]
 801af70:	6829      	ldr	r1, [r5, #0]
 801af72:	061f      	lsls	r7, r3, #24
 801af74:	f851 6b04 	ldr.w	r6, [r1], #4
 801af78:	d402      	bmi.n	801af80 <_printf_i+0x18c>
 801af7a:	065f      	lsls	r7, r3, #25
 801af7c:	bf48      	it	mi
 801af7e:	b2b6      	uxthmi	r6, r6
 801af80:	07df      	lsls	r7, r3, #31
 801af82:	bf48      	it	mi
 801af84:	f043 0320 	orrmi.w	r3, r3, #32
 801af88:	6029      	str	r1, [r5, #0]
 801af8a:	bf48      	it	mi
 801af8c:	6023      	strmi	r3, [r4, #0]
 801af8e:	b91e      	cbnz	r6, 801af98 <_printf_i+0x1a4>
 801af90:	6823      	ldr	r3, [r4, #0]
 801af92:	f023 0320 	bic.w	r3, r3, #32
 801af96:	6023      	str	r3, [r4, #0]
 801af98:	2310      	movs	r3, #16
 801af9a:	e7a7      	b.n	801aeec <_printf_i+0xf8>
 801af9c:	4824      	ldr	r0, [pc, #144]	; (801b030 <_printf_i+0x23c>)
 801af9e:	e7e4      	b.n	801af6a <_printf_i+0x176>
 801afa0:	4615      	mov	r5, r2
 801afa2:	e7bd      	b.n	801af20 <_printf_i+0x12c>
 801afa4:	682b      	ldr	r3, [r5, #0]
 801afa6:	6826      	ldr	r6, [r4, #0]
 801afa8:	6961      	ldr	r1, [r4, #20]
 801afaa:	1d18      	adds	r0, r3, #4
 801afac:	6028      	str	r0, [r5, #0]
 801afae:	0635      	lsls	r5, r6, #24
 801afb0:	681b      	ldr	r3, [r3, #0]
 801afb2:	d501      	bpl.n	801afb8 <_printf_i+0x1c4>
 801afb4:	6019      	str	r1, [r3, #0]
 801afb6:	e002      	b.n	801afbe <_printf_i+0x1ca>
 801afb8:	0670      	lsls	r0, r6, #25
 801afba:	d5fb      	bpl.n	801afb4 <_printf_i+0x1c0>
 801afbc:	8019      	strh	r1, [r3, #0]
 801afbe:	2300      	movs	r3, #0
 801afc0:	6123      	str	r3, [r4, #16]
 801afc2:	4615      	mov	r5, r2
 801afc4:	e7bc      	b.n	801af40 <_printf_i+0x14c>
 801afc6:	682b      	ldr	r3, [r5, #0]
 801afc8:	1d1a      	adds	r2, r3, #4
 801afca:	602a      	str	r2, [r5, #0]
 801afcc:	681d      	ldr	r5, [r3, #0]
 801afce:	6862      	ldr	r2, [r4, #4]
 801afd0:	2100      	movs	r1, #0
 801afd2:	4628      	mov	r0, r5
 801afd4:	f7e5 f91c 	bl	8000210 <memchr>
 801afd8:	b108      	cbz	r0, 801afde <_printf_i+0x1ea>
 801afda:	1b40      	subs	r0, r0, r5
 801afdc:	6060      	str	r0, [r4, #4]
 801afde:	6863      	ldr	r3, [r4, #4]
 801afe0:	6123      	str	r3, [r4, #16]
 801afe2:	2300      	movs	r3, #0
 801afe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801afe8:	e7aa      	b.n	801af40 <_printf_i+0x14c>
 801afea:	6923      	ldr	r3, [r4, #16]
 801afec:	462a      	mov	r2, r5
 801afee:	4649      	mov	r1, r9
 801aff0:	4640      	mov	r0, r8
 801aff2:	47d0      	blx	sl
 801aff4:	3001      	adds	r0, #1
 801aff6:	d0ad      	beq.n	801af54 <_printf_i+0x160>
 801aff8:	6823      	ldr	r3, [r4, #0]
 801affa:	079b      	lsls	r3, r3, #30
 801affc:	d413      	bmi.n	801b026 <_printf_i+0x232>
 801affe:	68e0      	ldr	r0, [r4, #12]
 801b000:	9b03      	ldr	r3, [sp, #12]
 801b002:	4298      	cmp	r0, r3
 801b004:	bfb8      	it	lt
 801b006:	4618      	movlt	r0, r3
 801b008:	e7a6      	b.n	801af58 <_printf_i+0x164>
 801b00a:	2301      	movs	r3, #1
 801b00c:	4632      	mov	r2, r6
 801b00e:	4649      	mov	r1, r9
 801b010:	4640      	mov	r0, r8
 801b012:	47d0      	blx	sl
 801b014:	3001      	adds	r0, #1
 801b016:	d09d      	beq.n	801af54 <_printf_i+0x160>
 801b018:	3501      	adds	r5, #1
 801b01a:	68e3      	ldr	r3, [r4, #12]
 801b01c:	9903      	ldr	r1, [sp, #12]
 801b01e:	1a5b      	subs	r3, r3, r1
 801b020:	42ab      	cmp	r3, r5
 801b022:	dcf2      	bgt.n	801b00a <_printf_i+0x216>
 801b024:	e7eb      	b.n	801affe <_printf_i+0x20a>
 801b026:	2500      	movs	r5, #0
 801b028:	f104 0619 	add.w	r6, r4, #25
 801b02c:	e7f5      	b.n	801b01a <_printf_i+0x226>
 801b02e:	bf00      	nop
 801b030:	0801c2a5 	.word	0x0801c2a5
 801b034:	0801c2b6 	.word	0x0801c2b6

0801b038 <__sflush_r>:
 801b038:	898a      	ldrh	r2, [r1, #12]
 801b03a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b03e:	4605      	mov	r5, r0
 801b040:	0710      	lsls	r0, r2, #28
 801b042:	460c      	mov	r4, r1
 801b044:	d458      	bmi.n	801b0f8 <__sflush_r+0xc0>
 801b046:	684b      	ldr	r3, [r1, #4]
 801b048:	2b00      	cmp	r3, #0
 801b04a:	dc05      	bgt.n	801b058 <__sflush_r+0x20>
 801b04c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b04e:	2b00      	cmp	r3, #0
 801b050:	dc02      	bgt.n	801b058 <__sflush_r+0x20>
 801b052:	2000      	movs	r0, #0
 801b054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b058:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b05a:	2e00      	cmp	r6, #0
 801b05c:	d0f9      	beq.n	801b052 <__sflush_r+0x1a>
 801b05e:	2300      	movs	r3, #0
 801b060:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b064:	682f      	ldr	r7, [r5, #0]
 801b066:	6a21      	ldr	r1, [r4, #32]
 801b068:	602b      	str	r3, [r5, #0]
 801b06a:	d032      	beq.n	801b0d2 <__sflush_r+0x9a>
 801b06c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b06e:	89a3      	ldrh	r3, [r4, #12]
 801b070:	075a      	lsls	r2, r3, #29
 801b072:	d505      	bpl.n	801b080 <__sflush_r+0x48>
 801b074:	6863      	ldr	r3, [r4, #4]
 801b076:	1ac0      	subs	r0, r0, r3
 801b078:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b07a:	b10b      	cbz	r3, 801b080 <__sflush_r+0x48>
 801b07c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b07e:	1ac0      	subs	r0, r0, r3
 801b080:	2300      	movs	r3, #0
 801b082:	4602      	mov	r2, r0
 801b084:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b086:	6a21      	ldr	r1, [r4, #32]
 801b088:	4628      	mov	r0, r5
 801b08a:	47b0      	blx	r6
 801b08c:	1c43      	adds	r3, r0, #1
 801b08e:	89a3      	ldrh	r3, [r4, #12]
 801b090:	d106      	bne.n	801b0a0 <__sflush_r+0x68>
 801b092:	6829      	ldr	r1, [r5, #0]
 801b094:	291d      	cmp	r1, #29
 801b096:	d82b      	bhi.n	801b0f0 <__sflush_r+0xb8>
 801b098:	4a29      	ldr	r2, [pc, #164]	; (801b140 <__sflush_r+0x108>)
 801b09a:	410a      	asrs	r2, r1
 801b09c:	07d6      	lsls	r6, r2, #31
 801b09e:	d427      	bmi.n	801b0f0 <__sflush_r+0xb8>
 801b0a0:	2200      	movs	r2, #0
 801b0a2:	6062      	str	r2, [r4, #4]
 801b0a4:	04d9      	lsls	r1, r3, #19
 801b0a6:	6922      	ldr	r2, [r4, #16]
 801b0a8:	6022      	str	r2, [r4, #0]
 801b0aa:	d504      	bpl.n	801b0b6 <__sflush_r+0x7e>
 801b0ac:	1c42      	adds	r2, r0, #1
 801b0ae:	d101      	bne.n	801b0b4 <__sflush_r+0x7c>
 801b0b0:	682b      	ldr	r3, [r5, #0]
 801b0b2:	b903      	cbnz	r3, 801b0b6 <__sflush_r+0x7e>
 801b0b4:	6560      	str	r0, [r4, #84]	; 0x54
 801b0b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b0b8:	602f      	str	r7, [r5, #0]
 801b0ba:	2900      	cmp	r1, #0
 801b0bc:	d0c9      	beq.n	801b052 <__sflush_r+0x1a>
 801b0be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b0c2:	4299      	cmp	r1, r3
 801b0c4:	d002      	beq.n	801b0cc <__sflush_r+0x94>
 801b0c6:	4628      	mov	r0, r5
 801b0c8:	f7ff fb36 	bl	801a738 <_free_r>
 801b0cc:	2000      	movs	r0, #0
 801b0ce:	6360      	str	r0, [r4, #52]	; 0x34
 801b0d0:	e7c0      	b.n	801b054 <__sflush_r+0x1c>
 801b0d2:	2301      	movs	r3, #1
 801b0d4:	4628      	mov	r0, r5
 801b0d6:	47b0      	blx	r6
 801b0d8:	1c41      	adds	r1, r0, #1
 801b0da:	d1c8      	bne.n	801b06e <__sflush_r+0x36>
 801b0dc:	682b      	ldr	r3, [r5, #0]
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	d0c5      	beq.n	801b06e <__sflush_r+0x36>
 801b0e2:	2b1d      	cmp	r3, #29
 801b0e4:	d001      	beq.n	801b0ea <__sflush_r+0xb2>
 801b0e6:	2b16      	cmp	r3, #22
 801b0e8:	d101      	bne.n	801b0ee <__sflush_r+0xb6>
 801b0ea:	602f      	str	r7, [r5, #0]
 801b0ec:	e7b1      	b.n	801b052 <__sflush_r+0x1a>
 801b0ee:	89a3      	ldrh	r3, [r4, #12]
 801b0f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b0f4:	81a3      	strh	r3, [r4, #12]
 801b0f6:	e7ad      	b.n	801b054 <__sflush_r+0x1c>
 801b0f8:	690f      	ldr	r7, [r1, #16]
 801b0fa:	2f00      	cmp	r7, #0
 801b0fc:	d0a9      	beq.n	801b052 <__sflush_r+0x1a>
 801b0fe:	0793      	lsls	r3, r2, #30
 801b100:	680e      	ldr	r6, [r1, #0]
 801b102:	bf08      	it	eq
 801b104:	694b      	ldreq	r3, [r1, #20]
 801b106:	600f      	str	r7, [r1, #0]
 801b108:	bf18      	it	ne
 801b10a:	2300      	movne	r3, #0
 801b10c:	eba6 0807 	sub.w	r8, r6, r7
 801b110:	608b      	str	r3, [r1, #8]
 801b112:	f1b8 0f00 	cmp.w	r8, #0
 801b116:	dd9c      	ble.n	801b052 <__sflush_r+0x1a>
 801b118:	6a21      	ldr	r1, [r4, #32]
 801b11a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b11c:	4643      	mov	r3, r8
 801b11e:	463a      	mov	r2, r7
 801b120:	4628      	mov	r0, r5
 801b122:	47b0      	blx	r6
 801b124:	2800      	cmp	r0, #0
 801b126:	dc06      	bgt.n	801b136 <__sflush_r+0xfe>
 801b128:	89a3      	ldrh	r3, [r4, #12]
 801b12a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b12e:	81a3      	strh	r3, [r4, #12]
 801b130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b134:	e78e      	b.n	801b054 <__sflush_r+0x1c>
 801b136:	4407      	add	r7, r0
 801b138:	eba8 0800 	sub.w	r8, r8, r0
 801b13c:	e7e9      	b.n	801b112 <__sflush_r+0xda>
 801b13e:	bf00      	nop
 801b140:	dfbffffe 	.word	0xdfbffffe

0801b144 <_fflush_r>:
 801b144:	b538      	push	{r3, r4, r5, lr}
 801b146:	690b      	ldr	r3, [r1, #16]
 801b148:	4605      	mov	r5, r0
 801b14a:	460c      	mov	r4, r1
 801b14c:	b913      	cbnz	r3, 801b154 <_fflush_r+0x10>
 801b14e:	2500      	movs	r5, #0
 801b150:	4628      	mov	r0, r5
 801b152:	bd38      	pop	{r3, r4, r5, pc}
 801b154:	b118      	cbz	r0, 801b15e <_fflush_r+0x1a>
 801b156:	6a03      	ldr	r3, [r0, #32]
 801b158:	b90b      	cbnz	r3, 801b15e <_fflush_r+0x1a>
 801b15a:	f7fe ff3f 	bl	8019fdc <__sinit>
 801b15e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b162:	2b00      	cmp	r3, #0
 801b164:	d0f3      	beq.n	801b14e <_fflush_r+0xa>
 801b166:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b168:	07d0      	lsls	r0, r2, #31
 801b16a:	d404      	bmi.n	801b176 <_fflush_r+0x32>
 801b16c:	0599      	lsls	r1, r3, #22
 801b16e:	d402      	bmi.n	801b176 <_fflush_r+0x32>
 801b170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b172:	f7ff fa9e 	bl	801a6b2 <__retarget_lock_acquire_recursive>
 801b176:	4628      	mov	r0, r5
 801b178:	4621      	mov	r1, r4
 801b17a:	f7ff ff5d 	bl	801b038 <__sflush_r>
 801b17e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b180:	07da      	lsls	r2, r3, #31
 801b182:	4605      	mov	r5, r0
 801b184:	d4e4      	bmi.n	801b150 <_fflush_r+0xc>
 801b186:	89a3      	ldrh	r3, [r4, #12]
 801b188:	059b      	lsls	r3, r3, #22
 801b18a:	d4e1      	bmi.n	801b150 <_fflush_r+0xc>
 801b18c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b18e:	f7ff fa91 	bl	801a6b4 <__retarget_lock_release_recursive>
 801b192:	e7dd      	b.n	801b150 <_fflush_r+0xc>

0801b194 <fiprintf>:
 801b194:	b40e      	push	{r1, r2, r3}
 801b196:	b503      	push	{r0, r1, lr}
 801b198:	4601      	mov	r1, r0
 801b19a:	ab03      	add	r3, sp, #12
 801b19c:	4805      	ldr	r0, [pc, #20]	; (801b1b4 <fiprintf+0x20>)
 801b19e:	f853 2b04 	ldr.w	r2, [r3], #4
 801b1a2:	6800      	ldr	r0, [r0, #0]
 801b1a4:	9301      	str	r3, [sp, #4]
 801b1a6:	f7ff fc9d 	bl	801aae4 <_vfiprintf_r>
 801b1aa:	b002      	add	sp, #8
 801b1ac:	f85d eb04 	ldr.w	lr, [sp], #4
 801b1b0:	b003      	add	sp, #12
 801b1b2:	4770      	bx	lr
 801b1b4:	200000e8 	.word	0x200000e8

0801b1b8 <__swhatbuf_r>:
 801b1b8:	b570      	push	{r4, r5, r6, lr}
 801b1ba:	460c      	mov	r4, r1
 801b1bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b1c0:	2900      	cmp	r1, #0
 801b1c2:	b096      	sub	sp, #88	; 0x58
 801b1c4:	4615      	mov	r5, r2
 801b1c6:	461e      	mov	r6, r3
 801b1c8:	da0d      	bge.n	801b1e6 <__swhatbuf_r+0x2e>
 801b1ca:	89a3      	ldrh	r3, [r4, #12]
 801b1cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 801b1d0:	f04f 0100 	mov.w	r1, #0
 801b1d4:	bf0c      	ite	eq
 801b1d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801b1da:	2340      	movne	r3, #64	; 0x40
 801b1dc:	2000      	movs	r0, #0
 801b1de:	6031      	str	r1, [r6, #0]
 801b1e0:	602b      	str	r3, [r5, #0]
 801b1e2:	b016      	add	sp, #88	; 0x58
 801b1e4:	bd70      	pop	{r4, r5, r6, pc}
 801b1e6:	466a      	mov	r2, sp
 801b1e8:	f000 f848 	bl	801b27c <_fstat_r>
 801b1ec:	2800      	cmp	r0, #0
 801b1ee:	dbec      	blt.n	801b1ca <__swhatbuf_r+0x12>
 801b1f0:	9901      	ldr	r1, [sp, #4]
 801b1f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801b1f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801b1fa:	4259      	negs	r1, r3
 801b1fc:	4159      	adcs	r1, r3
 801b1fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b202:	e7eb      	b.n	801b1dc <__swhatbuf_r+0x24>

0801b204 <__smakebuf_r>:
 801b204:	898b      	ldrh	r3, [r1, #12]
 801b206:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b208:	079d      	lsls	r5, r3, #30
 801b20a:	4606      	mov	r6, r0
 801b20c:	460c      	mov	r4, r1
 801b20e:	d507      	bpl.n	801b220 <__smakebuf_r+0x1c>
 801b210:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b214:	6023      	str	r3, [r4, #0]
 801b216:	6123      	str	r3, [r4, #16]
 801b218:	2301      	movs	r3, #1
 801b21a:	6163      	str	r3, [r4, #20]
 801b21c:	b002      	add	sp, #8
 801b21e:	bd70      	pop	{r4, r5, r6, pc}
 801b220:	ab01      	add	r3, sp, #4
 801b222:	466a      	mov	r2, sp
 801b224:	f7ff ffc8 	bl	801b1b8 <__swhatbuf_r>
 801b228:	9900      	ldr	r1, [sp, #0]
 801b22a:	4605      	mov	r5, r0
 801b22c:	4630      	mov	r0, r6
 801b22e:	f7fe fc9d 	bl	8019b6c <_malloc_r>
 801b232:	b948      	cbnz	r0, 801b248 <__smakebuf_r+0x44>
 801b234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b238:	059a      	lsls	r2, r3, #22
 801b23a:	d4ef      	bmi.n	801b21c <__smakebuf_r+0x18>
 801b23c:	f023 0303 	bic.w	r3, r3, #3
 801b240:	f043 0302 	orr.w	r3, r3, #2
 801b244:	81a3      	strh	r3, [r4, #12]
 801b246:	e7e3      	b.n	801b210 <__smakebuf_r+0xc>
 801b248:	89a3      	ldrh	r3, [r4, #12]
 801b24a:	6020      	str	r0, [r4, #0]
 801b24c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b250:	81a3      	strh	r3, [r4, #12]
 801b252:	9b00      	ldr	r3, [sp, #0]
 801b254:	6163      	str	r3, [r4, #20]
 801b256:	9b01      	ldr	r3, [sp, #4]
 801b258:	6120      	str	r0, [r4, #16]
 801b25a:	b15b      	cbz	r3, 801b274 <__smakebuf_r+0x70>
 801b25c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b260:	4630      	mov	r0, r6
 801b262:	f000 f81d 	bl	801b2a0 <_isatty_r>
 801b266:	b128      	cbz	r0, 801b274 <__smakebuf_r+0x70>
 801b268:	89a3      	ldrh	r3, [r4, #12]
 801b26a:	f023 0303 	bic.w	r3, r3, #3
 801b26e:	f043 0301 	orr.w	r3, r3, #1
 801b272:	81a3      	strh	r3, [r4, #12]
 801b274:	89a3      	ldrh	r3, [r4, #12]
 801b276:	431d      	orrs	r5, r3
 801b278:	81a5      	strh	r5, [r4, #12]
 801b27a:	e7cf      	b.n	801b21c <__smakebuf_r+0x18>

0801b27c <_fstat_r>:
 801b27c:	b538      	push	{r3, r4, r5, lr}
 801b27e:	4d07      	ldr	r5, [pc, #28]	; (801b29c <_fstat_r+0x20>)
 801b280:	2300      	movs	r3, #0
 801b282:	4604      	mov	r4, r0
 801b284:	4608      	mov	r0, r1
 801b286:	4611      	mov	r1, r2
 801b288:	602b      	str	r3, [r5, #0]
 801b28a:	f7e8 fded 	bl	8003e68 <_fstat>
 801b28e:	1c43      	adds	r3, r0, #1
 801b290:	d102      	bne.n	801b298 <_fstat_r+0x1c>
 801b292:	682b      	ldr	r3, [r5, #0]
 801b294:	b103      	cbz	r3, 801b298 <_fstat_r+0x1c>
 801b296:	6023      	str	r3, [r4, #0]
 801b298:	bd38      	pop	{r3, r4, r5, pc}
 801b29a:	bf00      	nop
 801b29c:	20009ea4 	.word	0x20009ea4

0801b2a0 <_isatty_r>:
 801b2a0:	b538      	push	{r3, r4, r5, lr}
 801b2a2:	4d06      	ldr	r5, [pc, #24]	; (801b2bc <_isatty_r+0x1c>)
 801b2a4:	2300      	movs	r3, #0
 801b2a6:	4604      	mov	r4, r0
 801b2a8:	4608      	mov	r0, r1
 801b2aa:	602b      	str	r3, [r5, #0]
 801b2ac:	f7e8 fd4a 	bl	8003d44 <_isatty>
 801b2b0:	1c43      	adds	r3, r0, #1
 801b2b2:	d102      	bne.n	801b2ba <_isatty_r+0x1a>
 801b2b4:	682b      	ldr	r3, [r5, #0]
 801b2b6:	b103      	cbz	r3, 801b2ba <_isatty_r+0x1a>
 801b2b8:	6023      	str	r3, [r4, #0]
 801b2ba:	bd38      	pop	{r3, r4, r5, pc}
 801b2bc:	20009ea4 	.word	0x20009ea4

0801b2c0 <abort>:
 801b2c0:	b508      	push	{r3, lr}
 801b2c2:	2006      	movs	r0, #6
 801b2c4:	f000 f82c 	bl	801b320 <raise>
 801b2c8:	2001      	movs	r0, #1
 801b2ca:	f000 f845 	bl	801b358 <_exit>

0801b2ce <_raise_r>:
 801b2ce:	291f      	cmp	r1, #31
 801b2d0:	b538      	push	{r3, r4, r5, lr}
 801b2d2:	4604      	mov	r4, r0
 801b2d4:	460d      	mov	r5, r1
 801b2d6:	d904      	bls.n	801b2e2 <_raise_r+0x14>
 801b2d8:	2316      	movs	r3, #22
 801b2da:	6003      	str	r3, [r0, #0]
 801b2dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b2e0:	bd38      	pop	{r3, r4, r5, pc}
 801b2e2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801b2e4:	b112      	cbz	r2, 801b2ec <_raise_r+0x1e>
 801b2e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b2ea:	b94b      	cbnz	r3, 801b300 <_raise_r+0x32>
 801b2ec:	4620      	mov	r0, r4
 801b2ee:	f000 f831 	bl	801b354 <_getpid_r>
 801b2f2:	462a      	mov	r2, r5
 801b2f4:	4601      	mov	r1, r0
 801b2f6:	4620      	mov	r0, r4
 801b2f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b2fc:	f000 b818 	b.w	801b330 <_kill_r>
 801b300:	2b01      	cmp	r3, #1
 801b302:	d00a      	beq.n	801b31a <_raise_r+0x4c>
 801b304:	1c59      	adds	r1, r3, #1
 801b306:	d103      	bne.n	801b310 <_raise_r+0x42>
 801b308:	2316      	movs	r3, #22
 801b30a:	6003      	str	r3, [r0, #0]
 801b30c:	2001      	movs	r0, #1
 801b30e:	e7e7      	b.n	801b2e0 <_raise_r+0x12>
 801b310:	2400      	movs	r4, #0
 801b312:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b316:	4628      	mov	r0, r5
 801b318:	4798      	blx	r3
 801b31a:	2000      	movs	r0, #0
 801b31c:	e7e0      	b.n	801b2e0 <_raise_r+0x12>
	...

0801b320 <raise>:
 801b320:	4b02      	ldr	r3, [pc, #8]	; (801b32c <raise+0xc>)
 801b322:	4601      	mov	r1, r0
 801b324:	6818      	ldr	r0, [r3, #0]
 801b326:	f7ff bfd2 	b.w	801b2ce <_raise_r>
 801b32a:	bf00      	nop
 801b32c:	200000e8 	.word	0x200000e8

0801b330 <_kill_r>:
 801b330:	b538      	push	{r3, r4, r5, lr}
 801b332:	4d07      	ldr	r5, [pc, #28]	; (801b350 <_kill_r+0x20>)
 801b334:	2300      	movs	r3, #0
 801b336:	4604      	mov	r4, r0
 801b338:	4608      	mov	r0, r1
 801b33a:	4611      	mov	r1, r2
 801b33c:	602b      	str	r3, [r5, #0]
 801b33e:	f7e8 fdb6 	bl	8003eae <_kill>
 801b342:	1c43      	adds	r3, r0, #1
 801b344:	d102      	bne.n	801b34c <_kill_r+0x1c>
 801b346:	682b      	ldr	r3, [r5, #0]
 801b348:	b103      	cbz	r3, 801b34c <_kill_r+0x1c>
 801b34a:	6023      	str	r3, [r4, #0]
 801b34c:	bd38      	pop	{r3, r4, r5, pc}
 801b34e:	bf00      	nop
 801b350:	20009ea4 	.word	0x20009ea4

0801b354 <_getpid_r>:
 801b354:	f7e8 bda3 	b.w	8003e9e <_getpid>

0801b358 <_exit>:
 801b358:	e7fe      	b.n	801b358 <_exit>
	...

0801b35c <_init>:
 801b35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b35e:	bf00      	nop
 801b360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b362:	bc08      	pop	{r3}
 801b364:	469e      	mov	lr, r3
 801b366:	4770      	bx	lr

0801b368 <_fini>:
 801b368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b36a:	bf00      	nop
 801b36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b36e:	bc08      	pop	{r3}
 801b370:	469e      	mov	lr, r3
 801b372:	4770      	bx	lr
