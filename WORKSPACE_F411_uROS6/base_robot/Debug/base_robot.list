
base_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018cf8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c4c  08018e98  08018e98  00028e98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019ae4  08019ae4  000300e4  2**0
                  CONTENTS
  4 .ARM          00000008  08019ae4  08019ae4  00029ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019aec  08019aec  000300e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019aec  08019aec  00029aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019af0  08019af0  00029af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  08019af4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000eaa0  200000e8  08019bd8  000300e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000eb88  08019bd8  0003eb88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY
 12 .comment      0000009c  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY
 13 .debug_info   000c3fe7  00000000  00000000  000301b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00014de5  00000000  00000000  000f4197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003e60  00000000  00000000  00108f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016bf  00000000  00000000  0010cde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f27  00000000  00000000  0010e49f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000657d5  00000000  00000000  001333c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b6ee8  00000000  00000000  00198b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000f98c  00000000  00000000  0024fa84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0025f410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0004d17b  00000000  00000000  0025f471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00008c78  00000000  00000000  002ac5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000e8 	.word	0x200000e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08018e80 	.word	0x08018e80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ec 	.word	0x200000ec
 80001dc:	08018e80 	.word	0x08018e80

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_ldivmod>:
 8000bfc:	b97b      	cbnz	r3, 8000c1e <__aeabi_ldivmod+0x22>
 8000bfe:	b972      	cbnz	r2, 8000c1e <__aeabi_ldivmod+0x22>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bfbe      	ittt	lt
 8000c04:	2000      	movlt	r0, #0
 8000c06:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c0a:	e006      	blt.n	8000c1a <__aeabi_ldivmod+0x1e>
 8000c0c:	bf08      	it	eq
 8000c0e:	2800      	cmpeq	r0, #0
 8000c10:	bf1c      	itt	ne
 8000c12:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c16:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c1a:	f000 b9bb 	b.w	8000f94 <__aeabi_idiv0>
 8000c1e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c22:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c26:	2900      	cmp	r1, #0
 8000c28:	db09      	blt.n	8000c3e <__aeabi_ldivmod+0x42>
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db1a      	blt.n	8000c64 <__aeabi_ldivmod+0x68>
 8000c2e:	f000 f84d 	bl	8000ccc <__udivmoddi4>
 8000c32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3a:	b004      	add	sp, #16
 8000c3c:	4770      	bx	lr
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db1b      	blt.n	8000c80 <__aeabi_ldivmod+0x84>
 8000c48:	f000 f840 	bl	8000ccc <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4240      	negs	r0, r0
 8000c58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c5c:	4252      	negs	r2, r2
 8000c5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c62:	4770      	bx	lr
 8000c64:	4252      	negs	r2, r2
 8000c66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6a:	f000 f82f 	bl	8000ccc <__udivmoddi4>
 8000c6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c76:	b004      	add	sp, #16
 8000c78:	4240      	negs	r0, r0
 8000c7a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7e:	4770      	bx	lr
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	f000 f821 	bl	8000ccc <__udivmoddi4>
 8000c8a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c92:	b004      	add	sp, #16
 8000c94:	4252      	negs	r2, r2
 8000c96:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_uldivmod>:
 8000c9c:	b953      	cbnz	r3, 8000cb4 <__aeabi_uldivmod+0x18>
 8000c9e:	b94a      	cbnz	r2, 8000cb4 <__aeabi_uldivmod+0x18>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	2800      	cmpeq	r0, #0
 8000ca6:	bf1c      	itt	ne
 8000ca8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cb0:	f000 b970 	b.w	8000f94 <__aeabi_idiv0>
 8000cb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cbc:	f000 f806 	bl	8000ccc <__udivmoddi4>
 8000cc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc8:	b004      	add	sp, #16
 8000cca:	4770      	bx	lr

08000ccc <__udivmoddi4>:
 8000ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd0:	9e08      	ldr	r6, [sp, #32]
 8000cd2:	460d      	mov	r5, r1
 8000cd4:	4604      	mov	r4, r0
 8000cd6:	460f      	mov	r7, r1
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d14a      	bne.n	8000d72 <__udivmoddi4+0xa6>
 8000cdc:	428a      	cmp	r2, r1
 8000cde:	4694      	mov	ip, r2
 8000ce0:	d965      	bls.n	8000dae <__udivmoddi4+0xe2>
 8000ce2:	fab2 f382 	clz	r3, r2
 8000ce6:	b143      	cbz	r3, 8000cfa <__udivmoddi4+0x2e>
 8000ce8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cec:	f1c3 0220 	rsb	r2, r3, #32
 8000cf0:	409f      	lsls	r7, r3
 8000cf2:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf6:	4317      	orrs	r7, r2
 8000cf8:	409c      	lsls	r4, r3
 8000cfa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfe:	fa1f f58c 	uxth.w	r5, ip
 8000d02:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d06:	0c22      	lsrs	r2, r4, #16
 8000d08:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d0c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d10:	fb01 f005 	mul.w	r0, r1, r5
 8000d14:	4290      	cmp	r0, r2
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x62>
 8000d18:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d20:	f080 811c 	bcs.w	8000f5c <__udivmoddi4+0x290>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f240 8119 	bls.w	8000f5c <__udivmoddi4+0x290>
 8000d2a:	3902      	subs	r1, #2
 8000d2c:	4462      	add	r2, ip
 8000d2e:	1a12      	subs	r2, r2, r0
 8000d30:	b2a4      	uxth	r4, r4
 8000d32:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d36:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d3a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3e:	fb00 f505 	mul.w	r5, r0, r5
 8000d42:	42a5      	cmp	r5, r4
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x90>
 8000d46:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d4e:	f080 8107 	bcs.w	8000f60 <__udivmoddi4+0x294>
 8000d52:	42a5      	cmp	r5, r4
 8000d54:	f240 8104 	bls.w	8000f60 <__udivmoddi4+0x294>
 8000d58:	4464      	add	r4, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d60:	1b64      	subs	r4, r4, r5
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11e      	cbz	r6, 8000d6e <__udivmoddi4+0xa2>
 8000d66:	40dc      	lsrs	r4, r3
 8000d68:	2300      	movs	r3, #0
 8000d6a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0xbc>
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	f000 80ed 	beq.w	8000f56 <__udivmoddi4+0x28a>
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d82:	4608      	mov	r0, r1
 8000d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d88:	fab3 f183 	clz	r1, r3
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	d149      	bne.n	8000e24 <__udivmoddi4+0x158>
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	d302      	bcc.n	8000d9a <__udivmoddi4+0xce>
 8000d94:	4282      	cmp	r2, r0
 8000d96:	f200 80f8 	bhi.w	8000f8a <__udivmoddi4+0x2be>
 8000d9a:	1a84      	subs	r4, r0, r2
 8000d9c:	eb65 0203 	sbc.w	r2, r5, r3
 8000da0:	2001      	movs	r0, #1
 8000da2:	4617      	mov	r7, r2
 8000da4:	2e00      	cmp	r6, #0
 8000da6:	d0e2      	beq.n	8000d6e <__udivmoddi4+0xa2>
 8000da8:	e9c6 4700 	strd	r4, r7, [r6]
 8000dac:	e7df      	b.n	8000d6e <__udivmoddi4+0xa2>
 8000dae:	b902      	cbnz	r2, 8000db2 <__udivmoddi4+0xe6>
 8000db0:	deff      	udf	#255	; 0xff
 8000db2:	fab2 f382 	clz	r3, r2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x210>
 8000dbc:	1a8a      	subs	r2, r1, r2
 8000dbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc2:	fa1f fe8c 	uxth.w	lr, ip
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dcc:	fb07 2015 	mls	r0, r7, r5, r2
 8000dd0:	0c22      	lsrs	r2, r4, #16
 8000dd2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd6:	fb0e f005 	mul.w	r0, lr, r5
 8000dda:	4290      	cmp	r0, r2
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x124>
 8000dde:	eb1c 0202 	adds.w	r2, ip, r2
 8000de2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x122>
 8000de8:	4290      	cmp	r0, r2
 8000dea:	f200 80cb 	bhi.w	8000f84 <__udivmoddi4+0x2b8>
 8000dee:	4645      	mov	r5, r8
 8000df0:	1a12      	subs	r2, r2, r0
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dfc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e00:	fb0e fe00 	mul.w	lr, lr, r0
 8000e04:	45a6      	cmp	lr, r4
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x14e>
 8000e08:	eb1c 0404 	adds.w	r4, ip, r4
 8000e0c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e10:	d202      	bcs.n	8000e18 <__udivmoddi4+0x14c>
 8000e12:	45a6      	cmp	lr, r4
 8000e14:	f200 80bb 	bhi.w	8000f8e <__udivmoddi4+0x2c2>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	eba4 040e 	sub.w	r4, r4, lr
 8000e1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e22:	e79f      	b.n	8000d64 <__udivmoddi4+0x98>
 8000e24:	f1c1 0720 	rsb	r7, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e32:	fa05 f401 	lsl.w	r4, r5, r1
 8000e36:	fa20 f307 	lsr.w	r3, r0, r7
 8000e3a:	40fd      	lsrs	r5, r7
 8000e3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e40:	4323      	orrs	r3, r4
 8000e42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e46:	fa1f fe8c 	uxth.w	lr, ip
 8000e4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4e:	0c1c      	lsrs	r4, r3, #16
 8000e50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e54:	fb08 f50e 	mul.w	r5, r8, lr
 8000e58:	42a5      	cmp	r5, r4
 8000e5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000e62:	d90b      	bls.n	8000e7c <__udivmoddi4+0x1b0>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e6c:	f080 8088 	bcs.w	8000f80 <__udivmoddi4+0x2b4>
 8000e70:	42a5      	cmp	r5, r4
 8000e72:	f240 8085 	bls.w	8000f80 <__udivmoddi4+0x2b4>
 8000e76:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7a:	4464      	add	r4, ip
 8000e7c:	1b64      	subs	r4, r4, r5
 8000e7e:	b29d      	uxth	r5, r3
 8000e80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e84:	fb09 4413 	mls	r4, r9, r3, r4
 8000e88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e90:	45a6      	cmp	lr, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x1da>
 8000e94:	eb1c 0404 	adds.w	r4, ip, r4
 8000e98:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e9c:	d26c      	bcs.n	8000f78 <__udivmoddi4+0x2ac>
 8000e9e:	45a6      	cmp	lr, r4
 8000ea0:	d96a      	bls.n	8000f78 <__udivmoddi4+0x2ac>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	4464      	add	r4, ip
 8000ea6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eaa:	fba3 9502 	umull	r9, r5, r3, r2
 8000eae:	eba4 040e 	sub.w	r4, r4, lr
 8000eb2:	42ac      	cmp	r4, r5
 8000eb4:	46c8      	mov	r8, r9
 8000eb6:	46ae      	mov	lr, r5
 8000eb8:	d356      	bcc.n	8000f68 <__udivmoddi4+0x29c>
 8000eba:	d053      	beq.n	8000f64 <__udivmoddi4+0x298>
 8000ebc:	b156      	cbz	r6, 8000ed4 <__udivmoddi4+0x208>
 8000ebe:	ebb0 0208 	subs.w	r2, r0, r8
 8000ec2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec6:	fa04 f707 	lsl.w	r7, r4, r7
 8000eca:	40ca      	lsrs	r2, r1
 8000ecc:	40cc      	lsrs	r4, r1
 8000ece:	4317      	orrs	r7, r2
 8000ed0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000edc:	f1c3 0120 	rsb	r1, r3, #32
 8000ee0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee8:	fa25 f101 	lsr.w	r1, r5, r1
 8000eec:	409d      	lsls	r5, r3
 8000eee:	432a      	orrs	r2, r5
 8000ef0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef4:	fa1f fe8c 	uxth.w	lr, ip
 8000ef8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000efc:	fb07 1510 	mls	r5, r7, r0, r1
 8000f00:	0c11      	lsrs	r1, r2, #16
 8000f02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f06:	fb00 f50e 	mul.w	r5, r0, lr
 8000f0a:	428d      	cmp	r5, r1
 8000f0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x258>
 8000f12:	eb1c 0101 	adds.w	r1, ip, r1
 8000f16:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f1a:	d22f      	bcs.n	8000f7c <__udivmoddi4+0x2b0>
 8000f1c:	428d      	cmp	r5, r1
 8000f1e:	d92d      	bls.n	8000f7c <__udivmoddi4+0x2b0>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4461      	add	r1, ip
 8000f24:	1b49      	subs	r1, r1, r5
 8000f26:	b292      	uxth	r2, r2
 8000f28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000f30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f34:	fb05 f10e 	mul.w	r1, r5, lr
 8000f38:	4291      	cmp	r1, r2
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x282>
 8000f3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000f40:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f44:	d216      	bcs.n	8000f74 <__udivmoddi4+0x2a8>
 8000f46:	4291      	cmp	r1, r2
 8000f48:	d914      	bls.n	8000f74 <__udivmoddi4+0x2a8>
 8000f4a:	3d02      	subs	r5, #2
 8000f4c:	4462      	add	r2, ip
 8000f4e:	1a52      	subs	r2, r2, r1
 8000f50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f54:	e738      	b.n	8000dc8 <__udivmoddi4+0xfc>
 8000f56:	4631      	mov	r1, r6
 8000f58:	4630      	mov	r0, r6
 8000f5a:	e708      	b.n	8000d6e <__udivmoddi4+0xa2>
 8000f5c:	4639      	mov	r1, r7
 8000f5e:	e6e6      	b.n	8000d2e <__udivmoddi4+0x62>
 8000f60:	4610      	mov	r0, r2
 8000f62:	e6fb      	b.n	8000d5c <__udivmoddi4+0x90>
 8000f64:	4548      	cmp	r0, r9
 8000f66:	d2a9      	bcs.n	8000ebc <__udivmoddi4+0x1f0>
 8000f68:	ebb9 0802 	subs.w	r8, r9, r2
 8000f6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f70:	3b01      	subs	r3, #1
 8000f72:	e7a3      	b.n	8000ebc <__udivmoddi4+0x1f0>
 8000f74:	4645      	mov	r5, r8
 8000f76:	e7ea      	b.n	8000f4e <__udivmoddi4+0x282>
 8000f78:	462b      	mov	r3, r5
 8000f7a:	e794      	b.n	8000ea6 <__udivmoddi4+0x1da>
 8000f7c:	4640      	mov	r0, r8
 8000f7e:	e7d1      	b.n	8000f24 <__udivmoddi4+0x258>
 8000f80:	46d0      	mov	r8, sl
 8000f82:	e77b      	b.n	8000e7c <__udivmoddi4+0x1b0>
 8000f84:	3d02      	subs	r5, #2
 8000f86:	4462      	add	r2, ip
 8000f88:	e732      	b.n	8000df0 <__udivmoddi4+0x124>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e70a      	b.n	8000da4 <__udivmoddi4+0xd8>
 8000f8e:	4464      	add	r4, ip
 8000f90:	3802      	subs	r0, #2
 8000f92:	e742      	b.n	8000e1a <__udivmoddi4+0x14e>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <writeReg>:
uint8_t performSingleRefCalibration(uint8_t vhv_init_byte);
//---------------------------------------------------------
// I2C communication Functions
//---------------------------------------------------------
// Write an 8-bit register
void writeReg(uint8_t reg, uint8_t value) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	71bb      	strb	r3, [r7, #6]
	i2c1_WriteRegBuffer(0x53,reg,&value,1);
 8000fa8:	1dba      	adds	r2, r7, #6
 8000faa:	79f9      	ldrb	r1, [r7, #7]
 8000fac:	2301      	movs	r3, #1
 8000fae:	2053      	movs	r0, #83	; 0x53
 8000fb0:	f000 ff26 	bl	8001e00 <i2c1_WriteRegBuffer>

}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <writeReg16Bit>:

// Write a 16-bit register
void writeReg16Bit(uint8_t reg, uint16_t value){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	460a      	mov	r2, r1
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	80bb      	strh	r3, [r7, #4]
	uint8_t tab[2];
	tab[0]= ((value >> 8));
 8000fcc:	88bb      	ldrh	r3, [r7, #4]
 8000fce:	0a1b      	lsrs	r3, r3, #8
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	733b      	strb	r3, [r7, #12]
	tab[1] = ((value ) & 0xFF);
 8000fd6:	88bb      	ldrh	r3, [r7, #4]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	737b      	strb	r3, [r7, #13]
	i2c1_WriteRegBuffer(0x53,reg,tab,2);
 8000fdc:	f107 020c 	add.w	r2, r7, #12
 8000fe0:	79f9      	ldrb	r1, [r7, #7]
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	2053      	movs	r0, #83	; 0x53
 8000fe6:	f000 ff0b 	bl	8001e00 <i2c1_WriteRegBuffer>

}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <readReg>:
		tab[0] = ((value ) & 0xFF);
		i2c1_WriteRegBuffer(0x53,reg,tab,4);
}

// Read an 8-bit register
uint8_t readReg(uint8_t reg) {
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b084      	sub	sp, #16
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	71fb      	strb	r3, [r7, #7]
  	uint8_t value=0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]
  	i2c1_ReadRegBuffer(0x53,reg,&value,1);
 8001000:	f107 020f 	add.w	r2, r7, #15
 8001004:	79f9      	ldrb	r1, [r7, #7]
 8001006:	2301      	movs	r3, #1
 8001008:	2053      	movs	r0, #83	; 0x53
 800100a:	f000 fec7 	bl	8001d9c <i2c1_ReadRegBuffer>
  	return value;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <readReg16Bit>:

// Read a 16-bit register
uint16_t readReg16Bit(uint8_t reg) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
	uint8_t tab[2];
	i2c1_ReadRegBuffer(0x53,reg,tab,2);
 8001022:	f107 020c 	add.w	r2, r7, #12
 8001026:	79f9      	ldrb	r1, [r7, #7]
 8001028:	2302      	movs	r3, #2
 800102a:	2053      	movs	r0, #83	; 0x53
 800102c:	f000 feb6 	bl	8001d9c <i2c1_ReadRegBuffer>
  	uint16_t value= ((uint16_t)tab[0] << 8) | (uint16_t)tab[1];
 8001030:	7b3b      	ldrb	r3, [r7, #12]
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	b21a      	sxth	r2, r3
 8001036:	7b7b      	ldrb	r3, [r7, #13]
 8001038:	b21b      	sxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	b21b      	sxth	r3, r3
 800103e:	81fb      	strh	r3, [r7, #14]
  	return value;
 8001040:	89fb      	ldrh	r3, [r7, #14]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <initVL53L0X>:
// (VL53L0X_PerformRefSpadManagement()), since the API user manual says that it
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
uint8_t initVL53L0X( ){
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  // VL53L0X_DataInit() begin

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 8001050:	2100      	movs	r1, #0
 8001052:	2088      	movs	r0, #136	; 0x88
 8001054:	f7ff ffa0 	bl	8000f98 <writeReg>

  writeReg(0x80, 0x01);
 8001058:	2101      	movs	r1, #1
 800105a:	2080      	movs	r0, #128	; 0x80
 800105c:	f7ff ff9c 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x01);
 8001060:	2101      	movs	r1, #1
 8001062:	20ff      	movs	r0, #255	; 0xff
 8001064:	f7ff ff98 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x00);
 8001068:	2100      	movs	r1, #0
 800106a:	2000      	movs	r0, #0
 800106c:	f7ff ff94 	bl	8000f98 <writeReg>
  g_stopVariable = readReg(0x91);
 8001070:	2091      	movs	r0, #145	; 0x91
 8001072:	f7ff ffbe 	bl	8000ff2 <readReg>
 8001076:	4603      	mov	r3, r0
 8001078:	461a      	mov	r2, r3
 800107a:	4bd5      	ldr	r3, [pc, #852]	; (80013d0 <initVL53L0X+0x384>)
 800107c:	701a      	strb	r2, [r3, #0]
  writeReg(0x00, 0x01);
 800107e:	2101      	movs	r1, #1
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff ff89 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x00);
 8001086:	2100      	movs	r1, #0
 8001088:	20ff      	movs	r0, #255	; 0xff
 800108a:	f7ff ff85 	bl	8000f98 <writeReg>
  writeReg(0x80, 0x00);
 800108e:	2100      	movs	r1, #0
 8001090:	2080      	movs	r0, #128	; 0x80
 8001092:	f7ff ff81 	bl	8000f98 <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 8001096:	2060      	movs	r0, #96	; 0x60
 8001098:	f7ff ffab 	bl	8000ff2 <readReg>
 800109c:	4603      	mov	r3, r0
 800109e:	f043 0312 	orr.w	r3, r3, #18
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	4619      	mov	r1, r3
 80010a6:	2060      	movs	r0, #96	; 0x60
 80010a8:	f7ff ff76 	bl	8000f98 <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 80010ac:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80010b0:	f000 f992 	bl	80013d8 <setSignalRateLimit>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80010b4:	21ff      	movs	r1, #255	; 0xff
 80010b6:	2001      	movs	r0, #1
 80010b8:	f7ff ff6e 	bl	8000f98 <writeReg>
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 80010bc:	2101      	movs	r1, #1
 80010be:	20ff      	movs	r0, #255	; 0xff
 80010c0:	f7ff ff6a 	bl	8000f98 <writeReg>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80010c4:	2100      	movs	r1, #0
 80010c6:	204f      	movs	r0, #79	; 0x4f
 80010c8:	f7ff ff66 	bl	8000f98 <writeReg>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 80010cc:	212c      	movs	r1, #44	; 0x2c
 80010ce:	204e      	movs	r0, #78	; 0x4e
 80010d0:	f7ff ff62 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x00);
 80010d4:	2100      	movs	r1, #0
 80010d6:	20ff      	movs	r0, #255	; 0xff
 80010d8:	f7ff ff5e 	bl	8000f98 <writeReg>
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 80010dc:	21b4      	movs	r1, #180	; 0xb4
 80010de:	20b6      	movs	r0, #182	; 0xb6
 80010e0:	f7ff ff5a 	bl	8000f98 <writeReg>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 80010e4:	2101      	movs	r1, #1
 80010e6:	20ff      	movs	r0, #255	; 0xff
 80010e8:	f7ff ff56 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x00);
 80010ec:	2100      	movs	r1, #0
 80010ee:	2000      	movs	r0, #0
 80010f0:	f7ff ff52 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 80010f4:	2100      	movs	r1, #0
 80010f6:	20ff      	movs	r0, #255	; 0xff
 80010f8:	f7ff ff4e 	bl	8000f98 <writeReg>
  writeReg(0x09, 0x00);
 80010fc:	2100      	movs	r1, #0
 80010fe:	2009      	movs	r0, #9
 8001100:	f7ff ff4a 	bl	8000f98 <writeReg>
  writeReg(0x10, 0x00);
 8001104:	2100      	movs	r1, #0
 8001106:	2010      	movs	r0, #16
 8001108:	f7ff ff46 	bl	8000f98 <writeReg>
  writeReg(0x11, 0x00);
 800110c:	2100      	movs	r1, #0
 800110e:	2011      	movs	r0, #17
 8001110:	f7ff ff42 	bl	8000f98 <writeReg>

  writeReg(0x24, 0x01);
 8001114:	2101      	movs	r1, #1
 8001116:	2024      	movs	r0, #36	; 0x24
 8001118:	f7ff ff3e 	bl	8000f98 <writeReg>
  writeReg(0x25, 0xFF);
 800111c:	21ff      	movs	r1, #255	; 0xff
 800111e:	2025      	movs	r0, #37	; 0x25
 8001120:	f7ff ff3a 	bl	8000f98 <writeReg>
  writeReg(0x75, 0x00);
 8001124:	2100      	movs	r1, #0
 8001126:	2075      	movs	r0, #117	; 0x75
 8001128:	f7ff ff36 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 800112c:	2101      	movs	r1, #1
 800112e:	20ff      	movs	r0, #255	; 0xff
 8001130:	f7ff ff32 	bl	8000f98 <writeReg>
  writeReg(0x4E, 0x2C);
 8001134:	212c      	movs	r1, #44	; 0x2c
 8001136:	204e      	movs	r0, #78	; 0x4e
 8001138:	f7ff ff2e 	bl	8000f98 <writeReg>
  writeReg(0x48, 0x00);
 800113c:	2100      	movs	r1, #0
 800113e:	2048      	movs	r0, #72	; 0x48
 8001140:	f7ff ff2a 	bl	8000f98 <writeReg>
  writeReg(0x30, 0x20);
 8001144:	2120      	movs	r1, #32
 8001146:	2030      	movs	r0, #48	; 0x30
 8001148:	f7ff ff26 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 800114c:	2100      	movs	r1, #0
 800114e:	20ff      	movs	r0, #255	; 0xff
 8001150:	f7ff ff22 	bl	8000f98 <writeReg>
  writeReg(0x30, 0x09);
 8001154:	2109      	movs	r1, #9
 8001156:	2030      	movs	r0, #48	; 0x30
 8001158:	f7ff ff1e 	bl	8000f98 <writeReg>
  writeReg(0x54, 0x00);
 800115c:	2100      	movs	r1, #0
 800115e:	2054      	movs	r0, #84	; 0x54
 8001160:	f7ff ff1a 	bl	8000f98 <writeReg>
  writeReg(0x31, 0x04);
 8001164:	2104      	movs	r1, #4
 8001166:	2031      	movs	r0, #49	; 0x31
 8001168:	f7ff ff16 	bl	8000f98 <writeReg>
  writeReg(0x32, 0x03);
 800116c:	2103      	movs	r1, #3
 800116e:	2032      	movs	r0, #50	; 0x32
 8001170:	f7ff ff12 	bl	8000f98 <writeReg>
  writeReg(0x40, 0x83);
 8001174:	2183      	movs	r1, #131	; 0x83
 8001176:	2040      	movs	r0, #64	; 0x40
 8001178:	f7ff ff0e 	bl	8000f98 <writeReg>
  writeReg(0x46, 0x25);
 800117c:	2125      	movs	r1, #37	; 0x25
 800117e:	2046      	movs	r0, #70	; 0x46
 8001180:	f7ff ff0a 	bl	8000f98 <writeReg>
  writeReg(0x60, 0x00);
 8001184:	2100      	movs	r1, #0
 8001186:	2060      	movs	r0, #96	; 0x60
 8001188:	f7ff ff06 	bl	8000f98 <writeReg>
  writeReg(0x27, 0x00);
 800118c:	2100      	movs	r1, #0
 800118e:	2027      	movs	r0, #39	; 0x27
 8001190:	f7ff ff02 	bl	8000f98 <writeReg>
  writeReg(0x50, 0x06);
 8001194:	2106      	movs	r1, #6
 8001196:	2050      	movs	r0, #80	; 0x50
 8001198:	f7ff fefe 	bl	8000f98 <writeReg>
  writeReg(0x51, 0x00);
 800119c:	2100      	movs	r1, #0
 800119e:	2051      	movs	r0, #81	; 0x51
 80011a0:	f7ff fefa 	bl	8000f98 <writeReg>
  writeReg(0x52, 0x96);
 80011a4:	2196      	movs	r1, #150	; 0x96
 80011a6:	2052      	movs	r0, #82	; 0x52
 80011a8:	f7ff fef6 	bl	8000f98 <writeReg>
  writeReg(0x56, 0x08);
 80011ac:	2108      	movs	r1, #8
 80011ae:	2056      	movs	r0, #86	; 0x56
 80011b0:	f7ff fef2 	bl	8000f98 <writeReg>
  writeReg(0x57, 0x30);
 80011b4:	2130      	movs	r1, #48	; 0x30
 80011b6:	2057      	movs	r0, #87	; 0x57
 80011b8:	f7ff feee 	bl	8000f98 <writeReg>
  writeReg(0x61, 0x00);
 80011bc:	2100      	movs	r1, #0
 80011be:	2061      	movs	r0, #97	; 0x61
 80011c0:	f7ff feea 	bl	8000f98 <writeReg>
  writeReg(0x62, 0x00);
 80011c4:	2100      	movs	r1, #0
 80011c6:	2062      	movs	r0, #98	; 0x62
 80011c8:	f7ff fee6 	bl	8000f98 <writeReg>
  writeReg(0x64, 0x00);
 80011cc:	2100      	movs	r1, #0
 80011ce:	2064      	movs	r0, #100	; 0x64
 80011d0:	f7ff fee2 	bl	8000f98 <writeReg>
  writeReg(0x65, 0x00);
 80011d4:	2100      	movs	r1, #0
 80011d6:	2065      	movs	r0, #101	; 0x65
 80011d8:	f7ff fede 	bl	8000f98 <writeReg>
  writeReg(0x66, 0xA0);
 80011dc:	21a0      	movs	r1, #160	; 0xa0
 80011de:	2066      	movs	r0, #102	; 0x66
 80011e0:	f7ff feda 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 80011e4:	2101      	movs	r1, #1
 80011e6:	20ff      	movs	r0, #255	; 0xff
 80011e8:	f7ff fed6 	bl	8000f98 <writeReg>
  writeReg(0x22, 0x32);
 80011ec:	2132      	movs	r1, #50	; 0x32
 80011ee:	2022      	movs	r0, #34	; 0x22
 80011f0:	f7ff fed2 	bl	8000f98 <writeReg>
  writeReg(0x47, 0x14);
 80011f4:	2114      	movs	r1, #20
 80011f6:	2047      	movs	r0, #71	; 0x47
 80011f8:	f7ff fece 	bl	8000f98 <writeReg>
  writeReg(0x49, 0xFF);
 80011fc:	21ff      	movs	r1, #255	; 0xff
 80011fe:	2049      	movs	r0, #73	; 0x49
 8001200:	f7ff feca 	bl	8000f98 <writeReg>
  writeReg(0x4A, 0x00);
 8001204:	2100      	movs	r1, #0
 8001206:	204a      	movs	r0, #74	; 0x4a
 8001208:	f7ff fec6 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 800120c:	2100      	movs	r1, #0
 800120e:	20ff      	movs	r0, #255	; 0xff
 8001210:	f7ff fec2 	bl	8000f98 <writeReg>
  writeReg(0x7A, 0x0A);
 8001214:	210a      	movs	r1, #10
 8001216:	207a      	movs	r0, #122	; 0x7a
 8001218:	f7ff febe 	bl	8000f98 <writeReg>
  writeReg(0x7B, 0x00);
 800121c:	2100      	movs	r1, #0
 800121e:	207b      	movs	r0, #123	; 0x7b
 8001220:	f7ff feba 	bl	8000f98 <writeReg>
  writeReg(0x78, 0x21);
 8001224:	2121      	movs	r1, #33	; 0x21
 8001226:	2078      	movs	r0, #120	; 0x78
 8001228:	f7ff feb6 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 800122c:	2101      	movs	r1, #1
 800122e:	20ff      	movs	r0, #255	; 0xff
 8001230:	f7ff feb2 	bl	8000f98 <writeReg>
  writeReg(0x23, 0x34);
 8001234:	2134      	movs	r1, #52	; 0x34
 8001236:	2023      	movs	r0, #35	; 0x23
 8001238:	f7ff feae 	bl	8000f98 <writeReg>
  writeReg(0x42, 0x00);
 800123c:	2100      	movs	r1, #0
 800123e:	2042      	movs	r0, #66	; 0x42
 8001240:	f7ff feaa 	bl	8000f98 <writeReg>
  writeReg(0x44, 0xFF);
 8001244:	21ff      	movs	r1, #255	; 0xff
 8001246:	2044      	movs	r0, #68	; 0x44
 8001248:	f7ff fea6 	bl	8000f98 <writeReg>
  writeReg(0x45, 0x26);
 800124c:	2126      	movs	r1, #38	; 0x26
 800124e:	2045      	movs	r0, #69	; 0x45
 8001250:	f7ff fea2 	bl	8000f98 <writeReg>
  writeReg(0x46, 0x05);
 8001254:	2105      	movs	r1, #5
 8001256:	2046      	movs	r0, #70	; 0x46
 8001258:	f7ff fe9e 	bl	8000f98 <writeReg>
  writeReg(0x40, 0x40);
 800125c:	2140      	movs	r1, #64	; 0x40
 800125e:	2040      	movs	r0, #64	; 0x40
 8001260:	f7ff fe9a 	bl	8000f98 <writeReg>
  writeReg(0x0E, 0x06);
 8001264:	2106      	movs	r1, #6
 8001266:	200e      	movs	r0, #14
 8001268:	f7ff fe96 	bl	8000f98 <writeReg>
  writeReg(0x20, 0x1A);
 800126c:	211a      	movs	r1, #26
 800126e:	2020      	movs	r0, #32
 8001270:	f7ff fe92 	bl	8000f98 <writeReg>
  writeReg(0x43, 0x40);
 8001274:	2140      	movs	r1, #64	; 0x40
 8001276:	2043      	movs	r0, #67	; 0x43
 8001278:	f7ff fe8e 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 800127c:	2100      	movs	r1, #0
 800127e:	20ff      	movs	r0, #255	; 0xff
 8001280:	f7ff fe8a 	bl	8000f98 <writeReg>
  writeReg(0x34, 0x03);
 8001284:	2103      	movs	r1, #3
 8001286:	2034      	movs	r0, #52	; 0x34
 8001288:	f7ff fe86 	bl	8000f98 <writeReg>
  writeReg(0x35, 0x44);
 800128c:	2144      	movs	r1, #68	; 0x44
 800128e:	2035      	movs	r0, #53	; 0x35
 8001290:	f7ff fe82 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 8001294:	2101      	movs	r1, #1
 8001296:	20ff      	movs	r0, #255	; 0xff
 8001298:	f7ff fe7e 	bl	8000f98 <writeReg>
  writeReg(0x31, 0x04);
 800129c:	2104      	movs	r1, #4
 800129e:	2031      	movs	r0, #49	; 0x31
 80012a0:	f7ff fe7a 	bl	8000f98 <writeReg>
  writeReg(0x4B, 0x09);
 80012a4:	2109      	movs	r1, #9
 80012a6:	204b      	movs	r0, #75	; 0x4b
 80012a8:	f7ff fe76 	bl	8000f98 <writeReg>
  writeReg(0x4C, 0x05);
 80012ac:	2105      	movs	r1, #5
 80012ae:	204c      	movs	r0, #76	; 0x4c
 80012b0:	f7ff fe72 	bl	8000f98 <writeReg>
  writeReg(0x4D, 0x04);
 80012b4:	2104      	movs	r1, #4
 80012b6:	204d      	movs	r0, #77	; 0x4d
 80012b8:	f7ff fe6e 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 80012bc:	2100      	movs	r1, #0
 80012be:	20ff      	movs	r0, #255	; 0xff
 80012c0:	f7ff fe6a 	bl	8000f98 <writeReg>
  writeReg(0x44, 0x00);
 80012c4:	2100      	movs	r1, #0
 80012c6:	2044      	movs	r0, #68	; 0x44
 80012c8:	f7ff fe66 	bl	8000f98 <writeReg>
  writeReg(0x45, 0x20);
 80012cc:	2120      	movs	r1, #32
 80012ce:	2045      	movs	r0, #69	; 0x45
 80012d0:	f7ff fe62 	bl	8000f98 <writeReg>
  writeReg(0x47, 0x08);
 80012d4:	2108      	movs	r1, #8
 80012d6:	2047      	movs	r0, #71	; 0x47
 80012d8:	f7ff fe5e 	bl	8000f98 <writeReg>
  writeReg(0x48, 0x28);
 80012dc:	2128      	movs	r1, #40	; 0x28
 80012de:	2048      	movs	r0, #72	; 0x48
 80012e0:	f7ff fe5a 	bl	8000f98 <writeReg>
  writeReg(0x67, 0x00);
 80012e4:	2100      	movs	r1, #0
 80012e6:	2067      	movs	r0, #103	; 0x67
 80012e8:	f7ff fe56 	bl	8000f98 <writeReg>
  writeReg(0x70, 0x04);
 80012ec:	2104      	movs	r1, #4
 80012ee:	2070      	movs	r0, #112	; 0x70
 80012f0:	f7ff fe52 	bl	8000f98 <writeReg>
  writeReg(0x71, 0x01);
 80012f4:	2101      	movs	r1, #1
 80012f6:	2071      	movs	r0, #113	; 0x71
 80012f8:	f7ff fe4e 	bl	8000f98 <writeReg>
  writeReg(0x72, 0xFE);
 80012fc:	21fe      	movs	r1, #254	; 0xfe
 80012fe:	2072      	movs	r0, #114	; 0x72
 8001300:	f7ff fe4a 	bl	8000f98 <writeReg>
  writeReg(0x76, 0x00);
 8001304:	2100      	movs	r1, #0
 8001306:	2076      	movs	r0, #118	; 0x76
 8001308:	f7ff fe46 	bl	8000f98 <writeReg>
  writeReg(0x77, 0x00);
 800130c:	2100      	movs	r1, #0
 800130e:	2077      	movs	r0, #119	; 0x77
 8001310:	f7ff fe42 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 8001314:	2101      	movs	r1, #1
 8001316:	20ff      	movs	r0, #255	; 0xff
 8001318:	f7ff fe3e 	bl	8000f98 <writeReg>
  writeReg(0x0D, 0x01);
 800131c:	2101      	movs	r1, #1
 800131e:	200d      	movs	r0, #13
 8001320:	f7ff fe3a 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 8001324:	2100      	movs	r1, #0
 8001326:	20ff      	movs	r0, #255	; 0xff
 8001328:	f7ff fe36 	bl	8000f98 <writeReg>
  writeReg(0x80, 0x01);
 800132c:	2101      	movs	r1, #1
 800132e:	2080      	movs	r0, #128	; 0x80
 8001330:	f7ff fe32 	bl	8000f98 <writeReg>
  writeReg(0x01, 0xF8);
 8001334:	21f8      	movs	r1, #248	; 0xf8
 8001336:	2001      	movs	r0, #1
 8001338:	f7ff fe2e 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 800133c:	2101      	movs	r1, #1
 800133e:	20ff      	movs	r0, #255	; 0xff
 8001340:	f7ff fe2a 	bl	8000f98 <writeReg>
  writeReg(0x8E, 0x01);
 8001344:	2101      	movs	r1, #1
 8001346:	208e      	movs	r0, #142	; 0x8e
 8001348:	f7ff fe26 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x01);
 800134c:	2101      	movs	r1, #1
 800134e:	2000      	movs	r0, #0
 8001350:	f7ff fe22 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x00);
 8001354:	2100      	movs	r1, #0
 8001356:	20ff      	movs	r0, #255	; 0xff
 8001358:	f7ff fe1e 	bl	8000f98 <writeReg>
  writeReg(0x80, 0x00);
 800135c:	2100      	movs	r1, #0
 800135e:	2080      	movs	r0, #128	; 0x80
 8001360:	f7ff fe1a 	bl	8000f98 <writeReg>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8001364:	2104      	movs	r1, #4
 8001366:	200a      	movs	r0, #10
 8001368:	f7ff fe16 	bl	8000f98 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 800136c:	2084      	movs	r0, #132	; 0x84
 800136e:	f7ff fe40 	bl	8000ff2 <readReg>
 8001372:	4603      	mov	r3, r0
 8001374:	f023 0310 	bic.w	r3, r3, #16
 8001378:	b2db      	uxtb	r3, r3
 800137a:	4619      	mov	r1, r3
 800137c:	2084      	movs	r0, #132	; 0x84
 800137e:	f7ff fe0b 	bl	8000f98 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001382:	2101      	movs	r1, #1
 8001384:	200b      	movs	r0, #11
 8001386:	f7ff fe07 	bl	8000f98 <writeReg>
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 800138a:	21e8      	movs	r1, #232	; 0xe8
 800138c:	2001      	movs	r0, #1
 800138e:	f7ff fe03 	bl	8000f98 <writeReg>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 8001392:	2101      	movs	r1, #1
 8001394:	2001      	movs	r0, #1
 8001396:	f7ff fdff 	bl	8000f98 <writeReg>
  if (!performSingleRefCalibration(0x40)) { return false; }
 800139a:	2040      	movs	r0, #64	; 0x40
 800139c:	f000 f888 	bl	80014b0 <performSingleRefCalibration>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <initVL53L0X+0x35e>
 80013a6:	2300      	movs	r3, #0
 80013a8:	e010      	b.n	80013cc <initVL53L0X+0x380>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80013aa:	2102      	movs	r1, #2
 80013ac:	2001      	movs	r0, #1
 80013ae:	f7ff fdf3 	bl	8000f98 <writeReg>
  if (!performSingleRefCalibration(0x00)) { return false; }
 80013b2:	2000      	movs	r0, #0
 80013b4:	f000 f87c 	bl	80014b0 <performSingleRefCalibration>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <initVL53L0X+0x376>
 80013be:	2300      	movs	r3, #0
 80013c0:	e004      	b.n	80013cc <initVL53L0X+0x380>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80013c2:	21e8      	movs	r1, #232	; 0xe8
 80013c4:	2001      	movs	r0, #1
 80013c6:	f7ff fde7 	bl	8000f98 <writeReg>

  // VL53L0X_PerformRefCalibration() end

  return 1;
 80013ca:	2301      	movs	r3, #1
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000104 	.word	0x20000104
 80013d4:	00000000 	.word	0x00000000

080013d8 <setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
uint8_t setSignalRateLimit(float limit_Mcps)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	ed87 0a01 	vstr	s0, [r7, #4]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80013e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	d40a      	bmi.n	8001406 <setSignalRateLimit+0x2e>
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff f8c1 	bl	8000578 <__aeabi_f2d>
 80013f6:	a311      	add	r3, pc, #68	; (adr r3, 800143c <setSignalRateLimit+0x64>)
 80013f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fc:	f7ff fba4 	bl	8000b48 <__aeabi_dcmpgt>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <setSignalRateLimit+0x32>
 8001406:	2300      	movs	r3, #0
 8001408:	e00f      	b.n	800142a <setSignalRateLimit+0x52>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 800140a:	edd7 7a01 	vldr	s15, [r7, #4]
 800140e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001438 <setSignalRateLimit+0x60>
 8001412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800141a:	ee17 3a90 	vmov	r3, s15
 800141e:	b29b      	uxth	r3, r3
 8001420:	4619      	mov	r1, r3
 8001422:	2044      	movs	r0, #68	; 0x44
 8001424:	f7ff fdca 	bl	8000fbc <writeReg16Bit>
  return 0;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	f3af 8000 	nop.w
 8001438:	43000000 	.word	0x43000000
 800143c:	0a3d70a4 	.word	0x0a3d70a4
 8001440:	407fffd7 	.word	0x407fffd7

08001444 <readRangeSingleMillimeters>:

// Performs a single-shot range measurement and returns the reading in
// millimeters
// based on VL53L0X_PerformSingleRangingMeasurement()
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t readRangeSingleMillimeters( /*statInfo_t *extraStats */) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
  writeReg(0x80, 0x01);
 800144a:	2101      	movs	r1, #1
 800144c:	2080      	movs	r0, #128	; 0x80
 800144e:	f7ff fda3 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x01);
 8001452:	2101      	movs	r1, #1
 8001454:	20ff      	movs	r0, #255	; 0xff
 8001456:	f7ff fd9f 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x00);
 800145a:	2100      	movs	r1, #0
 800145c:	2000      	movs	r0, #0
 800145e:	f7ff fd9b 	bl	8000f98 <writeReg>
  writeReg(0x91, g_stopVariable);
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <readRangeSingleMillimeters+0x68>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	4619      	mov	r1, r3
 8001468:	2091      	movs	r0, #145	; 0x91
 800146a:	f7ff fd95 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x01);
 800146e:	2101      	movs	r1, #1
 8001470:	2000      	movs	r0, #0
 8001472:	f7ff fd91 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x00);
 8001476:	2100      	movs	r1, #0
 8001478:	20ff      	movs	r0, #255	; 0xff
 800147a:	f7ff fd8d 	bl	8000f98 <writeReg>
  writeReg(0x80, 0x00);
 800147e:	2100      	movs	r1, #0
 8001480:	2080      	movs	r0, #128	; 0x80
 8001482:	f7ff fd89 	bl	8000f98 <writeReg>
  writeReg(SYSRANGE_START, 0x01);
 8001486:	2101      	movs	r1, #1
 8001488:	2000      	movs	r0, #0
 800148a:	f7ff fd85 	bl	8000f98 <writeReg>

  uint16_t temp;

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  temp = readReg16Bit(RESULT_RANGE_STATUS + 10);
 800148e:	201e      	movs	r0, #30
 8001490:	f7ff fdc2 	bl	8001018 <readReg16Bit>
 8001494:	4603      	mov	r3, r0
 8001496:	80fb      	strh	r3, [r7, #6]
  temp+=0;

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001498:	2101      	movs	r1, #1
 800149a:	200b      	movs	r0, #11
 800149c:	f7ff fd7c 	bl	8000f98 <writeReg>
  return temp;
 80014a0:	88fb      	ldrh	r3, [r7, #6]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000104 	.word	0x20000104

080014b0 <performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
uint8_t performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	4619      	mov	r1, r3
 80014c4:	2000      	movs	r0, #0
 80014c6:	f7ff fd67 	bl	8000f98 <writeReg>



  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80014ca:	2101      	movs	r1, #1
 80014cc:	200b      	movs	r0, #11
 80014ce:	f7ff fd63 	bl	8000f98 <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 80014d2:	2100      	movs	r1, #0
 80014d4:	2000      	movs	r0, #0
 80014d6:	f7ff fd5f 	bl	8000f98 <writeReg>

  return 1;
 80014da:	2301      	movs	r3, #1
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <captDistIR_Init>:
//=================================================================
//			ADC INIT FOR IR SENSOR SHARP GP2D12
//=================================================================

void  captDistIR_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
	adcHandle.Instance		= ADC1;
 80014e8:	4b15      	ldr	r3, [pc, #84]	; (8001540 <captDistIR_Init+0x5c>)
 80014ea:	4a16      	ldr	r2, [pc, #88]	; (8001544 <captDistIR_Init+0x60>)
 80014ec:	601a      	str	r2, [r3, #0]

	adcHandle.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV2;
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <captDistIR_Init+0x5c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	605a      	str	r2, [r3, #4]
	adcHandle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <captDistIR_Init+0x5c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
	adcHandle.Init.Resolution = ADC_RESOLUTION12b;
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <captDistIR_Init+0x5c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
	// Don't do continuous conversions - do them on demand
	adcHandle.Init.ContinuousConvMode    = DISABLE;  // Continuous mode disabled to have only 1 conversion at each conversion trig
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <captDistIR_Init+0x5c>)
 8001502:	2200      	movs	r2, #0
 8001504:	619a      	str	r2, [r3, #24]
	// Disable the scan conversion so we do one at a time */
	adcHandle.Init.ScanConvMode = DISABLE;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <captDistIR_Init+0x5c>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
	//Say how many channels would be used by the sequencer
	adcHandle.Init.NbrOfConversion = 2;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <captDistIR_Init+0x5c>)
 800150e:	2202      	movs	r2, #2
 8001510:	621a      	str	r2, [r3, #32]
	adcHandle.Init.DiscontinuousConvMode = DISABLE;  // Parameter discarded because sequencer is disabled
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <captDistIR_Init+0x5c>)
 8001514:	2200      	movs	r2, #0
 8001516:	625a      	str	r2, [r3, #36]	; 0x24
	adcHandle.Init.NbrOfDiscConversion = 2;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <captDistIR_Init+0x5c>)
 800151a:	2202      	movs	r2, #2
 800151c:	629a      	str	r2, [r3, #40]	; 0x28
	adcHandle.Init.ExternalTrigConvEdge =  ADC_EXTERNALTRIGCONVEDGE_NONE ;
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <captDistIR_Init+0x5c>)
 8001520:	2200      	movs	r2, #0
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c
	//Start conversion by software, not an external trigger
	adcHandle.Init.ExternalTrigConv = 0;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <captDistIR_Init+0x5c>)
 8001526:	2200      	movs	r2, #0
 8001528:	631a      	str	r2, [r3, #48]	; 0x30
	adcHandle.Init.DMAContinuousRequests = DISABLE;
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <captDistIR_Init+0x5c>)
 800152c:	2200      	movs	r2, #0
 800152e:	61da      	str	r2, [r3, #28]
	adcHandle.Init.EOCSelection = DISABLE;
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <captDistIR_Init+0x5c>)
 8001532:	2200      	movs	r2, #0
 8001534:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&adcHandle);
 8001536:	4802      	ldr	r0, [pc, #8]	; (8001540 <captDistIR_Init+0x5c>)
 8001538:	f003 fa08 	bl	800494c <HAL_ADC_Init>
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000108 	.word	0x20000108
 8001544:	40012000 	.word	0x40012000

08001548 <captDistIR_Get>:
//=================================================================
//			IR GET (POLL METHOD)
//=================================================================

int  captDistIR_Get(int* tab)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	sConfig.Channel      = ADC_CHANNEL_4;
 8001550:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <captDistIR_Get+0x80>)
 8001552:	2204      	movs	r2, #4
 8001554:	601a      	str	r2, [r3, #0]
	sConfig.Rank         = 1;
 8001556:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <captDistIR_Get+0x80>)
 8001558:	2201      	movs	r2, #1
 800155a:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800155c:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <captDistIR_Get+0x80>)
 800155e:	2203      	movs	r2, #3
 8001560:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 8001562:	4919      	ldr	r1, [pc, #100]	; (80015c8 <captDistIR_Get+0x80>)
 8001564:	4819      	ldr	r0, [pc, #100]	; (80015cc <captDistIR_Get+0x84>)
 8001566:	f003 fadd 	bl	8004b24 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&adcHandle);					//Start the conversion
 800156a:	4818      	ldr	r0, [pc, #96]	; (80015cc <captDistIR_Get+0x84>)
 800156c:	f003 fa22 	bl	80049b4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&adcHandle,10);	//Processing the conversion
 8001570:	210a      	movs	r1, #10
 8001572:	4816      	ldr	r0, [pc, #88]	; (80015cc <captDistIR_Get+0x84>)
 8001574:	f003 fa8a 	bl	8004a8c <HAL_ADC_PollForConversion>
	tab[0]=HAL_ADC_GetValue(&adcHandle); 		//Return the converted data
 8001578:	4814      	ldr	r0, [pc, #80]	; (80015cc <captDistIR_Get+0x84>)
 800157a:	f003 fac6 	bl	8004b0a <HAL_ADC_GetValue>
 800157e:	4603      	mov	r3, r0
 8001580:	461a      	mov	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	601a      	str	r2, [r3, #0]

	sConfig.Channel      = ADC_CHANNEL_8;
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <captDistIR_Get+0x80>)
 8001588:	2208      	movs	r2, #8
 800158a:	601a      	str	r2, [r3, #0]
	sConfig.Rank         = 1;
 800158c:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <captDistIR_Get+0x80>)
 800158e:	2201      	movs	r2, #1
 8001590:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001592:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <captDistIR_Get+0x80>)
 8001594:	2203      	movs	r2, #3
 8001596:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 8001598:	490b      	ldr	r1, [pc, #44]	; (80015c8 <captDistIR_Get+0x80>)
 800159a:	480c      	ldr	r0, [pc, #48]	; (80015cc <captDistIR_Get+0x84>)
 800159c:	f003 fac2 	bl	8004b24 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&adcHandle);						//Start the conversion
 80015a0:	480a      	ldr	r0, [pc, #40]	; (80015cc <captDistIR_Get+0x84>)
 80015a2:	f003 fa07 	bl	80049b4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&adcHandle,10);		//Processing the conversion
 80015a6:	210a      	movs	r1, #10
 80015a8:	4808      	ldr	r0, [pc, #32]	; (80015cc <captDistIR_Get+0x84>)
 80015aa:	f003 fa6f 	bl	8004a8c <HAL_ADC_PollForConversion>
	tab[1]=HAL_ADC_GetValue(&adcHandle); 			//Return the converted data
 80015ae:	4807      	ldr	r0, [pc, #28]	; (80015cc <captDistIR_Get+0x84>)
 80015b0:	f003 faab 	bl	8004b0a <HAL_ADC_GetValue>
 80015b4:	4602      	mov	r2, r0
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3304      	adds	r3, #4
 80015ba:	601a      	str	r2, [r3, #0]

	return 0;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	2000014c 	.word	0x2000014c
 80015cc:	20000108 	.word	0x20000108

080015d0 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80015dc:	f00b f96a 	bl	800c8b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80015e0:	4b58      	ldr	r3, [pc, #352]	; (8001744 <pvPortMallocMicroROS+0x174>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80015e8:	f000 f98c 	bl	8001904 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80015ec:	4b56      	ldr	r3, [pc, #344]	; (8001748 <pvPortMallocMicroROS+0x178>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f040 808e 	bne.w	8001716 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d01d      	beq.n	800163c <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8001600:	2208      	movs	r2, #8
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	2b00      	cmp	r3, #0
 8001610:	d014      	beq.n	800163c <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f023 0307 	bic.w	r3, r3, #7
 8001618:	3308      	adds	r3, #8
 800161a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00a      	beq.n	800163c <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800162a:	f383 8811 	msr	BASEPRI, r3
 800162e:	f3bf 8f6f 	isb	sy
 8001632:	f3bf 8f4f 	dsb	sy
 8001636:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001638:	bf00      	nop
 800163a:	e7fe      	b.n	800163a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d069      	beq.n	8001716 <pvPortMallocMicroROS+0x146>
 8001642:	4b42      	ldr	r3, [pc, #264]	; (800174c <pvPortMallocMicroROS+0x17c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	429a      	cmp	r2, r3
 800164a:	d864      	bhi.n	8001716 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800164c:	4b40      	ldr	r3, [pc, #256]	; (8001750 <pvPortMallocMicroROS+0x180>)
 800164e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001650:	4b3f      	ldr	r3, [pc, #252]	; (8001750 <pvPortMallocMicroROS+0x180>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001656:	e004      	b.n	8001662 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	429a      	cmp	r2, r3
 800166a:	d903      	bls.n	8001674 <pvPortMallocMicroROS+0xa4>
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f1      	bne.n	8001658 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001674:	4b33      	ldr	r3, [pc, #204]	; (8001744 <pvPortMallocMicroROS+0x174>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800167a:	429a      	cmp	r2, r3
 800167c:	d04b      	beq.n	8001716 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800167e:	6a3b      	ldr	r3, [r7, #32]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2208      	movs	r2, #8
 8001684:	4413      	add	r3, r2
 8001686:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	6a3b      	ldr	r3, [r7, #32]
 800168e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	1ad2      	subs	r2, r2, r3
 8001698:	2308      	movs	r3, #8
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	429a      	cmp	r2, r3
 800169e:	d91f      	bls.n	80016e0 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80016a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00a      	beq.n	80016c8 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 80016b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016b6:	f383 8811 	msr	BASEPRI, r3
 80016ba:	f3bf 8f6f 	isb	sy
 80016be:	f3bf 8f4f 	dsb	sy
 80016c2:	613b      	str	r3, [r7, #16]
}
 80016c4:	bf00      	nop
 80016c6:	e7fe      	b.n	80016c6 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	1ad2      	subs	r2, r2, r3
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80016da:	69b8      	ldr	r0, [r7, #24]
 80016dc:	f000 f974 	bl	80019c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80016e0:	4b1a      	ldr	r3, [pc, #104]	; (800174c <pvPortMallocMicroROS+0x17c>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	4a18      	ldr	r2, [pc, #96]	; (800174c <pvPortMallocMicroROS+0x17c>)
 80016ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80016ee:	4b17      	ldr	r3, [pc, #92]	; (800174c <pvPortMallocMicroROS+0x17c>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	4b18      	ldr	r3, [pc, #96]	; (8001754 <pvPortMallocMicroROS+0x184>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d203      	bcs.n	8001702 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <pvPortMallocMicroROS+0x17c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a15      	ldr	r2, [pc, #84]	; (8001754 <pvPortMallocMicroROS+0x184>)
 8001700:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <pvPortMallocMicroROS+0x178>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	431a      	orrs	r2, r3
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001716:	f00b f8db 	bl	800c8d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00a      	beq.n	800173a <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8001724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001728:	f383 8811 	msr	BASEPRI, r3
 800172c:	f3bf 8f6f 	isb	sy
 8001730:	f3bf 8f4f 	dsb	sy
 8001734:	60fb      	str	r3, [r7, #12]
}
 8001736:	bf00      	nop
 8001738:	e7fe      	b.n	8001738 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 800173a:	69fb      	ldr	r3, [r7, #28]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3728      	adds	r7, #40	; 0x28
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20004164 	.word	0x20004164
 8001748:	20004170 	.word	0x20004170
 800174c:	20004168 	.word	0x20004168
 8001750:	2000415c 	.word	0x2000415c
 8001754:	2000416c 	.word	0x2000416c

08001758 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d048      	beq.n	80017fc <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800176a:	2308      	movs	r3, #8
 800176c:	425b      	negs	r3, r3
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	4413      	add	r3, r2
 8001772:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	4b21      	ldr	r3, [pc, #132]	; (8001804 <vPortFreeMicroROS+0xac>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4013      	ands	r3, r2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10a      	bne.n	800179c <vPortFreeMicroROS+0x44>
	__asm volatile
 8001786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800178a:	f383 8811 	msr	BASEPRI, r3
 800178e:	f3bf 8f6f 	isb	sy
 8001792:	f3bf 8f4f 	dsb	sy
 8001796:	60fb      	str	r3, [r7, #12]
}
 8001798:	bf00      	nop
 800179a:	e7fe      	b.n	800179a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00a      	beq.n	80017ba <vPortFreeMicroROS+0x62>
	__asm volatile
 80017a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017a8:	f383 8811 	msr	BASEPRI, r3
 80017ac:	f3bf 8f6f 	isb	sy
 80017b0:	f3bf 8f4f 	dsb	sy
 80017b4:	60bb      	str	r3, [r7, #8]
}
 80017b6:	bf00      	nop
 80017b8:	e7fe      	b.n	80017b8 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <vPortFreeMicroROS+0xac>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d019      	beq.n	80017fc <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d115      	bne.n	80017fc <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <vPortFreeMicroROS+0xac>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	43db      	mvns	r3, r3
 80017da:	401a      	ands	r2, r3
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80017e0:	f00b f868 	bl	800c8b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <vPortFreeMicroROS+0xb0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4413      	add	r3, r2
 80017ee:	4a06      	ldr	r2, [pc, #24]	; (8001808 <vPortFreeMicroROS+0xb0>)
 80017f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80017f2:	6938      	ldr	r0, [r7, #16]
 80017f4:	f000 f8e8 	bl	80019c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80017f8:	f00b f86a 	bl	800c8d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80017fc:	bf00      	nop
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20004170 	.word	0x20004170
 8001808:	20004168 	.word	0x20004168

0800180c <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 800180c:	b480      	push	{r7}
 800180e:	b087      	sub	sp, #28
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001818:	2308      	movs	r3, #8
 800181a:	425b      	negs	r3, r3
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	4413      	add	r3, r2
 8001820:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <getBlockSize+0x38>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	43db      	mvns	r3, r3
 8001830:	4013      	ands	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]

	return count;
 8001834:	68fb      	ldr	r3, [r7, #12]
}
 8001836:	4618      	mov	r0, r3
 8001838:	371c      	adds	r7, #28
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20004170 	.word	0x20004170

08001848 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001852:	f00b f82f 	bl	800c8b4 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001856:	6838      	ldr	r0, [r7, #0]
 8001858:	f7ff feba 	bl	80015d0 <pvPortMallocMicroROS>
 800185c:	6138      	str	r0, [r7, #16]

	uint8_t *puc = ( uint8_t * ) pv;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	60fb      	str	r3, [r7, #12]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001862:	2308      	movs	r3, #8
 8001864:	425b      	negs	r3, r3
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	4413      	add	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]
	pxLink = ( void * ) puc;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	60bb      	str	r3, [r7, #8]


	char *in_src = (char*)pv;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	61fb      	str	r3, [r7, #28]
  	char *in_dest = (char*)newmem;
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	61bb      	str	r3, [r7, #24]
	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <pvPortReallocMicroROS+0x70>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	43db      	mvns	r3, r3
 8001882:	4013      	ands	r3, r2
 8001884:	617b      	str	r3, [r7, #20]

  	while(count--)
 8001886:	e007      	b.n	8001898 <pvPortReallocMicroROS+0x50>
    	*in_dest++ = *in_src++;
 8001888:	69fa      	ldr	r2, [r7, #28]
 800188a:	1c53      	adds	r3, r2, #1
 800188c:	61fb      	str	r3, [r7, #28]
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	1c59      	adds	r1, r3, #1
 8001892:	61b9      	str	r1, [r7, #24]
 8001894:	7812      	ldrb	r2, [r2, #0]
 8001896:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	1e5a      	subs	r2, r3, #1
 800189c:	617a      	str	r2, [r7, #20]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f2      	bne.n	8001888 <pvPortReallocMicroROS+0x40>

	vPortFreeMicroROS(pv);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ff58 	bl	8001758 <vPortFreeMicroROS>

	( void ) xTaskResumeAll();
 80018a8:	f00b f812 	bl	800c8d0 <xTaskResumeAll>

	return newmem;
 80018ac:	693b      	ldr	r3, [r7, #16]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3720      	adds	r7, #32
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20004170 	.word	0x20004170

080018bc <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80018c6:	f00a fff5 	bl	800c8b4 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	fb02 f303 	mul.w	r3, r2, r3
 80018d2:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80018d4:	6978      	ldr	r0, [r7, #20]
 80018d6:	f7ff fe7b 	bl	80015d0 <pvPortMallocMicroROS>
 80018da:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	613b      	str	r3, [r7, #16]

  	while(count--)
 80018e0:	e004      	b.n	80018ec <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1c5a      	adds	r2, r3, #1
 80018e6:	613a      	str	r2, [r7, #16]
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	1e5a      	subs	r2, r3, #1
 80018f0:	617a      	str	r2, [r7, #20]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f5      	bne.n	80018e2 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80018f6:	f00a ffeb 	bl	800c8d0 <xTaskResumeAll>
  	return mem;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800190a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800190e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001910:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <prvHeapInit+0xac>)
 8001912:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00c      	beq.n	8001938 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	3307      	adds	r3, #7
 8001922:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f023 0307 	bic.w	r3, r3, #7
 800192a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800192c:	68ba      	ldr	r2, [r7, #8]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	4a1f      	ldr	r2, [pc, #124]	; (80019b0 <prvHeapInit+0xac>)
 8001934:	4413      	add	r3, r2
 8001936:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800193c:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <prvHeapInit+0xb0>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001942:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <prvHeapInit+0xb0>)
 8001944:	2200      	movs	r2, #0
 8001946:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	4413      	add	r3, r2
 800194e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001950:	2208      	movs	r2, #8
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	1a9b      	subs	r3, r3, r2
 8001956:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f023 0307 	bic.w	r3, r3, #7
 800195e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4a15      	ldr	r2, [pc, #84]	; (80019b8 <prvHeapInit+0xb4>)
 8001964:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001966:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <prvHeapInit+0xb4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2200      	movs	r2, #0
 800196c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800196e:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <prvHeapInit+0xb4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	1ad2      	subs	r2, r2, r3
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <prvHeapInit+0xb4>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <prvHeapInit+0xb8>)
 8001992:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	4a09      	ldr	r2, [pc, #36]	; (80019c0 <prvHeapInit+0xbc>)
 800199a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <prvHeapInit+0xc0>)
 800199e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019a2:	601a      	str	r2, [r3, #0]
}
 80019a4:	bf00      	nop
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	2000015c 	.word	0x2000015c
 80019b4:	2000415c 	.word	0x2000415c
 80019b8:	20004164 	.word	0x20004164
 80019bc:	2000416c 	.word	0x2000416c
 80019c0:	20004168 	.word	0x20004168
 80019c4:	20004170 	.word	0x20004170

080019c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80019d0:	4b28      	ldr	r3, [pc, #160]	; (8001a74 <prvInsertBlockIntoFreeList+0xac>)
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	e002      	b.n	80019dc <prvInsertBlockIntoFreeList+0x14>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d8f7      	bhi.n	80019d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	4413      	add	r3, r2
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d108      	bne.n	8001a0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	441a      	add	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	441a      	add	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d118      	bne.n	8001a50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <prvInsertBlockIntoFreeList+0xb0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d00d      	beq.n	8001a46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	441a      	add	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	e008      	b.n	8001a58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001a46:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <prvInsertBlockIntoFreeList+0xb0>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	e003      	b.n	8001a58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d002      	beq.n	8001a66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
 8001a66:	bf00      	nop
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	2000415c 	.word	0x2000415c
 8001a78:	20004164 	.word	0x20004164

08001a7c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001a8a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001a8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a90:	4904      	ldr	r1, [pc, #16]	; (8001aa4 <cubemx_transport_open+0x28>)
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f008 fac4 	bl	800a020 <HAL_UART_Receive_DMA>
    return true;
 8001a98:	2301      	movs	r3, #1
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20004174 	.word	0x20004174

08001aa8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001ab6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f008 fae1 	bl	800a080 <HAL_UART_DMAStop>
    return true;
 8001abe:	2301      	movs	r3, #1
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001adc:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b20      	cmp	r3, #32
 8001ae8:	d11c      	bne.n	8001b24 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	461a      	mov	r2, r3
 8001af0:	68b9      	ldr	r1, [r7, #8]
 8001af2:	6978      	ldr	r0, [r7, #20]
 8001af4:	f008 fa16 	bl	8009f24 <HAL_UART_Transmit_DMA>
 8001af8:	4603      	mov	r3, r0
 8001afa:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001afc:	e002      	b.n	8001b04 <cubemx_transport_write+0x3c>
            osDelay(1);
 8001afe:	2001      	movs	r0, #1
 8001b00:	f009 fd2e 	bl	800b560 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001b04:	7cfb      	ldrb	r3, [r7, #19]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d105      	bne.n	8001b16 <cubemx_transport_write+0x4e>
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b20      	cmp	r3, #32
 8001b14:	d1f3      	bne.n	8001afe <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001b16:	7cfb      	ldrb	r3, [r7, #19]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <cubemx_transport_write+0x58>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	e002      	b.n	8001b26 <cubemx_transport_write+0x5e>
 8001b20:	2300      	movs	r3, #0
 8001b22:	e000      	b.n	8001b26 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001b24:	2300      	movs	r3, #0
    }
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001b44:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b4a:	b672      	cpsid	i
}
 8001b4c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001b5a:	4a1c      	ldr	r2, [pc, #112]	; (8001bcc <cubemx_transport_read+0x9c>)
 8001b5c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b5e:	b662      	cpsie	i
}
 8001b60:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3301      	adds	r3, #1
 8001b66:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f009 fcf9 	bl	800b560 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001b6e:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <cubemx_transport_read+0xa0>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <cubemx_transport_read+0x9c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d103      	bne.n	8001b82 <cubemx_transport_read+0x52>
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	dbe3      	blt.n	8001b4a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001b86:	e011      	b.n	8001bac <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <cubemx_transport_read+0xa0>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	440b      	add	r3, r1
 8001b92:	4910      	ldr	r1, [pc, #64]	; (8001bd4 <cubemx_transport_read+0xa4>)
 8001b94:	5c8a      	ldrb	r2, [r1, r2]
 8001b96:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001b98:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <cubemx_transport_read+0xa0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ba2:	4a0b      	ldr	r2, [pc, #44]	; (8001bd0 <cubemx_transport_read+0xa0>)
 8001ba4:	6013      	str	r3, [r2, #0]
        wrote++;
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <cubemx_transport_read+0xa0>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <cubemx_transport_read+0x9c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d003      	beq.n	8001bc0 <cubemx_transport_read+0x90>
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d3e3      	bcc.n	8001b88 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001bc0:	69bb      	ldr	r3, [r7, #24]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3720      	adds	r7, #32
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20004978 	.word	0x20004978
 8001bd0:	20004974 	.word	0x20004974
 8001bd4:	20004174 	.word	0x20004174

08001bd8 <MX_GPIO_Init>:
#include "main.h"
#include "drv_gpio.h"

void MX_GPIO_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
 8001bec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	4b2d      	ldr	r3, [pc, #180]	; (8001ca8 <MX_GPIO_Init+0xd0>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a2c      	ldr	r2, [pc, #176]	; (8001ca8 <MX_GPIO_Init+0xd0>)
 8001bf8:	f043 0304 	orr.w	r3, r3, #4
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b2a      	ldr	r3, [pc, #168]	; (8001ca8 <MX_GPIO_Init+0xd0>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b26      	ldr	r3, [pc, #152]	; (8001ca8 <MX_GPIO_Init+0xd0>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a25      	ldr	r2, [pc, #148]	; (8001ca8 <MX_GPIO_Init+0xd0>)
 8001c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b23      	ldr	r3, [pc, #140]	; (8001ca8 <MX_GPIO_Init+0xd0>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <MX_GPIO_Init+0xd0>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a1e      	ldr	r2, [pc, #120]	; (8001ca8 <MX_GPIO_Init+0xd0>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <MX_GPIO_Init+0xd0>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <MX_GPIO_Init+0xd0>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a17      	ldr	r2, [pc, #92]	; (8001ca8 <MX_GPIO_Init+0xd0>)
 8001c4c:	f043 0302 	orr.w	r3, r3, #2
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <MX_GPIO_Init+0xd0>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2120      	movs	r1, #32
 8001c62:	4812      	ldr	r0, [pc, #72]	; (8001cac <MX_GPIO_Init+0xd4>)
 8001c64:	f003 ffb8 	bl	8005bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c6e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	480c      	ldr	r0, [pc, #48]	; (8001cb0 <MX_GPIO_Init+0xd8>)
 8001c80:	f003 fe26 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c84:	2320      	movs	r3, #32
 8001c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	2300      	movs	r3, #0
 8001c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4804      	ldr	r0, [pc, #16]	; (8001cac <MX_GPIO_Init+0xd4>)
 8001c9c:	f003 fe18 	bl	80058d0 <HAL_GPIO_Init>

}
 8001ca0:	bf00      	nop
 8001ca2:	3728      	adds	r7, #40	; 0x28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40020000 	.word	0x40020000
 8001cb0:	40020800 	.word	0x40020800

08001cb4 <HAL_GPIO_EXTI_Callback>:

extern void quadEncoder_CallbackIndexL(void);
extern void quadEncoder_CallbackIndexR(void);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cc4:	d017      	beq.n	8001cf6 <HAL_GPIO_EXTI_Callback+0x42>
 8001cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cca:	dc16      	bgt.n	8001cfa <HAL_GPIO_EXTI_Callback+0x46>
 8001ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd0:	d00e      	beq.n	8001cf0 <HAL_GPIO_EXTI_Callback+0x3c>
 8001cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd6:	dc10      	bgt.n	8001cfa <HAL_GPIO_EXTI_Callback+0x46>
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d010      	beq.n	8001cfe <HAL_GPIO_EXTI_Callback+0x4a>
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	dc0c      	bgt.n	8001cfa <HAL_GPIO_EXTI_Callback+0x46>
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d002      	beq.n	8001cea <HAL_GPIO_EXTI_Callback+0x36>
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d00c      	beq.n	8001d02 <HAL_GPIO_EXTI_Callback+0x4e>
					break;

	case GPIO_PIN_13 :		// USER BUTTON
					break;

	default : 		break;
 8001ce8:	e007      	b.n	8001cfa <HAL_GPIO_EXTI_Callback+0x46>
		quadEncoder_CallbackIndexR();
 8001cea:	f001 fdc1 	bl	8003870 <quadEncoder_CallbackIndexR>
					break;
 8001cee:	e009      	b.n	8001d04 <HAL_GPIO_EXTI_Callback+0x50>
		quadEncoder_CallbackIndexL();
 8001cf0:	f001 fd98 	bl	8003824 <quadEncoder_CallbackIndexL>
					break;
 8001cf4:	e006      	b.n	8001d04 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8001cf6:	bf00      	nop
 8001cf8:	e004      	b.n	8001d04 <HAL_GPIO_EXTI_Callback+0x50>
	default : 		break;
 8001cfa:	bf00      	nop
 8001cfc:	e002      	b.n	8001d04 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8001cfe:	bf00      	nop
 8001d00:	e000      	b.n	8001d04 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8001d02:	bf00      	nop


	}
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <MX_I2C1_Init>:


I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d12:	4a13      	ldr	r2, [pc, #76]	; (8001d60 <MX_I2C1_Init+0x54>)
 8001d14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d18:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <MX_I2C1_Init+0x58>)
 8001d1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d30:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d3c:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d48:	4804      	ldr	r0, [pc, #16]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d4a:	f003 ff77 	bl	8005c3c <HAL_I2C_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d54:	f001 fa22 	bl	800319c <Error_Handler>
  }

}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	2000497c 	.word	0x2000497c
 8001d60:	40005400 	.word	0x40005400
 8001d64:	000186a0 	.word	0x000186a0

08001d68 <i2c1_WriteBuffer>:

//======================================================================
// Transmit n_data bytes to i2c slave
//======================================================================
int i2c1_WriteBuffer(uint16_t addrSlave, uint8_t *data, int n_data)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af02      	add	r7, sp, #8
 8001d6e:	4603      	mov	r3, r0
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	81fb      	strh	r3, [r7, #14]
	int status;
	status = HAL_I2C_Master_Transmit(&hi2c1, addrSlave, data, n_data , 100);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	89f9      	ldrh	r1, [r7, #14]
 8001d7c:	2264      	movs	r2, #100	; 0x64
 8001d7e:	9200      	str	r2, [sp, #0]
 8001d80:	68ba      	ldr	r2, [r7, #8]
 8001d82:	4805      	ldr	r0, [pc, #20]	; (8001d98 <i2c1_WriteBuffer+0x30>)
 8001d84:	f004 f89e 	bl	8005ec4 <HAL_I2C_Master_Transmit>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	617b      	str	r3, [r7, #20]
	return status;
 8001d8c:	697b      	ldr	r3, [r7, #20]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	2000497c 	.word	0x2000497c

08001d9c <i2c1_ReadRegBuffer>:
}
//======================================================================
// Receive n_data bytes - located at regAddr - from i2c slave
//======================================================================
int i2c1_ReadRegBuffer(uint16_t addrSlave, uint8_t  regAddr,  uint8_t *data, int n_data)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af02      	add	r7, sp, #8
 8001da2:	60ba      	str	r2, [r7, #8]
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	4603      	mov	r3, r0
 8001da8:	81fb      	strh	r3, [r7, #14]
 8001daa:	460b      	mov	r3, r1
 8001dac:	737b      	strb	r3, [r7, #13]
    int status;
    uint8_t RegAddr;
    RegAddr=regAddr;
 8001dae:	7b7b      	ldrb	r3, [r7, #13]
 8001db0:	74fb      	strb	r3, [r7, #19]
    do{
        status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, &RegAddr, 1, 100);
 8001db2:	f107 0213 	add.w	r2, r7, #19
 8001db6:	89f9      	ldrh	r1, [r7, #14]
 8001db8:	2364      	movs	r3, #100	; 0x64
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	480f      	ldr	r0, [pc, #60]	; (8001dfc <i2c1_ReadRegBuffer+0x60>)
 8001dc0:	f004 f880 	bl	8005ec4 <HAL_I2C_Master_Transmit>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	617b      	str	r3, [r7, #20]
        if( status )
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10f      	bne.n	8001dee <i2c1_ReadRegBuffer+0x52>
            break;
        status =HAL_I2C_Master_Receive(&hi2c1, addrSlave, data, n_data, n_data*100);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2164      	movs	r1, #100	; 0x64
 8001dd6:	fb01 f303 	mul.w	r3, r1, r3
 8001dda:	89f9      	ldrh	r1, [r7, #14]
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	4613      	mov	r3, r2
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	4806      	ldr	r0, [pc, #24]	; (8001dfc <i2c1_ReadRegBuffer+0x60>)
 8001de4:	f004 f96c 	bl	80060c0 <HAL_I2C_Master_Receive>
 8001de8:	4603      	mov	r3, r0
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	e000      	b.n	8001df0 <i2c1_ReadRegBuffer+0x54>
            break;
 8001dee:	bf00      	nop
    }while(0);
    return status;
 8001df0:	697b      	ldr	r3, [r7, #20]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	2000497c 	.word	0x2000497c

08001e00 <i2c1_WriteRegBuffer>:

//======================================================================
// Write n_data bytes - have to be written at regAddr - to i2c slave
//======================================================================
int i2c1_WriteRegBuffer(uint16_t addrSlave, uint8_t  regAddr,  uint8_t *data, int n_data)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08c      	sub	sp, #48	; 0x30
 8001e04:	af02      	add	r7, sp, #8
 8001e06:	60ba      	str	r2, [r7, #8]
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	81fb      	strh	r3, [r7, #14]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	737b      	strb	r3, [r7, #13]
    int status;
    uint8_t RegAddr[0x10];
    RegAddr[0]=regAddr;
 8001e12:	7b7b      	ldrb	r3, [r7, #13]
 8001e14:	753b      	strb	r3, [r7, #20]
    memcpy(RegAddr+1, data, n_data);
 8001e16:	f107 0314 	add.w	r3, r7, #20
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	68b9      	ldr	r1, [r7, #8]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f016 f9c8 	bl	80181b6 <memcpy>
   status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, RegAddr, n_data+1, 100);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	f107 0214 	add.w	r2, r7, #20
 8001e32:	89f9      	ldrh	r1, [r7, #14]
 8001e34:	2064      	movs	r0, #100	; 0x64
 8001e36:	9000      	str	r0, [sp, #0]
 8001e38:	4804      	ldr	r0, [pc, #16]	; (8001e4c <i2c1_WriteRegBuffer+0x4c>)
 8001e3a:	f004 f843 	bl	8005ec4 <HAL_I2C_Master_Transmit>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
     return status;
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3728      	adds	r7, #40	; 0x28
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	2000497c 	.word	0x2000497c

08001e50 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;


void MX_USART1_UART_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e56:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <MX_USART1_UART_Init+0x50>)
 8001e58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e76:	220c      	movs	r2, #12
 8001e78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e86:	4805      	ldr	r0, [pc, #20]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e88:	f007 fecb 	bl	8009c22 <HAL_UART_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e92:	f001 f983 	bl	800319c <Error_Handler>
  }
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200049d0 	.word	0x200049d0
 8001ea0:	40011000 	.word	0x40011000

08001ea4 <MX_USART2_UART_Init>:


void MX_USART2_UART_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <MX_USART2_UART_Init+0x4c>)
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <MX_USART2_UART_Init+0x50>)
 8001eac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <MX_USART2_UART_Init+0x4c>)
 8001eb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <MX_USART2_UART_Init+0x4c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <MX_USART2_UART_Init+0x4c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <MX_USART2_UART_Init+0x4c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <MX_USART2_UART_Init+0x4c>)
 8001eca:	220c      	movs	r2, #12
 8001ecc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <MX_USART2_UART_Init+0x4c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <MX_USART2_UART_Init+0x4c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eda:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <MX_USART2_UART_Init+0x4c>)
 8001edc:	f007 fea1 	bl	8009c22 <HAL_UART_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ee6:	f001 f959 	bl	800319c <Error_Handler>
  }
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20004a14 	.word	0x20004a14
 8001ef4:	40004400 	.word	0x40004400

08001ef8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	4b1f      	ldr	r3, [pc, #124]	; (8001f80 <MX_DMA_Init+0x88>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	4a1e      	ldr	r2, [pc, #120]	; (8001f80 <MX_DMA_Init+0x88>)
 8001f08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0e:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <MX_DMA_Init+0x88>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f16:	607b      	str	r3, [r7, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <MX_DMA_Init+0x88>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4a17      	ldr	r2, [pc, #92]	; (8001f80 <MX_DMA_Init+0x88>)
 8001f24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f28:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <MX_DMA_Init+0x88>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	2105      	movs	r1, #5
 8001f3a:	2010      	movs	r0, #16
 8001f3c:	f003 f88e 	bl	800505c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001f40:	2010      	movs	r0, #16
 8001f42:	f003 f8a7 	bl	8005094 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2105      	movs	r1, #5
 8001f4a:	2011      	movs	r0, #17
 8001f4c:	f003 f886 	bl	800505c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001f50:	2011      	movs	r0, #17
 8001f52:	f003 f89f 	bl	8005094 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2105      	movs	r1, #5
 8001f5a:	203a      	movs	r0, #58	; 0x3a
 8001f5c:	f003 f87e 	bl	800505c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001f60:	203a      	movs	r0, #58	; 0x3a
 8001f62:	f003 f897 	bl	8005094 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2105      	movs	r1, #5
 8001f6a:	2046      	movs	r0, #70	; 0x46
 8001f6c:	f003 f876 	bl	800505c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001f70:	2046      	movs	r0, #70	; 0x46
 8001f72:	f003 f88f 	bl	8005094 <HAL_NVIC_EnableIRQ>

}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800

08001f84 <i2c_send_byteS>:
{
	i2c1_WriteBuffer(LCD_ADDRESS, &dta, 1);
}
//=================================================================
void i2c_send_byteS(unsigned char *dta, unsigned char len)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	70fb      	strb	r3, [r7, #3]
	i2c1_WriteBuffer(LCD_ADDRESS, dta, len);
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	461a      	mov	r2, r3
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	207c      	movs	r0, #124	; 0x7c
 8001f98:	f7ff fee6 	bl	8001d68 <i2c1_WriteBuffer>
}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <groveLCD_begin>:
//=================================================================
void groveLCD_begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	71fb      	strb	r3, [r7, #7]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	71bb      	strb	r3, [r7, #6]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	717b      	strb	r3, [r7, #5]
    if (lines > 1) {
 8001fb6:	79bb      	ldrb	r3, [r7, #6]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d906      	bls.n	8001fca <groveLCD_begin+0x26>
        _displayfunction |= LCD_2LINE;
 8001fbc:	4b33      	ldr	r3, [pc, #204]	; (800208c <groveLCD_begin+0xe8>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	f043 0308 	orr.w	r3, r3, #8
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4b31      	ldr	r3, [pc, #196]	; (800208c <groveLCD_begin+0xe8>)
 8001fc8:	701a      	strb	r2, [r3, #0]
    }
    _numlines = lines;
 8001fca:	4a31      	ldr	r2, [pc, #196]	; (8002090 <groveLCD_begin+0xec>)
 8001fcc:	79bb      	ldrb	r3, [r7, #6]
 8001fce:	7013      	strb	r3, [r2, #0]
    _currline = 0;
 8001fd0:	4b30      	ldr	r3, [pc, #192]	; (8002094 <groveLCD_begin+0xf0>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]

    // for some 1 line displays you can select a 10 pixel high font
    if ((dotsize != 0) && (lines == 1)) {
 8001fd6:	797b      	ldrb	r3, [r7, #5]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d009      	beq.n	8001ff0 <groveLCD_begin+0x4c>
 8001fdc:	79bb      	ldrb	r3, [r7, #6]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d106      	bne.n	8001ff0 <groveLCD_begin+0x4c>
        _displayfunction |= LCD_5x10DOTS;
 8001fe2:	4b2a      	ldr	r3, [pc, #168]	; (800208c <groveLCD_begin+0xe8>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	f043 0304 	orr.w	r3, r3, #4
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	4b27      	ldr	r3, [pc, #156]	; (800208c <groveLCD_begin+0xe8>)
 8001fee:	701a      	strb	r2, [r3, #0]
    }

    // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
    // according to datasheet, we need at least 40ms after power rises above 2.7V
    // before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
    HAL_Delay(50);
 8001ff0:	2032      	movs	r0, #50	; 0x32
 8001ff2:	f002 fc87 	bl	8004904 <HAL_Delay>

    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8001ff6:	4b25      	ldr	r3, [pc, #148]	; (800208c <groveLCD_begin+0xe8>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	f043 0320 	orr.w	r3, r3, #32
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	4618      	mov	r0, r3
 8002002:	f000 f89b 	bl	800213c <groveLCD_command>
    HAL_Delay(5);  // wait more than 4.1ms
 8002006:	2005      	movs	r0, #5
 8002008:	f002 fc7c 	bl	8004904 <HAL_Delay>

    // second try
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 800200c:	4b1f      	ldr	r3, [pc, #124]	; (800208c <groveLCD_begin+0xe8>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	f043 0320 	orr.w	r3, r3, #32
 8002014:	b2db      	uxtb	r3, r3
 8002016:	4618      	mov	r0, r3
 8002018:	f000 f890 	bl	800213c <groveLCD_command>
    HAL_Delay(5);
 800201c:	2005      	movs	r0, #5
 800201e:	f002 fc71 	bl	8004904 <HAL_Delay>

    // third go
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8002022:	4b1a      	ldr	r3, [pc, #104]	; (800208c <groveLCD_begin+0xe8>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	f043 0320 	orr.w	r3, r3, #32
 800202a:	b2db      	uxtb	r3, r3
 800202c:	4618      	mov	r0, r3
 800202e:	f000 f885 	bl	800213c <groveLCD_command>


    // finally, set # lines, font size, etc.
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8002032:	4b16      	ldr	r3, [pc, #88]	; (800208c <groveLCD_begin+0xe8>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	f043 0320 	orr.w	r3, r3, #32
 800203a:	b2db      	uxtb	r3, r3
 800203c:	4618      	mov	r0, r3
 800203e:	f000 f87d 	bl	800213c <groveLCD_command>

    // turn the display on with no cursor or blinking default
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8002042:	4b15      	ldr	r3, [pc, #84]	; (8002098 <groveLCD_begin+0xf4>)
 8002044:	2204      	movs	r2, #4
 8002046:	701a      	strb	r2, [r3, #0]
    groveLCD_display();
 8002048:	f000 f862 	bl	8002110 <groveLCD_display>

    // clear it off
    groveLCD_clear();
 800204c:	f000 f831 	bl	80020b2 <groveLCD_clear>

    // Initialize to default text direction (for romance languages)
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <groveLCD_begin+0xf8>)
 8002052:	2202      	movs	r2, #2
 8002054:	701a      	strb	r2, [r3, #0]
    // set the entry mode
    groveLCD_command(LCD_ENTRYMODESET | _displaymode);
 8002056:	4b11      	ldr	r3, [pc, #68]	; (800209c <groveLCD_begin+0xf8>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	f043 0304 	orr.w	r3, r3, #4
 800205e:	b2db      	uxtb	r3, r3
 8002060:	4618      	mov	r0, r3
 8002062:	f000 f86b 	bl	800213c <groveLCD_command>


    // backlight init
    groveLCD_setReg(REG_MODE1, 0);
 8002066:	2100      	movs	r1, #0
 8002068:	2000      	movs	r0, #0
 800206a:	f000 f8a4 	bl	80021b6 <groveLCD_setReg>
    // set LEDs controllable by both PWM and GRPPWM registers
    groveLCD_setReg(REG_OUTPUT, 0xFF);
 800206e:	21ff      	movs	r1, #255	; 0xff
 8002070:	2008      	movs	r0, #8
 8002072:	f000 f8a0 	bl	80021b6 <groveLCD_setReg>
    // set MODE2 values
    // 0010 0000 -> 0x20  (DMBLNK to 1, ie blinky mode)
    groveLCD_setReg(REG_MODE2, 0x20);
 8002076:	2120      	movs	r1, #32
 8002078:	2001      	movs	r0, #1
 800207a:	f000 f89c 	bl	80021b6 <groveLCD_setReg>

    groveLCD_setColorWhite();
 800207e:	f000 f80f 	bl	80020a0 <groveLCD_setColorWhite>

}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20004bd8 	.word	0x20004bd8
 8002090:	20004bdb 	.word	0x20004bdb
 8002094:	20004bdc 	.word	0x20004bdc
 8002098:	20004bd9 	.word	0x20004bd9
 800209c:	20004bda 	.word	0x20004bda

080020a0 <groveLCD_setColorWhite>:
//=================================================================
void groveLCD_setColorAll(){groveLCD_setRGB(0, 0, 0);}
void groveLCD_setColorWhite(){groveLCD_setRGB(255, 255, 255);}
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	22ff      	movs	r2, #255	; 0xff
 80020a6:	21ff      	movs	r1, #255	; 0xff
 80020a8:	20ff      	movs	r0, #255	; 0xff
 80020aa:	f000 f896 	bl	80021da <groveLCD_setRGB>
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <groveLCD_clear>:
//=================================================================

/********** high level commands, for the user! */
void groveLCD_clear()
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	af00      	add	r7, sp, #0
	groveLCD_command(LCD_CLEARDISPLAY);        // clear display, set cursor position to zero
 80020b6:	2001      	movs	r0, #1
 80020b8:	f000 f840 	bl	800213c <groveLCD_command>
    HAL_Delay(2000);          // this command takes a long time!
 80020bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80020c0:	f002 fc20 	bl	8004904 <HAL_Delay>
}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <groveLCD_setCursor>:
	groveLCD_command(LCD_RETURNHOME);        // set cursor position to zero
    HAL_Delay(2000);        // this command takes a long time!
}
//=================================================================
void groveLCD_setCursor(uint8_t col, uint8_t row)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	460a      	mov	r2, r1
 80020d2:	71fb      	strb	r3, [r7, #7]
 80020d4:	4613      	mov	r3, r2
 80020d6:	71bb      	strb	r3, [r7, #6]
    col = (row == 0 ? col|0x80 : col|0xc0);
 80020d8:	79bb      	ldrb	r3, [r7, #6]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d104      	bne.n	80020e8 <groveLCD_setCursor+0x20>
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	e003      	b.n	80020f0 <groveLCD_setCursor+0x28>
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, col};
 80020f2:	2380      	movs	r3, #128	; 0x80
 80020f4:	733b      	strb	r3, [r7, #12]
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 80020fa:	f107 030c 	add.w	r3, r7, #12
 80020fe:	2102      	movs	r1, #2
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff3f 	bl	8001f84 <i2c_send_byteS>
}
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <groveLCD_display>:
{
    _displaycontrol &= ~LCD_DISPLAYON;
    groveLCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
}
//=================================================================
void groveLCD_display() {
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
    _displaycontrol |= LCD_DISPLAYON;
 8002114:	4b08      	ldr	r3, [pc, #32]	; (8002138 <groveLCD_display+0x28>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	f043 0304 	orr.w	r3, r3, #4
 800211c:	b2da      	uxtb	r2, r3
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <groveLCD_display+0x28>)
 8002120:	701a      	strb	r2, [r3, #0]
    groveLCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
 8002122:	4b05      	ldr	r3, [pc, #20]	; (8002138 <groveLCD_display+0x28>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	f043 0308 	orr.w	r3, r3, #8
 800212a:	b2db      	uxtb	r3, r3
 800212c:	4618      	mov	r0, r3
 800212e:	f000 f805 	bl	800213c <groveLCD_command>
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20004bd9 	.word	0x20004bd9

0800213c <groveLCD_command>:
//=================================================================
/*********** mid level commands, for sending data/cmds */

// send command
void groveLCD_command(uint8_t value)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, value};
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	733b      	strb	r3, [r7, #12]
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 800214e:	f107 030c 	add.w	r3, r7, #12
 8002152:	2102      	movs	r1, #2
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff15 	bl	8001f84 <i2c_send_byteS>
}
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <groveLCD_write>:
//=================================================================
// send data
int groveLCD_write(uint8_t value)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b084      	sub	sp, #16
 8002166:	af00      	add	r7, sp, #0
 8002168:	4603      	mov	r3, r0
 800216a:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x40, value};
 800216c:	2340      	movs	r3, #64	; 0x40
 800216e:	733b      	strb	r3, [r7, #12]
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 8002174:	f107 030c 	add.w	r3, r7, #12
 8002178:	2102      	movs	r1, #2
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff ff02 	bl	8001f84 <i2c_send_byteS>
    return 1; // assume sucess
 8002180:	2301      	movs	r3, #1
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <groveLCD_putString>:
//=================================================================
void groveLCD_putString(char* s)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
	while(*s != '\0')
 8002192:	e007      	b.n	80021a4 <groveLCD_putString+0x1a>
	{
		groveLCD_write(*s);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ffe2 	bl	8002162 <groveLCD_write>
		s++;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3301      	adds	r3, #1
 80021a2:	607b      	str	r3, [r7, #4]
	while(*s != '\0')
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f3      	bne.n	8002194 <groveLCD_putString+0xa>
	}
}
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <groveLCD_setReg>:
//=================================================================
void groveLCD_setReg(unsigned char addr, unsigned char dta)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	4603      	mov	r3, r0
 80021be:	460a      	mov	r2, r1
 80021c0:	71fb      	strb	r3, [r7, #7]
 80021c2:	4613      	mov	r3, r2
 80021c4:	71bb      	strb	r3, [r7, #6]
    i2c1_WriteRegBuffer(RGB_ADDRESS, addr,  &dta, 1);
 80021c6:	1dba      	adds	r2, r7, #6
 80021c8:	79f9      	ldrb	r1, [r7, #7]
 80021ca:	2301      	movs	r3, #1
 80021cc:	20c4      	movs	r0, #196	; 0xc4
 80021ce:	f7ff fe17 	bl	8001e00 <i2c1_WriteRegBuffer>
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <groveLCD_setRGB>:
//=================================================================
void groveLCD_setRGB(unsigned char r, unsigned char g, unsigned char b)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4603      	mov	r3, r0
 80021e2:	71fb      	strb	r3, [r7, #7]
 80021e4:	460b      	mov	r3, r1
 80021e6:	71bb      	strb	r3, [r7, #6]
 80021e8:	4613      	mov	r3, r2
 80021ea:	717b      	strb	r3, [r7, #5]
	groveLCD_setReg(REG_RED, r);
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	4619      	mov	r1, r3
 80021f0:	2004      	movs	r0, #4
 80021f2:	f7ff ffe0 	bl	80021b6 <groveLCD_setReg>
	groveLCD_setReg(REG_GREEN, g);
 80021f6:	79bb      	ldrb	r3, [r7, #6]
 80021f8:	4619      	mov	r1, r3
 80021fa:	2003      	movs	r0, #3
 80021fc:	f7ff ffdb 	bl	80021b6 <groveLCD_setReg>
	groveLCD_setReg(REG_BLUE, b);
 8002200:	797b      	ldrb	r3, [r7, #5]
 8002202:	4619      	mov	r1, r3
 8002204:	2002      	movs	r0, #2
 8002206:	f7ff ffd6 	bl	80021b6 <groveLCD_setReg>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <groveLCD_setColor>:
    {0, 255, 0},                // green
    {0, 0, 255},                // blue
};
//=================================================================
void groveLCD_setColor(unsigned char color)
{
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
    if(color > 3)return ;
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	2b03      	cmp	r3, #3
 8002222:	d81a      	bhi.n	800225a <groveLCD_setColor+0x46>
    groveLCD_setRGB(color_define[color][0], color_define[color][1], color_define[color][2]);
 8002224:	79fa      	ldrb	r2, [r7, #7]
 8002226:	490f      	ldr	r1, [pc, #60]	; (8002264 <groveLCD_setColor+0x50>)
 8002228:	4613      	mov	r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4413      	add	r3, r2
 800222e:	440b      	add	r3, r1
 8002230:	7818      	ldrb	r0, [r3, #0]
 8002232:	79fa      	ldrb	r2, [r7, #7]
 8002234:	490b      	ldr	r1, [pc, #44]	; (8002264 <groveLCD_setColor+0x50>)
 8002236:	4613      	mov	r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4413      	add	r3, r2
 800223c:	440b      	add	r3, r1
 800223e:	3301      	adds	r3, #1
 8002240:	7819      	ldrb	r1, [r3, #0]
 8002242:	79fa      	ldrb	r2, [r7, #7]
 8002244:	4c07      	ldr	r4, [pc, #28]	; (8002264 <groveLCD_setColor+0x50>)
 8002246:	4613      	mov	r3, r2
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	4413      	add	r3, r2
 800224c:	4423      	add	r3, r4
 800224e:	3302      	adds	r3, #2
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	f7ff ffc1 	bl	80021da <groveLCD_setRGB>
 8002258:	e000      	b.n	800225c <groveLCD_setColor+0x48>
    if(color > 3)return ;
 800225a:	bf00      	nop
}
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	bd90      	pop	{r4, r7, pc}
 8002262:	bf00      	nop
 8002264:	080190a4 	.word	0x080190a4

08002268 <groveLCD_term_printf>:
//============================================================
void groveLCD_term_printf(const char* fmt, ...)
{
 8002268:	b40f      	push	{r0, r1, r2, r3}
 800226a:	b5b0      	push	{r4, r5, r7, lr}
 800226c:	b0a4      	sub	sp, #144	; 0x90
 800226e:	af02      	add	r7, sp, #8
	unsigned long  ul;
	unsigned long long ull;
	unsigned long  size;
	unsigned int   sp;
	char           s[60];
	int first=0;
 8002270:	2300      	movs	r3, #0
 8002272:	677b      	str	r3, [r7, #116]	; 0x74

	va_start(ap, fmt);
 8002274:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002278:	64bb      	str	r3, [r7, #72]	; 0x48

	while (*fmt != '\0') {
 800227a:	e1cd      	b.n	8002618 <groveLCD_term_printf+0x3b0>
		if (*fmt =='%') {
 800227c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b25      	cmp	r3, #37	; 0x25
 8002284:	f040 81bd 	bne.w	8002602 <groveLCD_term_printf+0x39a>
			size=0; sp=1;
 8002288:	2300      	movs	r3, #0
 800228a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800228c:	2301      	movs	r3, #1
 800228e:	67bb      	str	r3, [r7, #120]	; 0x78
			if (*++fmt=='0') {fmt++; sp=0;}	// parse %04d --> sp=0
 8002290:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002294:	3301      	adds	r3, #1
 8002296:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800229a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b30      	cmp	r3, #48	; 0x30
 80022a2:	d106      	bne.n	80022b2 <groveLCD_term_printf+0x4a>
 80022a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022a8:	3301      	adds	r3, #1
 80022aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022ae:	2300      	movs	r3, #0
 80022b0:	67bb      	str	r3, [r7, #120]	; 0x78
			ch=*fmt;
 80022b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if ((ch>'0') && (ch<='9')) {	// parse %4d --> size=4
 80022bc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80022c0:	2b30      	cmp	r3, #48	; 0x30
 80022c2:	d92c      	bls.n	800231e <groveLCD_term_printf+0xb6>
 80022c4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80022c8:	2b39      	cmp	r3, #57	; 0x39
 80022ca:	d828      	bhi.n	800231e <groveLCD_term_printf+0xb6>
				char tmp[10];
				int i=0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	673b      	str	r3, [r7, #112]	; 0x70
				while ((ch>='0') && (ch<='9')) {
 80022d0:	e012      	b.n	80022f8 <groveLCD_term_printf+0x90>
					tmp[i++]=ch;
 80022d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	673a      	str	r2, [r7, #112]	; 0x70
 80022d8:	3388      	adds	r3, #136	; 0x88
 80022da:	443b      	add	r3, r7
 80022dc:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80022e0:	f803 2c88 	strb.w	r2, [r3, #-136]
					ch=*++fmt;
 80022e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022e8:	3301      	adds	r3, #1
 80022ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				while ((ch>='0') && (ch<='9')) {
 80022f8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80022fc:	2b2f      	cmp	r3, #47	; 0x2f
 80022fe:	d903      	bls.n	8002308 <groveLCD_term_printf+0xa0>
 8002300:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002304:	2b39      	cmp	r3, #57	; 0x39
 8002306:	d9e4      	bls.n	80022d2 <groveLCD_term_printf+0x6a>
				}
				tmp[i]='\0';
 8002308:	463a      	mov	r2, r7
 800230a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800230c:	4413      	add	r3, r2
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
				size=str2num(tmp,10);
 8002312:	463b      	mov	r3, r7
 8002314:	210a      	movs	r1, #10
 8002316:	4618      	mov	r0, r3
 8002318:	f002 f930 	bl	800457c <str2num>
 800231c:	67f8      	str	r0, [r7, #124]	; 0x7c
			}
			switch (ch) {
 800231e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002322:	2b25      	cmp	r3, #37	; 0x25
 8002324:	d03c      	beq.n	80023a0 <groveLCD_term_printf+0x138>
 8002326:	2b25      	cmp	r3, #37	; 0x25
 8002328:	f2c0 8164 	blt.w	80025f4 <groveLCD_term_printf+0x38c>
 800232c:	2b78      	cmp	r3, #120	; 0x78
 800232e:	f300 8161 	bgt.w	80025f4 <groveLCD_term_printf+0x38c>
 8002332:	2b63      	cmp	r3, #99	; 0x63
 8002334:	f2c0 815e 	blt.w	80025f4 <groveLCD_term_printf+0x38c>
 8002338:	3b63      	subs	r3, #99	; 0x63
 800233a:	2b15      	cmp	r3, #21
 800233c:	f200 815a 	bhi.w	80025f4 <groveLCD_term_printf+0x38c>
 8002340:	a201      	add	r2, pc, #4	; (adr r2, 8002348 <groveLCD_term_printf+0xe0>)
 8002342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002346:	bf00      	nop
 8002348:	080023a9 	.word	0x080023a9
 800234c:	080023d3 	.word	0x080023d3
 8002350:	080025f5 	.word	0x080025f5
 8002354:	080024d3 	.word	0x080024d3
 8002358:	080025f5 	.word	0x080025f5
 800235c:	080025f5 	.word	0x080025f5
 8002360:	080025f5 	.word	0x080025f5
 8002364:	080025f5 	.word	0x080025f5
 8002368:	080025f5 	.word	0x080025f5
 800236c:	080025f5 	.word	0x080025f5
 8002370:	080025f5 	.word	0x080025f5
 8002374:	080025f5 	.word	0x080025f5
 8002378:	08002443 	.word	0x08002443
 800237c:	0800246f 	.word	0x0800246f
 8002380:	080025f5 	.word	0x080025f5
 8002384:	080025f5 	.word	0x080025f5
 8002388:	080023c1 	.word	0x080023c1
 800238c:	080025f5 	.word	0x080025f5
 8002390:	08002417 	.word	0x08002417
 8002394:	080025f5 	.word	0x080025f5
 8002398:	080025f5 	.word	0x080025f5
 800239c:	080024a7 	.word	0x080024a7
				case '%':
					groveLCD_write('%');
 80023a0:	2025      	movs	r0, #37	; 0x25
 80023a2:	f7ff fede 	bl	8002162 <groveLCD_write>
					break;
 80023a6:	e132      	b.n	800260e <groveLCD_term_printf+0x3a6>
				case 'c':
					ch = va_arg(ap, int);
 80023a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023aa:	1d1a      	adds	r2, r3, #4
 80023ac:	64ba      	str	r2, [r7, #72]	; 0x48
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					groveLCD_write(ch);
 80023b4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff fed2 	bl	8002162 <groveLCD_write>
					break;
 80023be:	e126      	b.n	800260e <groveLCD_term_printf+0x3a6>
				case 's':
					p = va_arg(ap, char *);
 80023c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023c2:	1d1a      	adds	r2, r3, #4
 80023c4:	64ba      	str	r2, [r7, #72]	; 0x48
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	66fb      	str	r3, [r7, #108]	; 0x6c
					groveLCD_putString(p);
 80023ca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80023cc:	f7ff fedd 	bl	800218a <groveLCD_putString>
					break;
 80023d0:	e11d      	b.n	800260e <groveLCD_term_printf+0x3a6>
				case 'd':
					ul = va_arg(ap, long);
 80023d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023d4:	1d1a      	adds	r2, r3, #4
 80023d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					if ((long)ul < 0) {
 80023de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	da07      	bge.n	80023f6 <groveLCD_term_printf+0x18e>
						groveLCD_write('-');
 80023e6:	202d      	movs	r0, #45	; 0x2d
 80023e8:	f7ff febb 	bl	8002162 <groveLCD_write>
						ul = -(long)ul;
 80023ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023f0:	425b      	negs	r3, r3
 80023f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
						//size--;
					}
					num2str(s, ul, 10, size, sp);
 80023f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023f8:	f107 000c 	add.w	r0, r7, #12
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002400:	220a      	movs	r2, #10
 8002402:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002406:	f002 f835 	bl	8004474 <num2str>
					groveLCD_putString(s);
 800240a:	f107 030c 	add.w	r3, r7, #12
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff febb 	bl	800218a <groveLCD_putString>
					break;
 8002414:	e0fb      	b.n	800260e <groveLCD_term_printf+0x3a6>
				case 'u':
					ul = va_arg(ap, unsigned int);
 8002416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002418:	1d1a      	adds	r2, r3, #4
 800241a:	64ba      	str	r2, [r7, #72]	; 0x48
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 10, size, sp);
 8002422:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002424:	f107 000c 	add.w	r0, r7, #12
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800242c:	220a      	movs	r2, #10
 800242e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002432:	f002 f81f 	bl	8004474 <num2str>
					groveLCD_putString(s);
 8002436:	f107 030c 	add.w	r3, r7, #12
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fea5 	bl	800218a <groveLCD_putString>
					break;
 8002440:	e0e5      	b.n	800260e <groveLCD_term_printf+0x3a6>
				case 'o':
					ul = va_arg(ap, unsigned int);
 8002442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002444:	1d1a      	adds	r2, r3, #4
 8002446:	64ba      	str	r2, [r7, #72]	; 0x48
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 8, size, sp);
 800244e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002450:	f107 000c 	add.w	r0, r7, #12
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002458:	2208      	movs	r2, #8
 800245a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800245e:	f002 f809 	bl	8004474 <num2str>
					groveLCD_putString(s);
 8002462:	f107 030c 	add.w	r3, r7, #12
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fe8f 	bl	800218a <groveLCD_putString>
					break;
 800246c:	e0cf      	b.n	800260e <groveLCD_term_printf+0x3a6>
				case 'p':
					groveLCD_write('0');
 800246e:	2030      	movs	r0, #48	; 0x30
 8002470:	f7ff fe77 	bl	8002162 <groveLCD_write>
					groveLCD_write('x');
 8002474:	2078      	movs	r0, #120	; 0x78
 8002476:	f7ff fe74 	bl	8002162 <groveLCD_write>
					ul = va_arg(ap, unsigned int);
 800247a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800247c:	1d1a      	adds	r2, r3, #4
 800247e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 16, size, sp);
 8002486:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002488:	f107 000c 	add.w	r0, r7, #12
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002490:	2210      	movs	r2, #16
 8002492:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002496:	f001 ffed 	bl	8004474 <num2str>
					groveLCD_putString(s);
 800249a:	f107 030c 	add.w	r3, r7, #12
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fe73 	bl	800218a <groveLCD_putString>
					break;
 80024a4:	e0b3      	b.n	800260e <groveLCD_term_printf+0x3a6>
				case 'x':
					ul = va_arg(ap, unsigned int);
 80024a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024a8:	1d1a      	adds	r2, r3, #4
 80024aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 16, size, sp);
 80024b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024b4:	f107 000c 	add.w	r0, r7, #12
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024bc:	2210      	movs	r2, #16
 80024be:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80024c2:	f001 ffd7 	bl	8004474 <num2str>
					groveLCD_putString(s);
 80024c6:	f107 030c 	add.w	r3, r7, #12
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff fe5d 	bl	800218a <groveLCD_putString>
					break;
 80024d0:	e09d      	b.n	800260e <groveLCD_term_printf+0x3a6>
				case 'f':
					if(first==0){ ull = va_arg(ap, long long unsigned int); first = 1;}
 80024d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10c      	bne.n	80024f2 <groveLCD_term_printf+0x28a>
 80024d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024da:	3307      	adds	r3, #7
 80024dc:	f023 0307 	bic.w	r3, r3, #7
 80024e0:	f103 0208 	add.w	r2, r3, #8
 80024e4:	64ba      	str	r2, [r7, #72]	; 0x48
 80024e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ea:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 80024ee:	2301      	movs	r3, #1
 80024f0:	677b      	str	r3, [r7, #116]	; 0x74
					ull = va_arg(ap, long long unsigned int);
 80024f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024f4:	3307      	adds	r3, #7
 80024f6:	f023 0307 	bic.w	r3, r3, #7
 80024fa:	f103 0208 	add.w	r2, r3, #8
 80024fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8002500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002504:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
					int sign = ( ull & 0x80000000 ) >> 31;
 8002508:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	0fc2      	lsrs	r2, r0, #31
 8002516:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800251a:	0fcb      	lsrs	r3, r1, #31
 800251c:	4613      	mov	r3, r2
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	65fb      	str	r3, [r7, #92]	; 0x5c
					int m = (ull & 0x000FFFFF) ; // should be 0x007FFFFF
 8002524:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002526:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800252a:	65bb      	str	r3, [r7, #88]	; 0x58
					float mf = (float)m ;
 800252c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800252e:	ee07 3a90 	vmov	s15, r3
 8002532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002536:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					mf = mf / pow(2.0,20.0);
 800253a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800253e:	eddf 6a40 	vldr	s13, [pc, #256]	; 8002640 <groveLCD_term_printf+0x3d8>
 8002542:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002546:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					mf = mf + 1.0;
 800254a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800254e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002552:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002556:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					int e = ( ull & 0x78000000 ) >> 23 ; // should be int e = ( ul & 0x7F800000 ) >> 23;
 800255a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	0dc2      	lsrs	r2, r0, #23
 8002568:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800256c:	0dcb      	lsrs	r3, r1, #23
 800256e:	4613      	mov	r3, r2
 8002570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002574:	653b      	str	r3, [r7, #80]	; 0x50
					e = e | (( ull & 0x000F00000 ) >> 20);
 8002576:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	0d02      	lsrs	r2, r0, #20
 8002584:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8002588:	0d0b      	lsrs	r3, r1, #20
 800258a:	4613      	mov	r3, r2
 800258c:	f003 020f 	and.w	r2, r3, #15
 8002590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002592:	4313      	orrs	r3, r2
 8002594:	653b      	str	r3, [r7, #80]	; 0x50
					e = e - 127;
 8002596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002598:	3b7f      	subs	r3, #127	; 0x7f
 800259a:	653b      	str	r3, [r7, #80]	; 0x50
					float f = mf*myPow(2.0,e);
 800259c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800259e:	f7fd ffeb 	bl	8000578 <__aeabi_f2d>
 80025a2:	4604      	mov	r4, r0
 80025a4:	460d      	mov	r5, r1
 80025a6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80025a8:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8002638 <groveLCD_term_printf+0x3d0>
 80025ac:	f002 f8f4 	bl	8004798 <myPow>
 80025b0:	ec53 2b10 	vmov	r2, r3, d0
 80025b4:	4620      	mov	r0, r4
 80025b6:	4629      	mov	r1, r5
 80025b8:	f7fe f836 	bl	8000628 <__aeabi_dmul>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4610      	mov	r0, r2
 80025c2:	4619      	mov	r1, r3
 80025c4:	f7fe faca 	bl	8000b5c <__aeabi_d2f>
 80025c8:	4603      	mov	r3, r0
 80025ca:	64fb      	str	r3, [r7, #76]	; 0x4c
					if(sign==1){ groveLCD_write('-'); }
 80025cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d102      	bne.n	80025d8 <groveLCD_term_printf+0x370>
 80025d2:	202d      	movs	r0, #45	; 0x2d
 80025d4:	f7ff fdc5 	bl	8002162 <groveLCD_write>
					float2str((char*)s, f, 5);
 80025d8:	f107 030c 	add.w	r3, r7, #12
 80025dc:	2105      	movs	r1, #5
 80025de:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 80025e2:	4618      	mov	r0, r3
 80025e4:	f002 f888 	bl	80046f8 <float2str>
					groveLCD_putString((char*)s);
 80025e8:	f107 030c 	add.w	r3, r7, #12
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fdcc 	bl	800218a <groveLCD_putString>
					break;
 80025f2:	e00c      	b.n	800260e <groveLCD_term_printf+0x3a6>

				default:
					groveLCD_write(*fmt);
 80025f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fdb1 	bl	8002162 <groveLCD_write>
 8002600:	e005      	b.n	800260e <groveLCD_term_printf+0x3a6>
			}
		} else groveLCD_write(*fmt);
 8002602:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fdaa 	bl	8002162 <groveLCD_write>
		fmt++;
 800260e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002612:	3301      	adds	r3, #1
 8002614:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	while (*fmt != '\0') {
 8002618:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	f47f ae2c 	bne.w	800227c <groveLCD_term_printf+0x14>
	}
	va_end(ap);
}
 8002624:	bf00      	nop
 8002626:	bf00      	nop
 8002628:	3788      	adds	r7, #136	; 0x88
 800262a:	46bd      	mov	sp, r7
 800262c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002630:	b004      	add	sp, #16
 8002632:	4770      	bx	lr
 8002634:	f3af 8000 	nop.w
 8002638:	00000000 	.word	0x00000000
 800263c:	40000000 	.word	0x40000000
 8002640:	49800000 	.word	0x49800000

08002644 <microros_task>:
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void microros_task(void *argument)
{
 8002644:	b5b0      	push	{r4, r5, r7, lr}
 8002646:	b0c8      	sub	sp, #288	; 0x120
 8002648:	af02      	add	r7, sp, #8
 800264a:	61f8      	str	r0, [r7, #28]
  // micro-ROS configuration
  rmw_uros_set_custom_transport(
 800264c:	4b63      	ldr	r3, [pc, #396]	; (80027dc <microros_task+0x198>)
 800264e:	9301      	str	r3, [sp, #4]
 8002650:	4b63      	ldr	r3, [pc, #396]	; (80027e0 <microros_task+0x19c>)
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	4b63      	ldr	r3, [pc, #396]	; (80027e4 <microros_task+0x1a0>)
 8002656:	4a64      	ldr	r2, [pc, #400]	; (80027e8 <microros_task+0x1a4>)
 8002658:	4964      	ldr	r1, [pc, #400]	; (80027ec <microros_task+0x1a8>)
 800265a:	2001      	movs	r0, #1
 800265c:	f00c fbfc 	bl	800ee58 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002660:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002664:	4618      	mov	r0, r3
 8002666:	f00c f9c3 	bl	800e9f0 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 800266a:	4b61      	ldr	r3, [pc, #388]	; (80027f0 <microros_task+0x1ac>)
 800266c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  freeRTOS_allocator.deallocate = microros_deallocate;
 8002670:	4b60      	ldr	r3, [pc, #384]	; (80027f4 <microros_task+0x1b0>)
 8002672:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  freeRTOS_allocator.reallocate = microros_reallocate;
 8002676:	4b60      	ldr	r3, [pc, #384]	; (80027f8 <microros_task+0x1b4>)
 8002678:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800267c:	4b5f      	ldr	r3, [pc, #380]	; (80027fc <microros_task+0x1b8>)
 800267e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8002682:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002686:	4618      	mov	r0, r3
 8002688:	f00c f9c0 	bl	800ea0c <rcutils_set_default_allocator>
 800268c:	4603      	mov	r3, r0
 800268e:	f083 0301 	eor.w	r3, r3, #1
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <microros_task+0x5c>
      printf("Error on default allocators (line %d)\r\n", __LINE__);
 8002698:	2173      	movs	r1, #115	; 0x73
 800269a:	4859      	ldr	r0, [pc, #356]	; (8002800 <microros_task+0x1bc>)
 800269c:	f015 fa46 	bl	8017b2c <iprintf>
  rclc_support_t support;
  rcl_allocator_t allocator;
  rcl_node_t node;
  rcl_ret_t ret;

  allocator = rcl_get_default_allocator();
 80026a0:	463b      	mov	r3, r7
 80026a2:	4618      	mov	r0, r3
 80026a4:	f00c f9d2 	bl	800ea4c <rcutils_get_default_allocator>
 80026a8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80026b0:	f107 0498 	add.w	r4, r7, #152	; 0x98
 80026b4:	461d      	mov	r5, r3
 80026b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026ba:	682b      	ldr	r3, [r5, #0]
 80026bc:	6023      	str	r3, [r4, #0]

  //create init_options
  rclc_support_init(&support, 0, NULL, &allocator);
 80026be:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80026c2:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 80026c6:	2200      	movs	r2, #0
 80026c8:	2100      	movs	r1, #0
 80026ca:	f00c f8cb 	bl	800e864 <rclc_support_init>
  // create node
  rclc_node_init_default(&node, "STM32_node", "", &support);
 80026ce:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80026d2:	f107 0090 	add.w	r0, r7, #144	; 0x90
 80026d6:	4a4b      	ldr	r2, [pc, #300]	; (8002804 <microros_task+0x1c0>)
 80026d8:	494b      	ldr	r1, [pc, #300]	; (8002808 <microros_task+0x1c4>)
 80026da:	f00c f911 	bl	800e900 <rclc_node_init_default>

  // create publisher
  ret = rclc_publisher_init_default(
 80026de:	f00d f937 	bl	800f950 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 80026e2:	4602      	mov	r2, r0
 80026e4:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80026e8:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 80026ec:	4b47      	ldr	r3, [pc, #284]	; (800280c <microros_task+0x1c8>)
 80026ee:	f00c f943 	bl	800e978 <rclc_publisher_init_default>
 80026f2:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
    &publisher,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
    "cubemx_publisher");
  printf("Publisher return result : %d\r\n", ret);
 80026f6:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80026fa:	4845      	ldr	r0, [pc, #276]	; (8002810 <microros_task+0x1cc>)
 80026fc:	f015 fa16 	bl	8017b2c <iprintf>

  //create subscriber
  rcl_subscription_options_t sub_opts = rcl_subscription_get_default_options();
 8002700:	f107 0320 	add.w	r3, r7, #32
 8002704:	4618      	mov	r0, r3
 8002706:	f00c f881 	bl	800e80c <rcl_subscription_get_default_options>
  sub_opts.qos.reliability = RMW_QOS_POLICY_RELIABILITY_BEST_EFFORT;
 800270a:	2302      	movs	r3, #2
 800270c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

  ret = rcl_subscription_init(
 8002710:	f00d f91e 	bl	800f950 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8002714:	4602      	mov	r2, r0
 8002716:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800271a:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 800271e:	f107 0320 	add.w	r3, r7, #32
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	4b39      	ldr	r3, [pc, #228]	; (800280c <microros_task+0x1c8>)
 8002726:	f00b ff7b 	bl	800e620 <rcl_subscription_init>
 800272a:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
		  &subscriber,
		  &node,
		  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
		  "cubemx_publisher",
		  &sub_opts);
  printf("Subscription return result : %ld\r\n", ret);
 800272e:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8002732:	4838      	ldr	r0, [pc, #224]	; (8002814 <microros_task+0x1d0>)
 8002734:	f015 f9fa 	bl	8017b2c <iprintf>

  msg.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 8002738:	2064      	movs	r0, #100	; 0x64
 800273a:	f014 ff59 	bl	80175f0 <malloc>
 800273e:	4603      	mov	r3, r0
 8002740:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  msg.data.size = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  msg.data.capacity = ARRAY_LEN;
 800274a:	2364      	movs	r3, #100	; 0x64
 800274c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  printf("retour take result = %ld\r\nMessage : %s\r\n", ret, msg.data.data);
	  if (ret != RCL_RET_OK)
		  sprintf(msg.data.data, "message");
#elif SYNCHRO_EX == EXFINAL
	  //xQueueReceive( qhMR,  &( pxRxedMessage ) , 1);
	  int mode = MODE_OBS; //pxRxedMessage.data;
 8002750:	2300      	movs	r3, #0
 8002752:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	  char direction = 'f'; //pxRxedMessage.command;
 8002756:	2366      	movs	r3, #102	; 0x66
 8002758:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	  if (mode == MODE_OBS)
 800275c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002760:	2b00      	cmp	r3, #0
 8002762:	d108      	bne.n	8002776 <microros_task+0x132>
		  sprintf(msg.data.data, "M:Obstacle D:%c", direction);
 8002764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002768:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 800276c:	492a      	ldr	r1, [pc, #168]	; (8002818 <microros_task+0x1d4>)
 800276e:	4618      	mov	r0, r3
 8002770:	f015 fad0 	bl	8017d14 <siprintf>
 8002774:	e014      	b.n	80027a0 <microros_task+0x15c>
	  else if (mode == MODE_ZIG)
 8002776:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800277a:	2b01      	cmp	r3, #1
 800277c:	d106      	bne.n	800278c <microros_task+0x148>
		  sprintf(msg.data.data, "M:Zigbee");
 800277e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002782:	4926      	ldr	r1, [pc, #152]	; (800281c <microros_task+0x1d8>)
 8002784:	4618      	mov	r0, r3
 8002786:	f015 fac5 	bl	8017d14 <siprintf>
 800278a:	e009      	b.n	80027a0 <microros_task+0x15c>
	  else if (mode == MODE_CAM)
 800278c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002790:	2b02      	cmp	r3, #2
 8002792:	d105      	bne.n	80027a0 <microros_task+0x15c>
		  sprintf(msg.data.data, "M:Camera");
 8002794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002798:	4921      	ldr	r1, [pc, #132]	; (8002820 <microros_task+0x1dc>)
 800279a:	4618      	mov	r0, r3
 800279c:	f015 faba 	bl	8017d14 <siprintf>
#endif

	msg.data.size = strlen(msg.data.data);
 80027a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fd fd25 	bl	80001f4 <strlen>
 80027aa:	4603      	mov	r3, r0
 80027ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    ret = rcl_publish(&publisher, &msg, NULL);
 80027b0:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 80027b4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80027b8:	2200      	movs	r2, #0
 80027ba:	4618      	mov	r0, r3
 80027bc:	f00b ff0c 	bl	800e5d8 <rcl_publish>
 80027c0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
    if (ret != RCL_RET_OK)
 80027c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <microros_task+0x190>
    {
      printf("Error publishing (line %d)\r\n", __LINE__);
 80027cc:	21bb      	movs	r1, #187	; 0xbb
 80027ce:	4815      	ldr	r0, [pc, #84]	; (8002824 <microros_task+0x1e0>)
 80027d0:	f015 f9ac 	bl	8017b2c <iprintf>
    }

    osDelay(10);
 80027d4:	200a      	movs	r0, #10
 80027d6:	f008 fec3 	bl	800b560 <osDelay>
  {
 80027da:	e7b9      	b.n	8002750 <microros_task+0x10c>
 80027dc:	08001b31 	.word	0x08001b31
 80027e0:	08001ac9 	.word	0x08001ac9
 80027e4:	08001aa9 	.word	0x08001aa9
 80027e8:	08001a7d 	.word	0x08001a7d
 80027ec:	200049d0 	.word	0x200049d0
 80027f0:	080031a9 	.word	0x080031a9
 80027f4:	080031ed 	.word	0x080031ed
 80027f8:	08003225 	.word	0x08003225
 80027fc:	08003291 	.word	0x08003291
 8002800:	08018ea4 	.word	0x08018ea4
 8002804:	08018ecc 	.word	0x08018ecc
 8002808:	08018ed0 	.word	0x08018ed0
 800280c:	08018edc 	.word	0x08018edc
 8002810:	08018ef0 	.word	0x08018ef0
 8002814:	08018f10 	.word	0x08018f10
 8002818:	08018f34 	.word	0x08018f34
 800281c:	08018f44 	.word	0x08018f44
 8002820:	08018f50 	.word	0x08018f50
 8002824:	08018f5c 	.word	0x08018f5c

08002828 <task_Motor_Left>:
  }
}
//========================================================================
static void task_Motor_Left(void *pvParameters)
{
 8002828:	b5b0      	push	{r4, r5, r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
	int16_t consigne;

	float ui=0.0;
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
	float up;
	int err;
	int speed;
	int i=0;
 8002836:	2300      	movs	r3, #0
 8002838:	61bb      	str	r3, [r7, #24]

	for (;;)
	{
		xQueueReceive(q_mot_L, &consigne, portMAX_DELAY);
 800283a:	4b3b      	ldr	r3, [pc, #236]	; (8002928 <task_Motor_Left+0x100>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f107 010a 	add.w	r1, r7, #10
 8002842:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002846:	4618      	mov	r0, r3
 8002848:	f009 fa66 	bl	800bd18 <xQueueReceive>
		if (cmd == -1)
			cmd = lastCmd;
		else
			lastCmd = cmd;*/

		speed = quadEncoder_GetSpeedL();
 800284c:	f000 ff46 	bl	80036dc <quadEncoder_GetSpeedL>
 8002850:	4603      	mov	r3, r0
 8002852:	617b      	str	r3, [r7, #20]
		err=consigne-speed;
 8002854:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002858:	461a      	mov	r2, r3
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	613b      	str	r3, [r7, #16]
		up=LKp*(float)err;
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	ee07 3a90 	vmov	s15, r3
 8002866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800286a:	ee17 0a90 	vmov	r0, s15
 800286e:	f7fd fe83 	bl	8000578 <__aeabi_f2d>
 8002872:	a329      	add	r3, pc, #164	; (adr r3, 8002918 <task_Motor_Left+0xf0>)
 8002874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002878:	f7fd fed6 	bl	8000628 <__aeabi_dmul>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4610      	mov	r0, r2
 8002882:	4619      	mov	r1, r3
 8002884:	f7fe f96a 	bl	8000b5c <__aeabi_d2f>
 8002888:	4603      	mov	r3, r0
 800288a:	60fb      	str	r3, [r7, #12]
		ui=ui+LKp*LKi*(float)err;
 800288c:	69f8      	ldr	r0, [r7, #28]
 800288e:	f7fd fe73 	bl	8000578 <__aeabi_f2d>
 8002892:	4604      	mov	r4, r0
 8002894:	460d      	mov	r5, r1
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	ee07 3a90 	vmov	s15, r3
 800289c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028a0:	ee17 0a90 	vmov	r0, s15
 80028a4:	f7fd fe68 	bl	8000578 <__aeabi_f2d>
 80028a8:	a31d      	add	r3, pc, #116	; (adr r3, 8002920 <task_Motor_Left+0xf8>)
 80028aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ae:	f7fd febb 	bl	8000628 <__aeabi_dmul>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4620      	mov	r0, r4
 80028b8:	4629      	mov	r1, r5
 80028ba:	f7fd fcff 	bl	80002bc <__adddf3>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	4610      	mov	r0, r2
 80028c4:	4619      	mov	r1, r3
 80028c6:	f7fe f949 	bl	8000b5c <__aeabi_d2f>
 80028ca:	4603      	mov	r3, r0
 80028cc:	61fb      	str	r3, [r7, #28]

		motorLeft_SetDuty(100+(int)(up+ui));
 80028ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80028d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80028d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028de:	ee17 3a90 	vmov	r3, s15
 80028e2:	3364      	adds	r3, #100	; 0x64
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fe1d 	bl	8003524 <motorLeft_SetDuty>

		if(i<NB)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	2bc7      	cmp	r3, #199	; 0xc7
 80028ee:	dc08      	bgt.n	8002902 <task_Motor_Left+0xda>
		{
			tab_speedL[i]=speed;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	b219      	sxth	r1, r3
 80028f4:	4a0d      	ldr	r2, [pc, #52]	; (800292c <task_Motor_Left+0x104>)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			i++;
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	3301      	adds	r3, #1
 8002900:	61bb      	str	r3, [r7, #24]
		}

		xSemaphoreGive( xSem_Supervision );
 8002902:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <task_Motor_Left+0x108>)
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	2300      	movs	r3, #0
 8002908:	2200      	movs	r2, #0
 800290a:	2100      	movs	r1, #0
 800290c:	f009 f86a 	bl	800b9e4 <xQueueGenericSend>
		xQueueReceive(q_mot_L, &consigne, portMAX_DELAY);
 8002910:	e793      	b.n	800283a <task_Motor_Left+0x12>
 8002912:	bf00      	nop
 8002914:	f3af 8000 	nop.w
 8002918:	d2f1a9fc 	.word	0xd2f1a9fc
 800291c:	3f50624d 	.word	0x3f50624d
 8002920:	47ae147b 	.word	0x47ae147b
 8002924:	3f547ae1 	.word	0x3f547ae1
 8002928:	20004be4 	.word	0x20004be4
 800292c:	20004bf8 	.word	0x20004bf8
 8002930:	20004be0 	.word	0x20004be0
 8002934:	00000000 	.word	0x00000000

08002938 <task_Motor_Right>:
	}
}

//=========================================================================
static void task_Motor_Right(void *pvParameters)
{
 8002938:	b5b0      	push	{r4, r5, r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
	int16_t consigne;

	float ui=0.0;
 8002940:	f04f 0300 	mov.w	r3, #0
 8002944:	61fb      	str	r3, [r7, #28]
	float up;
	int err;
	int speed;
	int i=0;
 8002946:	2300      	movs	r3, #0
 8002948:	61bb      	str	r3, [r7, #24]

	for (;;)
	{
		xQueueReceive(q_mot_R, &consigne, portMAX_DELAY);
 800294a:	4b3b      	ldr	r3, [pc, #236]	; (8002a38 <task_Motor_Right+0x100>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f107 010a 	add.w	r1, r7, #10
 8002952:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002956:	4618      	mov	r0, r3
 8002958:	f009 f9de 	bl	800bd18 <xQueueReceive>
		if (cmd == -1)
			cmd = lastCmd;
		else
			lastCmd = cmd;*/

		speed = quadEncoder_GetSpeedR();
 800295c:	f000 ff10 	bl	8003780 <quadEncoder_GetSpeedR>
 8002960:	4603      	mov	r3, r0
 8002962:	617b      	str	r3, [r7, #20]
		err=consigne-speed;
 8002964:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002968:	461a      	mov	r2, r3
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	613b      	str	r3, [r7, #16]
		up=RKp*(float)err;
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	ee07 3a90 	vmov	s15, r3
 8002976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800297a:	ee17 0a90 	vmov	r0, s15
 800297e:	f7fd fdfb 	bl	8000578 <__aeabi_f2d>
 8002982:	a329      	add	r3, pc, #164	; (adr r3, 8002a28 <task_Motor_Right+0xf0>)
 8002984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002988:	f7fd fe4e 	bl	8000628 <__aeabi_dmul>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4610      	mov	r0, r2
 8002992:	4619      	mov	r1, r3
 8002994:	f7fe f8e2 	bl	8000b5c <__aeabi_d2f>
 8002998:	4603      	mov	r3, r0
 800299a:	60fb      	str	r3, [r7, #12]
		ui=ui+RKp*RKi*(float)err;
 800299c:	69f8      	ldr	r0, [r7, #28]
 800299e:	f7fd fdeb 	bl	8000578 <__aeabi_f2d>
 80029a2:	4604      	mov	r4, r0
 80029a4:	460d      	mov	r5, r1
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	ee07 3a90 	vmov	s15, r3
 80029ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029b0:	ee17 0a90 	vmov	r0, s15
 80029b4:	f7fd fde0 	bl	8000578 <__aeabi_f2d>
 80029b8:	a31d      	add	r3, pc, #116	; (adr r3, 8002a30 <task_Motor_Right+0xf8>)
 80029ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029be:	f7fd fe33 	bl	8000628 <__aeabi_dmul>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4620      	mov	r0, r4
 80029c8:	4629      	mov	r1, r5
 80029ca:	f7fd fc77 	bl	80002bc <__adddf3>
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	4610      	mov	r0, r2
 80029d4:	4619      	mov	r1, r3
 80029d6:	f7fe f8c1 	bl	8000b5c <__aeabi_d2f>
 80029da:	4603      	mov	r3, r0
 80029dc:	61fb      	str	r3, [r7, #28]

		motorRight_SetDuty(100+(int)(up+ui));
 80029de:	ed97 7a03 	vldr	s14, [r7, #12]
 80029e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80029e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029ee:	ee17 3a90 	vmov	r3, s15
 80029f2:	3364      	adds	r3, #100	; 0x64
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 fda5 	bl	8003544 <motorRight_SetDuty>

		if(i<NB)
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	2bc7      	cmp	r3, #199	; 0xc7
 80029fe:	dc08      	bgt.n	8002a12 <task_Motor_Right+0xda>
		{
			tab_speedR[i]=speed;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	b219      	sxth	r1, r3
 8002a04:	4a0d      	ldr	r2, [pc, #52]	; (8002a3c <task_Motor_Right+0x104>)
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			i++;
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	61bb      	str	r3, [r7, #24]
		}

		xSemaphoreGive( xSem_Supervision );
 8002a12:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <task_Motor_Right+0x108>)
 8002a14:	6818      	ldr	r0, [r3, #0]
 8002a16:	2300      	movs	r3, #0
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	f008 ffe2 	bl	800b9e4 <xQueueGenericSend>
		xQueueReceive(q_mot_R, &consigne, portMAX_DELAY);
 8002a20:	e793      	b.n	800294a <task_Motor_Right+0x12>
 8002a22:	bf00      	nop
 8002a24:	f3af 8000 	nop.w
 8002a28:	d2f1a9fc 	.word	0xd2f1a9fc
 8002a2c:	3f50624d 	.word	0x3f50624d
 8002a30:	47ae147b 	.word	0x47ae147b
 8002a34:	3f547ae1 	.word	0x3f547ae1
 8002a38:	20004be8 	.word	0x20004be8
 8002a3c:	20004d88 	.word	0x20004d88
 8002a40:	20004be0 	.word	0x20004be0

08002a44 <task_VL53>:
}

//=========================================================================
#if VL53
static void task_VL53(void *pvParameters)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
	static uint16_t dist;
	static const int SEUIL = 20;
	int obs = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		dist = readRangeSingleMillimeters()/10;
 8002a50:	f7fe fcf8 	bl	8001444 <readRangeSingleMillimeters>
 8002a54:	4603      	mov	r3, r0
 8002a56:	461a      	mov	r2, r3
 8002a58:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <task_VL53+0x60>)
 8002a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a5e:	08db      	lsrs	r3, r3, #3
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <task_VL53+0x64>)
 8002a64:	801a      	strh	r2, [r3, #0]
		printf("distance %d\r\n", dist);
 8002a66:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <task_VL53+0x64>)
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	480f      	ldr	r0, [pc, #60]	; (8002aac <task_VL53+0x68>)
 8002a6e:	f015 f85d 	bl	8017b2c <iprintf>
		if (dist < SEUIL)
 8002a72:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <task_VL53+0x64>)
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	461a      	mov	r2, r3
 8002a78:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <task_VL53+0x6c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	da02      	bge.n	8002a86 <task_VL53+0x42>
			obs = 1;
 8002a80:	2301      	movs	r3, #1
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	e001      	b.n	8002a8a <task_VL53+0x46>
		else
			obs = 0;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]

		xQueueSend(qhVl53, (void *)&obs, portMAX_DELAY);
 8002a8a:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <task_VL53+0x70>)
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	f107 010c 	add.w	r1, r7, #12
 8002a92:	2300      	movs	r3, #0
 8002a94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a98:	f008 ffa4 	bl	800b9e4 <xQueueGenericSend>

		HAL_Delay(100);
 8002a9c:	2064      	movs	r0, #100	; 0x64
 8002a9e:	f001 ff31 	bl	8004904 <HAL_Delay>
		dist = readRangeSingleMillimeters()/10;
 8002aa2:	e7d5      	b.n	8002a50 <task_VL53+0xc>
 8002aa4:	cccccccd 	.word	0xcccccccd
 8002aa8:	20004f18 	.word	0x20004f18
 8002aac:	08018f7c 	.word	0x08018f7c
 8002ab0:	080190b0 	.word	0x080190b0
 8002ab4:	20004bf4 	.word	0x20004bf4

08002ab8 <task_Supervision>:
}
#endif

//=========================================================================
static void task_Supervision(void *pvParameters)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08c      	sub	sp, #48	; 0x30
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
	}
#elif SYNCHRO_EX == EXFINAL
	int16_t speedLeft;
	int16_t speedRight;

	int16_t AspeedLeft = 0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t AspeedRight = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	85bb      	strh	r3, [r7, #44]	; 0x2c

	int table[2];
	int vl53 = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	61fb      	str	r3, [r7, #28]
		//mode = ((rec_buf6[0] & 0xC0) >> 6);
		/*if(mode != MODE_CAM){
			one=0;
		}*/

		if (mode == MODE_ZIG)
 8002acc:	4ba4      	ldr	r3, [pc, #656]	; (8002d60 <task_Supervision+0x2a8>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	f040 8107 	bne.w	8002ce4 <task_Supervision+0x22c>
		{
			#ifdef VL53
			xQueueReceive(qhVl53, &vl53, 1); //For VL53
 8002ad6:	4ba3      	ldr	r3, [pc, #652]	; (8002d64 <task_Supervision+0x2ac>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f107 011c 	add.w	r1, r7, #28
 8002ade:	2201      	movs	r2, #1
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f009 f919 	bl	800bd18 <xQueueReceive>
			#endif

			dir = 'N';
 8002ae6:	4ba0      	ldr	r3, [pc, #640]	; (8002d68 <task_Supervision+0x2b0>)
 8002ae8:	224e      	movs	r2, #78	; 0x4e
 8002aea:	701a      	strb	r2, [r3, #0]
			//direction = rec_buf6[0] & 0x0F;
			//speed = (rec_buf6[0] & 0x30) >> 4;
			switch(direction)
 8002aec:	4b9f      	ldr	r3, [pc, #636]	; (8002d6c <task_Supervision+0x2b4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	f200 80f2 	bhi.w	8002cda <task_Supervision+0x222>
 8002af6:	a201      	add	r2, pc, #4	; (adr r2, 8002afc <task_Supervision+0x44>)
 8002af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afc:	08002b2b 	.word	0x08002b2b
 8002b00:	08002bcd 	.word	0x08002bcd
 8002b04:	08002b5d 	.word	0x08002b5d
 8002b08:	08002b97 	.word	0x08002b97
 8002b0c:	08002b21 	.word	0x08002b21
 8002b10:	08002c03 	.word	0x08002c03
 8002b14:	08002c35 	.word	0x08002c35
 8002b18:	08002c67 	.word	0x08002c67
 8002b1c:	08002ca1 	.word	0x08002ca1
			{
				case STOP:
					speedLeft = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	857b      	strh	r3, [r7, #42]	; 0x2a
					speedRight = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	853b      	strh	r3, [r7, #40]	; 0x28
					break;
 8002b28:	e204      	b.n	8002f34 <task_Supervision+0x47c>
				case AVANT:
					speedLeft = VITESSE_KART*speed;
 8002b2a:	4b91      	ldr	r3, [pc, #580]	; (8002d70 <task_Supervision+0x2b8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	0152      	lsls	r2, r2, #5
 8002b34:	1ad2      	subs	r2, r2, r3
 8002b36:	0092      	lsls	r2, r2, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	b21b      	sxth	r3, r3
 8002b40:	857b      	strh	r3, [r7, #42]	; 0x2a
					speedRight = VITESSE_KART*speed;
 8002b42:	4b8b      	ldr	r3, [pc, #556]	; (8002d70 <task_Supervision+0x2b8>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	461a      	mov	r2, r3
 8002b4a:	0152      	lsls	r2, r2, #5
 8002b4c:	1ad2      	subs	r2, r2, r3
 8002b4e:	0092      	lsls	r2, r2, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	b21b      	sxth	r3, r3
 8002b58:	853b      	strh	r3, [r7, #40]	; 0x28
					break;
 8002b5a:	e1eb      	b.n	8002f34 <task_Supervision+0x47c>
				case RECULE:
					speedLeft = -VITESSE_KART*speed;
 8002b5c:	4b84      	ldr	r3, [pc, #528]	; (8002d70 <task_Supervision+0x2b8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	461a      	mov	r2, r3
 8002b64:	01d2      	lsls	r2, r2, #7
 8002b66:	1ad2      	subs	r2, r2, r3
 8002b68:	0192      	lsls	r2, r2, #6
 8002b6a:	441a      	add	r2, r3
 8002b6c:	0052      	lsls	r2, r2, #1
 8002b6e:	4413      	add	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	b21b      	sxth	r3, r3
 8002b76:	857b      	strh	r3, [r7, #42]	; 0x2a
					speedRight = -VITESSE_KART*speed;
 8002b78:	4b7d      	ldr	r3, [pc, #500]	; (8002d70 <task_Supervision+0x2b8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	461a      	mov	r2, r3
 8002b80:	01d2      	lsls	r2, r2, #7
 8002b82:	1ad2      	subs	r2, r2, r3
 8002b84:	0192      	lsls	r2, r2, #6
 8002b86:	441a      	add	r2, r3
 8002b88:	0052      	lsls	r2, r2, #1
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	b21b      	sxth	r3, r3
 8002b92:	853b      	strh	r3, [r7, #40]	; 0x28
					break;
 8002b94:	e1ce      	b.n	8002f34 <task_Supervision+0x47c>
				case DROITE:
					speedLeft = VITESSE_KART*speed;
 8002b96:	4b76      	ldr	r3, [pc, #472]	; (8002d70 <task_Supervision+0x2b8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	0152      	lsls	r2, r2, #5
 8002ba0:	1ad2      	subs	r2, r2, r3
 8002ba2:	0092      	lsls	r2, r2, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	b21b      	sxth	r3, r3
 8002bac:	857b      	strh	r3, [r7, #42]	; 0x2a
					speedRight = -VITESSE_KART*speed;
 8002bae:	4b70      	ldr	r3, [pc, #448]	; (8002d70 <task_Supervision+0x2b8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	01d2      	lsls	r2, r2, #7
 8002bb8:	1ad2      	subs	r2, r2, r3
 8002bba:	0192      	lsls	r2, r2, #6
 8002bbc:	441a      	add	r2, r3
 8002bbe:	0052      	lsls	r2, r2, #1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	b21b      	sxth	r3, r3
 8002bc8:	853b      	strh	r3, [r7, #40]	; 0x28
					break;
 8002bca:	e1b3      	b.n	8002f34 <task_Supervision+0x47c>
				case GAUCHE:
					speedLeft = -VITESSE_KART*speed;
 8002bcc:	4b68      	ldr	r3, [pc, #416]	; (8002d70 <task_Supervision+0x2b8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	01d2      	lsls	r2, r2, #7
 8002bd6:	1ad2      	subs	r2, r2, r3
 8002bd8:	0192      	lsls	r2, r2, #6
 8002bda:	441a      	add	r2, r3
 8002bdc:	0052      	lsls	r2, r2, #1
 8002bde:	4413      	add	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	b21b      	sxth	r3, r3
 8002be6:	857b      	strh	r3, [r7, #42]	; 0x2a
					speedRight = VITESSE_KART*speed;
 8002be8:	4b61      	ldr	r3, [pc, #388]	; (8002d70 <task_Supervision+0x2b8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	0152      	lsls	r2, r2, #5
 8002bf2:	1ad2      	subs	r2, r2, r3
 8002bf4:	0092      	lsls	r2, r2, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	b21b      	sxth	r3, r3
 8002bfe:	853b      	strh	r3, [r7, #40]	; 0x28
					break;
 8002c00:	e198      	b.n	8002f34 <task_Supervision+0x47c>
				case AVANT_GAUCHE:
					speedLeft = (VITESSE_KART/2)*speed;
 8002c02:	4b5b      	ldr	r3, [pc, #364]	; (8002d70 <task_Supervision+0x2b8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	461a      	mov	r2, r3
 8002c0a:	0152      	lsls	r2, r2, #5
 8002c0c:	1ad2      	subs	r2, r2, r3
 8002c0e:	0092      	lsls	r2, r2, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	b21b      	sxth	r3, r3
 8002c18:	857b      	strh	r3, [r7, #42]	; 0x2a
					speedRight = VITESSE_KART*speed;
 8002c1a:	4b55      	ldr	r3, [pc, #340]	; (8002d70 <task_Supervision+0x2b8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	461a      	mov	r2, r3
 8002c22:	0152      	lsls	r2, r2, #5
 8002c24:	1ad2      	subs	r2, r2, r3
 8002c26:	0092      	lsls	r2, r2, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	b21b      	sxth	r3, r3
 8002c30:	853b      	strh	r3, [r7, #40]	; 0x28
					break;
 8002c32:	e17f      	b.n	8002f34 <task_Supervision+0x47c>
				case AVANT_DROITE:
					speedLeft = VITESSE_KART*speed;
 8002c34:	4b4e      	ldr	r3, [pc, #312]	; (8002d70 <task_Supervision+0x2b8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	0152      	lsls	r2, r2, #5
 8002c3e:	1ad2      	subs	r2, r2, r3
 8002c40:	0092      	lsls	r2, r2, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	b21b      	sxth	r3, r3
 8002c4a:	857b      	strh	r3, [r7, #42]	; 0x2a
					speedRight = (VITESSE_KART/2)*speed;
 8002c4c:	4b48      	ldr	r3, [pc, #288]	; (8002d70 <task_Supervision+0x2b8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	461a      	mov	r2, r3
 8002c54:	0152      	lsls	r2, r2, #5
 8002c56:	1ad2      	subs	r2, r2, r3
 8002c58:	0092      	lsls	r2, r2, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	b21b      	sxth	r3, r3
 8002c62:	853b      	strh	r3, [r7, #40]	; 0x28
					break;
 8002c64:	e166      	b.n	8002f34 <task_Supervision+0x47c>
				case RECULE_GAUCHE:
					speedLeft = -VITESSE_KART*speed;
 8002c66:	4b42      	ldr	r3, [pc, #264]	; (8002d70 <task_Supervision+0x2b8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	01d2      	lsls	r2, r2, #7
 8002c70:	1ad2      	subs	r2, r2, r3
 8002c72:	0192      	lsls	r2, r2, #6
 8002c74:	441a      	add	r2, r3
 8002c76:	0052      	lsls	r2, r2, #1
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	b21b      	sxth	r3, r3
 8002c80:	857b      	strh	r3, [r7, #42]	; 0x2a
					speedRight = (-VITESSE_KART/2)*speed;
 8002c82:	4b3b      	ldr	r3, [pc, #236]	; (8002d70 <task_Supervision+0x2b8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	461a      	mov	r2, r3
 8002c8a:	0212      	lsls	r2, r2, #8
 8002c8c:	1ad2      	subs	r2, r2, r3
 8002c8e:	0192      	lsls	r2, r2, #6
 8002c90:	441a      	add	r2, r3
 8002c92:	0052      	lsls	r2, r2, #1
 8002c94:	4413      	add	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	b21b      	sxth	r3, r3
 8002c9c:	853b      	strh	r3, [r7, #40]	; 0x28
					break;
 8002c9e:	e149      	b.n	8002f34 <task_Supervision+0x47c>
				case RECULE_DROITE:
					speedLeft = (-VITESSE_KART/2)*speed;
 8002ca0:	4b33      	ldr	r3, [pc, #204]	; (8002d70 <task_Supervision+0x2b8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	0212      	lsls	r2, r2, #8
 8002caa:	1ad2      	subs	r2, r2, r3
 8002cac:	0192      	lsls	r2, r2, #6
 8002cae:	441a      	add	r2, r3
 8002cb0:	0052      	lsls	r2, r2, #1
 8002cb2:	4413      	add	r3, r2
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	b21b      	sxth	r3, r3
 8002cba:	857b      	strh	r3, [r7, #42]	; 0x2a
					speedRight = -VITESSE_KART*speed;
 8002cbc:	4b2c      	ldr	r3, [pc, #176]	; (8002d70 <task_Supervision+0x2b8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	01d2      	lsls	r2, r2, #7
 8002cc6:	1ad2      	subs	r2, r2, r3
 8002cc8:	0192      	lsls	r2, r2, #6
 8002cca:	441a      	add	r2, r3
 8002ccc:	0052      	lsls	r2, r2, #1
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	b21b      	sxth	r3, r3
 8002cd6:	853b      	strh	r3, [r7, #40]	; 0x28
					break;
 8002cd8:	e12c      	b.n	8002f34 <task_Supervision+0x47c>
				default:
					speedLeft = 0;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	857b      	strh	r3, [r7, #42]	; 0x2a
					speedRight = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	853b      	strh	r3, [r7, #40]	; 0x28
					break;
 8002ce2:	e127      	b.n	8002f34 <task_Supervision+0x47c>
			}
			//Stop si hors porte
		}
		else if (mode == MODE_OBS)
 8002ce4:	4b1e      	ldr	r3, [pc, #120]	; (8002d60 <task_Supervision+0x2a8>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f040 8097 	bne.w	8002e1c <task_Supervision+0x364>
		{
			captDistIR_Get(table);
 8002cee:	f107 0320 	add.w	r3, r7, #32
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe fc28 	bl	8001548 <captDistIR_Get>
			#if VL53
			xQueueReceive(qhVl53, &vl53, 1);
 8002cf8:	4b1a      	ldr	r3, [pc, #104]	; (8002d64 <task_Supervision+0x2ac>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f107 011c 	add.w	r1, r7, #28
 8002d00:	2201      	movs	r2, #1
 8002d02:	4618      	mov	r0, r3
 8002d04:	f009 f808 	bl	800bd18 <xQueueReceive>

			if (vl53 != 0 || vl53 != 1)
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d102      	bne.n	8002d14 <task_Supervision+0x25c>
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d001      	beq.n	8002d18 <task_Supervision+0x260>
				vl53 = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]

			if (vl53 == 1) //Il y a un obstacle
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d10a      	bne.n	8002d34 <task_Supervision+0x27c>
			{
				speedLeft = 0;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	857b      	strh	r3, [r7, #42]	; 0x2a
				speedRight = 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	853b      	strh	r3, [r7, #40]	; 0x28
				dir = 'S';
 8002d26:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <task_Supervision+0x2b0>)
 8002d28:	2253      	movs	r2, #83	; 0x53
 8002d2a:	701a      	strb	r2, [r3, #0]
				obs = 1;
 8002d2c:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <task_Supervision+0x2bc>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	e0ff      	b.n	8002f34 <task_Supervision+0x47c>
			}
			else
#endif
			if (table[0] > 1000 || table[1] > 1000)
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d3a:	dc03      	bgt.n	8002d44 <task_Supervision+0x28c>
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d42:	dd5e      	ble.n	8002e02 <task_Supervision+0x34a>
			{
				if (obs > 10)
 8002d44:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <task_Supervision+0x2bc>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2b0a      	cmp	r3, #10
 8002d4a:	dd15      	ble.n	8002d78 <task_Supervision+0x2c0>
				{
					speedLeft = VITESSE_OBS;
 8002d4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d50:	857b      	strh	r3, [r7, #42]	; 0x2a
					speedRight = -VITESSE_OBS/2;
 8002d52:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 8002d56:	853b      	strh	r3, [r7, #40]	; 0x28
					dir = 'G';
 8002d58:	4b03      	ldr	r3, [pc, #12]	; (8002d68 <task_Supervision+0x2b0>)
 8002d5a:	2247      	movs	r2, #71	; 0x47
 8002d5c:	701a      	strb	r2, [r3, #0]
				if (obs > 10)
 8002d5e:	e0e8      	b.n	8002f32 <task_Supervision+0x47a>
 8002d60:	20004f1c 	.word	0x20004f1c
 8002d64:	20004bf4 	.word	0x20004bf4
 8002d68:	20000000 	.word	0x20000000
 8002d6c:	20004f20 	.word	0x20004f20
 8002d70:	20000004 	.word	0x20000004
 8002d74:	20004f24 	.word	0x20004f24
				}
				else
				{
					speedLeft = 0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	857b      	strh	r3, [r7, #42]	; 0x2a
					speedRight = 0;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	853b      	strh	r3, [r7, #40]	; 0x28

					if (table[0] > table[1] && table[0] > 1000)
 8002d80:	6a3a      	ldr	r2, [r7, #32]
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	429a      	cmp	r2, r3
 8002d86:	dd18      	ble.n	8002dba <task_Supervision+0x302>
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d8e:	dd14      	ble.n	8002dba <task_Supervision+0x302>
					{
						dir = 'G';
 8002d90:	4b81      	ldr	r3, [pc, #516]	; (8002f98 <task_Supervision+0x4e0>)
 8002d92:	2247      	movs	r2, #71	; 0x47
 8002d94:	701a      	strb	r2, [r3, #0]
						speedLeft = VITESSE_OBS/2;
 8002d96:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d9a:	857b      	strh	r3, [r7, #42]	; 0x2a
						speedRight = -VITESSE_OBS/2;
 8002d9c:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 8002da0:	853b      	strh	r3, [r7, #40]	; 0x28
						if (obs%2 == 0)
 8002da2:	4b7e      	ldr	r3, [pc, #504]	; (8002f9c <task_Supervision+0x4e4>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d128      	bne.n	8002e00 <task_Supervision+0x348>
							obs++;
 8002dae:	4b7b      	ldr	r3, [pc, #492]	; (8002f9c <task_Supervision+0x4e4>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	3301      	adds	r3, #1
 8002db4:	4a79      	ldr	r2, [pc, #484]	; (8002f9c <task_Supervision+0x4e4>)
 8002db6:	6013      	str	r3, [r2, #0]
						if (obs%2 == 0)
 8002db8:	e022      	b.n	8002e00 <task_Supervision+0x348>
					}
					else if (table[0] < table[1] && table[1] > 1000)
 8002dba:	6a3a      	ldr	r2, [r7, #32]
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	f280 80b7 	bge.w	8002f32 <task_Supervision+0x47a>
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dca:	f340 80b2 	ble.w	8002f32 <task_Supervision+0x47a>
					{
						dir = 'D';
 8002dce:	4b72      	ldr	r3, [pc, #456]	; (8002f98 <task_Supervision+0x4e0>)
 8002dd0:	2244      	movs	r2, #68	; 0x44
 8002dd2:	701a      	strb	r2, [r3, #0]
						speedLeft = -VITESSE_OBS/2;
 8002dd4:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 8002dd8:	857b      	strh	r3, [r7, #42]	; 0x2a
						speedRight = VITESSE_OBS/2;
 8002dda:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002dde:	853b      	strh	r3, [r7, #40]	; 0x28
						if (obs%2 == 1)
 8002de0:	4b6e      	ldr	r3, [pc, #440]	; (8002f9c <task_Supervision+0x4e4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	bfb8      	it	lt
 8002dec:	425b      	neglt	r3, r3
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	f040 809f 	bne.w	8002f32 <task_Supervision+0x47a>
							obs++;
 8002df4:	4b69      	ldr	r3, [pc, #420]	; (8002f9c <task_Supervision+0x4e4>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	4a68      	ldr	r2, [pc, #416]	; (8002f9c <task_Supervision+0x4e4>)
 8002dfc:	6013      	str	r3, [r2, #0]
				if (obs > 10)
 8002dfe:	e098      	b.n	8002f32 <task_Supervision+0x47a>
 8002e00:	e097      	b.n	8002f32 <task_Supervision+0x47a>
					}
				}
			}
			else
			{
				speedLeft = VITESSE_OBS;
 8002e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e06:	857b      	strh	r3, [r7, #42]	; 0x2a
				speedRight = VITESSE_OBS;
 8002e08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e0c:	853b      	strh	r3, [r7, #40]	; 0x28
				dir = 'F';
 8002e0e:	4b62      	ldr	r3, [pc, #392]	; (8002f98 <task_Supervision+0x4e0>)
 8002e10:	2246      	movs	r2, #70	; 0x46
 8002e12:	701a      	strb	r2, [r3, #0]
				obs = 0;
 8002e14:	4b61      	ldr	r3, [pc, #388]	; (8002f9c <task_Supervision+0x4e4>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	e08b      	b.n	8002f34 <task_Supervision+0x47c>
			}
		}
		else if (mode == MODE_CAM)
 8002e1c:	4b60      	ldr	r3, [pc, #384]	; (8002fa0 <task_Supervision+0x4e8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	f040 8087 	bne.w	8002f34 <task_Supervision+0x47c>
		{
			#if VL53
			xQueueReceive(qhVl53, &vl53, 1); //For vl53
 8002e26:	4b5f      	ldr	r3, [pc, #380]	; (8002fa4 <task_Supervision+0x4ec>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f107 011c 	add.w	r1, r7, #28
 8002e2e:	2201      	movs	r2, #1
 8002e30:	4618      	mov	r0, r3
 8002e32:	f008 ff71 	bl	800bd18 <xQueueReceive>
			#endif

			pxRxedMessage.data = STOP; //REPLACE BY CAM INFO WITH ROS
 8002e36:	2304      	movs	r3, #4
 8002e38:	61bb      	str	r3, [r7, #24]
			switch (pxRxedMessage.data)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d86c      	bhi.n	8002f1a <task_Supervision+0x462>
 8002e40:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <task_Supervision+0x390>)
 8002e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e46:	bf00      	nop
 8002e48:	08002e6d 	.word	0x08002e6d
 8002e4c:	08002f1b 	.word	0x08002f1b
 8002e50:	08002ebb 	.word	0x08002ebb
 8002e54:	08002f1b 	.word	0x08002f1b
 8002e58:	08002f09 	.word	0x08002f09
 8002e5c:	08002ea1 	.word	0x08002ea1
 8002e60:	08002e87 	.word	0x08002e87
 8002e64:	08002eef 	.word	0x08002eef
 8002e68:	08002ed5 	.word	0x08002ed5
			{
				case AVANT:
					speedLeft = VITESSE_CAM;
 8002e6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e70:	857b      	strh	r3, [r7, #42]	; 0x2a
					AspeedLeft = VITESSE_CAM;
 8002e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e76:	85fb      	strh	r3, [r7, #46]	; 0x2e
					speedRight = VITESSE_CAM;
 8002e78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e7c:	853b      	strh	r3, [r7, #40]	; 0x28
					AspeedRight = VITESSE_CAM;
 8002e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e82:	85bb      	strh	r3, [r7, #44]	; 0x2c
					break;
 8002e84:	e04e      	b.n	8002f24 <task_Supervision+0x46c>
				case AVANT_DROITE:
					speedLeft = VITESSE_CAM;
 8002e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e8a:	857b      	strh	r3, [r7, #42]	; 0x2a
					AspeedLeft = VITESSE_CAM;
 8002e8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e90:	85fb      	strh	r3, [r7, #46]	; 0x2e
					speedRight = VITESSE_CAM/2;
 8002e92:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002e96:	853b      	strh	r3, [r7, #40]	; 0x28
					AspeedRight = VITESSE_CAM/2;
 8002e98:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002e9c:	85bb      	strh	r3, [r7, #44]	; 0x2c
					break;
 8002e9e:	e041      	b.n	8002f24 <task_Supervision+0x46c>
				case AVANT_GAUCHE:
					speedLeft = VITESSE_CAM/2;
 8002ea0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002ea4:	857b      	strh	r3, [r7, #42]	; 0x2a
					AspeedLeft = VITESSE_CAM/2;
 8002ea6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002eaa:	85fb      	strh	r3, [r7, #46]	; 0x2e
					speedRight = VITESSE_CAM;
 8002eac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eb0:	853b      	strh	r3, [r7, #40]	; 0x28
					AspeedRight = VITESSE_CAM;
 8002eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eb6:	85bb      	strh	r3, [r7, #44]	; 0x2c
					break;
 8002eb8:	e034      	b.n	8002f24 <task_Supervision+0x46c>
				case RECULE:
					speedLeft = -VITESSE_CAM;
 8002eba:	f64f 4318 	movw	r3, #64536	; 0xfc18
 8002ebe:	857b      	strh	r3, [r7, #42]	; 0x2a
					AspeedLeft = -VITESSE_CAM;
 8002ec0:	f64f 4318 	movw	r3, #64536	; 0xfc18
 8002ec4:	85fb      	strh	r3, [r7, #46]	; 0x2e
					speedRight = -VITESSE_CAM;
 8002ec6:	f64f 4318 	movw	r3, #64536	; 0xfc18
 8002eca:	853b      	strh	r3, [r7, #40]	; 0x28
					AspeedRight = -VITESSE_CAM;
 8002ecc:	f64f 4318 	movw	r3, #64536	; 0xfc18
 8002ed0:	85bb      	strh	r3, [r7, #44]	; 0x2c
					break;
 8002ed2:	e027      	b.n	8002f24 <task_Supervision+0x46c>
				case RECULE_DROITE:
					speedLeft = -VITESSE_CAM/2;
 8002ed4:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 8002ed8:	857b      	strh	r3, [r7, #42]	; 0x2a
					AspeedLeft = -VITESSE_CAM/2;
 8002eda:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 8002ede:	85fb      	strh	r3, [r7, #46]	; 0x2e
					speedRight = -VITESSE_CAM;
 8002ee0:	f64f 4318 	movw	r3, #64536	; 0xfc18
 8002ee4:	853b      	strh	r3, [r7, #40]	; 0x28
					AspeedRight = -VITESSE_CAM;
 8002ee6:	f64f 4318 	movw	r3, #64536	; 0xfc18
 8002eea:	85bb      	strh	r3, [r7, #44]	; 0x2c
					break;
 8002eec:	e01a      	b.n	8002f24 <task_Supervision+0x46c>
				case RECULE_GAUCHE:
					speedLeft = -VITESSE_CAM;
 8002eee:	f64f 4318 	movw	r3, #64536	; 0xfc18
 8002ef2:	857b      	strh	r3, [r7, #42]	; 0x2a
					AspeedLeft = -VITESSE_CAM;
 8002ef4:	f64f 4318 	movw	r3, #64536	; 0xfc18
 8002ef8:	85fb      	strh	r3, [r7, #46]	; 0x2e
					speedRight = -VITESSE_CAM/2;
 8002efa:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 8002efe:	853b      	strh	r3, [r7, #40]	; 0x28
					AspeedRight = -VITESSE_CAM/2;
 8002f00:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 8002f04:	85bb      	strh	r3, [r7, #44]	; 0x2c
					break;
 8002f06:	e00d      	b.n	8002f24 <task_Supervision+0x46c>
				case STOP:
					speedLeft = 0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	857b      	strh	r3, [r7, #42]	; 0x2a
					AspeedLeft = 0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	85fb      	strh	r3, [r7, #46]	; 0x2e
					speedRight = 0;
 8002f10:	2300      	movs	r3, #0
 8002f12:	853b      	strh	r3, [r7, #40]	; 0x28
					AspeedRight = 0;
 8002f14:	2300      	movs	r3, #0
 8002f16:	85bb      	strh	r3, [r7, #44]	; 0x2c
					break;
 8002f18:	e004      	b.n	8002f24 <task_Supervision+0x46c>
				default:
					speedLeft = AspeedLeft;
 8002f1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f1c:	857b      	strh	r3, [r7, #42]	; 0x2a
					speedRight = AspeedRight;
 8002f1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002f20:	853b      	strh	r3, [r7, #40]	; 0x28
					break;
 8002f22:	bf00      	nop
			}

			dir = 'N';
 8002f24:	4b1c      	ldr	r3, [pc, #112]	; (8002f98 <task_Supervision+0x4e0>)
 8002f26:	224e      	movs	r2, #78	; 0x4e
 8002f28:	701a      	strb	r2, [r3, #0]
			obs = 0;
 8002f2a:	4b1c      	ldr	r3, [pc, #112]	; (8002f9c <task_Supervision+0x4e4>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	e000      	b.n	8002f34 <task_Supervision+0x47c>
				if (obs > 10)
 8002f32:	bf00      	nop
		}

		xQueueSend( q_mot_L, ( void * ) &speedLeft,  portMAX_DELAY );
 8002f34:	4b1c      	ldr	r3, [pc, #112]	; (8002fa8 <task_Supervision+0x4f0>)
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f42:	f008 fd4f 	bl	800b9e4 <xQueueGenericSend>
		xSemaphoreTake( xSem_Supervision, portMAX_DELAY );
 8002f46:	4b19      	ldr	r3, [pc, #100]	; (8002fac <task_Supervision+0x4f4>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f008 ffc2 	bl	800bed8 <xQueueSemaphoreTake>

		xQueueSend( q_mot_R, ( void * ) &speedRight,  portMAX_DELAY );
 8002f54:	4b16      	ldr	r3, [pc, #88]	; (8002fb0 <task_Supervision+0x4f8>)
 8002f56:	6818      	ldr	r0, [r3, #0]
 8002f58:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f62:	f008 fd3f 	bl	800b9e4 <xQueueGenericSend>
		xSemaphoreTake( xSem_Supervision, portMAX_DELAY );
 8002f66:	4b11      	ldr	r3, [pc, #68]	; (8002fac <task_Supervision+0x4f4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f008 ffb2 	bl	800bed8 <xQueueSemaphoreTake>

		struct AMessage pxMessage;

		pxMessage.data=mode;
 8002f74:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <task_Supervision+0x4e8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	613b      	str	r3, [r7, #16]
		pxMessage.command=dir;
 8002f7a:	4b07      	ldr	r3, [pc, #28]	; (8002f98 <task_Supervision+0x4e0>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	733b      	strb	r3, [r7, #12]
		xQueueSend( qhMR, ( void * ) &pxMessage, 1);
 8002f80:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <task_Supervision+0x4fc>)
 8002f82:	6818      	ldr	r0, [r3, #0]
 8002f84:	f107 010c 	add.w	r1, r7, #12
 8002f88:	2300      	movs	r3, #0
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f008 fd2a 	bl	800b9e4 <xQueueGenericSend>
		pxMessage.data=mode;
		pxMessage.command=dir;
		xQueueSend( qhLCD, ( void * ) &pxMessage, 1);
	#endif

		vTaskDelay(SAMPLING_PERIOD_ms);
 8002f90:	2005      	movs	r0, #5
 8002f92:	f009 fbeb 	bl	800c76c <vTaskDelay>
	{
 8002f96:	e599      	b.n	8002acc <task_Supervision+0x14>
 8002f98:	20000000 	.word	0x20000000
 8002f9c:	20004f24 	.word	0x20004f24
 8002fa0:	20004f1c 	.word	0x20004f1c
 8002fa4:	20004bf4 	.word	0x20004bf4
 8002fa8:	20004be4 	.word	0x20004be4
 8002fac:	20004be0 	.word	0x20004be0
 8002fb0:	20004be8 	.word	0x20004be8
 8002fb4:	20004bec 	.word	0x20004bec

08002fb8 <main>:
#endif
}

//=========================================================================
int main(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af02      	add	r7, sp, #8
  HAL_Init();
 8002fbe:	f001 fc5f 	bl	8004880 <HAL_Init>
  SystemClock_Config();
 8002fc2:	f001 f9ed 	bl	80043a0 <SystemClock_Config>
  MX_GPIO_Init();
 8002fc6:	f7fe fe07 	bl	8001bd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002fca:	f7fe ff95 	bl	8001ef8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002fce:	f7fe ff69 	bl	8001ea4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002fd2:	f7fe fe9b 	bl	8001d0c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002fd6:	f7fe ff3b 	bl	8001e50 <MX_USART1_UART_Init>

  RetargetInit(&huart2); //make printf and scanf work with uart2
 8002fda:	4854      	ldr	r0, [pc, #336]	; (800312c <main+0x174>)
 8002fdc:	f000 fc6e 	bl	80038bc <RetargetInit>
  printf("%cc%c[2J%c[0;0HTitouan//Jeremy//Louanne\r\n", 0x1b, 0x1b, 0x1b);
 8002fe0:	231b      	movs	r3, #27
 8002fe2:	221b      	movs	r2, #27
 8002fe4:	211b      	movs	r1, #27
 8002fe6:	4852      	ldr	r0, [pc, #328]	; (8003130 <main+0x178>)
 8002fe8:	f014 fda0 	bl	8017b2c <iprintf>

  motorCommand_Init();
 8002fec:	f000 fa40 	bl	8003470 <motorCommand_Init>
  quadEncoder_Init();
 8002ff0:	f000 fab8 	bl	8003564 <quadEncoder_Init>
  captDistIR_Init();
 8002ff4:	f7fe fa76 	bl	80014e4 <captDistIR_Init>

  HAL_Delay(500);
 8002ff8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ffc:	f001 fc82 	bl	8004904 <HAL_Delay>

  initVL53L0X();
 8003000:	f7fe f824 	bl	800104c <initVL53L0X>
  HAL_Delay(100);
 8003004:	2064      	movs	r0, #100	; 0x64
 8003006:	f001 fc7d 	bl	8004904 <HAL_Delay>

  // Test Ecran LCD
  groveLCD_begin(16,2,0); // !! cette fonction prend du temps
 800300a:	2200      	movs	r2, #0
 800300c:	2102      	movs	r1, #2
 800300e:	2010      	movs	r0, #16
 8003010:	f7fe ffc8 	bl	8001fa4 <groveLCD_begin>
  HAL_Delay(100);
 8003014:	2064      	movs	r0, #100	; 0x64
 8003016:	f001 fc75 	bl	8004904 <HAL_Delay>
  groveLCD_setCursor(0,0);
 800301a:	2100      	movs	r1, #0
 800301c:	2000      	movs	r0, #0
 800301e:	f7ff f853 	bl	80020c8 <groveLCD_setCursor>
  groveLCD_setColor(1);
 8003022:	2001      	movs	r0, #1
 8003024:	f7ff f8f6 	bl	8002214 <groveLCD_setColor>
  groveLCD_term_printf("Titouan//Jeremy//Louanne");
 8003028:	4842      	ldr	r0, [pc, #264]	; (8003134 <main+0x17c>)
 800302a:	f7ff f91d 	bl	8002268 <groveLCD_term_printf>
  HAL_Delay(1000);
 800302e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003032:	f001 fc67 	bl	8004904 <HAL_Delay>

  osKernelInitialize();
 8003036:	f008 fa49 	bl	800b4cc <osKernelInitialize>
#elif SYNCHRO_EX == EX3
    xTaskCreate(microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL,  24, NULL );
#elif SYNCHRO_EX == TESTMR
    xTaskCreate(microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL,  24, NULL );
#elif SYNCHRO_EX == EXFINAL
    xTaskCreate(microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL,  24, NULL );
 800303a:	2300      	movs	r3, #0
 800303c:	9301      	str	r3, [sp, #4]
 800303e:	2318      	movs	r3, #24
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	2300      	movs	r3, #0
 8003044:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003048:	493b      	ldr	r1, [pc, #236]	; (8003138 <main+0x180>)
 800304a:	483c      	ldr	r0, [pc, #240]	; (800313c <main+0x184>)
 800304c:	f009 fa33 	bl	800c4b6 <xTaskCreate>
    xTaskCreate(task_Supervision, ( const portCHAR * ) "task Supervision", 128 /* stack size */, NULL, 27, NULL);
 8003050:	2300      	movs	r3, #0
 8003052:	9301      	str	r3, [sp, #4]
 8003054:	231b      	movs	r3, #27
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	2300      	movs	r3, #0
 800305a:	2280      	movs	r2, #128	; 0x80
 800305c:	4938      	ldr	r1, [pc, #224]	; (8003140 <main+0x188>)
 800305e:	4839      	ldr	r0, [pc, #228]	; (8003144 <main+0x18c>)
 8003060:	f009 fa29 	bl	800c4b6 <xTaskCreate>
	xTaskCreate(task_Motor_Left, ( const portCHAR * ) "task Motor Left", 128 /* stack size */, NULL, 25, NULL);
 8003064:	2300      	movs	r3, #0
 8003066:	9301      	str	r3, [sp, #4]
 8003068:	2319      	movs	r3, #25
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	2300      	movs	r3, #0
 800306e:	2280      	movs	r2, #128	; 0x80
 8003070:	4935      	ldr	r1, [pc, #212]	; (8003148 <main+0x190>)
 8003072:	4836      	ldr	r0, [pc, #216]	; (800314c <main+0x194>)
 8003074:	f009 fa1f 	bl	800c4b6 <xTaskCreate>
	xTaskCreate(task_Motor_Right, ( const portCHAR * ) "task Motor Right", 128 /* stack size */, NULL, 26, NULL);
 8003078:	2300      	movs	r3, #0
 800307a:	9301      	str	r3, [sp, #4]
 800307c:	231a      	movs	r3, #26
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	2300      	movs	r3, #0
 8003082:	2280      	movs	r2, #128	; 0x80
 8003084:	4932      	ldr	r1, [pc, #200]	; (8003150 <main+0x198>)
 8003086:	4833      	ldr	r0, [pc, #204]	; (8003154 <main+0x19c>)
 8003088:	f009 fa15 	bl	800c4b6 <xTaskCreate>

	#if VL53
	xTaskCreate(task_VL53, ( const portCHAR * ) "task VL53", 128 /* stack size */, NULL, 23, NULL);
 800308c:	2300      	movs	r3, #0
 800308e:	9301      	str	r3, [sp, #4]
 8003090:	2317      	movs	r3, #23
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	2300      	movs	r3, #0
 8003096:	2280      	movs	r2, #128	; 0x80
 8003098:	492f      	ldr	r1, [pc, #188]	; (8003158 <main+0x1a0>)
 800309a:	4830      	ldr	r0, [pc, #192]	; (800315c <main+0x1a4>)
 800309c:	f009 fa0b 	bl	800c4b6 <xTaskCreate>
	#if LCD
	xTaskCreate(task_Grove_LCD, ( const portCHAR * ) "task LCD", 128 /* stack size */, NULL, 23, NULL);
	#endif
#endif

    vSemaphoreCreateBinary(xSem_Supervision);
 80030a0:	2203      	movs	r2, #3
 80030a2:	2100      	movs	r1, #0
 80030a4:	2001      	movs	r0, #1
 80030a6:	f008 fc3f 	bl	800b928 <xQueueGenericCreate>
 80030aa:	4603      	mov	r3, r0
 80030ac:	4a2c      	ldr	r2, [pc, #176]	; (8003160 <main+0x1a8>)
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	4b2b      	ldr	r3, [pc, #172]	; (8003160 <main+0x1a8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d006      	beq.n	80030c6 <main+0x10e>
 80030b8:	4b29      	ldr	r3, [pc, #164]	; (8003160 <main+0x1a8>)
 80030ba:	6818      	ldr	r0, [r3, #0]
 80030bc:	2300      	movs	r3, #0
 80030be:	2200      	movs	r2, #0
 80030c0:	2100      	movs	r1, #0
 80030c2:	f008 fc8f 	bl	800b9e4 <xQueueGenericSend>
    xSemaphoreTake( xSem_Supervision, portMAX_DELAY );
 80030c6:	4b26      	ldr	r3, [pc, #152]	; (8003160 <main+0x1a8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030ce:	4618      	mov	r0, r3
 80030d0:	f008 ff02 	bl	800bed8 <xQueueSemaphoreTake>

    q_mot_L = xQueueCreate(1, sizeof(int16_t));
 80030d4:	2200      	movs	r2, #0
 80030d6:	2102      	movs	r1, #2
 80030d8:	2001      	movs	r0, #1
 80030da:	f008 fc25 	bl	800b928 <xQueueGenericCreate>
 80030de:	4603      	mov	r3, r0
 80030e0:	4a20      	ldr	r2, [pc, #128]	; (8003164 <main+0x1ac>)
 80030e2:	6013      	str	r3, [r2, #0]
    q_mot_R = xQueueCreate(1, sizeof(int16_t));
 80030e4:	2200      	movs	r2, #0
 80030e6:	2102      	movs	r1, #2
 80030e8:	2001      	movs	r0, #1
 80030ea:	f008 fc1d 	bl	800b928 <xQueueGenericCreate>
 80030ee:	4603      	mov	r3, r0
 80030f0:	4a1d      	ldr	r2, [pc, #116]	; (8003168 <main+0x1b0>)
 80030f2:	6013      	str	r3, [r2, #0]
    qhVl53 = xQueueCreate(1, sizeof(int));
 80030f4:	2200      	movs	r2, #0
 80030f6:	2104      	movs	r1, #4
 80030f8:	2001      	movs	r0, #1
 80030fa:	f008 fc15 	bl	800b928 <xQueueGenericCreate>
 80030fe:	4603      	mov	r3, r0
 8003100:	4a1a      	ldr	r2, [pc, #104]	; (800316c <main+0x1b4>)
 8003102:	6013      	str	r3, [r2, #0]

    qhMR = xQueueCreate( 1, sizeof(struct AMessage ) );
 8003104:	2200      	movs	r2, #0
 8003106:	2108      	movs	r1, #8
 8003108:	2001      	movs	r0, #1
 800310a:	f008 fc0d 	bl	800b928 <xQueueGenericCreate>
 800310e:	4603      	mov	r3, r0
 8003110:	4a17      	ldr	r2, [pc, #92]	; (8003170 <main+0x1b8>)
 8003112:	6013      	str	r3, [r2, #0]
    qhLCD = xQueueCreate( 1, sizeof(struct AMessage ) );
 8003114:	2200      	movs	r2, #0
 8003116:	2108      	movs	r1, #8
 8003118:	2001      	movs	r0, #1
 800311a:	f008 fc05 	bl	800b928 <xQueueGenericCreate>
 800311e:	4603      	mov	r3, r0
 8003120:	4a14      	ldr	r2, [pc, #80]	; (8003174 <main+0x1bc>)
 8003122:	6013      	str	r3, [r2, #0]

  //rec_buf6[0] = 'T';

  osKernelStart();
 8003124:	f008 f9f6 	bl	800b514 <osKernelStart>
  while(1)
 8003128:	e7fe      	b.n	8003128 <main+0x170>
 800312a:	bf00      	nop
 800312c:	20004a14 	.word	0x20004a14
 8003130:	08018f8c 	.word	0x08018f8c
 8003134:	08018fb8 	.word	0x08018fb8
 8003138:	08018fd4 	.word	0x08018fd4
 800313c:	08002645 	.word	0x08002645
 8003140:	08018fe4 	.word	0x08018fe4
 8003144:	08002ab9 	.word	0x08002ab9
 8003148:	08018ff8 	.word	0x08018ff8
 800314c:	08002829 	.word	0x08002829
 8003150:	08019008 	.word	0x08019008
 8003154:	08002939 	.word	0x08002939
 8003158:	0801901c 	.word	0x0801901c
 800315c:	08002a45 	.word	0x08002a45
 8003160:	20004be0 	.word	0x20004be0
 8003164:	20004be4 	.word	0x20004be4
 8003168:	20004be8 	.word	0x20004be8
 800316c:	20004bf4 	.word	0x20004bf4
 8003170:	20004bec 	.word	0x20004bec
 8003174:	20004bf0 	.word	0x20004bf0

08003178 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a04      	ldr	r2, [pc, #16]	; (8003198 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d101      	bne.n	800318e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800318a:	f001 fb9b 	bl	80048c4 <HAL_IncTick>
  }
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40000800 	.word	0x40000800

0800319c <Error_Handler>:
//=========================================================================
void Error_Handler(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80031a0:	b672      	cpsid	i
}
 80031a2:	bf00      	nop
  __disable_irq();
  while (1)
 80031a4:	e7fe      	b.n	80031a4 <Error_Handler+0x8>
	...

080031a8 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80031b2:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <microros_allocate+0x3c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4413      	add	r3, r2
 80031bc:	461a      	mov	r2, r3
 80031be:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <microros_allocate+0x3c>)
 80031c0:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80031c2:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <microros_allocate+0x40>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4413      	add	r3, r2
 80031cc:	461a      	mov	r2, r3
 80031ce:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <microros_allocate+0x40>)
 80031d0:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7fe f9fc 	bl	80015d0 <pvPortMallocMicroROS>
 80031d8:	4603      	mov	r3, r0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20004f28 	.word	0x20004f28
 80031e8:	20004f2c 	.word	0x20004f2c

080031ec <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00c      	beq.n	8003216 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7fe fb05 	bl	800180c <getBlockSize>
 8003202:	4603      	mov	r3, r0
 8003204:	4a06      	ldr	r2, [pc, #24]	; (8003220 <microros_deallocate+0x34>)
 8003206:	6812      	ldr	r2, [r2, #0]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	461a      	mov	r2, r3
 800320c:	4b04      	ldr	r3, [pc, #16]	; (8003220 <microros_deallocate+0x34>)
 800320e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7fe faa1 	bl	8001758 <vPortFreeMicroROS>
  }
}
 8003216:	bf00      	nop
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20004f2c 	.word	0x20004f2c

08003224 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003230:	4b15      	ldr	r3, [pc, #84]	; (8003288 <microros_reallocate+0x64>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	461a      	mov	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	4413      	add	r3, r2
 800323a:	461a      	mov	r2, r3
 800323c:	4b12      	ldr	r3, [pc, #72]	; (8003288 <microros_reallocate+0x64>)
 800323e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003240:	4b12      	ldr	r3, [pc, #72]	; (800328c <microros_reallocate+0x68>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	461a      	mov	r2, r3
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	4413      	add	r3, r2
 800324a:	461a      	mov	r2, r3
 800324c:	4b0f      	ldr	r3, [pc, #60]	; (800328c <microros_reallocate+0x68>)
 800324e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d104      	bne.n	8003260 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8003256:	68b8      	ldr	r0, [r7, #8]
 8003258:	f7fe f9ba 	bl	80015d0 <pvPortMallocMicroROS>
 800325c:	4603      	mov	r3, r0
 800325e:	e00e      	b.n	800327e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f7fe fad3 	bl	800180c <getBlockSize>
 8003266:	4603      	mov	r3, r0
 8003268:	4a08      	ldr	r2, [pc, #32]	; (800328c <microros_reallocate+0x68>)
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	461a      	mov	r2, r3
 8003270:	4b06      	ldr	r3, [pc, #24]	; (800328c <microros_reallocate+0x68>)
 8003272:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8003274:	68b9      	ldr	r1, [r7, #8]
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f7fe fae6 	bl	8001848 <pvPortReallocMicroROS>
 800327c:	4603      	mov	r3, r0
  }
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20004f28 	.word	0x20004f28
 800328c:	20004f2c 	.word	0x20004f2c

08003290 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	fb02 f303 	mul.w	r3, r2, r3
 80032a4:	4a0c      	ldr	r2, [pc, #48]	; (80032d8 <microros_zero_allocate+0x48>)
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	4413      	add	r3, r2
 80032aa:	461a      	mov	r2, r3
 80032ac:	4b0a      	ldr	r3, [pc, #40]	; (80032d8 <microros_zero_allocate+0x48>)
 80032ae:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	fb02 f303 	mul.w	r3, r2, r3
 80032b8:	4a08      	ldr	r2, [pc, #32]	; (80032dc <microros_zero_allocate+0x4c>)
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	4413      	add	r3, r2
 80032be:	461a      	mov	r2, r3
 80032c0:	4b06      	ldr	r3, [pc, #24]	; (80032dc <microros_zero_allocate+0x4c>)
 80032c2:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80032c4:	68b9      	ldr	r1, [r7, #8]
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f7fe faf8 	bl	80018bc <pvPortCallocMicroROS>
 80032cc:	4603      	mov	r3, r0
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	20004f28 	.word	0x20004f28
 80032dc:	20004f2c 	.word	0x20004f2c

080032e0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80032e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032e4:	b086      	sub	sp, #24
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80032ec:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80032f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032f6:	a320      	add	r3, pc, #128	; (adr r3, 8003378 <UTILS_NanosecondsToTimespec+0x98>)
 80032f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fc:	f7fd fc7e 	bl	8000bfc <__aeabi_ldivmod>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800330a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800330e:	a31a      	add	r3, pc, #104	; (adr r3, 8003378 <UTILS_NanosecondsToTimespec+0x98>)
 8003310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003314:	f7fd fc72 	bl	8000bfc <__aeabi_ldivmod>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	da20      	bge.n	8003366 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	4a11      	ldr	r2, [pc, #68]	; (8003370 <UTILS_NanosecondsToTimespec+0x90>)
 800332a:	fb82 1203 	smull	r1, r2, r2, r3
 800332e:	1712      	asrs	r2, r2, #28
 8003330:	17db      	asrs	r3, r3, #31
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	3301      	adds	r3, #1
 8003336:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333e:	6979      	ldr	r1, [r7, #20]
 8003340:	17c8      	asrs	r0, r1, #31
 8003342:	460c      	mov	r4, r1
 8003344:	4605      	mov	r5, r0
 8003346:	ebb2 0804 	subs.w	r8, r2, r4
 800334a:	eb63 0905 	sbc.w	r9, r3, r5
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	4906      	ldr	r1, [pc, #24]	; (8003374 <UTILS_NanosecondsToTimespec+0x94>)
 800335c:	fb01 f303 	mul.w	r3, r1, r3
 8003360:	441a      	add	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	609a      	str	r2, [r3, #8]
    }
}
 8003366:	bf00      	nop
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003370:	44b82fa1 	.word	0x44b82fa1
 8003374:	3b9aca00 	.word	0x3b9aca00
 8003378:	3b9aca00 	.word	0x3b9aca00
 800337c:	00000000 	.word	0x00000000

08003380 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8003380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003384:	b08e      	sub	sp, #56	; 0x38
 8003386:	af00      	add	r7, sp, #0
 8003388:	6278      	str	r0, [r7, #36]	; 0x24
 800338a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800338c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003390:	2300      	movs	r3, #0
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	f04f 0300 	mov.w	r3, #0
 800339e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80033a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033a6:	4618      	mov	r0, r3
 80033a8:	f009 fd12 	bl	800cdd0 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80033ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ae:	17da      	asrs	r2, r3, #31
 80033b0:	61bb      	str	r3, [r7, #24]
 80033b2:	61fa      	str	r2, [r7, #28]
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	69b9      	ldr	r1, [r7, #24]
 80033be:	000b      	movs	r3, r1
 80033c0:	2200      	movs	r2, #0
 80033c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80033c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c8:	2200      	movs	r2, #0
 80033ca:	461c      	mov	r4, r3
 80033cc:	4615      	mov	r5, r2
 80033ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80033d2:	1911      	adds	r1, r2, r4
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	416b      	adcs	r3, r5
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80033de:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80033e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	f04f 0400 	mov.w	r4, #0
 80033ee:	f04f 0500 	mov.w	r5, #0
 80033f2:	015d      	lsls	r5, r3, #5
 80033f4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80033f8:	0154      	lsls	r4, r2, #5
 80033fa:	4622      	mov	r2, r4
 80033fc:	462b      	mov	r3, r5
 80033fe:	ebb2 0800 	subs.w	r8, r2, r0
 8003402:	eb63 0901 	sbc.w	r9, r3, r1
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	f04f 0300 	mov.w	r3, #0
 800340e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8003412:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8003416:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800341a:	4690      	mov	r8, r2
 800341c:	4699      	mov	r9, r3
 800341e:	eb18 0a00 	adds.w	sl, r8, r0
 8003422:	eb49 0b01 	adc.w	fp, r9, r1
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003432:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003436:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800343a:	ebb2 040a 	subs.w	r4, r2, sl
 800343e:	603c      	str	r4, [r7, #0]
 8003440:	eb63 030b 	sbc.w	r3, r3, fp
 8003444:	607b      	str	r3, [r7, #4]
 8003446:	e9d7 4500 	ldrd	r4, r5, [r7]
 800344a:	4623      	mov	r3, r4
 800344c:	181b      	adds	r3, r3, r0
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	462b      	mov	r3, r5
 8003452:	eb41 0303 	adc.w	r3, r1, r3
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	6a3a      	ldr	r2, [r7, #32]
 800345a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800345e:	f7ff ff3f 	bl	80032e0 <UTILS_NanosecondsToTimespec>

    return 0;
 8003462:	2300      	movs	r3, #0
 8003464:	4618      	mov	r0, r3
 8003466:	3738      	adds	r7, #56	; 0x38
 8003468:	46bd      	mov	sp, r7
 800346a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003470 <motorCommand_Init>:
// TIMER 3 (PWM)  : CH1 et CH2
// ENABLE : Sortie Logique (GPIO) PA7
//=================================================================

void motorCommand_Init(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
	unsigned int uwPrescalerValue = 0;
 8003476:	2300      	movs	r3, #0
 8003478:	607b      	str	r3, [r7, #4]

	/* Compute the prescaler value to have TIM4 counter clock equal to 10MHz */
	  uwPrescalerValue = (unsigned int) ((SystemCoreClock / 10000000) - 1);
 800347a:	4b24      	ldr	r3, [pc, #144]	; (800350c <motorCommand_Init+0x9c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a24      	ldr	r2, [pc, #144]	; (8003510 <motorCommand_Init+0xa0>)
 8003480:	fba2 2303 	umull	r2, r3, r2, r3
 8003484:	0d9b      	lsrs	r3, r3, #22
 8003486:	3b01      	subs	r3, #1
 8003488:	607b      	str	r3, [r7, #4]
	  TimHandle.Instance = TIM3;
 800348a:	4b22      	ldr	r3, [pc, #136]	; (8003514 <motorCommand_Init+0xa4>)
 800348c:	4a22      	ldr	r2, [pc, #136]	; (8003518 <motorCommand_Init+0xa8>)
 800348e:	601a      	str	r2, [r3, #0]
	  TimHandle.Init.Period = 200 - 1; // 100MHz/200=50kHz
 8003490:	4b20      	ldr	r3, [pc, #128]	; (8003514 <motorCommand_Init+0xa4>)
 8003492:	22c7      	movs	r2, #199	; 0xc7
 8003494:	60da      	str	r2, [r3, #12]
	  TimHandle.Init.Prescaler = uwPrescalerValue;
 8003496:	4a1f      	ldr	r2, [pc, #124]	; (8003514 <motorCommand_Init+0xa4>)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6053      	str	r3, [r2, #4]
	  TimHandle.Init.ClockDivision = 0;
 800349c:	4b1d      	ldr	r3, [pc, #116]	; (8003514 <motorCommand_Init+0xa4>)
 800349e:	2200      	movs	r2, #0
 80034a0:	611a      	str	r2, [r3, #16]
	  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034a2:	4b1c      	ldr	r3, [pc, #112]	; (8003514 <motorCommand_Init+0xa4>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	609a      	str	r2, [r3, #8]

	  HAL_TIM_Base_Init(&TimHandle);
 80034a8:	481a      	ldr	r0, [pc, #104]	; (8003514 <motorCommand_Init+0xa4>)
 80034aa:	f005 fcd9 	bl	8008e60 <HAL_TIM_Base_Init>

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034ae:	4b1b      	ldr	r3, [pc, #108]	; (800351c <motorCommand_Init+0xac>)
 80034b0:	2260      	movs	r2, #96	; 0x60
 80034b2:	601a      	str	r2, [r3, #0]
	  sConfigOC.Pulse = 0x5;// Specifies the pulse value to be loaded into the Capture Compare Register. This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF */
 80034b4:	4b19      	ldr	r3, [pc, #100]	; (800351c <motorCommand_Init+0xac>)
 80034b6:	2205      	movs	r2, #5
 80034b8:	605a      	str	r2, [r3, #4]

	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034ba:	4b18      	ldr	r3, [pc, #96]	; (800351c <motorCommand_Init+0xac>)
 80034bc:	2200      	movs	r2, #0
 80034be:	609a      	str	r2, [r3, #8]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034c0:	4b16      	ldr	r3, [pc, #88]	; (800351c <motorCommand_Init+0xac>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	611a      	str	r2, [r3, #16]

	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_1);
 80034c6:	2200      	movs	r2, #0
 80034c8:	4914      	ldr	r1, [pc, #80]	; (800351c <motorCommand_Init+0xac>)
 80034ca:	4812      	ldr	r0, [pc, #72]	; (8003514 <motorCommand_Init+0xa4>)
 80034cc:	f006 f87a 	bl	80095c4 <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_2);
 80034d0:	2204      	movs	r2, #4
 80034d2:	4912      	ldr	r1, [pc, #72]	; (800351c <motorCommand_Init+0xac>)
 80034d4:	480f      	ldr	r0, [pc, #60]	; (8003514 <motorCommand_Init+0xa4>)
 80034d6:	f006 f875 	bl	80095c4 <HAL_TIM_PWM_ConfigChannel>

	 // CHANGEMENT DU RAPPORT CYCLIQUE
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, 100);	// 100 : moteurs au repos
 80034da:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <motorCommand_Init+0xa4>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2264      	movs	r2, #100	; 0x64
 80034e0:	635a      	str	r2, [r3, #52]	; 0x34
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, 100);
 80034e2:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <motorCommand_Init+0xa4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2264      	movs	r2, #100	; 0x64
 80034e8:	639a      	str	r2, [r3, #56]	; 0x38

	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_1);	// MOTOR RIGHT
 80034ea:	2100      	movs	r1, #0
 80034ec:	4809      	ldr	r0, [pc, #36]	; (8003514 <motorCommand_Init+0xa4>)
 80034ee:	f005 fd73 	bl	8008fd8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_2); // MOTOR LEFT
 80034f2:	2104      	movs	r1, #4
 80034f4:	4807      	ldr	r0, [pc, #28]	; (8003514 <motorCommand_Init+0xa4>)
 80034f6:	f005 fd6f 	bl	8008fd8 <HAL_TIM_PWM_Start>

	  // ENABLE MOTEUR (SI INVERSEUR)
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80034fa:	2200      	movs	r2, #0
 80034fc:	2108      	movs	r1, #8
 80034fe:	4808      	ldr	r0, [pc, #32]	; (8003520 <motorCommand_Init+0xb0>)
 8003500:	f002 fb6a 	bl	8005bd8 <HAL_GPIO_WritePin>
}
 8003504:	bf00      	nop
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20000008 	.word	0x20000008
 8003510:	6b5fca6b 	.word	0x6b5fca6b
 8003514:	20004f30 	.word	0x20004f30
 8003518:	40000400 	.word	0x40000400
 800351c:	20004f78 	.word	0x20004f78
 8003520:	40020400 	.word	0x40020400

08003524 <motorLeft_SetDuty>:

//=================================================================
//			SET DUTY CYCLE LEFT
//=================================================================
void motorLeft_SetDuty(int duty)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, duty);
 800352c:	4b04      	ldr	r3, [pc, #16]	; (8003540 <motorLeft_SetDuty+0x1c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	20004f30 	.word	0x20004f30

08003544 <motorRight_SetDuty>:
//=================================================================
//			SET DUTY CYCLE RIGHT
//=================================================================
void motorRight_SetDuty(int duty)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, duty);
 800354c:	4b04      	ldr	r3, [pc, #16]	; (8003560 <motorRight_SetDuty+0x1c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	20004f30 	.word	0x20004f30

08003564 <quadEncoder_Init>:
//================================================================
//		TIMER INIT
//================================================================

void quadEncoder_Init(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08a      	sub	sp, #40	; 0x28
 8003568:	af00      	add	r7, sp, #0
	TIM_Encoder_InitTypeDef sConfig;
	//--------------------------------------------------
	// TIMER 1
	//--------------------------------------------------
	TimEncoderHandleLeft.Instance = TIM1;
 800356a:	4b35      	ldr	r3, [pc, #212]	; (8003640 <quadEncoder_Init+0xdc>)
 800356c:	4a35      	ldr	r2, [pc, #212]	; (8003644 <quadEncoder_Init+0xe0>)
 800356e:	601a      	str	r2, [r3, #0]
	TimEncoderHandleLeft.Init.Prescaler = 0;
 8003570:	4b33      	ldr	r3, [pc, #204]	; (8003640 <quadEncoder_Init+0xdc>)
 8003572:	2200      	movs	r2, #0
 8003574:	605a      	str	r2, [r3, #4]
	TimEncoderHandleLeft.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003576:	4b32      	ldr	r3, [pc, #200]	; (8003640 <quadEncoder_Init+0xdc>)
 8003578:	2200      	movs	r2, #0
 800357a:	609a      	str	r2, [r3, #8]
	TimEncoderHandleLeft.Init.Period = COUNT_PER_ROUND*4;
 800357c:	4b30      	ldr	r3, [pc, #192]	; (8003640 <quadEncoder_Init+0xdc>)
 800357e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003582:	60da      	str	r2, [r3, #12]
	TimEncoderHandleLeft.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003584:	4b2e      	ldr	r3, [pc, #184]	; (8003640 <quadEncoder_Init+0xdc>)
 8003586:	2200      	movs	r2, #0
 8003588:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800358a:	2303      	movs	r3, #3
 800358c:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800358e:	2300      	movs	r3, #0
 8003590:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003592:	2301      	movs	r3, #1
 8003594:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8003596:	2308      	movs	r3, #8
 8003598:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 800359a:	230f      	movs	r3, #15
 800359c:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800359e:	2300      	movs	r3, #0
 80035a0:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 80035a2:	2301      	movs	r3, #1
 80035a4:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 80035a6:	2308      	movs	r3, #8
 80035a8:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 80035aa:	230f      	movs	r3, #15
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleLeft, &sConfig);
 80035ae:	1d3b      	adds	r3, r7, #4
 80035b0:	4619      	mov	r1, r3
 80035b2:	4823      	ldr	r0, [pc, #140]	; (8003640 <quadEncoder_Init+0xdc>)
 80035b4:	f005 fdc0 	bl	8009138 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);
 80035b8:	4b21      	ldr	r3, [pc, #132]	; (8003640 <quadEncoder_Init+0xdc>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2200      	movs	r2, #0
 80035be:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 80035c0:	2100      	movs	r1, #0
 80035c2:	481f      	ldr	r0, [pc, #124]	; (8003640 <quadEncoder_Init+0xdc>)
 80035c4:	f005 fe68 	bl	8009298 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 80035c8:	2104      	movs	r1, #4
 80035ca:	481d      	ldr	r0, [pc, #116]	; (8003640 <quadEncoder_Init+0xdc>)
 80035cc:	f005 fe64 	bl	8009298 <HAL_TIM_Encoder_Start>

	//--------------------------------------------------
	// TIMER 2
	//--------------------------------------------------
	TimEncoderHandleRight.Instance = TIM2;
 80035d0:	4b1d      	ldr	r3, [pc, #116]	; (8003648 <quadEncoder_Init+0xe4>)
 80035d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035d6:	601a      	str	r2, [r3, #0]
	TimEncoderHandleRight.Init.Prescaler = 0;
 80035d8:	4b1b      	ldr	r3, [pc, #108]	; (8003648 <quadEncoder_Init+0xe4>)
 80035da:	2200      	movs	r2, #0
 80035dc:	605a      	str	r2, [r3, #4]
	TimEncoderHandleRight.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035de:	4b1a      	ldr	r3, [pc, #104]	; (8003648 <quadEncoder_Init+0xe4>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	609a      	str	r2, [r3, #8]
	TimEncoderHandleRight.Init.Period = COUNT_PER_ROUND*4;
 80035e4:	4b18      	ldr	r3, [pc, #96]	; (8003648 <quadEncoder_Init+0xe4>)
 80035e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ea:	60da      	str	r2, [r3, #12]
	TimEncoderHandleRight.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035ec:	4b16      	ldr	r3, [pc, #88]	; (8003648 <quadEncoder_Init+0xe4>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80035f2:	2303      	movs	r3, #3
 80035f4:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80035f6:	2300      	movs	r3, #0
 80035f8:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80035fa:	2301      	movs	r3, #1
 80035fc:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 80035fe:	2308      	movs	r3, #8
 8003600:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 8003602:	230f      	movs	r3, #15
 8003604:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003606:	2300      	movs	r3, #0
 8003608:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 800360a:	2301      	movs	r3, #1
 800360c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 800360e:	2308      	movs	r3, #8
 8003610:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 8003612:	230f      	movs	r3, #15
 8003614:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleRight, &sConfig);
 8003616:	1d3b      	adds	r3, r7, #4
 8003618:	4619      	mov	r1, r3
 800361a:	480b      	ldr	r0, [pc, #44]	; (8003648 <quadEncoder_Init+0xe4>)
 800361c:	f005 fd8c 	bl	8009138 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);
 8003620:	4b09      	ldr	r3, [pc, #36]	; (8003648 <quadEncoder_Init+0xe4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2200      	movs	r2, #0
 8003626:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 8003628:	2100      	movs	r1, #0
 800362a:	4807      	ldr	r0, [pc, #28]	; (8003648 <quadEncoder_Init+0xe4>)
 800362c:	f005 fe34 	bl	8009298 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 8003630:	2104      	movs	r1, #4
 8003632:	4805      	ldr	r0, [pc, #20]	; (8003648 <quadEncoder_Init+0xe4>)
 8003634:	f005 fe30 	bl	8009298 <HAL_TIM_Encoder_Start>
}
 8003638:	bf00      	nop
 800363a:	3728      	adds	r7, #40	; 0x28
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20004f94 	.word	0x20004f94
 8003644:	40010000 	.word	0x40010000
 8003648:	20004fdc 	.word	0x20004fdc

0800364c <quadEncoder_PosCalcL>:
//================================================================
//		POSITION LEFT CALC
//================================================================

void quadEncoder_PosCalcL(int* AngPos)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]

int POSCNTcopy = 0;
 8003654:	2300      	movs	r3, #0
 8003656:	60fb      	str	r3, [r7, #12]
POSCNTcopy = (int)TIM1->CNT;
 8003658:	4b0c      	ldr	r3, [pc, #48]	; (800368c <quadEncoder_PosCalcL+0x40>)
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	60fb      	str	r3, [r7, #12]
AngPos[1] = AngPos[0];
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3304      	adds	r3, #4
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6812      	ldr	r2, [r2, #0]
 8003666:	601a      	str	r2, [r3, #0]
AngPos[0] = (unsigned int)(((unsigned long)POSCNTcopy * COEFF)/1000); // 0 <= POSCNT <= 4999 to 0 <= AngPos <= 32767
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f641 129b 	movw	r2, #6555	; 0x199b
 800366e:	fb02 f303 	mul.w	r3, r2, r3
 8003672:	4a07      	ldr	r2, [pc, #28]	; (8003690 <quadEncoder_PosCalcL+0x44>)
 8003674:	fba2 2303 	umull	r2, r3, r2, r3
 8003678:	099b      	lsrs	r3, r3, #6
 800367a:	461a      	mov	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	601a      	str	r2, [r3, #0]
}
 8003680:	bf00      	nop
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	40010000 	.word	0x40010000
 8003690:	10624dd3 	.word	0x10624dd3

08003694 <quadEncoder_PosCalcR>:
//================================================================
//		POSITION RIGHT CALC
//================================================================

void quadEncoder_PosCalcR(int* AngPos)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]

int POSCNTcopy = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]
POSCNTcopy = (int)TIM2->CNT;
 80036a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	60fb      	str	r3, [r7, #12]
AngPos[1] = AngPos[0];
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3304      	adds	r3, #4
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	601a      	str	r2, [r3, #0]
AngPos[0] = (unsigned int)(((unsigned long)POSCNTcopy * COEFF)/1000); // 0 <= POSCNT <= 4999 to 0 <= AngPos <= 32767
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f641 129b 	movw	r2, #6555	; 0x199b
 80036b8:	fb02 f303 	mul.w	r3, r2, r3
 80036bc:	4a06      	ldr	r2, [pc, #24]	; (80036d8 <quadEncoder_PosCalcR+0x44>)
 80036be:	fba2 2303 	umull	r2, r3, r2, r3
 80036c2:	099b      	lsrs	r3, r3, #6
 80036c4:	461a      	mov	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	601a      	str	r2, [r3, #0]
}
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	10624dd3 	.word	0x10624dd3

080036dc <quadEncoder_GetSpeedL>:
//		SPEED LEFT
//--> must be called every Te
//================================================================

int16_t quadEncoder_GetSpeedL(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
	static int AngPos[2] = {0,0};
	static int16_t SpeedL=0;

	quadEncoder_PosCalcL(AngPos);
 80036e0:	4824      	ldr	r0, [pc, #144]	; (8003774 <quadEncoder_GetSpeedL+0x98>)
 80036e2:	f7ff ffb3 	bl	800364c <quadEncoder_PosCalcL>
	SpeedL = AngPos[0] - AngPos[1];
 80036e6:	4b23      	ldr	r3, [pc, #140]	; (8003774 <quadEncoder_GetSpeedL+0x98>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	4b21      	ldr	r3, [pc, #132]	; (8003774 <quadEncoder_GetSpeedL+0x98>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	b21a      	sxth	r2, r3
 80036f8:	4b1f      	ldr	r3, [pc, #124]	; (8003778 <quadEncoder_GetSpeedL+0x9c>)
 80036fa:	801a      	strh	r2, [r3, #0]
	if (SpeedL >= 0)
 80036fc:	4b1e      	ldr	r3, [pc, #120]	; (8003778 <quadEncoder_GetSpeedL+0x9c>)
 80036fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003702:	2b00      	cmp	r3, #0
 8003704:	db10      	blt.n	8003728 <quadEncoder_GetSpeedL+0x4c>
	{
		if (SpeedL >= HALF_MAX_COUNT)
 8003706:	4b1c      	ldr	r3, [pc, #112]	; (8003778 <quadEncoder_GetSpeedL+0x9c>)
 8003708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800370c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003710:	db1a      	blt.n	8003748 <quadEncoder_GetSpeedL+0x6c>
			{
			SpeedL = SpeedL - MAX_COUNT;
 8003712:	4b19      	ldr	r3, [pc, #100]	; (8003778 <quadEncoder_GetSpeedL+0x9c>)
 8003714:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003718:	b29b      	uxth	r3, r3
 800371a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800371e:	b29b      	uxth	r3, r3
 8003720:	b21a      	sxth	r2, r3
 8003722:	4b15      	ldr	r3, [pc, #84]	; (8003778 <quadEncoder_GetSpeedL+0x9c>)
 8003724:	801a      	strh	r2, [r3, #0]
 8003726:	e00f      	b.n	8003748 <quadEncoder_GetSpeedL+0x6c>
			}
	}
	else
	{
		if (SpeedL < -HALF_MAX_COUNT)
 8003728:	4b13      	ldr	r3, [pc, #76]	; (8003778 <quadEncoder_GetSpeedL+0x9c>)
 800372a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800372e:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8003732:	da09      	bge.n	8003748 <quadEncoder_GetSpeedL+0x6c>
			{
			SpeedL = SpeedL + MAX_COUNT;
 8003734:	4b10      	ldr	r3, [pc, #64]	; (8003778 <quadEncoder_GetSpeedL+0x9c>)
 8003736:	f9b3 3000 	ldrsh.w	r3, [r3]
 800373a:	b29b      	uxth	r3, r3
 800373c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003740:	b29b      	uxth	r3, r3
 8003742:	b21a      	sxth	r2, r3
 8003744:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <quadEncoder_GetSpeedL+0x9c>)
 8003746:	801a      	strh	r2, [r3, #0]
	// 1 tour = 32767
	// Nbre de Tours pendant Te: DELTA_pos/32767
	// Nbre de Tours pendant 1s (Te en ms) : (DELTA_pos/32767)*(1000/Te)
	// Nbre de Tours par minute : : (DELTA_pos/32767)*((60*1000)/Te)

	SpeedL=(SpeedL*60*1000)/(32767*TE_ms);
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <quadEncoder_GetSpeedL+0x9c>)
 800374a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800374e:	461a      	mov	r2, r3
 8003750:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003754:	fb02 f303 	mul.w	r3, r2, r3
 8003758:	4a08      	ldr	r2, [pc, #32]	; (800377c <quadEncoder_GetSpeedL+0xa0>)
 800375a:	fb82 1203 	smull	r1, r2, r2, r3
 800375e:	1412      	asrs	r2, r2, #16
 8003760:	17db      	asrs	r3, r3, #31
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	b21a      	sxth	r2, r3
 8003766:	4b04      	ldr	r3, [pc, #16]	; (8003778 <quadEncoder_GetSpeedL+0x9c>)
 8003768:	801a      	strh	r2, [r3, #0]
	return SpeedL;
 800376a:	4b03      	ldr	r3, [pc, #12]	; (8003778 <quadEncoder_GetSpeedL+0x9c>)
 800376c:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003770:	4618      	mov	r0, r3
 8003772:	bd80      	pop	{r7, pc}
 8003774:	2000502c 	.word	0x2000502c
 8003778:	20005034 	.word	0x20005034
 800377c:	66673335 	.word	0x66673335

08003780 <quadEncoder_GetSpeedR>:
//		SPEED RIGHT
//-->  must be called every Te
//================================================================

int16_t quadEncoder_GetSpeedR(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
	static int AngPos[2] = {0,0};
	static int16_t SpeedR=0;


	quadEncoder_PosCalcR(AngPos);
 8003784:	4824      	ldr	r0, [pc, #144]	; (8003818 <quadEncoder_GetSpeedR+0x98>)
 8003786:	f7ff ff85 	bl	8003694 <quadEncoder_PosCalcR>
	SpeedR = AngPos[0] - AngPos[1];
 800378a:	4b23      	ldr	r3, [pc, #140]	; (8003818 <quadEncoder_GetSpeedR+0x98>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	b29a      	uxth	r2, r3
 8003790:	4b21      	ldr	r3, [pc, #132]	; (8003818 <quadEncoder_GetSpeedR+0x98>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	b29b      	uxth	r3, r3
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	b29b      	uxth	r3, r3
 800379a:	b21a      	sxth	r2, r3
 800379c:	4b1f      	ldr	r3, [pc, #124]	; (800381c <quadEncoder_GetSpeedR+0x9c>)
 800379e:	801a      	strh	r2, [r3, #0]
	if (SpeedR >= 0)
 80037a0:	4b1e      	ldr	r3, [pc, #120]	; (800381c <quadEncoder_GetSpeedR+0x9c>)
 80037a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	db10      	blt.n	80037cc <quadEncoder_GetSpeedR+0x4c>
	{
		if (SpeedR >= HALF_MAX_COUNT)
 80037aa:	4b1c      	ldr	r3, [pc, #112]	; (800381c <quadEncoder_GetSpeedR+0x9c>)
 80037ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037b4:	db1a      	blt.n	80037ec <quadEncoder_GetSpeedR+0x6c>
			{
			SpeedR = SpeedR - MAX_COUNT;
 80037b6:	4b19      	ldr	r3, [pc, #100]	; (800381c <quadEncoder_GetSpeedR+0x9c>)
 80037b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037bc:	b29b      	uxth	r3, r3
 80037be:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	b21a      	sxth	r2, r3
 80037c6:	4b15      	ldr	r3, [pc, #84]	; (800381c <quadEncoder_GetSpeedR+0x9c>)
 80037c8:	801a      	strh	r2, [r3, #0]
 80037ca:	e00f      	b.n	80037ec <quadEncoder_GetSpeedR+0x6c>
			}
	}
	else
	{
		if (SpeedR < -HALF_MAX_COUNT)
 80037cc:	4b13      	ldr	r3, [pc, #76]	; (800381c <quadEncoder_GetSpeedR+0x9c>)
 80037ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037d2:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 80037d6:	da09      	bge.n	80037ec <quadEncoder_GetSpeedR+0x6c>
			{
			SpeedR = SpeedR + MAX_COUNT;
 80037d8:	4b10      	ldr	r3, [pc, #64]	; (800381c <quadEncoder_GetSpeedR+0x9c>)
 80037da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037de:	b29b      	uxth	r3, r3
 80037e0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	b21a      	sxth	r2, r3
 80037e8:	4b0c      	ldr	r3, [pc, #48]	; (800381c <quadEncoder_GetSpeedR+0x9c>)
 80037ea:	801a      	strh	r2, [r3, #0]
	// 1 tour = 32767
	// Nbre de Tours pendant Te: DELTA_pos/32767
	// Nbre de Tours pendant 1s (Te en ms) : (DELTA_pos/32767)*(1000/Te)
	// Nbre de Tours par minute : : (DELTA_pos/32767)*((60*1000)/Te)

	SpeedR=(SpeedR*60*1000)/(32767*TE_ms);
 80037ec:	4b0b      	ldr	r3, [pc, #44]	; (800381c <quadEncoder_GetSpeedR+0x9c>)
 80037ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037f2:	461a      	mov	r2, r3
 80037f4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80037f8:	fb02 f303 	mul.w	r3, r2, r3
 80037fc:	4a08      	ldr	r2, [pc, #32]	; (8003820 <quadEncoder_GetSpeedR+0xa0>)
 80037fe:	fb82 1203 	smull	r1, r2, r2, r3
 8003802:	1412      	asrs	r2, r2, #16
 8003804:	17db      	asrs	r3, r3, #31
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	b21a      	sxth	r2, r3
 800380a:	4b04      	ldr	r3, [pc, #16]	; (800381c <quadEncoder_GetSpeedR+0x9c>)
 800380c:	801a      	strh	r2, [r3, #0]
	return SpeedR;
 800380e:	4b03      	ldr	r3, [pc, #12]	; (800381c <quadEncoder_GetSpeedR+0x9c>)
 8003810:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003814:	4618      	mov	r0, r3
 8003816:	bd80      	pop	{r7, pc}
 8003818:	20005038 	.word	0x20005038
 800381c:	20005040 	.word	0x20005040
 8003820:	66673335 	.word	0x66673335

08003824 <quadEncoder_CallbackIndexL>:
//================================================================
//		MAJ index Left
//================================================================

void quadEncoder_CallbackIndexL()
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleLeft)==1)
 8003828:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <quadEncoder_CallbackIndexL+0x44>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0310 	and.w	r3, r3, #16
 8003832:	2b10      	cmp	r3, #16
 8003834:	d105      	bne.n	8003842 <quadEncoder_CallbackIndexL+0x1e>
				{
					indexL--;
 8003836:	4b0d      	ldr	r3, [pc, #52]	; (800386c <quadEncoder_CallbackIndexL+0x48>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3b01      	subs	r3, #1
 800383c:	4a0b      	ldr	r2, [pc, #44]	; (800386c <quadEncoder_CallbackIndexL+0x48>)
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	e004      	b.n	800384c <quadEncoder_CallbackIndexL+0x28>
				}
				else
				{
					indexL++;
 8003842:	4b0a      	ldr	r3, [pc, #40]	; (800386c <quadEncoder_CallbackIndexL+0x48>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	3301      	adds	r3, #1
 8003848:	4a08      	ldr	r2, [pc, #32]	; (800386c <quadEncoder_CallbackIndexL+0x48>)
 800384a:	6013      	str	r3, [r2, #0]
				}


				__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);		// RAZ Counter
 800384c:	4b06      	ldr	r3, [pc, #24]	; (8003868 <quadEncoder_CallbackIndexL+0x44>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2200      	movs	r2, #0
 8003852:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 8003854:	2100      	movs	r1, #0
 8003856:	4804      	ldr	r0, [pc, #16]	; (8003868 <quadEncoder_CallbackIndexL+0x44>)
 8003858:	f005 fd1e 	bl	8009298 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 800385c:	2104      	movs	r1, #4
 800385e:	4802      	ldr	r0, [pc, #8]	; (8003868 <quadEncoder_CallbackIndexL+0x44>)
 8003860:	f005 fd1a 	bl	8009298 <HAL_TIM_Encoder_Start>

}
 8003864:	bf00      	nop
 8003866:	bd80      	pop	{r7, pc}
 8003868:	20004f94 	.word	0x20004f94
 800386c:	20005024 	.word	0x20005024

08003870 <quadEncoder_CallbackIndexR>:
//================================================================
//		MAJ index Right
//================================================================

void quadEncoder_CallbackIndexR()
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleRight)==1)
 8003874:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <quadEncoder_CallbackIndexR+0x44>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	2b10      	cmp	r3, #16
 8003880:	d105      	bne.n	800388e <quadEncoder_CallbackIndexR+0x1e>
				{
					indexR--;
 8003882:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <quadEncoder_CallbackIndexR+0x48>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3b01      	subs	r3, #1
 8003888:	4a0b      	ldr	r2, [pc, #44]	; (80038b8 <quadEncoder_CallbackIndexR+0x48>)
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	e004      	b.n	8003898 <quadEncoder_CallbackIndexR+0x28>

				}
				else
				{
					indexR++;
 800388e:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <quadEncoder_CallbackIndexR+0x48>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3301      	adds	r3, #1
 8003894:	4a08      	ldr	r2, [pc, #32]	; (80038b8 <quadEncoder_CallbackIndexR+0x48>)
 8003896:	6013      	str	r3, [r2, #0]
				}

				__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);			// RAZ Counter
 8003898:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <quadEncoder_CallbackIndexR+0x44>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2200      	movs	r2, #0
 800389e:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 80038a0:	2100      	movs	r1, #0
 80038a2:	4804      	ldr	r0, [pc, #16]	; (80038b4 <quadEncoder_CallbackIndexR+0x44>)
 80038a4:	f005 fcf8 	bl	8009298 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 80038a8:	2104      	movs	r1, #4
 80038aa:	4802      	ldr	r0, [pc, #8]	; (80038b4 <quadEncoder_CallbackIndexR+0x44>)
 80038ac:	f005 fcf4 	bl	8009298 <HAL_TIM_Encoder_Start>

}
 80038b0:	bf00      	nop
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	20004fdc 	.word	0x20004fdc
 80038b8:	20005028 	.word	0x20005028

080038bc <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80038c4:	4a07      	ldr	r2, [pc, #28]	; (80038e4 <RetargetInit+0x28>)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80038ca:	4b07      	ldr	r3, [pc, #28]	; (80038e8 <RetargetInit+0x2c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6898      	ldr	r0, [r3, #8]
 80038d0:	2300      	movs	r3, #0
 80038d2:	2202      	movs	r2, #2
 80038d4:	2100      	movs	r1, #0
 80038d6:	f014 f93b 	bl	8017b50 <setvbuf>
}
 80038da:	bf00      	nop
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20005044 	.word	0x20005044
 80038e8:	200000dc 	.word	0x200000dc

080038ec <_isatty>:

int _isatty(int fd) {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	db04      	blt.n	8003904 <_isatty+0x18>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	dc01      	bgt.n	8003904 <_isatty+0x18>
    return 1;
 8003900:	2301      	movs	r3, #1
 8003902:	e005      	b.n	8003910 <_isatty+0x24>

  errno = EBADF;
 8003904:	f014 fc22 	bl	801814c <__errno>
 8003908:	4603      	mov	r3, r0
 800390a:	2209      	movs	r2, #9
 800390c:	601a      	str	r2, [r3, #0]
  return 0;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <_write>:

int _write(int fd, char* ptr, int len) {
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d002      	beq.n	8003930 <_write+0x18>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2b02      	cmp	r3, #2
 800392e:	d111      	bne.n	8003954 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8003930:	4b0e      	ldr	r3, [pc, #56]	; (800396c <_write+0x54>)
 8003932:	6818      	ldr	r0, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	b29a      	uxth	r2, r3
 8003938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800393c:	68b9      	ldr	r1, [r7, #8]
 800393e:	f006 f9bd 	bl	8009cbc <HAL_UART_Transmit>
 8003942:	4603      	mov	r3, r0
 8003944:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003946:	7dfb      	ldrb	r3, [r7, #23]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <_write+0x38>
      return len;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	e008      	b.n	8003962 <_write+0x4a>
    else
      return EIO;
 8003950:	2305      	movs	r3, #5
 8003952:	e006      	b.n	8003962 <_write+0x4a>
  }
  errno = EBADF;
 8003954:	f014 fbfa 	bl	801814c <__errno>
 8003958:	4603      	mov	r3, r0
 800395a:	2209      	movs	r2, #9
 800395c:	601a      	str	r2, [r3, #0]
  return -1;
 800395e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003962:	4618      	mov	r0, r3
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20005044 	.word	0x20005044

08003970 <_close>:

int _close(int fd) {
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	db04      	blt.n	8003988 <_close+0x18>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b02      	cmp	r3, #2
 8003982:	dc01      	bgt.n	8003988 <_close+0x18>
    return 0;
 8003984:	2300      	movs	r3, #0
 8003986:	e006      	b.n	8003996 <_close+0x26>

  errno = EBADF;
 8003988:	f014 fbe0 	bl	801814c <__errno>
 800398c:	4603      	mov	r3, r0
 800398e:	2209      	movs	r2, #9
 8003990:	601a      	str	r2, [r3, #0]
  return -1;
 8003992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800399e:	b580      	push	{r7, lr}
 80039a0:	b084      	sub	sp, #16
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	60f8      	str	r0, [r7, #12]
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80039aa:	f014 fbcf 	bl	801814c <__errno>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2209      	movs	r2, #9
 80039b2:	601a      	str	r2, [r3, #0]
  return -1;
 80039b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <_read>:

int _read(int fd, char* ptr, int len) {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d110      	bne.n	80039f4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80039d2:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <_read+0x4c>)
 80039d4:	6818      	ldr	r0, [r3, #0]
 80039d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039da:	2201      	movs	r2, #1
 80039dc:	68b9      	ldr	r1, [r7, #8]
 80039de:	f006 f9ff 	bl	8009de0 <HAL_UART_Receive>
 80039e2:	4603      	mov	r3, r0
 80039e4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80039e6:	7dfb      	ldrb	r3, [r7, #23]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <_read+0x30>
      return 1;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e008      	b.n	8003a02 <_read+0x42>
    else
      return EIO;
 80039f0:	2305      	movs	r3, #5
 80039f2:	e006      	b.n	8003a02 <_read+0x42>
  }
  errno = EBADF;
 80039f4:	f014 fbaa 	bl	801814c <__errno>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2209      	movs	r2, #9
 80039fc:	601a      	str	r2, [r3, #0]
  return -1;
 80039fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20005044 	.word	0x20005044

08003a10 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	db08      	blt.n	8003a32 <_fstat+0x22>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	dc05      	bgt.n	8003a32 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a2c:	605a      	str	r2, [r3, #4]
    return 0;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	e005      	b.n	8003a3e <_fstat+0x2e>
  }

  errno = EBADF;
 8003a32:	f014 fb8b 	bl	801814c <__errno>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2209      	movs	r2, #9
 8003a3a:	601a      	str	r2, [r3, #0]
  return 0;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <_getpid>:

int _getpid(void)
{
 8003a46:	b480      	push	{r7}
 8003a48:	af00      	add	r7, sp, #0
	return 1;
 8003a4a:	2301      	movs	r3, #1
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <_kill>:

int _kill(int pid, int sig)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003a60:	f014 fb74 	bl	801814c <__errno>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2216      	movs	r2, #22
 8003a68:	601a      	str	r2, [r3, #0]
	return -1;
 8003a6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <HAL_MspInit>:
void HAL_Encoder_Timer1_MspInit(void);
void HAL_Encoder_Timer2_MspInit(void);
void HAL_adcir_MspInit(void);

void HAL_MspInit(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a7e:	2300      	movs	r3, #0
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	4b33      	ldr	r3, [pc, #204]	; (8003b50 <HAL_MspInit+0xd8>)
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	4a32      	ldr	r2, [pc, #200]	; (8003b50 <HAL_MspInit+0xd8>)
 8003a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a8e:	4b30      	ldr	r3, [pc, #192]	; (8003b50 <HAL_MspInit+0xd8>)
 8003a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	4b2c      	ldr	r3, [pc, #176]	; (8003b50 <HAL_MspInit+0xd8>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	4a2b      	ldr	r2, [pc, #172]	; (8003b50 <HAL_MspInit+0xd8>)
 8003aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8003aaa:	4b29      	ldr	r3, [pc, #164]	; (8003b50 <HAL_MspInit+0xd8>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	613b      	str	r3, [r7, #16]
 8003ab4:	693b      	ldr	r3, [r7, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	4b25      	ldr	r3, [pc, #148]	; (8003b50 <HAL_MspInit+0xd8>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	4a24      	ldr	r2, [pc, #144]	; (8003b50 <HAL_MspInit+0xd8>)
 8003ac0:	f043 0304 	orr.w	r3, r3, #4
 8003ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ac6:	4b22      	ldr	r3, [pc, #136]	; (8003b50 <HAL_MspInit+0xd8>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60bb      	str	r3, [r7, #8]
 8003ad6:	4b1e      	ldr	r3, [pc, #120]	; (8003b50 <HAL_MspInit+0xd8>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	4a1d      	ldr	r2, [pc, #116]	; (8003b50 <HAL_MspInit+0xd8>)
 8003adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ae2:	4b1b      	ldr	r3, [pc, #108]	; (8003b50 <HAL_MspInit+0xd8>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aea:	60bb      	str	r3, [r7, #8]
 8003aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aee:	2300      	movs	r3, #0
 8003af0:	607b      	str	r3, [r7, #4]
 8003af2:	4b17      	ldr	r3, [pc, #92]	; (8003b50 <HAL_MspInit+0xd8>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	4a16      	ldr	r2, [pc, #88]	; (8003b50 <HAL_MspInit+0xd8>)
 8003af8:	f043 0301 	orr.w	r3, r3, #1
 8003afc:	6313      	str	r3, [r2, #48]	; 0x30
 8003afe:	4b14      	ldr	r3, [pc, #80]	; (8003b50 <HAL_MspInit+0xd8>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	607b      	str	r3, [r7, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	603b      	str	r3, [r7, #0]
 8003b0e:	4b10      	ldr	r3, [pc, #64]	; (8003b50 <HAL_MspInit+0xd8>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	4a0f      	ldr	r2, [pc, #60]	; (8003b50 <HAL_MspInit+0xd8>)
 8003b14:	f043 0302 	orr.w	r3, r3, #2
 8003b18:	6313      	str	r3, [r2, #48]	; 0x30
 8003b1a:	4b0d      	ldr	r3, [pc, #52]	; (8003b50 <HAL_MspInit+0xd8>)
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	603b      	str	r3, [r7, #0]
 8003b24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003b26:	2200      	movs	r2, #0
 8003b28:	210f      	movs	r1, #15
 8003b2a:	f06f 0001 	mvn.w	r0, #1
 8003b2e:	f001 fa95 	bl	800505c <HAL_NVIC_SetPriority>

  HAL_PWM_Timer3_MspInit();
 8003b32:	f000 f8a3 	bl	8003c7c <HAL_PWM_Timer3_MspInit>
  HAL_Encoder_Timer1_MspInit();
 8003b36:	f000 f823 	bl	8003b80 <HAL_Encoder_Timer1_MspInit>
  HAL_Encoder_Timer2_MspInit();
 8003b3a:	f000 f861 	bl	8003c00 <HAL_Encoder_Timer2_MspInit>
  HAL_adcir_MspInit();
 8003b3e:	f000 f8fb 	bl	8003d38 <HAL_adcir_MspInit>
  HAL_GPIO_MspInit();
 8003b42:	f000 f807 	bl	8003b54 <HAL_GPIO_MspInit>

}
 8003b46:	bf00      	nop
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40023800 	.word	0x40023800

08003b54 <HAL_GPIO_MspInit>:
/******************************************************************
			GPIO : contrôle période d'échantillonage
GPIO OUTPUT	-->	PB4
******************************************************************/
void HAL_GPIO_MspInit(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003b5a:	2310      	movs	r3, #16
 8003b5c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // hal_gpio.h
 8003b5e:	2301      	movs	r3, #1
 8003b60:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b62:	2300      	movs	r3, #0
 8003b64:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003b66:	2301      	movs	r3, #1
 8003b68:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b6a:	1d3b      	adds	r3, r7, #4
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4803      	ldr	r0, [pc, #12]	; (8003b7c <HAL_GPIO_MspInit+0x28>)
 8003b70:	f001 feae 	bl	80058d0 <HAL_GPIO_Init>

}
 8003b74:	bf00      	nop
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40020400 	.word	0x40020400

08003b80 <HAL_Encoder_Timer1_MspInit>:
PWM1/1	-->	PA8		-- Encodeur Voie A
PWM1/2	--> PA9		-- Encodeur Voie B
EXTI1	--> PB10		-- Index encodeur
******************************************************************/
void HAL_Encoder_Timer1_MspInit(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM1_CLK_ENABLE();
 8003b86:	2300      	movs	r3, #0
 8003b88:	603b      	str	r3, [r7, #0]
 8003b8a:	4b1a      	ldr	r3, [pc, #104]	; (8003bf4 <HAL_Encoder_Timer1_MspInit+0x74>)
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	4a19      	ldr	r2, [pc, #100]	; (8003bf4 <HAL_Encoder_Timer1_MspInit+0x74>)
 8003b90:	f043 0301 	orr.w	r3, r3, #1
 8003b94:	6453      	str	r3, [r2, #68]	; 0x44
 8003b96:	4b17      	ldr	r3, [pc, #92]	; (8003bf4 <HAL_Encoder_Timer1_MspInit+0x74>)
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8003ba2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003ba6:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 8003ba8:	2302      	movs	r3, #2
 8003baa:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bac:	2301      	movs	r3, #1
 8003bae:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM1 ; // hal_gpio_ex.h
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bb8:	1d3b      	adds	r3, r7, #4
 8003bba:	4619      	mov	r1, r3
 8003bbc:	480e      	ldr	r0, [pc, #56]	; (8003bf8 <HAL_Encoder_Timer1_MspInit+0x78>)
 8003bbe:	f001 fe87 	bl	80058d0 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bc6:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003bc8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003bcc:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bd2:	1d3b      	adds	r3, r7, #4
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4809      	ldr	r0, [pc, #36]	; (8003bfc <HAL_Encoder_Timer1_MspInit+0x7c>)
 8003bd8:	f001 fe7a 	bl	80058d0 <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, EXTI15_10_IRQ_PRIO, 0);
 8003bdc:	2200      	movs	r2, #0
 8003bde:	2107      	movs	r1, #7
 8003be0:	2028      	movs	r0, #40	; 0x28
 8003be2:	f001 fa3b 	bl	800505c <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003be6:	2028      	movs	r0, #40	; 0x28
 8003be8:	f001 fa54 	bl	8005094 <HAL_NVIC_EnableIRQ>
}
 8003bec:	bf00      	nop
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	40020000 	.word	0x40020000
 8003bfc:	40020400 	.word	0x40020400

08003c00 <HAL_Encoder_Timer2_MspInit>:
PWM2/1	-->	PA0		-- Encodeur Voie A
PWM2/2	--> PA1		-- Encodeur Voie B
EXTI 	--> PC0		-- Index Moteur
******************************************************************/
void HAL_Encoder_Timer2_MspInit(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM2_CLK_ENABLE();
 8003c06:	2300      	movs	r3, #0
 8003c08:	603b      	str	r3, [r7, #0]
 8003c0a:	4b19      	ldr	r3, [pc, #100]	; (8003c70 <HAL_Encoder_Timer2_MspInit+0x70>)
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	4a18      	ldr	r2, [pc, #96]	; (8003c70 <HAL_Encoder_Timer2_MspInit+0x70>)
 8003c10:	f043 0301 	orr.w	r3, r3, #1
 8003c14:	6413      	str	r3, [r2, #64]	; 0x40
 8003c16:	4b16      	ldr	r3, [pc, #88]	; (8003c70 <HAL_Encoder_Timer2_MspInit+0x70>)
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003c22:	2303      	movs	r3, #3
 8003c24:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 8003c26:	2302      	movs	r3, #2
 8003c28:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM2 ; // hal_gpio_ex.h
 8003c32:	2301      	movs	r3, #1
 8003c34:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c36:	1d3b      	adds	r3, r7, #4
 8003c38:	4619      	mov	r1, r3
 8003c3a:	480e      	ldr	r0, [pc, #56]	; (8003c74 <HAL_Encoder_Timer2_MspInit+0x74>)
 8003c3c:	f001 fe48 	bl	80058d0 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003c40:	2301      	movs	r3, #1
 8003c42:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003c44:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003c48:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c4e:	1d3b      	adds	r3, r7, #4
 8003c50:	4619      	mov	r1, r3
 8003c52:	4809      	ldr	r0, [pc, #36]	; (8003c78 <HAL_Encoder_Timer2_MspInit+0x78>)
 8003c54:	f001 fe3c 	bl	80058d0 <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI0_IRQn, EXTI0_IRQ_PRIO, 0);
 8003c58:	2200      	movs	r2, #0
 8003c5a:	2106      	movs	r1, #6
 8003c5c:	2006      	movs	r0, #6
 8003c5e:	f001 f9fd 	bl	800505c <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003c62:	2006      	movs	r0, #6
 8003c64:	f001 fa16 	bl	8005094 <HAL_NVIC_EnableIRQ>
}
 8003c68:	bf00      	nop
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40023800 	.word	0x40023800
 8003c74:	40020000 	.word	0x40020000
 8003c78:	40020800 	.word	0x40020800

08003c7c <HAL_PWM_Timer3_MspInit>:
PA6 --> PWM3/1
PC7 --> PWM3/2
PB3 --> ENABLE MOTEUR (actif état Bas)
******************************************************************/
void HAL_PWM_Timer3_MspInit(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM3_CLK_ENABLE();
 8003c82:	2300      	movs	r3, #0
 8003c84:	603b      	str	r3, [r7, #0]
 8003c86:	4b28      	ldr	r3, [pc, #160]	; (8003d28 <HAL_PWM_Timer3_MspInit+0xac>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	4a27      	ldr	r2, [pc, #156]	; (8003d28 <HAL_PWM_Timer3_MspInit+0xac>)
 8003c8c:	f043 0302 	orr.w	r3, r3, #2
 8003c90:	6413      	str	r3, [r2, #64]	; 0x40
 8003c92:	4b25      	ldr	r3, [pc, #148]	; (8003d28 <HAL_PWM_Timer3_MspInit+0xac>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	603b      	str	r3, [r7, #0]
 8003c9c:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003c9e:	2340      	movs	r3, #64	; 0x40
 8003ca0:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003caa:	2301      	movs	r3, #1
 8003cac:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 8003cae:	2302      	movs	r3, #2
 8003cb0:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cb2:	1d3b      	adds	r3, r7, #4
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	481d      	ldr	r0, [pc, #116]	; (8003d2c <HAL_PWM_Timer3_MspInit+0xb0>)
 8003cb8:	f001 fe0a 	bl	80058d0 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003cbc:	2380      	movs	r3, #128	; 0x80
 8003cbe:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 8003ccc:	2302      	movs	r3, #2
 8003cce:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cd0:	1d3b      	adds	r3, r7, #4
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	4816      	ldr	r0, [pc, #88]	; (8003d30 <HAL_PWM_Timer3_MspInit+0xb4>)
 8003cd6:	f001 fdfb 	bl	80058d0 <HAL_GPIO_Init>

	  // ENABLE MOTEUR : SORTIE LOGIQUE PB3
	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003cda:	2380      	movs	r3, #128	; 0x80
 8003cdc:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ce6:	1d3b      	adds	r3, r7, #4
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4810      	ldr	r0, [pc, #64]	; (8003d2c <HAL_PWM_Timer3_MspInit+0xb0>)
 8003cec:	f001 fdf0 	bl	80058d0 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	2180      	movs	r1, #128	; 0x80
 8003cf4:	480d      	ldr	r0, [pc, #52]	; (8003d2c <HAL_PWM_Timer3_MspInit+0xb0>)
 8003cf6:	f001 ff6f 	bl	8005bd8 <HAL_GPIO_WritePin>

	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003cfa:	2308      	movs	r3, #8
 8003cfc:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d02:	2301      	movs	r3, #1
 8003d04:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8003d06:	2302      	movs	r3, #2
 8003d08:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d0a:	1d3b      	adds	r3, r7, #4
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4809      	ldr	r0, [pc, #36]	; (8003d34 <HAL_PWM_Timer3_MspInit+0xb8>)
 8003d10:	f001 fdde 	bl	80058d0 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8003d14:	2201      	movs	r2, #1
 8003d16:	2108      	movs	r1, #8
 8003d18:	4806      	ldr	r0, [pc, #24]	; (8003d34 <HAL_PWM_Timer3_MspInit+0xb8>)
 8003d1a:	f001 ff5d 	bl	8005bd8 <HAL_GPIO_WritePin>




}
 8003d1e:	bf00      	nop
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	40020000 	.word	0x40020000
 8003d30:	40020800 	.word	0x40020800
 8003d34:	40020400 	.word	0x40020400

08003d38 <HAL_adcir_MspInit>:
ADC1_4	--> PA4
ADC1_8	--> PB0
http://stm32f4-discovery.com/2014/04/library-06-ad-converter-on-stm32f4xx/
******************************************************************/
void HAL_adcir_MspInit(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;
	  /* Peripheral clock enable */
	  __ADC1_CLK_ENABLE();
 8003d3e:	2300      	movs	r3, #0
 8003d40:	603b      	str	r3, [r7, #0]
 8003d42:	4b13      	ldr	r3, [pc, #76]	; (8003d90 <HAL_adcir_MspInit+0x58>)
 8003d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d46:	4a12      	ldr	r2, [pc, #72]	; (8003d90 <HAL_adcir_MspInit+0x58>)
 8003d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d4e:	4b10      	ldr	r3, [pc, #64]	; (8003d90 <HAL_adcir_MspInit+0x58>)
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_4 ;
 8003d5a:	2310      	movs	r3, #16
 8003d5c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d62:	2300      	movs	r3, #0
 8003d64:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d66:	1d3b      	adds	r3, r7, #4
 8003d68:	4619      	mov	r1, r3
 8003d6a:	480a      	ldr	r0, [pc, #40]	; (8003d94 <HAL_adcir_MspInit+0x5c>)
 8003d6c:	f001 fdb0 	bl	80058d0 <HAL_GPIO_Init>


	  GPIO_InitStruct.Pin = GPIO_PIN_0 ;
 8003d70:	2301      	movs	r3, #1
 8003d72:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d74:	2303      	movs	r3, #3
 8003d76:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d7c:	1d3b      	adds	r3, r7, #4
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4805      	ldr	r0, [pc, #20]	; (8003d98 <HAL_adcir_MspInit+0x60>)
 8003d82:	f001 fda5 	bl	80058d0 <HAL_GPIO_Init>

}
 8003d86:	bf00      	nop
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40023800 	.word	0x40023800
 8003d94:	40020000 	.word	0x40020000
 8003d98:	40020400 	.word	0x40020400

08003d9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
******************************************************************/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08a      	sub	sp, #40	; 0x28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da4:	f107 0314 	add.w	r3, r7, #20
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	605a      	str	r2, [r3, #4]
 8003dae:	609a      	str	r2, [r3, #8]
 8003db0:	60da      	str	r2, [r3, #12]
 8003db2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a21      	ldr	r2, [pc, #132]	; (8003e40 <HAL_I2C_MspInit+0xa4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d13c      	bne.n	8003e38 <HAL_I2C_MspInit+0x9c>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	4b20      	ldr	r3, [pc, #128]	; (8003e44 <HAL_I2C_MspInit+0xa8>)
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc6:	4a1f      	ldr	r2, [pc, #124]	; (8003e44 <HAL_I2C_MspInit+0xa8>)
 8003dc8:	f043 0302 	orr.w	r3, r3, #2
 8003dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8003dce:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <HAL_I2C_MspInit+0xa8>)
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	613b      	str	r3, [r7, #16]
 8003dd8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003dda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003de0:	2312      	movs	r3, #18
 8003de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de4:	2300      	movs	r3, #0
 8003de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003de8:	2303      	movs	r3, #3
 8003dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003dec:	2304      	movs	r3, #4
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003df0:	f107 0314 	add.w	r3, r7, #20
 8003df4:	4619      	mov	r1, r3
 8003df6:	4814      	ldr	r0, [pc, #80]	; (8003e48 <HAL_I2C_MspInit+0xac>)
 8003df8:	f001 fd6a 	bl	80058d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <HAL_I2C_MspInit+0xa8>)
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	4a0f      	ldr	r2, [pc, #60]	; (8003e44 <HAL_I2C_MspInit+0xa8>)
 8003e06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8003e0c:	4b0d      	ldr	r3, [pc, #52]	; (8003e44 <HAL_I2C_MspInit+0xa8>)
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	68fb      	ldr	r3, [r7, #12]

	  HAL_NVIC_SetPriority(I2C1_ER_IRQn, I2C1_ER_IRQ_PRIO, 0);
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2102      	movs	r1, #2
 8003e1c:	2020      	movs	r0, #32
 8003e1e:	f001 f91d 	bl	800505c <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003e22:	2020      	movs	r0, #32
 8003e24:	f001 f936 	bl	8005094 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(I2C1_EV_IRQn, I2C1_EV_IRQ_PRIO, 0);
 8003e28:	2200      	movs	r2, #0
 8003e2a:	210b      	movs	r1, #11
 8003e2c:	201f      	movs	r0, #31
 8003e2e:	f001 f915 	bl	800505c <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003e32:	201f      	movs	r0, #31
 8003e34:	f001 f92e 	bl	8005094 <HAL_NVIC_EnableIRQ>



  }

}
 8003e38:	bf00      	nop
 8003e3a:	3728      	adds	r7, #40	; 0x28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40005400 	.word	0x40005400
 8003e44:	40023800 	.word	0x40023800
 8003e48:	40020400 	.word	0x40020400

08003e4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
******************************************************************/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08c      	sub	sp, #48	; 0x30
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e54:	f107 031c 	add.w	r3, r7, #28
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	605a      	str	r2, [r3, #4]
 8003e5e:	609a      	str	r2, [r3, #8]
 8003e60:	60da      	str	r2, [r3, #12]
 8003e62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4aa2      	ldr	r2, [pc, #648]	; (80040f4 <HAL_UART_MspInit+0x2a8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	f040 80a5 	bne.w	8003fba <HAL_UART_MspInit+0x16e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e70:	2300      	movs	r3, #0
 8003e72:	61bb      	str	r3, [r7, #24]
 8003e74:	4ba0      	ldr	r3, [pc, #640]	; (80040f8 <HAL_UART_MspInit+0x2ac>)
 8003e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e78:	4a9f      	ldr	r2, [pc, #636]	; (80040f8 <HAL_UART_MspInit+0x2ac>)
 8003e7a:	f043 0310 	orr.w	r3, r3, #16
 8003e7e:	6453      	str	r3, [r2, #68]	; 0x44
 8003e80:	4b9d      	ldr	r3, [pc, #628]	; (80040f8 <HAL_UART_MspInit+0x2ac>)
 8003e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e84:	f003 0310 	and.w	r3, r3, #16
 8003e88:	61bb      	str	r3, [r7, #24]
 8003e8a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	4b99      	ldr	r3, [pc, #612]	; (80040f8 <HAL_UART_MspInit+0x2ac>)
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	4a98      	ldr	r2, [pc, #608]	; (80040f8 <HAL_UART_MspInit+0x2ac>)
 8003e96:	f043 0301 	orr.w	r3, r3, #1
 8003e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8003e9c:	4b96      	ldr	r3, [pc, #600]	; (80040f8 <HAL_UART_MspInit+0x2ac>)
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eae:	2302      	movs	r3, #2
 8003eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003eba:	2307      	movs	r3, #7
 8003ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ebe:	f107 031c 	add.w	r3, r7, #28
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	488d      	ldr	r0, [pc, #564]	; (80040fc <HAL_UART_MspInit+0x2b0>)
 8003ec6:	f001 fd03 	bl	80058d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003eca:	2340      	movs	r3, #64	; 0x40
 8003ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ece:	2302      	movs	r3, #2
 8003ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003eda:	2307      	movs	r3, #7
 8003edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ede:	f107 031c 	add.w	r3, r7, #28
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4886      	ldr	r0, [pc, #536]	; (8004100 <HAL_UART_MspInit+0x2b4>)
 8003ee6:	f001 fcf3 	bl	80058d0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003eea:	4b86      	ldr	r3, [pc, #536]	; (8004104 <HAL_UART_MspInit+0x2b8>)
 8003eec:	4a86      	ldr	r2, [pc, #536]	; (8004108 <HAL_UART_MspInit+0x2bc>)
 8003eee:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003ef0:	4b84      	ldr	r3, [pc, #528]	; (8004104 <HAL_UART_MspInit+0x2b8>)
 8003ef2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ef6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ef8:	4b82      	ldr	r3, [pc, #520]	; (8004104 <HAL_UART_MspInit+0x2b8>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003efe:	4b81      	ldr	r3, [pc, #516]	; (8004104 <HAL_UART_MspInit+0x2b8>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f04:	4b7f      	ldr	r3, [pc, #508]	; (8004104 <HAL_UART_MspInit+0x2b8>)
 8003f06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f0a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f0c:	4b7d      	ldr	r3, [pc, #500]	; (8004104 <HAL_UART_MspInit+0x2b8>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f12:	4b7c      	ldr	r3, [pc, #496]	; (8004104 <HAL_UART_MspInit+0x2b8>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003f18:	4b7a      	ldr	r3, [pc, #488]	; (8004104 <HAL_UART_MspInit+0x2b8>)
 8003f1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f1e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003f20:	4b78      	ldr	r3, [pc, #480]	; (8004104 <HAL_UART_MspInit+0x2b8>)
 8003f22:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003f26:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f28:	4b76      	ldr	r3, [pc, #472]	; (8004104 <HAL_UART_MspInit+0x2b8>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003f2e:	4875      	ldr	r0, [pc, #468]	; (8004104 <HAL_UART_MspInit+0x2b8>)
 8003f30:	f001 f8be 	bl	80050b0 <HAL_DMA_Init>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8003f3a:	f7ff f92f 	bl	800319c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a70      	ldr	r2, [pc, #448]	; (8004104 <HAL_UART_MspInit+0x2b8>)
 8003f42:	639a      	str	r2, [r3, #56]	; 0x38
 8003f44:	4a6f      	ldr	r2, [pc, #444]	; (8004104 <HAL_UART_MspInit+0x2b8>)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003f4a:	4b70      	ldr	r3, [pc, #448]	; (800410c <HAL_UART_MspInit+0x2c0>)
 8003f4c:	4a70      	ldr	r2, [pc, #448]	; (8004110 <HAL_UART_MspInit+0x2c4>)
 8003f4e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003f50:	4b6e      	ldr	r3, [pc, #440]	; (800410c <HAL_UART_MspInit+0x2c0>)
 8003f52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f56:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f58:	4b6c      	ldr	r3, [pc, #432]	; (800410c <HAL_UART_MspInit+0x2c0>)
 8003f5a:	2240      	movs	r2, #64	; 0x40
 8003f5c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f5e:	4b6b      	ldr	r3, [pc, #428]	; (800410c <HAL_UART_MspInit+0x2c0>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f64:	4b69      	ldr	r3, [pc, #420]	; (800410c <HAL_UART_MspInit+0x2c0>)
 8003f66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f6a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f6c:	4b67      	ldr	r3, [pc, #412]	; (800410c <HAL_UART_MspInit+0x2c0>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f72:	4b66      	ldr	r3, [pc, #408]	; (800410c <HAL_UART_MspInit+0x2c0>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003f78:	4b64      	ldr	r3, [pc, #400]	; (800410c <HAL_UART_MspInit+0x2c0>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003f7e:	4b63      	ldr	r3, [pc, #396]	; (800410c <HAL_UART_MspInit+0x2c0>)
 8003f80:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003f84:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f86:	4b61      	ldr	r3, [pc, #388]	; (800410c <HAL_UART_MspInit+0x2c0>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003f8c:	485f      	ldr	r0, [pc, #380]	; (800410c <HAL_UART_MspInit+0x2c0>)
 8003f8e:	f001 f88f 	bl	80050b0 <HAL_DMA_Init>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_UART_MspInit+0x150>
    {
      Error_Handler();
 8003f98:	f7ff f900 	bl	800319c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a5b      	ldr	r2, [pc, #364]	; (800410c <HAL_UART_MspInit+0x2c0>)
 8003fa0:	635a      	str	r2, [r3, #52]	; 0x34
 8003fa2:	4a5a      	ldr	r2, [pc, #360]	; (800410c <HAL_UART_MspInit+0x2c0>)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003fa8:	2200      	movs	r2, #0
 8003faa:	2105      	movs	r1, #5
 8003fac:	2025      	movs	r0, #37	; 0x25
 8003fae:	f001 f855 	bl	800505c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003fb2:	2025      	movs	r0, #37	; 0x25
 8003fb4:	f001 f86e 	bl	8005094 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003fb8:	e098      	b.n	80040ec <HAL_UART_MspInit+0x2a0>
  else if(huart->Instance==USART2)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a55      	ldr	r2, [pc, #340]	; (8004114 <HAL_UART_MspInit+0x2c8>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	f040 8093 	bne.w	80040ec <HAL_UART_MspInit+0x2a0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	613b      	str	r3, [r7, #16]
 8003fca:	4b4b      	ldr	r3, [pc, #300]	; (80040f8 <HAL_UART_MspInit+0x2ac>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	4a4a      	ldr	r2, [pc, #296]	; (80040f8 <HAL_UART_MspInit+0x2ac>)
 8003fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fd6:	4b48      	ldr	r3, [pc, #288]	; (80040f8 <HAL_UART_MspInit+0x2ac>)
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fde:	613b      	str	r3, [r7, #16]
 8003fe0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	4b44      	ldr	r3, [pc, #272]	; (80040f8 <HAL_UART_MspInit+0x2ac>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	4a43      	ldr	r2, [pc, #268]	; (80040f8 <HAL_UART_MspInit+0x2ac>)
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ff2:	4b41      	ldr	r3, [pc, #260]	; (80040f8 <HAL_UART_MspInit+0x2ac>)
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003ffe:	230c      	movs	r3, #12
 8004000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004002:	2302      	movs	r3, #2
 8004004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004006:	2300      	movs	r3, #0
 8004008:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800400a:	2303      	movs	r3, #3
 800400c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800400e:	2307      	movs	r3, #7
 8004010:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004012:	f107 031c 	add.w	r3, r7, #28
 8004016:	4619      	mov	r1, r3
 8004018:	4838      	ldr	r0, [pc, #224]	; (80040fc <HAL_UART_MspInit+0x2b0>)
 800401a:	f001 fc59 	bl	80058d0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800401e:	4b3e      	ldr	r3, [pc, #248]	; (8004118 <HAL_UART_MspInit+0x2cc>)
 8004020:	4a3e      	ldr	r2, [pc, #248]	; (800411c <HAL_UART_MspInit+0x2d0>)
 8004022:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004024:	4b3c      	ldr	r3, [pc, #240]	; (8004118 <HAL_UART_MspInit+0x2cc>)
 8004026:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800402a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800402c:	4b3a      	ldr	r3, [pc, #232]	; (8004118 <HAL_UART_MspInit+0x2cc>)
 800402e:	2200      	movs	r2, #0
 8004030:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004032:	4b39      	ldr	r3, [pc, #228]	; (8004118 <HAL_UART_MspInit+0x2cc>)
 8004034:	2200      	movs	r2, #0
 8004036:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004038:	4b37      	ldr	r3, [pc, #220]	; (8004118 <HAL_UART_MspInit+0x2cc>)
 800403a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800403e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004040:	4b35      	ldr	r3, [pc, #212]	; (8004118 <HAL_UART_MspInit+0x2cc>)
 8004042:	2200      	movs	r2, #0
 8004044:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004046:	4b34      	ldr	r3, [pc, #208]	; (8004118 <HAL_UART_MspInit+0x2cc>)
 8004048:	2200      	movs	r2, #0
 800404a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800404c:	4b32      	ldr	r3, [pc, #200]	; (8004118 <HAL_UART_MspInit+0x2cc>)
 800404e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004052:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004054:	4b30      	ldr	r3, [pc, #192]	; (8004118 <HAL_UART_MspInit+0x2cc>)
 8004056:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800405a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800405c:	4b2e      	ldr	r3, [pc, #184]	; (8004118 <HAL_UART_MspInit+0x2cc>)
 800405e:	2200      	movs	r2, #0
 8004060:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004062:	482d      	ldr	r0, [pc, #180]	; (8004118 <HAL_UART_MspInit+0x2cc>)
 8004064:	f001 f824 	bl	80050b0 <HAL_DMA_Init>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <HAL_UART_MspInit+0x226>
      Error_Handler();
 800406e:	f7ff f895 	bl	800319c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a28      	ldr	r2, [pc, #160]	; (8004118 <HAL_UART_MspInit+0x2cc>)
 8004076:	639a      	str	r2, [r3, #56]	; 0x38
 8004078:	4a27      	ldr	r2, [pc, #156]	; (8004118 <HAL_UART_MspInit+0x2cc>)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800407e:	4b28      	ldr	r3, [pc, #160]	; (8004120 <HAL_UART_MspInit+0x2d4>)
 8004080:	4a28      	ldr	r2, [pc, #160]	; (8004124 <HAL_UART_MspInit+0x2d8>)
 8004082:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004084:	4b26      	ldr	r3, [pc, #152]	; (8004120 <HAL_UART_MspInit+0x2d4>)
 8004086:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800408a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800408c:	4b24      	ldr	r3, [pc, #144]	; (8004120 <HAL_UART_MspInit+0x2d4>)
 800408e:	2240      	movs	r2, #64	; 0x40
 8004090:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004092:	4b23      	ldr	r3, [pc, #140]	; (8004120 <HAL_UART_MspInit+0x2d4>)
 8004094:	2200      	movs	r2, #0
 8004096:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004098:	4b21      	ldr	r3, [pc, #132]	; (8004120 <HAL_UART_MspInit+0x2d4>)
 800409a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800409e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040a0:	4b1f      	ldr	r3, [pc, #124]	; (8004120 <HAL_UART_MspInit+0x2d4>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040a6:	4b1e      	ldr	r3, [pc, #120]	; (8004120 <HAL_UART_MspInit+0x2d4>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80040ac:	4b1c      	ldr	r3, [pc, #112]	; (8004120 <HAL_UART_MspInit+0x2d4>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80040b2:	4b1b      	ldr	r3, [pc, #108]	; (8004120 <HAL_UART_MspInit+0x2d4>)
 80040b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80040b8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040ba:	4b19      	ldr	r3, [pc, #100]	; (8004120 <HAL_UART_MspInit+0x2d4>)
 80040bc:	2200      	movs	r2, #0
 80040be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80040c0:	4817      	ldr	r0, [pc, #92]	; (8004120 <HAL_UART_MspInit+0x2d4>)
 80040c2:	f000 fff5 	bl	80050b0 <HAL_DMA_Init>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <HAL_UART_MspInit+0x284>
      Error_Handler();
 80040cc:	f7ff f866 	bl	800319c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a13      	ldr	r2, [pc, #76]	; (8004120 <HAL_UART_MspInit+0x2d4>)
 80040d4:	635a      	str	r2, [r3, #52]	; 0x34
 80040d6:	4a12      	ldr	r2, [pc, #72]	; (8004120 <HAL_UART_MspInit+0x2d4>)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80040dc:	2200      	movs	r2, #0
 80040de:	2105      	movs	r1, #5
 80040e0:	2026      	movs	r0, #38	; 0x26
 80040e2:	f000 ffbb 	bl	800505c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80040e6:	2026      	movs	r0, #38	; 0x26
 80040e8:	f000 ffd4 	bl	8005094 <HAL_NVIC_EnableIRQ>
}
 80040ec:	bf00      	nop
 80040ee:	3730      	adds	r7, #48	; 0x30
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40011000 	.word	0x40011000
 80040f8:	40023800 	.word	0x40023800
 80040fc:	40020000 	.word	0x40020000
 8004100:	40020400 	.word	0x40020400
 8004104:	20004a58 	.word	0x20004a58
 8004108:	40026440 	.word	0x40026440
 800410c:	20004ab8 	.word	0x20004ab8
 8004110:	400264b8 	.word	0x400264b8
 8004114:	40004400 	.word	0x40004400
 8004118:	20004b18 	.word	0x20004b18
 800411c:	40026088 	.word	0x40026088
 8004120:	20004b78 	.word	0x20004b78
 8004124:	400260a0 	.word	0x400260a0

08004128 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08c      	sub	sp, #48	; 0x30
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8004138:	2300      	movs	r3, #0
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	4b2f      	ldr	r3, [pc, #188]	; (80041fc <HAL_InitTick+0xd4>)
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	4a2e      	ldr	r2, [pc, #184]	; (80041fc <HAL_InitTick+0xd4>)
 8004142:	f043 0304 	orr.w	r3, r3, #4
 8004146:	6413      	str	r3, [r2, #64]	; 0x40
 8004148:	4b2c      	ldr	r3, [pc, #176]	; (80041fc <HAL_InitTick+0xd4>)
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	60bb      	str	r3, [r7, #8]
 8004152:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004154:	f107 020c 	add.w	r2, r7, #12
 8004158:	f107 0310 	add.w	r3, r7, #16
 800415c:	4611      	mov	r1, r2
 800415e:	4618      	mov	r0, r3
 8004160:	f004 fe4c 	bl	8008dfc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004164:	f004 fe36 	bl	8008dd4 <HAL_RCC_GetPCLK2Freq>
 8004168:	4603      	mov	r3, r0
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800416e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004170:	4a23      	ldr	r2, [pc, #140]	; (8004200 <HAL_InitTick+0xd8>)
 8004172:	fba2 2303 	umull	r2, r3, r2, r3
 8004176:	0c9b      	lsrs	r3, r3, #18
 8004178:	3b01      	subs	r3, #1
 800417a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim4.Instance = TIM4;
 800417c:	4b21      	ldr	r3, [pc, #132]	; (8004204 <HAL_InitTick+0xdc>)
 800417e:	4a22      	ldr	r2, [pc, #136]	; (8004208 <HAL_InitTick+0xe0>)
 8004180:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8004182:	4b20      	ldr	r3, [pc, #128]	; (8004204 <HAL_InitTick+0xdc>)
 8004184:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004188:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800418a:	4a1e      	ldr	r2, [pc, #120]	; (8004204 <HAL_InitTick+0xdc>)
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8004190:	4b1c      	ldr	r3, [pc, #112]	; (8004204 <HAL_InitTick+0xdc>)
 8004192:	2200      	movs	r2, #0
 8004194:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004196:	4b1b      	ldr	r3, [pc, #108]	; (8004204 <HAL_InitTick+0xdc>)
 8004198:	2200      	movs	r2, #0
 800419a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800419c:	4b19      	ldr	r3, [pc, #100]	; (8004204 <HAL_InitTick+0xdc>)
 800419e:	2200      	movs	r2, #0
 80041a0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80041a2:	4818      	ldr	r0, [pc, #96]	; (8004204 <HAL_InitTick+0xdc>)
 80041a4:	f004 fe5c 	bl	8008e60 <HAL_TIM_Base_Init>
 80041a8:	4603      	mov	r3, r0
 80041aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80041ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d11b      	bne.n	80041ee <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80041b6:	4813      	ldr	r0, [pc, #76]	; (8004204 <HAL_InitTick+0xdc>)
 80041b8:	f004 feac 	bl	8008f14 <HAL_TIM_Base_Start_IT>
 80041bc:	4603      	mov	r3, r0
 80041be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80041c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d111      	bne.n	80041ee <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80041ca:	201e      	movs	r0, #30
 80041cc:	f000 ff62 	bl	8005094 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b0f      	cmp	r3, #15
 80041d4:	d808      	bhi.n	80041e8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80041d6:	2200      	movs	r2, #0
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	201e      	movs	r0, #30
 80041dc:	f000 ff3e 	bl	800505c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80041e0:	4a0a      	ldr	r2, [pc, #40]	; (800420c <HAL_InitTick+0xe4>)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	e002      	b.n	80041ee <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80041ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3730      	adds	r7, #48	; 0x30
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40023800 	.word	0x40023800
 8004200:	431bde83 	.word	0x431bde83
 8004204:	20005048 	.word	0x20005048
 8004208:	40000800 	.word	0x40000800
 800420c:	20000020 	.word	0x20000020

08004210 <NMI_Handler>:
extern TIM_HandleTypeDef htim4;
extern I2C_HandleTypeDef hi2c1;


void NMI_Handler(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  while (1)
 8004214:	e7fe      	b.n	8004214 <NMI_Handler+0x4>

08004216 <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 8004216:	b480      	push	{r7}
 8004218:	af00      	add	r7, sp, #0

  while (1)
 800421a:	e7fe      	b.n	800421a <HardFault_Handler+0x4>

0800421c <MemManage_Handler>:
  {
  }
}

void MemManage_Handler(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  while (1)
 8004220:	e7fe      	b.n	8004220 <MemManage_Handler+0x4>

08004222 <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 8004222:	b480      	push	{r7}
 8004224:	af00      	add	r7, sp, #0
  while (1)
 8004226:	e7fe      	b.n	8004226 <BusFault_Handler+0x4>

08004228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  while (1)
 800422c:	e7fe      	b.n	800422c <UsageFault_Handler+0x4>

0800422e <DebugMon_Handler>:
  {
  }
}

void DebugMon_Handler(void)
{
 800422e:	b480      	push	{r7}
 8004230:	af00      	add	r7, sp, #0
}
 8004232:	bf00      	nop
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <DMA1_Stream5_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void DMA1_Stream5_IRQHandler(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004240:	4802      	ldr	r0, [pc, #8]	; (800424c <DMA1_Stream5_IRQHandler+0x10>)
 8004242:	f001 f8cd 	bl	80053e0 <HAL_DMA_IRQHandler>
}
 8004246:	bf00      	nop
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	20004b18 	.word	0x20004b18

08004250 <DMA1_Stream6_IRQHandler>:


void DMA1_Stream6_IRQHandler(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004254:	4802      	ldr	r0, [pc, #8]	; (8004260 <DMA1_Stream6_IRQHandler+0x10>)
 8004256:	f001 f8c3 	bl	80053e0 <HAL_DMA_IRQHandler>
}
 800425a:	bf00      	nop
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	20004b78 	.word	0x20004b78

08004264 <TIM4_IRQHandler>:
{
  HAL_TIM_IRQHandler(&htim1);
}*/

void TIM4_IRQHandler(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8004268:	4802      	ldr	r0, [pc, #8]	; (8004274 <TIM4_IRQHandler+0x10>)
 800426a:	f005 f8a3 	bl	80093b4 <HAL_TIM_IRQHandler>
}
 800426e:	bf00      	nop
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	20005048 	.word	0x20005048

08004278 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 800427c:	4802      	ldr	r0, [pc, #8]	; (8004288 <USART1_IRQHandler+0x10>)
 800427e:	f005 ff7f 	bl	800a180 <HAL_UART_IRQHandler>
}
 8004282:	bf00      	nop
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	200049d0 	.word	0x200049d0

0800428c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 8004290:	4802      	ldr	r0, [pc, #8]	; (800429c <USART2_IRQHandler+0x10>)
 8004292:	f005 ff75 	bl	800a180 <HAL_UART_IRQHandler>
}
 8004296:	bf00      	nop
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	20004a14 	.word	0x20004a14

080042a0 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80042a4:	4802      	ldr	r0, [pc, #8]	; (80042b0 <DMA2_Stream2_IRQHandler+0x10>)
 80042a6:	f001 f89b 	bl	80053e0 <HAL_DMA_IRQHandler>
}
 80042aa:	bf00      	nop
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	20004a58 	.word	0x20004a58

080042b4 <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80042b8:	4802      	ldr	r0, [pc, #8]	; (80042c4 <DMA2_Stream7_IRQHandler+0x10>)
 80042ba:	f001 f891 	bl	80053e0 <HAL_DMA_IRQHandler>
}
 80042be:	bf00      	nop
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20004ab8 	.word	0x20004ab8

080042c8 <EXTI15_10_IRQHandler>:

//=======================================================
//		ENCODER INDEX LEFT
//=======================================================
void EXTI15_10_IRQHandler(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80042cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80042d0:	f001 fc9c 	bl	8005c0c <HAL_GPIO_EXTI_IRQHandler>
}
 80042d4:	bf00      	nop
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <EXTI0_IRQHandler>:
//=======================================================
//		ENCODER INDEX RIGHT
//=======================================================

void EXTI0_IRQHandler(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80042dc:	2001      	movs	r0, #1
 80042de:	f001 fc95 	bl	8005c0c <HAL_GPIO_EXTI_IRQHandler>
}
 80042e2:	bf00      	nop
 80042e4:	bd80      	pop	{r7, pc}
	...

080042e8 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
	  HAL_I2C_EV_IRQHandler(&hi2c1);
 80042ec:	4802      	ldr	r0, [pc, #8]	; (80042f8 <I2C1_EV_IRQHandler+0x10>)
 80042ee:	f002 f90d 	bl	800650c <HAL_I2C_EV_IRQHandler>
}
 80042f2:	bf00      	nop
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	2000497c 	.word	0x2000497c

080042fc <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
	  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004300:	4802      	ldr	r0, [pc, #8]	; (800430c <I2C1_ER_IRQHandler+0x10>)
 8004302:	f002 fa56 	bl	80067b2 <HAL_I2C_ER_IRQHandler>
}
 8004306:	bf00      	nop
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	2000497c 	.word	0x2000497c

08004310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004318:	4a14      	ldr	r2, [pc, #80]	; (800436c <_sbrk+0x5c>)
 800431a:	4b15      	ldr	r3, [pc, #84]	; (8004370 <_sbrk+0x60>)
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004324:	4b13      	ldr	r3, [pc, #76]	; (8004374 <_sbrk+0x64>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d102      	bne.n	8004332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800432c:	4b11      	ldr	r3, [pc, #68]	; (8004374 <_sbrk+0x64>)
 800432e:	4a12      	ldr	r2, [pc, #72]	; (8004378 <_sbrk+0x68>)
 8004330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004332:	4b10      	ldr	r3, [pc, #64]	; (8004374 <_sbrk+0x64>)
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4413      	add	r3, r2
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	429a      	cmp	r2, r3
 800433e:	d207      	bcs.n	8004350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004340:	f013 ff04 	bl	801814c <__errno>
 8004344:	4603      	mov	r3, r0
 8004346:	220c      	movs	r2, #12
 8004348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800434a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800434e:	e009      	b.n	8004364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004350:	4b08      	ldr	r3, [pc, #32]	; (8004374 <_sbrk+0x64>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004356:	4b07      	ldr	r3, [pc, #28]	; (8004374 <_sbrk+0x64>)
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4413      	add	r3, r2
 800435e:	4a05      	ldr	r2, [pc, #20]	; (8004374 <_sbrk+0x64>)
 8004360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004362:	68fb      	ldr	r3, [r7, #12]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	20020000 	.word	0x20020000
 8004370:	00000400 	.word	0x00000400
 8004374:	20005090 	.word	0x20005090
 8004378:	2000eb88 	.word	0x2000eb88

0800437c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004380:	4b06      	ldr	r3, [pc, #24]	; (800439c <SystemInit+0x20>)
 8004382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004386:	4a05      	ldr	r2, [pc, #20]	; (800439c <SystemInit+0x20>)
 8004388:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800438c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004390:	bf00      	nop
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	e000ed00 	.word	0xe000ed00

080043a0 <SystemClock_Config>:


#include "main.h"

void SystemClock_Config(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b094      	sub	sp, #80	; 0x50
 80043a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043a6:	f107 0320 	add.w	r3, r7, #32
 80043aa:	2230      	movs	r2, #48	; 0x30
 80043ac:	2100      	movs	r1, #0
 80043ae:	4618      	mov	r0, r3
 80043b0:	f013 fde2 	bl	8017f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80043b4:	f107 030c 	add.w	r3, r7, #12
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	605a      	str	r2, [r3, #4]
 80043be:	609a      	str	r2, [r3, #8]
 80043c0:	60da      	str	r2, [r3, #12]
 80043c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80043c4:	2300      	movs	r3, #0
 80043c6:	60bb      	str	r3, [r7, #8]
 80043c8:	4b28      	ldr	r3, [pc, #160]	; (800446c <SystemClock_Config+0xcc>)
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	4a27      	ldr	r2, [pc, #156]	; (800446c <SystemClock_Config+0xcc>)
 80043ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d2:	6413      	str	r3, [r2, #64]	; 0x40
 80043d4:	4b25      	ldr	r3, [pc, #148]	; (800446c <SystemClock_Config+0xcc>)
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043dc:	60bb      	str	r3, [r7, #8]
 80043de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80043e0:	2300      	movs	r3, #0
 80043e2:	607b      	str	r3, [r7, #4]
 80043e4:	4b22      	ldr	r3, [pc, #136]	; (8004470 <SystemClock_Config+0xd0>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a21      	ldr	r2, [pc, #132]	; (8004470 <SystemClock_Config+0xd0>)
 80043ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	4b1f      	ldr	r3, [pc, #124]	; (8004470 <SystemClock_Config+0xd0>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80043f8:	607b      	str	r3, [r7, #4]
 80043fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80043fc:	2301      	movs	r3, #1
 80043fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004400:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004406:	2302      	movs	r3, #2
 8004408:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800440a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800440e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004410:	2308      	movs	r3, #8
 8004412:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8004414:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8004418:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800441a:	2306      	movs	r3, #6
 800441c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800441e:	2304      	movs	r3, #4
 8004420:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004422:	f107 0320 	add.w	r3, r7, #32
 8004426:	4618      	mov	r0, r3
 8004428:	f004 f850 	bl	80084cc <HAL_RCC_OscConfig>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8004432:	f7fe feb3 	bl	800319c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004436:	230f      	movs	r3, #15
 8004438:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800443a:	2302      	movs	r3, #2
 800443c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800443e:	2300      	movs	r3, #0
 8004440:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004442:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004446:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8004448:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800444c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800444e:	f107 030c 	add.w	r3, r7, #12
 8004452:	2102      	movs	r1, #2
 8004454:	4618      	mov	r0, r3
 8004456:	f004 fab1 	bl	80089bc <HAL_RCC_ClockConfig>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8004460:	f7fe fe9c 	bl	800319c <Error_Handler>
  }
}
 8004464:	bf00      	nop
 8004466:	3750      	adds	r7, #80	; 0x50
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40023800 	.word	0x40023800
 8004470:	40007000 	.word	0x40007000

08004474 <num2str>:
#include "util.h"

//=================================================================
void num2str(char *s, unsigned int number, unsigned int base, unsigned int size, int sp)
{
 8004474:	b480      	push	{r7}
 8004476:	b089      	sub	sp, #36	; 0x24
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
 8004480:	603b      	str	r3, [r7, #0]
        static char  hexChars[] = "0123456789ABCDEF";

        char *p=s;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	617b      	str	r3, [r7, #20]
        unsigned int i;
        char tmp;

        // get digits
        do {
                *s++=hexChars[number % base];
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	fbb3 f2f2 	udiv	r2, r3, r2
 800448e:	6879      	ldr	r1, [r7, #4]
 8004490:	fb01 f202 	mul.w	r2, r1, r2
 8004494:	1a9a      	subs	r2, r3, r2
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	1c59      	adds	r1, r3, #1
 800449a:	60f9      	str	r1, [r7, #12]
 800449c:	4936      	ldr	r1, [pc, #216]	; (8004578 <num2str+0x104>)
 800449e:	5c8a      	ldrb	r2, [r1, r2]
 80044a0:	701a      	strb	r2, [r3, #0]
        } while (number /= base);
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044aa:	60bb      	str	r3, [r7, #8]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1e9      	bne.n	8004486 <num2str+0x12>
        *s='\0';
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	701a      	strb	r2, [r3, #0]

        // reverse string
        cnt=s-p;
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	613b      	str	r3, [r7, #16]
        for (i=0;i<cnt/2;i++) {
 80044c0:	2300      	movs	r3, #0
 80044c2:	61fb      	str	r3, [r7, #28]
 80044c4:	e01a      	b.n	80044fc <num2str+0x88>
                tmp=p[i]; p[i] = p[cnt-i-1]; p[cnt-i-1]=tmp;
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	4413      	add	r3, r2
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	76fb      	strb	r3, [r7, #27]
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	3b01      	subs	r3, #1
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	441a      	add	r2, r3
 80044dc:	6979      	ldr	r1, [r7, #20]
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	440b      	add	r3, r1
 80044e2:	7812      	ldrb	r2, [r2, #0]
 80044e4:	701a      	strb	r2, [r3, #0]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	3b01      	subs	r3, #1
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	4413      	add	r3, r2
 80044f2:	7efa      	ldrb	r2, [r7, #27]
 80044f4:	701a      	strb	r2, [r3, #0]
        for (i=0;i<cnt/2;i++) {
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	3301      	adds	r3, #1
 80044fa:	61fb      	str	r3, [r7, #28]
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	085b      	lsrs	r3, r3, #1
 8004500:	69fa      	ldr	r2, [r7, #28]
 8004502:	429a      	cmp	r2, r3
 8004504:	d3df      	bcc.n	80044c6 <num2str+0x52>
        }

        // add extra space
        if (cnt<size) {
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d22d      	bcs.n	800456a <num2str+0xf6>
                for (i=cnt;i==0;i--)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	61fb      	str	r3, [r7, #28]
 8004512:	e00e      	b.n	8004532 <num2str+0xbe>
                		{p[i+size-cnt]=p[i];}
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	441a      	add	r2, r3
 800451a:	69f9      	ldr	r1, [r7, #28]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	4419      	add	r1, r3
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1acb      	subs	r3, r1, r3
 8004524:	6979      	ldr	r1, [r7, #20]
 8004526:	440b      	add	r3, r1
 8004528:	7812      	ldrb	r2, [r2, #0]
 800452a:	701a      	strb	r2, [r3, #0]
                for (i=cnt;i==0;i--)
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	3b01      	subs	r3, #1
 8004530:	61fb      	str	r3, [r7, #28]
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0ed      	beq.n	8004514 <num2str+0xa0>
                if (sp) tmp=' '; else tmp='0';
 8004538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <num2str+0xd0>
 800453e:	2320      	movs	r3, #32
 8004540:	76fb      	strb	r3, [r7, #27]
 8004542:	e001      	b.n	8004548 <num2str+0xd4>
 8004544:	2330      	movs	r3, #48	; 0x30
 8004546:	76fb      	strb	r3, [r7, #27]
                for (i=0;i<size-cnt;i++) p[i]=tmp;
 8004548:	2300      	movs	r3, #0
 800454a:	61fb      	str	r3, [r7, #28]
 800454c:	e007      	b.n	800455e <num2str+0xea>
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	4413      	add	r3, r2
 8004554:	7efa      	ldrb	r2, [r7, #27]
 8004556:	701a      	strb	r2, [r3, #0]
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	3301      	adds	r3, #1
 800455c:	61fb      	str	r3, [r7, #28]
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	69fa      	ldr	r2, [r7, #28]
 8004566:	429a      	cmp	r2, r3
 8004568:	d3f1      	bcc.n	800454e <num2str+0xda>
        }
}
 800456a:	bf00      	nop
 800456c:	3724      	adds	r7, #36	; 0x24
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	2000000c 	.word	0x2000000c

0800457c <str2num>:

//=================================================================
unsigned int str2num(char *s, unsigned base)
{
 800457c:	b480      	push	{r7}
 800457e:	b087      	sub	sp, #28
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
	unsigned int u=0, d;
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]
	char ch=*s++;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	607a      	str	r2, [r7, #4]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 8004594:	e02e      	b.n	80045f4 <str2num+0x78>
		if ((ch>='0') && (ch<='9')) d=ch-'0';
 8004596:	7bfb      	ldrb	r3, [r7, #15]
 8004598:	2b2f      	cmp	r3, #47	; 0x2f
 800459a:	d906      	bls.n	80045aa <str2num+0x2e>
 800459c:	7bfb      	ldrb	r3, [r7, #15]
 800459e:	2b39      	cmp	r3, #57	; 0x39
 80045a0:	d803      	bhi.n	80045aa <str2num+0x2e>
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
 80045a4:	3b30      	subs	r3, #48	; 0x30
 80045a6:	613b      	str	r3, [r7, #16]
 80045a8:	e018      	b.n	80045dc <str2num+0x60>
		else if ((base==16) && (ch>='A') && (ch<='F')) d=ch-'A'+10;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b10      	cmp	r3, #16
 80045ae:	d109      	bne.n	80045c4 <str2num+0x48>
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	2b40      	cmp	r3, #64	; 0x40
 80045b4:	d906      	bls.n	80045c4 <str2num+0x48>
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	2b46      	cmp	r3, #70	; 0x46
 80045ba:	d803      	bhi.n	80045c4 <str2num+0x48>
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	3b37      	subs	r3, #55	; 0x37
 80045c0:	613b      	str	r3, [r7, #16]
 80045c2:	e00b      	b.n	80045dc <str2num+0x60>
		else if ((base==16) && (ch>='a') && (ch<='f')) d=ch-'a'+10;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	2b10      	cmp	r3, #16
 80045c8:	d117      	bne.n	80045fa <str2num+0x7e>
 80045ca:	7bfb      	ldrb	r3, [r7, #15]
 80045cc:	2b60      	cmp	r3, #96	; 0x60
 80045ce:	d914      	bls.n	80045fa <str2num+0x7e>
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	2b66      	cmp	r3, #102	; 0x66
 80045d4:	d811      	bhi.n	80045fa <str2num+0x7e>
 80045d6:	7bfb      	ldrb	r3, [r7, #15]
 80045d8:	3b57      	subs	r3, #87	; 0x57
 80045da:	613b      	str	r3, [r7, #16]
		else break;
		u=d+base*u;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	fb02 f303 	mul.w	r3, r2, r3
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4413      	add	r3, r2
 80045e8:	617b      	str	r3, [r7, #20]
		ch=*s++;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	607a      	str	r2, [r7, #4]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1cd      	bne.n	8004596 <str2num+0x1a>
	}
	return u;
 80045fa:	697b      	ldr	r3, [r7, #20]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	371c      	adds	r7, #28
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <reverse>:

//=================================================================
void reverse(char *str, int len)
{
 8004608:	b480      	push	{r7}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
    int i=0, j=len-1, temp;
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	3b01      	subs	r3, #1
 800461a:	613b      	str	r3, [r7, #16]
    while (i<j)
 800461c:	e018      	b.n	8004650 <reverse+0x48>
    {
        temp = str[i];
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	4413      	add	r3, r2
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	441a      	add	r2, r3
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	440b      	add	r3, r1
 8004634:	7812      	ldrb	r2, [r2, #0]
 8004636:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	4413      	add	r3, r2
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	701a      	strb	r2, [r3, #0]
        i++; j--;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	3301      	adds	r3, #1
 8004648:	617b      	str	r3, [r7, #20]
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	3b01      	subs	r3, #1
 800464e:	613b      	str	r3, [r7, #16]
    while (i<j)
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	429a      	cmp	r2, r3
 8004656:	dbe2      	blt.n	800461e <reverse+0x16>
    }
}
 8004658:	bf00      	nop
 800465a:	bf00      	nop
 800465c:	371c      	adds	r7, #28
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
	...

08004668 <intToStr>:

//=================================================================
int intToStr(int x, char str[], int d)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
    int i = 0;
 8004674:	2300      	movs	r3, #0
 8004676:	617b      	str	r3, [r7, #20]
    while (x)
 8004678:	e01d      	b.n	80046b6 <intToStr+0x4e>
    {
        str[i++] = (x%10) + '0';
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4b1d      	ldr	r3, [pc, #116]	; (80046f4 <intToStr+0x8c>)
 800467e:	fb83 1302 	smull	r1, r3, r3, r2
 8004682:	1099      	asrs	r1, r3, #2
 8004684:	17d3      	asrs	r3, r2, #31
 8004686:	1ac9      	subs	r1, r1, r3
 8004688:	460b      	mov	r3, r1
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	440b      	add	r3, r1
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	1ad1      	subs	r1, r2, r3
 8004692:	b2ca      	uxtb	r2, r1
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	1c59      	adds	r1, r3, #1
 8004698:	6179      	str	r1, [r7, #20]
 800469a:	4619      	mov	r1, r3
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	440b      	add	r3, r1
 80046a0:	3230      	adds	r2, #48	; 0x30
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	701a      	strb	r2, [r3, #0]
        x = x/10;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4a12      	ldr	r2, [pc, #72]	; (80046f4 <intToStr+0x8c>)
 80046aa:	fb82 1203 	smull	r1, r2, r2, r3
 80046ae:	1092      	asrs	r2, r2, #2
 80046b0:	17db      	asrs	r3, r3, #31
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	60fb      	str	r3, [r7, #12]
    while (x)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1de      	bne.n	800467a <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 80046bc:	e007      	b.n	80046ce <intToStr+0x66>
        str[i++] = '0';
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	617a      	str	r2, [r7, #20]
 80046c4:	461a      	mov	r2, r3
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	4413      	add	r3, r2
 80046ca:	2230      	movs	r2, #48	; 0x30
 80046cc:	701a      	strb	r2, [r3, #0]
    while (i < d)
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	dbf3      	blt.n	80046be <intToStr+0x56>

    reverse(str, i);
 80046d6:	6979      	ldr	r1, [r7, #20]
 80046d8:	68b8      	ldr	r0, [r7, #8]
 80046da:	f7ff ff95 	bl	8004608 <reverse>
    str[i] = '\0';
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	4413      	add	r3, r2
 80046e4:	2200      	movs	r2, #0
 80046e6:	701a      	strb	r2, [r3, #0]
    return i;
 80046e8:	697b      	ldr	r3, [r7, #20]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	66666667 	.word	0x66666667

080046f8 <float2str>:
//=================================================================
void float2str( char *res, float n, int afterpoint)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	ed87 0a02 	vstr	s0, [r7, #8]
 8004704:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8004706:	edd7 7a02 	vldr	s15, [r7, #8]
 800470a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800470e:	ee17 3a90 	vmov	r3, s15
 8004712:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	ee07 3a90 	vmov	s15, r3
 800471a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800471e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004722:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004726:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 800472a:	2200      	movs	r2, #0
 800472c:	68f9      	ldr	r1, [r7, #12]
 800472e:	69f8      	ldr	r0, [r7, #28]
 8004730:	f7ff ff9a 	bl	8004668 <intToStr>
 8004734:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d025      	beq.n	8004788 <float2str+0x90>
    {
        res[i] = '.';  // add dot
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4413      	add	r3, r2
 8004742:	222e      	movs	r2, #46	; 0x2e
 8004744:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter is needed
        // to handle cases like 233.007
        fpart = fpart * (float)myPow(10.0, afterpoint);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8004790 <float2str+0x98>
 800474c:	f000 f824 	bl	8004798 <myPow>
 8004750:	ec53 2b10 	vmov	r2, r3, d0
 8004754:	4610      	mov	r0, r2
 8004756:	4619      	mov	r1, r3
 8004758:	f7fc fa00 	bl	8000b5c <__aeabi_d2f>
 800475c:	ee07 0a10 	vmov	s14, r0
 8004760:	edd7 7a06 	vldr	s15, [r7, #24]
 8004764:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004768:	edc7 7a06 	vstr	s15, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 800476c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004770:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	3301      	adds	r3, #1
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4413      	add	r3, r2
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	4619      	mov	r1, r3
 8004780:	ee17 0a90 	vmov	r0, s15
 8004784:	f7ff ff70 	bl	8004668 <intToStr>
    }
}
 8004788:	bf00      	nop
 800478a:	3720      	adds	r7, #32
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	00000000 	.word	0x00000000
 8004794:	40240000 	.word	0x40240000

08004798 <myPow>:
//=================================================================
double myPow(double x, int n) {
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af00      	add	r7, sp, #0
 800479e:	ed87 0b02 	vstr	d0, [r7, #8]
 80047a2:	6078      	str	r0, [r7, #4]
    unsigned int p = abs(n);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	bfb8      	it	lt
 80047aa:	425b      	neglt	r3, r3
 80047ac:	61fb      	str	r3, [r7, #28]
    double result = 1;
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	4b1d      	ldr	r3, [pc, #116]	; (8004828 <myPow+0x90>)
 80047b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while(p > 0)
 80047b8:	e01b      	b.n	80047f2 <myPow+0x5a>
    {
        if(p & 1) // if bit is set
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d009      	beq.n	80047d8 <myPow+0x40>
        {
            result = result * x;
 80047c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80047cc:	f7fb ff2c 	bl	8000628 <__aeabi_dmul>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
        }
        p = p >> 1;
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	085b      	lsrs	r3, r3, #1
 80047dc:	61fb      	str	r3, [r7, #28]
        x = x * x;
 80047de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047e6:	f7fb ff1f 	bl	8000628 <__aeabi_dmul>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(p > 0)
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1e0      	bne.n	80047ba <myPow+0x22>
    }

    if(n < 0)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	da09      	bge.n	8004812 <myPow+0x7a>
    {
        return 1/result;
 80047fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004802:	f04f 0000 	mov.w	r0, #0
 8004806:	4908      	ldr	r1, [pc, #32]	; (8004828 <myPow+0x90>)
 8004808:	f7fc f838 	bl	800087c <__aeabi_ddiv>
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	e001      	b.n	8004816 <myPow+0x7e>
    }
    return result;
 8004812:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8004816:	ec43 2b17 	vmov	d7, r2, r3
 800481a:	eeb0 0a47 	vmov.f32	s0, s14
 800481e:	eef0 0a67 	vmov.f32	s1, s15
 8004822:	3720      	adds	r7, #32
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	3ff00000 	.word	0x3ff00000

0800482c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800482c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004864 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004830:	480d      	ldr	r0, [pc, #52]	; (8004868 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004832:	490e      	ldr	r1, [pc, #56]	; (800486c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004834:	4a0e      	ldr	r2, [pc, #56]	; (8004870 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004838:	e002      	b.n	8004840 <LoopCopyDataInit>

0800483a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800483a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800483c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800483e:	3304      	adds	r3, #4

08004840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004844:	d3f9      	bcc.n	800483a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004846:	4a0b      	ldr	r2, [pc, #44]	; (8004874 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004848:	4c0b      	ldr	r4, [pc, #44]	; (8004878 <LoopFillZerobss+0x26>)
  movs r3, #0
 800484a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800484c:	e001      	b.n	8004852 <LoopFillZerobss>

0800484e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800484e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004850:	3204      	adds	r2, #4

08004852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004854:	d3fb      	bcc.n	800484e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004856:	f7ff fd91 	bl	800437c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800485a:	f013 fc7d 	bl	8018158 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800485e:	f7fe fbab 	bl	8002fb8 <main>
  bx  lr    
 8004862:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004864:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800486c:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8004870:	08019af4 	.word	0x08019af4
  ldr r2, =_sbss
 8004874:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8004878:	2000eb88 	.word	0x2000eb88

0800487c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800487c:	e7fe      	b.n	800487c <ADC_IRQHandler>
	...

08004880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004884:	4b0e      	ldr	r3, [pc, #56]	; (80048c0 <HAL_Init+0x40>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a0d      	ldr	r2, [pc, #52]	; (80048c0 <HAL_Init+0x40>)
 800488a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800488e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004890:	4b0b      	ldr	r3, [pc, #44]	; (80048c0 <HAL_Init+0x40>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a0a      	ldr	r2, [pc, #40]	; (80048c0 <HAL_Init+0x40>)
 8004896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800489a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800489c:	4b08      	ldr	r3, [pc, #32]	; (80048c0 <HAL_Init+0x40>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a07      	ldr	r2, [pc, #28]	; (80048c0 <HAL_Init+0x40>)
 80048a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048a8:	2003      	movs	r0, #3
 80048aa:	f000 fbcc 	bl	8005046 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80048ae:	200f      	movs	r0, #15
 80048b0:	f7ff fc3a 	bl	8004128 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80048b4:	f7ff f8e0 	bl	8003a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	40023c00 	.word	0x40023c00

080048c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048c8:	4b06      	ldr	r3, [pc, #24]	; (80048e4 <HAL_IncTick+0x20>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	461a      	mov	r2, r3
 80048ce:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <HAL_IncTick+0x24>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4413      	add	r3, r2
 80048d4:	4a04      	ldr	r2, [pc, #16]	; (80048e8 <HAL_IncTick+0x24>)
 80048d6:	6013      	str	r3, [r2, #0]
}
 80048d8:	bf00      	nop
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	20000024 	.word	0x20000024
 80048e8:	20005094 	.word	0x20005094

080048ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
  return uwTick;
 80048f0:	4b03      	ldr	r3, [pc, #12]	; (8004900 <HAL_GetTick+0x14>)
 80048f2:	681b      	ldr	r3, [r3, #0]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	20005094 	.word	0x20005094

08004904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800490c:	f7ff ffee 	bl	80048ec <HAL_GetTick>
 8004910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800491c:	d005      	beq.n	800492a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800491e:	4b0a      	ldr	r3, [pc, #40]	; (8004948 <HAL_Delay+0x44>)
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4413      	add	r3, r2
 8004928:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800492a:	bf00      	nop
 800492c:	f7ff ffde 	bl	80048ec <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	429a      	cmp	r2, r3
 800493a:	d8f7      	bhi.n	800492c <HAL_Delay+0x28>
  {
  }
}
 800493c:	bf00      	nop
 800493e:	bf00      	nop
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	20000024 	.word	0x20000024

0800494c <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Check ADC handle */
  if(hadc == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_ADC_Init+0x12>
  {
     return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e01b      	b.n	8004996 <HAL_ADC_Init+0x4a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d102      	bne.n	8004970 <HAL_ADC_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f817 	bl	800499e <HAL_ADC_MspInit>
  }
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set ADC parameters */
  ADC_Init(hadc);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f9d7 	bl	8004d2c <ADC_Init>
  
  /* Set ADC error code to none */
  hadc->ErrorCode = HAL_ADC_ERROR_NONE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_ADC_MspInit>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
	...

080049b4 <HAL_ADC_Start>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint16_t i = 0;
 80049bc:	2300      	movs	r3, #0
 80049be:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d101      	bne.n	80049ce <HAL_ADC_Start+0x1a>
 80049ca:	2302      	movs	r3, #2
 80049cc:	e053      	b.n	8004a76 <HAL_ADC_Start+0xc2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Check if an injected conversion is ongoing */
  if(hadc->State == HAL_ADC_STATE_BUSY_INJ)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b22      	cmp	r3, #34	; 0x22
 80049e0:	d104      	bne.n	80049ec <HAL_ADC_Start+0x38>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_BUSY_INJ_REG;  
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2232      	movs	r2, #50	; 0x32
 80049e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80049ea:	e003      	b.n	80049f4 <HAL_ADC_Start+0x40>
  }
  else
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_BUSY_REG;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2212      	movs	r2, #18
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  } 
    
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d010      	beq.n	8004a24 <HAL_ADC_Start+0x70>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f042 0201 	orr.w	r2, r2, #1
 8004a10:	609a      	str	r2, [r3, #8]
    
    /* Delay inserted to wait during Tstab time the ADC's stabilization */
    for(; i <= 540; i++)
 8004a12:	e003      	b.n	8004a1c <HAL_ADC_Start+0x68>
    {
      __NOP();
 8004a14:	bf00      	nop
    for(; i <= 540; i++)
 8004a16:	89fb      	ldrh	r3, [r7, #14]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	81fb      	strh	r3, [r7, #14]
 8004a1c:	89fb      	ldrh	r3, [r7, #14]
 8004a1e:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 8004a22:	d9f7      	bls.n	8004a14 <HAL_ADC_Start+0x60>
    }
  }

  /* Check if Multimode enabled */
  if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004a24:	4b17      	ldr	r3, [pc, #92]	; (8004a84 <HAL_ADC_Start+0xd0>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f003 031f 	and.w	r3, r3, #31
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10c      	bne.n	8004a4a <HAL_ADC_Start+0x96>
  {
    /* if no external trigger present enable software conversion of regular channels */
    if(hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d119      	bne.n	8004a6c <HAL_ADC_Start+0xb8>
    {
      /* Enable the selected ADC software conversion for regular group */
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004a46:	609a      	str	r2, [r3, #8]
 8004a48:	e010      	b.n	8004a6c <HAL_ADC_Start+0xb8>
    }
  }
  else
  {
    /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
    if((hadc->Instance == ADC1) && (hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a0e      	ldr	r2, [pc, #56]	; (8004a88 <HAL_ADC_Start+0xd4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d10b      	bne.n	8004a6c <HAL_ADC_Start+0xb8>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d107      	bne.n	8004a6c <HAL_ADC_Start+0xb8>
    {
      /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004a6a:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	40012300 	.word	0x40012300
 8004a88:	40012000 	.word	0x40012000

08004a8c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout: Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004a9a:	f7ff ff27 	bl	80048ec <HAL_GetTick>
 8004a9e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004aa0:	e018      	b.n	8004ad4 <HAL_ADC_PollForConversion+0x48>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004aa8:	d014      	beq.n	8004ad4 <HAL_ADC_PollForConversion+0x48>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d007      	beq.n	8004ac0 <HAL_ADC_PollForConversion+0x34>
 8004ab0:	f7ff ff1c 	bl	80048ec <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d209      	bcs.n	8004ad4 <HAL_ADC_PollForConversion+0x48>
      {
        hadc->State= HAL_ADC_STATE_TIMEOUT;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2203      	movs	r2, #3
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e016      	b.n	8004b02 <HAL_ADC_PollForConversion+0x76>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d1df      	bne.n	8004aa2 <HAL_ADC_PollForConversion+0x16>
      }
    }
  }
  
  /* Check if an injected conversion is ready */
  if(hadc->State == HAL_ADC_STATE_EOC_INJ)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b25      	cmp	r3, #37	; 0x25
 8004aec:	d104      	bne.n	8004af8 <HAL_ADC_PollForConversion+0x6c>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_EOC_INJ_REG;  
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2235      	movs	r2, #53	; 0x35
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004af6:	e003      	b.n	8004b00 <HAL_ADC_PollForConversion+0x74>
  }
  else
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_EOC_REG;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2215      	movs	r2, #21
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <HAL_ADC_GetValue>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <HAL_ADC_ConfigChannel+0x18>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e0ed      	b.n	8004d18 <HAL_ADC_ConfigChannel+0x1f4>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b09      	cmp	r3, #9
 8004b4a:	d925      	bls.n	8004b98 <HAL_ADC_ConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68d9      	ldr	r1, [r3, #12]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	461a      	mov	r2, r3
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	4413      	add	r3, r2
 8004b60:	3b1e      	subs	r3, #30
 8004b62:	2207      	movs	r2, #7
 8004b64:	fa02 f303 	lsl.w	r3, r2, r3
 8004b68:	43da      	mvns	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	400a      	ands	r2, r1
 8004b70:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68d9      	ldr	r1, [r3, #12]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	4618      	mov	r0, r3
 8004b84:	4603      	mov	r3, r0
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	4403      	add	r3, r0
 8004b8a:	3b1e      	subs	r3, #30
 8004b8c:	409a      	lsls	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	60da      	str	r2, [r3, #12]
 8004b96:	e022      	b.n	8004bde <HAL_ADC_ConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6919      	ldr	r1, [r3, #16]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	4413      	add	r3, r2
 8004bac:	2207      	movs	r2, #7
 8004bae:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb2:	43da      	mvns	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	400a      	ands	r2, r1
 8004bba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6919      	ldr	r1, [r3, #16]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	4618      	mov	r0, r3
 8004bce:	4603      	mov	r3, r0
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	4403      	add	r3, r0
 8004bd4:	409a      	lsls	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b06      	cmp	r3, #6
 8004be4:	d824      	bhi.n	8004c30 <HAL_ADC_ConfigChannel+0x10c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	3b05      	subs	r3, #5
 8004bf8:	221f      	movs	r2, #31
 8004bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfe:	43da      	mvns	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	400a      	ands	r2, r1
 8004c06:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	4618      	mov	r0, r3
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4413      	add	r3, r2
 8004c20:	3b05      	subs	r3, #5
 8004c22:	fa00 f203 	lsl.w	r2, r0, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	635a      	str	r2, [r3, #52]	; 0x34
 8004c2e:	e04c      	b.n	8004cca <HAL_ADC_ConfigChannel+0x1a6>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	2b0c      	cmp	r3, #12
 8004c36:	d824      	bhi.n	8004c82 <HAL_ADC_ConfigChannel+0x15e>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	4613      	mov	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4413      	add	r3, r2
 8004c48:	3b23      	subs	r3, #35	; 0x23
 8004c4a:	221f      	movs	r2, #31
 8004c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c50:	43da      	mvns	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	400a      	ands	r2, r1
 8004c58:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	4618      	mov	r0, r3
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	3b23      	subs	r3, #35	; 0x23
 8004c74:	fa00 f203 	lsl.w	r2, r0, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	631a      	str	r2, [r3, #48]	; 0x30
 8004c80:	e023      	b.n	8004cca <HAL_ADC_ConfigChannel+0x1a6>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	3b41      	subs	r3, #65	; 0x41
 8004c94:	221f      	movs	r2, #31
 8004c96:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9a:	43da      	mvns	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	400a      	ands	r2, r1
 8004ca2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	3b41      	subs	r3, #65	; 0x41
 8004cbe:	fa00 f203 	lsl.w	r2, r0, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a15      	ldr	r2, [pc, #84]	; (8004d24 <HAL_ADC_ConfigChannel+0x200>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d109      	bne.n	8004ce8 <HAL_ADC_ConfigChannel+0x1c4>
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b12      	cmp	r3, #18
 8004cda:	d105      	bne.n	8004ce8 <HAL_ADC_ConfigChannel+0x1c4>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004cdc:	4b12      	ldr	r3, [pc, #72]	; (8004d28 <HAL_ADC_ConfigChannel+0x204>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	4a11      	ldr	r2, [pc, #68]	; (8004d28 <HAL_ADC_ConfigChannel+0x204>)
 8004ce2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ce6:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a0d      	ldr	r2, [pc, #52]	; (8004d24 <HAL_ADC_ConfigChannel+0x200>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d10d      	bne.n	8004d0e <HAL_ADC_ConfigChannel+0x1ea>
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b10      	cmp	r3, #16
 8004cf8:	d003      	beq.n	8004d02 <HAL_ADC_ConfigChannel+0x1de>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b11      	cmp	r3, #17
 8004d00:	d105      	bne.n	8004d0e <HAL_ADC_ConfigChannel+0x1ea>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004d02:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <HAL_ADC_ConfigChannel+0x204>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	4a08      	ldr	r2, [pc, #32]	; (8004d28 <HAL_ADC_ConfigChannel+0x204>)
 8004d08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d0c:	6053      	str	r3, [r2, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	40012000 	.word	0x40012000
 8004d28:	40012300 	.word	0x40012300

08004d2c <ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004d34:	4b6c      	ldr	r3, [pc, #432]	; (8004ee8 <ADC_Init+0x1bc>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	4a6b      	ldr	r2, [pc, #428]	; (8004ee8 <ADC_Init+0x1bc>)
 8004d3a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004d3e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004d40:	4b69      	ldr	r3, [pc, #420]	; (8004ee8 <ADC_Init+0x1bc>)
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	4967      	ldr	r1, [pc, #412]	; (8004ee8 <ADC_Init+0x1bc>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6859      	ldr	r1, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	021a      	lsls	r2, r3, #8
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004d80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6859      	ldr	r1, [r3, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689a      	ldr	r2, [r3, #8]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004da2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6899      	ldr	r1, [r3, #8]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	609a      	str	r2, [r3, #8]
  
  /* Select external trigger to start conversion */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004dc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6899      	ldr	r1, [r3, #8]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	609a      	str	r2, [r3, #8]

  /* Select external trigger polarity */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689a      	ldr	r2, [r3, #8]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004de6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6899      	ldr	r1, [r3, #8]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0202 	bic.w	r2, r2, #2
 8004e08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6899      	ldr	r1, [r3, #8]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	005a      	lsls	r2, r3, #1
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	609a      	str	r2, [r3, #8]
  
  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d01b      	beq.n	8004e5e <ADC_Init+0x132>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e34:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004e44:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6859      	ldr	r1, [r3, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e50:	3b01      	subs	r3, #1
 8004e52:	035a      	lsls	r2, r3, #13
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	605a      	str	r2, [r3, #4]
 8004e5c:	e007      	b.n	8004e6e <ADC_Init+0x142>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e6c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004e7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	051a      	lsls	r2, r3, #20
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ea2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6899      	ldr	r1, [r3, #8]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	025a      	lsls	r2, r3, #9
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6899      	ldr	r1, [r3, #8]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	029a      	lsls	r2, r3, #10
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	609a      	str	r2, [r3, #8]
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	40012300 	.word	0x40012300

08004eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f003 0307 	and.w	r3, r3, #7
 8004efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004efc:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <__NVIC_SetPriorityGrouping+0x44>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f08:	4013      	ands	r3, r2
 8004f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f1e:	4a04      	ldr	r2, [pc, #16]	; (8004f30 <__NVIC_SetPriorityGrouping+0x44>)
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	60d3      	str	r3, [r2, #12]
}
 8004f24:	bf00      	nop
 8004f26:	3714      	adds	r7, #20
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	e000ed00 	.word	0xe000ed00

08004f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f38:	4b04      	ldr	r3, [pc, #16]	; (8004f4c <__NVIC_GetPriorityGrouping+0x18>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	0a1b      	lsrs	r3, r3, #8
 8004f3e:	f003 0307 	and.w	r3, r3, #7
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	e000ed00 	.word	0xe000ed00

08004f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	4603      	mov	r3, r0
 8004f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	db0b      	blt.n	8004f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	f003 021f 	and.w	r2, r3, #31
 8004f68:	4907      	ldr	r1, [pc, #28]	; (8004f88 <__NVIC_EnableIRQ+0x38>)
 8004f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	2001      	movs	r0, #1
 8004f72:	fa00 f202 	lsl.w	r2, r0, r2
 8004f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	e000e100 	.word	0xe000e100

08004f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	4603      	mov	r3, r0
 8004f94:	6039      	str	r1, [r7, #0]
 8004f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	db0a      	blt.n	8004fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	490c      	ldr	r1, [pc, #48]	; (8004fd8 <__NVIC_SetPriority+0x4c>)
 8004fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004faa:	0112      	lsls	r2, r2, #4
 8004fac:	b2d2      	uxtb	r2, r2
 8004fae:	440b      	add	r3, r1
 8004fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fb4:	e00a      	b.n	8004fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	4908      	ldr	r1, [pc, #32]	; (8004fdc <__NVIC_SetPriority+0x50>)
 8004fbc:	79fb      	ldrb	r3, [r7, #7]
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	3b04      	subs	r3, #4
 8004fc4:	0112      	lsls	r2, r2, #4
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	440b      	add	r3, r1
 8004fca:	761a      	strb	r2, [r3, #24]
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	e000e100 	.word	0xe000e100
 8004fdc:	e000ed00 	.word	0xe000ed00

08004fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b089      	sub	sp, #36	; 0x24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	f1c3 0307 	rsb	r3, r3, #7
 8004ffa:	2b04      	cmp	r3, #4
 8004ffc:	bf28      	it	cs
 8004ffe:	2304      	movcs	r3, #4
 8005000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	3304      	adds	r3, #4
 8005006:	2b06      	cmp	r3, #6
 8005008:	d902      	bls.n	8005010 <NVIC_EncodePriority+0x30>
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	3b03      	subs	r3, #3
 800500e:	e000      	b.n	8005012 <NVIC_EncodePriority+0x32>
 8005010:	2300      	movs	r3, #0
 8005012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005014:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	fa02 f303 	lsl.w	r3, r2, r3
 800501e:	43da      	mvns	r2, r3
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	401a      	ands	r2, r3
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005028:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	fa01 f303 	lsl.w	r3, r1, r3
 8005032:	43d9      	mvns	r1, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005038:	4313      	orrs	r3, r2
         );
}
 800503a:	4618      	mov	r0, r3
 800503c:	3724      	adds	r7, #36	; 0x24
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b082      	sub	sp, #8
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7ff ff4c 	bl	8004eec <__NVIC_SetPriorityGrouping>
}
 8005054:	bf00      	nop
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	4603      	mov	r3, r0
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800506a:	2300      	movs	r3, #0
 800506c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800506e:	f7ff ff61 	bl	8004f34 <__NVIC_GetPriorityGrouping>
 8005072:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	68b9      	ldr	r1, [r7, #8]
 8005078:	6978      	ldr	r0, [r7, #20]
 800507a:	f7ff ffb1 	bl	8004fe0 <NVIC_EncodePriority>
 800507e:	4602      	mov	r2, r0
 8005080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005084:	4611      	mov	r1, r2
 8005086:	4618      	mov	r0, r3
 8005088:	f7ff ff80 	bl	8004f8c <__NVIC_SetPriority>
}
 800508c:	bf00      	nop
 800508e:	3718      	adds	r7, #24
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	4603      	mov	r3, r0
 800509c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800509e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7ff ff54 	bl	8004f50 <__NVIC_EnableIRQ>
}
 80050a8:	bf00      	nop
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80050bc:	f7ff fc16 	bl	80048ec <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e099      	b.n	8005200 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0201 	bic.w	r2, r2, #1
 80050ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050ec:	e00f      	b.n	800510e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050ee:	f7ff fbfd 	bl	80048ec <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b05      	cmp	r3, #5
 80050fa:	d908      	bls.n	800510e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2220      	movs	r2, #32
 8005100:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2203      	movs	r2, #3
 8005106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e078      	b.n	8005200 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1e8      	bne.n	80050ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	4b38      	ldr	r3, [pc, #224]	; (8005208 <HAL_DMA_Init+0x158>)
 8005128:	4013      	ands	r3, r2
 800512a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800513a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005146:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005152:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	4313      	orrs	r3, r2
 800515e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	2b04      	cmp	r3, #4
 8005166:	d107      	bne.n	8005178 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005170:	4313      	orrs	r3, r2
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	4313      	orrs	r3, r2
 8005176:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f023 0307 	bic.w	r3, r3, #7
 800518e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	4313      	orrs	r3, r2
 8005198:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d117      	bne.n	80051d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00e      	beq.n	80051d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 fb0f 	bl	80057d8 <DMA_CheckFifoParam>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d008      	beq.n	80051d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2240      	movs	r2, #64	; 0x40
 80051c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80051ce:	2301      	movs	r3, #1
 80051d0:	e016      	b.n	8005200 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fac6 	bl	800576c <DMA_CalcBaseAndBitshift>
 80051e0:	4603      	mov	r3, r0
 80051e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e8:	223f      	movs	r2, #63	; 0x3f
 80051ea:	409a      	lsls	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	f010803f 	.word	0xf010803f

0800520c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800521a:	2300      	movs	r3, #0
 800521c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005222:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800522a:	2b01      	cmp	r3, #1
 800522c:	d101      	bne.n	8005232 <HAL_DMA_Start_IT+0x26>
 800522e:	2302      	movs	r3, #2
 8005230:	e040      	b.n	80052b4 <HAL_DMA_Start_IT+0xa8>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b01      	cmp	r3, #1
 8005244:	d12f      	bne.n	80052a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2202      	movs	r2, #2
 800524a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	68b9      	ldr	r1, [r7, #8]
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 fa58 	bl	8005710 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005264:	223f      	movs	r2, #63	; 0x3f
 8005266:	409a      	lsls	r2, r3
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0216 	orr.w	r2, r2, #22
 800527a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005280:	2b00      	cmp	r3, #0
 8005282:	d007      	beq.n	8005294 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0208 	orr.w	r2, r2, #8
 8005292:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0201 	orr.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	e005      	b.n	80052b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80052ae:	2302      	movs	r3, #2
 80052b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80052b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3718      	adds	r7, #24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80052ca:	f7ff fb0f 	bl	80048ec <HAL_GetTick>
 80052ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d008      	beq.n	80052ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2280      	movs	r2, #128	; 0x80
 80052e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e052      	b.n	8005394 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0216 	bic.w	r2, r2, #22
 80052fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	695a      	ldr	r2, [r3, #20]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800530c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	2b00      	cmp	r3, #0
 8005314:	d103      	bne.n	800531e <HAL_DMA_Abort+0x62>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800531a:	2b00      	cmp	r3, #0
 800531c:	d007      	beq.n	800532e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0208 	bic.w	r2, r2, #8
 800532c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0201 	bic.w	r2, r2, #1
 800533c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800533e:	e013      	b.n	8005368 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005340:	f7ff fad4 	bl	80048ec <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b05      	cmp	r3, #5
 800534c:	d90c      	bls.n	8005368 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2220      	movs	r2, #32
 8005352:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2203      	movs	r2, #3
 8005358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e015      	b.n	8005394 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1e4      	bne.n	8005340 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800537a:	223f      	movs	r2, #63	; 0x3f
 800537c:	409a      	lsls	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d004      	beq.n	80053ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2280      	movs	r2, #128	; 0x80
 80053b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e00c      	b.n	80053d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2205      	movs	r2, #5
 80053be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0201 	bic.w	r2, r2, #1
 80053d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80053ec:	4b8e      	ldr	r3, [pc, #568]	; (8005628 <HAL_DMA_IRQHandler+0x248>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a8e      	ldr	r2, [pc, #568]	; (800562c <HAL_DMA_IRQHandler+0x24c>)
 80053f2:	fba2 2303 	umull	r2, r3, r2, r3
 80053f6:	0a9b      	lsrs	r3, r3, #10
 80053f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800540a:	2208      	movs	r2, #8
 800540c:	409a      	lsls	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	4013      	ands	r3, r2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d01a      	beq.n	800544c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	d013      	beq.n	800544c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0204 	bic.w	r2, r2, #4
 8005432:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005438:	2208      	movs	r2, #8
 800543a:	409a      	lsls	r2, r3
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005444:	f043 0201 	orr.w	r2, r3, #1
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005450:	2201      	movs	r2, #1
 8005452:	409a      	lsls	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4013      	ands	r3, r2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d012      	beq.n	8005482 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00b      	beq.n	8005482 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800546e:	2201      	movs	r2, #1
 8005470:	409a      	lsls	r2, r3
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547a:	f043 0202 	orr.w	r2, r3, #2
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005486:	2204      	movs	r2, #4
 8005488:	409a      	lsls	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4013      	ands	r3, r2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d012      	beq.n	80054b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00b      	beq.n	80054b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a4:	2204      	movs	r2, #4
 80054a6:	409a      	lsls	r2, r3
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b0:	f043 0204 	orr.w	r2, r3, #4
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054bc:	2210      	movs	r2, #16
 80054be:	409a      	lsls	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4013      	ands	r3, r2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d043      	beq.n	8005550 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0308 	and.w	r3, r3, #8
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d03c      	beq.n	8005550 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054da:	2210      	movs	r2, #16
 80054dc:	409a      	lsls	r2, r3
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d018      	beq.n	8005522 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d108      	bne.n	8005510 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	2b00      	cmp	r3, #0
 8005504:	d024      	beq.n	8005550 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	4798      	blx	r3
 800550e:	e01f      	b.n	8005550 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01b      	beq.n	8005550 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	4798      	blx	r3
 8005520:	e016      	b.n	8005550 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552c:	2b00      	cmp	r3, #0
 800552e:	d107      	bne.n	8005540 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0208 	bic.w	r2, r2, #8
 800553e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005544:	2b00      	cmp	r3, #0
 8005546:	d003      	beq.n	8005550 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005554:	2220      	movs	r2, #32
 8005556:	409a      	lsls	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4013      	ands	r3, r2
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 808f 	beq.w	8005680 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0310 	and.w	r3, r3, #16
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 8087 	beq.w	8005680 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005576:	2220      	movs	r2, #32
 8005578:	409a      	lsls	r2, r3
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b05      	cmp	r3, #5
 8005588:	d136      	bne.n	80055f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0216 	bic.w	r2, r2, #22
 8005598:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	695a      	ldr	r2, [r3, #20]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d103      	bne.n	80055ba <HAL_DMA_IRQHandler+0x1da>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d007      	beq.n	80055ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0208 	bic.w	r2, r2, #8
 80055c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ce:	223f      	movs	r2, #63	; 0x3f
 80055d0:	409a      	lsls	r2, r3
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d07e      	beq.n	80056ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	4798      	blx	r3
        }
        return;
 80055f6:	e079      	b.n	80056ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d01d      	beq.n	8005642 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10d      	bne.n	8005630 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005618:	2b00      	cmp	r3, #0
 800561a:	d031      	beq.n	8005680 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	4798      	blx	r3
 8005624:	e02c      	b.n	8005680 <HAL_DMA_IRQHandler+0x2a0>
 8005626:	bf00      	nop
 8005628:	20000008 	.word	0x20000008
 800562c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005634:	2b00      	cmp	r3, #0
 8005636:	d023      	beq.n	8005680 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	4798      	blx	r3
 8005640:	e01e      	b.n	8005680 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10f      	bne.n	8005670 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0210 	bic.w	r2, r2, #16
 800565e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005684:	2b00      	cmp	r3, #0
 8005686:	d032      	beq.n	80056ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d022      	beq.n	80056da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2205      	movs	r2, #5
 8005698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 0201 	bic.w	r2, r2, #1
 80056aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	3301      	adds	r3, #1
 80056b0:	60bb      	str	r3, [r7, #8]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d307      	bcc.n	80056c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1f2      	bne.n	80056ac <HAL_DMA_IRQHandler+0x2cc>
 80056c6:	e000      	b.n	80056ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80056c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d005      	beq.n	80056ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	4798      	blx	r3
 80056ea:	e000      	b.n	80056ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80056ec:	bf00      	nop
    }
  }
}
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005702:	b2db      	uxtb	r3, r3
}
 8005704:	4618      	mov	r0, r3
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
 800571c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800572c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	2b40      	cmp	r3, #64	; 0x40
 800573c:	d108      	bne.n	8005750 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800574e:	e007      	b.n	8005760 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	60da      	str	r2, [r3, #12]
}
 8005760:	bf00      	nop
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	b2db      	uxtb	r3, r3
 800577a:	3b10      	subs	r3, #16
 800577c:	4a14      	ldr	r2, [pc, #80]	; (80057d0 <DMA_CalcBaseAndBitshift+0x64>)
 800577e:	fba2 2303 	umull	r2, r3, r2, r3
 8005782:	091b      	lsrs	r3, r3, #4
 8005784:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005786:	4a13      	ldr	r2, [pc, #76]	; (80057d4 <DMA_CalcBaseAndBitshift+0x68>)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4413      	add	r3, r2
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	461a      	mov	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2b03      	cmp	r3, #3
 8005798:	d909      	bls.n	80057ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80057a2:	f023 0303 	bic.w	r3, r3, #3
 80057a6:	1d1a      	adds	r2, r3, #4
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	659a      	str	r2, [r3, #88]	; 0x58
 80057ac:	e007      	b.n	80057be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80057b6:	f023 0303 	bic.w	r3, r3, #3
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	aaaaaaab 	.word	0xaaaaaaab
 80057d4:	080190cc 	.word	0x080190cc

080057d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057e0:	2300      	movs	r3, #0
 80057e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d11f      	bne.n	8005832 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2b03      	cmp	r3, #3
 80057f6:	d856      	bhi.n	80058a6 <DMA_CheckFifoParam+0xce>
 80057f8:	a201      	add	r2, pc, #4	; (adr r2, 8005800 <DMA_CheckFifoParam+0x28>)
 80057fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fe:	bf00      	nop
 8005800:	08005811 	.word	0x08005811
 8005804:	08005823 	.word	0x08005823
 8005808:	08005811 	.word	0x08005811
 800580c:	080058a7 	.word	0x080058a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d046      	beq.n	80058aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005820:	e043      	b.n	80058aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005826:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800582a:	d140      	bne.n	80058ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005830:	e03d      	b.n	80058ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800583a:	d121      	bne.n	8005880 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	2b03      	cmp	r3, #3
 8005840:	d837      	bhi.n	80058b2 <DMA_CheckFifoParam+0xda>
 8005842:	a201      	add	r2, pc, #4	; (adr r2, 8005848 <DMA_CheckFifoParam+0x70>)
 8005844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005848:	08005859 	.word	0x08005859
 800584c:	0800585f 	.word	0x0800585f
 8005850:	08005859 	.word	0x08005859
 8005854:	08005871 	.word	0x08005871
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	73fb      	strb	r3, [r7, #15]
      break;
 800585c:	e030      	b.n	80058c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005862:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d025      	beq.n	80058b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800586e:	e022      	b.n	80058b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005874:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005878:	d11f      	bne.n	80058ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800587e:	e01c      	b.n	80058ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2b02      	cmp	r3, #2
 8005884:	d903      	bls.n	800588e <DMA_CheckFifoParam+0xb6>
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2b03      	cmp	r3, #3
 800588a:	d003      	beq.n	8005894 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800588c:	e018      	b.n	80058c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	73fb      	strb	r3, [r7, #15]
      break;
 8005892:	e015      	b.n	80058c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00e      	beq.n	80058be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	73fb      	strb	r3, [r7, #15]
      break;
 80058a4:	e00b      	b.n	80058be <DMA_CheckFifoParam+0xe6>
      break;
 80058a6:	bf00      	nop
 80058a8:	e00a      	b.n	80058c0 <DMA_CheckFifoParam+0xe8>
      break;
 80058aa:	bf00      	nop
 80058ac:	e008      	b.n	80058c0 <DMA_CheckFifoParam+0xe8>
      break;
 80058ae:	bf00      	nop
 80058b0:	e006      	b.n	80058c0 <DMA_CheckFifoParam+0xe8>
      break;
 80058b2:	bf00      	nop
 80058b4:	e004      	b.n	80058c0 <DMA_CheckFifoParam+0xe8>
      break;
 80058b6:	bf00      	nop
 80058b8:	e002      	b.n	80058c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80058ba:	bf00      	nop
 80058bc:	e000      	b.n	80058c0 <DMA_CheckFifoParam+0xe8>
      break;
 80058be:	bf00      	nop
    }
  } 
  
  return status; 
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop

080058d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b089      	sub	sp, #36	; 0x24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80058da:	2300      	movs	r3, #0
 80058dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80058de:	2300      	movs	r3, #0
 80058e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058e6:	2300      	movs	r3, #0
 80058e8:	61fb      	str	r3, [r7, #28]
 80058ea:	e159      	b.n	8005ba0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80058ec:	2201      	movs	r2, #1
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	fa02 f303 	lsl.w	r3, r2, r3
 80058f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	4013      	ands	r3, r2
 80058fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	429a      	cmp	r2, r3
 8005906:	f040 8148 	bne.w	8005b9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f003 0303 	and.w	r3, r3, #3
 8005912:	2b01      	cmp	r3, #1
 8005914:	d005      	beq.n	8005922 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800591e:	2b02      	cmp	r3, #2
 8005920:	d130      	bne.n	8005984 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	2203      	movs	r2, #3
 800592e:	fa02 f303 	lsl.w	r3, r2, r3
 8005932:	43db      	mvns	r3, r3
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	4013      	ands	r3, r2
 8005938:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	fa02 f303 	lsl.w	r3, r2, r3
 8005946:	69ba      	ldr	r2, [r7, #24]
 8005948:	4313      	orrs	r3, r2
 800594a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005958:	2201      	movs	r2, #1
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	fa02 f303 	lsl.w	r3, r2, r3
 8005960:	43db      	mvns	r3, r3
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	4013      	ands	r3, r2
 8005966:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	091b      	lsrs	r3, r3, #4
 800596e:	f003 0201 	and.w	r2, r3, #1
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	fa02 f303 	lsl.w	r3, r2, r3
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	4313      	orrs	r3, r2
 800597c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f003 0303 	and.w	r3, r3, #3
 800598c:	2b03      	cmp	r3, #3
 800598e:	d017      	beq.n	80059c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	005b      	lsls	r3, r3, #1
 800599a:	2203      	movs	r2, #3
 800599c:	fa02 f303 	lsl.w	r3, r2, r3
 80059a0:	43db      	mvns	r3, r3
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	4013      	ands	r3, r2
 80059a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	fa02 f303 	lsl.w	r3, r2, r3
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f003 0303 	and.w	r3, r3, #3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d123      	bne.n	8005a14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	08da      	lsrs	r2, r3, #3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3208      	adds	r2, #8
 80059d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	f003 0307 	and.w	r3, r3, #7
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	220f      	movs	r2, #15
 80059e4:	fa02 f303 	lsl.w	r3, r2, r3
 80059e8:	43db      	mvns	r3, r3
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	4013      	ands	r3, r2
 80059ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	691a      	ldr	r2, [r3, #16]
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	f003 0307 	and.w	r3, r3, #7
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	08da      	lsrs	r2, r3, #3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	3208      	adds	r2, #8
 8005a0e:	69b9      	ldr	r1, [r7, #24]
 8005a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	2203      	movs	r2, #3
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	43db      	mvns	r3, r3
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	4013      	ands	r3, r2
 8005a2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f003 0203 	and.w	r2, r3, #3
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 80a2 	beq.w	8005b9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a56:	2300      	movs	r3, #0
 8005a58:	60fb      	str	r3, [r7, #12]
 8005a5a:	4b57      	ldr	r3, [pc, #348]	; (8005bb8 <HAL_GPIO_Init+0x2e8>)
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5e:	4a56      	ldr	r2, [pc, #344]	; (8005bb8 <HAL_GPIO_Init+0x2e8>)
 8005a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a64:	6453      	str	r3, [r2, #68]	; 0x44
 8005a66:	4b54      	ldr	r3, [pc, #336]	; (8005bb8 <HAL_GPIO_Init+0x2e8>)
 8005a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a72:	4a52      	ldr	r2, [pc, #328]	; (8005bbc <HAL_GPIO_Init+0x2ec>)
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	089b      	lsrs	r3, r3, #2
 8005a78:	3302      	adds	r3, #2
 8005a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	f003 0303 	and.w	r3, r3, #3
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	220f      	movs	r2, #15
 8005a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8e:	43db      	mvns	r3, r3
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	4013      	ands	r3, r2
 8005a94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a49      	ldr	r2, [pc, #292]	; (8005bc0 <HAL_GPIO_Init+0x2f0>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d019      	beq.n	8005ad2 <HAL_GPIO_Init+0x202>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a48      	ldr	r2, [pc, #288]	; (8005bc4 <HAL_GPIO_Init+0x2f4>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d013      	beq.n	8005ace <HAL_GPIO_Init+0x1fe>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a47      	ldr	r2, [pc, #284]	; (8005bc8 <HAL_GPIO_Init+0x2f8>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d00d      	beq.n	8005aca <HAL_GPIO_Init+0x1fa>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a46      	ldr	r2, [pc, #280]	; (8005bcc <HAL_GPIO_Init+0x2fc>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d007      	beq.n	8005ac6 <HAL_GPIO_Init+0x1f6>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a45      	ldr	r2, [pc, #276]	; (8005bd0 <HAL_GPIO_Init+0x300>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d101      	bne.n	8005ac2 <HAL_GPIO_Init+0x1f2>
 8005abe:	2304      	movs	r3, #4
 8005ac0:	e008      	b.n	8005ad4 <HAL_GPIO_Init+0x204>
 8005ac2:	2307      	movs	r3, #7
 8005ac4:	e006      	b.n	8005ad4 <HAL_GPIO_Init+0x204>
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e004      	b.n	8005ad4 <HAL_GPIO_Init+0x204>
 8005aca:	2302      	movs	r3, #2
 8005acc:	e002      	b.n	8005ad4 <HAL_GPIO_Init+0x204>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e000      	b.n	8005ad4 <HAL_GPIO_Init+0x204>
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	69fa      	ldr	r2, [r7, #28]
 8005ad6:	f002 0203 	and.w	r2, r2, #3
 8005ada:	0092      	lsls	r2, r2, #2
 8005adc:	4093      	lsls	r3, r2
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ae4:	4935      	ldr	r1, [pc, #212]	; (8005bbc <HAL_GPIO_Init+0x2ec>)
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	089b      	lsrs	r3, r3, #2
 8005aea:	3302      	adds	r3, #2
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005af2:	4b38      	ldr	r3, [pc, #224]	; (8005bd4 <HAL_GPIO_Init+0x304>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	43db      	mvns	r3, r3
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	4013      	ands	r3, r2
 8005b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d003      	beq.n	8005b16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005b16:	4a2f      	ldr	r2, [pc, #188]	; (8005bd4 <HAL_GPIO_Init+0x304>)
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b1c:	4b2d      	ldr	r3, [pc, #180]	; (8005bd4 <HAL_GPIO_Init+0x304>)
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	43db      	mvns	r3, r3
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d003      	beq.n	8005b40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b40:	4a24      	ldr	r2, [pc, #144]	; (8005bd4 <HAL_GPIO_Init+0x304>)
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b46:	4b23      	ldr	r3, [pc, #140]	; (8005bd4 <HAL_GPIO_Init+0x304>)
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	43db      	mvns	r3, r3
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	4013      	ands	r3, r2
 8005b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b6a:	4a1a      	ldr	r2, [pc, #104]	; (8005bd4 <HAL_GPIO_Init+0x304>)
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b70:	4b18      	ldr	r3, [pc, #96]	; (8005bd4 <HAL_GPIO_Init+0x304>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	43db      	mvns	r3, r3
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d003      	beq.n	8005b94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b94:	4a0f      	ldr	r2, [pc, #60]	; (8005bd4 <HAL_GPIO_Init+0x304>)
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	61fb      	str	r3, [r7, #28]
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	2b0f      	cmp	r3, #15
 8005ba4:	f67f aea2 	bls.w	80058ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ba8:	bf00      	nop
 8005baa:	bf00      	nop
 8005bac:	3724      	adds	r7, #36	; 0x24
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	40023800 	.word	0x40023800
 8005bbc:	40013800 	.word	0x40013800
 8005bc0:	40020000 	.word	0x40020000
 8005bc4:	40020400 	.word	0x40020400
 8005bc8:	40020800 	.word	0x40020800
 8005bcc:	40020c00 	.word	0x40020c00
 8005bd0:	40021000 	.word	0x40021000
 8005bd4:	40013c00 	.word	0x40013c00

08005bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	460b      	mov	r3, r1
 8005be2:	807b      	strh	r3, [r7, #2]
 8005be4:	4613      	mov	r3, r2
 8005be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005be8:	787b      	ldrb	r3, [r7, #1]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bee:	887a      	ldrh	r2, [r7, #2]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005bf4:	e003      	b.n	8005bfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005bf6:	887b      	ldrh	r3, [r7, #2]
 8005bf8:	041a      	lsls	r2, r3, #16
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	619a      	str	r2, [r3, #24]
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
	...

08005c0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	4603      	mov	r3, r0
 8005c14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005c16:	4b08      	ldr	r3, [pc, #32]	; (8005c38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c18:	695a      	ldr	r2, [r3, #20]
 8005c1a:	88fb      	ldrh	r3, [r7, #6]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d006      	beq.n	8005c30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c22:	4a05      	ldr	r2, [pc, #20]	; (8005c38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c24:	88fb      	ldrh	r3, [r7, #6]
 8005c26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c28:	88fb      	ldrh	r3, [r7, #6]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7fc f842 	bl	8001cb4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005c30:	bf00      	nop
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	40013c00 	.word	0x40013c00

08005c3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e12b      	b.n	8005ea6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d106      	bne.n	8005c68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7fe f89a 	bl	8003d9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2224      	movs	r2, #36	; 0x24
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 0201 	bic.w	r2, r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005ca0:	f003 f884 	bl	8008dac <HAL_RCC_GetPCLK1Freq>
 8005ca4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	4a81      	ldr	r2, [pc, #516]	; (8005eb0 <HAL_I2C_Init+0x274>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d807      	bhi.n	8005cc0 <HAL_I2C_Init+0x84>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	4a80      	ldr	r2, [pc, #512]	; (8005eb4 <HAL_I2C_Init+0x278>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	bf94      	ite	ls
 8005cb8:	2301      	movls	r3, #1
 8005cba:	2300      	movhi	r3, #0
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	e006      	b.n	8005cce <HAL_I2C_Init+0x92>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4a7d      	ldr	r2, [pc, #500]	; (8005eb8 <HAL_I2C_Init+0x27c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	bf94      	ite	ls
 8005cc8:	2301      	movls	r3, #1
 8005cca:	2300      	movhi	r3, #0
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e0e7      	b.n	8005ea6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4a78      	ldr	r2, [pc, #480]	; (8005ebc <HAL_I2C_Init+0x280>)
 8005cda:	fba2 2303 	umull	r2, r3, r2, r3
 8005cde:	0c9b      	lsrs	r3, r3, #18
 8005ce0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	4a6a      	ldr	r2, [pc, #424]	; (8005eb0 <HAL_I2C_Init+0x274>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d802      	bhi.n	8005d10 <HAL_I2C_Init+0xd4>
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	e009      	b.n	8005d24 <HAL_I2C_Init+0xe8>
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005d16:	fb02 f303 	mul.w	r3, r2, r3
 8005d1a:	4a69      	ldr	r2, [pc, #420]	; (8005ec0 <HAL_I2C_Init+0x284>)
 8005d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d20:	099b      	lsrs	r3, r3, #6
 8005d22:	3301      	adds	r3, #1
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6812      	ldr	r2, [r2, #0]
 8005d28:	430b      	orrs	r3, r1
 8005d2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005d36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	495c      	ldr	r1, [pc, #368]	; (8005eb0 <HAL_I2C_Init+0x274>)
 8005d40:	428b      	cmp	r3, r1
 8005d42:	d819      	bhi.n	8005d78 <HAL_I2C_Init+0x13c>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	1e59      	subs	r1, r3, #1
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d52:	1c59      	adds	r1, r3, #1
 8005d54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005d58:	400b      	ands	r3, r1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00a      	beq.n	8005d74 <HAL_I2C_Init+0x138>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	1e59      	subs	r1, r3, #1
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d72:	e051      	b.n	8005e18 <HAL_I2C_Init+0x1dc>
 8005d74:	2304      	movs	r3, #4
 8005d76:	e04f      	b.n	8005e18 <HAL_I2C_Init+0x1dc>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d111      	bne.n	8005da4 <HAL_I2C_Init+0x168>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	1e58      	subs	r0, r3, #1
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6859      	ldr	r1, [r3, #4]
 8005d88:	460b      	mov	r3, r1
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	440b      	add	r3, r1
 8005d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d92:	3301      	adds	r3, #1
 8005d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	bf0c      	ite	eq
 8005d9c:	2301      	moveq	r3, #1
 8005d9e:	2300      	movne	r3, #0
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	e012      	b.n	8005dca <HAL_I2C_Init+0x18e>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	1e58      	subs	r0, r3, #1
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6859      	ldr	r1, [r3, #4]
 8005dac:	460b      	mov	r3, r1
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	440b      	add	r3, r1
 8005db2:	0099      	lsls	r1, r3, #2
 8005db4:	440b      	add	r3, r1
 8005db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dba:	3301      	adds	r3, #1
 8005dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	bf0c      	ite	eq
 8005dc4:	2301      	moveq	r3, #1
 8005dc6:	2300      	movne	r3, #0
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <HAL_I2C_Init+0x196>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e022      	b.n	8005e18 <HAL_I2C_Init+0x1dc>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10e      	bne.n	8005df8 <HAL_I2C_Init+0x1bc>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	1e58      	subs	r0, r3, #1
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6859      	ldr	r1, [r3, #4]
 8005de2:	460b      	mov	r3, r1
 8005de4:	005b      	lsls	r3, r3, #1
 8005de6:	440b      	add	r3, r1
 8005de8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dec:	3301      	adds	r3, #1
 8005dee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005df6:	e00f      	b.n	8005e18 <HAL_I2C_Init+0x1dc>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	1e58      	subs	r0, r3, #1
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6859      	ldr	r1, [r3, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	440b      	add	r3, r1
 8005e06:	0099      	lsls	r1, r3, #2
 8005e08:	440b      	add	r3, r1
 8005e0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e0e:	3301      	adds	r3, #1
 8005e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e18:	6879      	ldr	r1, [r7, #4]
 8005e1a:	6809      	ldr	r1, [r1, #0]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69da      	ldr	r2, [r3, #28]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	431a      	orrs	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005e46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	6911      	ldr	r1, [r2, #16]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	68d2      	ldr	r2, [r2, #12]
 8005e52:	4311      	orrs	r1, r2
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	6812      	ldr	r2, [r2, #0]
 8005e58:	430b      	orrs	r3, r1
 8005e5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	695a      	ldr	r2, [r3, #20]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f042 0201 	orr.w	r2, r2, #1
 8005e86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2220      	movs	r2, #32
 8005e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	000186a0 	.word	0x000186a0
 8005eb4:	001e847f 	.word	0x001e847f
 8005eb8:	003d08ff 	.word	0x003d08ff
 8005ebc:	431bde83 	.word	0x431bde83
 8005ec0:	10624dd3 	.word	0x10624dd3

08005ec4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b088      	sub	sp, #32
 8005ec8:	af02      	add	r7, sp, #8
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	607a      	str	r2, [r7, #4]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	817b      	strh	r3, [r7, #10]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ed8:	f7fe fd08 	bl	80048ec <HAL_GetTick>
 8005edc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b20      	cmp	r3, #32
 8005ee8:	f040 80e0 	bne.w	80060ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	2319      	movs	r3, #25
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	4970      	ldr	r1, [pc, #448]	; (80060b8 <HAL_I2C_Master_Transmit+0x1f4>)
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f002 f8be 	bl	8008078 <I2C_WaitOnFlagUntilTimeout>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005f02:	2302      	movs	r3, #2
 8005f04:	e0d3      	b.n	80060ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d101      	bne.n	8005f14 <HAL_I2C_Master_Transmit+0x50>
 8005f10:	2302      	movs	r3, #2
 8005f12:	e0cc      	b.n	80060ae <HAL_I2C_Master_Transmit+0x1ea>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d007      	beq.n	8005f3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f042 0201 	orr.w	r2, r2, #1
 8005f38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2221      	movs	r2, #33	; 0x21
 8005f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2210      	movs	r2, #16
 8005f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	893a      	ldrh	r2, [r7, #8]
 8005f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	4a50      	ldr	r2, [pc, #320]	; (80060bc <HAL_I2C_Master_Transmit+0x1f8>)
 8005f7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005f7c:	8979      	ldrh	r1, [r7, #10]
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	6a3a      	ldr	r2, [r7, #32]
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f001 fe80 	bl	8007c88 <I2C_MasterRequestWrite>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e08d      	b.n	80060ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f92:	2300      	movs	r3, #0
 8005f94:	613b      	str	r3, [r7, #16]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	613b      	str	r3, [r7, #16]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	613b      	str	r3, [r7, #16]
 8005fa6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005fa8:	e066      	b.n	8006078 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	6a39      	ldr	r1, [r7, #32]
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f002 f938 	bl	8008224 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00d      	beq.n	8005fd6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d107      	bne.n	8005fd2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e06b      	b.n	80060ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fda:	781a      	ldrb	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe6:	1c5a      	adds	r2, r3, #1
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ffe:	3b01      	subs	r3, #1
 8006000:	b29a      	uxth	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	f003 0304 	and.w	r3, r3, #4
 8006010:	2b04      	cmp	r3, #4
 8006012:	d11b      	bne.n	800604c <HAL_I2C_Master_Transmit+0x188>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006018:	2b00      	cmp	r3, #0
 800601a:	d017      	beq.n	800604c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	781a      	ldrb	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602c:	1c5a      	adds	r2, r3, #1
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006036:	b29b      	uxth	r3, r3
 8006038:	3b01      	subs	r3, #1
 800603a:	b29a      	uxth	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006044:	3b01      	subs	r3, #1
 8006046:	b29a      	uxth	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	6a39      	ldr	r1, [r7, #32]
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f002 f928 	bl	80082a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00d      	beq.n	8006078 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006060:	2b04      	cmp	r3, #4
 8006062:	d107      	bne.n	8006074 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006072:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e01a      	b.n	80060ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800607c:	2b00      	cmp	r3, #0
 800607e:	d194      	bne.n	8005faa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800608e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2220      	movs	r2, #32
 8006094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80060a8:	2300      	movs	r3, #0
 80060aa:	e000      	b.n	80060ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80060ac:	2302      	movs	r3, #2
  }
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3718      	adds	r7, #24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	00100002 	.word	0x00100002
 80060bc:	ffff0000 	.word	0xffff0000

080060c0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08c      	sub	sp, #48	; 0x30
 80060c4:	af02      	add	r7, sp, #8
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	607a      	str	r2, [r7, #4]
 80060ca:	461a      	mov	r2, r3
 80060cc:	460b      	mov	r3, r1
 80060ce:	817b      	strh	r3, [r7, #10]
 80060d0:	4613      	mov	r3, r2
 80060d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80060d4:	f7fe fc0a 	bl	80048ec <HAL_GetTick>
 80060d8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b20      	cmp	r3, #32
 80060e4:	f040 820b 	bne.w	80064fe <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	2319      	movs	r3, #25
 80060ee:	2201      	movs	r2, #1
 80060f0:	497c      	ldr	r1, [pc, #496]	; (80062e4 <HAL_I2C_Master_Receive+0x224>)
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f001 ffc0 	bl	8008078 <I2C_WaitOnFlagUntilTimeout>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80060fe:	2302      	movs	r3, #2
 8006100:	e1fe      	b.n	8006500 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <HAL_I2C_Master_Receive+0x50>
 800610c:	2302      	movs	r3, #2
 800610e:	e1f7      	b.n	8006500 <HAL_I2C_Master_Receive+0x440>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b01      	cmp	r3, #1
 8006124:	d007      	beq.n	8006136 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f042 0201 	orr.w	r2, r2, #1
 8006134:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006144:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2222      	movs	r2, #34	; 0x22
 800614a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2210      	movs	r2, #16
 8006152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	893a      	ldrh	r2, [r7, #8]
 8006166:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616c:	b29a      	uxth	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	4a5c      	ldr	r2, [pc, #368]	; (80062e8 <HAL_I2C_Master_Receive+0x228>)
 8006176:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006178:	8979      	ldrh	r1, [r7, #10]
 800617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f001 fe04 	bl	8007d8c <I2C_MasterRequestRead>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e1b8      	b.n	8006500 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006192:	2b00      	cmp	r3, #0
 8006194:	d113      	bne.n	80061be <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006196:	2300      	movs	r3, #0
 8006198:	623b      	str	r3, [r7, #32]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	623b      	str	r3, [r7, #32]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	623b      	str	r3, [r7, #32]
 80061aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061ba:	601a      	str	r2, [r3, #0]
 80061bc:	e18c      	b.n	80064d8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d11b      	bne.n	80061fe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061d6:	2300      	movs	r3, #0
 80061d8:	61fb      	str	r3, [r7, #28]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	61fb      	str	r3, [r7, #28]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	61fb      	str	r3, [r7, #28]
 80061ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	e16c      	b.n	80064d8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006202:	2b02      	cmp	r3, #2
 8006204:	d11b      	bne.n	800623e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006214:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006224:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006226:	2300      	movs	r3, #0
 8006228:	61bb      	str	r3, [r7, #24]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	61bb      	str	r3, [r7, #24]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	61bb      	str	r3, [r7, #24]
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	e14c      	b.n	80064d8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800624c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800624e:	2300      	movs	r3, #0
 8006250:	617b      	str	r3, [r7, #20]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	617b      	str	r3, [r7, #20]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	617b      	str	r3, [r7, #20]
 8006262:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006264:	e138      	b.n	80064d8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800626a:	2b03      	cmp	r3, #3
 800626c:	f200 80f1 	bhi.w	8006452 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006274:	2b01      	cmp	r3, #1
 8006276:	d123      	bne.n	80062c0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800627a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f002 f885 	bl	800838c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e139      	b.n	8006500 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	691a      	ldr	r2, [r3, #16]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	b2d2      	uxtb	r2, r2
 8006298:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629e:	1c5a      	adds	r2, r3, #1
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062a8:	3b01      	subs	r3, #1
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	3b01      	subs	r3, #1
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062be:	e10b      	b.n	80064d8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d14e      	bne.n	8006366 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ce:	2200      	movs	r2, #0
 80062d0:	4906      	ldr	r1, [pc, #24]	; (80062ec <HAL_I2C_Master_Receive+0x22c>)
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f001 fed0 	bl	8008078 <I2C_WaitOnFlagUntilTimeout>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d008      	beq.n	80062f0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e10e      	b.n	8006500 <HAL_I2C_Master_Receive+0x440>
 80062e2:	bf00      	nop
 80062e4:	00100002 	.word	0x00100002
 80062e8:	ffff0000 	.word	0xffff0000
 80062ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	691a      	ldr	r2, [r3, #16]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	b2d2      	uxtb	r2, r2
 800630c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800631c:	3b01      	subs	r3, #1
 800631e:	b29a      	uxth	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006328:	b29b      	uxth	r3, r3
 800632a:	3b01      	subs	r3, #1
 800632c:	b29a      	uxth	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	691a      	ldr	r2, [r3, #16]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633c:	b2d2      	uxtb	r2, r2
 800633e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006344:	1c5a      	adds	r2, r3, #1
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800634e:	3b01      	subs	r3, #1
 8006350:	b29a      	uxth	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800635a:	b29b      	uxth	r3, r3
 800635c:	3b01      	subs	r3, #1
 800635e:	b29a      	uxth	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006364:	e0b8      	b.n	80064d8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636c:	2200      	movs	r2, #0
 800636e:	4966      	ldr	r1, [pc, #408]	; (8006508 <HAL_I2C_Master_Receive+0x448>)
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f001 fe81 	bl	8008078 <I2C_WaitOnFlagUntilTimeout>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d001      	beq.n	8006380 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e0bf      	b.n	8006500 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800638e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	691a      	ldr	r2, [r3, #16]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a2:	1c5a      	adds	r2, r3, #1
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ac:	3b01      	subs	r3, #1
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	3b01      	subs	r3, #1
 80063bc:	b29a      	uxth	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c8:	2200      	movs	r2, #0
 80063ca:	494f      	ldr	r1, [pc, #316]	; (8006508 <HAL_I2C_Master_Receive+0x448>)
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f001 fe53 	bl	8008078 <I2C_WaitOnFlagUntilTimeout>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e091      	b.n	8006500 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	691a      	ldr	r2, [r3, #16]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f6:	b2d2      	uxtb	r2, r2
 80063f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fe:	1c5a      	adds	r2, r3, #1
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006408:	3b01      	subs	r3, #1
 800640a:	b29a      	uxth	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006414:	b29b      	uxth	r3, r3
 8006416:	3b01      	subs	r3, #1
 8006418:	b29a      	uxth	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	691a      	ldr	r2, [r3, #16]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006428:	b2d2      	uxtb	r2, r2
 800642a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006430:	1c5a      	adds	r2, r3, #1
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800643a:	3b01      	subs	r3, #1
 800643c:	b29a      	uxth	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006446:	b29b      	uxth	r3, r3
 8006448:	3b01      	subs	r3, #1
 800644a:	b29a      	uxth	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006450:	e042      	b.n	80064d8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006454:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f001 ff98 	bl	800838c <I2C_WaitOnRXNEFlagUntilTimeout>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e04c      	b.n	8006500 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	691a      	ldr	r2, [r3, #16]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006470:	b2d2      	uxtb	r2, r2
 8006472:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006478:	1c5a      	adds	r2, r3, #1
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006482:	3b01      	subs	r3, #1
 8006484:	b29a      	uxth	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800648e:	b29b      	uxth	r3, r3
 8006490:	3b01      	subs	r3, #1
 8006492:	b29a      	uxth	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	f003 0304 	and.w	r3, r3, #4
 80064a2:	2b04      	cmp	r3, #4
 80064a4:	d118      	bne.n	80064d8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	691a      	ldr	r2, [r3, #16]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	b2d2      	uxtb	r2, r2
 80064b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b8:	1c5a      	adds	r2, r3, #1
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064c2:	3b01      	subs	r3, #1
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	3b01      	subs	r3, #1
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f47f aec2 	bne.w	8006266 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2220      	movs	r2, #32
 80064e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80064fa:	2300      	movs	r3, #0
 80064fc:	e000      	b.n	8006500 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80064fe:	2302      	movs	r3, #2
  }
}
 8006500:	4618      	mov	r0, r3
 8006502:	3728      	adds	r7, #40	; 0x28
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	00010004 	.word	0x00010004

0800650c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b088      	sub	sp, #32
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006514:	2300      	movs	r3, #0
 8006516:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800652c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006534:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006536:	7bfb      	ldrb	r3, [r7, #15]
 8006538:	2b10      	cmp	r3, #16
 800653a:	d003      	beq.n	8006544 <HAL_I2C_EV_IRQHandler+0x38>
 800653c:	7bfb      	ldrb	r3, [r7, #15]
 800653e:	2b40      	cmp	r3, #64	; 0x40
 8006540:	f040 80b1 	bne.w	80066a6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10d      	bne.n	800657a <HAL_I2C_EV_IRQHandler+0x6e>
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006564:	d003      	beq.n	800656e <HAL_I2C_EV_IRQHandler+0x62>
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800656c:	d101      	bne.n	8006572 <HAL_I2C_EV_IRQHandler+0x66>
 800656e:	2301      	movs	r3, #1
 8006570:	e000      	b.n	8006574 <HAL_I2C_EV_IRQHandler+0x68>
 8006572:	2300      	movs	r3, #0
 8006574:	2b01      	cmp	r3, #1
 8006576:	f000 8114 	beq.w	80067a2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00b      	beq.n	800659c <HAL_I2C_EV_IRQHandler+0x90>
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800658a:	2b00      	cmp	r3, #0
 800658c:	d006      	beq.n	800659c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f001 ff81 	bl	8008496 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 fd5e 	bl	8007056 <I2C_Master_SB>
 800659a:	e083      	b.n	80066a4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	f003 0308 	and.w	r3, r3, #8
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d008      	beq.n	80065b8 <HAL_I2C_EV_IRQHandler+0xac>
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d003      	beq.n	80065b8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fdd6 	bl	8007162 <I2C_Master_ADD10>
 80065b6:	e075      	b.n	80066a4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d008      	beq.n	80065d4 <HAL_I2C_EV_IRQHandler+0xc8>
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fdf2 	bl	80071b6 <I2C_Master_ADDR>
 80065d2:	e067      	b.n	80066a4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	f003 0304 	and.w	r3, r3, #4
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d036      	beq.n	800664c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ec:	f000 80db 	beq.w	80067a6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00d      	beq.n	8006616 <HAL_I2C_EV_IRQHandler+0x10a>
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006600:	2b00      	cmp	r3, #0
 8006602:	d008      	beq.n	8006616 <HAL_I2C_EV_IRQHandler+0x10a>
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	f003 0304 	and.w	r3, r3, #4
 800660a:	2b00      	cmp	r3, #0
 800660c:	d103      	bne.n	8006616 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f9d6 	bl	80069c0 <I2C_MasterTransmit_TXE>
 8006614:	e046      	b.n	80066a4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	f003 0304 	and.w	r3, r3, #4
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 80c2 	beq.w	80067a6 <HAL_I2C_EV_IRQHandler+0x29a>
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 80bc 	beq.w	80067a6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800662e:	7bbb      	ldrb	r3, [r7, #14]
 8006630:	2b21      	cmp	r3, #33	; 0x21
 8006632:	d103      	bne.n	800663c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fa5f 	bl	8006af8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800663a:	e0b4      	b.n	80067a6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800663c:	7bfb      	ldrb	r3, [r7, #15]
 800663e:	2b40      	cmp	r3, #64	; 0x40
 8006640:	f040 80b1 	bne.w	80067a6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 facd 	bl	8006be4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800664a:	e0ac      	b.n	80067a6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006656:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800665a:	f000 80a4 	beq.w	80067a6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00d      	beq.n	8006684 <HAL_I2C_EV_IRQHandler+0x178>
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800666e:	2b00      	cmp	r3, #0
 8006670:	d008      	beq.n	8006684 <HAL_I2C_EV_IRQHandler+0x178>
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	f003 0304 	and.w	r3, r3, #4
 8006678:	2b00      	cmp	r3, #0
 800667a:	d103      	bne.n	8006684 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fb45 	bl	8006d0c <I2C_MasterReceive_RXNE>
 8006682:	e00f      	b.n	80066a4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	f003 0304 	and.w	r3, r3, #4
 800668a:	2b00      	cmp	r3, #0
 800668c:	f000 808b 	beq.w	80067a6 <HAL_I2C_EV_IRQHandler+0x29a>
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006696:	2b00      	cmp	r3, #0
 8006698:	f000 8085 	beq.w	80067a6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fbf0 	bl	8006e82 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066a2:	e080      	b.n	80067a6 <HAL_I2C_EV_IRQHandler+0x29a>
 80066a4:	e07f      	b.n	80067a6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d004      	beq.n	80066b8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	61fb      	str	r3, [r7, #28]
 80066b6:	e007      	b.n	80066c8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d011      	beq.n	80066f6 <HAL_I2C_EV_IRQHandler+0x1ea>
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00c      	beq.n	80066f6 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d003      	beq.n	80066ec <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80066ec:	69b9      	ldr	r1, [r7, #24]
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 ffb0 	bl	8007654 <I2C_Slave_ADDR>
 80066f4:	e05a      	b.n	80067ac <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	f003 0310 	and.w	r3, r3, #16
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d008      	beq.n	8006712 <HAL_I2C_EV_IRQHandler+0x206>
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 ffea 	bl	80076e4 <I2C_Slave_STOPF>
 8006710:	e04c      	b.n	80067ac <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006712:	7bbb      	ldrb	r3, [r7, #14]
 8006714:	2b21      	cmp	r3, #33	; 0x21
 8006716:	d002      	beq.n	800671e <HAL_I2C_EV_IRQHandler+0x212>
 8006718:	7bbb      	ldrb	r3, [r7, #14]
 800671a:	2b29      	cmp	r3, #41	; 0x29
 800671c:	d120      	bne.n	8006760 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00d      	beq.n	8006744 <HAL_I2C_EV_IRQHandler+0x238>
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800672e:	2b00      	cmp	r3, #0
 8006730:	d008      	beq.n	8006744 <HAL_I2C_EV_IRQHandler+0x238>
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	f003 0304 	and.w	r3, r3, #4
 8006738:	2b00      	cmp	r3, #0
 800673a:	d103      	bne.n	8006744 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fecb 	bl	80074d8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006742:	e032      	b.n	80067aa <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	f003 0304 	and.w	r3, r3, #4
 800674a:	2b00      	cmp	r3, #0
 800674c:	d02d      	beq.n	80067aa <HAL_I2C_EV_IRQHandler+0x29e>
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006754:	2b00      	cmp	r3, #0
 8006756:	d028      	beq.n	80067aa <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fefa 	bl	8007552 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800675e:	e024      	b.n	80067aa <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00d      	beq.n	8006786 <HAL_I2C_EV_IRQHandler+0x27a>
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006770:	2b00      	cmp	r3, #0
 8006772:	d008      	beq.n	8006786 <HAL_I2C_EV_IRQHandler+0x27a>
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	f003 0304 	and.w	r3, r3, #4
 800677a:	2b00      	cmp	r3, #0
 800677c:	d103      	bne.n	8006786 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 ff08 	bl	8007594 <I2C_SlaveReceive_RXNE>
 8006784:	e012      	b.n	80067ac <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	f003 0304 	and.w	r3, r3, #4
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00d      	beq.n	80067ac <HAL_I2C_EV_IRQHandler+0x2a0>
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006796:	2b00      	cmp	r3, #0
 8006798:	d008      	beq.n	80067ac <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 ff38 	bl	8007610 <I2C_SlaveReceive_BTF>
 80067a0:	e004      	b.n	80067ac <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80067a2:	bf00      	nop
 80067a4:	e002      	b.n	80067ac <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067a6:	bf00      	nop
 80067a8:	e000      	b.n	80067ac <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067aa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80067ac:	3720      	adds	r7, #32
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b08a      	sub	sp, #40	; 0x28
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	695b      	ldr	r3, [r3, #20]
 80067c0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80067ca:	2300      	movs	r3, #0
 80067cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067d4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80067d6:	6a3b      	ldr	r3, [r7, #32]
 80067d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00d      	beq.n	80067fc <HAL_I2C_ER_IRQHandler+0x4a>
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d008      	beq.n	80067fc <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	f043 0301 	orr.w	r3, r3, #1
 80067f0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80067fa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80067fc:	6a3b      	ldr	r3, [r7, #32]
 80067fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00d      	beq.n	8006822 <HAL_I2C_ER_IRQHandler+0x70>
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800680c:	2b00      	cmp	r3, #0
 800680e:	d008      	beq.n	8006822 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	f043 0302 	orr.w	r3, r3, #2
 8006816:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006820:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006822:	6a3b      	ldr	r3, [r7, #32]
 8006824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006828:	2b00      	cmp	r3, #0
 800682a:	d03e      	beq.n	80068aa <HAL_I2C_ER_IRQHandler+0xf8>
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006832:	2b00      	cmp	r3, #0
 8006834:	d039      	beq.n	80068aa <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8006836:	7efb      	ldrb	r3, [r7, #27]
 8006838:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800683e:	b29b      	uxth	r3, r3
 8006840:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006848:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006850:	7ebb      	ldrb	r3, [r7, #26]
 8006852:	2b20      	cmp	r3, #32
 8006854:	d112      	bne.n	800687c <HAL_I2C_ER_IRQHandler+0xca>
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10f      	bne.n	800687c <HAL_I2C_ER_IRQHandler+0xca>
 800685c:	7cfb      	ldrb	r3, [r7, #19]
 800685e:	2b21      	cmp	r3, #33	; 0x21
 8006860:	d008      	beq.n	8006874 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006862:	7cfb      	ldrb	r3, [r7, #19]
 8006864:	2b29      	cmp	r3, #41	; 0x29
 8006866:	d005      	beq.n	8006874 <HAL_I2C_ER_IRQHandler+0xc2>
 8006868:	7cfb      	ldrb	r3, [r7, #19]
 800686a:	2b28      	cmp	r3, #40	; 0x28
 800686c:	d106      	bne.n	800687c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2b21      	cmp	r3, #33	; 0x21
 8006872:	d103      	bne.n	800687c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f001 f865 	bl	8007944 <I2C_Slave_AF>
 800687a:	e016      	b.n	80068aa <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006884:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	f043 0304 	orr.w	r3, r3, #4
 800688c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800688e:	7efb      	ldrb	r3, [r7, #27]
 8006890:	2b10      	cmp	r3, #16
 8006892:	d002      	beq.n	800689a <HAL_I2C_ER_IRQHandler+0xe8>
 8006894:	7efb      	ldrb	r3, [r7, #27]
 8006896:	2b40      	cmp	r3, #64	; 0x40
 8006898:	d107      	bne.n	80068aa <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068a8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00d      	beq.n	80068d0 <HAL_I2C_ER_IRQHandler+0x11e>
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d008      	beq.n	80068d0 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80068be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c0:	f043 0308 	orr.w	r3, r3, #8
 80068c4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80068ce:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d008      	beq.n	80068e8 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	431a      	orrs	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f001 f89e 	bl	8007a24 <I2C_ITError>
  }
}
 80068e8:	bf00      	nop
 80068ea:	3728      	adds	r7, #40	; 0x28
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	460b      	mov	r3, r1
 800694a:	70fb      	strb	r3, [r7, #3]
 800694c:	4613      	mov	r3, r2
 800694e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069d6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069dc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d150      	bne.n	8006a88 <I2C_MasterTransmit_TXE+0xc8>
 80069e6:	7bfb      	ldrb	r3, [r7, #15]
 80069e8:	2b21      	cmp	r3, #33	; 0x21
 80069ea:	d14d      	bne.n	8006a88 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2b08      	cmp	r3, #8
 80069f0:	d01d      	beq.n	8006a2e <I2C_MasterTransmit_TXE+0x6e>
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	2b20      	cmp	r3, #32
 80069f6:	d01a      	beq.n	8006a2e <I2C_MasterTransmit_TXE+0x6e>
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80069fe:	d016      	beq.n	8006a2e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685a      	ldr	r2, [r3, #4]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a0e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2211      	movs	r2, #17
 8006a14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2220      	movs	r2, #32
 8006a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7ff ff62 	bl	80068f0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006a2c:	e060      	b.n	8006af0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a3c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a4c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b40      	cmp	r3, #64	; 0x40
 8006a66:	d107      	bne.n	8006a78 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7ff ff7d 	bl	8006970 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006a76:	e03b      	b.n	8006af0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7ff ff35 	bl	80068f0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006a86:	e033      	b.n	8006af0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006a88:	7bfb      	ldrb	r3, [r7, #15]
 8006a8a:	2b21      	cmp	r3, #33	; 0x21
 8006a8c:	d005      	beq.n	8006a9a <I2C_MasterTransmit_TXE+0xda>
 8006a8e:	7bbb      	ldrb	r3, [r7, #14]
 8006a90:	2b40      	cmp	r3, #64	; 0x40
 8006a92:	d12d      	bne.n	8006af0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
 8006a96:	2b22      	cmp	r3, #34	; 0x22
 8006a98:	d12a      	bne.n	8006af0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d108      	bne.n	8006ab6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ab2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006ab4:	e01c      	b.n	8006af0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b40      	cmp	r3, #64	; 0x40
 8006ac0:	d103      	bne.n	8006aca <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f88e 	bl	8006be4 <I2C_MemoryTransmit_TXE_BTF>
}
 8006ac8:	e012      	b.n	8006af0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ace:	781a      	ldrb	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ada:	1c5a      	adds	r2, r3, #1
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006aee:	e7ff      	b.n	8006af0 <I2C_MasterTransmit_TXE+0x130>
 8006af0:	bf00      	nop
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b04:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b21      	cmp	r3, #33	; 0x21
 8006b10:	d164      	bne.n	8006bdc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d012      	beq.n	8006b42 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b20:	781a      	ldrb	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2c:	1c5a      	adds	r2, r3, #1
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006b40:	e04c      	b.n	8006bdc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2b08      	cmp	r3, #8
 8006b46:	d01d      	beq.n	8006b84 <I2C_MasterTransmit_BTF+0x8c>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2b20      	cmp	r3, #32
 8006b4c:	d01a      	beq.n	8006b84 <I2C_MasterTransmit_BTF+0x8c>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b54:	d016      	beq.n	8006b84 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b64:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2211      	movs	r2, #17
 8006b6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2220      	movs	r2, #32
 8006b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7ff feb7 	bl	80068f0 <HAL_I2C_MasterTxCpltCallback>
}
 8006b82:	e02b      	b.n	8006bdc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b92:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ba2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2220      	movs	r2, #32
 8006bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b40      	cmp	r3, #64	; 0x40
 8006bbc:	d107      	bne.n	8006bce <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7ff fed2 	bl	8006970 <HAL_I2C_MemTxCpltCallback>
}
 8006bcc:	e006      	b.n	8006bdc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7ff fe8a 	bl	80068f0 <HAL_I2C_MasterTxCpltCallback>
}
 8006bdc:	bf00      	nop
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bf2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d11d      	bne.n	8006c38 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d10b      	bne.n	8006c1c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c08:	b2da      	uxtb	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c14:	1c9a      	adds	r2, r3, #2
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006c1a:	e073      	b.n	8006d04 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	121b      	asrs	r3, r3, #8
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006c36:	e065      	b.n	8006d04 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d10b      	bne.n	8006c58 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c50:	1c5a      	adds	r2, r3, #1
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006c56:	e055      	b.n	8006d04 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d151      	bne.n	8006d04 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
 8006c62:	2b22      	cmp	r3, #34	; 0x22
 8006c64:	d10d      	bne.n	8006c82 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c74:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006c80:	e040      	b.n	8006d04 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d015      	beq.n	8006cb8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
 8006c8e:	2b21      	cmp	r3, #33	; 0x21
 8006c90:	d112      	bne.n	8006cb8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	781a      	ldrb	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006cb6:	e025      	b.n	8006d04 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d120      	bne.n	8006d04 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
 8006cc4:	2b21      	cmp	r3, #33	; 0x21
 8006cc6:	d11d      	bne.n	8006d04 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	685a      	ldr	r2, [r3, #4]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006cd6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ce6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7ff fe36 	bl	8006970 <HAL_I2C_MemTxCpltCallback>
}
 8006d04:	bf00      	nop
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b22      	cmp	r3, #34	; 0x22
 8006d1e:	f040 80ac 	bne.w	8006e7a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2b03      	cmp	r3, #3
 8006d2e:	d921      	bls.n	8006d74 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	691a      	ldr	r2, [r3, #16]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3a:	b2d2      	uxtb	r2, r2
 8006d3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d42:	1c5a      	adds	r2, r3, #1
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	2b03      	cmp	r3, #3
 8006d5e:	f040 808c 	bne.w	8006e7a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d70:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006d72:	e082      	b.n	8006e7a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d075      	beq.n	8006e68 <I2C_MasterReceive_RXNE+0x15c>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d002      	beq.n	8006d88 <I2C_MasterReceive_RXNE+0x7c>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d16f      	bne.n	8006e68 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f001 facd 	bl	8008328 <I2C_WaitOnSTOPRequestThroughIT>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d142      	bne.n	8006e1a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006da2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	685a      	ldr	r2, [r3, #4]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006db2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	691a      	ldr	r2, [r3, #16]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbe:	b2d2      	uxtb	r2, r2
 8006dc0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc6:	1c5a      	adds	r2, r3, #1
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2220      	movs	r2, #32
 8006dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b40      	cmp	r3, #64	; 0x40
 8006dec:	d10a      	bne.n	8006e04 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f7ff fdc1 	bl	8006984 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006e02:	e03a      	b.n	8006e7a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2212      	movs	r2, #18
 8006e10:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7ff fd76 	bl	8006904 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006e18:	e02f      	b.n	8006e7a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e28:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	691a      	ldr	r2, [r3, #16]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	b2d2      	uxtb	r2, r2
 8006e36:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3c:	1c5a      	adds	r2, r3, #1
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2220      	movs	r2, #32
 8006e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f7ff fd99 	bl	8006998 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006e66:	e008      	b.n	8006e7a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e76:	605a      	str	r2, [r3, #4]
}
 8006e78:	e7ff      	b.n	8006e7a <I2C_MasterReceive_RXNE+0x16e>
 8006e7a:	bf00      	nop
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b084      	sub	sp, #16
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	2b04      	cmp	r3, #4
 8006e98:	d11b      	bne.n	8006ed2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	685a      	ldr	r2, [r3, #4]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ea8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	691a      	ldr	r2, [r3, #16]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb4:	b2d2      	uxtb	r2, r2
 8006eb6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebc:	1c5a      	adds	r2, r3, #1
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006ed0:	e0bd      	b.n	800704e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	2b03      	cmp	r3, #3
 8006eda:	d129      	bne.n	8006f30 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eea:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2b04      	cmp	r3, #4
 8006ef0:	d00a      	beq.n	8006f08 <I2C_MasterReceive_BTF+0x86>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d007      	beq.n	8006f08 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f06:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	691a      	ldr	r2, [r3, #16]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f12:	b2d2      	uxtb	r2, r2
 8006f14:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1a:	1c5a      	adds	r2, r3, #1
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	3b01      	subs	r3, #1
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006f2e:	e08e      	b.n	800704e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d176      	bne.n	8007028 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d002      	beq.n	8006f46 <I2C_MasterReceive_BTF+0xc4>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2b10      	cmp	r3, #16
 8006f44:	d108      	bne.n	8006f58 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	e019      	b.n	8006f8c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2b04      	cmp	r3, #4
 8006f5c:	d002      	beq.n	8006f64 <I2C_MasterReceive_BTF+0xe2>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d108      	bne.n	8006f76 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	e00a      	b.n	8006f8c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2b10      	cmp	r3, #16
 8006f7a:	d007      	beq.n	8006f8c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f8a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	691a      	ldr	r2, [r3, #16]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f96:	b2d2      	uxtb	r2, r2
 8006f98:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9e:	1c5a      	adds	r2, r3, #1
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	3b01      	subs	r3, #1
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	691a      	ldr	r2, [r3, #16]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbc:	b2d2      	uxtb	r2, r2
 8006fbe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc4:	1c5a      	adds	r2, r3, #1
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006fe6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2220      	movs	r2, #32
 8006fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b40      	cmp	r3, #64	; 0x40
 8006ffa:	d10a      	bne.n	8007012 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7ff fcba 	bl	8006984 <HAL_I2C_MemRxCpltCallback>
}
 8007010:	e01d      	b.n	800704e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2212      	movs	r2, #18
 800701e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f7ff fc6f 	bl	8006904 <HAL_I2C_MasterRxCpltCallback>
}
 8007026:	e012      	b.n	800704e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	691a      	ldr	r2, [r3, #16]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007032:	b2d2      	uxtb	r2, r2
 8007034:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703a:	1c5a      	adds	r2, r3, #1
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007044:	b29b      	uxth	r3, r3
 8007046:	3b01      	subs	r3, #1
 8007048:	b29a      	uxth	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800704e:	bf00      	nop
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007056:	b480      	push	{r7}
 8007058:	b083      	sub	sp, #12
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007064:	b2db      	uxtb	r3, r3
 8007066:	2b40      	cmp	r3, #64	; 0x40
 8007068:	d117      	bne.n	800709a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800706e:	2b00      	cmp	r3, #0
 8007070:	d109      	bne.n	8007086 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007076:	b2db      	uxtb	r3, r3
 8007078:	461a      	mov	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007082:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007084:	e067      	b.n	8007156 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800708a:	b2db      	uxtb	r3, r3
 800708c:	f043 0301 	orr.w	r3, r3, #1
 8007090:	b2da      	uxtb	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	611a      	str	r2, [r3, #16]
}
 8007098:	e05d      	b.n	8007156 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070a2:	d133      	bne.n	800710c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b21      	cmp	r3, #33	; 0x21
 80070ae:	d109      	bne.n	80070c4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	461a      	mov	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070c0:	611a      	str	r2, [r3, #16]
 80070c2:	e008      	b.n	80070d6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	f043 0301 	orr.w	r3, r3, #1
 80070ce:	b2da      	uxtb	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d004      	beq.n	80070e8 <I2C_Master_SB+0x92>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d108      	bne.n	80070fa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d032      	beq.n	8007156 <I2C_Master_SB+0x100>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d02d      	beq.n	8007156 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	685a      	ldr	r2, [r3, #4]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007108:	605a      	str	r2, [r3, #4]
}
 800710a:	e024      	b.n	8007156 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10e      	bne.n	8007132 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007118:	b29b      	uxth	r3, r3
 800711a:	11db      	asrs	r3, r3, #7
 800711c:	b2db      	uxtb	r3, r3
 800711e:	f003 0306 	and.w	r3, r3, #6
 8007122:	b2db      	uxtb	r3, r3
 8007124:	f063 030f 	orn	r3, r3, #15
 8007128:	b2da      	uxtb	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	611a      	str	r2, [r3, #16]
}
 8007130:	e011      	b.n	8007156 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007136:	2b01      	cmp	r3, #1
 8007138:	d10d      	bne.n	8007156 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800713e:	b29b      	uxth	r3, r3
 8007140:	11db      	asrs	r3, r3, #7
 8007142:	b2db      	uxtb	r3, r3
 8007144:	f003 0306 	and.w	r3, r3, #6
 8007148:	b2db      	uxtb	r3, r3
 800714a:	f063 030e 	orn	r3, r3, #14
 800714e:	b2da      	uxtb	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	611a      	str	r2, [r3, #16]
}
 8007156:	bf00      	nop
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007162:	b480      	push	{r7}
 8007164:	b083      	sub	sp, #12
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800716e:	b2da      	uxtb	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800717a:	2b00      	cmp	r3, #0
 800717c:	d004      	beq.n	8007188 <I2C_Master_ADD10+0x26>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007184:	2b00      	cmp	r3, #0
 8007186:	d108      	bne.n	800719a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00c      	beq.n	80071aa <I2C_Master_ADD10+0x48>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007196:	2b00      	cmp	r3, #0
 8007198:	d007      	beq.n	80071aa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071a8:	605a      	str	r2, [r3, #4]
  }
}
 80071aa:	bf00      	nop
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b091      	sub	sp, #68	; 0x44
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071cc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b22      	cmp	r3, #34	; 0x22
 80071de:	f040 8169 	bne.w	80074b4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10f      	bne.n	800720a <I2C_Master_ADDR+0x54>
 80071ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80071ee:	2b40      	cmp	r3, #64	; 0x40
 80071f0:	d10b      	bne.n	800720a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071f2:	2300      	movs	r3, #0
 80071f4:	633b      	str	r3, [r7, #48]	; 0x30
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	633b      	str	r3, [r7, #48]	; 0x30
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	633b      	str	r3, [r7, #48]	; 0x30
 8007206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007208:	e160      	b.n	80074cc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800720e:	2b00      	cmp	r3, #0
 8007210:	d11d      	bne.n	800724e <I2C_Master_ADDR+0x98>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800721a:	d118      	bne.n	800724e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800721c:	2300      	movs	r3, #0
 800721e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007230:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007240:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007246:	1c5a      	adds	r2, r3, #1
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	651a      	str	r2, [r3, #80]	; 0x50
 800724c:	e13e      	b.n	80074cc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007252:	b29b      	uxth	r3, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	d113      	bne.n	8007280 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007258:	2300      	movs	r3, #0
 800725a:	62bb      	str	r3, [r7, #40]	; 0x28
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	62bb      	str	r3, [r7, #40]	; 0x28
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	62bb      	str	r3, [r7, #40]	; 0x28
 800726c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	e115      	b.n	80074ac <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007284:	b29b      	uxth	r3, r3
 8007286:	2b01      	cmp	r3, #1
 8007288:	f040 808a 	bne.w	80073a0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800728c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007292:	d137      	bne.n	8007304 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072a2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072b2:	d113      	bne.n	80072dc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072c2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072c4:	2300      	movs	r3, #0
 80072c6:	627b      	str	r3, [r7, #36]	; 0x24
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	627b      	str	r3, [r7, #36]	; 0x24
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	627b      	str	r3, [r7, #36]	; 0x24
 80072d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072da:	e0e7      	b.n	80074ac <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072dc:	2300      	movs	r3, #0
 80072de:	623b      	str	r3, [r7, #32]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	623b      	str	r3, [r7, #32]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	623b      	str	r3, [r7, #32]
 80072f0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007300:	601a      	str	r2, [r3, #0]
 8007302:	e0d3      	b.n	80074ac <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007306:	2b08      	cmp	r3, #8
 8007308:	d02e      	beq.n	8007368 <I2C_Master_ADDR+0x1b2>
 800730a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730c:	2b20      	cmp	r3, #32
 800730e:	d02b      	beq.n	8007368 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007312:	2b12      	cmp	r3, #18
 8007314:	d102      	bne.n	800731c <I2C_Master_ADDR+0x166>
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007318:	2b01      	cmp	r3, #1
 800731a:	d125      	bne.n	8007368 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800731c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731e:	2b04      	cmp	r3, #4
 8007320:	d00e      	beq.n	8007340 <I2C_Master_ADDR+0x18a>
 8007322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007324:	2b02      	cmp	r3, #2
 8007326:	d00b      	beq.n	8007340 <I2C_Master_ADDR+0x18a>
 8007328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732a:	2b10      	cmp	r3, #16
 800732c:	d008      	beq.n	8007340 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	e007      	b.n	8007350 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800734e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007350:	2300      	movs	r3, #0
 8007352:	61fb      	str	r3, [r7, #28]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	61fb      	str	r3, [r7, #28]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	61fb      	str	r3, [r7, #28]
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	e0a1      	b.n	80074ac <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007376:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007378:	2300      	movs	r3, #0
 800737a:	61bb      	str	r3, [r7, #24]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	61bb      	str	r3, [r7, #24]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	61bb      	str	r3, [r7, #24]
 800738c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800739c:	601a      	str	r2, [r3, #0]
 800739e:	e085      	b.n	80074ac <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d14d      	bne.n	8007446 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80073aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ac:	2b04      	cmp	r3, #4
 80073ae:	d016      	beq.n	80073de <I2C_Master_ADDR+0x228>
 80073b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d013      	beq.n	80073de <I2C_Master_ADDR+0x228>
 80073b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b8:	2b10      	cmp	r3, #16
 80073ba:	d010      	beq.n	80073de <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073ca:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	e007      	b.n	80073ee <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073ec:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073fc:	d117      	bne.n	800742e <I2C_Master_ADDR+0x278>
 80073fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007400:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007404:	d00b      	beq.n	800741e <I2C_Master_ADDR+0x268>
 8007406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007408:	2b01      	cmp	r3, #1
 800740a:	d008      	beq.n	800741e <I2C_Master_ADDR+0x268>
 800740c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740e:	2b08      	cmp	r3, #8
 8007410:	d005      	beq.n	800741e <I2C_Master_ADDR+0x268>
 8007412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007414:	2b10      	cmp	r3, #16
 8007416:	d002      	beq.n	800741e <I2C_Master_ADDR+0x268>
 8007418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741a:	2b20      	cmp	r3, #32
 800741c:	d107      	bne.n	800742e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800742c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800742e:	2300      	movs	r3, #0
 8007430:	617b      	str	r3, [r7, #20]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	695b      	ldr	r3, [r3, #20]
 8007438:	617b      	str	r3, [r7, #20]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	617b      	str	r3, [r7, #20]
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	e032      	b.n	80074ac <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007454:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007464:	d117      	bne.n	8007496 <I2C_Master_ADDR+0x2e0>
 8007466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007468:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800746c:	d00b      	beq.n	8007486 <I2C_Master_ADDR+0x2d0>
 800746e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007470:	2b01      	cmp	r3, #1
 8007472:	d008      	beq.n	8007486 <I2C_Master_ADDR+0x2d0>
 8007474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007476:	2b08      	cmp	r3, #8
 8007478:	d005      	beq.n	8007486 <I2C_Master_ADDR+0x2d0>
 800747a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747c:	2b10      	cmp	r3, #16
 800747e:	d002      	beq.n	8007486 <I2C_Master_ADDR+0x2d0>
 8007480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007482:	2b20      	cmp	r3, #32
 8007484:	d107      	bne.n	8007496 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	685a      	ldr	r2, [r3, #4]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007494:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007496:	2300      	movs	r3, #0
 8007498:	613b      	str	r3, [r7, #16]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	695b      	ldr	r3, [r3, #20]
 80074a0:	613b      	str	r3, [r7, #16]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	613b      	str	r3, [r7, #16]
 80074aa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80074b2:	e00b      	b.n	80074cc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074b4:	2300      	movs	r3, #0
 80074b6:	60fb      	str	r3, [r7, #12]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	60fb      	str	r3, [r7, #12]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	60fb      	str	r3, [r7, #12]
 80074c8:	68fb      	ldr	r3, [r7, #12]
}
 80074ca:	e7ff      	b.n	80074cc <I2C_Master_ADDR+0x316>
 80074cc:	bf00      	nop
 80074ce:	3744      	adds	r7, #68	; 0x44
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d02b      	beq.n	800754a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f6:	781a      	ldrb	r2, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007502:	1c5a      	adds	r2, r3, #1
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800750c:	b29b      	uxth	r3, r3
 800750e:	3b01      	subs	r3, #1
 8007510:	b29a      	uxth	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800751a:	b29b      	uxth	r3, r3
 800751c:	2b00      	cmp	r3, #0
 800751e:	d114      	bne.n	800754a <I2C_SlaveTransmit_TXE+0x72>
 8007520:	7bfb      	ldrb	r3, [r7, #15]
 8007522:	2b29      	cmp	r3, #41	; 0x29
 8007524:	d111      	bne.n	800754a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007534:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2221      	movs	r2, #33	; 0x21
 800753a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2228      	movs	r2, #40	; 0x28
 8007540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f7ff f9e7 	bl	8006918 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800754a:	bf00      	nop
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007552:	b480      	push	{r7}
 8007554:	b083      	sub	sp, #12
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800755e:	b29b      	uxth	r3, r3
 8007560:	2b00      	cmp	r3, #0
 8007562:	d011      	beq.n	8007588 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007568:	781a      	ldrb	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007574:	1c5a      	adds	r2, r3, #1
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800757e:	b29b      	uxth	r3, r3
 8007580:	3b01      	subs	r3, #1
 8007582:	b29a      	uxth	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075a2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d02c      	beq.n	8007608 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	691a      	ldr	r2, [r3, #16]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b8:	b2d2      	uxtb	r2, r2
 80075ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c0:	1c5a      	adds	r2, r3, #1
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	3b01      	subs	r3, #1
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d8:	b29b      	uxth	r3, r3
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d114      	bne.n	8007608 <I2C_SlaveReceive_RXNE+0x74>
 80075de:	7bfb      	ldrb	r3, [r7, #15]
 80075e0:	2b2a      	cmp	r3, #42	; 0x2a
 80075e2:	d111      	bne.n	8007608 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	685a      	ldr	r2, [r3, #4]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075f2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2222      	movs	r2, #34	; 0x22
 80075f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2228      	movs	r2, #40	; 0x28
 80075fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7ff f992 	bl	800692c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007608:	bf00      	nop
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800761c:	b29b      	uxth	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d012      	beq.n	8007648 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	691a      	ldr	r2, [r3, #16]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762c:	b2d2      	uxtb	r2, r2
 800762e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007634:	1c5a      	adds	r2, r3, #1
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800763e:	b29b      	uxth	r3, r3
 8007640:	3b01      	subs	r3, #1
 8007642:	b29a      	uxth	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800765e:	2300      	movs	r3, #0
 8007660:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007668:	b2db      	uxtb	r3, r3
 800766a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800766e:	2b28      	cmp	r3, #40	; 0x28
 8007670:	d125      	bne.n	80076be <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007680:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	f003 0304 	and.w	r3, r3, #4
 8007688:	2b00      	cmp	r3, #0
 800768a:	d101      	bne.n	8007690 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800768c:	2301      	movs	r3, #1
 800768e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007696:	2b00      	cmp	r3, #0
 8007698:	d103      	bne.n	80076a2 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	81bb      	strh	r3, [r7, #12]
 80076a0:	e002      	b.n	80076a8 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80076b0:	89ba      	ldrh	r2, [r7, #12]
 80076b2:	7bfb      	ldrb	r3, [r7, #15]
 80076b4:	4619      	mov	r1, r3
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f7ff f942 	bl	8006940 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80076bc:	e00e      	b.n	80076dc <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076be:	2300      	movs	r3, #0
 80076c0:	60bb      	str	r3, [r7, #8]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	695b      	ldr	r3, [r3, #20]
 80076c8:	60bb      	str	r3, [r7, #8]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	60bb      	str	r3, [r7, #8]
 80076d2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80076dc:	bf00      	nop
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076f2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007702:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007704:	2300      	movs	r3, #0
 8007706:	60bb      	str	r3, [r7, #8]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	60bb      	str	r3, [r7, #8]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f042 0201 	orr.w	r2, r2, #1
 800771e:	601a      	str	r2, [r3, #0]
 8007720:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007730:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800773c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007740:	d172      	bne.n	8007828 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007742:	7bfb      	ldrb	r3, [r7, #15]
 8007744:	2b22      	cmp	r3, #34	; 0x22
 8007746:	d002      	beq.n	800774e <I2C_Slave_STOPF+0x6a>
 8007748:	7bfb      	ldrb	r3, [r7, #15]
 800774a:	2b2a      	cmp	r3, #42	; 0x2a
 800774c:	d135      	bne.n	80077ba <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	b29a      	uxth	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007760:	b29b      	uxth	r3, r3
 8007762:	2b00      	cmp	r3, #0
 8007764:	d005      	beq.n	8007772 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776a:	f043 0204 	orr.w	r2, r3, #4
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007780:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007786:	4618      	mov	r0, r3
 8007788:	f7fd ffb4 	bl	80056f4 <HAL_DMA_GetState>
 800778c:	4603      	mov	r3, r0
 800778e:	2b01      	cmp	r3, #1
 8007790:	d049      	beq.n	8007826 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007796:	4a69      	ldr	r2, [pc, #420]	; (800793c <I2C_Slave_STOPF+0x258>)
 8007798:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fd fdfc 	bl	800539c <HAL_DMA_Abort_IT>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d03d      	beq.n	8007826 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077b4:	4610      	mov	r0, r2
 80077b6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80077b8:	e035      	b.n	8007826 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d005      	beq.n	80077de <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d6:	f043 0204 	orr.w	r2, r3, #4
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	685a      	ldr	r2, [r3, #4]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7fd ff7e 	bl	80056f4 <HAL_DMA_GetState>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d014      	beq.n	8007828 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007802:	4a4e      	ldr	r2, [pc, #312]	; (800793c <I2C_Slave_STOPF+0x258>)
 8007804:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800780a:	4618      	mov	r0, r3
 800780c:	f7fd fdc6 	bl	800539c <HAL_DMA_Abort_IT>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d008      	beq.n	8007828 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800781a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007820:	4610      	mov	r0, r2
 8007822:	4798      	blx	r3
 8007824:	e000      	b.n	8007828 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007826:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800782c:	b29b      	uxth	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d03e      	beq.n	80078b0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	695b      	ldr	r3, [r3, #20]
 8007838:	f003 0304 	and.w	r3, r3, #4
 800783c:	2b04      	cmp	r3, #4
 800783e:	d112      	bne.n	8007866 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	691a      	ldr	r2, [r3, #16]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784a:	b2d2      	uxtb	r2, r2
 800784c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007852:	1c5a      	adds	r2, r3, #1
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800785c:	b29b      	uxth	r3, r3
 800785e:	3b01      	subs	r3, #1
 8007860:	b29a      	uxth	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	695b      	ldr	r3, [r3, #20]
 800786c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007870:	2b40      	cmp	r3, #64	; 0x40
 8007872:	d112      	bne.n	800789a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	691a      	ldr	r2, [r3, #16]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787e:	b2d2      	uxtb	r2, r2
 8007880:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007886:	1c5a      	adds	r2, r3, #1
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007890:	b29b      	uxth	r3, r3
 8007892:	3b01      	subs	r3, #1
 8007894:	b29a      	uxth	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800789e:	b29b      	uxth	r3, r3
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d005      	beq.n	80078b0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a8:	f043 0204 	orr.w	r2, r3, #4
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d003      	beq.n	80078c0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f8b3 	bl	8007a24 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80078be:	e039      	b.n	8007934 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80078c0:	7bfb      	ldrb	r3, [r7, #15]
 80078c2:	2b2a      	cmp	r3, #42	; 0x2a
 80078c4:	d109      	bne.n	80078da <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2228      	movs	r2, #40	; 0x28
 80078d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f7ff f829 	bl	800692c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b28      	cmp	r3, #40	; 0x28
 80078e4:	d111      	bne.n	800790a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a15      	ldr	r2, [pc, #84]	; (8007940 <I2C_Slave_STOPF+0x25c>)
 80078ea:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2220      	movs	r2, #32
 80078f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7ff f82a 	bl	800695c <HAL_I2C_ListenCpltCallback>
}
 8007908:	e014      	b.n	8007934 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790e:	2b22      	cmp	r3, #34	; 0x22
 8007910:	d002      	beq.n	8007918 <I2C_Slave_STOPF+0x234>
 8007912:	7bfb      	ldrb	r3, [r7, #15]
 8007914:	2b22      	cmp	r3, #34	; 0x22
 8007916:	d10d      	bne.n	8007934 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2220      	movs	r2, #32
 8007922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7fe fffc 	bl	800692c <HAL_I2C_SlaveRxCpltCallback>
}
 8007934:	bf00      	nop
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	08007f29 	.word	0x08007f29
 8007940:	ffff0000 	.word	0xffff0000

08007944 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007952:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007958:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	2b08      	cmp	r3, #8
 800795e:	d002      	beq.n	8007966 <I2C_Slave_AF+0x22>
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	2b20      	cmp	r3, #32
 8007964:	d129      	bne.n	80079ba <I2C_Slave_AF+0x76>
 8007966:	7bfb      	ldrb	r3, [r7, #15]
 8007968:	2b28      	cmp	r3, #40	; 0x28
 800796a:	d126      	bne.n	80079ba <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a2c      	ldr	r2, [pc, #176]	; (8007a20 <I2C_Slave_AF+0xdc>)
 8007970:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007980:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800798a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800799a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2220      	movs	r2, #32
 80079a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7fe ffd2 	bl	800695c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80079b8:	e02e      	b.n	8007a18 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80079ba:	7bfb      	ldrb	r3, [r7, #15]
 80079bc:	2b21      	cmp	r3, #33	; 0x21
 80079be:	d126      	bne.n	8007a0e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a17      	ldr	r2, [pc, #92]	; (8007a20 <I2C_Slave_AF+0xdc>)
 80079c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2221      	movs	r2, #33	; 0x21
 80079ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2220      	movs	r2, #32
 80079d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	685a      	ldr	r2, [r3, #4]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80079ea:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80079f4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a04:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7fe ff86 	bl	8006918 <HAL_I2C_SlaveTxCpltCallback>
}
 8007a0c:	e004      	b.n	8007a18 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a16:	615a      	str	r2, [r3, #20]
}
 8007a18:	bf00      	nop
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	ffff0000 	.word	0xffff0000

08007a24 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a32:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a3a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007a3c:	7bbb      	ldrb	r3, [r7, #14]
 8007a3e:	2b10      	cmp	r3, #16
 8007a40:	d002      	beq.n	8007a48 <I2C_ITError+0x24>
 8007a42:	7bbb      	ldrb	r3, [r7, #14]
 8007a44:	2b40      	cmp	r3, #64	; 0x40
 8007a46:	d10a      	bne.n	8007a5e <I2C_ITError+0x3a>
 8007a48:	7bfb      	ldrb	r3, [r7, #15]
 8007a4a:	2b22      	cmp	r3, #34	; 0x22
 8007a4c:	d107      	bne.n	8007a5e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a5c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
 8007a60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007a64:	2b28      	cmp	r3, #40	; 0x28
 8007a66:	d107      	bne.n	8007a78 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2228      	movs	r2, #40	; 0x28
 8007a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007a76:	e015      	b.n	8007aa4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a86:	d00a      	beq.n	8007a9e <I2C_ITError+0x7a>
 8007a88:	7bfb      	ldrb	r3, [r7, #15]
 8007a8a:	2b60      	cmp	r3, #96	; 0x60
 8007a8c:	d007      	beq.n	8007a9e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2220      	movs	r2, #32
 8007a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007aae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ab2:	d162      	bne.n	8007b7a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685a      	ldr	r2, [r3, #4]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ac2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ac8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d020      	beq.n	8007b14 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ad6:	4a6a      	ldr	r2, [pc, #424]	; (8007c80 <I2C_ITError+0x25c>)
 8007ad8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7fd fc5c 	bl	800539c <HAL_DMA_Abort_IT>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	f000 8089 	beq.w	8007bfe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f022 0201 	bic.w	r2, r2, #1
 8007afa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2220      	movs	r2, #32
 8007b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007b0e:	4610      	mov	r0, r2
 8007b10:	4798      	blx	r3
 8007b12:	e074      	b.n	8007bfe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b18:	4a59      	ldr	r2, [pc, #356]	; (8007c80 <I2C_ITError+0x25c>)
 8007b1a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7fd fc3b 	bl	800539c <HAL_DMA_Abort_IT>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d068      	beq.n	8007bfe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b36:	2b40      	cmp	r3, #64	; 0x40
 8007b38:	d10b      	bne.n	8007b52 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	691a      	ldr	r2, [r3, #16]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b44:	b2d2      	uxtb	r2, r2
 8007b46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4c:	1c5a      	adds	r2, r3, #1
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f022 0201 	bic.w	r2, r2, #1
 8007b60:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2220      	movs	r2, #32
 8007b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b74:	4610      	mov	r0, r2
 8007b76:	4798      	blx	r3
 8007b78:	e041      	b.n	8007bfe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b60      	cmp	r3, #96	; 0x60
 8007b84:	d125      	bne.n	8007bd2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	695b      	ldr	r3, [r3, #20]
 8007b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b9e:	2b40      	cmp	r3, #64	; 0x40
 8007ba0:	d10b      	bne.n	8007bba <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	691a      	ldr	r2, [r3, #16]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bac:	b2d2      	uxtb	r2, r2
 8007bae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb4:	1c5a      	adds	r2, r3, #1
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f022 0201 	bic.w	r2, r2, #1
 8007bc8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f7fe feee 	bl	80069ac <HAL_I2C_AbortCpltCallback>
 8007bd0:	e015      	b.n	8007bfe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	695b      	ldr	r3, [r3, #20]
 8007bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bdc:	2b40      	cmp	r3, #64	; 0x40
 8007bde:	d10b      	bne.n	8007bf8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	691a      	ldr	r2, [r3, #16]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bea:	b2d2      	uxtb	r2, r2
 8007bec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf2:	1c5a      	adds	r2, r3, #1
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7fe fecd 	bl	8006998 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c02:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10e      	bne.n	8007c2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d109      	bne.n	8007c2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d104      	bne.n	8007c2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d007      	beq.n	8007c3c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007c3a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c42:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c48:	f003 0304 	and.w	r3, r3, #4
 8007c4c:	2b04      	cmp	r3, #4
 8007c4e:	d113      	bne.n	8007c78 <I2C_ITError+0x254>
 8007c50:	7bfb      	ldrb	r3, [r7, #15]
 8007c52:	2b28      	cmp	r3, #40	; 0x28
 8007c54:	d110      	bne.n	8007c78 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a0a      	ldr	r2, [pc, #40]	; (8007c84 <I2C_ITError+0x260>)
 8007c5a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2220      	movs	r2, #32
 8007c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7fe fe72 	bl	800695c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007c78:	bf00      	nop
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	08007f29 	.word	0x08007f29
 8007c84:	ffff0000 	.word	0xffff0000

08007c88 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b088      	sub	sp, #32
 8007c8c:	af02      	add	r7, sp, #8
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	607a      	str	r2, [r7, #4]
 8007c92:	603b      	str	r3, [r7, #0]
 8007c94:	460b      	mov	r3, r1
 8007c96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	2b08      	cmp	r3, #8
 8007ca2:	d006      	beq.n	8007cb2 <I2C_MasterRequestWrite+0x2a>
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d003      	beq.n	8007cb2 <I2C_MasterRequestWrite+0x2a>
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007cb0:	d108      	bne.n	8007cc4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cc0:	601a      	str	r2, [r3, #0]
 8007cc2:	e00b      	b.n	8007cdc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc8:	2b12      	cmp	r3, #18
 8007cca:	d107      	bne.n	8007cdc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	9300      	str	r3, [sp, #0]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f000 f9c5 	bl	8008078 <I2C_WaitOnFlagUntilTimeout>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00d      	beq.n	8007d10 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d02:	d103      	bne.n	8007d0c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e035      	b.n	8007d7c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d18:	d108      	bne.n	8007d2c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d1a:	897b      	ldrh	r3, [r7, #10]
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	461a      	mov	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007d28:	611a      	str	r2, [r3, #16]
 8007d2a:	e01b      	b.n	8007d64 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007d2c:	897b      	ldrh	r3, [r7, #10]
 8007d2e:	11db      	asrs	r3, r3, #7
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	f003 0306 	and.w	r3, r3, #6
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	f063 030f 	orn	r3, r3, #15
 8007d3c:	b2da      	uxtb	r2, r3
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	490e      	ldr	r1, [pc, #56]	; (8007d84 <I2C_MasterRequestWrite+0xfc>)
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f000 f9eb 	bl	8008126 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d001      	beq.n	8007d5a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e010      	b.n	8007d7c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007d5a:	897b      	ldrh	r3, [r7, #10]
 8007d5c:	b2da      	uxtb	r2, r3
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	4907      	ldr	r1, [pc, #28]	; (8007d88 <I2C_MasterRequestWrite+0x100>)
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f000 f9db 	bl	8008126 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e000      	b.n	8007d7c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3718      	adds	r7, #24
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	00010008 	.word	0x00010008
 8007d88:	00010002 	.word	0x00010002

08007d8c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b088      	sub	sp, #32
 8007d90:	af02      	add	r7, sp, #8
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	607a      	str	r2, [r7, #4]
 8007d96:	603b      	str	r3, [r7, #0]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007db0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	2b08      	cmp	r3, #8
 8007db6:	d006      	beq.n	8007dc6 <I2C_MasterRequestRead+0x3a>
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d003      	beq.n	8007dc6 <I2C_MasterRequestRead+0x3a>
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007dc4:	d108      	bne.n	8007dd8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dd4:	601a      	str	r2, [r3, #0]
 8007dd6:	e00b      	b.n	8007df0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ddc:	2b11      	cmp	r3, #17
 8007dde:	d107      	bne.n	8007df0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f000 f93b 	bl	8008078 <I2C_WaitOnFlagUntilTimeout>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00d      	beq.n	8007e24 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e16:	d103      	bne.n	8007e20 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e20:	2303      	movs	r3, #3
 8007e22:	e079      	b.n	8007f18 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e2c:	d108      	bne.n	8007e40 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007e2e:	897b      	ldrh	r3, [r7, #10]
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	f043 0301 	orr.w	r3, r3, #1
 8007e36:	b2da      	uxtb	r2, r3
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	611a      	str	r2, [r3, #16]
 8007e3e:	e05f      	b.n	8007f00 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007e40:	897b      	ldrh	r3, [r7, #10]
 8007e42:	11db      	asrs	r3, r3, #7
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	f003 0306 	and.w	r3, r3, #6
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	f063 030f 	orn	r3, r3, #15
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	4930      	ldr	r1, [pc, #192]	; (8007f20 <I2C_MasterRequestRead+0x194>)
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f000 f961 	bl	8008126 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d001      	beq.n	8007e6e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e054      	b.n	8007f18 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007e6e:	897b      	ldrh	r3, [r7, #10]
 8007e70:	b2da      	uxtb	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	4929      	ldr	r1, [pc, #164]	; (8007f24 <I2C_MasterRequestRead+0x198>)
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f000 f951 	bl	8008126 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d001      	beq.n	8007e8e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e044      	b.n	8007f18 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e8e:	2300      	movs	r3, #0
 8007e90:	613b      	str	r3, [r7, #16]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	695b      	ldr	r3, [r3, #20]
 8007e98:	613b      	str	r3, [r7, #16]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	699b      	ldr	r3, [r3, #24]
 8007ea0:	613b      	str	r3, [r7, #16]
 8007ea2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007eb2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	9300      	str	r3, [sp, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f000 f8d9 	bl	8008078 <I2C_WaitOnFlagUntilTimeout>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00d      	beq.n	8007ee8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eda:	d103      	bne.n	8007ee4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ee2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e017      	b.n	8007f18 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007ee8:	897b      	ldrh	r3, [r7, #10]
 8007eea:	11db      	asrs	r3, r3, #7
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	f003 0306 	and.w	r3, r3, #6
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	f063 030e 	orn	r3, r3, #14
 8007ef8:	b2da      	uxtb	r2, r3
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	4907      	ldr	r1, [pc, #28]	; (8007f24 <I2C_MasterRequestRead+0x198>)
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f000 f90d 	bl	8008126 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d001      	beq.n	8007f16 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e000      	b.n	8007f18 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3718      	adds	r7, #24
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	00010008 	.word	0x00010008
 8007f24:	00010002 	.word	0x00010002

08007f28 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f30:	2300      	movs	r3, #0
 8007f32:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f38:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f40:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007f42:	4b4b      	ldr	r3, [pc, #300]	; (8008070 <I2C_DMAAbort+0x148>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	08db      	lsrs	r3, r3, #3
 8007f48:	4a4a      	ldr	r2, [pc, #296]	; (8008074 <I2C_DMAAbort+0x14c>)
 8007f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f4e:	0a1a      	lsrs	r2, r3, #8
 8007f50:	4613      	mov	r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	4413      	add	r3, r2
 8007f56:	00da      	lsls	r2, r3, #3
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d106      	bne.n	8007f70 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f66:	f043 0220 	orr.w	r2, r3, #32
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007f6e:	e00a      	b.n	8007f86 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	3b01      	subs	r3, #1
 8007f74:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f84:	d0ea      	beq.n	8007f5c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d003      	beq.n	8007f96 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f92:	2200      	movs	r2, #0
 8007f94:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d003      	beq.n	8007fa6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fb4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d003      	beq.n	8007fcc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc8:	2200      	movs	r2, #0
 8007fca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d003      	beq.n	8007fdc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd8:	2200      	movs	r2, #0
 8007fda:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f022 0201 	bic.w	r2, r2, #1
 8007fea:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b60      	cmp	r3, #96	; 0x60
 8007ff6:	d10e      	bne.n	8008016 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	2220      	movs	r2, #32
 8007ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	2200      	movs	r2, #0
 800800c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800800e:	6978      	ldr	r0, [r7, #20]
 8008010:	f7fe fccc 	bl	80069ac <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008014:	e027      	b.n	8008066 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008016:	7cfb      	ldrb	r3, [r7, #19]
 8008018:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800801c:	2b28      	cmp	r3, #40	; 0x28
 800801e:	d117      	bne.n	8008050 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f042 0201 	orr.w	r2, r2, #1
 800802e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800803e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	2200      	movs	r2, #0
 8008044:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	2228      	movs	r2, #40	; 0x28
 800804a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800804e:	e007      	b.n	8008060 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	2220      	movs	r2, #32
 8008054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	2200      	movs	r2, #0
 800805c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008060:	6978      	ldr	r0, [r7, #20]
 8008062:	f7fe fc99 	bl	8006998 <HAL_I2C_ErrorCallback>
}
 8008066:	bf00      	nop
 8008068:	3718      	adds	r7, #24
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	20000008 	.word	0x20000008
 8008074:	14f8b589 	.word	0x14f8b589

08008078 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	603b      	str	r3, [r7, #0]
 8008084:	4613      	mov	r3, r2
 8008086:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008088:	e025      	b.n	80080d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008090:	d021      	beq.n	80080d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008092:	f7fc fc2b 	bl	80048ec <HAL_GetTick>
 8008096:	4602      	mov	r2, r0
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	683a      	ldr	r2, [r7, #0]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d302      	bcc.n	80080a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d116      	bne.n	80080d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2200      	movs	r2, #0
 80080ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2220      	movs	r2, #32
 80080b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c2:	f043 0220 	orr.w	r2, r3, #32
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e023      	b.n	800811e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	0c1b      	lsrs	r3, r3, #16
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d10d      	bne.n	80080fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	43da      	mvns	r2, r3
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	4013      	ands	r3, r2
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	bf0c      	ite	eq
 80080f2:	2301      	moveq	r3, #1
 80080f4:	2300      	movne	r3, #0
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	461a      	mov	r2, r3
 80080fa:	e00c      	b.n	8008116 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	43da      	mvns	r2, r3
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	4013      	ands	r3, r2
 8008108:	b29b      	uxth	r3, r3
 800810a:	2b00      	cmp	r3, #0
 800810c:	bf0c      	ite	eq
 800810e:	2301      	moveq	r3, #1
 8008110:	2300      	movne	r3, #0
 8008112:	b2db      	uxtb	r3, r3
 8008114:	461a      	mov	r2, r3
 8008116:	79fb      	ldrb	r3, [r7, #7]
 8008118:	429a      	cmp	r2, r3
 800811a:	d0b6      	beq.n	800808a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b084      	sub	sp, #16
 800812a:	af00      	add	r7, sp, #0
 800812c:	60f8      	str	r0, [r7, #12]
 800812e:	60b9      	str	r1, [r7, #8]
 8008130:	607a      	str	r2, [r7, #4]
 8008132:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008134:	e051      	b.n	80081da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	695b      	ldr	r3, [r3, #20]
 800813c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008144:	d123      	bne.n	800818e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008154:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800815e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2200      	movs	r2, #0
 8008164:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2220      	movs	r2, #32
 800816a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817a:	f043 0204 	orr.w	r2, r3, #4
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e046      	b.n	800821c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008194:	d021      	beq.n	80081da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008196:	f7fc fba9 	bl	80048ec <HAL_GetTick>
 800819a:	4602      	mov	r2, r0
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d302      	bcc.n	80081ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d116      	bne.n	80081da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2220      	movs	r2, #32
 80081b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c6:	f043 0220 	orr.w	r2, r3, #32
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e020      	b.n	800821c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	0c1b      	lsrs	r3, r3, #16
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d10c      	bne.n	80081fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	695b      	ldr	r3, [r3, #20]
 80081ea:	43da      	mvns	r2, r3
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	4013      	ands	r3, r2
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	bf14      	ite	ne
 80081f6:	2301      	movne	r3, #1
 80081f8:	2300      	moveq	r3, #0
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	e00b      	b.n	8008216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	43da      	mvns	r2, r3
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	4013      	ands	r3, r2
 800820a:	b29b      	uxth	r3, r3
 800820c:	2b00      	cmp	r3, #0
 800820e:	bf14      	ite	ne
 8008210:	2301      	movne	r3, #1
 8008212:	2300      	moveq	r3, #0
 8008214:	b2db      	uxtb	r3, r3
 8008216:	2b00      	cmp	r3, #0
 8008218:	d18d      	bne.n	8008136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008230:	e02d      	b.n	800828e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f000 f900 	bl	8008438 <I2C_IsAcknowledgeFailed>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d001      	beq.n	8008242 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e02d      	b.n	800829e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008248:	d021      	beq.n	800828e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800824a:	f7fc fb4f 	bl	80048ec <HAL_GetTick>
 800824e:	4602      	mov	r2, r0
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	1ad3      	subs	r3, r2, r3
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	429a      	cmp	r2, r3
 8008258:	d302      	bcc.n	8008260 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d116      	bne.n	800828e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2200      	movs	r2, #0
 8008264:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2220      	movs	r2, #32
 800826a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827a:	f043 0220 	orr.w	r2, r3, #32
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e007      	b.n	800829e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	695b      	ldr	r3, [r3, #20]
 8008294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008298:	2b80      	cmp	r3, #128	; 0x80
 800829a:	d1ca      	bne.n	8008232 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b084      	sub	sp, #16
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	60f8      	str	r0, [r7, #12]
 80082ae:	60b9      	str	r1, [r7, #8]
 80082b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80082b2:	e02d      	b.n	8008310 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f000 f8bf 	bl	8008438 <I2C_IsAcknowledgeFailed>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d001      	beq.n	80082c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	e02d      	b.n	8008320 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082ca:	d021      	beq.n	8008310 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082cc:	f7fc fb0e 	bl	80048ec <HAL_GetTick>
 80082d0:	4602      	mov	r2, r0
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	68ba      	ldr	r2, [r7, #8]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d302      	bcc.n	80082e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d116      	bne.n	8008310 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2200      	movs	r2, #0
 80082e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2220      	movs	r2, #32
 80082ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fc:	f043 0220 	orr.w	r2, r3, #32
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2200      	movs	r2, #0
 8008308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	e007      	b.n	8008320 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	695b      	ldr	r3, [r3, #20]
 8008316:	f003 0304 	and.w	r3, r3, #4
 800831a:	2b04      	cmp	r3, #4
 800831c:	d1ca      	bne.n	80082b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008330:	2300      	movs	r3, #0
 8008332:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008334:	4b13      	ldr	r3, [pc, #76]	; (8008384 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	08db      	lsrs	r3, r3, #3
 800833a:	4a13      	ldr	r2, [pc, #76]	; (8008388 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800833c:	fba2 2303 	umull	r2, r3, r2, r3
 8008340:	0a1a      	lsrs	r2, r3, #8
 8008342:	4613      	mov	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4413      	add	r3, r2
 8008348:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	3b01      	subs	r3, #1
 800834e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d107      	bne.n	8008366 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835a:	f043 0220 	orr.w	r2, r3, #32
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e008      	b.n	8008378 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008374:	d0e9      	beq.n	800834a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3714      	adds	r7, #20
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr
 8008384:	20000008 	.word	0x20000008
 8008388:	14f8b589 	.word	0x14f8b589

0800838c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008398:	e042      	b.n	8008420 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	695b      	ldr	r3, [r3, #20]
 80083a0:	f003 0310 	and.w	r3, r3, #16
 80083a4:	2b10      	cmp	r3, #16
 80083a6:	d119      	bne.n	80083dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f06f 0210 	mvn.w	r2, #16
 80083b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2220      	movs	r2, #32
 80083bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e029      	b.n	8008430 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083dc:	f7fc fa86 	bl	80048ec <HAL_GetTick>
 80083e0:	4602      	mov	r2, r0
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d302      	bcc.n	80083f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d116      	bne.n	8008420 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2220      	movs	r2, #32
 80083fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2200      	movs	r2, #0
 8008404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840c:	f043 0220 	orr.w	r2, r3, #32
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2200      	movs	r2, #0
 8008418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	e007      	b.n	8008430 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800842a:	2b40      	cmp	r3, #64	; 0x40
 800842c:	d1b5      	bne.n	800839a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3710      	adds	r7, #16
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	695b      	ldr	r3, [r3, #20]
 8008446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800844a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800844e:	d11b      	bne.n	8008488 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008458:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2220      	movs	r2, #32
 8008464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008474:	f043 0204 	orr.w	r2, r3, #4
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	e000      	b.n	800848a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	370c      	adds	r7, #12
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr

08008496 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008496:	b480      	push	{r7}
 8008498:	b083      	sub	sp, #12
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80084a6:	d103      	bne.n	80084b0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80084ae:	e007      	b.n	80084c0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80084b8:	d102      	bne.n	80084c0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2208      	movs	r2, #8
 80084be:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b086      	sub	sp, #24
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d101      	bne.n	80084de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e267      	b.n	80089ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 0301 	and.w	r3, r3, #1
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d075      	beq.n	80085d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80084ea:	4b88      	ldr	r3, [pc, #544]	; (800870c <HAL_RCC_OscConfig+0x240>)
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	f003 030c 	and.w	r3, r3, #12
 80084f2:	2b04      	cmp	r3, #4
 80084f4:	d00c      	beq.n	8008510 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084f6:	4b85      	ldr	r3, [pc, #532]	; (800870c <HAL_RCC_OscConfig+0x240>)
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80084fe:	2b08      	cmp	r3, #8
 8008500:	d112      	bne.n	8008528 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008502:	4b82      	ldr	r3, [pc, #520]	; (800870c <HAL_RCC_OscConfig+0x240>)
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800850a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800850e:	d10b      	bne.n	8008528 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008510:	4b7e      	ldr	r3, [pc, #504]	; (800870c <HAL_RCC_OscConfig+0x240>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008518:	2b00      	cmp	r3, #0
 800851a:	d05b      	beq.n	80085d4 <HAL_RCC_OscConfig+0x108>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d157      	bne.n	80085d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	e242      	b.n	80089ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008530:	d106      	bne.n	8008540 <HAL_RCC_OscConfig+0x74>
 8008532:	4b76      	ldr	r3, [pc, #472]	; (800870c <HAL_RCC_OscConfig+0x240>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a75      	ldr	r2, [pc, #468]	; (800870c <HAL_RCC_OscConfig+0x240>)
 8008538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800853c:	6013      	str	r3, [r2, #0]
 800853e:	e01d      	b.n	800857c <HAL_RCC_OscConfig+0xb0>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008548:	d10c      	bne.n	8008564 <HAL_RCC_OscConfig+0x98>
 800854a:	4b70      	ldr	r3, [pc, #448]	; (800870c <HAL_RCC_OscConfig+0x240>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a6f      	ldr	r2, [pc, #444]	; (800870c <HAL_RCC_OscConfig+0x240>)
 8008550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008554:	6013      	str	r3, [r2, #0]
 8008556:	4b6d      	ldr	r3, [pc, #436]	; (800870c <HAL_RCC_OscConfig+0x240>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a6c      	ldr	r2, [pc, #432]	; (800870c <HAL_RCC_OscConfig+0x240>)
 800855c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008560:	6013      	str	r3, [r2, #0]
 8008562:	e00b      	b.n	800857c <HAL_RCC_OscConfig+0xb0>
 8008564:	4b69      	ldr	r3, [pc, #420]	; (800870c <HAL_RCC_OscConfig+0x240>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a68      	ldr	r2, [pc, #416]	; (800870c <HAL_RCC_OscConfig+0x240>)
 800856a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800856e:	6013      	str	r3, [r2, #0]
 8008570:	4b66      	ldr	r3, [pc, #408]	; (800870c <HAL_RCC_OscConfig+0x240>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a65      	ldr	r2, [pc, #404]	; (800870c <HAL_RCC_OscConfig+0x240>)
 8008576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800857a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d013      	beq.n	80085ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008584:	f7fc f9b2 	bl	80048ec <HAL_GetTick>
 8008588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800858a:	e008      	b.n	800859e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800858c:	f7fc f9ae 	bl	80048ec <HAL_GetTick>
 8008590:	4602      	mov	r2, r0
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	2b64      	cmp	r3, #100	; 0x64
 8008598:	d901      	bls.n	800859e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e207      	b.n	80089ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800859e:	4b5b      	ldr	r3, [pc, #364]	; (800870c <HAL_RCC_OscConfig+0x240>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d0f0      	beq.n	800858c <HAL_RCC_OscConfig+0xc0>
 80085aa:	e014      	b.n	80085d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085ac:	f7fc f99e 	bl	80048ec <HAL_GetTick>
 80085b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085b2:	e008      	b.n	80085c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085b4:	f7fc f99a 	bl	80048ec <HAL_GetTick>
 80085b8:	4602      	mov	r2, r0
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	2b64      	cmp	r3, #100	; 0x64
 80085c0:	d901      	bls.n	80085c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80085c2:	2303      	movs	r3, #3
 80085c4:	e1f3      	b.n	80089ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085c6:	4b51      	ldr	r3, [pc, #324]	; (800870c <HAL_RCC_OscConfig+0x240>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1f0      	bne.n	80085b4 <HAL_RCC_OscConfig+0xe8>
 80085d2:	e000      	b.n	80085d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 0302 	and.w	r3, r3, #2
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d063      	beq.n	80086aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80085e2:	4b4a      	ldr	r3, [pc, #296]	; (800870c <HAL_RCC_OscConfig+0x240>)
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	f003 030c 	and.w	r3, r3, #12
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00b      	beq.n	8008606 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80085ee:	4b47      	ldr	r3, [pc, #284]	; (800870c <HAL_RCC_OscConfig+0x240>)
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80085f6:	2b08      	cmp	r3, #8
 80085f8:	d11c      	bne.n	8008634 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80085fa:	4b44      	ldr	r3, [pc, #272]	; (800870c <HAL_RCC_OscConfig+0x240>)
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008602:	2b00      	cmp	r3, #0
 8008604:	d116      	bne.n	8008634 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008606:	4b41      	ldr	r3, [pc, #260]	; (800870c <HAL_RCC_OscConfig+0x240>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f003 0302 	and.w	r3, r3, #2
 800860e:	2b00      	cmp	r3, #0
 8008610:	d005      	beq.n	800861e <HAL_RCC_OscConfig+0x152>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	2b01      	cmp	r3, #1
 8008618:	d001      	beq.n	800861e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e1c7      	b.n	80089ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800861e:	4b3b      	ldr	r3, [pc, #236]	; (800870c <HAL_RCC_OscConfig+0x240>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	00db      	lsls	r3, r3, #3
 800862c:	4937      	ldr	r1, [pc, #220]	; (800870c <HAL_RCC_OscConfig+0x240>)
 800862e:	4313      	orrs	r3, r2
 8008630:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008632:	e03a      	b.n	80086aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d020      	beq.n	800867e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800863c:	4b34      	ldr	r3, [pc, #208]	; (8008710 <HAL_RCC_OscConfig+0x244>)
 800863e:	2201      	movs	r2, #1
 8008640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008642:	f7fc f953 	bl	80048ec <HAL_GetTick>
 8008646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008648:	e008      	b.n	800865c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800864a:	f7fc f94f 	bl	80048ec <HAL_GetTick>
 800864e:	4602      	mov	r2, r0
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	2b02      	cmp	r3, #2
 8008656:	d901      	bls.n	800865c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008658:	2303      	movs	r3, #3
 800865a:	e1a8      	b.n	80089ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800865c:	4b2b      	ldr	r3, [pc, #172]	; (800870c <HAL_RCC_OscConfig+0x240>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f003 0302 	and.w	r3, r3, #2
 8008664:	2b00      	cmp	r3, #0
 8008666:	d0f0      	beq.n	800864a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008668:	4b28      	ldr	r3, [pc, #160]	; (800870c <HAL_RCC_OscConfig+0x240>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	00db      	lsls	r3, r3, #3
 8008676:	4925      	ldr	r1, [pc, #148]	; (800870c <HAL_RCC_OscConfig+0x240>)
 8008678:	4313      	orrs	r3, r2
 800867a:	600b      	str	r3, [r1, #0]
 800867c:	e015      	b.n	80086aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800867e:	4b24      	ldr	r3, [pc, #144]	; (8008710 <HAL_RCC_OscConfig+0x244>)
 8008680:	2200      	movs	r2, #0
 8008682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008684:	f7fc f932 	bl	80048ec <HAL_GetTick>
 8008688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800868a:	e008      	b.n	800869e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800868c:	f7fc f92e 	bl	80048ec <HAL_GetTick>
 8008690:	4602      	mov	r2, r0
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	2b02      	cmp	r3, #2
 8008698:	d901      	bls.n	800869e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800869a:	2303      	movs	r3, #3
 800869c:	e187      	b.n	80089ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800869e:	4b1b      	ldr	r3, [pc, #108]	; (800870c <HAL_RCC_OscConfig+0x240>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f003 0302 	and.w	r3, r3, #2
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1f0      	bne.n	800868c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 0308 	and.w	r3, r3, #8
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d036      	beq.n	8008724 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	695b      	ldr	r3, [r3, #20]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d016      	beq.n	80086ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80086be:	4b15      	ldr	r3, [pc, #84]	; (8008714 <HAL_RCC_OscConfig+0x248>)
 80086c0:	2201      	movs	r2, #1
 80086c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086c4:	f7fc f912 	bl	80048ec <HAL_GetTick>
 80086c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086ca:	e008      	b.n	80086de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086cc:	f7fc f90e 	bl	80048ec <HAL_GetTick>
 80086d0:	4602      	mov	r2, r0
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d901      	bls.n	80086de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80086da:	2303      	movs	r3, #3
 80086dc:	e167      	b.n	80089ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086de:	4b0b      	ldr	r3, [pc, #44]	; (800870c <HAL_RCC_OscConfig+0x240>)
 80086e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086e2:	f003 0302 	and.w	r3, r3, #2
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d0f0      	beq.n	80086cc <HAL_RCC_OscConfig+0x200>
 80086ea:	e01b      	b.n	8008724 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80086ec:	4b09      	ldr	r3, [pc, #36]	; (8008714 <HAL_RCC_OscConfig+0x248>)
 80086ee:	2200      	movs	r2, #0
 80086f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086f2:	f7fc f8fb 	bl	80048ec <HAL_GetTick>
 80086f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086f8:	e00e      	b.n	8008718 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086fa:	f7fc f8f7 	bl	80048ec <HAL_GetTick>
 80086fe:	4602      	mov	r2, r0
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	2b02      	cmp	r3, #2
 8008706:	d907      	bls.n	8008718 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008708:	2303      	movs	r3, #3
 800870a:	e150      	b.n	80089ae <HAL_RCC_OscConfig+0x4e2>
 800870c:	40023800 	.word	0x40023800
 8008710:	42470000 	.word	0x42470000
 8008714:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008718:	4b88      	ldr	r3, [pc, #544]	; (800893c <HAL_RCC_OscConfig+0x470>)
 800871a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800871c:	f003 0302 	and.w	r3, r3, #2
 8008720:	2b00      	cmp	r3, #0
 8008722:	d1ea      	bne.n	80086fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 0304 	and.w	r3, r3, #4
 800872c:	2b00      	cmp	r3, #0
 800872e:	f000 8097 	beq.w	8008860 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008732:	2300      	movs	r3, #0
 8008734:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008736:	4b81      	ldr	r3, [pc, #516]	; (800893c <HAL_RCC_OscConfig+0x470>)
 8008738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10f      	bne.n	8008762 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008742:	2300      	movs	r3, #0
 8008744:	60bb      	str	r3, [r7, #8]
 8008746:	4b7d      	ldr	r3, [pc, #500]	; (800893c <HAL_RCC_OscConfig+0x470>)
 8008748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874a:	4a7c      	ldr	r2, [pc, #496]	; (800893c <HAL_RCC_OscConfig+0x470>)
 800874c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008750:	6413      	str	r3, [r2, #64]	; 0x40
 8008752:	4b7a      	ldr	r3, [pc, #488]	; (800893c <HAL_RCC_OscConfig+0x470>)
 8008754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800875a:	60bb      	str	r3, [r7, #8]
 800875c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800875e:	2301      	movs	r3, #1
 8008760:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008762:	4b77      	ldr	r3, [pc, #476]	; (8008940 <HAL_RCC_OscConfig+0x474>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800876a:	2b00      	cmp	r3, #0
 800876c:	d118      	bne.n	80087a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800876e:	4b74      	ldr	r3, [pc, #464]	; (8008940 <HAL_RCC_OscConfig+0x474>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a73      	ldr	r2, [pc, #460]	; (8008940 <HAL_RCC_OscConfig+0x474>)
 8008774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800877a:	f7fc f8b7 	bl	80048ec <HAL_GetTick>
 800877e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008780:	e008      	b.n	8008794 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008782:	f7fc f8b3 	bl	80048ec <HAL_GetTick>
 8008786:	4602      	mov	r2, r0
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	2b02      	cmp	r3, #2
 800878e:	d901      	bls.n	8008794 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	e10c      	b.n	80089ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008794:	4b6a      	ldr	r3, [pc, #424]	; (8008940 <HAL_RCC_OscConfig+0x474>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800879c:	2b00      	cmp	r3, #0
 800879e:	d0f0      	beq.n	8008782 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d106      	bne.n	80087b6 <HAL_RCC_OscConfig+0x2ea>
 80087a8:	4b64      	ldr	r3, [pc, #400]	; (800893c <HAL_RCC_OscConfig+0x470>)
 80087aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ac:	4a63      	ldr	r2, [pc, #396]	; (800893c <HAL_RCC_OscConfig+0x470>)
 80087ae:	f043 0301 	orr.w	r3, r3, #1
 80087b2:	6713      	str	r3, [r2, #112]	; 0x70
 80087b4:	e01c      	b.n	80087f0 <HAL_RCC_OscConfig+0x324>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	2b05      	cmp	r3, #5
 80087bc:	d10c      	bne.n	80087d8 <HAL_RCC_OscConfig+0x30c>
 80087be:	4b5f      	ldr	r3, [pc, #380]	; (800893c <HAL_RCC_OscConfig+0x470>)
 80087c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087c2:	4a5e      	ldr	r2, [pc, #376]	; (800893c <HAL_RCC_OscConfig+0x470>)
 80087c4:	f043 0304 	orr.w	r3, r3, #4
 80087c8:	6713      	str	r3, [r2, #112]	; 0x70
 80087ca:	4b5c      	ldr	r3, [pc, #368]	; (800893c <HAL_RCC_OscConfig+0x470>)
 80087cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ce:	4a5b      	ldr	r2, [pc, #364]	; (800893c <HAL_RCC_OscConfig+0x470>)
 80087d0:	f043 0301 	orr.w	r3, r3, #1
 80087d4:	6713      	str	r3, [r2, #112]	; 0x70
 80087d6:	e00b      	b.n	80087f0 <HAL_RCC_OscConfig+0x324>
 80087d8:	4b58      	ldr	r3, [pc, #352]	; (800893c <HAL_RCC_OscConfig+0x470>)
 80087da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087dc:	4a57      	ldr	r2, [pc, #348]	; (800893c <HAL_RCC_OscConfig+0x470>)
 80087de:	f023 0301 	bic.w	r3, r3, #1
 80087e2:	6713      	str	r3, [r2, #112]	; 0x70
 80087e4:	4b55      	ldr	r3, [pc, #340]	; (800893c <HAL_RCC_OscConfig+0x470>)
 80087e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087e8:	4a54      	ldr	r2, [pc, #336]	; (800893c <HAL_RCC_OscConfig+0x470>)
 80087ea:	f023 0304 	bic.w	r3, r3, #4
 80087ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d015      	beq.n	8008824 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087f8:	f7fc f878 	bl	80048ec <HAL_GetTick>
 80087fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087fe:	e00a      	b.n	8008816 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008800:	f7fc f874 	bl	80048ec <HAL_GetTick>
 8008804:	4602      	mov	r2, r0
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	f241 3288 	movw	r2, #5000	; 0x1388
 800880e:	4293      	cmp	r3, r2
 8008810:	d901      	bls.n	8008816 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008812:	2303      	movs	r3, #3
 8008814:	e0cb      	b.n	80089ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008816:	4b49      	ldr	r3, [pc, #292]	; (800893c <HAL_RCC_OscConfig+0x470>)
 8008818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800881a:	f003 0302 	and.w	r3, r3, #2
 800881e:	2b00      	cmp	r3, #0
 8008820:	d0ee      	beq.n	8008800 <HAL_RCC_OscConfig+0x334>
 8008822:	e014      	b.n	800884e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008824:	f7fc f862 	bl	80048ec <HAL_GetTick>
 8008828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800882a:	e00a      	b.n	8008842 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800882c:	f7fc f85e 	bl	80048ec <HAL_GetTick>
 8008830:	4602      	mov	r2, r0
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	f241 3288 	movw	r2, #5000	; 0x1388
 800883a:	4293      	cmp	r3, r2
 800883c:	d901      	bls.n	8008842 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e0b5      	b.n	80089ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008842:	4b3e      	ldr	r3, [pc, #248]	; (800893c <HAL_RCC_OscConfig+0x470>)
 8008844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008846:	f003 0302 	and.w	r3, r3, #2
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1ee      	bne.n	800882c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800884e:	7dfb      	ldrb	r3, [r7, #23]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d105      	bne.n	8008860 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008854:	4b39      	ldr	r3, [pc, #228]	; (800893c <HAL_RCC_OscConfig+0x470>)
 8008856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008858:	4a38      	ldr	r2, [pc, #224]	; (800893c <HAL_RCC_OscConfig+0x470>)
 800885a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800885e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	2b00      	cmp	r3, #0
 8008866:	f000 80a1 	beq.w	80089ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800886a:	4b34      	ldr	r3, [pc, #208]	; (800893c <HAL_RCC_OscConfig+0x470>)
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	f003 030c 	and.w	r3, r3, #12
 8008872:	2b08      	cmp	r3, #8
 8008874:	d05c      	beq.n	8008930 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	699b      	ldr	r3, [r3, #24]
 800887a:	2b02      	cmp	r3, #2
 800887c:	d141      	bne.n	8008902 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800887e:	4b31      	ldr	r3, [pc, #196]	; (8008944 <HAL_RCC_OscConfig+0x478>)
 8008880:	2200      	movs	r2, #0
 8008882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008884:	f7fc f832 	bl	80048ec <HAL_GetTick>
 8008888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800888a:	e008      	b.n	800889e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800888c:	f7fc f82e 	bl	80048ec <HAL_GetTick>
 8008890:	4602      	mov	r2, r0
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	2b02      	cmp	r3, #2
 8008898:	d901      	bls.n	800889e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800889a:	2303      	movs	r3, #3
 800889c:	e087      	b.n	80089ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800889e:	4b27      	ldr	r3, [pc, #156]	; (800893c <HAL_RCC_OscConfig+0x470>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d1f0      	bne.n	800888c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	69da      	ldr	r2, [r3, #28]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a1b      	ldr	r3, [r3, #32]
 80088b2:	431a      	orrs	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b8:	019b      	lsls	r3, r3, #6
 80088ba:	431a      	orrs	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c0:	085b      	lsrs	r3, r3, #1
 80088c2:	3b01      	subs	r3, #1
 80088c4:	041b      	lsls	r3, r3, #16
 80088c6:	431a      	orrs	r2, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088cc:	061b      	lsls	r3, r3, #24
 80088ce:	491b      	ldr	r1, [pc, #108]	; (800893c <HAL_RCC_OscConfig+0x470>)
 80088d0:	4313      	orrs	r3, r2
 80088d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80088d4:	4b1b      	ldr	r3, [pc, #108]	; (8008944 <HAL_RCC_OscConfig+0x478>)
 80088d6:	2201      	movs	r2, #1
 80088d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088da:	f7fc f807 	bl	80048ec <HAL_GetTick>
 80088de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088e0:	e008      	b.n	80088f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088e2:	f7fc f803 	bl	80048ec <HAL_GetTick>
 80088e6:	4602      	mov	r2, r0
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	1ad3      	subs	r3, r2, r3
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d901      	bls.n	80088f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80088f0:	2303      	movs	r3, #3
 80088f2:	e05c      	b.n	80089ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088f4:	4b11      	ldr	r3, [pc, #68]	; (800893c <HAL_RCC_OscConfig+0x470>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d0f0      	beq.n	80088e2 <HAL_RCC_OscConfig+0x416>
 8008900:	e054      	b.n	80089ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008902:	4b10      	ldr	r3, [pc, #64]	; (8008944 <HAL_RCC_OscConfig+0x478>)
 8008904:	2200      	movs	r2, #0
 8008906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008908:	f7fb fff0 	bl	80048ec <HAL_GetTick>
 800890c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800890e:	e008      	b.n	8008922 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008910:	f7fb ffec 	bl	80048ec <HAL_GetTick>
 8008914:	4602      	mov	r2, r0
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	2b02      	cmp	r3, #2
 800891c:	d901      	bls.n	8008922 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800891e:	2303      	movs	r3, #3
 8008920:	e045      	b.n	80089ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008922:	4b06      	ldr	r3, [pc, #24]	; (800893c <HAL_RCC_OscConfig+0x470>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800892a:	2b00      	cmp	r3, #0
 800892c:	d1f0      	bne.n	8008910 <HAL_RCC_OscConfig+0x444>
 800892e:	e03d      	b.n	80089ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	699b      	ldr	r3, [r3, #24]
 8008934:	2b01      	cmp	r3, #1
 8008936:	d107      	bne.n	8008948 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	e038      	b.n	80089ae <HAL_RCC_OscConfig+0x4e2>
 800893c:	40023800 	.word	0x40023800
 8008940:	40007000 	.word	0x40007000
 8008944:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008948:	4b1b      	ldr	r3, [pc, #108]	; (80089b8 <HAL_RCC_OscConfig+0x4ec>)
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	2b01      	cmp	r3, #1
 8008954:	d028      	beq.n	80089a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008960:	429a      	cmp	r2, r3
 8008962:	d121      	bne.n	80089a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800896e:	429a      	cmp	r2, r3
 8008970:	d11a      	bne.n	80089a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008978:	4013      	ands	r3, r2
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800897e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008980:	4293      	cmp	r3, r2
 8008982:	d111      	bne.n	80089a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800898e:	085b      	lsrs	r3, r3, #1
 8008990:	3b01      	subs	r3, #1
 8008992:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008994:	429a      	cmp	r2, r3
 8008996:	d107      	bne.n	80089a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d001      	beq.n	80089ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	e000      	b.n	80089ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3718      	adds	r7, #24
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	40023800 	.word	0x40023800

080089bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d101      	bne.n	80089d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e0cc      	b.n	8008b6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80089d0:	4b68      	ldr	r3, [pc, #416]	; (8008b74 <HAL_RCC_ClockConfig+0x1b8>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 0307 	and.w	r3, r3, #7
 80089d8:	683a      	ldr	r2, [r7, #0]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d90c      	bls.n	80089f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089de:	4b65      	ldr	r3, [pc, #404]	; (8008b74 <HAL_RCC_ClockConfig+0x1b8>)
 80089e0:	683a      	ldr	r2, [r7, #0]
 80089e2:	b2d2      	uxtb	r2, r2
 80089e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089e6:	4b63      	ldr	r3, [pc, #396]	; (8008b74 <HAL_RCC_ClockConfig+0x1b8>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 0307 	and.w	r3, r3, #7
 80089ee:	683a      	ldr	r2, [r7, #0]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d001      	beq.n	80089f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	e0b8      	b.n	8008b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 0302 	and.w	r3, r3, #2
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d020      	beq.n	8008a46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 0304 	and.w	r3, r3, #4
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d005      	beq.n	8008a1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a10:	4b59      	ldr	r3, [pc, #356]	; (8008b78 <HAL_RCC_ClockConfig+0x1bc>)
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	4a58      	ldr	r2, [pc, #352]	; (8008b78 <HAL_RCC_ClockConfig+0x1bc>)
 8008a16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008a1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 0308 	and.w	r3, r3, #8
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d005      	beq.n	8008a34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008a28:	4b53      	ldr	r3, [pc, #332]	; (8008b78 <HAL_RCC_ClockConfig+0x1bc>)
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	4a52      	ldr	r2, [pc, #328]	; (8008b78 <HAL_RCC_ClockConfig+0x1bc>)
 8008a2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008a32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a34:	4b50      	ldr	r3, [pc, #320]	; (8008b78 <HAL_RCC_ClockConfig+0x1bc>)
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	494d      	ldr	r1, [pc, #308]	; (8008b78 <HAL_RCC_ClockConfig+0x1bc>)
 8008a42:	4313      	orrs	r3, r2
 8008a44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 0301 	and.w	r3, r3, #1
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d044      	beq.n	8008adc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d107      	bne.n	8008a6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a5a:	4b47      	ldr	r3, [pc, #284]	; (8008b78 <HAL_RCC_ClockConfig+0x1bc>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d119      	bne.n	8008a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e07f      	b.n	8008b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d003      	beq.n	8008a7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a76:	2b03      	cmp	r3, #3
 8008a78:	d107      	bne.n	8008a8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a7a:	4b3f      	ldr	r3, [pc, #252]	; (8008b78 <HAL_RCC_ClockConfig+0x1bc>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d109      	bne.n	8008a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e06f      	b.n	8008b6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a8a:	4b3b      	ldr	r3, [pc, #236]	; (8008b78 <HAL_RCC_ClockConfig+0x1bc>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 0302 	and.w	r3, r3, #2
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d101      	bne.n	8008a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e067      	b.n	8008b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a9a:	4b37      	ldr	r3, [pc, #220]	; (8008b78 <HAL_RCC_ClockConfig+0x1bc>)
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	f023 0203 	bic.w	r2, r3, #3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	4934      	ldr	r1, [pc, #208]	; (8008b78 <HAL_RCC_ClockConfig+0x1bc>)
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008aac:	f7fb ff1e 	bl	80048ec <HAL_GetTick>
 8008ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ab2:	e00a      	b.n	8008aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ab4:	f7fb ff1a 	bl	80048ec <HAL_GetTick>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d901      	bls.n	8008aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008ac6:	2303      	movs	r3, #3
 8008ac8:	e04f      	b.n	8008b6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008aca:	4b2b      	ldr	r3, [pc, #172]	; (8008b78 <HAL_RCC_ClockConfig+0x1bc>)
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	f003 020c 	and.w	r2, r3, #12
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d1eb      	bne.n	8008ab4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008adc:	4b25      	ldr	r3, [pc, #148]	; (8008b74 <HAL_RCC_ClockConfig+0x1b8>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0307 	and.w	r3, r3, #7
 8008ae4:	683a      	ldr	r2, [r7, #0]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d20c      	bcs.n	8008b04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008aea:	4b22      	ldr	r3, [pc, #136]	; (8008b74 <HAL_RCC_ClockConfig+0x1b8>)
 8008aec:	683a      	ldr	r2, [r7, #0]
 8008aee:	b2d2      	uxtb	r2, r2
 8008af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008af2:	4b20      	ldr	r3, [pc, #128]	; (8008b74 <HAL_RCC_ClockConfig+0x1b8>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 0307 	and.w	r3, r3, #7
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d001      	beq.n	8008b04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	e032      	b.n	8008b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 0304 	and.w	r3, r3, #4
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d008      	beq.n	8008b22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b10:	4b19      	ldr	r3, [pc, #100]	; (8008b78 <HAL_RCC_ClockConfig+0x1bc>)
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	4916      	ldr	r1, [pc, #88]	; (8008b78 <HAL_RCC_ClockConfig+0x1bc>)
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f003 0308 	and.w	r3, r3, #8
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d009      	beq.n	8008b42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b2e:	4b12      	ldr	r3, [pc, #72]	; (8008b78 <HAL_RCC_ClockConfig+0x1bc>)
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	00db      	lsls	r3, r3, #3
 8008b3c:	490e      	ldr	r1, [pc, #56]	; (8008b78 <HAL_RCC_ClockConfig+0x1bc>)
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008b42:	f000 f821 	bl	8008b88 <HAL_RCC_GetSysClockFreq>
 8008b46:	4602      	mov	r2, r0
 8008b48:	4b0b      	ldr	r3, [pc, #44]	; (8008b78 <HAL_RCC_ClockConfig+0x1bc>)
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	091b      	lsrs	r3, r3, #4
 8008b4e:	f003 030f 	and.w	r3, r3, #15
 8008b52:	490a      	ldr	r1, [pc, #40]	; (8008b7c <HAL_RCC_ClockConfig+0x1c0>)
 8008b54:	5ccb      	ldrb	r3, [r1, r3]
 8008b56:	fa22 f303 	lsr.w	r3, r2, r3
 8008b5a:	4a09      	ldr	r2, [pc, #36]	; (8008b80 <HAL_RCC_ClockConfig+0x1c4>)
 8008b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008b5e:	4b09      	ldr	r3, [pc, #36]	; (8008b84 <HAL_RCC_ClockConfig+0x1c8>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7fb fae0 	bl	8004128 <HAL_InitTick>

  return HAL_OK;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	40023c00 	.word	0x40023c00
 8008b78:	40023800 	.word	0x40023800
 8008b7c:	080190b4 	.word	0x080190b4
 8008b80:	20000008 	.word	0x20000008
 8008b84:	20000020 	.word	0x20000020

08008b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b8c:	b094      	sub	sp, #80	; 0x50
 8008b8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008b90:	2300      	movs	r3, #0
 8008b92:	647b      	str	r3, [r7, #68]	; 0x44
 8008b94:	2300      	movs	r3, #0
 8008b96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b98:	2300      	movs	r3, #0
 8008b9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ba0:	4b79      	ldr	r3, [pc, #484]	; (8008d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	f003 030c 	and.w	r3, r3, #12
 8008ba8:	2b08      	cmp	r3, #8
 8008baa:	d00d      	beq.n	8008bc8 <HAL_RCC_GetSysClockFreq+0x40>
 8008bac:	2b08      	cmp	r3, #8
 8008bae:	f200 80e1 	bhi.w	8008d74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d002      	beq.n	8008bbc <HAL_RCC_GetSysClockFreq+0x34>
 8008bb6:	2b04      	cmp	r3, #4
 8008bb8:	d003      	beq.n	8008bc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8008bba:	e0db      	b.n	8008d74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008bbc:	4b73      	ldr	r3, [pc, #460]	; (8008d8c <HAL_RCC_GetSysClockFreq+0x204>)
 8008bbe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008bc0:	e0db      	b.n	8008d7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008bc2:	4b73      	ldr	r3, [pc, #460]	; (8008d90 <HAL_RCC_GetSysClockFreq+0x208>)
 8008bc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008bc6:	e0d8      	b.n	8008d7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008bc8:	4b6f      	ldr	r3, [pc, #444]	; (8008d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bd0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008bd2:	4b6d      	ldr	r3, [pc, #436]	; (8008d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d063      	beq.n	8008ca6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008bde:	4b6a      	ldr	r3, [pc, #424]	; (8008d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	099b      	lsrs	r3, r3, #6
 8008be4:	2200      	movs	r2, #0
 8008be6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008be8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bf0:	633b      	str	r3, [r7, #48]	; 0x30
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8008bf6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008bfa:	4622      	mov	r2, r4
 8008bfc:	462b      	mov	r3, r5
 8008bfe:	f04f 0000 	mov.w	r0, #0
 8008c02:	f04f 0100 	mov.w	r1, #0
 8008c06:	0159      	lsls	r1, r3, #5
 8008c08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c0c:	0150      	lsls	r0, r2, #5
 8008c0e:	4602      	mov	r2, r0
 8008c10:	460b      	mov	r3, r1
 8008c12:	4621      	mov	r1, r4
 8008c14:	1a51      	subs	r1, r2, r1
 8008c16:	6139      	str	r1, [r7, #16]
 8008c18:	4629      	mov	r1, r5
 8008c1a:	eb63 0301 	sbc.w	r3, r3, r1
 8008c1e:	617b      	str	r3, [r7, #20]
 8008c20:	f04f 0200 	mov.w	r2, #0
 8008c24:	f04f 0300 	mov.w	r3, #0
 8008c28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c2c:	4659      	mov	r1, fp
 8008c2e:	018b      	lsls	r3, r1, #6
 8008c30:	4651      	mov	r1, sl
 8008c32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008c36:	4651      	mov	r1, sl
 8008c38:	018a      	lsls	r2, r1, #6
 8008c3a:	4651      	mov	r1, sl
 8008c3c:	ebb2 0801 	subs.w	r8, r2, r1
 8008c40:	4659      	mov	r1, fp
 8008c42:	eb63 0901 	sbc.w	r9, r3, r1
 8008c46:	f04f 0200 	mov.w	r2, #0
 8008c4a:	f04f 0300 	mov.w	r3, #0
 8008c4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c5a:	4690      	mov	r8, r2
 8008c5c:	4699      	mov	r9, r3
 8008c5e:	4623      	mov	r3, r4
 8008c60:	eb18 0303 	adds.w	r3, r8, r3
 8008c64:	60bb      	str	r3, [r7, #8]
 8008c66:	462b      	mov	r3, r5
 8008c68:	eb49 0303 	adc.w	r3, r9, r3
 8008c6c:	60fb      	str	r3, [r7, #12]
 8008c6e:	f04f 0200 	mov.w	r2, #0
 8008c72:	f04f 0300 	mov.w	r3, #0
 8008c76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008c7a:	4629      	mov	r1, r5
 8008c7c:	024b      	lsls	r3, r1, #9
 8008c7e:	4621      	mov	r1, r4
 8008c80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008c84:	4621      	mov	r1, r4
 8008c86:	024a      	lsls	r2, r1, #9
 8008c88:	4610      	mov	r0, r2
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c8e:	2200      	movs	r2, #0
 8008c90:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c98:	f7f8 f800 	bl	8000c9c <__aeabi_uldivmod>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ca4:	e058      	b.n	8008d58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ca6:	4b38      	ldr	r3, [pc, #224]	; (8008d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	099b      	lsrs	r3, r3, #6
 8008cac:	2200      	movs	r2, #0
 8008cae:	4618      	mov	r0, r3
 8008cb0:	4611      	mov	r1, r2
 8008cb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008cb6:	623b      	str	r3, [r7, #32]
 8008cb8:	2300      	movs	r3, #0
 8008cba:	627b      	str	r3, [r7, #36]	; 0x24
 8008cbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008cc0:	4642      	mov	r2, r8
 8008cc2:	464b      	mov	r3, r9
 8008cc4:	f04f 0000 	mov.w	r0, #0
 8008cc8:	f04f 0100 	mov.w	r1, #0
 8008ccc:	0159      	lsls	r1, r3, #5
 8008cce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008cd2:	0150      	lsls	r0, r2, #5
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	4641      	mov	r1, r8
 8008cda:	ebb2 0a01 	subs.w	sl, r2, r1
 8008cde:	4649      	mov	r1, r9
 8008ce0:	eb63 0b01 	sbc.w	fp, r3, r1
 8008ce4:	f04f 0200 	mov.w	r2, #0
 8008ce8:	f04f 0300 	mov.w	r3, #0
 8008cec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008cf0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008cf4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008cf8:	ebb2 040a 	subs.w	r4, r2, sl
 8008cfc:	eb63 050b 	sbc.w	r5, r3, fp
 8008d00:	f04f 0200 	mov.w	r2, #0
 8008d04:	f04f 0300 	mov.w	r3, #0
 8008d08:	00eb      	lsls	r3, r5, #3
 8008d0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d0e:	00e2      	lsls	r2, r4, #3
 8008d10:	4614      	mov	r4, r2
 8008d12:	461d      	mov	r5, r3
 8008d14:	4643      	mov	r3, r8
 8008d16:	18e3      	adds	r3, r4, r3
 8008d18:	603b      	str	r3, [r7, #0]
 8008d1a:	464b      	mov	r3, r9
 8008d1c:	eb45 0303 	adc.w	r3, r5, r3
 8008d20:	607b      	str	r3, [r7, #4]
 8008d22:	f04f 0200 	mov.w	r2, #0
 8008d26:	f04f 0300 	mov.w	r3, #0
 8008d2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008d2e:	4629      	mov	r1, r5
 8008d30:	028b      	lsls	r3, r1, #10
 8008d32:	4621      	mov	r1, r4
 8008d34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008d38:	4621      	mov	r1, r4
 8008d3a:	028a      	lsls	r2, r1, #10
 8008d3c:	4610      	mov	r0, r2
 8008d3e:	4619      	mov	r1, r3
 8008d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d42:	2200      	movs	r2, #0
 8008d44:	61bb      	str	r3, [r7, #24]
 8008d46:	61fa      	str	r2, [r7, #28]
 8008d48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d4c:	f7f7 ffa6 	bl	8000c9c <__aeabi_uldivmod>
 8008d50:	4602      	mov	r2, r0
 8008d52:	460b      	mov	r3, r1
 8008d54:	4613      	mov	r3, r2
 8008d56:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008d58:	4b0b      	ldr	r3, [pc, #44]	; (8008d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	0c1b      	lsrs	r3, r3, #16
 8008d5e:	f003 0303 	and.w	r3, r3, #3
 8008d62:	3301      	adds	r3, #1
 8008d64:	005b      	lsls	r3, r3, #1
 8008d66:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008d68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008d72:	e002      	b.n	8008d7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008d74:	4b05      	ldr	r3, [pc, #20]	; (8008d8c <HAL_RCC_GetSysClockFreq+0x204>)
 8008d76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008d78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3750      	adds	r7, #80	; 0x50
 8008d80:	46bd      	mov	sp, r7
 8008d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d86:	bf00      	nop
 8008d88:	40023800 	.word	0x40023800
 8008d8c:	00f42400 	.word	0x00f42400
 8008d90:	007a1200 	.word	0x007a1200

08008d94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d94:	b480      	push	{r7}
 8008d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d98:	4b03      	ldr	r3, [pc, #12]	; (8008da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	20000008 	.word	0x20000008

08008dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008db0:	f7ff fff0 	bl	8008d94 <HAL_RCC_GetHCLKFreq>
 8008db4:	4602      	mov	r2, r0
 8008db6:	4b05      	ldr	r3, [pc, #20]	; (8008dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	0a9b      	lsrs	r3, r3, #10
 8008dbc:	f003 0307 	and.w	r3, r3, #7
 8008dc0:	4903      	ldr	r1, [pc, #12]	; (8008dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008dc2:	5ccb      	ldrb	r3, [r1, r3]
 8008dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	40023800 	.word	0x40023800
 8008dd0:	080190c4 	.word	0x080190c4

08008dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008dd8:	f7ff ffdc 	bl	8008d94 <HAL_RCC_GetHCLKFreq>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	4b05      	ldr	r3, [pc, #20]	; (8008df4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	0b5b      	lsrs	r3, r3, #13
 8008de4:	f003 0307 	and.w	r3, r3, #7
 8008de8:	4903      	ldr	r1, [pc, #12]	; (8008df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008dea:	5ccb      	ldrb	r3, [r1, r3]
 8008dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	40023800 	.word	0x40023800
 8008df8:	080190c4 	.word	0x080190c4

08008dfc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	220f      	movs	r2, #15
 8008e0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008e0c:	4b12      	ldr	r3, [pc, #72]	; (8008e58 <HAL_RCC_GetClockConfig+0x5c>)
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	f003 0203 	and.w	r2, r3, #3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008e18:	4b0f      	ldr	r3, [pc, #60]	; (8008e58 <HAL_RCC_GetClockConfig+0x5c>)
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008e24:	4b0c      	ldr	r3, [pc, #48]	; (8008e58 <HAL_RCC_GetClockConfig+0x5c>)
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008e30:	4b09      	ldr	r3, [pc, #36]	; (8008e58 <HAL_RCC_GetClockConfig+0x5c>)
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	08db      	lsrs	r3, r3, #3
 8008e36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008e3e:	4b07      	ldr	r3, [pc, #28]	; (8008e5c <HAL_RCC_GetClockConfig+0x60>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f003 0207 	and.w	r2, r3, #7
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	601a      	str	r2, [r3, #0]
}
 8008e4a:	bf00      	nop
 8008e4c:	370c      	adds	r7, #12
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	40023800 	.word	0x40023800
 8008e5c:	40023c00 	.word	0x40023c00

08008e60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d101      	bne.n	8008e72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e041      	b.n	8008ef6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d106      	bne.n	8008e8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f839 	bl	8008efe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2202      	movs	r2, #2
 8008e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	3304      	adds	r3, #4
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	4610      	mov	r0, r2
 8008ea0:	f000 fc7a 	bl	8009798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3708      	adds	r7, #8
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008efe:	b480      	push	{r7}
 8008f00:	b083      	sub	sp, #12
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008f06:	bf00      	nop
 8008f08:	370c      	adds	r7, #12
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
	...

08008f14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d001      	beq.n	8008f2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e044      	b.n	8008fb6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2202      	movs	r2, #2
 8008f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	68da      	ldr	r2, [r3, #12]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f042 0201 	orr.w	r2, r2, #1
 8008f42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a1e      	ldr	r2, [pc, #120]	; (8008fc4 <HAL_TIM_Base_Start_IT+0xb0>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d018      	beq.n	8008f80 <HAL_TIM_Base_Start_IT+0x6c>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f56:	d013      	beq.n	8008f80 <HAL_TIM_Base_Start_IT+0x6c>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a1a      	ldr	r2, [pc, #104]	; (8008fc8 <HAL_TIM_Base_Start_IT+0xb4>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d00e      	beq.n	8008f80 <HAL_TIM_Base_Start_IT+0x6c>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a19      	ldr	r2, [pc, #100]	; (8008fcc <HAL_TIM_Base_Start_IT+0xb8>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d009      	beq.n	8008f80 <HAL_TIM_Base_Start_IT+0x6c>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a17      	ldr	r2, [pc, #92]	; (8008fd0 <HAL_TIM_Base_Start_IT+0xbc>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d004      	beq.n	8008f80 <HAL_TIM_Base_Start_IT+0x6c>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a16      	ldr	r2, [pc, #88]	; (8008fd4 <HAL_TIM_Base_Start_IT+0xc0>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d111      	bne.n	8008fa4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	f003 0307 	and.w	r3, r3, #7
 8008f8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2b06      	cmp	r3, #6
 8008f90:	d010      	beq.n	8008fb4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f042 0201 	orr.w	r2, r2, #1
 8008fa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fa2:	e007      	b.n	8008fb4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f042 0201 	orr.w	r2, r2, #1
 8008fb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3714      	adds	r7, #20
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	40010000 	.word	0x40010000
 8008fc8:	40000400 	.word	0x40000400
 8008fcc:	40000800 	.word	0x40000800
 8008fd0:	40000c00 	.word	0x40000c00
 8008fd4:	40014000 	.word	0x40014000

08008fd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d109      	bne.n	8008ffc <HAL_TIM_PWM_Start+0x24>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	bf14      	ite	ne
 8008ff4:	2301      	movne	r3, #1
 8008ff6:	2300      	moveq	r3, #0
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	e022      	b.n	8009042 <HAL_TIM_PWM_Start+0x6a>
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	2b04      	cmp	r3, #4
 8009000:	d109      	bne.n	8009016 <HAL_TIM_PWM_Start+0x3e>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009008:	b2db      	uxtb	r3, r3
 800900a:	2b01      	cmp	r3, #1
 800900c:	bf14      	ite	ne
 800900e:	2301      	movne	r3, #1
 8009010:	2300      	moveq	r3, #0
 8009012:	b2db      	uxtb	r3, r3
 8009014:	e015      	b.n	8009042 <HAL_TIM_PWM_Start+0x6a>
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	2b08      	cmp	r3, #8
 800901a:	d109      	bne.n	8009030 <HAL_TIM_PWM_Start+0x58>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009022:	b2db      	uxtb	r3, r3
 8009024:	2b01      	cmp	r3, #1
 8009026:	bf14      	ite	ne
 8009028:	2301      	movne	r3, #1
 800902a:	2300      	moveq	r3, #0
 800902c:	b2db      	uxtb	r3, r3
 800902e:	e008      	b.n	8009042 <HAL_TIM_PWM_Start+0x6a>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009036:	b2db      	uxtb	r3, r3
 8009038:	2b01      	cmp	r3, #1
 800903a:	bf14      	ite	ne
 800903c:	2301      	movne	r3, #1
 800903e:	2300      	moveq	r3, #0
 8009040:	b2db      	uxtb	r3, r3
 8009042:	2b00      	cmp	r3, #0
 8009044:	d001      	beq.n	800904a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	e068      	b.n	800911c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d104      	bne.n	800905a <HAL_TIM_PWM_Start+0x82>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2202      	movs	r2, #2
 8009054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009058:	e013      	b.n	8009082 <HAL_TIM_PWM_Start+0xaa>
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	2b04      	cmp	r3, #4
 800905e:	d104      	bne.n	800906a <HAL_TIM_PWM_Start+0x92>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2202      	movs	r2, #2
 8009064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009068:	e00b      	b.n	8009082 <HAL_TIM_PWM_Start+0xaa>
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	2b08      	cmp	r3, #8
 800906e:	d104      	bne.n	800907a <HAL_TIM_PWM_Start+0xa2>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2202      	movs	r2, #2
 8009074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009078:	e003      	b.n	8009082 <HAL_TIM_PWM_Start+0xaa>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2202      	movs	r2, #2
 800907e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2201      	movs	r2, #1
 8009088:	6839      	ldr	r1, [r7, #0]
 800908a:	4618      	mov	r0, r3
 800908c:	f000 fd90 	bl	8009bb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a23      	ldr	r2, [pc, #140]	; (8009124 <HAL_TIM_PWM_Start+0x14c>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d107      	bne.n	80090aa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a1d      	ldr	r2, [pc, #116]	; (8009124 <HAL_TIM_PWM_Start+0x14c>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d018      	beq.n	80090e6 <HAL_TIM_PWM_Start+0x10e>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090bc:	d013      	beq.n	80090e6 <HAL_TIM_PWM_Start+0x10e>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a19      	ldr	r2, [pc, #100]	; (8009128 <HAL_TIM_PWM_Start+0x150>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d00e      	beq.n	80090e6 <HAL_TIM_PWM_Start+0x10e>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a17      	ldr	r2, [pc, #92]	; (800912c <HAL_TIM_PWM_Start+0x154>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d009      	beq.n	80090e6 <HAL_TIM_PWM_Start+0x10e>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a16      	ldr	r2, [pc, #88]	; (8009130 <HAL_TIM_PWM_Start+0x158>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d004      	beq.n	80090e6 <HAL_TIM_PWM_Start+0x10e>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a14      	ldr	r2, [pc, #80]	; (8009134 <HAL_TIM_PWM_Start+0x15c>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d111      	bne.n	800910a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	f003 0307 	and.w	r3, r3, #7
 80090f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2b06      	cmp	r3, #6
 80090f6:	d010      	beq.n	800911a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f042 0201 	orr.w	r2, r2, #1
 8009106:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009108:	e007      	b.n	800911a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f042 0201 	orr.w	r2, r2, #1
 8009118:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	40010000 	.word	0x40010000
 8009128:	40000400 	.word	0x40000400
 800912c:	40000800 	.word	0x40000800
 8009130:	40000c00 	.word	0x40000c00
 8009134:	40014000 	.word	0x40014000

08009138 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b086      	sub	sp, #24
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d101      	bne.n	800914c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	e097      	b.n	800927c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009152:	b2db      	uxtb	r3, r3
 8009154:	2b00      	cmp	r3, #0
 8009156:	d106      	bne.n	8009166 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 f88f 	bl	8009284 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2202      	movs	r2, #2
 800916a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	6812      	ldr	r2, [r2, #0]
 8009178:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800917c:	f023 0307 	bic.w	r3, r3, #7
 8009180:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	3304      	adds	r3, #4
 800918a:	4619      	mov	r1, r3
 800918c:	4610      	mov	r0, r2
 800918e:	f000 fb03 	bl	8009798 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	6a1b      	ldr	r3, [r3, #32]
 80091a8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	697a      	ldr	r2, [r7, #20]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091ba:	f023 0303 	bic.w	r3, r3, #3
 80091be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	689a      	ldr	r2, [r3, #8]
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	699b      	ldr	r3, [r3, #24]
 80091c8:	021b      	lsls	r3, r3, #8
 80091ca:	4313      	orrs	r3, r2
 80091cc:	693a      	ldr	r2, [r7, #16]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80091d8:	f023 030c 	bic.w	r3, r3, #12
 80091dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80091e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	68da      	ldr	r2, [r3, #12]
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	69db      	ldr	r3, [r3, #28]
 80091f2:	021b      	lsls	r3, r3, #8
 80091f4:	4313      	orrs	r3, r2
 80091f6:	693a      	ldr	r2, [r7, #16]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	011a      	lsls	r2, r3, #4
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	031b      	lsls	r3, r3, #12
 8009208:	4313      	orrs	r3, r2
 800920a:	693a      	ldr	r2, [r7, #16]
 800920c:	4313      	orrs	r3, r2
 800920e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009216:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800921e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	695b      	ldr	r3, [r3, #20]
 8009228:	011b      	lsls	r3, r3, #4
 800922a:	4313      	orrs	r3, r2
 800922c:	68fa      	ldr	r2, [r7, #12]
 800922e:	4313      	orrs	r3, r2
 8009230:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	697a      	ldr	r2, [r7, #20]
 8009238:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	68fa      	ldr	r2, [r7, #12]
 8009248:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2201      	movs	r2, #1
 800924e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2201      	movs	r2, #1
 8009256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2201      	movs	r2, #1
 800925e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2201      	movs	r2, #1
 8009266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2201      	movs	r2, #1
 800926e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2201      	movs	r2, #1
 8009276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3718      	adds	r7, #24
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 800928c:	bf00      	nop
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80092b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80092b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80092c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d110      	bne.n	80092ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80092c8:	7bfb      	ldrb	r3, [r7, #15]
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d102      	bne.n	80092d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80092ce:	7b7b      	ldrb	r3, [r7, #13]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d001      	beq.n	80092d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	e069      	b.n	80093ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2202      	movs	r2, #2
 80092dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2202      	movs	r2, #2
 80092e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092e8:	e031      	b.n	800934e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	2b04      	cmp	r3, #4
 80092ee:	d110      	bne.n	8009312 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80092f0:	7bbb      	ldrb	r3, [r7, #14]
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d102      	bne.n	80092fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80092f6:	7b3b      	ldrb	r3, [r7, #12]
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d001      	beq.n	8009300 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	e055      	b.n	80093ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2202      	movs	r2, #2
 8009304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2202      	movs	r2, #2
 800930c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009310:	e01d      	b.n	800934e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009312:	7bfb      	ldrb	r3, [r7, #15]
 8009314:	2b01      	cmp	r3, #1
 8009316:	d108      	bne.n	800932a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009318:	7bbb      	ldrb	r3, [r7, #14]
 800931a:	2b01      	cmp	r3, #1
 800931c:	d105      	bne.n	800932a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800931e:	7b7b      	ldrb	r3, [r7, #13]
 8009320:	2b01      	cmp	r3, #1
 8009322:	d102      	bne.n	800932a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009324:	7b3b      	ldrb	r3, [r7, #12]
 8009326:	2b01      	cmp	r3, #1
 8009328:	d001      	beq.n	800932e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	e03e      	b.n	80093ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2202      	movs	r2, #2
 8009332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2202      	movs	r2, #2
 800933a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2202      	movs	r2, #2
 8009342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2202      	movs	r2, #2
 800934a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d003      	beq.n	800935c <HAL_TIM_Encoder_Start+0xc4>
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	2b04      	cmp	r3, #4
 8009358:	d008      	beq.n	800936c <HAL_TIM_Encoder_Start+0xd4>
 800935a:	e00f      	b.n	800937c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2201      	movs	r2, #1
 8009362:	2100      	movs	r1, #0
 8009364:	4618      	mov	r0, r3
 8009366:	f000 fc23 	bl	8009bb0 <TIM_CCxChannelCmd>
      break;
 800936a:	e016      	b.n	800939a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2201      	movs	r2, #1
 8009372:	2104      	movs	r1, #4
 8009374:	4618      	mov	r0, r3
 8009376:	f000 fc1b 	bl	8009bb0 <TIM_CCxChannelCmd>
      break;
 800937a:	e00e      	b.n	800939a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2201      	movs	r2, #1
 8009382:	2100      	movs	r1, #0
 8009384:	4618      	mov	r0, r3
 8009386:	f000 fc13 	bl	8009bb0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2201      	movs	r2, #1
 8009390:	2104      	movs	r1, #4
 8009392:	4618      	mov	r0, r3
 8009394:	f000 fc0c 	bl	8009bb0 <TIM_CCxChannelCmd>
      break;
 8009398:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f042 0201 	orr.w	r2, r2, #1
 80093a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	f003 0302 	and.w	r3, r3, #2
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	d122      	bne.n	8009410 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	f003 0302 	and.w	r3, r3, #2
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	d11b      	bne.n	8009410 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f06f 0202 	mvn.w	r2, #2
 80093e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2201      	movs	r2, #1
 80093e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	699b      	ldr	r3, [r3, #24]
 80093ee:	f003 0303 	and.w	r3, r3, #3
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d003      	beq.n	80093fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f9b0 	bl	800975c <HAL_TIM_IC_CaptureCallback>
 80093fc:	e005      	b.n	800940a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f9a2 	bl	8009748 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 f9b3 	bl	8009770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	f003 0304 	and.w	r3, r3, #4
 800941a:	2b04      	cmp	r3, #4
 800941c:	d122      	bne.n	8009464 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	f003 0304 	and.w	r3, r3, #4
 8009428:	2b04      	cmp	r3, #4
 800942a:	d11b      	bne.n	8009464 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f06f 0204 	mvn.w	r2, #4
 8009434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2202      	movs	r2, #2
 800943a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	699b      	ldr	r3, [r3, #24]
 8009442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009446:	2b00      	cmp	r3, #0
 8009448:	d003      	beq.n	8009452 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f986 	bl	800975c <HAL_TIM_IC_CaptureCallback>
 8009450:	e005      	b.n	800945e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 f978 	bl	8009748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 f989 	bl	8009770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	f003 0308 	and.w	r3, r3, #8
 800946e:	2b08      	cmp	r3, #8
 8009470:	d122      	bne.n	80094b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	f003 0308 	and.w	r3, r3, #8
 800947c:	2b08      	cmp	r3, #8
 800947e:	d11b      	bne.n	80094b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f06f 0208 	mvn.w	r2, #8
 8009488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2204      	movs	r2, #4
 800948e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	69db      	ldr	r3, [r3, #28]
 8009496:	f003 0303 	and.w	r3, r3, #3
 800949a:	2b00      	cmp	r3, #0
 800949c:	d003      	beq.n	80094a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f95c 	bl	800975c <HAL_TIM_IC_CaptureCallback>
 80094a4:	e005      	b.n	80094b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 f94e 	bl	8009748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 f95f 	bl	8009770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	691b      	ldr	r3, [r3, #16]
 80094be:	f003 0310 	and.w	r3, r3, #16
 80094c2:	2b10      	cmp	r3, #16
 80094c4:	d122      	bne.n	800950c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	f003 0310 	and.w	r3, r3, #16
 80094d0:	2b10      	cmp	r3, #16
 80094d2:	d11b      	bne.n	800950c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f06f 0210 	mvn.w	r2, #16
 80094dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2208      	movs	r2, #8
 80094e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	69db      	ldr	r3, [r3, #28]
 80094ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d003      	beq.n	80094fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 f932 	bl	800975c <HAL_TIM_IC_CaptureCallback>
 80094f8:	e005      	b.n	8009506 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 f924 	bl	8009748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 f935 	bl	8009770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	f003 0301 	and.w	r3, r3, #1
 8009516:	2b01      	cmp	r3, #1
 8009518:	d10e      	bne.n	8009538 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	f003 0301 	and.w	r3, r3, #1
 8009524:	2b01      	cmp	r3, #1
 8009526:	d107      	bne.n	8009538 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f06f 0201 	mvn.w	r2, #1
 8009530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f7f9 fe20 	bl	8003178 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009542:	2b80      	cmp	r3, #128	; 0x80
 8009544:	d10e      	bne.n	8009564 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009550:	2b80      	cmp	r3, #128	; 0x80
 8009552:	d107      	bne.n	8009564 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800955c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 fb55 	bl	8009c0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800956e:	2b40      	cmp	r3, #64	; 0x40
 8009570:	d10e      	bne.n	8009590 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800957c:	2b40      	cmp	r3, #64	; 0x40
 800957e:	d107      	bne.n	8009590 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 f8fa 	bl	8009784 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	f003 0320 	and.w	r3, r3, #32
 800959a:	2b20      	cmp	r3, #32
 800959c:	d10e      	bne.n	80095bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	f003 0320 	and.w	r3, r3, #32
 80095a8:	2b20      	cmp	r3, #32
 80095aa:	d107      	bne.n	80095bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f06f 0220 	mvn.w	r2, #32
 80095b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 fb1f 	bl	8009bfa <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095bc:	bf00      	nop
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b086      	sub	sp, #24
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095d0:	2300      	movs	r3, #0
 80095d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d101      	bne.n	80095e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80095de:	2302      	movs	r3, #2
 80095e0:	e0ae      	b.n	8009740 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2201      	movs	r2, #1
 80095e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2b0c      	cmp	r3, #12
 80095ee:	f200 809f 	bhi.w	8009730 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80095f2:	a201      	add	r2, pc, #4	; (adr r2, 80095f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80095f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f8:	0800962d 	.word	0x0800962d
 80095fc:	08009731 	.word	0x08009731
 8009600:	08009731 	.word	0x08009731
 8009604:	08009731 	.word	0x08009731
 8009608:	0800966d 	.word	0x0800966d
 800960c:	08009731 	.word	0x08009731
 8009610:	08009731 	.word	0x08009731
 8009614:	08009731 	.word	0x08009731
 8009618:	080096af 	.word	0x080096af
 800961c:	08009731 	.word	0x08009731
 8009620:	08009731 	.word	0x08009731
 8009624:	08009731 	.word	0x08009731
 8009628:	080096ef 	.word	0x080096ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	68b9      	ldr	r1, [r7, #8]
 8009632:	4618      	mov	r0, r3
 8009634:	f000 f930 	bl	8009898 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	699a      	ldr	r2, [r3, #24]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f042 0208 	orr.w	r2, r2, #8
 8009646:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	699a      	ldr	r2, [r3, #24]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f022 0204 	bic.w	r2, r2, #4
 8009656:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	6999      	ldr	r1, [r3, #24]
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	691a      	ldr	r2, [r3, #16]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	430a      	orrs	r2, r1
 8009668:	619a      	str	r2, [r3, #24]
      break;
 800966a:	e064      	b.n	8009736 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	68b9      	ldr	r1, [r7, #8]
 8009672:	4618      	mov	r0, r3
 8009674:	f000 f976 	bl	8009964 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	699a      	ldr	r2, [r3, #24]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	699a      	ldr	r2, [r3, #24]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	6999      	ldr	r1, [r3, #24]
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	691b      	ldr	r3, [r3, #16]
 80096a2:	021a      	lsls	r2, r3, #8
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	430a      	orrs	r2, r1
 80096aa:	619a      	str	r2, [r3, #24]
      break;
 80096ac:	e043      	b.n	8009736 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	68b9      	ldr	r1, [r7, #8]
 80096b4:	4618      	mov	r0, r3
 80096b6:	f000 f9c1 	bl	8009a3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	69da      	ldr	r2, [r3, #28]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f042 0208 	orr.w	r2, r2, #8
 80096c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	69da      	ldr	r2, [r3, #28]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f022 0204 	bic.w	r2, r2, #4
 80096d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	69d9      	ldr	r1, [r3, #28]
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	691a      	ldr	r2, [r3, #16]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	430a      	orrs	r2, r1
 80096ea:	61da      	str	r2, [r3, #28]
      break;
 80096ec:	e023      	b.n	8009736 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68b9      	ldr	r1, [r7, #8]
 80096f4:	4618      	mov	r0, r3
 80096f6:	f000 fa0b 	bl	8009b10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	69da      	ldr	r2, [r3, #28]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	69da      	ldr	r2, [r3, #28]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	69d9      	ldr	r1, [r3, #28]
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	021a      	lsls	r2, r3, #8
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	430a      	orrs	r2, r1
 800972c:	61da      	str	r2, [r3, #28]
      break;
 800972e:	e002      	b.n	8009736 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009730:	2301      	movs	r3, #1
 8009732:	75fb      	strb	r3, [r7, #23]
      break;
 8009734:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2200      	movs	r2, #0
 800973a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800973e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3718      	adds	r7, #24
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009750:	bf00      	nop
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009764:	bf00      	nop
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009778:	bf00      	nop
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800978c:	bf00      	nop
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a34      	ldr	r2, [pc, #208]	; (800987c <TIM_Base_SetConfig+0xe4>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d00f      	beq.n	80097d0 <TIM_Base_SetConfig+0x38>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097b6:	d00b      	beq.n	80097d0 <TIM_Base_SetConfig+0x38>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a31      	ldr	r2, [pc, #196]	; (8009880 <TIM_Base_SetConfig+0xe8>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d007      	beq.n	80097d0 <TIM_Base_SetConfig+0x38>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a30      	ldr	r2, [pc, #192]	; (8009884 <TIM_Base_SetConfig+0xec>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d003      	beq.n	80097d0 <TIM_Base_SetConfig+0x38>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a2f      	ldr	r2, [pc, #188]	; (8009888 <TIM_Base_SetConfig+0xf0>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d108      	bne.n	80097e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	4313      	orrs	r3, r2
 80097e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4a25      	ldr	r2, [pc, #148]	; (800987c <TIM_Base_SetConfig+0xe4>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d01b      	beq.n	8009822 <TIM_Base_SetConfig+0x8a>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097f0:	d017      	beq.n	8009822 <TIM_Base_SetConfig+0x8a>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4a22      	ldr	r2, [pc, #136]	; (8009880 <TIM_Base_SetConfig+0xe8>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d013      	beq.n	8009822 <TIM_Base_SetConfig+0x8a>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4a21      	ldr	r2, [pc, #132]	; (8009884 <TIM_Base_SetConfig+0xec>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d00f      	beq.n	8009822 <TIM_Base_SetConfig+0x8a>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a20      	ldr	r2, [pc, #128]	; (8009888 <TIM_Base_SetConfig+0xf0>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d00b      	beq.n	8009822 <TIM_Base_SetConfig+0x8a>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4a1f      	ldr	r2, [pc, #124]	; (800988c <TIM_Base_SetConfig+0xf4>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d007      	beq.n	8009822 <TIM_Base_SetConfig+0x8a>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4a1e      	ldr	r2, [pc, #120]	; (8009890 <TIM_Base_SetConfig+0xf8>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d003      	beq.n	8009822 <TIM_Base_SetConfig+0x8a>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4a1d      	ldr	r2, [pc, #116]	; (8009894 <TIM_Base_SetConfig+0xfc>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d108      	bne.n	8009834 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	68fa      	ldr	r2, [r7, #12]
 8009830:	4313      	orrs	r3, r2
 8009832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	695b      	ldr	r3, [r3, #20]
 800983e:	4313      	orrs	r3, r2
 8009840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	689a      	ldr	r2, [r3, #8]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a08      	ldr	r2, [pc, #32]	; (800987c <TIM_Base_SetConfig+0xe4>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d103      	bne.n	8009868 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	691a      	ldr	r2, [r3, #16]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	615a      	str	r2, [r3, #20]
}
 800986e:	bf00      	nop
 8009870:	3714      	adds	r7, #20
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	40010000 	.word	0x40010000
 8009880:	40000400 	.word	0x40000400
 8009884:	40000800 	.word	0x40000800
 8009888:	40000c00 	.word	0x40000c00
 800988c:	40014000 	.word	0x40014000
 8009890:	40014400 	.word	0x40014400
 8009894:	40014800 	.word	0x40014800

08009898 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009898:	b480      	push	{r7}
 800989a:	b087      	sub	sp, #28
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a1b      	ldr	r3, [r3, #32]
 80098a6:	f023 0201 	bic.w	r2, r3, #1
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6a1b      	ldr	r3, [r3, #32]
 80098b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	699b      	ldr	r3, [r3, #24]
 80098be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f023 0303 	bic.w	r3, r3, #3
 80098ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	f023 0302 	bic.w	r3, r3, #2
 80098e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	697a      	ldr	r2, [r7, #20]
 80098e8:	4313      	orrs	r3, r2
 80098ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4a1c      	ldr	r2, [pc, #112]	; (8009960 <TIM_OC1_SetConfig+0xc8>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d10c      	bne.n	800990e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	f023 0308 	bic.w	r3, r3, #8
 80098fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	697a      	ldr	r2, [r7, #20]
 8009902:	4313      	orrs	r3, r2
 8009904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	f023 0304 	bic.w	r3, r3, #4
 800990c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	4a13      	ldr	r2, [pc, #76]	; (8009960 <TIM_OC1_SetConfig+0xc8>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d111      	bne.n	800993a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800991c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009924:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	695b      	ldr	r3, [r3, #20]
 800992a:	693a      	ldr	r2, [r7, #16]
 800992c:	4313      	orrs	r3, r2
 800992e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	699b      	ldr	r3, [r3, #24]
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	4313      	orrs	r3, r2
 8009938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	693a      	ldr	r2, [r7, #16]
 800993e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	685a      	ldr	r2, [r3, #4]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	697a      	ldr	r2, [r7, #20]
 8009952:	621a      	str	r2, [r3, #32]
}
 8009954:	bf00      	nop
 8009956:	371c      	adds	r7, #28
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr
 8009960:	40010000 	.word	0x40010000

08009964 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009964:	b480      	push	{r7}
 8009966:	b087      	sub	sp, #28
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a1b      	ldr	r3, [r3, #32]
 8009972:	f023 0210 	bic.w	r2, r3, #16
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a1b      	ldr	r3, [r3, #32]
 800997e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800999a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	021b      	lsls	r3, r3, #8
 80099a2:	68fa      	ldr	r2, [r7, #12]
 80099a4:	4313      	orrs	r3, r2
 80099a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	f023 0320 	bic.w	r3, r3, #32
 80099ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	011b      	lsls	r3, r3, #4
 80099b6:	697a      	ldr	r2, [r7, #20]
 80099b8:	4313      	orrs	r3, r2
 80099ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a1e      	ldr	r2, [pc, #120]	; (8009a38 <TIM_OC2_SetConfig+0xd4>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d10d      	bne.n	80099e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	011b      	lsls	r3, r3, #4
 80099d2:	697a      	ldr	r2, [r7, #20]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a15      	ldr	r2, [pc, #84]	; (8009a38 <TIM_OC2_SetConfig+0xd4>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d113      	bne.n	8009a10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	695b      	ldr	r3, [r3, #20]
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	693a      	ldr	r2, [r7, #16]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	699b      	ldr	r3, [r3, #24]
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	693a      	ldr	r2, [r7, #16]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	693a      	ldr	r2, [r7, #16]
 8009a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	68fa      	ldr	r2, [r7, #12]
 8009a1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	697a      	ldr	r2, [r7, #20]
 8009a28:	621a      	str	r2, [r3, #32]
}
 8009a2a:	bf00      	nop
 8009a2c:	371c      	adds	r7, #28
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr
 8009a36:	bf00      	nop
 8009a38:	40010000 	.word	0x40010000

08009a3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b087      	sub	sp, #28
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6a1b      	ldr	r3, [r3, #32]
 8009a4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6a1b      	ldr	r3, [r3, #32]
 8009a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	69db      	ldr	r3, [r3, #28]
 8009a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f023 0303 	bic.w	r3, r3, #3
 8009a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	021b      	lsls	r3, r3, #8
 8009a8c:	697a      	ldr	r2, [r7, #20]
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4a1d      	ldr	r2, [pc, #116]	; (8009b0c <TIM_OC3_SetConfig+0xd0>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d10d      	bne.n	8009ab6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	021b      	lsls	r3, r3, #8
 8009aa8:	697a      	ldr	r2, [r7, #20]
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	4a14      	ldr	r2, [pc, #80]	; (8009b0c <TIM_OC3_SetConfig+0xd0>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d113      	bne.n	8009ae6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009acc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	695b      	ldr	r3, [r3, #20]
 8009ad2:	011b      	lsls	r3, r3, #4
 8009ad4:	693a      	ldr	r2, [r7, #16]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	699b      	ldr	r3, [r3, #24]
 8009ade:	011b      	lsls	r3, r3, #4
 8009ae0:	693a      	ldr	r2, [r7, #16]
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	693a      	ldr	r2, [r7, #16]
 8009aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	68fa      	ldr	r2, [r7, #12]
 8009af0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	685a      	ldr	r2, [r3, #4]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	697a      	ldr	r2, [r7, #20]
 8009afe:	621a      	str	r2, [r3, #32]
}
 8009b00:	bf00      	nop
 8009b02:	371c      	adds	r7, #28
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr
 8009b0c:	40010000 	.word	0x40010000

08009b10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b087      	sub	sp, #28
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a1b      	ldr	r3, [r3, #32]
 8009b1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a1b      	ldr	r3, [r3, #32]
 8009b2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	69db      	ldr	r3, [r3, #28]
 8009b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	021b      	lsls	r3, r3, #8
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	031b      	lsls	r3, r3, #12
 8009b62:	693a      	ldr	r2, [r7, #16]
 8009b64:	4313      	orrs	r3, r2
 8009b66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4a10      	ldr	r2, [pc, #64]	; (8009bac <TIM_OC4_SetConfig+0x9c>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d109      	bne.n	8009b84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	695b      	ldr	r3, [r3, #20]
 8009b7c:	019b      	lsls	r3, r3, #6
 8009b7e:	697a      	ldr	r2, [r7, #20]
 8009b80:	4313      	orrs	r3, r2
 8009b82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	697a      	ldr	r2, [r7, #20]
 8009b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	685a      	ldr	r2, [r3, #4]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	621a      	str	r2, [r3, #32]
}
 8009b9e:	bf00      	nop
 8009ba0:	371c      	adds	r7, #28
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	40010000 	.word	0x40010000

08009bb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b087      	sub	sp, #28
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	f003 031f 	and.w	r3, r3, #31
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6a1a      	ldr	r2, [r3, #32]
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	43db      	mvns	r3, r3
 8009bd2:	401a      	ands	r2, r3
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6a1a      	ldr	r2, [r3, #32]
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	f003 031f 	and.w	r3, r3, #31
 8009be2:	6879      	ldr	r1, [r7, #4]
 8009be4:	fa01 f303 	lsl.w	r3, r1, r3
 8009be8:	431a      	orrs	r2, r3
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	621a      	str	r2, [r3, #32]
}
 8009bee:	bf00      	nop
 8009bf0:	371c      	adds	r7, #28
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr

08009bfa <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009bfa:	b480      	push	{r7}
 8009bfc:	b083      	sub	sp, #12
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c02:	bf00      	nop
 8009c04:	370c      	adds	r7, #12
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr

08009c0e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c0e:	b480      	push	{r7}
 8009c10:	b083      	sub	sp, #12
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c16:	bf00      	nop
 8009c18:	370c      	adds	r7, #12
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr

08009c22 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b082      	sub	sp, #8
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d101      	bne.n	8009c34 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c30:	2301      	movs	r3, #1
 8009c32:	e03f      	b.n	8009cb4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d106      	bne.n	8009c4e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7fa f8ff 	bl	8003e4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2224      	movs	r2, #36	; 0x24
 8009c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	68da      	ldr	r2, [r3, #12]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009c64:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f001 f978 	bl	800af5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	691a      	ldr	r2, [r3, #16]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c7a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	695a      	ldr	r2, [r3, #20]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c8a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	68da      	ldr	r2, [r3, #12]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c9a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2220      	movs	r2, #32
 8009ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2220      	movs	r2, #32
 8009cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009cb2:	2300      	movs	r3, #0
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b08a      	sub	sp, #40	; 0x28
 8009cc0:	af02      	add	r7, sp, #8
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	603b      	str	r3, [r7, #0]
 8009cc8:	4613      	mov	r3, r2
 8009cca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	2b20      	cmp	r3, #32
 8009cda:	d17c      	bne.n	8009dd6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d002      	beq.n	8009ce8 <HAL_UART_Transmit+0x2c>
 8009ce2:	88fb      	ldrh	r3, [r7, #6]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d101      	bne.n	8009cec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e075      	b.n	8009dd8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d101      	bne.n	8009cfa <HAL_UART_Transmit+0x3e>
 8009cf6:	2302      	movs	r3, #2
 8009cf8:	e06e      	b.n	8009dd8 <HAL_UART_Transmit+0x11c>
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2200      	movs	r2, #0
 8009d06:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2221      	movs	r2, #33	; 0x21
 8009d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009d10:	f7fa fdec 	bl	80048ec <HAL_GetTick>
 8009d14:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	88fa      	ldrh	r2, [r7, #6]
 8009d1a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	88fa      	ldrh	r2, [r7, #6]
 8009d20:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d2a:	d108      	bne.n	8009d3e <HAL_UART_Transmit+0x82>
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	691b      	ldr	r3, [r3, #16]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d104      	bne.n	8009d3e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009d34:	2300      	movs	r3, #0
 8009d36:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	61bb      	str	r3, [r7, #24]
 8009d3c:	e003      	b.n	8009d46 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d42:	2300      	movs	r3, #0
 8009d44:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009d4e:	e02a      	b.n	8009da6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	9300      	str	r3, [sp, #0]
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	2200      	movs	r2, #0
 8009d58:	2180      	movs	r1, #128	; 0x80
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	f000 fe2f 	bl	800a9be <UART_WaitOnFlagUntilTimeout>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d001      	beq.n	8009d6a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009d66:	2303      	movs	r3, #3
 8009d68:	e036      	b.n	8009dd8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d10b      	bne.n	8009d88 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	881b      	ldrh	r3, [r3, #0]
 8009d74:	461a      	mov	r2, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d7e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	3302      	adds	r3, #2
 8009d84:	61bb      	str	r3, [r7, #24]
 8009d86:	e007      	b.n	8009d98 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	781a      	ldrb	r2, [r3, #0]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	3301      	adds	r3, #1
 8009d96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	3b01      	subs	r3, #1
 8009da0:	b29a      	uxth	r2, r3
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d1cf      	bne.n	8009d50 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	9300      	str	r3, [sp, #0]
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	2200      	movs	r2, #0
 8009db8:	2140      	movs	r1, #64	; 0x40
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f000 fdff 	bl	800a9be <UART_WaitOnFlagUntilTimeout>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d001      	beq.n	8009dca <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009dc6:	2303      	movs	r3, #3
 8009dc8:	e006      	b.n	8009dd8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2220      	movs	r2, #32
 8009dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	e000      	b.n	8009dd8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009dd6:	2302      	movs	r3, #2
  }
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3720      	adds	r7, #32
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b08a      	sub	sp, #40	; 0x28
 8009de4:	af02      	add	r7, sp, #8
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	603b      	str	r3, [r7, #0]
 8009dec:	4613      	mov	r3, r2
 8009dee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009df0:	2300      	movs	r3, #0
 8009df2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	2b20      	cmp	r3, #32
 8009dfe:	f040 808c 	bne.w	8009f1a <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d002      	beq.n	8009e0e <HAL_UART_Receive+0x2e>
 8009e08:	88fb      	ldrh	r3, [r7, #6]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d101      	bne.n	8009e12 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e084      	b.n	8009f1c <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d101      	bne.n	8009e20 <HAL_UART_Receive+0x40>
 8009e1c:	2302      	movs	r3, #2
 8009e1e:	e07d      	b.n	8009f1c <HAL_UART_Receive+0x13c>
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2201      	movs	r2, #1
 8009e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2222      	movs	r2, #34	; 0x22
 8009e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009e3c:	f7fa fd56 	bl	80048ec <HAL_GetTick>
 8009e40:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	88fa      	ldrh	r2, [r7, #6]
 8009e46:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	88fa      	ldrh	r2, [r7, #6]
 8009e4c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e56:	d108      	bne.n	8009e6a <HAL_UART_Receive+0x8a>
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	691b      	ldr	r3, [r3, #16]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d104      	bne.n	8009e6a <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8009e60:	2300      	movs	r3, #0
 8009e62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	61bb      	str	r3, [r7, #24]
 8009e68:	e003      	b.n	8009e72 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2200      	movs	r2, #0
 8009e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009e7a:	e043      	b.n	8009f04 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	9300      	str	r3, [sp, #0]
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	2200      	movs	r2, #0
 8009e84:	2120      	movs	r1, #32
 8009e86:	68f8      	ldr	r0, [r7, #12]
 8009e88:	f000 fd99 	bl	800a9be <UART_WaitOnFlagUntilTimeout>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d001      	beq.n	8009e96 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8009e92:	2303      	movs	r3, #3
 8009e94:	e042      	b.n	8009f1c <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d10c      	bne.n	8009eb6 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ea8:	b29a      	uxth	r2, r3
 8009eaa:	69bb      	ldr	r3, [r7, #24]
 8009eac:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	3302      	adds	r3, #2
 8009eb2:	61bb      	str	r3, [r7, #24]
 8009eb4:	e01f      	b.n	8009ef6 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ebe:	d007      	beq.n	8009ed0 <HAL_UART_Receive+0xf0>
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d10a      	bne.n	8009ede <HAL_UART_Receive+0xfe>
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	691b      	ldr	r3, [r3, #16]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d106      	bne.n	8009ede <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	b2da      	uxtb	r2, r3
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	701a      	strb	r2, [r3, #0]
 8009edc:	e008      	b.n	8009ef0 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eea:	b2da      	uxtb	r2, r3
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	3b01      	subs	r3, #1
 8009efe:	b29a      	uxth	r2, r3
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d1b6      	bne.n	8009e7c <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2220      	movs	r2, #32
 8009f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8009f16:	2300      	movs	r3, #0
 8009f18:	e000      	b.n	8009f1c <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8009f1a:	2302      	movs	r3, #2
  }
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3720      	adds	r7, #32
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b08c      	sub	sp, #48	; 0x30
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	4613      	mov	r3, r2
 8009f30:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	2b20      	cmp	r3, #32
 8009f3c:	d165      	bne.n	800a00a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d002      	beq.n	8009f4a <HAL_UART_Transmit_DMA+0x26>
 8009f44:	88fb      	ldrh	r3, [r7, #6]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d101      	bne.n	8009f4e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e05e      	b.n	800a00c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d101      	bne.n	8009f5c <HAL_UART_Transmit_DMA+0x38>
 8009f58:	2302      	movs	r3, #2
 8009f5a:	e057      	b.n	800a00c <HAL_UART_Transmit_DMA+0xe8>
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009f64:	68ba      	ldr	r2, [r7, #8]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	88fa      	ldrh	r2, [r7, #6]
 8009f6e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	88fa      	ldrh	r2, [r7, #6]
 8009f74:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2221      	movs	r2, #33	; 0x21
 8009f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f88:	4a22      	ldr	r2, [pc, #136]	; (800a014 <HAL_UART_Transmit_DMA+0xf0>)
 8009f8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f90:	4a21      	ldr	r2, [pc, #132]	; (800a018 <HAL_UART_Transmit_DMA+0xf4>)
 8009f92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f98:	4a20      	ldr	r2, [pc, #128]	; (800a01c <HAL_UART_Transmit_DMA+0xf8>)
 8009f9a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8009fa4:	f107 0308 	add.w	r3, r7, #8
 8009fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb0:	6819      	ldr	r1, [r3, #0]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	3304      	adds	r3, #4
 8009fb8:	461a      	mov	r2, r3
 8009fba:	88fb      	ldrh	r3, [r7, #6]
 8009fbc:	f7fb f926 	bl	800520c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009fc8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	3314      	adds	r3, #20
 8009fd8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	e853 3f00 	ldrex	r3, [r3]
 8009fe0:	617b      	str	r3, [r7, #20]
   return(result);
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	3314      	adds	r3, #20
 8009ff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ff2:	627a      	str	r2, [r7, #36]	; 0x24
 8009ff4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff6:	6a39      	ldr	r1, [r7, #32]
 8009ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ffa:	e841 2300 	strex	r3, r2, [r1]
 8009ffe:	61fb      	str	r3, [r7, #28]
   return(result);
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d1e5      	bne.n	8009fd2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a006:	2300      	movs	r3, #0
 800a008:	e000      	b.n	800a00c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a00a:	2302      	movs	r3, #2
  }
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3730      	adds	r7, #48	; 0x30
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	0800a719 	.word	0x0800a719
 800a018:	0800a7b3 	.word	0x0800a7b3
 800a01c:	0800a92b 	.word	0x0800a92b

0800a020 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	4613      	mov	r3, r2
 800a02c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a034:	b2db      	uxtb	r3, r3
 800a036:	2b20      	cmp	r3, #32
 800a038:	d11d      	bne.n	800a076 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d002      	beq.n	800a046 <HAL_UART_Receive_DMA+0x26>
 800a040:	88fb      	ldrh	r3, [r7, #6]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d101      	bne.n	800a04a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	e016      	b.n	800a078 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a050:	2b01      	cmp	r3, #1
 800a052:	d101      	bne.n	800a058 <HAL_UART_Receive_DMA+0x38>
 800a054:	2302      	movs	r3, #2
 800a056:	e00f      	b.n	800a078 <HAL_UART_Receive_DMA+0x58>
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2201      	movs	r2, #1
 800a05c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2200      	movs	r2, #0
 800a064:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a066:	88fb      	ldrh	r3, [r7, #6]
 800a068:	461a      	mov	r2, r3
 800a06a:	68b9      	ldr	r1, [r7, #8]
 800a06c:	68f8      	ldr	r0, [r7, #12]
 800a06e:	f000 fd15 	bl	800aa9c <UART_Start_Receive_DMA>
 800a072:	4603      	mov	r3, r0
 800a074:	e000      	b.n	800a078 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a076:	2302      	movs	r3, #2
  }
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b090      	sub	sp, #64	; 0x40
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a088:	2300      	movs	r3, #0
 800a08a:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	695b      	ldr	r3, [r3, #20]
 800a092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a096:	2b80      	cmp	r3, #128	; 0x80
 800a098:	bf0c      	ite	eq
 800a09a:	2301      	moveq	r3, #1
 800a09c:	2300      	movne	r3, #0
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	2b21      	cmp	r3, #33	; 0x21
 800a0ac:	d128      	bne.n	800a100 <HAL_UART_DMAStop+0x80>
 800a0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d025      	beq.n	800a100 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	3314      	adds	r3, #20
 800a0ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0be:	e853 3f00 	ldrex	r3, [r3]
 800a0c2:	623b      	str	r3, [r7, #32]
   return(result);
 800a0c4:	6a3b      	ldr	r3, [r7, #32]
 800a0c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0ca:	63bb      	str	r3, [r7, #56]	; 0x38
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	3314      	adds	r3, #20
 800a0d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0d4:	633a      	str	r2, [r7, #48]	; 0x30
 800a0d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a0da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0dc:	e841 2300 	strex	r3, r2, [r1]
 800a0e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d1e5      	bne.n	800a0b4 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d004      	beq.n	800a0fa <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7fb f8e1 	bl	80052bc <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 fd6c 	bl	800abd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	695b      	ldr	r3, [r3, #20]
 800a106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a10a:	2b40      	cmp	r3, #64	; 0x40
 800a10c:	bf0c      	ite	eq
 800a10e:	2301      	moveq	r3, #1
 800a110:	2300      	movne	r3, #0
 800a112:	b2db      	uxtb	r3, r3
 800a114:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	2b22      	cmp	r3, #34	; 0x22
 800a120:	d128      	bne.n	800a174 <HAL_UART_DMAStop+0xf4>
 800a122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a124:	2b00      	cmp	r3, #0
 800a126:	d025      	beq.n	800a174 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	3314      	adds	r3, #20
 800a12e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	e853 3f00 	ldrex	r3, [r3]
 800a136:	60fb      	str	r3, [r7, #12]
   return(result);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a13e:	637b      	str	r3, [r7, #52]	; 0x34
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	3314      	adds	r3, #20
 800a146:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a148:	61fa      	str	r2, [r7, #28]
 800a14a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a14c:	69b9      	ldr	r1, [r7, #24]
 800a14e:	69fa      	ldr	r2, [r7, #28]
 800a150:	e841 2300 	strex	r3, r2, [r1]
 800a154:	617b      	str	r3, [r7, #20]
   return(result);
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d1e5      	bne.n	800a128 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a160:	2b00      	cmp	r3, #0
 800a162:	d004      	beq.n	800a16e <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a168:	4618      	mov	r0, r3
 800a16a:	f7fb f8a7 	bl	80052bc <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 fd5a 	bl	800ac28 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3740      	adds	r7, #64	; 0x40
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
	...

0800a180 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b0ba      	sub	sp, #232	; 0xe8
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	695b      	ldr	r3, [r3, #20]
 800a1a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a1b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1b6:	f003 030f 	and.w	r3, r3, #15
 800a1ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a1be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d10f      	bne.n	800a1e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a1c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1ca:	f003 0320 	and.w	r3, r3, #32
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d009      	beq.n	800a1e6 <HAL_UART_IRQHandler+0x66>
 800a1d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1d6:	f003 0320 	and.w	r3, r3, #32
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d003      	beq.n	800a1e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 fe01 	bl	800ade6 <UART_Receive_IT>
      return;
 800a1e4:	e256      	b.n	800a694 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a1e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	f000 80de 	beq.w	800a3ac <HAL_UART_IRQHandler+0x22c>
 800a1f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1f4:	f003 0301 	and.w	r3, r3, #1
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d106      	bne.n	800a20a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a1fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a200:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a204:	2b00      	cmp	r3, #0
 800a206:	f000 80d1 	beq.w	800a3ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a20a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a20e:	f003 0301 	and.w	r3, r3, #1
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00b      	beq.n	800a22e <HAL_UART_IRQHandler+0xae>
 800a216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a21a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d005      	beq.n	800a22e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a226:	f043 0201 	orr.w	r2, r3, #1
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a22e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a232:	f003 0304 	and.w	r3, r3, #4
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00b      	beq.n	800a252 <HAL_UART_IRQHandler+0xd2>
 800a23a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a23e:	f003 0301 	and.w	r3, r3, #1
 800a242:	2b00      	cmp	r3, #0
 800a244:	d005      	beq.n	800a252 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a24a:	f043 0202 	orr.w	r2, r3, #2
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a256:	f003 0302 	and.w	r3, r3, #2
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d00b      	beq.n	800a276 <HAL_UART_IRQHandler+0xf6>
 800a25e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a262:	f003 0301 	and.w	r3, r3, #1
 800a266:	2b00      	cmp	r3, #0
 800a268:	d005      	beq.n	800a276 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a26e:	f043 0204 	orr.w	r2, r3, #4
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a27a:	f003 0308 	and.w	r3, r3, #8
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d011      	beq.n	800a2a6 <HAL_UART_IRQHandler+0x126>
 800a282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a286:	f003 0320 	and.w	r3, r3, #32
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d105      	bne.n	800a29a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a28e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a292:	f003 0301 	and.w	r3, r3, #1
 800a296:	2b00      	cmp	r3, #0
 800a298:	d005      	beq.n	800a2a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a29e:	f043 0208 	orr.w	r2, r3, #8
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	f000 81ed 	beq.w	800a68a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a2b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2b4:	f003 0320 	and.w	r3, r3, #32
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d008      	beq.n	800a2ce <HAL_UART_IRQHandler+0x14e>
 800a2bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2c0:	f003 0320 	and.w	r3, r3, #32
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d002      	beq.n	800a2ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 fd8c 	bl	800ade6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	695b      	ldr	r3, [r3, #20]
 800a2d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2d8:	2b40      	cmp	r3, #64	; 0x40
 800a2da:	bf0c      	ite	eq
 800a2dc:	2301      	moveq	r3, #1
 800a2de:	2300      	movne	r3, #0
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ea:	f003 0308 	and.w	r3, r3, #8
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d103      	bne.n	800a2fa <HAL_UART_IRQHandler+0x17a>
 800a2f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d04f      	beq.n	800a39a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 fc94 	bl	800ac28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	695b      	ldr	r3, [r3, #20]
 800a306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a30a:	2b40      	cmp	r3, #64	; 0x40
 800a30c:	d141      	bne.n	800a392 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	3314      	adds	r3, #20
 800a314:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a318:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a31c:	e853 3f00 	ldrex	r3, [r3]
 800a320:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a324:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a32c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	3314      	adds	r3, #20
 800a336:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a33a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a33e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a342:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a346:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a34a:	e841 2300 	strex	r3, r2, [r1]
 800a34e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a352:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d1d9      	bne.n	800a30e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d013      	beq.n	800a38a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a366:	4a7d      	ldr	r2, [pc, #500]	; (800a55c <HAL_UART_IRQHandler+0x3dc>)
 800a368:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a36e:	4618      	mov	r0, r3
 800a370:	f7fb f814 	bl	800539c <HAL_DMA_Abort_IT>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d016      	beq.n	800a3a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a37e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a384:	4610      	mov	r0, r2
 800a386:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a388:	e00e      	b.n	800a3a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 f9ae 	bl	800a6ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a390:	e00a      	b.n	800a3a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f000 f9aa 	bl	800a6ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a398:	e006      	b.n	800a3a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 f9a6 	bl	800a6ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a3a6:	e170      	b.n	800a68a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3a8:	bf00      	nop
    return;
 800a3aa:	e16e      	b.n	800a68a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	f040 814a 	bne.w	800a64a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a3b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3ba:	f003 0310 	and.w	r3, r3, #16
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	f000 8143 	beq.w	800a64a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a3c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3c8:	f003 0310 	and.w	r3, r3, #16
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f000 813c 	beq.w	800a64a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	60bb      	str	r3, [r7, #8]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	60bb      	str	r3, [r7, #8]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	60bb      	str	r3, [r7, #8]
 800a3e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	695b      	ldr	r3, [r3, #20]
 800a3ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3f2:	2b40      	cmp	r3, #64	; 0x40
 800a3f4:	f040 80b4 	bne.w	800a560 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a404:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f000 8140 	beq.w	800a68e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a412:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a416:	429a      	cmp	r2, r3
 800a418:	f080 8139 	bcs.w	800a68e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a422:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a428:	69db      	ldr	r3, [r3, #28]
 800a42a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a42e:	f000 8088 	beq.w	800a542 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	330c      	adds	r3, #12
 800a438:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a43c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a440:	e853 3f00 	ldrex	r3, [r3]
 800a444:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a448:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a44c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a450:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	330c      	adds	r3, #12
 800a45a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a45e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a462:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a466:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a46a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a46e:	e841 2300 	strex	r3, r2, [r1]
 800a472:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a476:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d1d9      	bne.n	800a432 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	3314      	adds	r3, #20
 800a484:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a488:	e853 3f00 	ldrex	r3, [r3]
 800a48c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a48e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a490:	f023 0301 	bic.w	r3, r3, #1
 800a494:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	3314      	adds	r3, #20
 800a49e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a4a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a4a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a4aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a4ae:	e841 2300 	strex	r3, r2, [r1]
 800a4b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a4b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d1e1      	bne.n	800a47e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	3314      	adds	r3, #20
 800a4c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4c4:	e853 3f00 	ldrex	r3, [r3]
 800a4c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a4ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a4cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	3314      	adds	r3, #20
 800a4da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a4de:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a4e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a4e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a4e6:	e841 2300 	strex	r3, r2, [r1]
 800a4ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a4ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d1e3      	bne.n	800a4ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2220      	movs	r2, #32
 800a4f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	330c      	adds	r3, #12
 800a506:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a50a:	e853 3f00 	ldrex	r3, [r3]
 800a50e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a512:	f023 0310 	bic.w	r3, r3, #16
 800a516:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	330c      	adds	r3, #12
 800a520:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a524:	65ba      	str	r2, [r7, #88]	; 0x58
 800a526:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a528:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a52a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a52c:	e841 2300 	strex	r3, r2, [r1]
 800a530:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a534:	2b00      	cmp	r3, #0
 800a536:	d1e3      	bne.n	800a500 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a53c:	4618      	mov	r0, r3
 800a53e:	f7fa febd 	bl	80052bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	1ad3      	subs	r3, r2, r3
 800a54e:	b29b      	uxth	r3, r3
 800a550:	4619      	mov	r1, r3
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 f8d4 	bl	800a700 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a558:	e099      	b.n	800a68e <HAL_UART_IRQHandler+0x50e>
 800a55a:	bf00      	nop
 800a55c:	0800acef 	.word	0x0800acef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a568:	b29b      	uxth	r3, r3
 800a56a:	1ad3      	subs	r3, r2, r3
 800a56c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a574:	b29b      	uxth	r3, r3
 800a576:	2b00      	cmp	r3, #0
 800a578:	f000 808b 	beq.w	800a692 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a57c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a580:	2b00      	cmp	r3, #0
 800a582:	f000 8086 	beq.w	800a692 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	330c      	adds	r3, #12
 800a58c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a590:	e853 3f00 	ldrex	r3, [r3]
 800a594:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a598:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a59c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	330c      	adds	r3, #12
 800a5a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a5aa:	647a      	str	r2, [r7, #68]	; 0x44
 800a5ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a5b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a5b2:	e841 2300 	strex	r3, r2, [r1]
 800a5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a5b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d1e3      	bne.n	800a586 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	3314      	adds	r3, #20
 800a5c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c8:	e853 3f00 	ldrex	r3, [r3]
 800a5cc:	623b      	str	r3, [r7, #32]
   return(result);
 800a5ce:	6a3b      	ldr	r3, [r7, #32]
 800a5d0:	f023 0301 	bic.w	r3, r3, #1
 800a5d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	3314      	adds	r3, #20
 800a5de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a5e2:	633a      	str	r2, [r7, #48]	; 0x30
 800a5e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a5e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5ea:	e841 2300 	strex	r3, r2, [r1]
 800a5ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d1e3      	bne.n	800a5be <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2220      	movs	r2, #32
 800a5fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	330c      	adds	r3, #12
 800a60a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	e853 3f00 	ldrex	r3, [r3]
 800a612:	60fb      	str	r3, [r7, #12]
   return(result);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f023 0310 	bic.w	r3, r3, #16
 800a61a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	330c      	adds	r3, #12
 800a624:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a628:	61fa      	str	r2, [r7, #28]
 800a62a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a62c:	69b9      	ldr	r1, [r7, #24]
 800a62e:	69fa      	ldr	r2, [r7, #28]
 800a630:	e841 2300 	strex	r3, r2, [r1]
 800a634:	617b      	str	r3, [r7, #20]
   return(result);
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d1e3      	bne.n	800a604 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a63c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a640:	4619      	mov	r1, r3
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 f85c 	bl	800a700 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a648:	e023      	b.n	800a692 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a64a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a64e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a652:	2b00      	cmp	r3, #0
 800a654:	d009      	beq.n	800a66a <HAL_UART_IRQHandler+0x4ea>
 800a656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a65a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d003      	beq.n	800a66a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 fb57 	bl	800ad16 <UART_Transmit_IT>
    return;
 800a668:	e014      	b.n	800a694 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a66a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a66e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a672:	2b00      	cmp	r3, #0
 800a674:	d00e      	beq.n	800a694 <HAL_UART_IRQHandler+0x514>
 800a676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a67a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d008      	beq.n	800a694 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 fb97 	bl	800adb6 <UART_EndTransmit_IT>
    return;
 800a688:	e004      	b.n	800a694 <HAL_UART_IRQHandler+0x514>
    return;
 800a68a:	bf00      	nop
 800a68c:	e002      	b.n	800a694 <HAL_UART_IRQHandler+0x514>
      return;
 800a68e:	bf00      	nop
 800a690:	e000      	b.n	800a694 <HAL_UART_IRQHandler+0x514>
      return;
 800a692:	bf00      	nop
  }
}
 800a694:	37e8      	adds	r7, #232	; 0xe8
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop

0800a69c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a6a4:	bf00      	nop
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a6b8:	bf00      	nop
 800a6ba:	370c      	adds	r7, #12
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b083      	sub	sp, #12
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a6cc:	bf00      	nop
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a6e0:	bf00      	nop
 800a6e2:	370c      	adds	r7, #12
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr

0800a6ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a6f4:	bf00      	nop
 800a6f6:	370c      	adds	r7, #12
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	460b      	mov	r3, r1
 800a70a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a70c:	bf00      	nop
 800a70e:	370c      	adds	r7, #12
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b090      	sub	sp, #64	; 0x40
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a724:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a730:	2b00      	cmp	r3, #0
 800a732:	d137      	bne.n	800a7a4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a736:	2200      	movs	r2, #0
 800a738:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a73a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	3314      	adds	r3, #20
 800a740:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a744:	e853 3f00 	ldrex	r3, [r3]
 800a748:	623b      	str	r3, [r7, #32]
   return(result);
 800a74a:	6a3b      	ldr	r3, [r7, #32]
 800a74c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a750:	63bb      	str	r3, [r7, #56]	; 0x38
 800a752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	3314      	adds	r3, #20
 800a758:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a75a:	633a      	str	r2, [r7, #48]	; 0x30
 800a75c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a762:	e841 2300 	strex	r3, r2, [r1]
 800a766:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d1e5      	bne.n	800a73a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a76e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	330c      	adds	r3, #12
 800a774:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	e853 3f00 	ldrex	r3, [r3]
 800a77c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a784:	637b      	str	r3, [r7, #52]	; 0x34
 800a786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	330c      	adds	r3, #12
 800a78c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a78e:	61fa      	str	r2, [r7, #28]
 800a790:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a792:	69b9      	ldr	r1, [r7, #24]
 800a794:	69fa      	ldr	r2, [r7, #28]
 800a796:	e841 2300 	strex	r3, r2, [r1]
 800a79a:	617b      	str	r3, [r7, #20]
   return(result);
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d1e5      	bne.n	800a76e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a7a2:	e002      	b.n	800a7aa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a7a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a7a6:	f7ff ff79 	bl	800a69c <HAL_UART_TxCpltCallback>
}
 800a7aa:	bf00      	nop
 800a7ac:	3740      	adds	r7, #64	; 0x40
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b084      	sub	sp, #16
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7be:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a7c0:	68f8      	ldr	r0, [r7, #12]
 800a7c2:	f7ff ff75 	bl	800a6b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7c6:	bf00      	nop
 800a7c8:	3710      	adds	r7, #16
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}

0800a7ce <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b09c      	sub	sp, #112	; 0x70
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7da:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d172      	bne.n	800a8d0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a7ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	330c      	adds	r3, #12
 800a7f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7fa:	e853 3f00 	ldrex	r3, [r3]
 800a7fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a802:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a806:	66bb      	str	r3, [r7, #104]	; 0x68
 800a808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	330c      	adds	r3, #12
 800a80e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a810:	65ba      	str	r2, [r7, #88]	; 0x58
 800a812:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a814:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a816:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a818:	e841 2300 	strex	r3, r2, [r1]
 800a81c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a81e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a820:	2b00      	cmp	r3, #0
 800a822:	d1e5      	bne.n	800a7f0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	3314      	adds	r3, #20
 800a82a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82e:	e853 3f00 	ldrex	r3, [r3]
 800a832:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a836:	f023 0301 	bic.w	r3, r3, #1
 800a83a:	667b      	str	r3, [r7, #100]	; 0x64
 800a83c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	3314      	adds	r3, #20
 800a842:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a844:	647a      	str	r2, [r7, #68]	; 0x44
 800a846:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a848:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a84a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a84c:	e841 2300 	strex	r3, r2, [r1]
 800a850:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a854:	2b00      	cmp	r3, #0
 800a856:	d1e5      	bne.n	800a824 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	3314      	adds	r3, #20
 800a85e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a862:	e853 3f00 	ldrex	r3, [r3]
 800a866:	623b      	str	r3, [r7, #32]
   return(result);
 800a868:	6a3b      	ldr	r3, [r7, #32]
 800a86a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a86e:	663b      	str	r3, [r7, #96]	; 0x60
 800a870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	3314      	adds	r3, #20
 800a876:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a878:	633a      	str	r2, [r7, #48]	; 0x30
 800a87a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a87c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a87e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a880:	e841 2300 	strex	r3, r2, [r1]
 800a884:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d1e5      	bne.n	800a858 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a88c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a88e:	2220      	movs	r2, #32
 800a890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d119      	bne.n	800a8d0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a89c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	330c      	adds	r3, #12
 800a8a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	e853 3f00 	ldrex	r3, [r3]
 800a8aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f023 0310 	bic.w	r3, r3, #16
 800a8b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a8b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	330c      	adds	r3, #12
 800a8ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a8bc:	61fa      	str	r2, [r7, #28]
 800a8be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c0:	69b9      	ldr	r1, [r7, #24]
 800a8c2:	69fa      	ldr	r2, [r7, #28]
 800a8c4:	e841 2300 	strex	r3, r2, [r1]
 800a8c8:	617b      	str	r3, [r7, #20]
   return(result);
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d1e5      	bne.n	800a89c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d106      	bne.n	800a8e6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a8d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a8dc:	4619      	mov	r1, r3
 800a8de:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a8e0:	f7ff ff0e 	bl	800a700 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a8e4:	e002      	b.n	800a8ec <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a8e6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a8e8:	f7ff feec 	bl	800a6c4 <HAL_UART_RxCpltCallback>
}
 800a8ec:	bf00      	nop
 800a8ee:	3770      	adds	r7, #112	; 0x70
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a900:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a906:	2b01      	cmp	r3, #1
 800a908:	d108      	bne.n	800a91c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a90e:	085b      	lsrs	r3, r3, #1
 800a910:	b29b      	uxth	r3, r3
 800a912:	4619      	mov	r1, r3
 800a914:	68f8      	ldr	r0, [r7, #12]
 800a916:	f7ff fef3 	bl	800a700 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a91a:	e002      	b.n	800a922 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a91c:	68f8      	ldr	r0, [r7, #12]
 800a91e:	f7ff fedb 	bl	800a6d8 <HAL_UART_RxHalfCpltCallback>
}
 800a922:	bf00      	nop
 800a924:	3710      	adds	r7, #16
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}

0800a92a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b084      	sub	sp, #16
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a932:	2300      	movs	r3, #0
 800a934:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a93a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	695b      	ldr	r3, [r3, #20]
 800a942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a946:	2b80      	cmp	r3, #128	; 0x80
 800a948:	bf0c      	ite	eq
 800a94a:	2301      	moveq	r3, #1
 800a94c:	2300      	movne	r3, #0
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	2b21      	cmp	r3, #33	; 0x21
 800a95c:	d108      	bne.n	800a970 <UART_DMAError+0x46>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d005      	beq.n	800a970 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	2200      	movs	r2, #0
 800a968:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a96a:	68b8      	ldr	r0, [r7, #8]
 800a96c:	f000 f934 	bl	800abd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	695b      	ldr	r3, [r3, #20]
 800a976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a97a:	2b40      	cmp	r3, #64	; 0x40
 800a97c:	bf0c      	ite	eq
 800a97e:	2301      	moveq	r3, #1
 800a980:	2300      	movne	r3, #0
 800a982:	b2db      	uxtb	r3, r3
 800a984:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	2b22      	cmp	r3, #34	; 0x22
 800a990:	d108      	bne.n	800a9a4 <UART_DMAError+0x7a>
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d005      	beq.n	800a9a4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	2200      	movs	r2, #0
 800a99c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a99e:	68b8      	ldr	r0, [r7, #8]
 800a9a0:	f000 f942 	bl	800ac28 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a8:	f043 0210 	orr.w	r2, r3, #16
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a9b0:	68b8      	ldr	r0, [r7, #8]
 800a9b2:	f7ff fe9b 	bl	800a6ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9b6:	bf00      	nop
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b090      	sub	sp, #64	; 0x40
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	60f8      	str	r0, [r7, #12]
 800a9c6:	60b9      	str	r1, [r7, #8]
 800a9c8:	603b      	str	r3, [r7, #0]
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9ce:	e050      	b.n	800aa72 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9d6:	d04c      	beq.n	800aa72 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a9d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d007      	beq.n	800a9ee <UART_WaitOnFlagUntilTimeout+0x30>
 800a9de:	f7f9 ff85 	bl	80048ec <HAL_GetTick>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	1ad3      	subs	r3, r2, r3
 800a9e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d241      	bcs.n	800aa72 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	330c      	adds	r3, #12
 800a9f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f8:	e853 3f00 	ldrex	r3, [r3]
 800a9fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aa04:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	330c      	adds	r3, #12
 800aa0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aa0e:	637a      	str	r2, [r7, #52]	; 0x34
 800aa10:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa16:	e841 2300 	strex	r3, r2, [r1]
 800aa1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aa1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d1e5      	bne.n	800a9ee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	3314      	adds	r3, #20
 800aa28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	e853 3f00 	ldrex	r3, [r3]
 800aa30:	613b      	str	r3, [r7, #16]
   return(result);
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	f023 0301 	bic.w	r3, r3, #1
 800aa38:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	3314      	adds	r3, #20
 800aa40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa42:	623a      	str	r2, [r7, #32]
 800aa44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa46:	69f9      	ldr	r1, [r7, #28]
 800aa48:	6a3a      	ldr	r2, [r7, #32]
 800aa4a:	e841 2300 	strex	r3, r2, [r1]
 800aa4e:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa50:	69bb      	ldr	r3, [r7, #24]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d1e5      	bne.n	800aa22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2220      	movs	r2, #32
 800aa5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2220      	movs	r2, #32
 800aa62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800aa6e:	2303      	movs	r3, #3
 800aa70:	e00f      	b.n	800aa92 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	4013      	ands	r3, r2
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	bf0c      	ite	eq
 800aa82:	2301      	moveq	r3, #1
 800aa84:	2300      	movne	r3, #0
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	461a      	mov	r2, r3
 800aa8a:	79fb      	ldrb	r3, [r7, #7]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d09f      	beq.n	800a9d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aa90:	2300      	movs	r3, #0
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3740      	adds	r7, #64	; 0x40
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
	...

0800aa9c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b098      	sub	sp, #96	; 0x60
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	60b9      	str	r1, [r7, #8]
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800aaaa:	68ba      	ldr	r2, [r7, #8]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	88fa      	ldrh	r2, [r7, #6]
 800aab4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2200      	movs	r2, #0
 800aaba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2222      	movs	r2, #34	; 0x22
 800aac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac8:	4a40      	ldr	r2, [pc, #256]	; (800abcc <UART_Start_Receive_DMA+0x130>)
 800aaca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad0:	4a3f      	ldr	r2, [pc, #252]	; (800abd0 <UART_Start_Receive_DMA+0x134>)
 800aad2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad8:	4a3e      	ldr	r2, [pc, #248]	; (800abd4 <UART_Start_Receive_DMA+0x138>)
 800aada:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae0:	2200      	movs	r2, #0
 800aae2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800aae4:	f107 0308 	add.w	r3, r7, #8
 800aae8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	3304      	adds	r3, #4
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	88fb      	ldrh	r3, [r7, #6]
 800aafc:	f7fa fb86 	bl	800520c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ab00:	2300      	movs	r3, #0
 800ab02:	613b      	str	r3, [r7, #16]
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	613b      	str	r3, [r7, #16]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	613b      	str	r3, [r7, #16]
 800ab14:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	691b      	ldr	r3, [r3, #16]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d019      	beq.n	800ab5a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	330c      	adds	r3, #12
 800ab2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab30:	e853 3f00 	ldrex	r3, [r3]
 800ab34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab3c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	330c      	adds	r3, #12
 800ab44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab46:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ab48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab4a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ab4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab4e:	e841 2300 	strex	r3, r2, [r1]
 800ab52:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ab54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d1e5      	bne.n	800ab26 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	3314      	adds	r3, #20
 800ab60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab64:	e853 3f00 	ldrex	r3, [r3]
 800ab68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6c:	f043 0301 	orr.w	r3, r3, #1
 800ab70:	657b      	str	r3, [r7, #84]	; 0x54
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	3314      	adds	r3, #20
 800ab78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab7a:	63ba      	str	r2, [r7, #56]	; 0x38
 800ab7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ab80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab82:	e841 2300 	strex	r3, r2, [r1]
 800ab86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ab88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d1e5      	bne.n	800ab5a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	3314      	adds	r3, #20
 800ab94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	e853 3f00 	ldrex	r3, [r3]
 800ab9c:	617b      	str	r3, [r7, #20]
   return(result);
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aba4:	653b      	str	r3, [r7, #80]	; 0x50
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	3314      	adds	r3, #20
 800abac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800abae:	627a      	str	r2, [r7, #36]	; 0x24
 800abb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb2:	6a39      	ldr	r1, [r7, #32]
 800abb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abb6:	e841 2300 	strex	r3, r2, [r1]
 800abba:	61fb      	str	r3, [r7, #28]
   return(result);
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d1e5      	bne.n	800ab8e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800abc2:	2300      	movs	r3, #0
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3760      	adds	r7, #96	; 0x60
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}
 800abcc:	0800a7cf 	.word	0x0800a7cf
 800abd0:	0800a8f5 	.word	0x0800a8f5
 800abd4:	0800a92b 	.word	0x0800a92b

0800abd8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800abd8:	b480      	push	{r7}
 800abda:	b089      	sub	sp, #36	; 0x24
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	330c      	adds	r3, #12
 800abe6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	e853 3f00 	ldrex	r3, [r3]
 800abee:	60bb      	str	r3, [r7, #8]
   return(result);
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800abf6:	61fb      	str	r3, [r7, #28]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	330c      	adds	r3, #12
 800abfe:	69fa      	ldr	r2, [r7, #28]
 800ac00:	61ba      	str	r2, [r7, #24]
 800ac02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac04:	6979      	ldr	r1, [r7, #20]
 800ac06:	69ba      	ldr	r2, [r7, #24]
 800ac08:	e841 2300 	strex	r3, r2, [r1]
 800ac0c:	613b      	str	r3, [r7, #16]
   return(result);
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d1e5      	bne.n	800abe0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2220      	movs	r2, #32
 800ac18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800ac1c:	bf00      	nop
 800ac1e:	3724      	adds	r7, #36	; 0x24
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b095      	sub	sp, #84	; 0x54
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	330c      	adds	r3, #12
 800ac36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac3a:	e853 3f00 	ldrex	r3, [r3]
 800ac3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ac40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac46:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	330c      	adds	r3, #12
 800ac4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ac50:	643a      	str	r2, [r7, #64]	; 0x40
 800ac52:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac58:	e841 2300 	strex	r3, r2, [r1]
 800ac5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d1e5      	bne.n	800ac30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	3314      	adds	r3, #20
 800ac6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac6c:	6a3b      	ldr	r3, [r7, #32]
 800ac6e:	e853 3f00 	ldrex	r3, [r3]
 800ac72:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	f023 0301 	bic.w	r3, r3, #1
 800ac7a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	3314      	adds	r3, #20
 800ac82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac84:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ac86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac8c:	e841 2300 	strex	r3, r2, [r1]
 800ac90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d1e5      	bne.n	800ac64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d119      	bne.n	800acd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	330c      	adds	r3, #12
 800aca6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	e853 3f00 	ldrex	r3, [r3]
 800acae:	60bb      	str	r3, [r7, #8]
   return(result);
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	f023 0310 	bic.w	r3, r3, #16
 800acb6:	647b      	str	r3, [r7, #68]	; 0x44
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	330c      	adds	r3, #12
 800acbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800acc0:	61ba      	str	r2, [r7, #24]
 800acc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc4:	6979      	ldr	r1, [r7, #20]
 800acc6:	69ba      	ldr	r2, [r7, #24]
 800acc8:	e841 2300 	strex	r3, r2, [r1]
 800accc:	613b      	str	r3, [r7, #16]
   return(result);
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d1e5      	bne.n	800aca0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2220      	movs	r2, #32
 800acd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ace2:	bf00      	nop
 800ace4:	3754      	adds	r7, #84	; 0x54
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr

0800acee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800acee:	b580      	push	{r7, lr}
 800acf0:	b084      	sub	sp, #16
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acfa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2200      	movs	r2, #0
 800ad00:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2200      	movs	r2, #0
 800ad06:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad08:	68f8      	ldr	r0, [r7, #12]
 800ad0a:	f7ff fcef 	bl	800a6ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad0e:	bf00      	nop
 800ad10:	3710      	adds	r7, #16
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ad16:	b480      	push	{r7}
 800ad18:	b085      	sub	sp, #20
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	2b21      	cmp	r3, #33	; 0x21
 800ad28:	d13e      	bne.n	800ada8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad32:	d114      	bne.n	800ad5e <UART_Transmit_IT+0x48>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	691b      	ldr	r3, [r3, #16]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d110      	bne.n	800ad5e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6a1b      	ldr	r3, [r3, #32]
 800ad40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	881b      	ldrh	r3, [r3, #0]
 800ad46:	461a      	mov	r2, r3
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6a1b      	ldr	r3, [r3, #32]
 800ad56:	1c9a      	adds	r2, r3, #2
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	621a      	str	r2, [r3, #32]
 800ad5c:	e008      	b.n	800ad70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6a1b      	ldr	r3, [r3, #32]
 800ad62:	1c59      	adds	r1, r3, #1
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	6211      	str	r1, [r2, #32]
 800ad68:	781a      	ldrb	r2, [r3, #0]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ad74:	b29b      	uxth	r3, r3
 800ad76:	3b01      	subs	r3, #1
 800ad78:	b29b      	uxth	r3, r3
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d10f      	bne.n	800ada4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	68da      	ldr	r2, [r3, #12]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	68da      	ldr	r2, [r3, #12]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ada2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ada4:	2300      	movs	r3, #0
 800ada6:	e000      	b.n	800adaa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ada8:	2302      	movs	r3, #2
  }
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3714      	adds	r7, #20
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr

0800adb6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b082      	sub	sp, #8
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	68da      	ldr	r2, [r3, #12]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800adcc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2220      	movs	r2, #32
 800add2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f7ff fc60 	bl	800a69c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800addc:	2300      	movs	r3, #0
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3708      	adds	r7, #8
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b08c      	sub	sp, #48	; 0x30
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	2b22      	cmp	r3, #34	; 0x22
 800adf8:	f040 80ab 	bne.w	800af52 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae04:	d117      	bne.n	800ae36 <UART_Receive_IT+0x50>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	691b      	ldr	r3, [r3, #16]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d113      	bne.n	800ae36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae16:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae24:	b29a      	uxth	r2, r3
 800ae26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae2e:	1c9a      	adds	r2, r3, #2
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	629a      	str	r2, [r3, #40]	; 0x28
 800ae34:	e026      	b.n	800ae84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae48:	d007      	beq.n	800ae5a <UART_Receive_IT+0x74>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d10a      	bne.n	800ae68 <UART_Receive_IT+0x82>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	691b      	ldr	r3, [r3, #16]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d106      	bne.n	800ae68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	b2da      	uxtb	r2, r3
 800ae62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae64:	701a      	strb	r2, [r3, #0]
 800ae66:	e008      	b.n	800ae7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae74:	b2da      	uxtb	r2, r3
 800ae76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae7e:	1c5a      	adds	r2, r3, #1
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ae88:	b29b      	uxth	r3, r3
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	4619      	mov	r1, r3
 800ae92:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d15a      	bne.n	800af4e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	68da      	ldr	r2, [r3, #12]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f022 0220 	bic.w	r2, r2, #32
 800aea6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	68da      	ldr	r2, [r3, #12]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aeb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	695a      	ldr	r2, [r3, #20]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f022 0201 	bic.w	r2, r2, #1
 800aec6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2220      	movs	r2, #32
 800aecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d135      	bne.n	800af44 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	330c      	adds	r3, #12
 800aee4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	e853 3f00 	ldrex	r3, [r3]
 800aeec:	613b      	str	r3, [r7, #16]
   return(result);
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	f023 0310 	bic.w	r3, r3, #16
 800aef4:	627b      	str	r3, [r7, #36]	; 0x24
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	330c      	adds	r3, #12
 800aefc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aefe:	623a      	str	r2, [r7, #32]
 800af00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af02:	69f9      	ldr	r1, [r7, #28]
 800af04:	6a3a      	ldr	r2, [r7, #32]
 800af06:	e841 2300 	strex	r3, r2, [r1]
 800af0a:	61bb      	str	r3, [r7, #24]
   return(result);
 800af0c:	69bb      	ldr	r3, [r7, #24]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d1e5      	bne.n	800aede <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f003 0310 	and.w	r3, r3, #16
 800af1c:	2b10      	cmp	r3, #16
 800af1e:	d10a      	bne.n	800af36 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800af20:	2300      	movs	r3, #0
 800af22:	60fb      	str	r3, [r7, #12]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	60fb      	str	r3, [r7, #12]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	60fb      	str	r3, [r7, #12]
 800af34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800af3a:	4619      	mov	r1, r3
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f7ff fbdf 	bl	800a700 <HAL_UARTEx_RxEventCallback>
 800af42:	e002      	b.n	800af4a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f7ff fbbd 	bl	800a6c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800af4a:	2300      	movs	r3, #0
 800af4c:	e002      	b.n	800af54 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800af4e:	2300      	movs	r3, #0
 800af50:	e000      	b.n	800af54 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800af52:	2302      	movs	r3, #2
  }
}
 800af54:	4618      	mov	r0, r3
 800af56:	3730      	adds	r7, #48	; 0x30
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af60:	b0c0      	sub	sp, #256	; 0x100
 800af62:	af00      	add	r7, sp, #0
 800af64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	691b      	ldr	r3, [r3, #16]
 800af70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800af74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af78:	68d9      	ldr	r1, [r3, #12]
 800af7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	ea40 0301 	orr.w	r3, r0, r1
 800af84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800af86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af8a:	689a      	ldr	r2, [r3, #8]
 800af8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af90:	691b      	ldr	r3, [r3, #16]
 800af92:	431a      	orrs	r2, r3
 800af94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af98:	695b      	ldr	r3, [r3, #20]
 800af9a:	431a      	orrs	r2, r3
 800af9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afa0:	69db      	ldr	r3, [r3, #28]
 800afa2:	4313      	orrs	r3, r2
 800afa4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800afa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800afb4:	f021 010c 	bic.w	r1, r1, #12
 800afb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800afc2:	430b      	orrs	r3, r1
 800afc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800afc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	695b      	ldr	r3, [r3, #20]
 800afce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800afd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afd6:	6999      	ldr	r1, [r3, #24]
 800afd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afdc:	681a      	ldr	r2, [r3, #0]
 800afde:	ea40 0301 	orr.w	r3, r0, r1
 800afe2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800afe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	4b8f      	ldr	r3, [pc, #572]	; (800b228 <UART_SetConfig+0x2cc>)
 800afec:	429a      	cmp	r2, r3
 800afee:	d005      	beq.n	800affc <UART_SetConfig+0xa0>
 800aff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	4b8d      	ldr	r3, [pc, #564]	; (800b22c <UART_SetConfig+0x2d0>)
 800aff8:	429a      	cmp	r2, r3
 800affa:	d104      	bne.n	800b006 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800affc:	f7fd feea 	bl	8008dd4 <HAL_RCC_GetPCLK2Freq>
 800b000:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b004:	e003      	b.n	800b00e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b006:	f7fd fed1 	bl	8008dac <HAL_RCC_GetPCLK1Freq>
 800b00a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b00e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b012:	69db      	ldr	r3, [r3, #28]
 800b014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b018:	f040 810c 	bne.w	800b234 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b01c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b020:	2200      	movs	r2, #0
 800b022:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b026:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b02a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b02e:	4622      	mov	r2, r4
 800b030:	462b      	mov	r3, r5
 800b032:	1891      	adds	r1, r2, r2
 800b034:	65b9      	str	r1, [r7, #88]	; 0x58
 800b036:	415b      	adcs	r3, r3
 800b038:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b03a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b03e:	4621      	mov	r1, r4
 800b040:	eb12 0801 	adds.w	r8, r2, r1
 800b044:	4629      	mov	r1, r5
 800b046:	eb43 0901 	adc.w	r9, r3, r1
 800b04a:	f04f 0200 	mov.w	r2, #0
 800b04e:	f04f 0300 	mov.w	r3, #0
 800b052:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b056:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b05a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b05e:	4690      	mov	r8, r2
 800b060:	4699      	mov	r9, r3
 800b062:	4623      	mov	r3, r4
 800b064:	eb18 0303 	adds.w	r3, r8, r3
 800b068:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b06c:	462b      	mov	r3, r5
 800b06e:	eb49 0303 	adc.w	r3, r9, r3
 800b072:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b082:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b086:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b08a:	460b      	mov	r3, r1
 800b08c:	18db      	adds	r3, r3, r3
 800b08e:	653b      	str	r3, [r7, #80]	; 0x50
 800b090:	4613      	mov	r3, r2
 800b092:	eb42 0303 	adc.w	r3, r2, r3
 800b096:	657b      	str	r3, [r7, #84]	; 0x54
 800b098:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b09c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b0a0:	f7f5 fdfc 	bl	8000c9c <__aeabi_uldivmod>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	4b61      	ldr	r3, [pc, #388]	; (800b230 <UART_SetConfig+0x2d4>)
 800b0aa:	fba3 2302 	umull	r2, r3, r3, r2
 800b0ae:	095b      	lsrs	r3, r3, #5
 800b0b0:	011c      	lsls	r4, r3, #4
 800b0b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b0bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b0c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b0c4:	4642      	mov	r2, r8
 800b0c6:	464b      	mov	r3, r9
 800b0c8:	1891      	adds	r1, r2, r2
 800b0ca:	64b9      	str	r1, [r7, #72]	; 0x48
 800b0cc:	415b      	adcs	r3, r3
 800b0ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b0d4:	4641      	mov	r1, r8
 800b0d6:	eb12 0a01 	adds.w	sl, r2, r1
 800b0da:	4649      	mov	r1, r9
 800b0dc:	eb43 0b01 	adc.w	fp, r3, r1
 800b0e0:	f04f 0200 	mov.w	r2, #0
 800b0e4:	f04f 0300 	mov.w	r3, #0
 800b0e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b0ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b0f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b0f4:	4692      	mov	sl, r2
 800b0f6:	469b      	mov	fp, r3
 800b0f8:	4643      	mov	r3, r8
 800b0fa:	eb1a 0303 	adds.w	r3, sl, r3
 800b0fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b102:	464b      	mov	r3, r9
 800b104:	eb4b 0303 	adc.w	r3, fp, r3
 800b108:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b10c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b118:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b11c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b120:	460b      	mov	r3, r1
 800b122:	18db      	adds	r3, r3, r3
 800b124:	643b      	str	r3, [r7, #64]	; 0x40
 800b126:	4613      	mov	r3, r2
 800b128:	eb42 0303 	adc.w	r3, r2, r3
 800b12c:	647b      	str	r3, [r7, #68]	; 0x44
 800b12e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b132:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b136:	f7f5 fdb1 	bl	8000c9c <__aeabi_uldivmod>
 800b13a:	4602      	mov	r2, r0
 800b13c:	460b      	mov	r3, r1
 800b13e:	4611      	mov	r1, r2
 800b140:	4b3b      	ldr	r3, [pc, #236]	; (800b230 <UART_SetConfig+0x2d4>)
 800b142:	fba3 2301 	umull	r2, r3, r3, r1
 800b146:	095b      	lsrs	r3, r3, #5
 800b148:	2264      	movs	r2, #100	; 0x64
 800b14a:	fb02 f303 	mul.w	r3, r2, r3
 800b14e:	1acb      	subs	r3, r1, r3
 800b150:	00db      	lsls	r3, r3, #3
 800b152:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b156:	4b36      	ldr	r3, [pc, #216]	; (800b230 <UART_SetConfig+0x2d4>)
 800b158:	fba3 2302 	umull	r2, r3, r3, r2
 800b15c:	095b      	lsrs	r3, r3, #5
 800b15e:	005b      	lsls	r3, r3, #1
 800b160:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b164:	441c      	add	r4, r3
 800b166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b16a:	2200      	movs	r2, #0
 800b16c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b170:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b174:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b178:	4642      	mov	r2, r8
 800b17a:	464b      	mov	r3, r9
 800b17c:	1891      	adds	r1, r2, r2
 800b17e:	63b9      	str	r1, [r7, #56]	; 0x38
 800b180:	415b      	adcs	r3, r3
 800b182:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b184:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b188:	4641      	mov	r1, r8
 800b18a:	1851      	adds	r1, r2, r1
 800b18c:	6339      	str	r1, [r7, #48]	; 0x30
 800b18e:	4649      	mov	r1, r9
 800b190:	414b      	adcs	r3, r1
 800b192:	637b      	str	r3, [r7, #52]	; 0x34
 800b194:	f04f 0200 	mov.w	r2, #0
 800b198:	f04f 0300 	mov.w	r3, #0
 800b19c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b1a0:	4659      	mov	r1, fp
 800b1a2:	00cb      	lsls	r3, r1, #3
 800b1a4:	4651      	mov	r1, sl
 800b1a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b1aa:	4651      	mov	r1, sl
 800b1ac:	00ca      	lsls	r2, r1, #3
 800b1ae:	4610      	mov	r0, r2
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	4642      	mov	r2, r8
 800b1b6:	189b      	adds	r3, r3, r2
 800b1b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b1bc:	464b      	mov	r3, r9
 800b1be:	460a      	mov	r2, r1
 800b1c0:	eb42 0303 	adc.w	r3, r2, r3
 800b1c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b1c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b1d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b1d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b1dc:	460b      	mov	r3, r1
 800b1de:	18db      	adds	r3, r3, r3
 800b1e0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1e2:	4613      	mov	r3, r2
 800b1e4:	eb42 0303 	adc.w	r3, r2, r3
 800b1e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b1ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b1f2:	f7f5 fd53 	bl	8000c9c <__aeabi_uldivmod>
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	4b0d      	ldr	r3, [pc, #52]	; (800b230 <UART_SetConfig+0x2d4>)
 800b1fc:	fba3 1302 	umull	r1, r3, r3, r2
 800b200:	095b      	lsrs	r3, r3, #5
 800b202:	2164      	movs	r1, #100	; 0x64
 800b204:	fb01 f303 	mul.w	r3, r1, r3
 800b208:	1ad3      	subs	r3, r2, r3
 800b20a:	00db      	lsls	r3, r3, #3
 800b20c:	3332      	adds	r3, #50	; 0x32
 800b20e:	4a08      	ldr	r2, [pc, #32]	; (800b230 <UART_SetConfig+0x2d4>)
 800b210:	fba2 2303 	umull	r2, r3, r2, r3
 800b214:	095b      	lsrs	r3, r3, #5
 800b216:	f003 0207 	and.w	r2, r3, #7
 800b21a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4422      	add	r2, r4
 800b222:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b224:	e106      	b.n	800b434 <UART_SetConfig+0x4d8>
 800b226:	bf00      	nop
 800b228:	40011000 	.word	0x40011000
 800b22c:	40011400 	.word	0x40011400
 800b230:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b234:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b238:	2200      	movs	r2, #0
 800b23a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b23e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b242:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b246:	4642      	mov	r2, r8
 800b248:	464b      	mov	r3, r9
 800b24a:	1891      	adds	r1, r2, r2
 800b24c:	6239      	str	r1, [r7, #32]
 800b24e:	415b      	adcs	r3, r3
 800b250:	627b      	str	r3, [r7, #36]	; 0x24
 800b252:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b256:	4641      	mov	r1, r8
 800b258:	1854      	adds	r4, r2, r1
 800b25a:	4649      	mov	r1, r9
 800b25c:	eb43 0501 	adc.w	r5, r3, r1
 800b260:	f04f 0200 	mov.w	r2, #0
 800b264:	f04f 0300 	mov.w	r3, #0
 800b268:	00eb      	lsls	r3, r5, #3
 800b26a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b26e:	00e2      	lsls	r2, r4, #3
 800b270:	4614      	mov	r4, r2
 800b272:	461d      	mov	r5, r3
 800b274:	4643      	mov	r3, r8
 800b276:	18e3      	adds	r3, r4, r3
 800b278:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b27c:	464b      	mov	r3, r9
 800b27e:	eb45 0303 	adc.w	r3, r5, r3
 800b282:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	2200      	movs	r2, #0
 800b28e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b292:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b296:	f04f 0200 	mov.w	r2, #0
 800b29a:	f04f 0300 	mov.w	r3, #0
 800b29e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b2a2:	4629      	mov	r1, r5
 800b2a4:	008b      	lsls	r3, r1, #2
 800b2a6:	4621      	mov	r1, r4
 800b2a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b2ac:	4621      	mov	r1, r4
 800b2ae:	008a      	lsls	r2, r1, #2
 800b2b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b2b4:	f7f5 fcf2 	bl	8000c9c <__aeabi_uldivmod>
 800b2b8:	4602      	mov	r2, r0
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	4b60      	ldr	r3, [pc, #384]	; (800b440 <UART_SetConfig+0x4e4>)
 800b2be:	fba3 2302 	umull	r2, r3, r3, r2
 800b2c2:	095b      	lsrs	r3, r3, #5
 800b2c4:	011c      	lsls	r4, r3, #4
 800b2c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b2d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b2d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b2d8:	4642      	mov	r2, r8
 800b2da:	464b      	mov	r3, r9
 800b2dc:	1891      	adds	r1, r2, r2
 800b2de:	61b9      	str	r1, [r7, #24]
 800b2e0:	415b      	adcs	r3, r3
 800b2e2:	61fb      	str	r3, [r7, #28]
 800b2e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b2e8:	4641      	mov	r1, r8
 800b2ea:	1851      	adds	r1, r2, r1
 800b2ec:	6139      	str	r1, [r7, #16]
 800b2ee:	4649      	mov	r1, r9
 800b2f0:	414b      	adcs	r3, r1
 800b2f2:	617b      	str	r3, [r7, #20]
 800b2f4:	f04f 0200 	mov.w	r2, #0
 800b2f8:	f04f 0300 	mov.w	r3, #0
 800b2fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b300:	4659      	mov	r1, fp
 800b302:	00cb      	lsls	r3, r1, #3
 800b304:	4651      	mov	r1, sl
 800b306:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b30a:	4651      	mov	r1, sl
 800b30c:	00ca      	lsls	r2, r1, #3
 800b30e:	4610      	mov	r0, r2
 800b310:	4619      	mov	r1, r3
 800b312:	4603      	mov	r3, r0
 800b314:	4642      	mov	r2, r8
 800b316:	189b      	adds	r3, r3, r2
 800b318:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b31c:	464b      	mov	r3, r9
 800b31e:	460a      	mov	r2, r1
 800b320:	eb42 0303 	adc.w	r3, r2, r3
 800b324:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b32c:	685b      	ldr	r3, [r3, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	67bb      	str	r3, [r7, #120]	; 0x78
 800b332:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b334:	f04f 0200 	mov.w	r2, #0
 800b338:	f04f 0300 	mov.w	r3, #0
 800b33c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b340:	4649      	mov	r1, r9
 800b342:	008b      	lsls	r3, r1, #2
 800b344:	4641      	mov	r1, r8
 800b346:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b34a:	4641      	mov	r1, r8
 800b34c:	008a      	lsls	r2, r1, #2
 800b34e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b352:	f7f5 fca3 	bl	8000c9c <__aeabi_uldivmod>
 800b356:	4602      	mov	r2, r0
 800b358:	460b      	mov	r3, r1
 800b35a:	4611      	mov	r1, r2
 800b35c:	4b38      	ldr	r3, [pc, #224]	; (800b440 <UART_SetConfig+0x4e4>)
 800b35e:	fba3 2301 	umull	r2, r3, r3, r1
 800b362:	095b      	lsrs	r3, r3, #5
 800b364:	2264      	movs	r2, #100	; 0x64
 800b366:	fb02 f303 	mul.w	r3, r2, r3
 800b36a:	1acb      	subs	r3, r1, r3
 800b36c:	011b      	lsls	r3, r3, #4
 800b36e:	3332      	adds	r3, #50	; 0x32
 800b370:	4a33      	ldr	r2, [pc, #204]	; (800b440 <UART_SetConfig+0x4e4>)
 800b372:	fba2 2303 	umull	r2, r3, r2, r3
 800b376:	095b      	lsrs	r3, r3, #5
 800b378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b37c:	441c      	add	r4, r3
 800b37e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b382:	2200      	movs	r2, #0
 800b384:	673b      	str	r3, [r7, #112]	; 0x70
 800b386:	677a      	str	r2, [r7, #116]	; 0x74
 800b388:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b38c:	4642      	mov	r2, r8
 800b38e:	464b      	mov	r3, r9
 800b390:	1891      	adds	r1, r2, r2
 800b392:	60b9      	str	r1, [r7, #8]
 800b394:	415b      	adcs	r3, r3
 800b396:	60fb      	str	r3, [r7, #12]
 800b398:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b39c:	4641      	mov	r1, r8
 800b39e:	1851      	adds	r1, r2, r1
 800b3a0:	6039      	str	r1, [r7, #0]
 800b3a2:	4649      	mov	r1, r9
 800b3a4:	414b      	adcs	r3, r1
 800b3a6:	607b      	str	r3, [r7, #4]
 800b3a8:	f04f 0200 	mov.w	r2, #0
 800b3ac:	f04f 0300 	mov.w	r3, #0
 800b3b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b3b4:	4659      	mov	r1, fp
 800b3b6:	00cb      	lsls	r3, r1, #3
 800b3b8:	4651      	mov	r1, sl
 800b3ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b3be:	4651      	mov	r1, sl
 800b3c0:	00ca      	lsls	r2, r1, #3
 800b3c2:	4610      	mov	r0, r2
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	4642      	mov	r2, r8
 800b3ca:	189b      	adds	r3, r3, r2
 800b3cc:	66bb      	str	r3, [r7, #104]	; 0x68
 800b3ce:	464b      	mov	r3, r9
 800b3d0:	460a      	mov	r2, r1
 800b3d2:	eb42 0303 	adc.w	r3, r2, r3
 800b3d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b3d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	663b      	str	r3, [r7, #96]	; 0x60
 800b3e2:	667a      	str	r2, [r7, #100]	; 0x64
 800b3e4:	f04f 0200 	mov.w	r2, #0
 800b3e8:	f04f 0300 	mov.w	r3, #0
 800b3ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b3f0:	4649      	mov	r1, r9
 800b3f2:	008b      	lsls	r3, r1, #2
 800b3f4:	4641      	mov	r1, r8
 800b3f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b3fa:	4641      	mov	r1, r8
 800b3fc:	008a      	lsls	r2, r1, #2
 800b3fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b402:	f7f5 fc4b 	bl	8000c9c <__aeabi_uldivmod>
 800b406:	4602      	mov	r2, r0
 800b408:	460b      	mov	r3, r1
 800b40a:	4b0d      	ldr	r3, [pc, #52]	; (800b440 <UART_SetConfig+0x4e4>)
 800b40c:	fba3 1302 	umull	r1, r3, r3, r2
 800b410:	095b      	lsrs	r3, r3, #5
 800b412:	2164      	movs	r1, #100	; 0x64
 800b414:	fb01 f303 	mul.w	r3, r1, r3
 800b418:	1ad3      	subs	r3, r2, r3
 800b41a:	011b      	lsls	r3, r3, #4
 800b41c:	3332      	adds	r3, #50	; 0x32
 800b41e:	4a08      	ldr	r2, [pc, #32]	; (800b440 <UART_SetConfig+0x4e4>)
 800b420:	fba2 2303 	umull	r2, r3, r2, r3
 800b424:	095b      	lsrs	r3, r3, #5
 800b426:	f003 020f 	and.w	r2, r3, #15
 800b42a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4422      	add	r2, r4
 800b432:	609a      	str	r2, [r3, #8]
}
 800b434:	bf00      	nop
 800b436:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b43a:	46bd      	mov	sp, r7
 800b43c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b440:	51eb851f 	.word	0x51eb851f

0800b444 <__NVIC_SetPriority>:
{
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
 800b44a:	4603      	mov	r3, r0
 800b44c:	6039      	str	r1, [r7, #0]
 800b44e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b454:	2b00      	cmp	r3, #0
 800b456:	db0a      	blt.n	800b46e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	b2da      	uxtb	r2, r3
 800b45c:	490c      	ldr	r1, [pc, #48]	; (800b490 <__NVIC_SetPriority+0x4c>)
 800b45e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b462:	0112      	lsls	r2, r2, #4
 800b464:	b2d2      	uxtb	r2, r2
 800b466:	440b      	add	r3, r1
 800b468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b46c:	e00a      	b.n	800b484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	b2da      	uxtb	r2, r3
 800b472:	4908      	ldr	r1, [pc, #32]	; (800b494 <__NVIC_SetPriority+0x50>)
 800b474:	79fb      	ldrb	r3, [r7, #7]
 800b476:	f003 030f 	and.w	r3, r3, #15
 800b47a:	3b04      	subs	r3, #4
 800b47c:	0112      	lsls	r2, r2, #4
 800b47e:	b2d2      	uxtb	r2, r2
 800b480:	440b      	add	r3, r1
 800b482:	761a      	strb	r2, [r3, #24]
}
 800b484:	bf00      	nop
 800b486:	370c      	adds	r7, #12
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr
 800b490:	e000e100 	.word	0xe000e100
 800b494:	e000ed00 	.word	0xe000ed00

0800b498 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b498:	b580      	push	{r7, lr}
 800b49a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b49c:	4b05      	ldr	r3, [pc, #20]	; (800b4b4 <SysTick_Handler+0x1c>)
 800b49e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b4a0:	f001 fe1a 	bl	800d0d8 <xTaskGetSchedulerState>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d001      	beq.n	800b4ae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b4aa:	f002 fcfd 	bl	800dea8 <xPortSysTickHandler>
  }
}
 800b4ae:	bf00      	nop
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	e000e010 	.word	0xe000e010

0800b4b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b4bc:	2100      	movs	r1, #0
 800b4be:	f06f 0004 	mvn.w	r0, #4
 800b4c2:	f7ff ffbf 	bl	800b444 <__NVIC_SetPriority>
#endif
}
 800b4c6:	bf00      	nop
 800b4c8:	bd80      	pop	{r7, pc}
	...

0800b4cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4d2:	f3ef 8305 	mrs	r3, IPSR
 800b4d6:	603b      	str	r3, [r7, #0]
  return(result);
 800b4d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d003      	beq.n	800b4e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b4de:	f06f 0305 	mvn.w	r3, #5
 800b4e2:	607b      	str	r3, [r7, #4]
 800b4e4:	e00c      	b.n	800b500 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b4e6:	4b0a      	ldr	r3, [pc, #40]	; (800b510 <osKernelInitialize+0x44>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d105      	bne.n	800b4fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b4ee:	4b08      	ldr	r3, [pc, #32]	; (800b510 <osKernelInitialize+0x44>)
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	607b      	str	r3, [r7, #4]
 800b4f8:	e002      	b.n	800b500 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b4fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b500:	687b      	ldr	r3, [r7, #4]
}
 800b502:	4618      	mov	r0, r3
 800b504:	370c      	adds	r7, #12
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr
 800b50e:	bf00      	nop
 800b510:	20005098 	.word	0x20005098

0800b514 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b51a:	f3ef 8305 	mrs	r3, IPSR
 800b51e:	603b      	str	r3, [r7, #0]
  return(result);
 800b520:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b522:	2b00      	cmp	r3, #0
 800b524:	d003      	beq.n	800b52e <osKernelStart+0x1a>
    stat = osErrorISR;
 800b526:	f06f 0305 	mvn.w	r3, #5
 800b52a:	607b      	str	r3, [r7, #4]
 800b52c:	e010      	b.n	800b550 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b52e:	4b0b      	ldr	r3, [pc, #44]	; (800b55c <osKernelStart+0x48>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2b01      	cmp	r3, #1
 800b534:	d109      	bne.n	800b54a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b536:	f7ff ffbf 	bl	800b4b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b53a:	4b08      	ldr	r3, [pc, #32]	; (800b55c <osKernelStart+0x48>)
 800b53c:	2202      	movs	r2, #2
 800b53e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b540:	f001 f948 	bl	800c7d4 <vTaskStartScheduler>
      stat = osOK;
 800b544:	2300      	movs	r3, #0
 800b546:	607b      	str	r3, [r7, #4]
 800b548:	e002      	b.n	800b550 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b54a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b54e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b550:	687b      	ldr	r3, [r7, #4]
}
 800b552:	4618      	mov	r0, r3
 800b554:	3708      	adds	r7, #8
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	bf00      	nop
 800b55c:	20005098 	.word	0x20005098

0800b560 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b560:	b580      	push	{r7, lr}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b568:	f3ef 8305 	mrs	r3, IPSR
 800b56c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b56e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b570:	2b00      	cmp	r3, #0
 800b572:	d003      	beq.n	800b57c <osDelay+0x1c>
    stat = osErrorISR;
 800b574:	f06f 0305 	mvn.w	r3, #5
 800b578:	60fb      	str	r3, [r7, #12]
 800b57a:	e007      	b.n	800b58c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b57c:	2300      	movs	r3, #0
 800b57e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d002      	beq.n	800b58c <osDelay+0x2c>
      vTaskDelay(ticks);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f001 f8f0 	bl	800c76c <vTaskDelay>
    }
  }

  return (stat);
 800b58c:	68fb      	ldr	r3, [r7, #12]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3710      	adds	r7, #16
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
	...

0800b598 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b598:	b480      	push	{r7}
 800b59a:	b085      	sub	sp, #20
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	60f8      	str	r0, [r7, #12]
 800b5a0:	60b9      	str	r1, [r7, #8]
 800b5a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	4a07      	ldr	r2, [pc, #28]	; (800b5c4 <vApplicationGetIdleTaskMemory+0x2c>)
 800b5a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	4a06      	ldr	r2, [pc, #24]	; (800b5c8 <vApplicationGetIdleTaskMemory+0x30>)
 800b5ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2280      	movs	r2, #128	; 0x80
 800b5b4:	601a      	str	r2, [r3, #0]
}
 800b5b6:	bf00      	nop
 800b5b8:	3714      	adds	r7, #20
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c0:	4770      	bx	lr
 800b5c2:	bf00      	nop
 800b5c4:	2000509c 	.word	0x2000509c
 800b5c8:	20005144 	.word	0x20005144

0800b5cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b5cc:	b480      	push	{r7}
 800b5ce:	b085      	sub	sp, #20
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	60b9      	str	r1, [r7, #8]
 800b5d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	4a07      	ldr	r2, [pc, #28]	; (800b5f8 <vApplicationGetTimerTaskMemory+0x2c>)
 800b5dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	4a06      	ldr	r2, [pc, #24]	; (800b5fc <vApplicationGetTimerTaskMemory+0x30>)
 800b5e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b5ea:	601a      	str	r2, [r3, #0]
}
 800b5ec:	bf00      	nop
 800b5ee:	3714      	adds	r7, #20
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr
 800b5f8:	20005344 	.word	0x20005344
 800b5fc:	200053ec 	.word	0x200053ec

0800b600 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b600:	b480      	push	{r7}
 800b602:	b083      	sub	sp, #12
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f103 0208 	add.w	r2, r3, #8
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b618:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f103 0208 	add.w	r2, r3, #8
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f103 0208 	add.w	r2, r3, #8
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2200      	movs	r2, #0
 800b632:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b634:	bf00      	nop
 800b636:	370c      	adds	r7, #12
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr

0800b640 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b640:	b480      	push	{r7}
 800b642:	b083      	sub	sp, #12
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2200      	movs	r2, #0
 800b64c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b64e:	bf00      	nop
 800b650:	370c      	adds	r7, #12
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr

0800b65a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b65a:	b480      	push	{r7}
 800b65c:	b085      	sub	sp, #20
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
 800b662:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	68fa      	ldr	r2, [r7, #12]
 800b66e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	689a      	ldr	r2, [r3, #8]
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	689b      	ldr	r3, [r3, #8]
 800b67c:	683a      	ldr	r2, [r7, #0]
 800b67e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	683a      	ldr	r2, [r7, #0]
 800b684:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	1c5a      	adds	r2, r3, #1
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	601a      	str	r2, [r3, #0]
}
 800b696:	bf00      	nop
 800b698:	3714      	adds	r7, #20
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr

0800b6a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b6a2:	b480      	push	{r7}
 800b6a4:	b085      	sub	sp, #20
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
 800b6aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6b8:	d103      	bne.n	800b6c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	691b      	ldr	r3, [r3, #16]
 800b6be:	60fb      	str	r3, [r7, #12]
 800b6c0:	e00c      	b.n	800b6dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	3308      	adds	r3, #8
 800b6c6:	60fb      	str	r3, [r7, #12]
 800b6c8:	e002      	b.n	800b6d0 <vListInsert+0x2e>
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	60fb      	str	r3, [r7, #12]
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	68ba      	ldr	r2, [r7, #8]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d2f6      	bcs.n	800b6ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	685a      	ldr	r2, [r3, #4]
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	683a      	ldr	r2, [r7, #0]
 800b6ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	68fa      	ldr	r2, [r7, #12]
 800b6f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	683a      	ldr	r2, [r7, #0]
 800b6f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	687a      	ldr	r2, [r7, #4]
 800b6fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	1c5a      	adds	r2, r3, #1
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	601a      	str	r2, [r3, #0]
}
 800b708:	bf00      	nop
 800b70a:	3714      	adds	r7, #20
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr

0800b714 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b714:	b480      	push	{r7}
 800b716:	b085      	sub	sp, #20
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	691b      	ldr	r3, [r3, #16]
 800b720:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	6892      	ldr	r2, [r2, #8]
 800b72a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	689b      	ldr	r3, [r3, #8]
 800b730:	687a      	ldr	r2, [r7, #4]
 800b732:	6852      	ldr	r2, [r2, #4]
 800b734:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	687a      	ldr	r2, [r7, #4]
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d103      	bne.n	800b748 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	689a      	ldr	r2, [r3, #8]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2200      	movs	r2, #0
 800b74c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	1e5a      	subs	r2, r3, #1
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3714      	adds	r7, #20
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr

0800b768 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d10a      	bne.n	800b792 <xQueueGenericReset+0x2a>
	__asm volatile
 800b77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b780:	f383 8811 	msr	BASEPRI, r3
 800b784:	f3bf 8f6f 	isb	sy
 800b788:	f3bf 8f4f 	dsb	sy
 800b78c:	60bb      	str	r3, [r7, #8]
}
 800b78e:	bf00      	nop
 800b790:	e7fe      	b.n	800b790 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b792:	f002 faf7 	bl	800dd84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b79e:	68f9      	ldr	r1, [r7, #12]
 800b7a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b7a2:	fb01 f303 	mul.w	r3, r1, r3
 800b7a6:	441a      	add	r2, r3
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681a      	ldr	r2, [r3, #0]
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7c2:	3b01      	subs	r3, #1
 800b7c4:	68f9      	ldr	r1, [r7, #12]
 800b7c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b7c8:	fb01 f303 	mul.w	r3, r1, r3
 800b7cc:	441a      	add	r2, r3
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	22ff      	movs	r2, #255	; 0xff
 800b7d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	22ff      	movs	r2, #255	; 0xff
 800b7de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d114      	bne.n	800b812 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	691b      	ldr	r3, [r3, #16]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d01a      	beq.n	800b826 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	3310      	adds	r3, #16
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f001 fa87 	bl	800cd08 <xTaskRemoveFromEventList>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d012      	beq.n	800b826 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b800:	4b0c      	ldr	r3, [pc, #48]	; (800b834 <xQueueGenericReset+0xcc>)
 800b802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b806:	601a      	str	r2, [r3, #0]
 800b808:	f3bf 8f4f 	dsb	sy
 800b80c:	f3bf 8f6f 	isb	sy
 800b810:	e009      	b.n	800b826 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	3310      	adds	r3, #16
 800b816:	4618      	mov	r0, r3
 800b818:	f7ff fef2 	bl	800b600 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	3324      	adds	r3, #36	; 0x24
 800b820:	4618      	mov	r0, r3
 800b822:	f7ff feed 	bl	800b600 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b826:	f002 fadd 	bl	800dde4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b82a:	2301      	movs	r3, #1
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3710      	adds	r7, #16
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}
 800b834:	e000ed04 	.word	0xe000ed04

0800b838 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b08e      	sub	sp, #56	; 0x38
 800b83c:	af02      	add	r7, sp, #8
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	607a      	str	r2, [r7, #4]
 800b844:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d10a      	bne.n	800b862 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b850:	f383 8811 	msr	BASEPRI, r3
 800b854:	f3bf 8f6f 	isb	sy
 800b858:	f3bf 8f4f 	dsb	sy
 800b85c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b85e:	bf00      	nop
 800b860:	e7fe      	b.n	800b860 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d10a      	bne.n	800b87e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b86c:	f383 8811 	msr	BASEPRI, r3
 800b870:	f3bf 8f6f 	isb	sy
 800b874:	f3bf 8f4f 	dsb	sy
 800b878:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b87a:	bf00      	nop
 800b87c:	e7fe      	b.n	800b87c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d002      	beq.n	800b88a <xQueueGenericCreateStatic+0x52>
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d001      	beq.n	800b88e <xQueueGenericCreateStatic+0x56>
 800b88a:	2301      	movs	r3, #1
 800b88c:	e000      	b.n	800b890 <xQueueGenericCreateStatic+0x58>
 800b88e:	2300      	movs	r3, #0
 800b890:	2b00      	cmp	r3, #0
 800b892:	d10a      	bne.n	800b8aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b898:	f383 8811 	msr	BASEPRI, r3
 800b89c:	f3bf 8f6f 	isb	sy
 800b8a0:	f3bf 8f4f 	dsb	sy
 800b8a4:	623b      	str	r3, [r7, #32]
}
 800b8a6:	bf00      	nop
 800b8a8:	e7fe      	b.n	800b8a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d102      	bne.n	800b8b6 <xQueueGenericCreateStatic+0x7e>
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d101      	bne.n	800b8ba <xQueueGenericCreateStatic+0x82>
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	e000      	b.n	800b8bc <xQueueGenericCreateStatic+0x84>
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d10a      	bne.n	800b8d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c4:	f383 8811 	msr	BASEPRI, r3
 800b8c8:	f3bf 8f6f 	isb	sy
 800b8cc:	f3bf 8f4f 	dsb	sy
 800b8d0:	61fb      	str	r3, [r7, #28]
}
 800b8d2:	bf00      	nop
 800b8d4:	e7fe      	b.n	800b8d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b8d6:	2350      	movs	r3, #80	; 0x50
 800b8d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	2b50      	cmp	r3, #80	; 0x50
 800b8de:	d00a      	beq.n	800b8f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e4:	f383 8811 	msr	BASEPRI, r3
 800b8e8:	f3bf 8f6f 	isb	sy
 800b8ec:	f3bf 8f4f 	dsb	sy
 800b8f0:	61bb      	str	r3, [r7, #24]
}
 800b8f2:	bf00      	nop
 800b8f4:	e7fe      	b.n	800b8f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b8f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d00d      	beq.n	800b91e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b904:	2201      	movs	r2, #1
 800b906:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b90a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b910:	9300      	str	r3, [sp, #0]
 800b912:	4613      	mov	r3, r2
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	68b9      	ldr	r1, [r7, #8]
 800b918:	68f8      	ldr	r0, [r7, #12]
 800b91a:	f000 f83f 	bl	800b99c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b920:	4618      	mov	r0, r3
 800b922:	3730      	adds	r7, #48	; 0x30
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b08a      	sub	sp, #40	; 0x28
 800b92c:	af02      	add	r7, sp, #8
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	4613      	mov	r3, r2
 800b934:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d10a      	bne.n	800b952 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b940:	f383 8811 	msr	BASEPRI, r3
 800b944:	f3bf 8f6f 	isb	sy
 800b948:	f3bf 8f4f 	dsb	sy
 800b94c:	613b      	str	r3, [r7, #16]
}
 800b94e:	bf00      	nop
 800b950:	e7fe      	b.n	800b950 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	68ba      	ldr	r2, [r7, #8]
 800b956:	fb02 f303 	mul.w	r3, r2, r3
 800b95a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b95c:	69fb      	ldr	r3, [r7, #28]
 800b95e:	3350      	adds	r3, #80	; 0x50
 800b960:	4618      	mov	r0, r3
 800b962:	f002 fb31 	bl	800dfc8 <pvPortMalloc>
 800b966:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b968:	69bb      	ldr	r3, [r7, #24]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d011      	beq.n	800b992 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b96e:	69bb      	ldr	r3, [r7, #24]
 800b970:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	3350      	adds	r3, #80	; 0x50
 800b976:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b978:	69bb      	ldr	r3, [r7, #24]
 800b97a:	2200      	movs	r2, #0
 800b97c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b980:	79fa      	ldrb	r2, [r7, #7]
 800b982:	69bb      	ldr	r3, [r7, #24]
 800b984:	9300      	str	r3, [sp, #0]
 800b986:	4613      	mov	r3, r2
 800b988:	697a      	ldr	r2, [r7, #20]
 800b98a:	68b9      	ldr	r1, [r7, #8]
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	f000 f805 	bl	800b99c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b992:	69bb      	ldr	r3, [r7, #24]
	}
 800b994:	4618      	mov	r0, r3
 800b996:	3720      	adds	r7, #32
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b084      	sub	sp, #16
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	607a      	str	r2, [r7, #4]
 800b9a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d103      	bne.n	800b9b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b9b0:	69bb      	ldr	r3, [r7, #24]
 800b9b2:	69ba      	ldr	r2, [r7, #24]
 800b9b4:	601a      	str	r2, [r3, #0]
 800b9b6:	e002      	b.n	800b9be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b9b8:	69bb      	ldr	r3, [r7, #24]
 800b9ba:	687a      	ldr	r2, [r7, #4]
 800b9bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b9be:	69bb      	ldr	r3, [r7, #24]
 800b9c0:	68fa      	ldr	r2, [r7, #12]
 800b9c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b9c4:	69bb      	ldr	r3, [r7, #24]
 800b9c6:	68ba      	ldr	r2, [r7, #8]
 800b9c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b9ca:	2101      	movs	r1, #1
 800b9cc:	69b8      	ldr	r0, [r7, #24]
 800b9ce:	f7ff fecb 	bl	800b768 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b9d2:	69bb      	ldr	r3, [r7, #24]
 800b9d4:	78fa      	ldrb	r2, [r7, #3]
 800b9d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b9da:	bf00      	nop
 800b9dc:	3710      	adds	r7, #16
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
	...

0800b9e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b08e      	sub	sp, #56	; 0x38
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	607a      	str	r2, [r7, #4]
 800b9f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d10a      	bne.n	800ba16 <xQueueGenericSend+0x32>
	__asm volatile
 800ba00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba04:	f383 8811 	msr	BASEPRI, r3
 800ba08:	f3bf 8f6f 	isb	sy
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ba12:	bf00      	nop
 800ba14:	e7fe      	b.n	800ba14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d103      	bne.n	800ba24 <xQueueGenericSend+0x40>
 800ba1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d101      	bne.n	800ba28 <xQueueGenericSend+0x44>
 800ba24:	2301      	movs	r3, #1
 800ba26:	e000      	b.n	800ba2a <xQueueGenericSend+0x46>
 800ba28:	2300      	movs	r3, #0
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d10a      	bne.n	800ba44 <xQueueGenericSend+0x60>
	__asm volatile
 800ba2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba32:	f383 8811 	msr	BASEPRI, r3
 800ba36:	f3bf 8f6f 	isb	sy
 800ba3a:	f3bf 8f4f 	dsb	sy
 800ba3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ba40:	bf00      	nop
 800ba42:	e7fe      	b.n	800ba42 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	2b02      	cmp	r3, #2
 800ba48:	d103      	bne.n	800ba52 <xQueueGenericSend+0x6e>
 800ba4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	d101      	bne.n	800ba56 <xQueueGenericSend+0x72>
 800ba52:	2301      	movs	r3, #1
 800ba54:	e000      	b.n	800ba58 <xQueueGenericSend+0x74>
 800ba56:	2300      	movs	r3, #0
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d10a      	bne.n	800ba72 <xQueueGenericSend+0x8e>
	__asm volatile
 800ba5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba60:	f383 8811 	msr	BASEPRI, r3
 800ba64:	f3bf 8f6f 	isb	sy
 800ba68:	f3bf 8f4f 	dsb	sy
 800ba6c:	623b      	str	r3, [r7, #32]
}
 800ba6e:	bf00      	nop
 800ba70:	e7fe      	b.n	800ba70 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba72:	f001 fb31 	bl	800d0d8 <xTaskGetSchedulerState>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d102      	bne.n	800ba82 <xQueueGenericSend+0x9e>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d101      	bne.n	800ba86 <xQueueGenericSend+0xa2>
 800ba82:	2301      	movs	r3, #1
 800ba84:	e000      	b.n	800ba88 <xQueueGenericSend+0xa4>
 800ba86:	2300      	movs	r3, #0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d10a      	bne.n	800baa2 <xQueueGenericSend+0xbe>
	__asm volatile
 800ba8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba90:	f383 8811 	msr	BASEPRI, r3
 800ba94:	f3bf 8f6f 	isb	sy
 800ba98:	f3bf 8f4f 	dsb	sy
 800ba9c:	61fb      	str	r3, [r7, #28]
}
 800ba9e:	bf00      	nop
 800baa0:	e7fe      	b.n	800baa0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800baa2:	f002 f96f 	bl	800dd84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800baa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800baaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baae:	429a      	cmp	r2, r3
 800bab0:	d302      	bcc.n	800bab8 <xQueueGenericSend+0xd4>
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	2b02      	cmp	r3, #2
 800bab6:	d129      	bne.n	800bb0c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bab8:	683a      	ldr	r2, [r7, #0]
 800baba:	68b9      	ldr	r1, [r7, #8]
 800babc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800babe:	f000 fb2f 	bl	800c120 <prvCopyDataToQueue>
 800bac2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d010      	beq.n	800baee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bace:	3324      	adds	r3, #36	; 0x24
 800bad0:	4618      	mov	r0, r3
 800bad2:	f001 f919 	bl	800cd08 <xTaskRemoveFromEventList>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d013      	beq.n	800bb04 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800badc:	4b3f      	ldr	r3, [pc, #252]	; (800bbdc <xQueueGenericSend+0x1f8>)
 800bade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bae2:	601a      	str	r2, [r3, #0]
 800bae4:	f3bf 8f4f 	dsb	sy
 800bae8:	f3bf 8f6f 	isb	sy
 800baec:	e00a      	b.n	800bb04 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800baee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d007      	beq.n	800bb04 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800baf4:	4b39      	ldr	r3, [pc, #228]	; (800bbdc <xQueueGenericSend+0x1f8>)
 800baf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bafa:	601a      	str	r2, [r3, #0]
 800bafc:	f3bf 8f4f 	dsb	sy
 800bb00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bb04:	f002 f96e 	bl	800dde4 <vPortExitCritical>
				return pdPASS;
 800bb08:	2301      	movs	r3, #1
 800bb0a:	e063      	b.n	800bbd4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d103      	bne.n	800bb1a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb12:	f002 f967 	bl	800dde4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bb16:	2300      	movs	r3, #0
 800bb18:	e05c      	b.n	800bbd4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d106      	bne.n	800bb2e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb20:	f107 0314 	add.w	r3, r7, #20
 800bb24:	4618      	mov	r0, r3
 800bb26:	f001 f979 	bl	800ce1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb2e:	f002 f959 	bl	800dde4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb32:	f000 febf 	bl	800c8b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb36:	f002 f925 	bl	800dd84 <vPortEnterCritical>
 800bb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb40:	b25b      	sxtb	r3, r3
 800bb42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb46:	d103      	bne.n	800bb50 <xQueueGenericSend+0x16c>
 800bb48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb56:	b25b      	sxtb	r3, r3
 800bb58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb5c:	d103      	bne.n	800bb66 <xQueueGenericSend+0x182>
 800bb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb60:	2200      	movs	r2, #0
 800bb62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb66:	f002 f93d 	bl	800dde4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb6a:	1d3a      	adds	r2, r7, #4
 800bb6c:	f107 0314 	add.w	r3, r7, #20
 800bb70:	4611      	mov	r1, r2
 800bb72:	4618      	mov	r0, r3
 800bb74:	f001 f968 	bl	800ce48 <xTaskCheckForTimeOut>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d124      	bne.n	800bbc8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bb7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb80:	f000 fbc6 	bl	800c310 <prvIsQueueFull>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d018      	beq.n	800bbbc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8c:	3310      	adds	r3, #16
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	4611      	mov	r1, r2
 800bb92:	4618      	mov	r0, r3
 800bb94:	f001 f868 	bl	800cc68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bb98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb9a:	f000 fb51 	bl	800c240 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bb9e:	f000 fe97 	bl	800c8d0 <xTaskResumeAll>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f47f af7c 	bne.w	800baa2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bbaa:	4b0c      	ldr	r3, [pc, #48]	; (800bbdc <xQueueGenericSend+0x1f8>)
 800bbac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbb0:	601a      	str	r2, [r3, #0]
 800bbb2:	f3bf 8f4f 	dsb	sy
 800bbb6:	f3bf 8f6f 	isb	sy
 800bbba:	e772      	b.n	800baa2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bbbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbbe:	f000 fb3f 	bl	800c240 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bbc2:	f000 fe85 	bl	800c8d0 <xTaskResumeAll>
 800bbc6:	e76c      	b.n	800baa2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bbc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbca:	f000 fb39 	bl	800c240 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bbce:	f000 fe7f 	bl	800c8d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bbd2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3738      	adds	r7, #56	; 0x38
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}
 800bbdc:	e000ed04 	.word	0xe000ed04

0800bbe0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b090      	sub	sp, #64	; 0x40
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	60f8      	str	r0, [r7, #12]
 800bbe8:	60b9      	str	r1, [r7, #8]
 800bbea:	607a      	str	r2, [r7, #4]
 800bbec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d10a      	bne.n	800bc0e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfc:	f383 8811 	msr	BASEPRI, r3
 800bc00:	f3bf 8f6f 	isb	sy
 800bc04:	f3bf 8f4f 	dsb	sy
 800bc08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bc0a:	bf00      	nop
 800bc0c:	e7fe      	b.n	800bc0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d103      	bne.n	800bc1c <xQueueGenericSendFromISR+0x3c>
 800bc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d101      	bne.n	800bc20 <xQueueGenericSendFromISR+0x40>
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	e000      	b.n	800bc22 <xQueueGenericSendFromISR+0x42>
 800bc20:	2300      	movs	r3, #0
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d10a      	bne.n	800bc3c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2a:	f383 8811 	msr	BASEPRI, r3
 800bc2e:	f3bf 8f6f 	isb	sy
 800bc32:	f3bf 8f4f 	dsb	sy
 800bc36:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bc38:	bf00      	nop
 800bc3a:	e7fe      	b.n	800bc3a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	2b02      	cmp	r3, #2
 800bc40:	d103      	bne.n	800bc4a <xQueueGenericSendFromISR+0x6a>
 800bc42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc46:	2b01      	cmp	r3, #1
 800bc48:	d101      	bne.n	800bc4e <xQueueGenericSendFromISR+0x6e>
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	e000      	b.n	800bc50 <xQueueGenericSendFromISR+0x70>
 800bc4e:	2300      	movs	r3, #0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d10a      	bne.n	800bc6a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc58:	f383 8811 	msr	BASEPRI, r3
 800bc5c:	f3bf 8f6f 	isb	sy
 800bc60:	f3bf 8f4f 	dsb	sy
 800bc64:	623b      	str	r3, [r7, #32]
}
 800bc66:	bf00      	nop
 800bc68:	e7fe      	b.n	800bc68 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc6a:	f002 f96d 	bl	800df48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bc6e:	f3ef 8211 	mrs	r2, BASEPRI
 800bc72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc76:	f383 8811 	msr	BASEPRI, r3
 800bc7a:	f3bf 8f6f 	isb	sy
 800bc7e:	f3bf 8f4f 	dsb	sy
 800bc82:	61fa      	str	r2, [r7, #28]
 800bc84:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bc86:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bc88:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d302      	bcc.n	800bc9c <xQueueGenericSendFromISR+0xbc>
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	2b02      	cmp	r3, #2
 800bc9a:	d12f      	bne.n	800bcfc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bc9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcaa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bcac:	683a      	ldr	r2, [r7, #0]
 800bcae:	68b9      	ldr	r1, [r7, #8]
 800bcb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bcb2:	f000 fa35 	bl	800c120 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bcb6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bcba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcbe:	d112      	bne.n	800bce6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bcc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d016      	beq.n	800bcf6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcca:	3324      	adds	r3, #36	; 0x24
 800bccc:	4618      	mov	r0, r3
 800bcce:	f001 f81b 	bl	800cd08 <xTaskRemoveFromEventList>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d00e      	beq.n	800bcf6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d00b      	beq.n	800bcf6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2201      	movs	r2, #1
 800bce2:	601a      	str	r2, [r3, #0]
 800bce4:	e007      	b.n	800bcf6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bce6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bcea:	3301      	adds	r3, #1
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	b25a      	sxtb	r2, r3
 800bcf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bcfa:	e001      	b.n	800bd00 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd02:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bd0a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3740      	adds	r7, #64	; 0x40
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}
	...

0800bd18 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b08c      	sub	sp, #48	; 0x30
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bd24:	2300      	movs	r3, #0
 800bd26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d10a      	bne.n	800bd48 <xQueueReceive+0x30>
	__asm volatile
 800bd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd36:	f383 8811 	msr	BASEPRI, r3
 800bd3a:	f3bf 8f6f 	isb	sy
 800bd3e:	f3bf 8f4f 	dsb	sy
 800bd42:	623b      	str	r3, [r7, #32]
}
 800bd44:	bf00      	nop
 800bd46:	e7fe      	b.n	800bd46 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d103      	bne.n	800bd56 <xQueueReceive+0x3e>
 800bd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d101      	bne.n	800bd5a <xQueueReceive+0x42>
 800bd56:	2301      	movs	r3, #1
 800bd58:	e000      	b.n	800bd5c <xQueueReceive+0x44>
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d10a      	bne.n	800bd76 <xQueueReceive+0x5e>
	__asm volatile
 800bd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd64:	f383 8811 	msr	BASEPRI, r3
 800bd68:	f3bf 8f6f 	isb	sy
 800bd6c:	f3bf 8f4f 	dsb	sy
 800bd70:	61fb      	str	r3, [r7, #28]
}
 800bd72:	bf00      	nop
 800bd74:	e7fe      	b.n	800bd74 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd76:	f001 f9af 	bl	800d0d8 <xTaskGetSchedulerState>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d102      	bne.n	800bd86 <xQueueReceive+0x6e>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d101      	bne.n	800bd8a <xQueueReceive+0x72>
 800bd86:	2301      	movs	r3, #1
 800bd88:	e000      	b.n	800bd8c <xQueueReceive+0x74>
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d10a      	bne.n	800bda6 <xQueueReceive+0x8e>
	__asm volatile
 800bd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd94:	f383 8811 	msr	BASEPRI, r3
 800bd98:	f3bf 8f6f 	isb	sy
 800bd9c:	f3bf 8f4f 	dsb	sy
 800bda0:	61bb      	str	r3, [r7, #24]
}
 800bda2:	bf00      	nop
 800bda4:	e7fe      	b.n	800bda4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bda6:	f001 ffed 	bl	800dd84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bdaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d01f      	beq.n	800bdf6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bdb6:	68b9      	ldr	r1, [r7, #8]
 800bdb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdba:	f000 fa1b 	bl	800c1f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc0:	1e5a      	subs	r2, r3, #1
 800bdc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc8:	691b      	ldr	r3, [r3, #16]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d00f      	beq.n	800bdee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd0:	3310      	adds	r3, #16
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f000 ff98 	bl	800cd08 <xTaskRemoveFromEventList>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d007      	beq.n	800bdee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bdde:	4b3d      	ldr	r3, [pc, #244]	; (800bed4 <xQueueReceive+0x1bc>)
 800bde0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bde4:	601a      	str	r2, [r3, #0]
 800bde6:	f3bf 8f4f 	dsb	sy
 800bdea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bdee:	f001 fff9 	bl	800dde4 <vPortExitCritical>
				return pdPASS;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	e069      	b.n	800beca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d103      	bne.n	800be04 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bdfc:	f001 fff2 	bl	800dde4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800be00:	2300      	movs	r3, #0
 800be02:	e062      	b.n	800beca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be06:	2b00      	cmp	r3, #0
 800be08:	d106      	bne.n	800be18 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be0a:	f107 0310 	add.w	r3, r7, #16
 800be0e:	4618      	mov	r0, r3
 800be10:	f001 f804 	bl	800ce1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be14:	2301      	movs	r3, #1
 800be16:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be18:	f001 ffe4 	bl	800dde4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be1c:	f000 fd4a 	bl	800c8b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be20:	f001 ffb0 	bl	800dd84 <vPortEnterCritical>
 800be24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be2a:	b25b      	sxtb	r3, r3
 800be2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be30:	d103      	bne.n	800be3a <xQueueReceive+0x122>
 800be32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be34:	2200      	movs	r2, #0
 800be36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be40:	b25b      	sxtb	r3, r3
 800be42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be46:	d103      	bne.n	800be50 <xQueueReceive+0x138>
 800be48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4a:	2200      	movs	r2, #0
 800be4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be50:	f001 ffc8 	bl	800dde4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be54:	1d3a      	adds	r2, r7, #4
 800be56:	f107 0310 	add.w	r3, r7, #16
 800be5a:	4611      	mov	r1, r2
 800be5c:	4618      	mov	r0, r3
 800be5e:	f000 fff3 	bl	800ce48 <xTaskCheckForTimeOut>
 800be62:	4603      	mov	r3, r0
 800be64:	2b00      	cmp	r3, #0
 800be66:	d123      	bne.n	800beb0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be6a:	f000 fa3b 	bl	800c2e4 <prvIsQueueEmpty>
 800be6e:	4603      	mov	r3, r0
 800be70:	2b00      	cmp	r3, #0
 800be72:	d017      	beq.n	800bea4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800be74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be76:	3324      	adds	r3, #36	; 0x24
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	4611      	mov	r1, r2
 800be7c:	4618      	mov	r0, r3
 800be7e:	f000 fef3 	bl	800cc68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800be82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be84:	f000 f9dc 	bl	800c240 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800be88:	f000 fd22 	bl	800c8d0 <xTaskResumeAll>
 800be8c:	4603      	mov	r3, r0
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d189      	bne.n	800bda6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800be92:	4b10      	ldr	r3, [pc, #64]	; (800bed4 <xQueueReceive+0x1bc>)
 800be94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be98:	601a      	str	r2, [r3, #0]
 800be9a:	f3bf 8f4f 	dsb	sy
 800be9e:	f3bf 8f6f 	isb	sy
 800bea2:	e780      	b.n	800bda6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bea6:	f000 f9cb 	bl	800c240 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800beaa:	f000 fd11 	bl	800c8d0 <xTaskResumeAll>
 800beae:	e77a      	b.n	800bda6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800beb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beb2:	f000 f9c5 	bl	800c240 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800beb6:	f000 fd0b 	bl	800c8d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800beba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bebc:	f000 fa12 	bl	800c2e4 <prvIsQueueEmpty>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	f43f af6f 	beq.w	800bda6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bec8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800beca:	4618      	mov	r0, r3
 800becc:	3730      	adds	r7, #48	; 0x30
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	e000ed04 	.word	0xe000ed04

0800bed8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b08e      	sub	sp, #56	; 0x38
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bee2:	2300      	movs	r3, #0
 800bee4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800beea:	2300      	movs	r3, #0
 800beec:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800beee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d10a      	bne.n	800bf0a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef8:	f383 8811 	msr	BASEPRI, r3
 800befc:	f3bf 8f6f 	isb	sy
 800bf00:	f3bf 8f4f 	dsb	sy
 800bf04:	623b      	str	r3, [r7, #32]
}
 800bf06:	bf00      	nop
 800bf08:	e7fe      	b.n	800bf08 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bf0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d00a      	beq.n	800bf28 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bf12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf16:	f383 8811 	msr	BASEPRI, r3
 800bf1a:	f3bf 8f6f 	isb	sy
 800bf1e:	f3bf 8f4f 	dsb	sy
 800bf22:	61fb      	str	r3, [r7, #28]
}
 800bf24:	bf00      	nop
 800bf26:	e7fe      	b.n	800bf26 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf28:	f001 f8d6 	bl	800d0d8 <xTaskGetSchedulerState>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d102      	bne.n	800bf38 <xQueueSemaphoreTake+0x60>
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d101      	bne.n	800bf3c <xQueueSemaphoreTake+0x64>
 800bf38:	2301      	movs	r3, #1
 800bf3a:	e000      	b.n	800bf3e <xQueueSemaphoreTake+0x66>
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d10a      	bne.n	800bf58 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bf42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf46:	f383 8811 	msr	BASEPRI, r3
 800bf4a:	f3bf 8f6f 	isb	sy
 800bf4e:	f3bf 8f4f 	dsb	sy
 800bf52:	61bb      	str	r3, [r7, #24]
}
 800bf54:	bf00      	nop
 800bf56:	e7fe      	b.n	800bf56 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf58:	f001 ff14 	bl	800dd84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bf5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf60:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bf62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d024      	beq.n	800bfb2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bf68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6a:	1e5a      	subs	r2, r3, #1
 800bf6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf6e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d104      	bne.n	800bf82 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bf78:	f001 fa24 	bl	800d3c4 <pvTaskIncrementMutexHeldCount>
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf80:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf84:	691b      	ldr	r3, [r3, #16]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00f      	beq.n	800bfaa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8c:	3310      	adds	r3, #16
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f000 feba 	bl	800cd08 <xTaskRemoveFromEventList>
 800bf94:	4603      	mov	r3, r0
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d007      	beq.n	800bfaa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bf9a:	4b54      	ldr	r3, [pc, #336]	; (800c0ec <xQueueSemaphoreTake+0x214>)
 800bf9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfa0:	601a      	str	r2, [r3, #0]
 800bfa2:	f3bf 8f4f 	dsb	sy
 800bfa6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bfaa:	f001 ff1b 	bl	800dde4 <vPortExitCritical>
				return pdPASS;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	e097      	b.n	800c0e2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d111      	bne.n	800bfdc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d00a      	beq.n	800bfd4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800bfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc2:	f383 8811 	msr	BASEPRI, r3
 800bfc6:	f3bf 8f6f 	isb	sy
 800bfca:	f3bf 8f4f 	dsb	sy
 800bfce:	617b      	str	r3, [r7, #20]
}
 800bfd0:	bf00      	nop
 800bfd2:	e7fe      	b.n	800bfd2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bfd4:	f001 ff06 	bl	800dde4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	e082      	b.n	800c0e2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bfdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d106      	bne.n	800bff0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bfe2:	f107 030c 	add.w	r3, r7, #12
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f000 ff18 	bl	800ce1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bfec:	2301      	movs	r3, #1
 800bfee:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bff0:	f001 fef8 	bl	800dde4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bff4:	f000 fc5e 	bl	800c8b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bff8:	f001 fec4 	bl	800dd84 <vPortEnterCritical>
 800bffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bffe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c002:	b25b      	sxtb	r3, r3
 800c004:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c008:	d103      	bne.n	800c012 <xQueueSemaphoreTake+0x13a>
 800c00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c00c:	2200      	movs	r2, #0
 800c00e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c014:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c018:	b25b      	sxtb	r3, r3
 800c01a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c01e:	d103      	bne.n	800c028 <xQueueSemaphoreTake+0x150>
 800c020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c022:	2200      	movs	r2, #0
 800c024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c028:	f001 fedc 	bl	800dde4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c02c:	463a      	mov	r2, r7
 800c02e:	f107 030c 	add.w	r3, r7, #12
 800c032:	4611      	mov	r1, r2
 800c034:	4618      	mov	r0, r3
 800c036:	f000 ff07 	bl	800ce48 <xTaskCheckForTimeOut>
 800c03a:	4603      	mov	r3, r0
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d132      	bne.n	800c0a6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c040:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c042:	f000 f94f 	bl	800c2e4 <prvIsQueueEmpty>
 800c046:	4603      	mov	r3, r0
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d026      	beq.n	800c09a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d109      	bne.n	800c068 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c054:	f001 fe96 	bl	800dd84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c05a:	689b      	ldr	r3, [r3, #8]
 800c05c:	4618      	mov	r0, r3
 800c05e:	f001 f859 	bl	800d114 <xTaskPriorityInherit>
 800c062:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c064:	f001 febe 	bl	800dde4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c06a:	3324      	adds	r3, #36	; 0x24
 800c06c:	683a      	ldr	r2, [r7, #0]
 800c06e:	4611      	mov	r1, r2
 800c070:	4618      	mov	r0, r3
 800c072:	f000 fdf9 	bl	800cc68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c076:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c078:	f000 f8e2 	bl	800c240 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c07c:	f000 fc28 	bl	800c8d0 <xTaskResumeAll>
 800c080:	4603      	mov	r3, r0
 800c082:	2b00      	cmp	r3, #0
 800c084:	f47f af68 	bne.w	800bf58 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c088:	4b18      	ldr	r3, [pc, #96]	; (800c0ec <xQueueSemaphoreTake+0x214>)
 800c08a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c08e:	601a      	str	r2, [r3, #0]
 800c090:	f3bf 8f4f 	dsb	sy
 800c094:	f3bf 8f6f 	isb	sy
 800c098:	e75e      	b.n	800bf58 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c09a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c09c:	f000 f8d0 	bl	800c240 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c0a0:	f000 fc16 	bl	800c8d0 <xTaskResumeAll>
 800c0a4:	e758      	b.n	800bf58 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c0a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0a8:	f000 f8ca 	bl	800c240 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c0ac:	f000 fc10 	bl	800c8d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0b2:	f000 f917 	bl	800c2e4 <prvIsQueueEmpty>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	f43f af4d 	beq.w	800bf58 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d00d      	beq.n	800c0e0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c0c4:	f001 fe5e 	bl	800dd84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c0c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0ca:	f000 f811 	bl	800c0f0 <prvGetDisinheritPriorityAfterTimeout>
 800c0ce:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d2:	689b      	ldr	r3, [r3, #8]
 800c0d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f001 f8f2 	bl	800d2c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c0dc:	f001 fe82 	bl	800dde4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c0e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3738      	adds	r7, #56	; 0x38
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	bf00      	nop
 800c0ec:	e000ed04 	.word	0xe000ed04

0800c0f0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b085      	sub	sp, #20
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d006      	beq.n	800c10e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c10a:	60fb      	str	r3, [r7, #12]
 800c10c:	e001      	b.n	800c112 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c10e:	2300      	movs	r3, #0
 800c110:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c112:	68fb      	ldr	r3, [r7, #12]
	}
 800c114:	4618      	mov	r0, r3
 800c116:	3714      	adds	r7, #20
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr

0800c120 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b086      	sub	sp, #24
 800c124:	af00      	add	r7, sp, #0
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c12c:	2300      	movs	r3, #0
 800c12e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c134:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d10d      	bne.n	800c15a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d14d      	bne.n	800c1e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	689b      	ldr	r3, [r3, #8]
 800c14a:	4618      	mov	r0, r3
 800c14c:	f001 f84a 	bl	800d1e4 <xTaskPriorityDisinherit>
 800c150:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	2200      	movs	r2, #0
 800c156:	609a      	str	r2, [r3, #8]
 800c158:	e043      	b.n	800c1e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d119      	bne.n	800c194 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	6858      	ldr	r0, [r3, #4]
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c168:	461a      	mov	r2, r3
 800c16a:	68b9      	ldr	r1, [r7, #8]
 800c16c:	f00c f823 	bl	80181b6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	685a      	ldr	r2, [r3, #4]
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c178:	441a      	add	r2, r3
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	685a      	ldr	r2, [r3, #4]
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	689b      	ldr	r3, [r3, #8]
 800c186:	429a      	cmp	r2, r3
 800c188:	d32b      	bcc.n	800c1e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681a      	ldr	r2, [r3, #0]
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	605a      	str	r2, [r3, #4]
 800c192:	e026      	b.n	800c1e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	68d8      	ldr	r0, [r3, #12]
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c19c:	461a      	mov	r2, r3
 800c19e:	68b9      	ldr	r1, [r7, #8]
 800c1a0:	f00c f809 	bl	80181b6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	68da      	ldr	r2, [r3, #12]
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ac:	425b      	negs	r3, r3
 800c1ae:	441a      	add	r2, r3
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	68da      	ldr	r2, [r3, #12]
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d207      	bcs.n	800c1d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	689a      	ldr	r2, [r3, #8]
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1c8:	425b      	negs	r3, r3
 800c1ca:	441a      	add	r2, r3
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2b02      	cmp	r3, #2
 800c1d4:	d105      	bne.n	800c1e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d002      	beq.n	800c1e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	3b01      	subs	r3, #1
 800c1e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	1c5a      	adds	r2, r3, #1
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c1ea:	697b      	ldr	r3, [r7, #20]
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3718      	adds	r7, #24
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b082      	sub	sp, #8
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c202:	2b00      	cmp	r3, #0
 800c204:	d018      	beq.n	800c238 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	68da      	ldr	r2, [r3, #12]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c20e:	441a      	add	r2, r3
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	68da      	ldr	r2, [r3, #12]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	689b      	ldr	r3, [r3, #8]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d303      	bcc.n	800c228 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681a      	ldr	r2, [r3, #0]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	68d9      	ldr	r1, [r3, #12]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c230:	461a      	mov	r2, r3
 800c232:	6838      	ldr	r0, [r7, #0]
 800c234:	f00b ffbf 	bl	80181b6 <memcpy>
	}
}
 800c238:	bf00      	nop
 800c23a:	3708      	adds	r7, #8
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c248:	f001 fd9c 	bl	800dd84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c252:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c254:	e011      	b.n	800c27a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d012      	beq.n	800c284 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	3324      	adds	r3, #36	; 0x24
 800c262:	4618      	mov	r0, r3
 800c264:	f000 fd50 	bl	800cd08 <xTaskRemoveFromEventList>
 800c268:	4603      	mov	r3, r0
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d001      	beq.n	800c272 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c26e:	f000 fe4d 	bl	800cf0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c272:	7bfb      	ldrb	r3, [r7, #15]
 800c274:	3b01      	subs	r3, #1
 800c276:	b2db      	uxtb	r3, r3
 800c278:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c27a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	dce9      	bgt.n	800c256 <prvUnlockQueue+0x16>
 800c282:	e000      	b.n	800c286 <prvUnlockQueue+0x46>
					break;
 800c284:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	22ff      	movs	r2, #255	; 0xff
 800c28a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c28e:	f001 fda9 	bl	800dde4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c292:	f001 fd77 	bl	800dd84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c29c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c29e:	e011      	b.n	800c2c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	691b      	ldr	r3, [r3, #16]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d012      	beq.n	800c2ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	3310      	adds	r3, #16
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f000 fd2b 	bl	800cd08 <xTaskRemoveFromEventList>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d001      	beq.n	800c2bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c2b8:	f000 fe28 	bl	800cf0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c2bc:	7bbb      	ldrb	r3, [r7, #14]
 800c2be:	3b01      	subs	r3, #1
 800c2c0:	b2db      	uxtb	r3, r3
 800c2c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c2c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	dce9      	bgt.n	800c2a0 <prvUnlockQueue+0x60>
 800c2cc:	e000      	b.n	800c2d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c2ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	22ff      	movs	r2, #255	; 0xff
 800c2d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c2d8:	f001 fd84 	bl	800dde4 <vPortExitCritical>
}
 800c2dc:	bf00      	nop
 800c2de:	3710      	adds	r7, #16
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}

0800c2e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b084      	sub	sp, #16
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c2ec:	f001 fd4a 	bl	800dd84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d102      	bne.n	800c2fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	60fb      	str	r3, [r7, #12]
 800c2fc:	e001      	b.n	800c302 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c2fe:	2300      	movs	r3, #0
 800c300:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c302:	f001 fd6f 	bl	800dde4 <vPortExitCritical>

	return xReturn;
 800c306:	68fb      	ldr	r3, [r7, #12]
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3710      	adds	r7, #16
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c318:	f001 fd34 	bl	800dd84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c324:	429a      	cmp	r2, r3
 800c326:	d102      	bne.n	800c32e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c328:	2301      	movs	r3, #1
 800c32a:	60fb      	str	r3, [r7, #12]
 800c32c:	e001      	b.n	800c332 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c32e:	2300      	movs	r3, #0
 800c330:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c332:	f001 fd57 	bl	800dde4 <vPortExitCritical>

	return xReturn;
 800c336:	68fb      	ldr	r3, [r7, #12]
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3710      	adds	r7, #16
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c340:	b480      	push	{r7}
 800c342:	b085      	sub	sp, #20
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c34a:	2300      	movs	r3, #0
 800c34c:	60fb      	str	r3, [r7, #12]
 800c34e:	e014      	b.n	800c37a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c350:	4a0f      	ldr	r2, [pc, #60]	; (800c390 <vQueueAddToRegistry+0x50>)
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d10b      	bne.n	800c374 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c35c:	490c      	ldr	r1, [pc, #48]	; (800c390 <vQueueAddToRegistry+0x50>)
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	683a      	ldr	r2, [r7, #0]
 800c362:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c366:	4a0a      	ldr	r2, [pc, #40]	; (800c390 <vQueueAddToRegistry+0x50>)
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	00db      	lsls	r3, r3, #3
 800c36c:	4413      	add	r3, r2
 800c36e:	687a      	ldr	r2, [r7, #4]
 800c370:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c372:	e006      	b.n	800c382 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	3301      	adds	r3, #1
 800c378:	60fb      	str	r3, [r7, #12]
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	2b07      	cmp	r3, #7
 800c37e:	d9e7      	bls.n	800c350 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c380:	bf00      	nop
 800c382:	bf00      	nop
 800c384:	3714      	adds	r7, #20
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr
 800c38e:	bf00      	nop
 800c390:	200057ec 	.word	0x200057ec

0800c394 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c394:	b580      	push	{r7, lr}
 800c396:	b086      	sub	sp, #24
 800c398:	af00      	add	r7, sp, #0
 800c39a:	60f8      	str	r0, [r7, #12]
 800c39c:	60b9      	str	r1, [r7, #8]
 800c39e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c3a4:	f001 fcee 	bl	800dd84 <vPortEnterCritical>
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c3ae:	b25b      	sxtb	r3, r3
 800c3b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3b4:	d103      	bne.n	800c3be <vQueueWaitForMessageRestricted+0x2a>
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3c4:	b25b      	sxtb	r3, r3
 800c3c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3ca:	d103      	bne.n	800c3d4 <vQueueWaitForMessageRestricted+0x40>
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c3d4:	f001 fd06 	bl	800dde4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d106      	bne.n	800c3ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	3324      	adds	r3, #36	; 0x24
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	68b9      	ldr	r1, [r7, #8]
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f000 fc61 	bl	800ccb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c3ee:	6978      	ldr	r0, [r7, #20]
 800c3f0:	f7ff ff26 	bl	800c240 <prvUnlockQueue>
	}
 800c3f4:	bf00      	nop
 800c3f6:	3718      	adds	r7, #24
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b08e      	sub	sp, #56	; 0x38
 800c400:	af04      	add	r7, sp, #16
 800c402:	60f8      	str	r0, [r7, #12]
 800c404:	60b9      	str	r1, [r7, #8]
 800c406:	607a      	str	r2, [r7, #4]
 800c408:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c40a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d10a      	bne.n	800c426 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c414:	f383 8811 	msr	BASEPRI, r3
 800c418:	f3bf 8f6f 	isb	sy
 800c41c:	f3bf 8f4f 	dsb	sy
 800c420:	623b      	str	r3, [r7, #32]
}
 800c422:	bf00      	nop
 800c424:	e7fe      	b.n	800c424 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d10a      	bne.n	800c442 <xTaskCreateStatic+0x46>
	__asm volatile
 800c42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c430:	f383 8811 	msr	BASEPRI, r3
 800c434:	f3bf 8f6f 	isb	sy
 800c438:	f3bf 8f4f 	dsb	sy
 800c43c:	61fb      	str	r3, [r7, #28]
}
 800c43e:	bf00      	nop
 800c440:	e7fe      	b.n	800c440 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c442:	23a8      	movs	r3, #168	; 0xa8
 800c444:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	2ba8      	cmp	r3, #168	; 0xa8
 800c44a:	d00a      	beq.n	800c462 <xTaskCreateStatic+0x66>
	__asm volatile
 800c44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c450:	f383 8811 	msr	BASEPRI, r3
 800c454:	f3bf 8f6f 	isb	sy
 800c458:	f3bf 8f4f 	dsb	sy
 800c45c:	61bb      	str	r3, [r7, #24]
}
 800c45e:	bf00      	nop
 800c460:	e7fe      	b.n	800c460 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c462:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c466:	2b00      	cmp	r3, #0
 800c468:	d01e      	beq.n	800c4a8 <xTaskCreateStatic+0xac>
 800c46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d01b      	beq.n	800c4a8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c472:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c478:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47c:	2202      	movs	r2, #2
 800c47e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c482:	2300      	movs	r3, #0
 800c484:	9303      	str	r3, [sp, #12]
 800c486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c488:	9302      	str	r3, [sp, #8]
 800c48a:	f107 0314 	add.w	r3, r7, #20
 800c48e:	9301      	str	r3, [sp, #4]
 800c490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c492:	9300      	str	r3, [sp, #0]
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	68b9      	ldr	r1, [r7, #8]
 800c49a:	68f8      	ldr	r0, [r7, #12]
 800c49c:	f000 f850 	bl	800c540 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c4a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c4a2:	f000 f8f3 	bl	800c68c <prvAddNewTaskToReadyList>
 800c4a6:	e001      	b.n	800c4ac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c4ac:	697b      	ldr	r3, [r7, #20]
	}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3728      	adds	r7, #40	; 0x28
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b08c      	sub	sp, #48	; 0x30
 800c4ba:	af04      	add	r7, sp, #16
 800c4bc:	60f8      	str	r0, [r7, #12]
 800c4be:	60b9      	str	r1, [r7, #8]
 800c4c0:	603b      	str	r3, [r7, #0]
 800c4c2:	4613      	mov	r3, r2
 800c4c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c4c6:	88fb      	ldrh	r3, [r7, #6]
 800c4c8:	009b      	lsls	r3, r3, #2
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f001 fd7c 	bl	800dfc8 <pvPortMalloc>
 800c4d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d00e      	beq.n	800c4f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c4d8:	20a8      	movs	r0, #168	; 0xa8
 800c4da:	f001 fd75 	bl	800dfc8 <pvPortMalloc>
 800c4de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c4e0:	69fb      	ldr	r3, [r7, #28]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d003      	beq.n	800c4ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c4e6:	69fb      	ldr	r3, [r7, #28]
 800c4e8:	697a      	ldr	r2, [r7, #20]
 800c4ea:	631a      	str	r2, [r3, #48]	; 0x30
 800c4ec:	e005      	b.n	800c4fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c4ee:	6978      	ldr	r0, [r7, #20]
 800c4f0:	f001 fe36 	bl	800e160 <vPortFree>
 800c4f4:	e001      	b.n	800c4fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c4fa:	69fb      	ldr	r3, [r7, #28]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d017      	beq.n	800c530 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	2200      	movs	r2, #0
 800c504:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c508:	88fa      	ldrh	r2, [r7, #6]
 800c50a:	2300      	movs	r3, #0
 800c50c:	9303      	str	r3, [sp, #12]
 800c50e:	69fb      	ldr	r3, [r7, #28]
 800c510:	9302      	str	r3, [sp, #8]
 800c512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c514:	9301      	str	r3, [sp, #4]
 800c516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c518:	9300      	str	r3, [sp, #0]
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	68b9      	ldr	r1, [r7, #8]
 800c51e:	68f8      	ldr	r0, [r7, #12]
 800c520:	f000 f80e 	bl	800c540 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c524:	69f8      	ldr	r0, [r7, #28]
 800c526:	f000 f8b1 	bl	800c68c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c52a:	2301      	movs	r3, #1
 800c52c:	61bb      	str	r3, [r7, #24]
 800c52e:	e002      	b.n	800c536 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c534:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c536:	69bb      	ldr	r3, [r7, #24]
	}
 800c538:	4618      	mov	r0, r3
 800c53a:	3720      	adds	r7, #32
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b088      	sub	sp, #32
 800c544:	af00      	add	r7, sp, #0
 800c546:	60f8      	str	r0, [r7, #12]
 800c548:	60b9      	str	r1, [r7, #8]
 800c54a:	607a      	str	r2, [r7, #4]
 800c54c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c550:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	009b      	lsls	r3, r3, #2
 800c556:	461a      	mov	r2, r3
 800c558:	21a5      	movs	r1, #165	; 0xa5
 800c55a:	f00b fd0d 	bl	8017f78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c568:	3b01      	subs	r3, #1
 800c56a:	009b      	lsls	r3, r3, #2
 800c56c:	4413      	add	r3, r2
 800c56e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c570:	69bb      	ldr	r3, [r7, #24]
 800c572:	f023 0307 	bic.w	r3, r3, #7
 800c576:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c578:	69bb      	ldr	r3, [r7, #24]
 800c57a:	f003 0307 	and.w	r3, r3, #7
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d00a      	beq.n	800c598 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c586:	f383 8811 	msr	BASEPRI, r3
 800c58a:	f3bf 8f6f 	isb	sy
 800c58e:	f3bf 8f4f 	dsb	sy
 800c592:	617b      	str	r3, [r7, #20]
}
 800c594:	bf00      	nop
 800c596:	e7fe      	b.n	800c596 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d01f      	beq.n	800c5de <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c59e:	2300      	movs	r3, #0
 800c5a0:	61fb      	str	r3, [r7, #28]
 800c5a2:	e012      	b.n	800c5ca <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c5a4:	68ba      	ldr	r2, [r7, #8]
 800c5a6:	69fb      	ldr	r3, [r7, #28]
 800c5a8:	4413      	add	r3, r2
 800c5aa:	7819      	ldrb	r1, [r3, #0]
 800c5ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5ae:	69fb      	ldr	r3, [r7, #28]
 800c5b0:	4413      	add	r3, r2
 800c5b2:	3334      	adds	r3, #52	; 0x34
 800c5b4:	460a      	mov	r2, r1
 800c5b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c5b8:	68ba      	ldr	r2, [r7, #8]
 800c5ba:	69fb      	ldr	r3, [r7, #28]
 800c5bc:	4413      	add	r3, r2
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d006      	beq.n	800c5d2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c5c4:	69fb      	ldr	r3, [r7, #28]
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	61fb      	str	r3, [r7, #28]
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	2b0f      	cmp	r3, #15
 800c5ce:	d9e9      	bls.n	800c5a4 <prvInitialiseNewTask+0x64>
 800c5d0:	e000      	b.n	800c5d4 <prvInitialiseNewTask+0x94>
			{
				break;
 800c5d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c5dc:	e003      	b.n	800c5e6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e8:	2b37      	cmp	r3, #55	; 0x37
 800c5ea:	d901      	bls.n	800c5f0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c5ec:	2337      	movs	r3, #55	; 0x37
 800c5ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5fe:	2200      	movs	r2, #0
 800c600:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c604:	3304      	adds	r3, #4
 800c606:	4618      	mov	r0, r3
 800c608:	f7ff f81a 	bl	800b640 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60e:	3318      	adds	r3, #24
 800c610:	4618      	mov	r0, r3
 800c612:	f7ff f815 	bl	800b640 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c61a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c61e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c624:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c62a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62e:	2200      	movs	r2, #0
 800c630:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c636:	2200      	movs	r2, #0
 800c638:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63e:	3354      	adds	r3, #84	; 0x54
 800c640:	224c      	movs	r2, #76	; 0x4c
 800c642:	2100      	movs	r1, #0
 800c644:	4618      	mov	r0, r3
 800c646:	f00b fc97 	bl	8017f78 <memset>
 800c64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64c:	4a0c      	ldr	r2, [pc, #48]	; (800c680 <prvInitialiseNewTask+0x140>)
 800c64e:	659a      	str	r2, [r3, #88]	; 0x58
 800c650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c652:	4a0c      	ldr	r2, [pc, #48]	; (800c684 <prvInitialiseNewTask+0x144>)
 800c654:	65da      	str	r2, [r3, #92]	; 0x5c
 800c656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c658:	4a0b      	ldr	r2, [pc, #44]	; (800c688 <prvInitialiseNewTask+0x148>)
 800c65a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c65c:	683a      	ldr	r2, [r7, #0]
 800c65e:	68f9      	ldr	r1, [r7, #12]
 800c660:	69b8      	ldr	r0, [r7, #24]
 800c662:	f001 fa65 	bl	800db30 <pxPortInitialiseStack>
 800c666:	4602      	mov	r2, r0
 800c668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c66a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d002      	beq.n	800c678 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c676:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c678:	bf00      	nop
 800c67a:	3720      	adds	r7, #32
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}
 800c680:	2000a078 	.word	0x2000a078
 800c684:	2000a0e0 	.word	0x2000a0e0
 800c688:	2000a148 	.word	0x2000a148

0800c68c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c694:	f001 fb76 	bl	800dd84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c698:	4b2d      	ldr	r3, [pc, #180]	; (800c750 <prvAddNewTaskToReadyList+0xc4>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	3301      	adds	r3, #1
 800c69e:	4a2c      	ldr	r2, [pc, #176]	; (800c750 <prvAddNewTaskToReadyList+0xc4>)
 800c6a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c6a2:	4b2c      	ldr	r3, [pc, #176]	; (800c754 <prvAddNewTaskToReadyList+0xc8>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d109      	bne.n	800c6be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c6aa:	4a2a      	ldr	r2, [pc, #168]	; (800c754 <prvAddNewTaskToReadyList+0xc8>)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c6b0:	4b27      	ldr	r3, [pc, #156]	; (800c750 <prvAddNewTaskToReadyList+0xc4>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d110      	bne.n	800c6da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c6b8:	f000 fc4c 	bl	800cf54 <prvInitialiseTaskLists>
 800c6bc:	e00d      	b.n	800c6da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c6be:	4b26      	ldr	r3, [pc, #152]	; (800c758 <prvAddNewTaskToReadyList+0xcc>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d109      	bne.n	800c6da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c6c6:	4b23      	ldr	r3, [pc, #140]	; (800c754 <prvAddNewTaskToReadyList+0xc8>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d802      	bhi.n	800c6da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c6d4:	4a1f      	ldr	r2, [pc, #124]	; (800c754 <prvAddNewTaskToReadyList+0xc8>)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c6da:	4b20      	ldr	r3, [pc, #128]	; (800c75c <prvAddNewTaskToReadyList+0xd0>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	3301      	adds	r3, #1
 800c6e0:	4a1e      	ldr	r2, [pc, #120]	; (800c75c <prvAddNewTaskToReadyList+0xd0>)
 800c6e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c6e4:	4b1d      	ldr	r3, [pc, #116]	; (800c75c <prvAddNewTaskToReadyList+0xd0>)
 800c6e6:	681a      	ldr	r2, [r3, #0]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6f0:	4b1b      	ldr	r3, [pc, #108]	; (800c760 <prvAddNewTaskToReadyList+0xd4>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d903      	bls.n	800c700 <prvAddNewTaskToReadyList+0x74>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6fc:	4a18      	ldr	r2, [pc, #96]	; (800c760 <prvAddNewTaskToReadyList+0xd4>)
 800c6fe:	6013      	str	r3, [r2, #0]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c704:	4613      	mov	r3, r2
 800c706:	009b      	lsls	r3, r3, #2
 800c708:	4413      	add	r3, r2
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	4a15      	ldr	r2, [pc, #84]	; (800c764 <prvAddNewTaskToReadyList+0xd8>)
 800c70e:	441a      	add	r2, r3
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	3304      	adds	r3, #4
 800c714:	4619      	mov	r1, r3
 800c716:	4610      	mov	r0, r2
 800c718:	f7fe ff9f 	bl	800b65a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c71c:	f001 fb62 	bl	800dde4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c720:	4b0d      	ldr	r3, [pc, #52]	; (800c758 <prvAddNewTaskToReadyList+0xcc>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d00e      	beq.n	800c746 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c728:	4b0a      	ldr	r3, [pc, #40]	; (800c754 <prvAddNewTaskToReadyList+0xc8>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c732:	429a      	cmp	r2, r3
 800c734:	d207      	bcs.n	800c746 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c736:	4b0c      	ldr	r3, [pc, #48]	; (800c768 <prvAddNewTaskToReadyList+0xdc>)
 800c738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c73c:	601a      	str	r2, [r3, #0]
 800c73e:	f3bf 8f4f 	dsb	sy
 800c742:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c746:	bf00      	nop
 800c748:	3708      	adds	r7, #8
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}
 800c74e:	bf00      	nop
 800c750:	20005d00 	.word	0x20005d00
 800c754:	2000582c 	.word	0x2000582c
 800c758:	20005d0c 	.word	0x20005d0c
 800c75c:	20005d1c 	.word	0x20005d1c
 800c760:	20005d08 	.word	0x20005d08
 800c764:	20005830 	.word	0x20005830
 800c768:	e000ed04 	.word	0xe000ed04

0800c76c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b084      	sub	sp, #16
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c774:	2300      	movs	r3, #0
 800c776:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d017      	beq.n	800c7ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c77e:	4b13      	ldr	r3, [pc, #76]	; (800c7cc <vTaskDelay+0x60>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d00a      	beq.n	800c79c <vTaskDelay+0x30>
	__asm volatile
 800c786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c78a:	f383 8811 	msr	BASEPRI, r3
 800c78e:	f3bf 8f6f 	isb	sy
 800c792:	f3bf 8f4f 	dsb	sy
 800c796:	60bb      	str	r3, [r7, #8]
}
 800c798:	bf00      	nop
 800c79a:	e7fe      	b.n	800c79a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c79c:	f000 f88a 	bl	800c8b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c7a0:	2100      	movs	r1, #0
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 fe22 	bl	800d3ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c7a8:	f000 f892 	bl	800c8d0 <xTaskResumeAll>
 800c7ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d107      	bne.n	800c7c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c7b4:	4b06      	ldr	r3, [pc, #24]	; (800c7d0 <vTaskDelay+0x64>)
 800c7b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7ba:	601a      	str	r2, [r3, #0]
 800c7bc:	f3bf 8f4f 	dsb	sy
 800c7c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c7c4:	bf00      	nop
 800c7c6:	3710      	adds	r7, #16
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	20005d28 	.word	0x20005d28
 800c7d0:	e000ed04 	.word	0xe000ed04

0800c7d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b08a      	sub	sp, #40	; 0x28
 800c7d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c7e2:	463a      	mov	r2, r7
 800c7e4:	1d39      	adds	r1, r7, #4
 800c7e6:	f107 0308 	add.w	r3, r7, #8
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f7fe fed4 	bl	800b598 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c7f0:	6839      	ldr	r1, [r7, #0]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	68ba      	ldr	r2, [r7, #8]
 800c7f6:	9202      	str	r2, [sp, #8]
 800c7f8:	9301      	str	r3, [sp, #4]
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	9300      	str	r3, [sp, #0]
 800c7fe:	2300      	movs	r3, #0
 800c800:	460a      	mov	r2, r1
 800c802:	4924      	ldr	r1, [pc, #144]	; (800c894 <vTaskStartScheduler+0xc0>)
 800c804:	4824      	ldr	r0, [pc, #144]	; (800c898 <vTaskStartScheduler+0xc4>)
 800c806:	f7ff fdf9 	bl	800c3fc <xTaskCreateStatic>
 800c80a:	4603      	mov	r3, r0
 800c80c:	4a23      	ldr	r2, [pc, #140]	; (800c89c <vTaskStartScheduler+0xc8>)
 800c80e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c810:	4b22      	ldr	r3, [pc, #136]	; (800c89c <vTaskStartScheduler+0xc8>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d002      	beq.n	800c81e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c818:	2301      	movs	r3, #1
 800c81a:	617b      	str	r3, [r7, #20]
 800c81c:	e001      	b.n	800c822 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c81e:	2300      	movs	r3, #0
 800c820:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	2b01      	cmp	r3, #1
 800c826:	d102      	bne.n	800c82e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c828:	f000 fe34 	bl	800d494 <xTimerCreateTimerTask>
 800c82c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	2b01      	cmp	r3, #1
 800c832:	d11b      	bne.n	800c86c <vTaskStartScheduler+0x98>
	__asm volatile
 800c834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c838:	f383 8811 	msr	BASEPRI, r3
 800c83c:	f3bf 8f6f 	isb	sy
 800c840:	f3bf 8f4f 	dsb	sy
 800c844:	613b      	str	r3, [r7, #16]
}
 800c846:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c848:	4b15      	ldr	r3, [pc, #84]	; (800c8a0 <vTaskStartScheduler+0xcc>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	3354      	adds	r3, #84	; 0x54
 800c84e:	4a15      	ldr	r2, [pc, #84]	; (800c8a4 <vTaskStartScheduler+0xd0>)
 800c850:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c852:	4b15      	ldr	r3, [pc, #84]	; (800c8a8 <vTaskStartScheduler+0xd4>)
 800c854:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c858:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c85a:	4b14      	ldr	r3, [pc, #80]	; (800c8ac <vTaskStartScheduler+0xd8>)
 800c85c:	2201      	movs	r2, #1
 800c85e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c860:	4b13      	ldr	r3, [pc, #76]	; (800c8b0 <vTaskStartScheduler+0xdc>)
 800c862:	2200      	movs	r2, #0
 800c864:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c866:	f001 f9eb 	bl	800dc40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c86a:	e00e      	b.n	800c88a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c872:	d10a      	bne.n	800c88a <vTaskStartScheduler+0xb6>
	__asm volatile
 800c874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c878:	f383 8811 	msr	BASEPRI, r3
 800c87c:	f3bf 8f6f 	isb	sy
 800c880:	f3bf 8f4f 	dsb	sy
 800c884:	60fb      	str	r3, [r7, #12]
}
 800c886:	bf00      	nop
 800c888:	e7fe      	b.n	800c888 <vTaskStartScheduler+0xb4>
}
 800c88a:	bf00      	nop
 800c88c:	3718      	adds	r7, #24
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}
 800c892:	bf00      	nop
 800c894:	08019080 	.word	0x08019080
 800c898:	0800cf25 	.word	0x0800cf25
 800c89c:	20005d24 	.word	0x20005d24
 800c8a0:	2000582c 	.word	0x2000582c
 800c8a4:	200000dc 	.word	0x200000dc
 800c8a8:	20005d20 	.word	0x20005d20
 800c8ac:	20005d0c 	.word	0x20005d0c
 800c8b0:	20005d04 	.word	0x20005d04

0800c8b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c8b8:	4b04      	ldr	r3, [pc, #16]	; (800c8cc <vTaskSuspendAll+0x18>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	3301      	adds	r3, #1
 800c8be:	4a03      	ldr	r2, [pc, #12]	; (800c8cc <vTaskSuspendAll+0x18>)
 800c8c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c8c2:	bf00      	nop
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr
 800c8cc:	20005d28 	.word	0x20005d28

0800c8d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b084      	sub	sp, #16
 800c8d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c8de:	4b42      	ldr	r3, [pc, #264]	; (800c9e8 <xTaskResumeAll+0x118>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d10a      	bne.n	800c8fc <xTaskResumeAll+0x2c>
	__asm volatile
 800c8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ea:	f383 8811 	msr	BASEPRI, r3
 800c8ee:	f3bf 8f6f 	isb	sy
 800c8f2:	f3bf 8f4f 	dsb	sy
 800c8f6:	603b      	str	r3, [r7, #0]
}
 800c8f8:	bf00      	nop
 800c8fa:	e7fe      	b.n	800c8fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c8fc:	f001 fa42 	bl	800dd84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c900:	4b39      	ldr	r3, [pc, #228]	; (800c9e8 <xTaskResumeAll+0x118>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	3b01      	subs	r3, #1
 800c906:	4a38      	ldr	r2, [pc, #224]	; (800c9e8 <xTaskResumeAll+0x118>)
 800c908:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c90a:	4b37      	ldr	r3, [pc, #220]	; (800c9e8 <xTaskResumeAll+0x118>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d162      	bne.n	800c9d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c912:	4b36      	ldr	r3, [pc, #216]	; (800c9ec <xTaskResumeAll+0x11c>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d05e      	beq.n	800c9d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c91a:	e02f      	b.n	800c97c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c91c:	4b34      	ldr	r3, [pc, #208]	; (800c9f0 <xTaskResumeAll+0x120>)
 800c91e:	68db      	ldr	r3, [r3, #12]
 800c920:	68db      	ldr	r3, [r3, #12]
 800c922:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	3318      	adds	r3, #24
 800c928:	4618      	mov	r0, r3
 800c92a:	f7fe fef3 	bl	800b714 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	3304      	adds	r3, #4
 800c932:	4618      	mov	r0, r3
 800c934:	f7fe feee 	bl	800b714 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c93c:	4b2d      	ldr	r3, [pc, #180]	; (800c9f4 <xTaskResumeAll+0x124>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	429a      	cmp	r2, r3
 800c942:	d903      	bls.n	800c94c <xTaskResumeAll+0x7c>
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c948:	4a2a      	ldr	r2, [pc, #168]	; (800c9f4 <xTaskResumeAll+0x124>)
 800c94a:	6013      	str	r3, [r2, #0]
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c950:	4613      	mov	r3, r2
 800c952:	009b      	lsls	r3, r3, #2
 800c954:	4413      	add	r3, r2
 800c956:	009b      	lsls	r3, r3, #2
 800c958:	4a27      	ldr	r2, [pc, #156]	; (800c9f8 <xTaskResumeAll+0x128>)
 800c95a:	441a      	add	r2, r3
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	3304      	adds	r3, #4
 800c960:	4619      	mov	r1, r3
 800c962:	4610      	mov	r0, r2
 800c964:	f7fe fe79 	bl	800b65a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c96c:	4b23      	ldr	r3, [pc, #140]	; (800c9fc <xTaskResumeAll+0x12c>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c972:	429a      	cmp	r2, r3
 800c974:	d302      	bcc.n	800c97c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c976:	4b22      	ldr	r3, [pc, #136]	; (800ca00 <xTaskResumeAll+0x130>)
 800c978:	2201      	movs	r2, #1
 800c97a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c97c:	4b1c      	ldr	r3, [pc, #112]	; (800c9f0 <xTaskResumeAll+0x120>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d1cb      	bne.n	800c91c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d001      	beq.n	800c98e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c98a:	f000 fb85 	bl	800d098 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c98e:	4b1d      	ldr	r3, [pc, #116]	; (800ca04 <xTaskResumeAll+0x134>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d010      	beq.n	800c9bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c99a:	f000 f847 	bl	800ca2c <xTaskIncrementTick>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d002      	beq.n	800c9aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c9a4:	4b16      	ldr	r3, [pc, #88]	; (800ca00 <xTaskResumeAll+0x130>)
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	3b01      	subs	r3, #1
 800c9ae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d1f1      	bne.n	800c99a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c9b6:	4b13      	ldr	r3, [pc, #76]	; (800ca04 <xTaskResumeAll+0x134>)
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c9bc:	4b10      	ldr	r3, [pc, #64]	; (800ca00 <xTaskResumeAll+0x130>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d009      	beq.n	800c9d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c9c8:	4b0f      	ldr	r3, [pc, #60]	; (800ca08 <xTaskResumeAll+0x138>)
 800c9ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9ce:	601a      	str	r2, [r3, #0]
 800c9d0:	f3bf 8f4f 	dsb	sy
 800c9d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c9d8:	f001 fa04 	bl	800dde4 <vPortExitCritical>

	return xAlreadyYielded;
 800c9dc:	68bb      	ldr	r3, [r7, #8]
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3710      	adds	r7, #16
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	20005d28 	.word	0x20005d28
 800c9ec:	20005d00 	.word	0x20005d00
 800c9f0:	20005cc0 	.word	0x20005cc0
 800c9f4:	20005d08 	.word	0x20005d08
 800c9f8:	20005830 	.word	0x20005830
 800c9fc:	2000582c 	.word	0x2000582c
 800ca00:	20005d14 	.word	0x20005d14
 800ca04:	20005d10 	.word	0x20005d10
 800ca08:	e000ed04 	.word	0xe000ed04

0800ca0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b083      	sub	sp, #12
 800ca10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ca12:	4b05      	ldr	r3, [pc, #20]	; (800ca28 <xTaskGetTickCount+0x1c>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ca18:	687b      	ldr	r3, [r7, #4]
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	370c      	adds	r7, #12
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca24:	4770      	bx	lr
 800ca26:	bf00      	nop
 800ca28:	20005d04 	.word	0x20005d04

0800ca2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b086      	sub	sp, #24
 800ca30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ca32:	2300      	movs	r3, #0
 800ca34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca36:	4b4f      	ldr	r3, [pc, #316]	; (800cb74 <xTaskIncrementTick+0x148>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	f040 808f 	bne.w	800cb5e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ca40:	4b4d      	ldr	r3, [pc, #308]	; (800cb78 <xTaskIncrementTick+0x14c>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	3301      	adds	r3, #1
 800ca46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ca48:	4a4b      	ldr	r2, [pc, #300]	; (800cb78 <xTaskIncrementTick+0x14c>)
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d120      	bne.n	800ca96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ca54:	4b49      	ldr	r3, [pc, #292]	; (800cb7c <xTaskIncrementTick+0x150>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d00a      	beq.n	800ca74 <xTaskIncrementTick+0x48>
	__asm volatile
 800ca5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca62:	f383 8811 	msr	BASEPRI, r3
 800ca66:	f3bf 8f6f 	isb	sy
 800ca6a:	f3bf 8f4f 	dsb	sy
 800ca6e:	603b      	str	r3, [r7, #0]
}
 800ca70:	bf00      	nop
 800ca72:	e7fe      	b.n	800ca72 <xTaskIncrementTick+0x46>
 800ca74:	4b41      	ldr	r3, [pc, #260]	; (800cb7c <xTaskIncrementTick+0x150>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	60fb      	str	r3, [r7, #12]
 800ca7a:	4b41      	ldr	r3, [pc, #260]	; (800cb80 <xTaskIncrementTick+0x154>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	4a3f      	ldr	r2, [pc, #252]	; (800cb7c <xTaskIncrementTick+0x150>)
 800ca80:	6013      	str	r3, [r2, #0]
 800ca82:	4a3f      	ldr	r2, [pc, #252]	; (800cb80 <xTaskIncrementTick+0x154>)
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	6013      	str	r3, [r2, #0]
 800ca88:	4b3e      	ldr	r3, [pc, #248]	; (800cb84 <xTaskIncrementTick+0x158>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	3301      	adds	r3, #1
 800ca8e:	4a3d      	ldr	r2, [pc, #244]	; (800cb84 <xTaskIncrementTick+0x158>)
 800ca90:	6013      	str	r3, [r2, #0]
 800ca92:	f000 fb01 	bl	800d098 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ca96:	4b3c      	ldr	r3, [pc, #240]	; (800cb88 <xTaskIncrementTick+0x15c>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	693a      	ldr	r2, [r7, #16]
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	d349      	bcc.n	800cb34 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800caa0:	4b36      	ldr	r3, [pc, #216]	; (800cb7c <xTaskIncrementTick+0x150>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d104      	bne.n	800cab4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800caaa:	4b37      	ldr	r3, [pc, #220]	; (800cb88 <xTaskIncrementTick+0x15c>)
 800caac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cab0:	601a      	str	r2, [r3, #0]
					break;
 800cab2:	e03f      	b.n	800cb34 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cab4:	4b31      	ldr	r3, [pc, #196]	; (800cb7c <xTaskIncrementTick+0x150>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	68db      	ldr	r3, [r3, #12]
 800caba:	68db      	ldr	r3, [r3, #12]
 800cabc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cac4:	693a      	ldr	r2, [r7, #16]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	429a      	cmp	r2, r3
 800caca:	d203      	bcs.n	800cad4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cacc:	4a2e      	ldr	r2, [pc, #184]	; (800cb88 <xTaskIncrementTick+0x15c>)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cad2:	e02f      	b.n	800cb34 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	3304      	adds	r3, #4
 800cad8:	4618      	mov	r0, r3
 800cada:	f7fe fe1b 	bl	800b714 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d004      	beq.n	800caf0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	3318      	adds	r3, #24
 800caea:	4618      	mov	r0, r3
 800caec:	f7fe fe12 	bl	800b714 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caf4:	4b25      	ldr	r3, [pc, #148]	; (800cb8c <xTaskIncrementTick+0x160>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	429a      	cmp	r2, r3
 800cafa:	d903      	bls.n	800cb04 <xTaskIncrementTick+0xd8>
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb00:	4a22      	ldr	r2, [pc, #136]	; (800cb8c <xTaskIncrementTick+0x160>)
 800cb02:	6013      	str	r3, [r2, #0]
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb08:	4613      	mov	r3, r2
 800cb0a:	009b      	lsls	r3, r3, #2
 800cb0c:	4413      	add	r3, r2
 800cb0e:	009b      	lsls	r3, r3, #2
 800cb10:	4a1f      	ldr	r2, [pc, #124]	; (800cb90 <xTaskIncrementTick+0x164>)
 800cb12:	441a      	add	r2, r3
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	3304      	adds	r3, #4
 800cb18:	4619      	mov	r1, r3
 800cb1a:	4610      	mov	r0, r2
 800cb1c:	f7fe fd9d 	bl	800b65a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb24:	4b1b      	ldr	r3, [pc, #108]	; (800cb94 <xTaskIncrementTick+0x168>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d3b8      	bcc.n	800caa0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb32:	e7b5      	b.n	800caa0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cb34:	4b17      	ldr	r3, [pc, #92]	; (800cb94 <xTaskIncrementTick+0x168>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb3a:	4915      	ldr	r1, [pc, #84]	; (800cb90 <xTaskIncrementTick+0x164>)
 800cb3c:	4613      	mov	r3, r2
 800cb3e:	009b      	lsls	r3, r3, #2
 800cb40:	4413      	add	r3, r2
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	440b      	add	r3, r1
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	2b01      	cmp	r3, #1
 800cb4a:	d901      	bls.n	800cb50 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cb50:	4b11      	ldr	r3, [pc, #68]	; (800cb98 <xTaskIncrementTick+0x16c>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d007      	beq.n	800cb68 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	617b      	str	r3, [r7, #20]
 800cb5c:	e004      	b.n	800cb68 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cb5e:	4b0f      	ldr	r3, [pc, #60]	; (800cb9c <xTaskIncrementTick+0x170>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	3301      	adds	r3, #1
 800cb64:	4a0d      	ldr	r2, [pc, #52]	; (800cb9c <xTaskIncrementTick+0x170>)
 800cb66:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cb68:	697b      	ldr	r3, [r7, #20]
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3718      	adds	r7, #24
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
 800cb72:	bf00      	nop
 800cb74:	20005d28 	.word	0x20005d28
 800cb78:	20005d04 	.word	0x20005d04
 800cb7c:	20005cb8 	.word	0x20005cb8
 800cb80:	20005cbc 	.word	0x20005cbc
 800cb84:	20005d18 	.word	0x20005d18
 800cb88:	20005d20 	.word	0x20005d20
 800cb8c:	20005d08 	.word	0x20005d08
 800cb90:	20005830 	.word	0x20005830
 800cb94:	2000582c 	.word	0x2000582c
 800cb98:	20005d14 	.word	0x20005d14
 800cb9c:	20005d10 	.word	0x20005d10

0800cba0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cba0:	b480      	push	{r7}
 800cba2:	b085      	sub	sp, #20
 800cba4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cba6:	4b2a      	ldr	r3, [pc, #168]	; (800cc50 <vTaskSwitchContext+0xb0>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d003      	beq.n	800cbb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cbae:	4b29      	ldr	r3, [pc, #164]	; (800cc54 <vTaskSwitchContext+0xb4>)
 800cbb0:	2201      	movs	r2, #1
 800cbb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cbb4:	e046      	b.n	800cc44 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800cbb6:	4b27      	ldr	r3, [pc, #156]	; (800cc54 <vTaskSwitchContext+0xb4>)
 800cbb8:	2200      	movs	r2, #0
 800cbba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbbc:	4b26      	ldr	r3, [pc, #152]	; (800cc58 <vTaskSwitchContext+0xb8>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	60fb      	str	r3, [r7, #12]
 800cbc2:	e010      	b.n	800cbe6 <vTaskSwitchContext+0x46>
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d10a      	bne.n	800cbe0 <vTaskSwitchContext+0x40>
	__asm volatile
 800cbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbce:	f383 8811 	msr	BASEPRI, r3
 800cbd2:	f3bf 8f6f 	isb	sy
 800cbd6:	f3bf 8f4f 	dsb	sy
 800cbda:	607b      	str	r3, [r7, #4]
}
 800cbdc:	bf00      	nop
 800cbde:	e7fe      	b.n	800cbde <vTaskSwitchContext+0x3e>
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	3b01      	subs	r3, #1
 800cbe4:	60fb      	str	r3, [r7, #12]
 800cbe6:	491d      	ldr	r1, [pc, #116]	; (800cc5c <vTaskSwitchContext+0xbc>)
 800cbe8:	68fa      	ldr	r2, [r7, #12]
 800cbea:	4613      	mov	r3, r2
 800cbec:	009b      	lsls	r3, r3, #2
 800cbee:	4413      	add	r3, r2
 800cbf0:	009b      	lsls	r3, r3, #2
 800cbf2:	440b      	add	r3, r1
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d0e4      	beq.n	800cbc4 <vTaskSwitchContext+0x24>
 800cbfa:	68fa      	ldr	r2, [r7, #12]
 800cbfc:	4613      	mov	r3, r2
 800cbfe:	009b      	lsls	r3, r3, #2
 800cc00:	4413      	add	r3, r2
 800cc02:	009b      	lsls	r3, r3, #2
 800cc04:	4a15      	ldr	r2, [pc, #84]	; (800cc5c <vTaskSwitchContext+0xbc>)
 800cc06:	4413      	add	r3, r2
 800cc08:	60bb      	str	r3, [r7, #8]
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	685a      	ldr	r2, [r3, #4]
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	605a      	str	r2, [r3, #4]
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	685a      	ldr	r2, [r3, #4]
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	3308      	adds	r3, #8
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d104      	bne.n	800cc2a <vTaskSwitchContext+0x8a>
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	685b      	ldr	r3, [r3, #4]
 800cc24:	685a      	ldr	r2, [r3, #4]
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	605a      	str	r2, [r3, #4]
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	685b      	ldr	r3, [r3, #4]
 800cc2e:	68db      	ldr	r3, [r3, #12]
 800cc30:	4a0b      	ldr	r2, [pc, #44]	; (800cc60 <vTaskSwitchContext+0xc0>)
 800cc32:	6013      	str	r3, [r2, #0]
 800cc34:	4a08      	ldr	r2, [pc, #32]	; (800cc58 <vTaskSwitchContext+0xb8>)
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cc3a:	4b09      	ldr	r3, [pc, #36]	; (800cc60 <vTaskSwitchContext+0xc0>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	3354      	adds	r3, #84	; 0x54
 800cc40:	4a08      	ldr	r2, [pc, #32]	; (800cc64 <vTaskSwitchContext+0xc4>)
 800cc42:	6013      	str	r3, [r2, #0]
}
 800cc44:	bf00      	nop
 800cc46:	3714      	adds	r7, #20
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr
 800cc50:	20005d28 	.word	0x20005d28
 800cc54:	20005d14 	.word	0x20005d14
 800cc58:	20005d08 	.word	0x20005d08
 800cc5c:	20005830 	.word	0x20005830
 800cc60:	2000582c 	.word	0x2000582c
 800cc64:	200000dc 	.word	0x200000dc

0800cc68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b084      	sub	sp, #16
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d10a      	bne.n	800cc8e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc7c:	f383 8811 	msr	BASEPRI, r3
 800cc80:	f3bf 8f6f 	isb	sy
 800cc84:	f3bf 8f4f 	dsb	sy
 800cc88:	60fb      	str	r3, [r7, #12]
}
 800cc8a:	bf00      	nop
 800cc8c:	e7fe      	b.n	800cc8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cc8e:	4b07      	ldr	r3, [pc, #28]	; (800ccac <vTaskPlaceOnEventList+0x44>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	3318      	adds	r3, #24
 800cc94:	4619      	mov	r1, r3
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f7fe fd03 	bl	800b6a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cc9c:	2101      	movs	r1, #1
 800cc9e:	6838      	ldr	r0, [r7, #0]
 800cca0:	f000 fba4 	bl	800d3ec <prvAddCurrentTaskToDelayedList>
}
 800cca4:	bf00      	nop
 800cca6:	3710      	adds	r7, #16
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	2000582c 	.word	0x2000582c

0800ccb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b086      	sub	sp, #24
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	60f8      	str	r0, [r7, #12]
 800ccb8:	60b9      	str	r1, [r7, #8]
 800ccba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d10a      	bne.n	800ccd8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ccc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc6:	f383 8811 	msr	BASEPRI, r3
 800ccca:	f3bf 8f6f 	isb	sy
 800ccce:	f3bf 8f4f 	dsb	sy
 800ccd2:	617b      	str	r3, [r7, #20]
}
 800ccd4:	bf00      	nop
 800ccd6:	e7fe      	b.n	800ccd6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ccd8:	4b0a      	ldr	r3, [pc, #40]	; (800cd04 <vTaskPlaceOnEventListRestricted+0x54>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	3318      	adds	r3, #24
 800ccde:	4619      	mov	r1, r3
 800cce0:	68f8      	ldr	r0, [r7, #12]
 800cce2:	f7fe fcba 	bl	800b65a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d002      	beq.n	800ccf2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ccec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ccf0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ccf2:	6879      	ldr	r1, [r7, #4]
 800ccf4:	68b8      	ldr	r0, [r7, #8]
 800ccf6:	f000 fb79 	bl	800d3ec <prvAddCurrentTaskToDelayedList>
	}
 800ccfa:	bf00      	nop
 800ccfc:	3718      	adds	r7, #24
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}
 800cd02:	bf00      	nop
 800cd04:	2000582c 	.word	0x2000582c

0800cd08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b086      	sub	sp, #24
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	68db      	ldr	r3, [r3, #12]
 800cd14:	68db      	ldr	r3, [r3, #12]
 800cd16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d10a      	bne.n	800cd34 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd22:	f383 8811 	msr	BASEPRI, r3
 800cd26:	f3bf 8f6f 	isb	sy
 800cd2a:	f3bf 8f4f 	dsb	sy
 800cd2e:	60fb      	str	r3, [r7, #12]
}
 800cd30:	bf00      	nop
 800cd32:	e7fe      	b.n	800cd32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	3318      	adds	r3, #24
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f7fe fceb 	bl	800b714 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd3e:	4b1e      	ldr	r3, [pc, #120]	; (800cdb8 <xTaskRemoveFromEventList+0xb0>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d11d      	bne.n	800cd82 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	3304      	adds	r3, #4
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f7fe fce2 	bl	800b714 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd54:	4b19      	ldr	r3, [pc, #100]	; (800cdbc <xTaskRemoveFromEventList+0xb4>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	d903      	bls.n	800cd64 <xTaskRemoveFromEventList+0x5c>
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd60:	4a16      	ldr	r2, [pc, #88]	; (800cdbc <xTaskRemoveFromEventList+0xb4>)
 800cd62:	6013      	str	r3, [r2, #0]
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd68:	4613      	mov	r3, r2
 800cd6a:	009b      	lsls	r3, r3, #2
 800cd6c:	4413      	add	r3, r2
 800cd6e:	009b      	lsls	r3, r3, #2
 800cd70:	4a13      	ldr	r2, [pc, #76]	; (800cdc0 <xTaskRemoveFromEventList+0xb8>)
 800cd72:	441a      	add	r2, r3
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	3304      	adds	r3, #4
 800cd78:	4619      	mov	r1, r3
 800cd7a:	4610      	mov	r0, r2
 800cd7c:	f7fe fc6d 	bl	800b65a <vListInsertEnd>
 800cd80:	e005      	b.n	800cd8e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	3318      	adds	r3, #24
 800cd86:	4619      	mov	r1, r3
 800cd88:	480e      	ldr	r0, [pc, #56]	; (800cdc4 <xTaskRemoveFromEventList+0xbc>)
 800cd8a:	f7fe fc66 	bl	800b65a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd92:	4b0d      	ldr	r3, [pc, #52]	; (800cdc8 <xTaskRemoveFromEventList+0xc0>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d905      	bls.n	800cda8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cda0:	4b0a      	ldr	r3, [pc, #40]	; (800cdcc <xTaskRemoveFromEventList+0xc4>)
 800cda2:	2201      	movs	r2, #1
 800cda4:	601a      	str	r2, [r3, #0]
 800cda6:	e001      	b.n	800cdac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cdac:	697b      	ldr	r3, [r7, #20]
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3718      	adds	r7, #24
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}
 800cdb6:	bf00      	nop
 800cdb8:	20005d28 	.word	0x20005d28
 800cdbc:	20005d08 	.word	0x20005d08
 800cdc0:	20005830 	.word	0x20005830
 800cdc4:	20005cc0 	.word	0x20005cc0
 800cdc8:	2000582c 	.word	0x2000582c
 800cdcc:	20005d14 	.word	0x20005d14

0800cdd0 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b084      	sub	sp, #16
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d10a      	bne.n	800cdf4 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800cdde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde2:	f383 8811 	msr	BASEPRI, r3
 800cde6:	f3bf 8f6f 	isb	sy
 800cdea:	f3bf 8f4f 	dsb	sy
 800cdee:	60fb      	str	r3, [r7, #12]
}
 800cdf0:	bf00      	nop
 800cdf2:	e7fe      	b.n	800cdf2 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800cdf4:	f000 ffc6 	bl	800dd84 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cdf8:	4b06      	ldr	r3, [pc, #24]	; (800ce14 <vTaskSetTimeOutState+0x44>)
 800cdfa:	681a      	ldr	r2, [r3, #0]
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800ce00:	4b05      	ldr	r3, [pc, #20]	; (800ce18 <vTaskSetTimeOutState+0x48>)
 800ce02:	681a      	ldr	r2, [r3, #0]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800ce08:	f000 ffec 	bl	800dde4 <vPortExitCritical>
}
 800ce0c:	bf00      	nop
 800ce0e:	3710      	adds	r7, #16
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}
 800ce14:	20005d18 	.word	0x20005d18
 800ce18:	20005d04 	.word	0x20005d04

0800ce1c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b083      	sub	sp, #12
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ce24:	4b06      	ldr	r3, [pc, #24]	; (800ce40 <vTaskInternalSetTimeOutState+0x24>)
 800ce26:	681a      	ldr	r2, [r3, #0]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ce2c:	4b05      	ldr	r3, [pc, #20]	; (800ce44 <vTaskInternalSetTimeOutState+0x28>)
 800ce2e:	681a      	ldr	r2, [r3, #0]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	605a      	str	r2, [r3, #4]
}
 800ce34:	bf00      	nop
 800ce36:	370c      	adds	r7, #12
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3e:	4770      	bx	lr
 800ce40:	20005d18 	.word	0x20005d18
 800ce44:	20005d04 	.word	0x20005d04

0800ce48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b088      	sub	sp, #32
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d10a      	bne.n	800ce6e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ce58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce5c:	f383 8811 	msr	BASEPRI, r3
 800ce60:	f3bf 8f6f 	isb	sy
 800ce64:	f3bf 8f4f 	dsb	sy
 800ce68:	613b      	str	r3, [r7, #16]
}
 800ce6a:	bf00      	nop
 800ce6c:	e7fe      	b.n	800ce6c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d10a      	bne.n	800ce8a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ce74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce78:	f383 8811 	msr	BASEPRI, r3
 800ce7c:	f3bf 8f6f 	isb	sy
 800ce80:	f3bf 8f4f 	dsb	sy
 800ce84:	60fb      	str	r3, [r7, #12]
}
 800ce86:	bf00      	nop
 800ce88:	e7fe      	b.n	800ce88 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ce8a:	f000 ff7b 	bl	800dd84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ce8e:	4b1d      	ldr	r3, [pc, #116]	; (800cf04 <xTaskCheckForTimeOut+0xbc>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	685b      	ldr	r3, [r3, #4]
 800ce98:	69ba      	ldr	r2, [r7, #24]
 800ce9a:	1ad3      	subs	r3, r2, r3
 800ce9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cea6:	d102      	bne.n	800ceae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	61fb      	str	r3, [r7, #28]
 800ceac:	e023      	b.n	800cef6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681a      	ldr	r2, [r3, #0]
 800ceb2:	4b15      	ldr	r3, [pc, #84]	; (800cf08 <xTaskCheckForTimeOut+0xc0>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	d007      	beq.n	800ceca <xTaskCheckForTimeOut+0x82>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	69ba      	ldr	r2, [r7, #24]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d302      	bcc.n	800ceca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cec4:	2301      	movs	r3, #1
 800cec6:	61fb      	str	r3, [r7, #28]
 800cec8:	e015      	b.n	800cef6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	697a      	ldr	r2, [r7, #20]
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d20b      	bcs.n	800ceec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	681a      	ldr	r2, [r3, #0]
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	1ad2      	subs	r2, r2, r3
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f7ff ff9b 	bl	800ce1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cee6:	2300      	movs	r3, #0
 800cee8:	61fb      	str	r3, [r7, #28]
 800ceea:	e004      	b.n	800cef6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	2200      	movs	r2, #0
 800cef0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cef2:	2301      	movs	r3, #1
 800cef4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cef6:	f000 ff75 	bl	800dde4 <vPortExitCritical>

	return xReturn;
 800cefa:	69fb      	ldr	r3, [r7, #28]
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3720      	adds	r7, #32
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}
 800cf04:	20005d04 	.word	0x20005d04
 800cf08:	20005d18 	.word	0x20005d18

0800cf0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cf10:	4b03      	ldr	r3, [pc, #12]	; (800cf20 <vTaskMissedYield+0x14>)
 800cf12:	2201      	movs	r2, #1
 800cf14:	601a      	str	r2, [r3, #0]
}
 800cf16:	bf00      	nop
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr
 800cf20:	20005d14 	.word	0x20005d14

0800cf24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cf2c:	f000 f852 	bl	800cfd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cf30:	4b06      	ldr	r3, [pc, #24]	; (800cf4c <prvIdleTask+0x28>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	2b01      	cmp	r3, #1
 800cf36:	d9f9      	bls.n	800cf2c <prvIdleTask+0x8>
			{
				taskYIELD();
 800cf38:	4b05      	ldr	r3, [pc, #20]	; (800cf50 <prvIdleTask+0x2c>)
 800cf3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf3e:	601a      	str	r2, [r3, #0]
 800cf40:	f3bf 8f4f 	dsb	sy
 800cf44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cf48:	e7f0      	b.n	800cf2c <prvIdleTask+0x8>
 800cf4a:	bf00      	nop
 800cf4c:	20005830 	.word	0x20005830
 800cf50:	e000ed04 	.word	0xe000ed04

0800cf54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b082      	sub	sp, #8
 800cf58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	607b      	str	r3, [r7, #4]
 800cf5e:	e00c      	b.n	800cf7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cf60:	687a      	ldr	r2, [r7, #4]
 800cf62:	4613      	mov	r3, r2
 800cf64:	009b      	lsls	r3, r3, #2
 800cf66:	4413      	add	r3, r2
 800cf68:	009b      	lsls	r3, r3, #2
 800cf6a:	4a12      	ldr	r2, [pc, #72]	; (800cfb4 <prvInitialiseTaskLists+0x60>)
 800cf6c:	4413      	add	r3, r2
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7fe fb46 	bl	800b600 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	3301      	adds	r3, #1
 800cf78:	607b      	str	r3, [r7, #4]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2b37      	cmp	r3, #55	; 0x37
 800cf7e:	d9ef      	bls.n	800cf60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cf80:	480d      	ldr	r0, [pc, #52]	; (800cfb8 <prvInitialiseTaskLists+0x64>)
 800cf82:	f7fe fb3d 	bl	800b600 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cf86:	480d      	ldr	r0, [pc, #52]	; (800cfbc <prvInitialiseTaskLists+0x68>)
 800cf88:	f7fe fb3a 	bl	800b600 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cf8c:	480c      	ldr	r0, [pc, #48]	; (800cfc0 <prvInitialiseTaskLists+0x6c>)
 800cf8e:	f7fe fb37 	bl	800b600 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cf92:	480c      	ldr	r0, [pc, #48]	; (800cfc4 <prvInitialiseTaskLists+0x70>)
 800cf94:	f7fe fb34 	bl	800b600 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cf98:	480b      	ldr	r0, [pc, #44]	; (800cfc8 <prvInitialiseTaskLists+0x74>)
 800cf9a:	f7fe fb31 	bl	800b600 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cf9e:	4b0b      	ldr	r3, [pc, #44]	; (800cfcc <prvInitialiseTaskLists+0x78>)
 800cfa0:	4a05      	ldr	r2, [pc, #20]	; (800cfb8 <prvInitialiseTaskLists+0x64>)
 800cfa2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cfa4:	4b0a      	ldr	r3, [pc, #40]	; (800cfd0 <prvInitialiseTaskLists+0x7c>)
 800cfa6:	4a05      	ldr	r2, [pc, #20]	; (800cfbc <prvInitialiseTaskLists+0x68>)
 800cfa8:	601a      	str	r2, [r3, #0]
}
 800cfaa:	bf00      	nop
 800cfac:	3708      	adds	r7, #8
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}
 800cfb2:	bf00      	nop
 800cfb4:	20005830 	.word	0x20005830
 800cfb8:	20005c90 	.word	0x20005c90
 800cfbc:	20005ca4 	.word	0x20005ca4
 800cfc0:	20005cc0 	.word	0x20005cc0
 800cfc4:	20005cd4 	.word	0x20005cd4
 800cfc8:	20005cec 	.word	0x20005cec
 800cfcc:	20005cb8 	.word	0x20005cb8
 800cfd0:	20005cbc 	.word	0x20005cbc

0800cfd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b082      	sub	sp, #8
 800cfd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cfda:	e019      	b.n	800d010 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cfdc:	f000 fed2 	bl	800dd84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfe0:	4b10      	ldr	r3, [pc, #64]	; (800d024 <prvCheckTasksWaitingTermination+0x50>)
 800cfe2:	68db      	ldr	r3, [r3, #12]
 800cfe4:	68db      	ldr	r3, [r3, #12]
 800cfe6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	3304      	adds	r3, #4
 800cfec:	4618      	mov	r0, r3
 800cfee:	f7fe fb91 	bl	800b714 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cff2:	4b0d      	ldr	r3, [pc, #52]	; (800d028 <prvCheckTasksWaitingTermination+0x54>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	3b01      	subs	r3, #1
 800cff8:	4a0b      	ldr	r2, [pc, #44]	; (800d028 <prvCheckTasksWaitingTermination+0x54>)
 800cffa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cffc:	4b0b      	ldr	r3, [pc, #44]	; (800d02c <prvCheckTasksWaitingTermination+0x58>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	3b01      	subs	r3, #1
 800d002:	4a0a      	ldr	r2, [pc, #40]	; (800d02c <prvCheckTasksWaitingTermination+0x58>)
 800d004:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d006:	f000 feed 	bl	800dde4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f000 f810 	bl	800d030 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d010:	4b06      	ldr	r3, [pc, #24]	; (800d02c <prvCheckTasksWaitingTermination+0x58>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d1e1      	bne.n	800cfdc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d018:	bf00      	nop
 800d01a:	bf00      	nop
 800d01c:	3708      	adds	r7, #8
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	20005cd4 	.word	0x20005cd4
 800d028:	20005d00 	.word	0x20005d00
 800d02c:	20005ce8 	.word	0x20005ce8

0800d030 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d030:	b580      	push	{r7, lr}
 800d032:	b084      	sub	sp, #16
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	3354      	adds	r3, #84	; 0x54
 800d03c:	4618      	mov	r0, r3
 800d03e:	f00a ffe9 	bl	8018014 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d108      	bne.n	800d05e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d050:	4618      	mov	r0, r3
 800d052:	f001 f885 	bl	800e160 <vPortFree>
				vPortFree( pxTCB );
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f001 f882 	bl	800e160 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d05c:	e018      	b.n	800d090 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d064:	2b01      	cmp	r3, #1
 800d066:	d103      	bne.n	800d070 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f001 f879 	bl	800e160 <vPortFree>
	}
 800d06e:	e00f      	b.n	800d090 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d076:	2b02      	cmp	r3, #2
 800d078:	d00a      	beq.n	800d090 <prvDeleteTCB+0x60>
	__asm volatile
 800d07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d07e:	f383 8811 	msr	BASEPRI, r3
 800d082:	f3bf 8f6f 	isb	sy
 800d086:	f3bf 8f4f 	dsb	sy
 800d08a:	60fb      	str	r3, [r7, #12]
}
 800d08c:	bf00      	nop
 800d08e:	e7fe      	b.n	800d08e <prvDeleteTCB+0x5e>
	}
 800d090:	bf00      	nop
 800d092:	3710      	adds	r7, #16
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}

0800d098 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d098:	b480      	push	{r7}
 800d09a:	b083      	sub	sp, #12
 800d09c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d09e:	4b0c      	ldr	r3, [pc, #48]	; (800d0d0 <prvResetNextTaskUnblockTime+0x38>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d104      	bne.n	800d0b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d0a8:	4b0a      	ldr	r3, [pc, #40]	; (800d0d4 <prvResetNextTaskUnblockTime+0x3c>)
 800d0aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d0ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d0b0:	e008      	b.n	800d0c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0b2:	4b07      	ldr	r3, [pc, #28]	; (800d0d0 <prvResetNextTaskUnblockTime+0x38>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	68db      	ldr	r3, [r3, #12]
 800d0b8:	68db      	ldr	r3, [r3, #12]
 800d0ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	4a04      	ldr	r2, [pc, #16]	; (800d0d4 <prvResetNextTaskUnblockTime+0x3c>)
 800d0c2:	6013      	str	r3, [r2, #0]
}
 800d0c4:	bf00      	nop
 800d0c6:	370c      	adds	r7, #12
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr
 800d0d0:	20005cb8 	.word	0x20005cb8
 800d0d4:	20005d20 	.word	0x20005d20

0800d0d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d0d8:	b480      	push	{r7}
 800d0da:	b083      	sub	sp, #12
 800d0dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d0de:	4b0b      	ldr	r3, [pc, #44]	; (800d10c <xTaskGetSchedulerState+0x34>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d102      	bne.n	800d0ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	607b      	str	r3, [r7, #4]
 800d0ea:	e008      	b.n	800d0fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0ec:	4b08      	ldr	r3, [pc, #32]	; (800d110 <xTaskGetSchedulerState+0x38>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d102      	bne.n	800d0fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d0f4:	2302      	movs	r3, #2
 800d0f6:	607b      	str	r3, [r7, #4]
 800d0f8:	e001      	b.n	800d0fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d0fe:	687b      	ldr	r3, [r7, #4]
	}
 800d100:	4618      	mov	r0, r3
 800d102:	370c      	adds	r7, #12
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr
 800d10c:	20005d0c 	.word	0x20005d0c
 800d110:	20005d28 	.word	0x20005d28

0800d114 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d114:	b580      	push	{r7, lr}
 800d116:	b084      	sub	sp, #16
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d120:	2300      	movs	r3, #0
 800d122:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d051      	beq.n	800d1ce <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d12e:	4b2a      	ldr	r3, [pc, #168]	; (800d1d8 <xTaskPriorityInherit+0xc4>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d134:	429a      	cmp	r2, r3
 800d136:	d241      	bcs.n	800d1bc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	699b      	ldr	r3, [r3, #24]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	db06      	blt.n	800d14e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d140:	4b25      	ldr	r3, [pc, #148]	; (800d1d8 <xTaskPriorityInherit+0xc4>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d146:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	6959      	ldr	r1, [r3, #20]
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d156:	4613      	mov	r3, r2
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	4413      	add	r3, r2
 800d15c:	009b      	lsls	r3, r3, #2
 800d15e:	4a1f      	ldr	r2, [pc, #124]	; (800d1dc <xTaskPriorityInherit+0xc8>)
 800d160:	4413      	add	r3, r2
 800d162:	4299      	cmp	r1, r3
 800d164:	d122      	bne.n	800d1ac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	3304      	adds	r3, #4
 800d16a:	4618      	mov	r0, r3
 800d16c:	f7fe fad2 	bl	800b714 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d170:	4b19      	ldr	r3, [pc, #100]	; (800d1d8 <xTaskPriorityInherit+0xc4>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d17e:	4b18      	ldr	r3, [pc, #96]	; (800d1e0 <xTaskPriorityInherit+0xcc>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	429a      	cmp	r2, r3
 800d184:	d903      	bls.n	800d18e <xTaskPriorityInherit+0x7a>
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d18a:	4a15      	ldr	r2, [pc, #84]	; (800d1e0 <xTaskPriorityInherit+0xcc>)
 800d18c:	6013      	str	r3, [r2, #0]
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d192:	4613      	mov	r3, r2
 800d194:	009b      	lsls	r3, r3, #2
 800d196:	4413      	add	r3, r2
 800d198:	009b      	lsls	r3, r3, #2
 800d19a:	4a10      	ldr	r2, [pc, #64]	; (800d1dc <xTaskPriorityInherit+0xc8>)
 800d19c:	441a      	add	r2, r3
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	3304      	adds	r3, #4
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	4610      	mov	r0, r2
 800d1a6:	f7fe fa58 	bl	800b65a <vListInsertEnd>
 800d1aa:	e004      	b.n	800d1b6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d1ac:	4b0a      	ldr	r3, [pc, #40]	; (800d1d8 <xTaskPriorityInherit+0xc4>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	60fb      	str	r3, [r7, #12]
 800d1ba:	e008      	b.n	800d1ce <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d1c0:	4b05      	ldr	r3, [pc, #20]	; (800d1d8 <xTaskPriorityInherit+0xc4>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d201      	bcs.n	800d1ce <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
	}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3710      	adds	r7, #16
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}
 800d1d8:	2000582c 	.word	0x2000582c
 800d1dc:	20005830 	.word	0x20005830
 800d1e0:	20005d08 	.word	0x20005d08

0800d1e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b086      	sub	sp, #24
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d056      	beq.n	800d2a8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d1fa:	4b2e      	ldr	r3, [pc, #184]	; (800d2b4 <xTaskPriorityDisinherit+0xd0>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	693a      	ldr	r2, [r7, #16]
 800d200:	429a      	cmp	r2, r3
 800d202:	d00a      	beq.n	800d21a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d208:	f383 8811 	msr	BASEPRI, r3
 800d20c:	f3bf 8f6f 	isb	sy
 800d210:	f3bf 8f4f 	dsb	sy
 800d214:	60fb      	str	r3, [r7, #12]
}
 800d216:	bf00      	nop
 800d218:	e7fe      	b.n	800d218 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d10a      	bne.n	800d238 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d226:	f383 8811 	msr	BASEPRI, r3
 800d22a:	f3bf 8f6f 	isb	sy
 800d22e:	f3bf 8f4f 	dsb	sy
 800d232:	60bb      	str	r3, [r7, #8]
}
 800d234:	bf00      	nop
 800d236:	e7fe      	b.n	800d236 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d238:	693b      	ldr	r3, [r7, #16]
 800d23a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d23c:	1e5a      	subs	r2, r3, #1
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d02c      	beq.n	800d2a8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d252:	2b00      	cmp	r3, #0
 800d254:	d128      	bne.n	800d2a8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d256:	693b      	ldr	r3, [r7, #16]
 800d258:	3304      	adds	r3, #4
 800d25a:	4618      	mov	r0, r3
 800d25c:	f7fe fa5a 	bl	800b714 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d260:	693b      	ldr	r3, [r7, #16]
 800d262:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d26c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d270:	693b      	ldr	r3, [r7, #16]
 800d272:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d278:	4b0f      	ldr	r3, [pc, #60]	; (800d2b8 <xTaskPriorityDisinherit+0xd4>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d903      	bls.n	800d288 <xTaskPriorityDisinherit+0xa4>
 800d280:	693b      	ldr	r3, [r7, #16]
 800d282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d284:	4a0c      	ldr	r2, [pc, #48]	; (800d2b8 <xTaskPriorityDisinherit+0xd4>)
 800d286:	6013      	str	r3, [r2, #0]
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d28c:	4613      	mov	r3, r2
 800d28e:	009b      	lsls	r3, r3, #2
 800d290:	4413      	add	r3, r2
 800d292:	009b      	lsls	r3, r3, #2
 800d294:	4a09      	ldr	r2, [pc, #36]	; (800d2bc <xTaskPriorityDisinherit+0xd8>)
 800d296:	441a      	add	r2, r3
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	3304      	adds	r3, #4
 800d29c:	4619      	mov	r1, r3
 800d29e:	4610      	mov	r0, r2
 800d2a0:	f7fe f9db 	bl	800b65a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d2a8:	697b      	ldr	r3, [r7, #20]
	}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3718      	adds	r7, #24
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	2000582c 	.word	0x2000582c
 800d2b8:	20005d08 	.word	0x20005d08
 800d2bc:	20005830 	.word	0x20005830

0800d2c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b088      	sub	sp, #32
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
 800d2c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d06a      	beq.n	800d3ae <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d2d8:	69bb      	ldr	r3, [r7, #24]
 800d2da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d10a      	bne.n	800d2f6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e4:	f383 8811 	msr	BASEPRI, r3
 800d2e8:	f3bf 8f6f 	isb	sy
 800d2ec:	f3bf 8f4f 	dsb	sy
 800d2f0:	60fb      	str	r3, [r7, #12]
}
 800d2f2:	bf00      	nop
 800d2f4:	e7fe      	b.n	800d2f4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d2f6:	69bb      	ldr	r3, [r7, #24]
 800d2f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2fa:	683a      	ldr	r2, [r7, #0]
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d902      	bls.n	800d306 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	61fb      	str	r3, [r7, #28]
 800d304:	e002      	b.n	800d30c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d306:	69bb      	ldr	r3, [r7, #24]
 800d308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d30a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d30c:	69bb      	ldr	r3, [r7, #24]
 800d30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d310:	69fa      	ldr	r2, [r7, #28]
 800d312:	429a      	cmp	r2, r3
 800d314:	d04b      	beq.n	800d3ae <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d316:	69bb      	ldr	r3, [r7, #24]
 800d318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d31a:	697a      	ldr	r2, [r7, #20]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d146      	bne.n	800d3ae <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d320:	4b25      	ldr	r3, [pc, #148]	; (800d3b8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	69ba      	ldr	r2, [r7, #24]
 800d326:	429a      	cmp	r2, r3
 800d328:	d10a      	bne.n	800d340 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d32e:	f383 8811 	msr	BASEPRI, r3
 800d332:	f3bf 8f6f 	isb	sy
 800d336:	f3bf 8f4f 	dsb	sy
 800d33a:	60bb      	str	r3, [r7, #8]
}
 800d33c:	bf00      	nop
 800d33e:	e7fe      	b.n	800d33e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d340:	69bb      	ldr	r3, [r7, #24]
 800d342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d344:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d346:	69bb      	ldr	r3, [r7, #24]
 800d348:	69fa      	ldr	r2, [r7, #28]
 800d34a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d34c:	69bb      	ldr	r3, [r7, #24]
 800d34e:	699b      	ldr	r3, [r3, #24]
 800d350:	2b00      	cmp	r3, #0
 800d352:	db04      	blt.n	800d35e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d354:	69fb      	ldr	r3, [r7, #28]
 800d356:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d35a:	69bb      	ldr	r3, [r7, #24]
 800d35c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d35e:	69bb      	ldr	r3, [r7, #24]
 800d360:	6959      	ldr	r1, [r3, #20]
 800d362:	693a      	ldr	r2, [r7, #16]
 800d364:	4613      	mov	r3, r2
 800d366:	009b      	lsls	r3, r3, #2
 800d368:	4413      	add	r3, r2
 800d36a:	009b      	lsls	r3, r3, #2
 800d36c:	4a13      	ldr	r2, [pc, #76]	; (800d3bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d36e:	4413      	add	r3, r2
 800d370:	4299      	cmp	r1, r3
 800d372:	d11c      	bne.n	800d3ae <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d374:	69bb      	ldr	r3, [r7, #24]
 800d376:	3304      	adds	r3, #4
 800d378:	4618      	mov	r0, r3
 800d37a:	f7fe f9cb 	bl	800b714 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d37e:	69bb      	ldr	r3, [r7, #24]
 800d380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d382:	4b0f      	ldr	r3, [pc, #60]	; (800d3c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	429a      	cmp	r2, r3
 800d388:	d903      	bls.n	800d392 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d38a:	69bb      	ldr	r3, [r7, #24]
 800d38c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d38e:	4a0c      	ldr	r2, [pc, #48]	; (800d3c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d390:	6013      	str	r3, [r2, #0]
 800d392:	69bb      	ldr	r3, [r7, #24]
 800d394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d396:	4613      	mov	r3, r2
 800d398:	009b      	lsls	r3, r3, #2
 800d39a:	4413      	add	r3, r2
 800d39c:	009b      	lsls	r3, r3, #2
 800d39e:	4a07      	ldr	r2, [pc, #28]	; (800d3bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d3a0:	441a      	add	r2, r3
 800d3a2:	69bb      	ldr	r3, [r7, #24]
 800d3a4:	3304      	adds	r3, #4
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	4610      	mov	r0, r2
 800d3aa:	f7fe f956 	bl	800b65a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d3ae:	bf00      	nop
 800d3b0:	3720      	adds	r7, #32
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	bf00      	nop
 800d3b8:	2000582c 	.word	0x2000582c
 800d3bc:	20005830 	.word	0x20005830
 800d3c0:	20005d08 	.word	0x20005d08

0800d3c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d3c4:	b480      	push	{r7}
 800d3c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d3c8:	4b07      	ldr	r3, [pc, #28]	; (800d3e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d004      	beq.n	800d3da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d3d0:	4b05      	ldr	r3, [pc, #20]	; (800d3e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d3d6:	3201      	adds	r2, #1
 800d3d8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d3da:	4b03      	ldr	r3, [pc, #12]	; (800d3e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
	}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr
 800d3e8:	2000582c 	.word	0x2000582c

0800d3ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d3f6:	4b21      	ldr	r3, [pc, #132]	; (800d47c <prvAddCurrentTaskToDelayedList+0x90>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3fc:	4b20      	ldr	r3, [pc, #128]	; (800d480 <prvAddCurrentTaskToDelayedList+0x94>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	3304      	adds	r3, #4
 800d402:	4618      	mov	r0, r3
 800d404:	f7fe f986 	bl	800b714 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d40e:	d10a      	bne.n	800d426 <prvAddCurrentTaskToDelayedList+0x3a>
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d007      	beq.n	800d426 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d416:	4b1a      	ldr	r3, [pc, #104]	; (800d480 <prvAddCurrentTaskToDelayedList+0x94>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	3304      	adds	r3, #4
 800d41c:	4619      	mov	r1, r3
 800d41e:	4819      	ldr	r0, [pc, #100]	; (800d484 <prvAddCurrentTaskToDelayedList+0x98>)
 800d420:	f7fe f91b 	bl	800b65a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d424:	e026      	b.n	800d474 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d426:	68fa      	ldr	r2, [r7, #12]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	4413      	add	r3, r2
 800d42c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d42e:	4b14      	ldr	r3, [pc, #80]	; (800d480 <prvAddCurrentTaskToDelayedList+0x94>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	68ba      	ldr	r2, [r7, #8]
 800d434:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d436:	68ba      	ldr	r2, [r7, #8]
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	429a      	cmp	r2, r3
 800d43c:	d209      	bcs.n	800d452 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d43e:	4b12      	ldr	r3, [pc, #72]	; (800d488 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d440:	681a      	ldr	r2, [r3, #0]
 800d442:	4b0f      	ldr	r3, [pc, #60]	; (800d480 <prvAddCurrentTaskToDelayedList+0x94>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	3304      	adds	r3, #4
 800d448:	4619      	mov	r1, r3
 800d44a:	4610      	mov	r0, r2
 800d44c:	f7fe f929 	bl	800b6a2 <vListInsert>
}
 800d450:	e010      	b.n	800d474 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d452:	4b0e      	ldr	r3, [pc, #56]	; (800d48c <prvAddCurrentTaskToDelayedList+0xa0>)
 800d454:	681a      	ldr	r2, [r3, #0]
 800d456:	4b0a      	ldr	r3, [pc, #40]	; (800d480 <prvAddCurrentTaskToDelayedList+0x94>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	3304      	adds	r3, #4
 800d45c:	4619      	mov	r1, r3
 800d45e:	4610      	mov	r0, r2
 800d460:	f7fe f91f 	bl	800b6a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d464:	4b0a      	ldr	r3, [pc, #40]	; (800d490 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	68ba      	ldr	r2, [r7, #8]
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d202      	bcs.n	800d474 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d46e:	4a08      	ldr	r2, [pc, #32]	; (800d490 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	6013      	str	r3, [r2, #0]
}
 800d474:	bf00      	nop
 800d476:	3710      	adds	r7, #16
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}
 800d47c:	20005d04 	.word	0x20005d04
 800d480:	2000582c 	.word	0x2000582c
 800d484:	20005cec 	.word	0x20005cec
 800d488:	20005cbc 	.word	0x20005cbc
 800d48c:	20005cb8 	.word	0x20005cb8
 800d490:	20005d20 	.word	0x20005d20

0800d494 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b08a      	sub	sp, #40	; 0x28
 800d498:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d49a:	2300      	movs	r3, #0
 800d49c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d49e:	f000 fb07 	bl	800dab0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d4a2:	4b1c      	ldr	r3, [pc, #112]	; (800d514 <xTimerCreateTimerTask+0x80>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d021      	beq.n	800d4ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d4b2:	1d3a      	adds	r2, r7, #4
 800d4b4:	f107 0108 	add.w	r1, r7, #8
 800d4b8:	f107 030c 	add.w	r3, r7, #12
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f7fe f885 	bl	800b5cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d4c2:	6879      	ldr	r1, [r7, #4]
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	68fa      	ldr	r2, [r7, #12]
 800d4c8:	9202      	str	r2, [sp, #8]
 800d4ca:	9301      	str	r3, [sp, #4]
 800d4cc:	2302      	movs	r3, #2
 800d4ce:	9300      	str	r3, [sp, #0]
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	460a      	mov	r2, r1
 800d4d4:	4910      	ldr	r1, [pc, #64]	; (800d518 <xTimerCreateTimerTask+0x84>)
 800d4d6:	4811      	ldr	r0, [pc, #68]	; (800d51c <xTimerCreateTimerTask+0x88>)
 800d4d8:	f7fe ff90 	bl	800c3fc <xTaskCreateStatic>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	4a10      	ldr	r2, [pc, #64]	; (800d520 <xTimerCreateTimerTask+0x8c>)
 800d4e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d4e2:	4b0f      	ldr	r3, [pc, #60]	; (800d520 <xTimerCreateTimerTask+0x8c>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d001      	beq.n	800d4ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d10a      	bne.n	800d50a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f8:	f383 8811 	msr	BASEPRI, r3
 800d4fc:	f3bf 8f6f 	isb	sy
 800d500:	f3bf 8f4f 	dsb	sy
 800d504:	613b      	str	r3, [r7, #16]
}
 800d506:	bf00      	nop
 800d508:	e7fe      	b.n	800d508 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d50a:	697b      	ldr	r3, [r7, #20]
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3718      	adds	r7, #24
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}
 800d514:	20005d5c 	.word	0x20005d5c
 800d518:	08019088 	.word	0x08019088
 800d51c:	0800d659 	.word	0x0800d659
 800d520:	20005d60 	.word	0x20005d60

0800d524 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b08a      	sub	sp, #40	; 0x28
 800d528:	af00      	add	r7, sp, #0
 800d52a:	60f8      	str	r0, [r7, #12]
 800d52c:	60b9      	str	r1, [r7, #8]
 800d52e:	607a      	str	r2, [r7, #4]
 800d530:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d532:	2300      	movs	r3, #0
 800d534:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d10a      	bne.n	800d552 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d540:	f383 8811 	msr	BASEPRI, r3
 800d544:	f3bf 8f6f 	isb	sy
 800d548:	f3bf 8f4f 	dsb	sy
 800d54c:	623b      	str	r3, [r7, #32]
}
 800d54e:	bf00      	nop
 800d550:	e7fe      	b.n	800d550 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d552:	4b1a      	ldr	r3, [pc, #104]	; (800d5bc <xTimerGenericCommand+0x98>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d02a      	beq.n	800d5b0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	2b05      	cmp	r3, #5
 800d56a:	dc18      	bgt.n	800d59e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d56c:	f7ff fdb4 	bl	800d0d8 <xTaskGetSchedulerState>
 800d570:	4603      	mov	r3, r0
 800d572:	2b02      	cmp	r3, #2
 800d574:	d109      	bne.n	800d58a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d576:	4b11      	ldr	r3, [pc, #68]	; (800d5bc <xTimerGenericCommand+0x98>)
 800d578:	6818      	ldr	r0, [r3, #0]
 800d57a:	f107 0110 	add.w	r1, r7, #16
 800d57e:	2300      	movs	r3, #0
 800d580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d582:	f7fe fa2f 	bl	800b9e4 <xQueueGenericSend>
 800d586:	6278      	str	r0, [r7, #36]	; 0x24
 800d588:	e012      	b.n	800d5b0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d58a:	4b0c      	ldr	r3, [pc, #48]	; (800d5bc <xTimerGenericCommand+0x98>)
 800d58c:	6818      	ldr	r0, [r3, #0]
 800d58e:	f107 0110 	add.w	r1, r7, #16
 800d592:	2300      	movs	r3, #0
 800d594:	2200      	movs	r2, #0
 800d596:	f7fe fa25 	bl	800b9e4 <xQueueGenericSend>
 800d59a:	6278      	str	r0, [r7, #36]	; 0x24
 800d59c:	e008      	b.n	800d5b0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d59e:	4b07      	ldr	r3, [pc, #28]	; (800d5bc <xTimerGenericCommand+0x98>)
 800d5a0:	6818      	ldr	r0, [r3, #0]
 800d5a2:	f107 0110 	add.w	r1, r7, #16
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	683a      	ldr	r2, [r7, #0]
 800d5aa:	f7fe fb19 	bl	800bbe0 <xQueueGenericSendFromISR>
 800d5ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3728      	adds	r7, #40	; 0x28
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}
 800d5ba:	bf00      	nop
 800d5bc:	20005d5c 	.word	0x20005d5c

0800d5c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b088      	sub	sp, #32
 800d5c4:	af02      	add	r7, sp, #8
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5ca:	4b22      	ldr	r3, [pc, #136]	; (800d654 <prvProcessExpiredTimer+0x94>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	68db      	ldr	r3, [r3, #12]
 800d5d0:	68db      	ldr	r3, [r3, #12]
 800d5d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	3304      	adds	r3, #4
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7fe f89b 	bl	800b714 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d5de:	697b      	ldr	r3, [r7, #20]
 800d5e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d5e4:	f003 0304 	and.w	r3, r3, #4
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d022      	beq.n	800d632 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	699a      	ldr	r2, [r3, #24]
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	18d1      	adds	r1, r2, r3
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	683a      	ldr	r2, [r7, #0]
 800d5f8:	6978      	ldr	r0, [r7, #20]
 800d5fa:	f000 f8d1 	bl	800d7a0 <prvInsertTimerInActiveList>
 800d5fe:	4603      	mov	r3, r0
 800d600:	2b00      	cmp	r3, #0
 800d602:	d01f      	beq.n	800d644 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d604:	2300      	movs	r3, #0
 800d606:	9300      	str	r3, [sp, #0]
 800d608:	2300      	movs	r3, #0
 800d60a:	687a      	ldr	r2, [r7, #4]
 800d60c:	2100      	movs	r1, #0
 800d60e:	6978      	ldr	r0, [r7, #20]
 800d610:	f7ff ff88 	bl	800d524 <xTimerGenericCommand>
 800d614:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d616:	693b      	ldr	r3, [r7, #16]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d113      	bne.n	800d644 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d620:	f383 8811 	msr	BASEPRI, r3
 800d624:	f3bf 8f6f 	isb	sy
 800d628:	f3bf 8f4f 	dsb	sy
 800d62c:	60fb      	str	r3, [r7, #12]
}
 800d62e:	bf00      	nop
 800d630:	e7fe      	b.n	800d630 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d638:	f023 0301 	bic.w	r3, r3, #1
 800d63c:	b2da      	uxtb	r2, r3
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	6a1b      	ldr	r3, [r3, #32]
 800d648:	6978      	ldr	r0, [r7, #20]
 800d64a:	4798      	blx	r3
}
 800d64c:	bf00      	nop
 800d64e:	3718      	adds	r7, #24
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}
 800d654:	20005d54 	.word	0x20005d54

0800d658 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b084      	sub	sp, #16
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d660:	f107 0308 	add.w	r3, r7, #8
 800d664:	4618      	mov	r0, r3
 800d666:	f000 f857 	bl	800d718 <prvGetNextExpireTime>
 800d66a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	4619      	mov	r1, r3
 800d670:	68f8      	ldr	r0, [r7, #12]
 800d672:	f000 f803 	bl	800d67c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d676:	f000 f8d5 	bl	800d824 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d67a:	e7f1      	b.n	800d660 <prvTimerTask+0x8>

0800d67c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b084      	sub	sp, #16
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d686:	f7ff f915 	bl	800c8b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d68a:	f107 0308 	add.w	r3, r7, #8
 800d68e:	4618      	mov	r0, r3
 800d690:	f000 f866 	bl	800d760 <prvSampleTimeNow>
 800d694:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d130      	bne.n	800d6fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d10a      	bne.n	800d6b8 <prvProcessTimerOrBlockTask+0x3c>
 800d6a2:	687a      	ldr	r2, [r7, #4]
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	d806      	bhi.n	800d6b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d6aa:	f7ff f911 	bl	800c8d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d6ae:	68f9      	ldr	r1, [r7, #12]
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f7ff ff85 	bl	800d5c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d6b6:	e024      	b.n	800d702 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d008      	beq.n	800d6d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d6be:	4b13      	ldr	r3, [pc, #76]	; (800d70c <prvProcessTimerOrBlockTask+0x90>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d101      	bne.n	800d6cc <prvProcessTimerOrBlockTask+0x50>
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	e000      	b.n	800d6ce <prvProcessTimerOrBlockTask+0x52>
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d6d0:	4b0f      	ldr	r3, [pc, #60]	; (800d710 <prvProcessTimerOrBlockTask+0x94>)
 800d6d2:	6818      	ldr	r0, [r3, #0]
 800d6d4:	687a      	ldr	r2, [r7, #4]
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	1ad3      	subs	r3, r2, r3
 800d6da:	683a      	ldr	r2, [r7, #0]
 800d6dc:	4619      	mov	r1, r3
 800d6de:	f7fe fe59 	bl	800c394 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d6e2:	f7ff f8f5 	bl	800c8d0 <xTaskResumeAll>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d10a      	bne.n	800d702 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d6ec:	4b09      	ldr	r3, [pc, #36]	; (800d714 <prvProcessTimerOrBlockTask+0x98>)
 800d6ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6f2:	601a      	str	r2, [r3, #0]
 800d6f4:	f3bf 8f4f 	dsb	sy
 800d6f8:	f3bf 8f6f 	isb	sy
}
 800d6fc:	e001      	b.n	800d702 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d6fe:	f7ff f8e7 	bl	800c8d0 <xTaskResumeAll>
}
 800d702:	bf00      	nop
 800d704:	3710      	adds	r7, #16
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}
 800d70a:	bf00      	nop
 800d70c:	20005d58 	.word	0x20005d58
 800d710:	20005d5c 	.word	0x20005d5c
 800d714:	e000ed04 	.word	0xe000ed04

0800d718 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d718:	b480      	push	{r7}
 800d71a:	b085      	sub	sp, #20
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d720:	4b0e      	ldr	r3, [pc, #56]	; (800d75c <prvGetNextExpireTime+0x44>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d101      	bne.n	800d72e <prvGetNextExpireTime+0x16>
 800d72a:	2201      	movs	r2, #1
 800d72c:	e000      	b.n	800d730 <prvGetNextExpireTime+0x18>
 800d72e:	2200      	movs	r2, #0
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d105      	bne.n	800d748 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d73c:	4b07      	ldr	r3, [pc, #28]	; (800d75c <prvGetNextExpireTime+0x44>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	68db      	ldr	r3, [r3, #12]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	60fb      	str	r3, [r7, #12]
 800d746:	e001      	b.n	800d74c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d748:	2300      	movs	r3, #0
 800d74a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d74c:	68fb      	ldr	r3, [r7, #12]
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3714      	adds	r7, #20
 800d752:	46bd      	mov	sp, r7
 800d754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d758:	4770      	bx	lr
 800d75a:	bf00      	nop
 800d75c:	20005d54 	.word	0x20005d54

0800d760 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b084      	sub	sp, #16
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d768:	f7ff f950 	bl	800ca0c <xTaskGetTickCount>
 800d76c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d76e:	4b0b      	ldr	r3, [pc, #44]	; (800d79c <prvSampleTimeNow+0x3c>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	68fa      	ldr	r2, [r7, #12]
 800d774:	429a      	cmp	r2, r3
 800d776:	d205      	bcs.n	800d784 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d778:	f000 f936 	bl	800d9e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2201      	movs	r2, #1
 800d780:	601a      	str	r2, [r3, #0]
 800d782:	e002      	b.n	800d78a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2200      	movs	r2, #0
 800d788:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d78a:	4a04      	ldr	r2, [pc, #16]	; (800d79c <prvSampleTimeNow+0x3c>)
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d790:	68fb      	ldr	r3, [r7, #12]
}
 800d792:	4618      	mov	r0, r3
 800d794:	3710      	adds	r7, #16
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}
 800d79a:	bf00      	nop
 800d79c:	20005d64 	.word	0x20005d64

0800d7a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b086      	sub	sp, #24
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	60f8      	str	r0, [r7, #12]
 800d7a8:	60b9      	str	r1, [r7, #8]
 800d7aa:	607a      	str	r2, [r7, #4]
 800d7ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	68ba      	ldr	r2, [r7, #8]
 800d7b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	68fa      	ldr	r2, [r7, #12]
 800d7bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d7be:	68ba      	ldr	r2, [r7, #8]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	d812      	bhi.n	800d7ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7c6:	687a      	ldr	r2, [r7, #4]
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	1ad2      	subs	r2, r2, r3
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	699b      	ldr	r3, [r3, #24]
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d302      	bcc.n	800d7da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d7d4:	2301      	movs	r3, #1
 800d7d6:	617b      	str	r3, [r7, #20]
 800d7d8:	e01b      	b.n	800d812 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d7da:	4b10      	ldr	r3, [pc, #64]	; (800d81c <prvInsertTimerInActiveList+0x7c>)
 800d7dc:	681a      	ldr	r2, [r3, #0]
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	3304      	adds	r3, #4
 800d7e2:	4619      	mov	r1, r3
 800d7e4:	4610      	mov	r0, r2
 800d7e6:	f7fd ff5c 	bl	800b6a2 <vListInsert>
 800d7ea:	e012      	b.n	800d812 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d7ec:	687a      	ldr	r2, [r7, #4]
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	429a      	cmp	r2, r3
 800d7f2:	d206      	bcs.n	800d802 <prvInsertTimerInActiveList+0x62>
 800d7f4:	68ba      	ldr	r2, [r7, #8]
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	d302      	bcc.n	800d802 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	617b      	str	r3, [r7, #20]
 800d800:	e007      	b.n	800d812 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d802:	4b07      	ldr	r3, [pc, #28]	; (800d820 <prvInsertTimerInActiveList+0x80>)
 800d804:	681a      	ldr	r2, [r3, #0]
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	3304      	adds	r3, #4
 800d80a:	4619      	mov	r1, r3
 800d80c:	4610      	mov	r0, r2
 800d80e:	f7fd ff48 	bl	800b6a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d812:	697b      	ldr	r3, [r7, #20]
}
 800d814:	4618      	mov	r0, r3
 800d816:	3718      	adds	r7, #24
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}
 800d81c:	20005d58 	.word	0x20005d58
 800d820:	20005d54 	.word	0x20005d54

0800d824 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b08e      	sub	sp, #56	; 0x38
 800d828:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d82a:	e0ca      	b.n	800d9c2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	da18      	bge.n	800d864 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d832:	1d3b      	adds	r3, r7, #4
 800d834:	3304      	adds	r3, #4
 800d836:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d10a      	bne.n	800d854 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d842:	f383 8811 	msr	BASEPRI, r3
 800d846:	f3bf 8f6f 	isb	sy
 800d84a:	f3bf 8f4f 	dsb	sy
 800d84e:	61fb      	str	r3, [r7, #28]
}
 800d850:	bf00      	nop
 800d852:	e7fe      	b.n	800d852 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d85a:	6850      	ldr	r0, [r2, #4]
 800d85c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d85e:	6892      	ldr	r2, [r2, #8]
 800d860:	4611      	mov	r1, r2
 800d862:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2b00      	cmp	r3, #0
 800d868:	f2c0 80ab 	blt.w	800d9c2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d872:	695b      	ldr	r3, [r3, #20]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d004      	beq.n	800d882 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d87a:	3304      	adds	r3, #4
 800d87c:	4618      	mov	r0, r3
 800d87e:	f7fd ff49 	bl	800b714 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d882:	463b      	mov	r3, r7
 800d884:	4618      	mov	r0, r3
 800d886:	f7ff ff6b 	bl	800d760 <prvSampleTimeNow>
 800d88a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2b09      	cmp	r3, #9
 800d890:	f200 8096 	bhi.w	800d9c0 <prvProcessReceivedCommands+0x19c>
 800d894:	a201      	add	r2, pc, #4	; (adr r2, 800d89c <prvProcessReceivedCommands+0x78>)
 800d896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d89a:	bf00      	nop
 800d89c:	0800d8c5 	.word	0x0800d8c5
 800d8a0:	0800d8c5 	.word	0x0800d8c5
 800d8a4:	0800d8c5 	.word	0x0800d8c5
 800d8a8:	0800d939 	.word	0x0800d939
 800d8ac:	0800d94d 	.word	0x0800d94d
 800d8b0:	0800d997 	.word	0x0800d997
 800d8b4:	0800d8c5 	.word	0x0800d8c5
 800d8b8:	0800d8c5 	.word	0x0800d8c5
 800d8bc:	0800d939 	.word	0x0800d939
 800d8c0:	0800d94d 	.word	0x0800d94d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8ca:	f043 0301 	orr.w	r3, r3, #1
 800d8ce:	b2da      	uxtb	r2, r3
 800d8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d8d6:	68ba      	ldr	r2, [r7, #8]
 800d8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8da:	699b      	ldr	r3, [r3, #24]
 800d8dc:	18d1      	adds	r1, r2, r3
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8e4:	f7ff ff5c 	bl	800d7a0 <prvInsertTimerInActiveList>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d069      	beq.n	800d9c2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f0:	6a1b      	ldr	r3, [r3, #32]
 800d8f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8fc:	f003 0304 	and.w	r3, r3, #4
 800d900:	2b00      	cmp	r3, #0
 800d902:	d05e      	beq.n	800d9c2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d904:	68ba      	ldr	r2, [r7, #8]
 800d906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d908:	699b      	ldr	r3, [r3, #24]
 800d90a:	441a      	add	r2, r3
 800d90c:	2300      	movs	r3, #0
 800d90e:	9300      	str	r3, [sp, #0]
 800d910:	2300      	movs	r3, #0
 800d912:	2100      	movs	r1, #0
 800d914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d916:	f7ff fe05 	bl	800d524 <xTimerGenericCommand>
 800d91a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d91c:	6a3b      	ldr	r3, [r7, #32]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d14f      	bne.n	800d9c2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d926:	f383 8811 	msr	BASEPRI, r3
 800d92a:	f3bf 8f6f 	isb	sy
 800d92e:	f3bf 8f4f 	dsb	sy
 800d932:	61bb      	str	r3, [r7, #24]
}
 800d934:	bf00      	nop
 800d936:	e7fe      	b.n	800d936 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d93a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d93e:	f023 0301 	bic.w	r3, r3, #1
 800d942:	b2da      	uxtb	r2, r3
 800d944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d946:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d94a:	e03a      	b.n	800d9c2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d94e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d952:	f043 0301 	orr.w	r3, r3, #1
 800d956:	b2da      	uxtb	r2, r3
 800d958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d95a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d95e:	68ba      	ldr	r2, [r7, #8]
 800d960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d962:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d966:	699b      	ldr	r3, [r3, #24]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d10a      	bne.n	800d982 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d970:	f383 8811 	msr	BASEPRI, r3
 800d974:	f3bf 8f6f 	isb	sy
 800d978:	f3bf 8f4f 	dsb	sy
 800d97c:	617b      	str	r3, [r7, #20]
}
 800d97e:	bf00      	nop
 800d980:	e7fe      	b.n	800d980 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d984:	699a      	ldr	r2, [r3, #24]
 800d986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d988:	18d1      	adds	r1, r2, r3
 800d98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d98c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d98e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d990:	f7ff ff06 	bl	800d7a0 <prvInsertTimerInActiveList>
					break;
 800d994:	e015      	b.n	800d9c2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d99c:	f003 0302 	and.w	r3, r3, #2
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d103      	bne.n	800d9ac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d9a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9a6:	f000 fbdb 	bl	800e160 <vPortFree>
 800d9aa:	e00a      	b.n	800d9c2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9b2:	f023 0301 	bic.w	r3, r3, #1
 800d9b6:	b2da      	uxtb	r2, r3
 800d9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d9be:	e000      	b.n	800d9c2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800d9c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d9c2:	4b08      	ldr	r3, [pc, #32]	; (800d9e4 <prvProcessReceivedCommands+0x1c0>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	1d39      	adds	r1, r7, #4
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f7fe f9a4 	bl	800bd18 <xQueueReceive>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	f47f af2a 	bne.w	800d82c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d9d8:	bf00      	nop
 800d9da:	bf00      	nop
 800d9dc:	3730      	adds	r7, #48	; 0x30
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}
 800d9e2:	bf00      	nop
 800d9e4:	20005d5c 	.word	0x20005d5c

0800d9e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b088      	sub	sp, #32
 800d9ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d9ee:	e048      	b.n	800da82 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d9f0:	4b2d      	ldr	r3, [pc, #180]	; (800daa8 <prvSwitchTimerLists+0xc0>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	68db      	ldr	r3, [r3, #12]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9fa:	4b2b      	ldr	r3, [pc, #172]	; (800daa8 <prvSwitchTimerLists+0xc0>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	68db      	ldr	r3, [r3, #12]
 800da00:	68db      	ldr	r3, [r3, #12]
 800da02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	3304      	adds	r3, #4
 800da08:	4618      	mov	r0, r3
 800da0a:	f7fd fe83 	bl	800b714 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	6a1b      	ldr	r3, [r3, #32]
 800da12:	68f8      	ldr	r0, [r7, #12]
 800da14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da1c:	f003 0304 	and.w	r3, r3, #4
 800da20:	2b00      	cmp	r3, #0
 800da22:	d02e      	beq.n	800da82 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	699b      	ldr	r3, [r3, #24]
 800da28:	693a      	ldr	r2, [r7, #16]
 800da2a:	4413      	add	r3, r2
 800da2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800da2e:	68ba      	ldr	r2, [r7, #8]
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	429a      	cmp	r2, r3
 800da34:	d90e      	bls.n	800da54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	68ba      	ldr	r2, [r7, #8]
 800da3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	68fa      	ldr	r2, [r7, #12]
 800da40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800da42:	4b19      	ldr	r3, [pc, #100]	; (800daa8 <prvSwitchTimerLists+0xc0>)
 800da44:	681a      	ldr	r2, [r3, #0]
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	3304      	adds	r3, #4
 800da4a:	4619      	mov	r1, r3
 800da4c:	4610      	mov	r0, r2
 800da4e:	f7fd fe28 	bl	800b6a2 <vListInsert>
 800da52:	e016      	b.n	800da82 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800da54:	2300      	movs	r3, #0
 800da56:	9300      	str	r3, [sp, #0]
 800da58:	2300      	movs	r3, #0
 800da5a:	693a      	ldr	r2, [r7, #16]
 800da5c:	2100      	movs	r1, #0
 800da5e:	68f8      	ldr	r0, [r7, #12]
 800da60:	f7ff fd60 	bl	800d524 <xTimerGenericCommand>
 800da64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d10a      	bne.n	800da82 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800da6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da70:	f383 8811 	msr	BASEPRI, r3
 800da74:	f3bf 8f6f 	isb	sy
 800da78:	f3bf 8f4f 	dsb	sy
 800da7c:	603b      	str	r3, [r7, #0]
}
 800da7e:	bf00      	nop
 800da80:	e7fe      	b.n	800da80 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800da82:	4b09      	ldr	r3, [pc, #36]	; (800daa8 <prvSwitchTimerLists+0xc0>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d1b1      	bne.n	800d9f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800da8c:	4b06      	ldr	r3, [pc, #24]	; (800daa8 <prvSwitchTimerLists+0xc0>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800da92:	4b06      	ldr	r3, [pc, #24]	; (800daac <prvSwitchTimerLists+0xc4>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	4a04      	ldr	r2, [pc, #16]	; (800daa8 <prvSwitchTimerLists+0xc0>)
 800da98:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800da9a:	4a04      	ldr	r2, [pc, #16]	; (800daac <prvSwitchTimerLists+0xc4>)
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	6013      	str	r3, [r2, #0]
}
 800daa0:	bf00      	nop
 800daa2:	3718      	adds	r7, #24
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}
 800daa8:	20005d54 	.word	0x20005d54
 800daac:	20005d58 	.word	0x20005d58

0800dab0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dab6:	f000 f965 	bl	800dd84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800daba:	4b15      	ldr	r3, [pc, #84]	; (800db10 <prvCheckForValidListAndQueue+0x60>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d120      	bne.n	800db04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dac2:	4814      	ldr	r0, [pc, #80]	; (800db14 <prvCheckForValidListAndQueue+0x64>)
 800dac4:	f7fd fd9c 	bl	800b600 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dac8:	4813      	ldr	r0, [pc, #76]	; (800db18 <prvCheckForValidListAndQueue+0x68>)
 800daca:	f7fd fd99 	bl	800b600 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dace:	4b13      	ldr	r3, [pc, #76]	; (800db1c <prvCheckForValidListAndQueue+0x6c>)
 800dad0:	4a10      	ldr	r2, [pc, #64]	; (800db14 <prvCheckForValidListAndQueue+0x64>)
 800dad2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dad4:	4b12      	ldr	r3, [pc, #72]	; (800db20 <prvCheckForValidListAndQueue+0x70>)
 800dad6:	4a10      	ldr	r2, [pc, #64]	; (800db18 <prvCheckForValidListAndQueue+0x68>)
 800dad8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dada:	2300      	movs	r3, #0
 800dadc:	9300      	str	r3, [sp, #0]
 800dade:	4b11      	ldr	r3, [pc, #68]	; (800db24 <prvCheckForValidListAndQueue+0x74>)
 800dae0:	4a11      	ldr	r2, [pc, #68]	; (800db28 <prvCheckForValidListAndQueue+0x78>)
 800dae2:	2110      	movs	r1, #16
 800dae4:	200a      	movs	r0, #10
 800dae6:	f7fd fea7 	bl	800b838 <xQueueGenericCreateStatic>
 800daea:	4603      	mov	r3, r0
 800daec:	4a08      	ldr	r2, [pc, #32]	; (800db10 <prvCheckForValidListAndQueue+0x60>)
 800daee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800daf0:	4b07      	ldr	r3, [pc, #28]	; (800db10 <prvCheckForValidListAndQueue+0x60>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d005      	beq.n	800db04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800daf8:	4b05      	ldr	r3, [pc, #20]	; (800db10 <prvCheckForValidListAndQueue+0x60>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	490b      	ldr	r1, [pc, #44]	; (800db2c <prvCheckForValidListAndQueue+0x7c>)
 800dafe:	4618      	mov	r0, r3
 800db00:	f7fe fc1e 	bl	800c340 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800db04:	f000 f96e 	bl	800dde4 <vPortExitCritical>
}
 800db08:	bf00      	nop
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop
 800db10:	20005d5c 	.word	0x20005d5c
 800db14:	20005d2c 	.word	0x20005d2c
 800db18:	20005d40 	.word	0x20005d40
 800db1c:	20005d54 	.word	0x20005d54
 800db20:	20005d58 	.word	0x20005d58
 800db24:	20005e08 	.word	0x20005e08
 800db28:	20005d68 	.word	0x20005d68
 800db2c:	08019090 	.word	0x08019090

0800db30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800db30:	b480      	push	{r7}
 800db32:	b085      	sub	sp, #20
 800db34:	af00      	add	r7, sp, #0
 800db36:	60f8      	str	r0, [r7, #12]
 800db38:	60b9      	str	r1, [r7, #8]
 800db3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	3b04      	subs	r3, #4
 800db40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800db48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	3b04      	subs	r3, #4
 800db4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	f023 0201 	bic.w	r2, r3, #1
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	3b04      	subs	r3, #4
 800db5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800db60:	4a0c      	ldr	r2, [pc, #48]	; (800db94 <pxPortInitialiseStack+0x64>)
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	3b14      	subs	r3, #20
 800db6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800db6c:	687a      	ldr	r2, [r7, #4]
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	3b04      	subs	r3, #4
 800db76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	f06f 0202 	mvn.w	r2, #2
 800db7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	3b20      	subs	r3, #32
 800db84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800db86:	68fb      	ldr	r3, [r7, #12]
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3714      	adds	r7, #20
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr
 800db94:	0800db99 	.word	0x0800db99

0800db98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800db98:	b480      	push	{r7}
 800db9a:	b085      	sub	sp, #20
 800db9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800db9e:	2300      	movs	r3, #0
 800dba0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dba2:	4b12      	ldr	r3, [pc, #72]	; (800dbec <prvTaskExitError+0x54>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dbaa:	d00a      	beq.n	800dbc2 <prvTaskExitError+0x2a>
	__asm volatile
 800dbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb0:	f383 8811 	msr	BASEPRI, r3
 800dbb4:	f3bf 8f6f 	isb	sy
 800dbb8:	f3bf 8f4f 	dsb	sy
 800dbbc:	60fb      	str	r3, [r7, #12]
}
 800dbbe:	bf00      	nop
 800dbc0:	e7fe      	b.n	800dbc0 <prvTaskExitError+0x28>
	__asm volatile
 800dbc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc6:	f383 8811 	msr	BASEPRI, r3
 800dbca:	f3bf 8f6f 	isb	sy
 800dbce:	f3bf 8f4f 	dsb	sy
 800dbd2:	60bb      	str	r3, [r7, #8]
}
 800dbd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dbd6:	bf00      	nop
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d0fc      	beq.n	800dbd8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dbde:	bf00      	nop
 800dbe0:	bf00      	nop
 800dbe2:	3714      	adds	r7, #20
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbea:	4770      	bx	lr
 800dbec:	20000028 	.word	0x20000028

0800dbf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dbf0:	4b07      	ldr	r3, [pc, #28]	; (800dc10 <pxCurrentTCBConst2>)
 800dbf2:	6819      	ldr	r1, [r3, #0]
 800dbf4:	6808      	ldr	r0, [r1, #0]
 800dbf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbfa:	f380 8809 	msr	PSP, r0
 800dbfe:	f3bf 8f6f 	isb	sy
 800dc02:	f04f 0000 	mov.w	r0, #0
 800dc06:	f380 8811 	msr	BASEPRI, r0
 800dc0a:	4770      	bx	lr
 800dc0c:	f3af 8000 	nop.w

0800dc10 <pxCurrentTCBConst2>:
 800dc10:	2000582c 	.word	0x2000582c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dc14:	bf00      	nop
 800dc16:	bf00      	nop

0800dc18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dc18:	4808      	ldr	r0, [pc, #32]	; (800dc3c <prvPortStartFirstTask+0x24>)
 800dc1a:	6800      	ldr	r0, [r0, #0]
 800dc1c:	6800      	ldr	r0, [r0, #0]
 800dc1e:	f380 8808 	msr	MSP, r0
 800dc22:	f04f 0000 	mov.w	r0, #0
 800dc26:	f380 8814 	msr	CONTROL, r0
 800dc2a:	b662      	cpsie	i
 800dc2c:	b661      	cpsie	f
 800dc2e:	f3bf 8f4f 	dsb	sy
 800dc32:	f3bf 8f6f 	isb	sy
 800dc36:	df00      	svc	0
 800dc38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dc3a:	bf00      	nop
 800dc3c:	e000ed08 	.word	0xe000ed08

0800dc40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b086      	sub	sp, #24
 800dc44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dc46:	4b46      	ldr	r3, [pc, #280]	; (800dd60 <xPortStartScheduler+0x120>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	4a46      	ldr	r2, [pc, #280]	; (800dd64 <xPortStartScheduler+0x124>)
 800dc4c:	4293      	cmp	r3, r2
 800dc4e:	d10a      	bne.n	800dc66 <xPortStartScheduler+0x26>
	__asm volatile
 800dc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc54:	f383 8811 	msr	BASEPRI, r3
 800dc58:	f3bf 8f6f 	isb	sy
 800dc5c:	f3bf 8f4f 	dsb	sy
 800dc60:	613b      	str	r3, [r7, #16]
}
 800dc62:	bf00      	nop
 800dc64:	e7fe      	b.n	800dc64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dc66:	4b3e      	ldr	r3, [pc, #248]	; (800dd60 <xPortStartScheduler+0x120>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	4a3f      	ldr	r2, [pc, #252]	; (800dd68 <xPortStartScheduler+0x128>)
 800dc6c:	4293      	cmp	r3, r2
 800dc6e:	d10a      	bne.n	800dc86 <xPortStartScheduler+0x46>
	__asm volatile
 800dc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc74:	f383 8811 	msr	BASEPRI, r3
 800dc78:	f3bf 8f6f 	isb	sy
 800dc7c:	f3bf 8f4f 	dsb	sy
 800dc80:	60fb      	str	r3, [r7, #12]
}
 800dc82:	bf00      	nop
 800dc84:	e7fe      	b.n	800dc84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dc86:	4b39      	ldr	r3, [pc, #228]	; (800dd6c <xPortStartScheduler+0x12c>)
 800dc88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	b2db      	uxtb	r3, r3
 800dc90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	22ff      	movs	r2, #255	; 0xff
 800dc96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dc98:	697b      	ldr	r3, [r7, #20]
 800dc9a:	781b      	ldrb	r3, [r3, #0]
 800dc9c:	b2db      	uxtb	r3, r3
 800dc9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dca0:	78fb      	ldrb	r3, [r7, #3]
 800dca2:	b2db      	uxtb	r3, r3
 800dca4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dca8:	b2da      	uxtb	r2, r3
 800dcaa:	4b31      	ldr	r3, [pc, #196]	; (800dd70 <xPortStartScheduler+0x130>)
 800dcac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dcae:	4b31      	ldr	r3, [pc, #196]	; (800dd74 <xPortStartScheduler+0x134>)
 800dcb0:	2207      	movs	r2, #7
 800dcb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dcb4:	e009      	b.n	800dcca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800dcb6:	4b2f      	ldr	r3, [pc, #188]	; (800dd74 <xPortStartScheduler+0x134>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	3b01      	subs	r3, #1
 800dcbc:	4a2d      	ldr	r2, [pc, #180]	; (800dd74 <xPortStartScheduler+0x134>)
 800dcbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dcc0:	78fb      	ldrb	r3, [r7, #3]
 800dcc2:	b2db      	uxtb	r3, r3
 800dcc4:	005b      	lsls	r3, r3, #1
 800dcc6:	b2db      	uxtb	r3, r3
 800dcc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dcca:	78fb      	ldrb	r3, [r7, #3]
 800dccc:	b2db      	uxtb	r3, r3
 800dcce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcd2:	2b80      	cmp	r3, #128	; 0x80
 800dcd4:	d0ef      	beq.n	800dcb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dcd6:	4b27      	ldr	r3, [pc, #156]	; (800dd74 <xPortStartScheduler+0x134>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f1c3 0307 	rsb	r3, r3, #7
 800dcde:	2b04      	cmp	r3, #4
 800dce0:	d00a      	beq.n	800dcf8 <xPortStartScheduler+0xb8>
	__asm volatile
 800dce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce6:	f383 8811 	msr	BASEPRI, r3
 800dcea:	f3bf 8f6f 	isb	sy
 800dcee:	f3bf 8f4f 	dsb	sy
 800dcf2:	60bb      	str	r3, [r7, #8]
}
 800dcf4:	bf00      	nop
 800dcf6:	e7fe      	b.n	800dcf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dcf8:	4b1e      	ldr	r3, [pc, #120]	; (800dd74 <xPortStartScheduler+0x134>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	021b      	lsls	r3, r3, #8
 800dcfe:	4a1d      	ldr	r2, [pc, #116]	; (800dd74 <xPortStartScheduler+0x134>)
 800dd00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dd02:	4b1c      	ldr	r3, [pc, #112]	; (800dd74 <xPortStartScheduler+0x134>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dd0a:	4a1a      	ldr	r2, [pc, #104]	; (800dd74 <xPortStartScheduler+0x134>)
 800dd0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	b2da      	uxtb	r2, r3
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dd16:	4b18      	ldr	r3, [pc, #96]	; (800dd78 <xPortStartScheduler+0x138>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	4a17      	ldr	r2, [pc, #92]	; (800dd78 <xPortStartScheduler+0x138>)
 800dd1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dd20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dd22:	4b15      	ldr	r3, [pc, #84]	; (800dd78 <xPortStartScheduler+0x138>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	4a14      	ldr	r2, [pc, #80]	; (800dd78 <xPortStartScheduler+0x138>)
 800dd28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dd2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dd2e:	f000 f8dd 	bl	800deec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dd32:	4b12      	ldr	r3, [pc, #72]	; (800dd7c <xPortStartScheduler+0x13c>)
 800dd34:	2200      	movs	r2, #0
 800dd36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dd38:	f000 f8fc 	bl	800df34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dd3c:	4b10      	ldr	r3, [pc, #64]	; (800dd80 <xPortStartScheduler+0x140>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	4a0f      	ldr	r2, [pc, #60]	; (800dd80 <xPortStartScheduler+0x140>)
 800dd42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dd46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dd48:	f7ff ff66 	bl	800dc18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dd4c:	f7fe ff28 	bl	800cba0 <vTaskSwitchContext>
	prvTaskExitError();
 800dd50:	f7ff ff22 	bl	800db98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dd54:	2300      	movs	r3, #0
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	3718      	adds	r7, #24
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}
 800dd5e:	bf00      	nop
 800dd60:	e000ed00 	.word	0xe000ed00
 800dd64:	410fc271 	.word	0x410fc271
 800dd68:	410fc270 	.word	0x410fc270
 800dd6c:	e000e400 	.word	0xe000e400
 800dd70:	20005e58 	.word	0x20005e58
 800dd74:	20005e5c 	.word	0x20005e5c
 800dd78:	e000ed20 	.word	0xe000ed20
 800dd7c:	20000028 	.word	0x20000028
 800dd80:	e000ef34 	.word	0xe000ef34

0800dd84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dd84:	b480      	push	{r7}
 800dd86:	b083      	sub	sp, #12
 800dd88:	af00      	add	r7, sp, #0
	__asm volatile
 800dd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd8e:	f383 8811 	msr	BASEPRI, r3
 800dd92:	f3bf 8f6f 	isb	sy
 800dd96:	f3bf 8f4f 	dsb	sy
 800dd9a:	607b      	str	r3, [r7, #4]
}
 800dd9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dd9e:	4b0f      	ldr	r3, [pc, #60]	; (800dddc <vPortEnterCritical+0x58>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	3301      	adds	r3, #1
 800dda4:	4a0d      	ldr	r2, [pc, #52]	; (800dddc <vPortEnterCritical+0x58>)
 800dda6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dda8:	4b0c      	ldr	r3, [pc, #48]	; (800dddc <vPortEnterCritical+0x58>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	2b01      	cmp	r3, #1
 800ddae:	d10f      	bne.n	800ddd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ddb0:	4b0b      	ldr	r3, [pc, #44]	; (800dde0 <vPortEnterCritical+0x5c>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	b2db      	uxtb	r3, r3
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d00a      	beq.n	800ddd0 <vPortEnterCritical+0x4c>
	__asm volatile
 800ddba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddbe:	f383 8811 	msr	BASEPRI, r3
 800ddc2:	f3bf 8f6f 	isb	sy
 800ddc6:	f3bf 8f4f 	dsb	sy
 800ddca:	603b      	str	r3, [r7, #0]
}
 800ddcc:	bf00      	nop
 800ddce:	e7fe      	b.n	800ddce <vPortEnterCritical+0x4a>
	}
}
 800ddd0:	bf00      	nop
 800ddd2:	370c      	adds	r7, #12
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddda:	4770      	bx	lr
 800dddc:	20000028 	.word	0x20000028
 800dde0:	e000ed04 	.word	0xe000ed04

0800dde4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dde4:	b480      	push	{r7}
 800dde6:	b083      	sub	sp, #12
 800dde8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ddea:	4b12      	ldr	r3, [pc, #72]	; (800de34 <vPortExitCritical+0x50>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d10a      	bne.n	800de08 <vPortExitCritical+0x24>
	__asm volatile
 800ddf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf6:	f383 8811 	msr	BASEPRI, r3
 800ddfa:	f3bf 8f6f 	isb	sy
 800ddfe:	f3bf 8f4f 	dsb	sy
 800de02:	607b      	str	r3, [r7, #4]
}
 800de04:	bf00      	nop
 800de06:	e7fe      	b.n	800de06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800de08:	4b0a      	ldr	r3, [pc, #40]	; (800de34 <vPortExitCritical+0x50>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	3b01      	subs	r3, #1
 800de0e:	4a09      	ldr	r2, [pc, #36]	; (800de34 <vPortExitCritical+0x50>)
 800de10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800de12:	4b08      	ldr	r3, [pc, #32]	; (800de34 <vPortExitCritical+0x50>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d105      	bne.n	800de26 <vPortExitCritical+0x42>
 800de1a:	2300      	movs	r3, #0
 800de1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	f383 8811 	msr	BASEPRI, r3
}
 800de24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800de26:	bf00      	nop
 800de28:	370c      	adds	r7, #12
 800de2a:	46bd      	mov	sp, r7
 800de2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de30:	4770      	bx	lr
 800de32:	bf00      	nop
 800de34:	20000028 	.word	0x20000028
	...

0800de40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800de40:	f3ef 8009 	mrs	r0, PSP
 800de44:	f3bf 8f6f 	isb	sy
 800de48:	4b15      	ldr	r3, [pc, #84]	; (800dea0 <pxCurrentTCBConst>)
 800de4a:	681a      	ldr	r2, [r3, #0]
 800de4c:	f01e 0f10 	tst.w	lr, #16
 800de50:	bf08      	it	eq
 800de52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800de56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de5a:	6010      	str	r0, [r2, #0]
 800de5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800de60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800de64:	f380 8811 	msr	BASEPRI, r0
 800de68:	f3bf 8f4f 	dsb	sy
 800de6c:	f3bf 8f6f 	isb	sy
 800de70:	f7fe fe96 	bl	800cba0 <vTaskSwitchContext>
 800de74:	f04f 0000 	mov.w	r0, #0
 800de78:	f380 8811 	msr	BASEPRI, r0
 800de7c:	bc09      	pop	{r0, r3}
 800de7e:	6819      	ldr	r1, [r3, #0]
 800de80:	6808      	ldr	r0, [r1, #0]
 800de82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de86:	f01e 0f10 	tst.w	lr, #16
 800de8a:	bf08      	it	eq
 800de8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800de90:	f380 8809 	msr	PSP, r0
 800de94:	f3bf 8f6f 	isb	sy
 800de98:	4770      	bx	lr
 800de9a:	bf00      	nop
 800de9c:	f3af 8000 	nop.w

0800dea0 <pxCurrentTCBConst>:
 800dea0:	2000582c 	.word	0x2000582c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dea4:	bf00      	nop
 800dea6:	bf00      	nop

0800dea8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b082      	sub	sp, #8
 800deac:	af00      	add	r7, sp, #0
	__asm volatile
 800deae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deb2:	f383 8811 	msr	BASEPRI, r3
 800deb6:	f3bf 8f6f 	isb	sy
 800deba:	f3bf 8f4f 	dsb	sy
 800debe:	607b      	str	r3, [r7, #4]
}
 800dec0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dec2:	f7fe fdb3 	bl	800ca2c <xTaskIncrementTick>
 800dec6:	4603      	mov	r3, r0
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d003      	beq.n	800ded4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800decc:	4b06      	ldr	r3, [pc, #24]	; (800dee8 <xPortSysTickHandler+0x40>)
 800dece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ded2:	601a      	str	r2, [r3, #0]
 800ded4:	2300      	movs	r3, #0
 800ded6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	f383 8811 	msr	BASEPRI, r3
}
 800dede:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dee0:	bf00      	nop
 800dee2:	3708      	adds	r7, #8
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}
 800dee8:	e000ed04 	.word	0xe000ed04

0800deec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800deec:	b480      	push	{r7}
 800deee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800def0:	4b0b      	ldr	r3, [pc, #44]	; (800df20 <vPortSetupTimerInterrupt+0x34>)
 800def2:	2200      	movs	r2, #0
 800def4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800def6:	4b0b      	ldr	r3, [pc, #44]	; (800df24 <vPortSetupTimerInterrupt+0x38>)
 800def8:	2200      	movs	r2, #0
 800defa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800defc:	4b0a      	ldr	r3, [pc, #40]	; (800df28 <vPortSetupTimerInterrupt+0x3c>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	4a0a      	ldr	r2, [pc, #40]	; (800df2c <vPortSetupTimerInterrupt+0x40>)
 800df02:	fba2 2303 	umull	r2, r3, r2, r3
 800df06:	099b      	lsrs	r3, r3, #6
 800df08:	4a09      	ldr	r2, [pc, #36]	; (800df30 <vPortSetupTimerInterrupt+0x44>)
 800df0a:	3b01      	subs	r3, #1
 800df0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800df0e:	4b04      	ldr	r3, [pc, #16]	; (800df20 <vPortSetupTimerInterrupt+0x34>)
 800df10:	2207      	movs	r2, #7
 800df12:	601a      	str	r2, [r3, #0]
}
 800df14:	bf00      	nop
 800df16:	46bd      	mov	sp, r7
 800df18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1c:	4770      	bx	lr
 800df1e:	bf00      	nop
 800df20:	e000e010 	.word	0xe000e010
 800df24:	e000e018 	.word	0xe000e018
 800df28:	20000008 	.word	0x20000008
 800df2c:	10624dd3 	.word	0x10624dd3
 800df30:	e000e014 	.word	0xe000e014

0800df34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800df34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800df44 <vPortEnableVFP+0x10>
 800df38:	6801      	ldr	r1, [r0, #0]
 800df3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800df3e:	6001      	str	r1, [r0, #0]
 800df40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800df42:	bf00      	nop
 800df44:	e000ed88 	.word	0xe000ed88

0800df48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800df48:	b480      	push	{r7}
 800df4a:	b085      	sub	sp, #20
 800df4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800df4e:	f3ef 8305 	mrs	r3, IPSR
 800df52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	2b0f      	cmp	r3, #15
 800df58:	d914      	bls.n	800df84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800df5a:	4a17      	ldr	r2, [pc, #92]	; (800dfb8 <vPortValidateInterruptPriority+0x70>)
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	4413      	add	r3, r2
 800df60:	781b      	ldrb	r3, [r3, #0]
 800df62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800df64:	4b15      	ldr	r3, [pc, #84]	; (800dfbc <vPortValidateInterruptPriority+0x74>)
 800df66:	781b      	ldrb	r3, [r3, #0]
 800df68:	7afa      	ldrb	r2, [r7, #11]
 800df6a:	429a      	cmp	r2, r3
 800df6c:	d20a      	bcs.n	800df84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800df6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df72:	f383 8811 	msr	BASEPRI, r3
 800df76:	f3bf 8f6f 	isb	sy
 800df7a:	f3bf 8f4f 	dsb	sy
 800df7e:	607b      	str	r3, [r7, #4]
}
 800df80:	bf00      	nop
 800df82:	e7fe      	b.n	800df82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800df84:	4b0e      	ldr	r3, [pc, #56]	; (800dfc0 <vPortValidateInterruptPriority+0x78>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800df8c:	4b0d      	ldr	r3, [pc, #52]	; (800dfc4 <vPortValidateInterruptPriority+0x7c>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	429a      	cmp	r2, r3
 800df92:	d90a      	bls.n	800dfaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800df94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df98:	f383 8811 	msr	BASEPRI, r3
 800df9c:	f3bf 8f6f 	isb	sy
 800dfa0:	f3bf 8f4f 	dsb	sy
 800dfa4:	603b      	str	r3, [r7, #0]
}
 800dfa6:	bf00      	nop
 800dfa8:	e7fe      	b.n	800dfa8 <vPortValidateInterruptPriority+0x60>
	}
 800dfaa:	bf00      	nop
 800dfac:	3714      	adds	r7, #20
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb4:	4770      	bx	lr
 800dfb6:	bf00      	nop
 800dfb8:	e000e3f0 	.word	0xe000e3f0
 800dfbc:	20005e58 	.word	0x20005e58
 800dfc0:	e000ed0c 	.word	0xe000ed0c
 800dfc4:	20005e5c 	.word	0x20005e5c

0800dfc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b08a      	sub	sp, #40	; 0x28
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dfd4:	f7fe fc6e 	bl	800c8b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dfd8:	4b5b      	ldr	r3, [pc, #364]	; (800e148 <pvPortMalloc+0x180>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d101      	bne.n	800dfe4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dfe0:	f000 f920 	bl	800e224 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dfe4:	4b59      	ldr	r3, [pc, #356]	; (800e14c <pvPortMalloc+0x184>)
 800dfe6:	681a      	ldr	r2, [r3, #0]
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	4013      	ands	r3, r2
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	f040 8093 	bne.w	800e118 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d01d      	beq.n	800e034 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800dff8:	2208      	movs	r2, #8
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	4413      	add	r3, r2
 800dffe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f003 0307 	and.w	r3, r3, #7
 800e006:	2b00      	cmp	r3, #0
 800e008:	d014      	beq.n	800e034 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f023 0307 	bic.w	r3, r3, #7
 800e010:	3308      	adds	r3, #8
 800e012:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f003 0307 	and.w	r3, r3, #7
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d00a      	beq.n	800e034 <pvPortMalloc+0x6c>
	__asm volatile
 800e01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e022:	f383 8811 	msr	BASEPRI, r3
 800e026:	f3bf 8f6f 	isb	sy
 800e02a:	f3bf 8f4f 	dsb	sy
 800e02e:	617b      	str	r3, [r7, #20]
}
 800e030:	bf00      	nop
 800e032:	e7fe      	b.n	800e032 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d06e      	beq.n	800e118 <pvPortMalloc+0x150>
 800e03a:	4b45      	ldr	r3, [pc, #276]	; (800e150 <pvPortMalloc+0x188>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	687a      	ldr	r2, [r7, #4]
 800e040:	429a      	cmp	r2, r3
 800e042:	d869      	bhi.n	800e118 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e044:	4b43      	ldr	r3, [pc, #268]	; (800e154 <pvPortMalloc+0x18c>)
 800e046:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e048:	4b42      	ldr	r3, [pc, #264]	; (800e154 <pvPortMalloc+0x18c>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e04e:	e004      	b.n	800e05a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e052:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e05c:	685b      	ldr	r3, [r3, #4]
 800e05e:	687a      	ldr	r2, [r7, #4]
 800e060:	429a      	cmp	r2, r3
 800e062:	d903      	bls.n	800e06c <pvPortMalloc+0xa4>
 800e064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d1f1      	bne.n	800e050 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e06c:	4b36      	ldr	r3, [pc, #216]	; (800e148 <pvPortMalloc+0x180>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e072:	429a      	cmp	r2, r3
 800e074:	d050      	beq.n	800e118 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e076:	6a3b      	ldr	r3, [r7, #32]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	2208      	movs	r2, #8
 800e07c:	4413      	add	r3, r2
 800e07e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e082:	681a      	ldr	r2, [r3, #0]
 800e084:	6a3b      	ldr	r3, [r7, #32]
 800e086:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e08a:	685a      	ldr	r2, [r3, #4]
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	1ad2      	subs	r2, r2, r3
 800e090:	2308      	movs	r3, #8
 800e092:	005b      	lsls	r3, r3, #1
 800e094:	429a      	cmp	r2, r3
 800e096:	d91f      	bls.n	800e0d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	4413      	add	r3, r2
 800e09e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e0a0:	69bb      	ldr	r3, [r7, #24]
 800e0a2:	f003 0307 	and.w	r3, r3, #7
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d00a      	beq.n	800e0c0 <pvPortMalloc+0xf8>
	__asm volatile
 800e0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ae:	f383 8811 	msr	BASEPRI, r3
 800e0b2:	f3bf 8f6f 	isb	sy
 800e0b6:	f3bf 8f4f 	dsb	sy
 800e0ba:	613b      	str	r3, [r7, #16]
}
 800e0bc:	bf00      	nop
 800e0be:	e7fe      	b.n	800e0be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c2:	685a      	ldr	r2, [r3, #4]
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	1ad2      	subs	r2, r2, r3
 800e0c8:	69bb      	ldr	r3, [r7, #24]
 800e0ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ce:	687a      	ldr	r2, [r7, #4]
 800e0d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e0d2:	69b8      	ldr	r0, [r7, #24]
 800e0d4:	f000 f908 	bl	800e2e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e0d8:	4b1d      	ldr	r3, [pc, #116]	; (800e150 <pvPortMalloc+0x188>)
 800e0da:	681a      	ldr	r2, [r3, #0]
 800e0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0de:	685b      	ldr	r3, [r3, #4]
 800e0e0:	1ad3      	subs	r3, r2, r3
 800e0e2:	4a1b      	ldr	r2, [pc, #108]	; (800e150 <pvPortMalloc+0x188>)
 800e0e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e0e6:	4b1a      	ldr	r3, [pc, #104]	; (800e150 <pvPortMalloc+0x188>)
 800e0e8:	681a      	ldr	r2, [r3, #0]
 800e0ea:	4b1b      	ldr	r3, [pc, #108]	; (800e158 <pvPortMalloc+0x190>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	d203      	bcs.n	800e0fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e0f2:	4b17      	ldr	r3, [pc, #92]	; (800e150 <pvPortMalloc+0x188>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	4a18      	ldr	r2, [pc, #96]	; (800e158 <pvPortMalloc+0x190>)
 800e0f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fc:	685a      	ldr	r2, [r3, #4]
 800e0fe:	4b13      	ldr	r3, [pc, #76]	; (800e14c <pvPortMalloc+0x184>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	431a      	orrs	r2, r3
 800e104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e106:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e10a:	2200      	movs	r2, #0
 800e10c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e10e:	4b13      	ldr	r3, [pc, #76]	; (800e15c <pvPortMalloc+0x194>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	3301      	adds	r3, #1
 800e114:	4a11      	ldr	r2, [pc, #68]	; (800e15c <pvPortMalloc+0x194>)
 800e116:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e118:	f7fe fbda 	bl	800c8d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e11c:	69fb      	ldr	r3, [r7, #28]
 800e11e:	f003 0307 	and.w	r3, r3, #7
 800e122:	2b00      	cmp	r3, #0
 800e124:	d00a      	beq.n	800e13c <pvPortMalloc+0x174>
	__asm volatile
 800e126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e12a:	f383 8811 	msr	BASEPRI, r3
 800e12e:	f3bf 8f6f 	isb	sy
 800e132:	f3bf 8f4f 	dsb	sy
 800e136:	60fb      	str	r3, [r7, #12]
}
 800e138:	bf00      	nop
 800e13a:	e7fe      	b.n	800e13a <pvPortMalloc+0x172>
	return pvReturn;
 800e13c:	69fb      	ldr	r3, [r7, #28]
}
 800e13e:	4618      	mov	r0, r3
 800e140:	3728      	adds	r7, #40	; 0x28
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}
 800e146:	bf00      	nop
 800e148:	20009e68 	.word	0x20009e68
 800e14c:	20009e7c 	.word	0x20009e7c
 800e150:	20009e6c 	.word	0x20009e6c
 800e154:	20009e60 	.word	0x20009e60
 800e158:	20009e70 	.word	0x20009e70
 800e15c:	20009e74 	.word	0x20009e74

0800e160 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b086      	sub	sp, #24
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d04d      	beq.n	800e20e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e172:	2308      	movs	r3, #8
 800e174:	425b      	negs	r3, r3
 800e176:	697a      	ldr	r2, [r7, #20]
 800e178:	4413      	add	r3, r2
 800e17a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e180:	693b      	ldr	r3, [r7, #16]
 800e182:	685a      	ldr	r2, [r3, #4]
 800e184:	4b24      	ldr	r3, [pc, #144]	; (800e218 <vPortFree+0xb8>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	4013      	ands	r3, r2
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d10a      	bne.n	800e1a4 <vPortFree+0x44>
	__asm volatile
 800e18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e192:	f383 8811 	msr	BASEPRI, r3
 800e196:	f3bf 8f6f 	isb	sy
 800e19a:	f3bf 8f4f 	dsb	sy
 800e19e:	60fb      	str	r3, [r7, #12]
}
 800e1a0:	bf00      	nop
 800e1a2:	e7fe      	b.n	800e1a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e1a4:	693b      	ldr	r3, [r7, #16]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d00a      	beq.n	800e1c2 <vPortFree+0x62>
	__asm volatile
 800e1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b0:	f383 8811 	msr	BASEPRI, r3
 800e1b4:	f3bf 8f6f 	isb	sy
 800e1b8:	f3bf 8f4f 	dsb	sy
 800e1bc:	60bb      	str	r3, [r7, #8]
}
 800e1be:	bf00      	nop
 800e1c0:	e7fe      	b.n	800e1c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	685a      	ldr	r2, [r3, #4]
 800e1c6:	4b14      	ldr	r3, [pc, #80]	; (800e218 <vPortFree+0xb8>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	4013      	ands	r3, r2
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d01e      	beq.n	800e20e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e1d0:	693b      	ldr	r3, [r7, #16]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d11a      	bne.n	800e20e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	685a      	ldr	r2, [r3, #4]
 800e1dc:	4b0e      	ldr	r3, [pc, #56]	; (800e218 <vPortFree+0xb8>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	43db      	mvns	r3, r3
 800e1e2:	401a      	ands	r2, r3
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e1e8:	f7fe fb64 	bl	800c8b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e1ec:	693b      	ldr	r3, [r7, #16]
 800e1ee:	685a      	ldr	r2, [r3, #4]
 800e1f0:	4b0a      	ldr	r3, [pc, #40]	; (800e21c <vPortFree+0xbc>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4413      	add	r3, r2
 800e1f6:	4a09      	ldr	r2, [pc, #36]	; (800e21c <vPortFree+0xbc>)
 800e1f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e1fa:	6938      	ldr	r0, [r7, #16]
 800e1fc:	f000 f874 	bl	800e2e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e200:	4b07      	ldr	r3, [pc, #28]	; (800e220 <vPortFree+0xc0>)
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	3301      	adds	r3, #1
 800e206:	4a06      	ldr	r2, [pc, #24]	; (800e220 <vPortFree+0xc0>)
 800e208:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e20a:	f7fe fb61 	bl	800c8d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e20e:	bf00      	nop
 800e210:	3718      	adds	r7, #24
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}
 800e216:	bf00      	nop
 800e218:	20009e7c 	.word	0x20009e7c
 800e21c:	20009e6c 	.word	0x20009e6c
 800e220:	20009e78 	.word	0x20009e78

0800e224 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e224:	b480      	push	{r7}
 800e226:	b085      	sub	sp, #20
 800e228:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e22a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e22e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e230:	4b27      	ldr	r3, [pc, #156]	; (800e2d0 <prvHeapInit+0xac>)
 800e232:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	f003 0307 	and.w	r3, r3, #7
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d00c      	beq.n	800e258 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	3307      	adds	r3, #7
 800e242:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	f023 0307 	bic.w	r3, r3, #7
 800e24a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e24c:	68ba      	ldr	r2, [r7, #8]
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	1ad3      	subs	r3, r2, r3
 800e252:	4a1f      	ldr	r2, [pc, #124]	; (800e2d0 <prvHeapInit+0xac>)
 800e254:	4413      	add	r3, r2
 800e256:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e25c:	4a1d      	ldr	r2, [pc, #116]	; (800e2d4 <prvHeapInit+0xb0>)
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e262:	4b1c      	ldr	r3, [pc, #112]	; (800e2d4 <prvHeapInit+0xb0>)
 800e264:	2200      	movs	r2, #0
 800e266:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	68ba      	ldr	r2, [r7, #8]
 800e26c:	4413      	add	r3, r2
 800e26e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e270:	2208      	movs	r2, #8
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	1a9b      	subs	r3, r3, r2
 800e276:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	f023 0307 	bic.w	r3, r3, #7
 800e27e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	4a15      	ldr	r2, [pc, #84]	; (800e2d8 <prvHeapInit+0xb4>)
 800e284:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e286:	4b14      	ldr	r3, [pc, #80]	; (800e2d8 <prvHeapInit+0xb4>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	2200      	movs	r2, #0
 800e28c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e28e:	4b12      	ldr	r3, [pc, #72]	; (800e2d8 <prvHeapInit+0xb4>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	2200      	movs	r2, #0
 800e294:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	68fa      	ldr	r2, [r7, #12]
 800e29e:	1ad2      	subs	r2, r2, r3
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e2a4:	4b0c      	ldr	r3, [pc, #48]	; (800e2d8 <prvHeapInit+0xb4>)
 800e2a6:	681a      	ldr	r2, [r3, #0]
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	685b      	ldr	r3, [r3, #4]
 800e2b0:	4a0a      	ldr	r2, [pc, #40]	; (800e2dc <prvHeapInit+0xb8>)
 800e2b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	685b      	ldr	r3, [r3, #4]
 800e2b8:	4a09      	ldr	r2, [pc, #36]	; (800e2e0 <prvHeapInit+0xbc>)
 800e2ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e2bc:	4b09      	ldr	r3, [pc, #36]	; (800e2e4 <prvHeapInit+0xc0>)
 800e2be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e2c2:	601a      	str	r2, [r3, #0]
}
 800e2c4:	bf00      	nop
 800e2c6:	3714      	adds	r7, #20
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ce:	4770      	bx	lr
 800e2d0:	20005e60 	.word	0x20005e60
 800e2d4:	20009e60 	.word	0x20009e60
 800e2d8:	20009e68 	.word	0x20009e68
 800e2dc:	20009e70 	.word	0x20009e70
 800e2e0:	20009e6c 	.word	0x20009e6c
 800e2e4:	20009e7c 	.word	0x20009e7c

0800e2e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b085      	sub	sp, #20
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e2f0:	4b28      	ldr	r3, [pc, #160]	; (800e394 <prvInsertBlockIntoFreeList+0xac>)
 800e2f2:	60fb      	str	r3, [r7, #12]
 800e2f4:	e002      	b.n	800e2fc <prvInsertBlockIntoFreeList+0x14>
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	60fb      	str	r3, [r7, #12]
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	687a      	ldr	r2, [r7, #4]
 800e302:	429a      	cmp	r2, r3
 800e304:	d8f7      	bhi.n	800e2f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	685b      	ldr	r3, [r3, #4]
 800e30e:	68ba      	ldr	r2, [r7, #8]
 800e310:	4413      	add	r3, r2
 800e312:	687a      	ldr	r2, [r7, #4]
 800e314:	429a      	cmp	r2, r3
 800e316:	d108      	bne.n	800e32a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	685a      	ldr	r2, [r3, #4]
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	685b      	ldr	r3, [r3, #4]
 800e320:	441a      	add	r2, r3
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	685b      	ldr	r3, [r3, #4]
 800e332:	68ba      	ldr	r2, [r7, #8]
 800e334:	441a      	add	r2, r3
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	429a      	cmp	r2, r3
 800e33c:	d118      	bne.n	800e370 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	681a      	ldr	r2, [r3, #0]
 800e342:	4b15      	ldr	r3, [pc, #84]	; (800e398 <prvInsertBlockIntoFreeList+0xb0>)
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	429a      	cmp	r2, r3
 800e348:	d00d      	beq.n	800e366 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	685a      	ldr	r2, [r3, #4]
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	685b      	ldr	r3, [r3, #4]
 800e354:	441a      	add	r2, r3
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	681a      	ldr	r2, [r3, #0]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	601a      	str	r2, [r3, #0]
 800e364:	e008      	b.n	800e378 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e366:	4b0c      	ldr	r3, [pc, #48]	; (800e398 <prvInsertBlockIntoFreeList+0xb0>)
 800e368:	681a      	ldr	r2, [r3, #0]
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	601a      	str	r2, [r3, #0]
 800e36e:	e003      	b.n	800e378 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	681a      	ldr	r2, [r3, #0]
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e378:	68fa      	ldr	r2, [r7, #12]
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	429a      	cmp	r2, r3
 800e37e:	d002      	beq.n	800e386 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	687a      	ldr	r2, [r7, #4]
 800e384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e386:	bf00      	nop
 800e388:	3714      	adds	r7, #20
 800e38a:	46bd      	mov	sp, r7
 800e38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e390:	4770      	bx	lr
 800e392:	bf00      	nop
 800e394:	20009e60 	.word	0x20009e60
 800e398:	20009e68 	.word	0x20009e68

0800e39c <rcl_get_zero_initialized_publisher>:
 800e39c:	4b01      	ldr	r3, [pc, #4]	; (800e3a4 <rcl_get_zero_initialized_publisher+0x8>)
 800e39e:	6818      	ldr	r0, [r3, #0]
 800e3a0:	4770      	bx	lr
 800e3a2:	bf00      	nop
 800e3a4:	080190d4 	.word	0x080190d4

0800e3a8 <rcl_publisher_init>:
 800e3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3ac:	b091      	sub	sp, #68	; 0x44
 800e3ae:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800e3b0:	b3d7      	cbz	r7, 800e428 <rcl_publisher_init+0x80>
 800e3b2:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800e3b6:	4604      	mov	r4, r0
 800e3b8:	4648      	mov	r0, r9
 800e3ba:	4688      	mov	r8, r1
 800e3bc:	4616      	mov	r6, r2
 800e3be:	461d      	mov	r5, r3
 800e3c0:	f000 fb52 	bl	800ea68 <rcutils_allocator_is_valid>
 800e3c4:	b380      	cbz	r0, 800e428 <rcl_publisher_init+0x80>
 800e3c6:	b37c      	cbz	r4, 800e428 <rcl_publisher_init+0x80>
 800e3c8:	f8d4 a000 	ldr.w	sl, [r4]
 800e3cc:	f1ba 0f00 	cmp.w	sl, #0
 800e3d0:	d004      	beq.n	800e3dc <rcl_publisher_init+0x34>
 800e3d2:	2564      	movs	r5, #100	; 0x64
 800e3d4:	4628      	mov	r0, r5
 800e3d6:	b011      	add	sp, #68	; 0x44
 800e3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3dc:	4640      	mov	r0, r8
 800e3de:	f005 f937 	bl	8013650 <rcl_node_is_valid>
 800e3e2:	b330      	cbz	r0, 800e432 <rcl_publisher_init+0x8a>
 800e3e4:	b306      	cbz	r6, 800e428 <rcl_publisher_init+0x80>
 800e3e6:	b1fd      	cbz	r5, 800e428 <rcl_publisher_init+0x80>
 800e3e8:	46ce      	mov	lr, r9
 800e3ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e3ee:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800e3f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e3f6:	f8de 3000 	ldr.w	r3, [lr]
 800e3fa:	f8cc 3000 	str.w	r3, [ip]
 800e3fe:	f000 fb6f 	bl	800eae0 <rcutils_get_zero_initialized_string_map>
 800e402:	ab10      	add	r3, sp, #64	; 0x40
 800e404:	4684      	mov	ip, r0
 800e406:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800e40a:	f8cd c020 	str.w	ip, [sp, #32]
 800e40e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e412:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800e416:	4651      	mov	r1, sl
 800e418:	a808      	add	r0, sp, #32
 800e41a:	f000 fbdb 	bl	800ebd4 <rcutils_string_map_init>
 800e41e:	b150      	cbz	r0, 800e436 <rcl_publisher_init+0x8e>
 800e420:	280a      	cmp	r0, #10
 800e422:	d013      	beq.n	800e44c <rcl_publisher_init+0xa4>
 800e424:	2501      	movs	r5, #1
 800e426:	e7d5      	b.n	800e3d4 <rcl_publisher_init+0x2c>
 800e428:	250b      	movs	r5, #11
 800e42a:	4628      	mov	r0, r5
 800e42c:	b011      	add	sp, #68	; 0x44
 800e42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e432:	25c8      	movs	r5, #200	; 0xc8
 800e434:	e7ce      	b.n	800e3d4 <rcl_publisher_init+0x2c>
 800e436:	a808      	add	r0, sp, #32
 800e438:	f004 fd40 	bl	8012ebc <rcl_get_default_topic_name_substitutions>
 800e43c:	4682      	mov	sl, r0
 800e43e:	b138      	cbz	r0, 800e450 <rcl_publisher_init+0xa8>
 800e440:	a808      	add	r0, sp, #32
 800e442:	f000 fc07 	bl	800ec54 <rcutils_string_map_fini>
 800e446:	f1ba 0f0a 	cmp.w	sl, #10
 800e44a:	d1eb      	bne.n	800e424 <rcl_publisher_init+0x7c>
 800e44c:	250a      	movs	r5, #10
 800e44e:	e7c1      	b.n	800e3d4 <rcl_publisher_init+0x2c>
 800e450:	4640      	mov	r0, r8
 800e452:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e456:	f005 f905 	bl	8013664 <rcl_node_get_name>
 800e45a:	4682      	mov	sl, r0
 800e45c:	4640      	mov	r0, r8
 800e45e:	f005 f909 	bl	8013674 <rcl_node_get_namespace>
 800e462:	4686      	mov	lr, r0
 800e464:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800e468:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800e46c:	46ec      	mov	ip, sp
 800e46e:	f8cd b014 	str.w	fp, [sp, #20]
 800e472:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e476:	f8d9 3000 	ldr.w	r3, [r9]
 800e47a:	f8cc 3000 	str.w	r3, [ip]
 800e47e:	4628      	mov	r0, r5
 800e480:	4651      	mov	r1, sl
 800e482:	4672      	mov	r2, lr
 800e484:	ab08      	add	r3, sp, #32
 800e486:	f004 fbb3 	bl	8012bf0 <rcl_expand_topic_name>
 800e48a:	4605      	mov	r5, r0
 800e48c:	a808      	add	r0, sp, #32
 800e48e:	f000 fbe1 	bl	800ec54 <rcutils_string_map_fini>
 800e492:	b920      	cbnz	r0, 800e49e <rcl_publisher_init+0xf6>
 800e494:	b15d      	cbz	r5, 800e4ae <rcl_publisher_init+0x106>
 800e496:	2d67      	cmp	r5, #103	; 0x67
 800e498:	d002      	beq.n	800e4a0 <rcl_publisher_init+0xf8>
 800e49a:	2d69      	cmp	r5, #105	; 0x69
 800e49c:	d05f      	beq.n	800e55e <rcl_publisher_init+0x1b6>
 800e49e:	2501      	movs	r5, #1
 800e4a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4a2:	2800      	cmp	r0, #0
 800e4a4:	d096      	beq.n	800e3d4 <rcl_publisher_init+0x2c>
 800e4a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4a8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e4aa:	4798      	blx	r3
 800e4ac:	e792      	b.n	800e3d4 <rcl_publisher_init+0x2c>
 800e4ae:	4640      	mov	r0, r8
 800e4b0:	f005 f8e8 	bl	8013684 <rcl_node_get_options>
 800e4b4:	2800      	cmp	r0, #0
 800e4b6:	d0f2      	beq.n	800e49e <rcl_publisher_init+0xf6>
 800e4b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4ba:	f7f1 fe9b 	bl	80001f4 <strlen>
 800e4be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4c0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e4c2:	3001      	adds	r0, #1
 800e4c4:	4798      	blx	r3
 800e4c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e4c8:	9107      	str	r1, [sp, #28]
 800e4ca:	4681      	mov	r9, r0
 800e4cc:	4608      	mov	r0, r1
 800e4ce:	f7f1 fe91 	bl	80001f4 <strlen>
 800e4d2:	9907      	ldr	r1, [sp, #28]
 800e4d4:	1c42      	adds	r2, r0, #1
 800e4d6:	4648      	mov	r0, r9
 800e4d8:	f009 fe6d 	bl	80181b6 <memcpy>
 800e4dc:	462a      	mov	r2, r5
 800e4de:	4648      	mov	r0, r9
 800e4e0:	a90a      	add	r1, sp, #40	; 0x28
 800e4e2:	f000 fc33 	bl	800ed4c <rmw_validate_full_topic_name>
 800e4e6:	2800      	cmp	r0, #0
 800e4e8:	d137      	bne.n	800e55a <rcl_publisher_init+0x1b2>
 800e4ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d138      	bne.n	800e562 <rcl_publisher_init+0x1ba>
 800e4f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4f2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e4f4:	20c0      	movs	r0, #192	; 0xc0
 800e4f6:	4798      	blx	r3
 800e4f8:	6020      	str	r0, [r4, #0]
 800e4fa:	b3a0      	cbz	r0, 800e566 <rcl_publisher_init+0x1be>
 800e4fc:	4640      	mov	r0, r8
 800e4fe:	f005 f8c9 	bl	8013694 <rcl_node_get_rmw_handle>
 800e502:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e506:	9300      	str	r3, [sp, #0]
 800e508:	4631      	mov	r1, r6
 800e50a:	463b      	mov	r3, r7
 800e50c:	464a      	mov	r2, r9
 800e50e:	6825      	ldr	r5, [r4, #0]
 800e510:	f000 fd1c 	bl	800ef4c <rmw_create_publisher>
 800e514:	6821      	ldr	r1, [r4, #0]
 800e516:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 800e51a:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 800e51e:	b388      	cbz	r0, 800e584 <rcl_publisher_init+0x1dc>
 800e520:	3168      	adds	r1, #104	; 0x68
 800e522:	f000 fdf1 	bl	800f108 <rmw_publisher_get_actual_qos>
 800e526:	6823      	ldr	r3, [r4, #0]
 800e528:	4605      	mov	r5, r0
 800e52a:	b9f0      	cbnz	r0, 800e56a <rcl_publisher_init+0x1c2>
 800e52c:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800e530:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800e534:	4618      	mov	r0, r3
 800e536:	2268      	movs	r2, #104	; 0x68
 800e538:	4639      	mov	r1, r7
 800e53a:	f009 fe3c 	bl	80181b6 <memcpy>
 800e53e:	f8d8 2000 	ldr.w	r2, [r8]
 800e542:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 800e546:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e548:	b110      	cbz	r0, 800e550 <rcl_publisher_init+0x1a8>
 800e54a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e54c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e54e:	4798      	blx	r3
 800e550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e552:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e554:	4648      	mov	r0, r9
 800e556:	4798      	blx	r3
 800e558:	e73c      	b.n	800e3d4 <rcl_publisher_init+0x2c>
 800e55a:	2501      	movs	r5, #1
 800e55c:	e7f3      	b.n	800e546 <rcl_publisher_init+0x19e>
 800e55e:	2567      	movs	r5, #103	; 0x67
 800e560:	e79e      	b.n	800e4a0 <rcl_publisher_init+0xf8>
 800e562:	2567      	movs	r5, #103	; 0x67
 800e564:	e7ef      	b.n	800e546 <rcl_publisher_init+0x19e>
 800e566:	250a      	movs	r5, #10
 800e568:	e7ed      	b.n	800e546 <rcl_publisher_init+0x19e>
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d0f5      	beq.n	800e55a <rcl_publisher_init+0x1b2>
 800e56e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e572:	b13b      	cbz	r3, 800e584 <rcl_publisher_init+0x1dc>
 800e574:	4640      	mov	r0, r8
 800e576:	f005 f88d 	bl	8013694 <rcl_node_get_rmw_handle>
 800e57a:	6823      	ldr	r3, [r4, #0]
 800e57c:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800e580:	f000 fdc4 	bl	800f10c <rmw_destroy_publisher>
 800e584:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e586:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e588:	6820      	ldr	r0, [r4, #0]
 800e58a:	4798      	blx	r3
 800e58c:	2300      	movs	r3, #0
 800e58e:	6023      	str	r3, [r4, #0]
 800e590:	2501      	movs	r5, #1
 800e592:	e7d8      	b.n	800e546 <rcl_publisher_init+0x19e>

0800e594 <rcl_publisher_get_default_options>:
 800e594:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e596:	4f0e      	ldr	r7, [pc, #56]	; (800e5d0 <rcl_publisher_get_default_options+0x3c>)
 800e598:	490e      	ldr	r1, [pc, #56]	; (800e5d4 <rcl_publisher_get_default_options+0x40>)
 800e59a:	b087      	sub	sp, #28
 800e59c:	4606      	mov	r6, r0
 800e59e:	2250      	movs	r2, #80	; 0x50
 800e5a0:	4638      	mov	r0, r7
 800e5a2:	f009 fe08 	bl	80181b6 <memcpy>
 800e5a6:	466c      	mov	r4, sp
 800e5a8:	4668      	mov	r0, sp
 800e5aa:	f000 fa4f 	bl	800ea4c <rcutils_get_default_allocator>
 800e5ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e5b0:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800e5b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e5b6:	6823      	ldr	r3, [r4, #0]
 800e5b8:	602b      	str	r3, [r5, #0]
 800e5ba:	f000 fbc1 	bl	800ed40 <rmw_get_default_publisher_options>
 800e5be:	4639      	mov	r1, r7
 800e5c0:	6678      	str	r0, [r7, #100]	; 0x64
 800e5c2:	2268      	movs	r2, #104	; 0x68
 800e5c4:	4630      	mov	r0, r6
 800e5c6:	f009 fdf6 	bl	80181b6 <memcpy>
 800e5ca:	4630      	mov	r0, r6
 800e5cc:	b007      	add	sp, #28
 800e5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5d0:	20009e80 	.word	0x20009e80
 800e5d4:	080190d8 	.word	0x080190d8

0800e5d8 <rcl_publish>:
 800e5d8:	b1f8      	cbz	r0, 800e61a <rcl_publish+0x42>
 800e5da:	6803      	ldr	r3, [r0, #0]
 800e5dc:	b570      	push	{r4, r5, r6, lr}
 800e5de:	4604      	mov	r4, r0
 800e5e0:	b1b3      	cbz	r3, 800e610 <rcl_publish+0x38>
 800e5e2:	4616      	mov	r6, r2
 800e5e4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800e5e8:	b192      	cbz	r2, 800e610 <rcl_publish+0x38>
 800e5ea:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800e5ee:	460d      	mov	r5, r1
 800e5f0:	f004 fa94 	bl	8012b1c <rcl_context_is_valid>
 800e5f4:	b160      	cbz	r0, 800e610 <rcl_publish+0x38>
 800e5f6:	6823      	ldr	r3, [r4, #0]
 800e5f8:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 800e5fc:	b140      	cbz	r0, 800e610 <rcl_publish+0x38>
 800e5fe:	b155      	cbz	r5, 800e616 <rcl_publish+0x3e>
 800e600:	4632      	mov	r2, r6
 800e602:	4629      	mov	r1, r5
 800e604:	f000 fc42 	bl	800ee8c <rmw_publish>
 800e608:	3800      	subs	r0, #0
 800e60a:	bf18      	it	ne
 800e60c:	2001      	movne	r0, #1
 800e60e:	bd70      	pop	{r4, r5, r6, pc}
 800e610:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800e614:	bd70      	pop	{r4, r5, r6, pc}
 800e616:	200b      	movs	r0, #11
 800e618:	bd70      	pop	{r4, r5, r6, pc}
 800e61a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800e61e:	4770      	bx	lr

0800e620 <rcl_subscription_init>:
 800e620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e624:	b091      	sub	sp, #68	; 0x44
 800e626:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800e628:	b1d7      	cbz	r7, 800e660 <rcl_subscription_init+0x40>
 800e62a:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800e62e:	4604      	mov	r4, r0
 800e630:	4648      	mov	r0, r9
 800e632:	4688      	mov	r8, r1
 800e634:	4616      	mov	r6, r2
 800e636:	461d      	mov	r5, r3
 800e638:	f000 fa16 	bl	800ea68 <rcutils_allocator_is_valid>
 800e63c:	b180      	cbz	r0, 800e660 <rcl_subscription_init+0x40>
 800e63e:	b17c      	cbz	r4, 800e660 <rcl_subscription_init+0x40>
 800e640:	4640      	mov	r0, r8
 800e642:	f005 f805 	bl	8013650 <rcl_node_is_valid>
 800e646:	b380      	cbz	r0, 800e6aa <rcl_subscription_init+0x8a>
 800e648:	b156      	cbz	r6, 800e660 <rcl_subscription_init+0x40>
 800e64a:	b14d      	cbz	r5, 800e660 <rcl_subscription_init+0x40>
 800e64c:	f8d4 a000 	ldr.w	sl, [r4]
 800e650:	f1ba 0f00 	cmp.w	sl, #0
 800e654:	d009      	beq.n	800e66a <rcl_subscription_init+0x4a>
 800e656:	2564      	movs	r5, #100	; 0x64
 800e658:	4628      	mov	r0, r5
 800e65a:	b011      	add	sp, #68	; 0x44
 800e65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e660:	250b      	movs	r5, #11
 800e662:	4628      	mov	r0, r5
 800e664:	b011      	add	sp, #68	; 0x44
 800e666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e66a:	46ce      	mov	lr, r9
 800e66c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e670:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800e674:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e678:	f8de 3000 	ldr.w	r3, [lr]
 800e67c:	f8cc 3000 	str.w	r3, [ip]
 800e680:	f000 fa2e 	bl	800eae0 <rcutils_get_zero_initialized_string_map>
 800e684:	ab10      	add	r3, sp, #64	; 0x40
 800e686:	4684      	mov	ip, r0
 800e688:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800e68c:	f8cd c020 	str.w	ip, [sp, #32]
 800e690:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e694:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800e698:	4651      	mov	r1, sl
 800e69a:	a808      	add	r0, sp, #32
 800e69c:	f000 fa9a 	bl	800ebd4 <rcutils_string_map_init>
 800e6a0:	b140      	cbz	r0, 800e6b4 <rcl_subscription_init+0x94>
 800e6a2:	280a      	cmp	r0, #10
 800e6a4:	d011      	beq.n	800e6ca <rcl_subscription_init+0xaa>
 800e6a6:	2501      	movs	r5, #1
 800e6a8:	e7db      	b.n	800e662 <rcl_subscription_init+0x42>
 800e6aa:	25c8      	movs	r5, #200	; 0xc8
 800e6ac:	4628      	mov	r0, r5
 800e6ae:	b011      	add	sp, #68	; 0x44
 800e6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6b4:	a808      	add	r0, sp, #32
 800e6b6:	f004 fc01 	bl	8012ebc <rcl_get_default_topic_name_substitutions>
 800e6ba:	4682      	mov	sl, r0
 800e6bc:	b138      	cbz	r0, 800e6ce <rcl_subscription_init+0xae>
 800e6be:	a808      	add	r0, sp, #32
 800e6c0:	f000 fac8 	bl	800ec54 <rcutils_string_map_fini>
 800e6c4:	f1ba 0f0a 	cmp.w	sl, #10
 800e6c8:	d1ed      	bne.n	800e6a6 <rcl_subscription_init+0x86>
 800e6ca:	250a      	movs	r5, #10
 800e6cc:	e7c9      	b.n	800e662 <rcl_subscription_init+0x42>
 800e6ce:	4640      	mov	r0, r8
 800e6d0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e6d4:	f004 ffc6 	bl	8013664 <rcl_node_get_name>
 800e6d8:	4682      	mov	sl, r0
 800e6da:	4640      	mov	r0, r8
 800e6dc:	f004 ffca 	bl	8013674 <rcl_node_get_namespace>
 800e6e0:	4686      	mov	lr, r0
 800e6e2:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800e6e6:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800e6ea:	46ec      	mov	ip, sp
 800e6ec:	f8cd b014 	str.w	fp, [sp, #20]
 800e6f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e6f4:	f8d9 3000 	ldr.w	r3, [r9]
 800e6f8:	f8cc 3000 	str.w	r3, [ip]
 800e6fc:	4628      	mov	r0, r5
 800e6fe:	4651      	mov	r1, sl
 800e700:	4672      	mov	r2, lr
 800e702:	ab08      	add	r3, sp, #32
 800e704:	f004 fa74 	bl	8012bf0 <rcl_expand_topic_name>
 800e708:	4605      	mov	r5, r0
 800e70a:	a808      	add	r0, sp, #32
 800e70c:	f000 faa2 	bl	800ec54 <rcutils_string_map_fini>
 800e710:	b920      	cbnz	r0, 800e71c <rcl_subscription_init+0xfc>
 800e712:	b15d      	cbz	r5, 800e72c <rcl_subscription_init+0x10c>
 800e714:	2d67      	cmp	r5, #103	; 0x67
 800e716:	d002      	beq.n	800e71e <rcl_subscription_init+0xfe>
 800e718:	2d69      	cmp	r5, #105	; 0x69
 800e71a:	d05a      	beq.n	800e7d2 <rcl_subscription_init+0x1b2>
 800e71c:	2501      	movs	r5, #1
 800e71e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e720:	2800      	cmp	r0, #0
 800e722:	d09e      	beq.n	800e662 <rcl_subscription_init+0x42>
 800e724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e726:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e728:	4798      	blx	r3
 800e72a:	e79a      	b.n	800e662 <rcl_subscription_init+0x42>
 800e72c:	4640      	mov	r0, r8
 800e72e:	f004 ffa9 	bl	8013684 <rcl_node_get_options>
 800e732:	2800      	cmp	r0, #0
 800e734:	d0f2      	beq.n	800e71c <rcl_subscription_init+0xfc>
 800e736:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e738:	f7f1 fd5c 	bl	80001f4 <strlen>
 800e73c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e73e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e740:	3001      	adds	r0, #1
 800e742:	4798      	blx	r3
 800e744:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e746:	9107      	str	r1, [sp, #28]
 800e748:	4681      	mov	r9, r0
 800e74a:	4608      	mov	r0, r1
 800e74c:	f7f1 fd52 	bl	80001f4 <strlen>
 800e750:	9907      	ldr	r1, [sp, #28]
 800e752:	1c42      	adds	r2, r0, #1
 800e754:	4648      	mov	r0, r9
 800e756:	f009 fd2e 	bl	80181b6 <memcpy>
 800e75a:	462a      	mov	r2, r5
 800e75c:	4648      	mov	r0, r9
 800e75e:	a90a      	add	r1, sp, #40	; 0x28
 800e760:	f000 faf4 	bl	800ed4c <rmw_validate_full_topic_name>
 800e764:	2800      	cmp	r0, #0
 800e766:	d132      	bne.n	800e7ce <rcl_subscription_init+0x1ae>
 800e768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d133      	bne.n	800e7d6 <rcl_subscription_init+0x1b6>
 800e76e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e770:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e772:	20c8      	movs	r0, #200	; 0xc8
 800e774:	4798      	blx	r3
 800e776:	6020      	str	r0, [r4, #0]
 800e778:	b378      	cbz	r0, 800e7da <rcl_subscription_init+0x1ba>
 800e77a:	4640      	mov	r0, r8
 800e77c:	f004 ff8a 	bl	8013694 <rcl_node_get_rmw_handle>
 800e780:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e784:	9300      	str	r3, [sp, #0]
 800e786:	4631      	mov	r1, r6
 800e788:	463b      	mov	r3, r7
 800e78a:	464a      	mov	r2, r9
 800e78c:	6825      	ldr	r5, [r4, #0]
 800e78e:	f000 fd0d 	bl	800f1ac <rmw_create_subscription>
 800e792:	6821      	ldr	r1, [r4, #0]
 800e794:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
 800e798:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 800e79c:	b368      	cbz	r0, 800e7fa <rcl_subscription_init+0x1da>
 800e79e:	3170      	adds	r1, #112	; 0x70
 800e7a0:	f000 fde4 	bl	800f36c <rmw_subscription_get_actual_qos>
 800e7a4:	4605      	mov	r5, r0
 800e7a6:	b9d0      	cbnz	r0, 800e7de <rcl_subscription_init+0x1be>
 800e7a8:	6820      	ldr	r0, [r4, #0]
 800e7aa:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800e7ae:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 800e7b2:	2270      	movs	r2, #112	; 0x70
 800e7b4:	4639      	mov	r1, r7
 800e7b6:	f009 fcfe 	bl	80181b6 <memcpy>
 800e7ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e7bc:	b110      	cbz	r0, 800e7c4 <rcl_subscription_init+0x1a4>
 800e7be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e7c0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e7c2:	4798      	blx	r3
 800e7c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e7c6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e7c8:	4648      	mov	r0, r9
 800e7ca:	4798      	blx	r3
 800e7cc:	e749      	b.n	800e662 <rcl_subscription_init+0x42>
 800e7ce:	2501      	movs	r5, #1
 800e7d0:	e7f3      	b.n	800e7ba <rcl_subscription_init+0x19a>
 800e7d2:	2567      	movs	r5, #103	; 0x67
 800e7d4:	e7a3      	b.n	800e71e <rcl_subscription_init+0xfe>
 800e7d6:	2567      	movs	r5, #103	; 0x67
 800e7d8:	e7ef      	b.n	800e7ba <rcl_subscription_init+0x19a>
 800e7da:	250a      	movs	r5, #10
 800e7dc:	e7ed      	b.n	800e7ba <rcl_subscription_init+0x19a>
 800e7de:	6823      	ldr	r3, [r4, #0]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d0f4      	beq.n	800e7ce <rcl_subscription_init+0x1ae>
 800e7e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800e7e8:	b13b      	cbz	r3, 800e7fa <rcl_subscription_init+0x1da>
 800e7ea:	4640      	mov	r0, r8
 800e7ec:	f004 ff52 	bl	8013694 <rcl_node_get_rmw_handle>
 800e7f0:	6823      	ldr	r3, [r4, #0]
 800e7f2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800e7f6:	f000 fdbb 	bl	800f370 <rmw_destroy_subscription>
 800e7fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e7fc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e7fe:	6820      	ldr	r0, [r4, #0]
 800e800:	4798      	blx	r3
 800e802:	2300      	movs	r3, #0
 800e804:	6023      	str	r3, [r4, #0]
 800e806:	2501      	movs	r5, #1
 800e808:	e7d7      	b.n	800e7ba <rcl_subscription_init+0x19a>
 800e80a:	bf00      	nop

0800e80c <rcl_subscription_get_default_options>:
 800e80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e810:	4f12      	ldr	r7, [pc, #72]	; (800e85c <rcl_subscription_get_default_options+0x50>)
 800e812:	4913      	ldr	r1, [pc, #76]	; (800e860 <rcl_subscription_get_default_options+0x54>)
 800e814:	b088      	sub	sp, #32
 800e816:	4606      	mov	r6, r0
 800e818:	2250      	movs	r2, #80	; 0x50
 800e81a:	4638      	mov	r0, r7
 800e81c:	f009 fccb 	bl	80181b6 <memcpy>
 800e820:	ac02      	add	r4, sp, #8
 800e822:	a802      	add	r0, sp, #8
 800e824:	f000 f912 	bl	800ea4c <rcutils_get_default_allocator>
 800e828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e82a:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800e82e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e830:	46e8      	mov	r8, sp
 800e832:	6823      	ldr	r3, [r4, #0]
 800e834:	602b      	str	r3, [r5, #0]
 800e836:	4640      	mov	r0, r8
 800e838:	f000 fa84 	bl	800ed44 <rmw_get_default_subscription_options>
 800e83c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e840:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e844:	e883 0003 	stmia.w	r3, {r0, r1}
 800e848:	2270      	movs	r2, #112	; 0x70
 800e84a:	4639      	mov	r1, r7
 800e84c:	4630      	mov	r0, r6
 800e84e:	f009 fcb2 	bl	80181b6 <memcpy>
 800e852:	4630      	mov	r0, r6
 800e854:	b008      	add	sp, #32
 800e856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e85a:	bf00      	nop
 800e85c:	20009ee8 	.word	0x20009ee8
 800e860:	08019128 	.word	0x08019128

0800e864 <rclc_support_init>:
 800e864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e868:	b086      	sub	sp, #24
 800e86a:	2800      	cmp	r0, #0
 800e86c:	d042      	beq.n	800e8f4 <rclc_support_init+0x90>
 800e86e:	461c      	mov	r4, r3
 800e870:	2b00      	cmp	r3, #0
 800e872:	d03f      	beq.n	800e8f4 <rclc_support_init+0x90>
 800e874:	460f      	mov	r7, r1
 800e876:	4690      	mov	r8, r2
 800e878:	4606      	mov	r6, r0
 800e87a:	f004 fc2f 	bl	80130dc <rcl_get_zero_initialized_init_options>
 800e87e:	4603      	mov	r3, r0
 800e880:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800e884:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e888:	9305      	str	r3, [sp, #20]
 800e88a:	a805      	add	r0, sp, #20
 800e88c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800e890:	f004 fc26 	bl	80130e0 <rcl_init_options_init>
 800e894:	4605      	mov	r5, r0
 800e896:	bb38      	cbnz	r0, 800e8e8 <rclc_support_init+0x84>
 800e898:	f004 fc20 	bl	80130dc <rcl_get_zero_initialized_init_options>
 800e89c:	4631      	mov	r1, r6
 800e89e:	6030      	str	r0, [r6, #0]
 800e8a0:	a805      	add	r0, sp, #20
 800e8a2:	f004 fc93 	bl	80131cc <rcl_init_options_copy>
 800e8a6:	4605      	mov	r5, r0
 800e8a8:	b9c0      	cbnz	r0, 800e8dc <rclc_support_init+0x78>
 800e8aa:	ad02      	add	r5, sp, #8
 800e8ac:	4628      	mov	r0, r5
 800e8ae:	f004 f92b 	bl	8012b08 <rcl_get_zero_initialized_context>
 800e8b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e8b6:	1d33      	adds	r3, r6, #4
 800e8b8:	e883 0003 	stmia.w	r3, {r0, r1}
 800e8bc:	4632      	mov	r2, r6
 800e8be:	4641      	mov	r1, r8
 800e8c0:	4638      	mov	r0, r7
 800e8c2:	f004 fb01 	bl	8012ec8 <rcl_init>
 800e8c6:	4605      	mov	r5, r0
 800e8c8:	b940      	cbnz	r0, 800e8dc <rclc_support_init+0x78>
 800e8ca:	60f4      	str	r4, [r6, #12]
 800e8cc:	4622      	mov	r2, r4
 800e8ce:	f106 0110 	add.w	r1, r6, #16
 800e8d2:	2003      	movs	r0, #3
 800e8d4:	f005 f82a 	bl	801392c <rcl_clock_init>
 800e8d8:	4605      	mov	r5, r0
 800e8da:	b108      	cbz	r0, 800e8e0 <rclc_support_init+0x7c>
 800e8dc:	f000 f8e8 	bl	800eab0 <rcutils_reset_error>
 800e8e0:	a805      	add	r0, sp, #20
 800e8e2:	f004 fc4f 	bl	8013184 <rcl_init_options_fini>
 800e8e6:	b108      	cbz	r0, 800e8ec <rclc_support_init+0x88>
 800e8e8:	f000 f8e2 	bl	800eab0 <rcutils_reset_error>
 800e8ec:	4628      	mov	r0, r5
 800e8ee:	b006      	add	sp, #24
 800e8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8f4:	250b      	movs	r5, #11
 800e8f6:	4628      	mov	r0, r5
 800e8f8:	b006      	add	sp, #24
 800e8fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8fe:	bf00      	nop

0800e900 <rclc_node_init_default>:
 800e900:	b3b8      	cbz	r0, 800e972 <rclc_node_init_default+0x72>
 800e902:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e906:	460d      	mov	r5, r1
 800e908:	b08f      	sub	sp, #60	; 0x3c
 800e90a:	b329      	cbz	r1, 800e958 <rclc_node_init_default+0x58>
 800e90c:	4616      	mov	r6, r2
 800e90e:	b31a      	cbz	r2, 800e958 <rclc_node_init_default+0x58>
 800e910:	461f      	mov	r7, r3
 800e912:	b30b      	cbz	r3, 800e958 <rclc_node_init_default+0x58>
 800e914:	f10d 0810 	add.w	r8, sp, #16
 800e918:	4604      	mov	r4, r0
 800e91a:	4640      	mov	r0, r8
 800e91c:	f004 fd1e 	bl	801335c <rcl_get_zero_initialized_node>
 800e920:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e924:	f10d 091c 	add.w	r9, sp, #28
 800e928:	e884 0003 	stmia.w	r4, {r0, r1}
 800e92c:	4648      	mov	r0, r9
 800e92e:	f004 feb7 	bl	80136a0 <rcl_node_get_default_options>
 800e932:	4640      	mov	r0, r8
 800e934:	f004 fd12 	bl	801335c <rcl_get_zero_initialized_node>
 800e938:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e93c:	1d3b      	adds	r3, r7, #4
 800e93e:	f8cd 9000 	str.w	r9, [sp]
 800e942:	4632      	mov	r2, r6
 800e944:	e884 0003 	stmia.w	r4, {r0, r1}
 800e948:	4629      	mov	r1, r5
 800e94a:	4620      	mov	r0, r4
 800e94c:	f004 fd10 	bl	8013370 <rcl_node_init>
 800e950:	b930      	cbnz	r0, 800e960 <rclc_node_init_default+0x60>
 800e952:	b00f      	add	sp, #60	; 0x3c
 800e954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e958:	200b      	movs	r0, #11
 800e95a:	b00f      	add	sp, #60	; 0x3c
 800e95c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e960:	9003      	str	r0, [sp, #12]
 800e962:	f000 f8a5 	bl	800eab0 <rcutils_reset_error>
 800e966:	f000 f8a3 	bl	800eab0 <rcutils_reset_error>
 800e96a:	9803      	ldr	r0, [sp, #12]
 800e96c:	b00f      	add	sp, #60	; 0x3c
 800e96e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e972:	200b      	movs	r0, #11
 800e974:	4770      	bx	lr
 800e976:	bf00      	nop

0800e978 <rclc_publisher_init_default>:
 800e978:	b368      	cbz	r0, 800e9d6 <rclc_publisher_init_default+0x5e>
 800e97a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e97e:	460d      	mov	r5, r1
 800e980:	b09e      	sub	sp, #120	; 0x78
 800e982:	b321      	cbz	r1, 800e9ce <rclc_publisher_init_default+0x56>
 800e984:	4616      	mov	r6, r2
 800e986:	b312      	cbz	r2, 800e9ce <rclc_publisher_init_default+0x56>
 800e988:	461f      	mov	r7, r3
 800e98a:	b303      	cbz	r3, 800e9ce <rclc_publisher_init_default+0x56>
 800e98c:	4604      	mov	r4, r0
 800e98e:	f7ff fd05 	bl	800e39c <rcl_get_zero_initialized_publisher>
 800e992:	f10d 0810 	add.w	r8, sp, #16
 800e996:	6020      	str	r0, [r4, #0]
 800e998:	4640      	mov	r0, r8
 800e99a:	f7ff fdfb 	bl	800e594 <rcl_publisher_get_default_options>
 800e99e:	490f      	ldr	r1, [pc, #60]	; (800e9dc <rclc_publisher_init_default+0x64>)
 800e9a0:	2250      	movs	r2, #80	; 0x50
 800e9a2:	4640      	mov	r0, r8
 800e9a4:	f009 fc07 	bl	80181b6 <memcpy>
 800e9a8:	f8cd 8000 	str.w	r8, [sp]
 800e9ac:	463b      	mov	r3, r7
 800e9ae:	4632      	mov	r2, r6
 800e9b0:	4629      	mov	r1, r5
 800e9b2:	4620      	mov	r0, r4
 800e9b4:	f7ff fcf8 	bl	800e3a8 <rcl_publisher_init>
 800e9b8:	b910      	cbnz	r0, 800e9c0 <rclc_publisher_init_default+0x48>
 800e9ba:	b01e      	add	sp, #120	; 0x78
 800e9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9c0:	9003      	str	r0, [sp, #12]
 800e9c2:	f000 f875 	bl	800eab0 <rcutils_reset_error>
 800e9c6:	9803      	ldr	r0, [sp, #12]
 800e9c8:	b01e      	add	sp, #120	; 0x78
 800e9ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9ce:	200b      	movs	r0, #11
 800e9d0:	b01e      	add	sp, #120	; 0x78
 800e9d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9d6:	200b      	movs	r0, #11
 800e9d8:	4770      	bx	lr
 800e9da:	bf00      	nop
 800e9dc:	08019178 	.word	0x08019178

0800e9e0 <__default_zero_allocate>:
 800e9e0:	f008 bda0 	b.w	8017524 <calloc>

0800e9e4 <__default_reallocate>:
 800e9e4:	f008 bf2c 	b.w	8017840 <realloc>

0800e9e8 <__default_deallocate>:
 800e9e8:	f008 be0a 	b.w	8017600 <free>

0800e9ec <__default_allocate>:
 800e9ec:	f008 be00 	b.w	80175f0 <malloc>

0800e9f0 <rcutils_get_zero_initialized_allocator>:
 800e9f0:	b470      	push	{r4, r5, r6}
 800e9f2:	4d05      	ldr	r5, [pc, #20]	; (800ea08 <rcutils_get_zero_initialized_allocator+0x18>)
 800e9f4:	4606      	mov	r6, r0
 800e9f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9f8:	4634      	mov	r4, r6
 800e9fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e9fc:	682b      	ldr	r3, [r5, #0]
 800e9fe:	6023      	str	r3, [r4, #0]
 800ea00:	4630      	mov	r0, r6
 800ea02:	bc70      	pop	{r4, r5, r6}
 800ea04:	4770      	bx	lr
 800ea06:	bf00      	nop
 800ea08:	080191c8 	.word	0x080191c8

0800ea0c <rcutils_set_default_allocator>:
 800ea0c:	b1a0      	cbz	r0, 800ea38 <rcutils_set_default_allocator+0x2c>
 800ea0e:	6801      	ldr	r1, [r0, #0]
 800ea10:	b199      	cbz	r1, 800ea3a <rcutils_set_default_allocator+0x2e>
 800ea12:	b430      	push	{r4, r5}
 800ea14:	6844      	ldr	r4, [r0, #4]
 800ea16:	b194      	cbz	r4, 800ea3e <rcutils_set_default_allocator+0x32>
 800ea18:	68c5      	ldr	r5, [r0, #12]
 800ea1a:	b15d      	cbz	r5, 800ea34 <rcutils_set_default_allocator+0x28>
 800ea1c:	6883      	ldr	r3, [r0, #8]
 800ea1e:	b18b      	cbz	r3, 800ea44 <rcutils_set_default_allocator+0x38>
 800ea20:	4a09      	ldr	r2, [pc, #36]	; (800ea48 <rcutils_set_default_allocator+0x3c>)
 800ea22:	e9c2 1400 	strd	r1, r4, [r2]
 800ea26:	e9c2 3502 	strd	r3, r5, [r2, #8]
 800ea2a:	2000      	movs	r0, #0
 800ea2c:	6110      	str	r0, [r2, #16]
 800ea2e:	2001      	movs	r0, #1
 800ea30:	bc30      	pop	{r4, r5}
 800ea32:	4770      	bx	lr
 800ea34:	4628      	mov	r0, r5
 800ea36:	e7fb      	b.n	800ea30 <rcutils_set_default_allocator+0x24>
 800ea38:	4770      	bx	lr
 800ea3a:	4608      	mov	r0, r1
 800ea3c:	4770      	bx	lr
 800ea3e:	4620      	mov	r0, r4
 800ea40:	bc30      	pop	{r4, r5}
 800ea42:	4770      	bx	lr
 800ea44:	4618      	mov	r0, r3
 800ea46:	e7f3      	b.n	800ea30 <rcutils_set_default_allocator+0x24>
 800ea48:	2000002c 	.word	0x2000002c

0800ea4c <rcutils_get_default_allocator>:
 800ea4c:	b470      	push	{r4, r5, r6}
 800ea4e:	4d05      	ldr	r5, [pc, #20]	; (800ea64 <rcutils_get_default_allocator+0x18>)
 800ea50:	4606      	mov	r6, r0
 800ea52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea54:	4634      	mov	r4, r6
 800ea56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea58:	682b      	ldr	r3, [r5, #0]
 800ea5a:	6023      	str	r3, [r4, #0]
 800ea5c:	4630      	mov	r0, r6
 800ea5e:	bc70      	pop	{r4, r5, r6}
 800ea60:	4770      	bx	lr
 800ea62:	bf00      	nop
 800ea64:	2000002c 	.word	0x2000002c

0800ea68 <rcutils_allocator_is_valid>:
 800ea68:	b158      	cbz	r0, 800ea82 <rcutils_allocator_is_valid+0x1a>
 800ea6a:	6803      	ldr	r3, [r0, #0]
 800ea6c:	b143      	cbz	r3, 800ea80 <rcutils_allocator_is_valid+0x18>
 800ea6e:	6843      	ldr	r3, [r0, #4]
 800ea70:	b133      	cbz	r3, 800ea80 <rcutils_allocator_is_valid+0x18>
 800ea72:	68c3      	ldr	r3, [r0, #12]
 800ea74:	b123      	cbz	r3, 800ea80 <rcutils_allocator_is_valid+0x18>
 800ea76:	6880      	ldr	r0, [r0, #8]
 800ea78:	3800      	subs	r0, #0
 800ea7a:	bf18      	it	ne
 800ea7c:	2001      	movne	r0, #1
 800ea7e:	4770      	bx	lr
 800ea80:	4618      	mov	r0, r3
 800ea82:	4770      	bx	lr

0800ea84 <rcutils_get_error_string>:
 800ea84:	4b06      	ldr	r3, [pc, #24]	; (800eaa0 <rcutils_get_error_string+0x1c>)
 800ea86:	781b      	ldrb	r3, [r3, #0]
 800ea88:	b13b      	cbz	r3, 800ea9a <rcutils_get_error_string+0x16>
 800ea8a:	4b06      	ldr	r3, [pc, #24]	; (800eaa4 <rcutils_get_error_string+0x20>)
 800ea8c:	781a      	ldrb	r2, [r3, #0]
 800ea8e:	b90a      	cbnz	r2, 800ea94 <rcutils_get_error_string+0x10>
 800ea90:	2201      	movs	r2, #1
 800ea92:	701a      	strb	r2, [r3, #0]
 800ea94:	4b04      	ldr	r3, [pc, #16]	; (800eaa8 <rcutils_get_error_string+0x24>)
 800ea96:	7818      	ldrb	r0, [r3, #0]
 800ea98:	4770      	bx	lr
 800ea9a:	4b04      	ldr	r3, [pc, #16]	; (800eaac <rcutils_get_error_string+0x28>)
 800ea9c:	7818      	ldrb	r0, [r3, #0]
 800ea9e:	4770      	bx	lr
 800eaa0:	20009f58 	.word	0x20009f58
 800eaa4:	20009f59 	.word	0x20009f59
 800eaa8:	2000a1c0 	.word	0x2000a1c0
 800eaac:	080191dc 	.word	0x080191dc

0800eab0 <rcutils_reset_error>:
 800eab0:	b4d0      	push	{r4, r6, r7}
 800eab2:	4a07      	ldr	r2, [pc, #28]	; (800ead0 <rcutils_reset_error+0x20>)
 800eab4:	4807      	ldr	r0, [pc, #28]	; (800ead4 <rcutils_reset_error+0x24>)
 800eab6:	4c08      	ldr	r4, [pc, #32]	; (800ead8 <rcutils_reset_error+0x28>)
 800eab8:	4908      	ldr	r1, [pc, #32]	; (800eadc <rcutils_reset_error+0x2c>)
 800eaba:	2300      	movs	r3, #0
 800eabc:	2600      	movs	r6, #0
 800eabe:	2700      	movs	r7, #0
 800eac0:	8013      	strh	r3, [r2, #0]
 800eac2:	7003      	strb	r3, [r0, #0]
 800eac4:	e9c2 6702 	strd	r6, r7, [r2, #8]
 800eac8:	7023      	strb	r3, [r4, #0]
 800eaca:	700b      	strb	r3, [r1, #0]
 800eacc:	bcd0      	pop	{r4, r6, r7}
 800eace:	4770      	bx	lr
 800ead0:	2000a1c8 	.word	0x2000a1c8
 800ead4:	2000a1c0 	.word	0x2000a1c0
 800ead8:	20009f59 	.word	0x20009f59
 800eadc:	20009f58 	.word	0x20009f58

0800eae0 <rcutils_get_zero_initialized_string_map>:
 800eae0:	4b01      	ldr	r3, [pc, #4]	; (800eae8 <rcutils_get_zero_initialized_string_map+0x8>)
 800eae2:	2000      	movs	r0, #0
 800eae4:	6018      	str	r0, [r3, #0]
 800eae6:	4770      	bx	lr
 800eae8:	20009f5c 	.word	0x20009f5c

0800eaec <rcutils_string_map_reserve>:
 800eaec:	2800      	cmp	r0, #0
 800eaee:	d061      	beq.n	800ebb4 <rcutils_string_map_reserve+0xc8>
 800eaf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eaf4:	6805      	ldr	r5, [r0, #0]
 800eaf6:	b083      	sub	sp, #12
 800eaf8:	460c      	mov	r4, r1
 800eafa:	4606      	mov	r6, r0
 800eafc:	b12d      	cbz	r5, 800eb0a <rcutils_string_map_reserve+0x1e>
 800eafe:	68eb      	ldr	r3, [r5, #12]
 800eb00:	42a3      	cmp	r3, r4
 800eb02:	d906      	bls.n	800eb12 <rcutils_string_map_reserve+0x26>
 800eb04:	461c      	mov	r4, r3
 800eb06:	2d00      	cmp	r5, #0
 800eb08:	d1f9      	bne.n	800eafe <rcutils_string_map_reserve+0x12>
 800eb0a:	201f      	movs	r0, #31
 800eb0c:	b003      	add	sp, #12
 800eb0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb12:	68ab      	ldr	r3, [r5, #8]
 800eb14:	42a3      	cmp	r3, r4
 800eb16:	d049      	beq.n	800ebac <rcutils_string_map_reserve+0xc0>
 800eb18:	6a2f      	ldr	r7, [r5, #32]
 800eb1a:	2c00      	cmp	r4, #0
 800eb1c:	d035      	beq.n	800eb8a <rcutils_string_map_reserve+0x9e>
 800eb1e:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800eb22:	d245      	bcs.n	800ebb0 <rcutils_string_map_reserve+0xc4>
 800eb24:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800eb28:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800eb2c:	6828      	ldr	r0, [r5, #0]
 800eb2e:	4641      	mov	r1, r8
 800eb30:	463a      	mov	r2, r7
 800eb32:	47c8      	blx	r9
 800eb34:	2800      	cmp	r0, #0
 800eb36:	d03b      	beq.n	800ebb0 <rcutils_string_map_reserve+0xc4>
 800eb38:	6833      	ldr	r3, [r6, #0]
 800eb3a:	463a      	mov	r2, r7
 800eb3c:	6018      	str	r0, [r3, #0]
 800eb3e:	4641      	mov	r1, r8
 800eb40:	6858      	ldr	r0, [r3, #4]
 800eb42:	47c8      	blx	r9
 800eb44:	2800      	cmp	r0, #0
 800eb46:	d033      	beq.n	800ebb0 <rcutils_string_map_reserve+0xc4>
 800eb48:	6835      	ldr	r5, [r6, #0]
 800eb4a:	68ab      	ldr	r3, [r5, #8]
 800eb4c:	6068      	str	r0, [r5, #4]
 800eb4e:	42a3      	cmp	r3, r4
 800eb50:	d227      	bcs.n	800eba2 <rcutils_string_map_reserve+0xb6>
 800eb52:	682a      	ldr	r2, [r5, #0]
 800eb54:	eb00 0108 	add.w	r1, r0, r8
 800eb58:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800eb5c:	428f      	cmp	r7, r1
 800eb5e:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800eb62:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800eb66:	d203      	bcs.n	800eb70 <rcutils_string_map_reserve+0x84>
 800eb68:	eb02 0108 	add.w	r1, r2, r8
 800eb6c:	428e      	cmp	r6, r1
 800eb6e:	d323      	bcc.n	800ebb8 <rcutils_string_map_reserve+0xcc>
 800eb70:	1ae3      	subs	r3, r4, r3
 800eb72:	009a      	lsls	r2, r3, #2
 800eb74:	4638      	mov	r0, r7
 800eb76:	2100      	movs	r1, #0
 800eb78:	9201      	str	r2, [sp, #4]
 800eb7a:	f009 f9fd 	bl	8017f78 <memset>
 800eb7e:	9a01      	ldr	r2, [sp, #4]
 800eb80:	4630      	mov	r0, r6
 800eb82:	2100      	movs	r1, #0
 800eb84:	f009 f9f8 	bl	8017f78 <memset>
 800eb88:	e00b      	b.n	800eba2 <rcutils_string_map_reserve+0xb6>
 800eb8a:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800eb8e:	6828      	ldr	r0, [r5, #0]
 800eb90:	4639      	mov	r1, r7
 800eb92:	47c0      	blx	r8
 800eb94:	6833      	ldr	r3, [r6, #0]
 800eb96:	4639      	mov	r1, r7
 800eb98:	6858      	ldr	r0, [r3, #4]
 800eb9a:	601c      	str	r4, [r3, #0]
 800eb9c:	47c0      	blx	r8
 800eb9e:	6835      	ldr	r5, [r6, #0]
 800eba0:	606c      	str	r4, [r5, #4]
 800eba2:	2000      	movs	r0, #0
 800eba4:	60ac      	str	r4, [r5, #8]
 800eba6:	b003      	add	sp, #12
 800eba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebac:	2000      	movs	r0, #0
 800ebae:	e7ad      	b.n	800eb0c <rcutils_string_map_reserve+0x20>
 800ebb0:	200a      	movs	r0, #10
 800ebb2:	e7ab      	b.n	800eb0c <rcutils_string_map_reserve+0x20>
 800ebb4:	200b      	movs	r0, #11
 800ebb6:	4770      	bx	lr
 800ebb8:	1f13      	subs	r3, r2, #4
 800ebba:	f1ac 0c04 	sub.w	ip, ip, #4
 800ebbe:	4498      	add	r8, r3
 800ebc0:	4460      	add	r0, ip
 800ebc2:	4462      	add	r2, ip
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	f842 3f04 	str.w	r3, [r2, #4]!
 800ebca:	4542      	cmp	r2, r8
 800ebcc:	f840 3f04 	str.w	r3, [r0, #4]!
 800ebd0:	d1f9      	bne.n	800ebc6 <rcutils_string_map_reserve+0xda>
 800ebd2:	e7e6      	b.n	800eba2 <rcutils_string_map_reserve+0xb6>

0800ebd4 <rcutils_string_map_init>:
 800ebd4:	b082      	sub	sp, #8
 800ebd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebd8:	460e      	mov	r6, r1
 800ebda:	a906      	add	r1, sp, #24
 800ebdc:	e881 000c 	stmia.w	r1, {r2, r3}
 800ebe0:	b380      	cbz	r0, 800ec44 <rcutils_string_map_init+0x70>
 800ebe2:	6807      	ldr	r7, [r0, #0]
 800ebe4:	4604      	mov	r4, r0
 800ebe6:	b12f      	cbz	r7, 800ebf4 <rcutils_string_map_init+0x20>
 800ebe8:	251e      	movs	r5, #30
 800ebea:	4628      	mov	r0, r5
 800ebec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ebf0:	b002      	add	sp, #8
 800ebf2:	4770      	bx	lr
 800ebf4:	a806      	add	r0, sp, #24
 800ebf6:	f7ff ff37 	bl	800ea68 <rcutils_allocator_is_valid>
 800ebfa:	b318      	cbz	r0, 800ec44 <rcutils_string_map_init+0x70>
 800ebfc:	9b06      	ldr	r3, [sp, #24]
 800ebfe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ec00:	2024      	movs	r0, #36	; 0x24
 800ec02:	4798      	blx	r3
 800ec04:	4605      	mov	r5, r0
 800ec06:	6020      	str	r0, [r4, #0]
 800ec08:	b310      	cbz	r0, 800ec50 <rcutils_string_map_init+0x7c>
 800ec0a:	f10d 0e18 	add.w	lr, sp, #24
 800ec0e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ec12:	f105 0c10 	add.w	ip, r5, #16
 800ec16:	e9c5 7700 	strd	r7, r7, [r5]
 800ec1a:	e9c5 7702 	strd	r7, r7, [r5, #8]
 800ec1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec22:	f8de 3000 	ldr.w	r3, [lr]
 800ec26:	f8cc 3000 	str.w	r3, [ip]
 800ec2a:	4631      	mov	r1, r6
 800ec2c:	4620      	mov	r0, r4
 800ec2e:	f7ff ff5d 	bl	800eaec <rcutils_string_map_reserve>
 800ec32:	4605      	mov	r5, r0
 800ec34:	2800      	cmp	r0, #0
 800ec36:	d0d8      	beq.n	800ebea <rcutils_string_map_init+0x16>
 800ec38:	9b07      	ldr	r3, [sp, #28]
 800ec3a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ec3c:	6820      	ldr	r0, [r4, #0]
 800ec3e:	4798      	blx	r3
 800ec40:	6027      	str	r7, [r4, #0]
 800ec42:	e7d2      	b.n	800ebea <rcutils_string_map_init+0x16>
 800ec44:	250b      	movs	r5, #11
 800ec46:	4628      	mov	r0, r5
 800ec48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ec4c:	b002      	add	sp, #8
 800ec4e:	4770      	bx	lr
 800ec50:	250a      	movs	r5, #10
 800ec52:	e7ca      	b.n	800ebea <rcutils_string_map_init+0x16>

0800ec54 <rcutils_string_map_fini>:
 800ec54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec58:	b082      	sub	sp, #8
 800ec5a:	2800      	cmp	r0, #0
 800ec5c:	d039      	beq.n	800ecd2 <rcutils_string_map_fini+0x7e>
 800ec5e:	6804      	ldr	r4, [r0, #0]
 800ec60:	4606      	mov	r6, r0
 800ec62:	2c00      	cmp	r4, #0
 800ec64:	d031      	beq.n	800ecca <rcutils_string_map_fini+0x76>
 800ec66:	68a3      	ldr	r3, [r4, #8]
 800ec68:	b323      	cbz	r3, 800ecb4 <rcutils_string_map_fini+0x60>
 800ec6a:	2500      	movs	r5, #0
 800ec6c:	6822      	ldr	r2, [r4, #0]
 800ec6e:	46a8      	mov	r8, r5
 800ec70:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800ec74:	b1d8      	cbz	r0, 800ecae <rcutils_string_map_fini+0x5a>
 800ec76:	6a21      	ldr	r1, [r4, #32]
 800ec78:	6967      	ldr	r7, [r4, #20]
 800ec7a:	9101      	str	r1, [sp, #4]
 800ec7c:	47b8      	blx	r7
 800ec7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ec82:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800ec86:	9901      	ldr	r1, [sp, #4]
 800ec88:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ec8c:	47b8      	blx	r7
 800ec8e:	68e3      	ldr	r3, [r4, #12]
 800ec90:	6862      	ldr	r2, [r4, #4]
 800ec92:	3b01      	subs	r3, #1
 800ec94:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800ec98:	60e3      	str	r3, [r4, #12]
 800ec9a:	6834      	ldr	r4, [r6, #0]
 800ec9c:	68a3      	ldr	r3, [r4, #8]
 800ec9e:	3501      	adds	r5, #1
 800eca0:	429d      	cmp	r5, r3
 800eca2:	d207      	bcs.n	800ecb4 <rcutils_string_map_fini+0x60>
 800eca4:	6822      	ldr	r2, [r4, #0]
 800eca6:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800ecaa:	2800      	cmp	r0, #0
 800ecac:	d1e3      	bne.n	800ec76 <rcutils_string_map_fini+0x22>
 800ecae:	3501      	adds	r5, #1
 800ecb0:	429d      	cmp	r5, r3
 800ecb2:	d3dd      	bcc.n	800ec70 <rcutils_string_map_fini+0x1c>
 800ecb4:	2100      	movs	r1, #0
 800ecb6:	4630      	mov	r0, r6
 800ecb8:	f7ff ff18 	bl	800eaec <rcutils_string_map_reserve>
 800ecbc:	4604      	mov	r4, r0
 800ecbe:	b920      	cbnz	r0, 800ecca <rcutils_string_map_fini+0x76>
 800ecc0:	6830      	ldr	r0, [r6, #0]
 800ecc2:	6943      	ldr	r3, [r0, #20]
 800ecc4:	6a01      	ldr	r1, [r0, #32]
 800ecc6:	4798      	blx	r3
 800ecc8:	6034      	str	r4, [r6, #0]
 800ecca:	4620      	mov	r0, r4
 800eccc:	b002      	add	sp, #8
 800ecce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecd2:	240b      	movs	r4, #11
 800ecd4:	4620      	mov	r0, r4
 800ecd6:	b002      	add	sp, #8
 800ecd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ecdc <rcutils_string_map_getn>:
 800ecdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ece0:	b082      	sub	sp, #8
 800ece2:	b308      	cbz	r0, 800ed28 <rcutils_string_map_getn+0x4c>
 800ece4:	6804      	ldr	r4, [r0, #0]
 800ece6:	b304      	cbz	r4, 800ed2a <rcutils_string_map_getn+0x4e>
 800ece8:	460d      	mov	r5, r1
 800ecea:	b1e9      	cbz	r1, 800ed28 <rcutils_string_map_getn+0x4c>
 800ecec:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800ecf0:	6827      	ldr	r7, [r4, #0]
 800ecf2:	f1b9 0f00 	cmp.w	r9, #0
 800ecf6:	d017      	beq.n	800ed28 <rcutils_string_map_getn+0x4c>
 800ecf8:	4690      	mov	r8, r2
 800ecfa:	3f04      	subs	r7, #4
 800ecfc:	2600      	movs	r6, #0
 800ecfe:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800ed02:	9101      	str	r1, [sp, #4]
 800ed04:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800ed08:	4608      	mov	r0, r1
 800ed0a:	3601      	adds	r6, #1
 800ed0c:	b151      	cbz	r1, 800ed24 <rcutils_string_map_getn+0x48>
 800ed0e:	f7f1 fa71 	bl	80001f4 <strlen>
 800ed12:	4540      	cmp	r0, r8
 800ed14:	4602      	mov	r2, r0
 800ed16:	9901      	ldr	r1, [sp, #4]
 800ed18:	bf38      	it	cc
 800ed1a:	4642      	movcc	r2, r8
 800ed1c:	4628      	mov	r0, r5
 800ed1e:	f009 f940 	bl	8017fa2 <strncmp>
 800ed22:	b130      	cbz	r0, 800ed32 <rcutils_string_map_getn+0x56>
 800ed24:	45b1      	cmp	r9, r6
 800ed26:	d1ea      	bne.n	800ecfe <rcutils_string_map_getn+0x22>
 800ed28:	2400      	movs	r4, #0
 800ed2a:	4620      	mov	r0, r4
 800ed2c:	b002      	add	sp, #8
 800ed2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed32:	6863      	ldr	r3, [r4, #4]
 800ed34:	f853 400a 	ldr.w	r4, [r3, sl]
 800ed38:	4620      	mov	r0, r4
 800ed3a:	b002      	add	sp, #8
 800ed3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ed40 <rmw_get_default_publisher_options>:
 800ed40:	2000      	movs	r0, #0
 800ed42:	4770      	bx	lr

0800ed44 <rmw_get_default_subscription_options>:
 800ed44:	2200      	movs	r2, #0
 800ed46:	6002      	str	r2, [r0, #0]
 800ed48:	7102      	strb	r2, [r0, #4]
 800ed4a:	4770      	bx	lr

0800ed4c <rmw_validate_full_topic_name>:
 800ed4c:	2800      	cmp	r0, #0
 800ed4e:	d062      	beq.n	800ee16 <rmw_validate_full_topic_name+0xca>
 800ed50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed54:	460d      	mov	r5, r1
 800ed56:	2900      	cmp	r1, #0
 800ed58:	d05f      	beq.n	800ee1a <rmw_validate_full_topic_name+0xce>
 800ed5a:	4616      	mov	r6, r2
 800ed5c:	4604      	mov	r4, r0
 800ed5e:	f7f1 fa49 	bl	80001f4 <strlen>
 800ed62:	b148      	cbz	r0, 800ed78 <rmw_validate_full_topic_name+0x2c>
 800ed64:	7823      	ldrb	r3, [r4, #0]
 800ed66:	2b2f      	cmp	r3, #47	; 0x2f
 800ed68:	d00d      	beq.n	800ed86 <rmw_validate_full_topic_name+0x3a>
 800ed6a:	2302      	movs	r3, #2
 800ed6c:	602b      	str	r3, [r5, #0]
 800ed6e:	b13e      	cbz	r6, 800ed80 <rmw_validate_full_topic_name+0x34>
 800ed70:	2000      	movs	r0, #0
 800ed72:	6030      	str	r0, [r6, #0]
 800ed74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed78:	2301      	movs	r3, #1
 800ed7a:	602b      	str	r3, [r5, #0]
 800ed7c:	2e00      	cmp	r6, #0
 800ed7e:	d1f7      	bne.n	800ed70 <rmw_validate_full_topic_name+0x24>
 800ed80:	2000      	movs	r0, #0
 800ed82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed86:	1e47      	subs	r7, r0, #1
 800ed88:	5de3      	ldrb	r3, [r4, r7]
 800ed8a:	2b2f      	cmp	r3, #47	; 0x2f
 800ed8c:	d047      	beq.n	800ee1e <rmw_validate_full_topic_name+0xd2>
 800ed8e:	1e63      	subs	r3, r4, #1
 800ed90:	eb03 0900 	add.w	r9, r3, r0
 800ed94:	f1c4 0e01 	rsb	lr, r4, #1
 800ed98:	eb0e 0803 	add.w	r8, lr, r3
 800ed9c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800eda0:	f021 0220 	bic.w	r2, r1, #32
 800eda4:	3a41      	subs	r2, #65	; 0x41
 800eda6:	2a19      	cmp	r2, #25
 800eda8:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 800edac:	d90c      	bls.n	800edc8 <rmw_validate_full_topic_name+0x7c>
 800edae:	295f      	cmp	r1, #95	; 0x5f
 800edb0:	d00a      	beq.n	800edc8 <rmw_validate_full_topic_name+0x7c>
 800edb2:	f1bc 0f0a 	cmp.w	ip, #10
 800edb6:	d907      	bls.n	800edc8 <rmw_validate_full_topic_name+0x7c>
 800edb8:	2304      	movs	r3, #4
 800edba:	602b      	str	r3, [r5, #0]
 800edbc:	2e00      	cmp	r6, #0
 800edbe:	d0df      	beq.n	800ed80 <rmw_validate_full_topic_name+0x34>
 800edc0:	f8c6 8000 	str.w	r8, [r6]
 800edc4:	2000      	movs	r0, #0
 800edc6:	e7d5      	b.n	800ed74 <rmw_validate_full_topic_name+0x28>
 800edc8:	454b      	cmp	r3, r9
 800edca:	d1e5      	bne.n	800ed98 <rmw_validate_full_topic_name+0x4c>
 800edcc:	f8df e084 	ldr.w	lr, [pc, #132]	; 800ee54 <rmw_validate_full_topic_name+0x108>
 800edd0:	2300      	movs	r3, #0
 800edd2:	f107 0801 	add.w	r8, r7, #1
 800edd6:	e005      	b.n	800ede4 <rmw_validate_full_topic_name+0x98>
 800edd8:	4611      	mov	r1, r2
 800edda:	4288      	cmp	r0, r1
 800eddc:	4613      	mov	r3, r2
 800edde:	f104 0401 	add.w	r4, r4, #1
 800ede2:	d925      	bls.n	800ee30 <rmw_validate_full_topic_name+0xe4>
 800ede4:	429f      	cmp	r7, r3
 800ede6:	f103 0201 	add.w	r2, r3, #1
 800edea:	d01e      	beq.n	800ee2a <rmw_validate_full_topic_name+0xde>
 800edec:	7821      	ldrb	r1, [r4, #0]
 800edee:	292f      	cmp	r1, #47	; 0x2f
 800edf0:	d1f2      	bne.n	800edd8 <rmw_validate_full_topic_name+0x8c>
 800edf2:	f894 c001 	ldrb.w	ip, [r4, #1]
 800edf6:	1c5a      	adds	r2, r3, #1
 800edf8:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800edfc:	4611      	mov	r1, r2
 800edfe:	d024      	beq.n	800ee4a <rmw_validate_full_topic_name+0xfe>
 800ee00:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800ee04:	075b      	lsls	r3, r3, #29
 800ee06:	d5e8      	bpl.n	800edda <rmw_validate_full_topic_name+0x8e>
 800ee08:	2306      	movs	r3, #6
 800ee0a:	602b      	str	r3, [r5, #0]
 800ee0c:	2e00      	cmp	r6, #0
 800ee0e:	d0b7      	beq.n	800ed80 <rmw_validate_full_topic_name+0x34>
 800ee10:	6032      	str	r2, [r6, #0]
 800ee12:	2000      	movs	r0, #0
 800ee14:	e7ae      	b.n	800ed74 <rmw_validate_full_topic_name+0x28>
 800ee16:	200b      	movs	r0, #11
 800ee18:	4770      	bx	lr
 800ee1a:	200b      	movs	r0, #11
 800ee1c:	e7aa      	b.n	800ed74 <rmw_validate_full_topic_name+0x28>
 800ee1e:	2303      	movs	r3, #3
 800ee20:	602b      	str	r3, [r5, #0]
 800ee22:	2e00      	cmp	r6, #0
 800ee24:	d0ac      	beq.n	800ed80 <rmw_validate_full_topic_name+0x34>
 800ee26:	6037      	str	r7, [r6, #0]
 800ee28:	e7aa      	b.n	800ed80 <rmw_validate_full_topic_name+0x34>
 800ee2a:	4641      	mov	r1, r8
 800ee2c:	1c7a      	adds	r2, r7, #1
 800ee2e:	e7d4      	b.n	800edda <rmw_validate_full_topic_name+0x8e>
 800ee30:	28f7      	cmp	r0, #247	; 0xf7
 800ee32:	d802      	bhi.n	800ee3a <rmw_validate_full_topic_name+0xee>
 800ee34:	2000      	movs	r0, #0
 800ee36:	6028      	str	r0, [r5, #0]
 800ee38:	e79c      	b.n	800ed74 <rmw_validate_full_topic_name+0x28>
 800ee3a:	2307      	movs	r3, #7
 800ee3c:	602b      	str	r3, [r5, #0]
 800ee3e:	2e00      	cmp	r6, #0
 800ee40:	d09e      	beq.n	800ed80 <rmw_validate_full_topic_name+0x34>
 800ee42:	23f6      	movs	r3, #246	; 0xf6
 800ee44:	6033      	str	r3, [r6, #0]
 800ee46:	2000      	movs	r0, #0
 800ee48:	e794      	b.n	800ed74 <rmw_validate_full_topic_name+0x28>
 800ee4a:	2305      	movs	r3, #5
 800ee4c:	602b      	str	r3, [r5, #0]
 800ee4e:	2e00      	cmp	r6, #0
 800ee50:	d1de      	bne.n	800ee10 <rmw_validate_full_topic_name+0xc4>
 800ee52:	e795      	b.n	800ed80 <rmw_validate_full_topic_name+0x34>
 800ee54:	08019974 	.word	0x08019974

0800ee58 <rmw_uros_set_custom_transport>:
 800ee58:	b470      	push	{r4, r5, r6}
 800ee5a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800ee5e:	b162      	cbz	r2, 800ee7a <rmw_uros_set_custom_transport+0x22>
 800ee60:	b15b      	cbz	r3, 800ee7a <rmw_uros_set_custom_transport+0x22>
 800ee62:	b155      	cbz	r5, 800ee7a <rmw_uros_set_custom_transport+0x22>
 800ee64:	b14e      	cbz	r6, 800ee7a <rmw_uros_set_custom_transport+0x22>
 800ee66:	4c06      	ldr	r4, [pc, #24]	; (800ee80 <rmw_uros_set_custom_transport+0x28>)
 800ee68:	7020      	strb	r0, [r4, #0]
 800ee6a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800ee6e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ee72:	6166      	str	r6, [r4, #20]
 800ee74:	2000      	movs	r0, #0
 800ee76:	bc70      	pop	{r4, r5, r6}
 800ee78:	4770      	bx	lr
 800ee7a:	200b      	movs	r0, #11
 800ee7c:	bc70      	pop	{r4, r5, r6}
 800ee7e:	4770      	bx	lr
 800ee80:	2000a1d8 	.word	0x2000a1d8

0800ee84 <flush_session>:
 800ee84:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800ee86:	f001 bedb 	b.w	8010c40 <uxr_run_session_until_confirm_delivery>
 800ee8a:	bf00      	nop

0800ee8c <rmw_publish>:
 800ee8c:	2800      	cmp	r0, #0
 800ee8e:	d053      	beq.n	800ef38 <rmw_publish+0xac>
 800ee90:	b570      	push	{r4, r5, r6, lr}
 800ee92:	460d      	mov	r5, r1
 800ee94:	b08e      	sub	sp, #56	; 0x38
 800ee96:	2900      	cmp	r1, #0
 800ee98:	d04b      	beq.n	800ef32 <rmw_publish+0xa6>
 800ee9a:	4604      	mov	r4, r0
 800ee9c:	6800      	ldr	r0, [r0, #0]
 800ee9e:	f000 fd3d 	bl	800f91c <is_uxrce_rmw_identifier_valid>
 800eea2:	2800      	cmp	r0, #0
 800eea4:	d045      	beq.n	800ef32 <rmw_publish+0xa6>
 800eea6:	6866      	ldr	r6, [r4, #4]
 800eea8:	2e00      	cmp	r6, #0
 800eeaa:	d042      	beq.n	800ef32 <rmw_publish+0xa6>
 800eeac:	69b4      	ldr	r4, [r6, #24]
 800eeae:	4628      	mov	r0, r5
 800eeb0:	6923      	ldr	r3, [r4, #16]
 800eeb2:	4798      	blx	r3
 800eeb4:	69f3      	ldr	r3, [r6, #28]
 800eeb6:	9005      	str	r0, [sp, #20]
 800eeb8:	b113      	cbz	r3, 800eec0 <rmw_publish+0x34>
 800eeba:	a805      	add	r0, sp, #20
 800eebc:	4798      	blx	r3
 800eebe:	9805      	ldr	r0, [sp, #20]
 800eec0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800eec4:	691b      	ldr	r3, [r3, #16]
 800eec6:	9000      	str	r0, [sp, #0]
 800eec8:	6972      	ldr	r2, [r6, #20]
 800eeca:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800eecc:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800eed0:	ab06      	add	r3, sp, #24
 800eed2:	f002 fcbd 	bl	8011850 <uxr_prepare_output_stream>
 800eed6:	b1d8      	cbz	r0, 800ef10 <rmw_publish+0x84>
 800eed8:	68a3      	ldr	r3, [r4, #8]
 800eeda:	4628      	mov	r0, r5
 800eedc:	a906      	add	r1, sp, #24
 800eede:	4798      	blx	r3
 800eee0:	6a33      	ldr	r3, [r6, #32]
 800eee2:	4604      	mov	r4, r0
 800eee4:	b10b      	cbz	r3, 800eeea <rmw_publish+0x5e>
 800eee6:	a806      	add	r0, sp, #24
 800eee8:	4798      	blx	r3
 800eeea:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800eeee:	2b01      	cmp	r3, #1
 800eef0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800eef4:	d022      	beq.n	800ef3c <rmw_publish+0xb0>
 800eef6:	6918      	ldr	r0, [r3, #16]
 800eef8:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800eefa:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800eefe:	f001 fe9f 	bl	8010c40 <uxr_run_session_until_confirm_delivery>
 800ef02:	4020      	ands	r0, r4
 800ef04:	b2c4      	uxtb	r4, r0
 800ef06:	f084 0001 	eor.w	r0, r4, #1
 800ef0a:	b2c0      	uxtb	r0, r0
 800ef0c:	b00e      	add	sp, #56	; 0x38
 800ef0e:	bd70      	pop	{r4, r5, r6, pc}
 800ef10:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ef14:	4a0c      	ldr	r2, [pc, #48]	; (800ef48 <rmw_publish+0xbc>)
 800ef16:	6918      	ldr	r0, [r3, #16]
 800ef18:	9b05      	ldr	r3, [sp, #20]
 800ef1a:	9300      	str	r3, [sp, #0]
 800ef1c:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800ef20:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ef24:	6972      	ldr	r2, [r6, #20]
 800ef26:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800ef28:	ab06      	add	r3, sp, #24
 800ef2a:	f002 fcc1 	bl	80118b0 <uxr_prepare_output_stream_fragmented>
 800ef2e:	2800      	cmp	r0, #0
 800ef30:	d1d2      	bne.n	800eed8 <rmw_publish+0x4c>
 800ef32:	2001      	movs	r0, #1
 800ef34:	b00e      	add	sp, #56	; 0x38
 800ef36:	bd70      	pop	{r4, r5, r6, pc}
 800ef38:	2001      	movs	r0, #1
 800ef3a:	4770      	bx	lr
 800ef3c:	6918      	ldr	r0, [r3, #16]
 800ef3e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ef42:	f001 fafb 	bl	801053c <uxr_flash_output_streams>
 800ef46:	e7de      	b.n	800ef06 <rmw_publish+0x7a>
 800ef48:	0800ee85 	.word	0x0800ee85

0800ef4c <rmw_create_publisher>:
 800ef4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef50:	b087      	sub	sp, #28
 800ef52:	2800      	cmp	r0, #0
 800ef54:	f000 80cc 	beq.w	800f0f0 <rmw_create_publisher+0x1a4>
 800ef58:	460e      	mov	r6, r1
 800ef5a:	2900      	cmp	r1, #0
 800ef5c:	f000 80c8 	beq.w	800f0f0 <rmw_create_publisher+0x1a4>
 800ef60:	4604      	mov	r4, r0
 800ef62:	6800      	ldr	r0, [r0, #0]
 800ef64:	4615      	mov	r5, r2
 800ef66:	4698      	mov	r8, r3
 800ef68:	f000 fcd8 	bl	800f91c <is_uxrce_rmw_identifier_valid>
 800ef6c:	2800      	cmp	r0, #0
 800ef6e:	f000 80bf 	beq.w	800f0f0 <rmw_create_publisher+0x1a4>
 800ef72:	2d00      	cmp	r5, #0
 800ef74:	f000 80bc 	beq.w	800f0f0 <rmw_create_publisher+0x1a4>
 800ef78:	782b      	ldrb	r3, [r5, #0]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	f000 80b8 	beq.w	800f0f0 <rmw_create_publisher+0x1a4>
 800ef80:	f1b8 0f00 	cmp.w	r8, #0
 800ef84:	f000 80b4 	beq.w	800f0f0 <rmw_create_publisher+0x1a4>
 800ef88:	485c      	ldr	r0, [pc, #368]	; (800f0fc <rmw_create_publisher+0x1b0>)
 800ef8a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ef8e:	f005 f97d 	bl	801428c <get_memory>
 800ef92:	2800      	cmp	r0, #0
 800ef94:	f000 80ac 	beq.w	800f0f0 <rmw_create_publisher+0x1a4>
 800ef98:	68c4      	ldr	r4, [r0, #12]
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800efa0:	f005 f998 	bl	80142d4 <rmw_get_implementation_identifier>
 800efa4:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 800efa8:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800efac:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800efb0:	4628      	mov	r0, r5
 800efb2:	f7f1 f91f 	bl	80001f4 <strlen>
 800efb6:	3001      	adds	r0, #1
 800efb8:	283c      	cmp	r0, #60	; 0x3c
 800efba:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800efbe:	f200 8094 	bhi.w	800f0ea <rmw_create_publisher+0x19e>
 800efc2:	4a4f      	ldr	r2, [pc, #316]	; (800f100 <rmw_create_publisher+0x1b4>)
 800efc4:	462b      	mov	r3, r5
 800efc6:	213c      	movs	r1, #60	; 0x3c
 800efc8:	4650      	mov	r0, sl
 800efca:	f008 fe6f 	bl	8017cac <sniprintf>
 800efce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800efd2:	e9c4 391f 	strd	r3, r9, [r4, #124]	; 0x7c
 800efd6:	4641      	mov	r1, r8
 800efd8:	2250      	movs	r2, #80	; 0x50
 800efda:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800efde:	f009 f8ea 	bl	80181b6 <memcpy>
 800efe2:	f898 3008 	ldrb.w	r3, [r8, #8]
 800efe6:	4947      	ldr	r1, [pc, #284]	; (800f104 <rmw_create_publisher+0x1b8>)
 800efe8:	2b02      	cmp	r3, #2
 800efea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800efee:	bf0c      	ite	eq
 800eff0:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800eff4:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800eff8:	67a3      	str	r3, [r4, #120]	; 0x78
 800effa:	2300      	movs	r3, #0
 800effc:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800f000:	4630      	mov	r0, r6
 800f002:	f000 fc99 	bl	800f938 <get_message_typesupport_handle>
 800f006:	2800      	cmp	r0, #0
 800f008:	d06f      	beq.n	800f0ea <rmw_create_publisher+0x19e>
 800f00a:	6842      	ldr	r2, [r0, #4]
 800f00c:	61a2      	str	r2, [r4, #24]
 800f00e:	2a00      	cmp	r2, #0
 800f010:	d06b      	beq.n	800f0ea <rmw_create_publisher+0x19e>
 800f012:	4629      	mov	r1, r5
 800f014:	4643      	mov	r3, r8
 800f016:	4648      	mov	r0, r9
 800f018:	f005 fba6 	bl	8014768 <create_topic>
 800f01c:	6260      	str	r0, [r4, #36]	; 0x24
 800f01e:	2800      	cmp	r0, #0
 800f020:	d063      	beq.n	800f0ea <rmw_create_publisher+0x19e>
 800f022:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800f026:	f241 5398 	movw	r3, #5528	; 0x1598
 800f02a:	2103      	movs	r1, #3
 800f02c:	5ad0      	ldrh	r0, [r2, r3]
 800f02e:	1c45      	adds	r5, r0, #1
 800f030:	52d5      	strh	r5, [r2, r3]
 800f032:	f001 f811 	bl	8010058 <uxr_object_id>
 800f036:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f03a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800f03e:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800f042:	6912      	ldr	r2, [r2, #16]
 800f044:	6120      	str	r0, [r4, #16]
 800f046:	f04f 0a06 	mov.w	sl, #6
 800f04a:	f8cd a000 	str.w	sl, [sp]
 800f04e:	6819      	ldr	r1, [r3, #0]
 800f050:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f054:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 800f058:	6922      	ldr	r2, [r4, #16]
 800f05a:	f000 fead 	bl	800fdb8 <uxr_buffer_create_publisher_bin>
 800f05e:	4602      	mov	r2, r0
 800f060:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f064:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800f068:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800f06c:	f000 fbd6 	bl	800f81c <run_xrce_session>
 800f070:	b3b8      	cbz	r0, 800f0e2 <rmw_create_publisher+0x196>
 800f072:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800f076:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800f07a:	f241 539a 	movw	r3, #5530	; 0x159a
 800f07e:	2105      	movs	r1, #5
 800f080:	5ad0      	ldrh	r0, [r2, r3]
 800f082:	1c45      	adds	r5, r0, #1
 800f084:	52d5      	strh	r5, [r2, r3]
 800f086:	f000 ffe7 	bl	8010058 <uxr_object_id>
 800f08a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800f08e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f092:	6915      	ldr	r5, [r2, #16]
 800f094:	6160      	str	r0, [r4, #20]
 800f096:	ae04      	add	r6, sp, #16
 800f098:	4641      	mov	r1, r8
 800f09a:	4630      	mov	r0, r6
 800f09c:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800f0a0:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800f0a4:	f000 fbd6 	bl	800f854 <convert_qos_profile>
 800f0a8:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f0ac:	f8cd a00c 	str.w	sl, [sp, #12]
 800f0b0:	9001      	str	r0, [sp, #4]
 800f0b2:	f8ad 1008 	strh.w	r1, [sp, #8]
 800f0b6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800f0ba:	9300      	str	r3, [sp, #0]
 800f0bc:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
 800f0c0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800f0c4:	f8d8 1000 	ldr.w	r1, [r8]
 800f0c8:	4628      	mov	r0, r5
 800f0ca:	f000 fed3 	bl	800fe74 <uxr_buffer_create_datawriter_bin>
 800f0ce:	4602      	mov	r2, r0
 800f0d0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f0d4:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800f0d8:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800f0dc:	f000 fb9e 	bl	800f81c <run_xrce_session>
 800f0e0:	b938      	cbnz	r0, 800f0f2 <rmw_create_publisher+0x1a6>
 800f0e2:	4806      	ldr	r0, [pc, #24]	; (800f0fc <rmw_create_publisher+0x1b0>)
 800f0e4:	4621      	mov	r1, r4
 800f0e6:	f005 f8e1 	bl	80142ac <put_memory>
 800f0ea:	4638      	mov	r0, r7
 800f0ec:	f000 fae6 	bl	800f6bc <rmw_uxrce_fini_publisher_memory>
 800f0f0:	2700      	movs	r7, #0
 800f0f2:	4638      	mov	r0, r7
 800f0f4:	b007      	add	sp, #28
 800f0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0fa:	bf00      	nop
 800f0fc:	2000a208 	.word	0x2000a208
 800f100:	08019214 	.word	0x08019214
 800f104:	080191e0 	.word	0x080191e0

0800f108 <rmw_publisher_get_actual_qos>:
 800f108:	2000      	movs	r0, #0
 800f10a:	4770      	bx	lr

0800f10c <rmw_destroy_publisher>:
 800f10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f10e:	b128      	cbz	r0, 800f11c <rmw_destroy_publisher+0x10>
 800f110:	4604      	mov	r4, r0
 800f112:	6800      	ldr	r0, [r0, #0]
 800f114:	460d      	mov	r5, r1
 800f116:	f000 fc01 	bl	800f91c <is_uxrce_rmw_identifier_valid>
 800f11a:	b910      	cbnz	r0, 800f122 <rmw_destroy_publisher+0x16>
 800f11c:	2401      	movs	r4, #1
 800f11e:	4620      	mov	r0, r4
 800f120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f122:	6863      	ldr	r3, [r4, #4]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d0f9      	beq.n	800f11c <rmw_destroy_publisher+0x10>
 800f128:	2d00      	cmp	r5, #0
 800f12a:	d0f7      	beq.n	800f11c <rmw_destroy_publisher+0x10>
 800f12c:	6828      	ldr	r0, [r5, #0]
 800f12e:	f000 fbf5 	bl	800f91c <is_uxrce_rmw_identifier_valid>
 800f132:	2800      	cmp	r0, #0
 800f134:	d0f2      	beq.n	800f11c <rmw_destroy_publisher+0x10>
 800f136:	686c      	ldr	r4, [r5, #4]
 800f138:	2c00      	cmp	r4, #0
 800f13a:	d0ef      	beq.n	800f11c <rmw_destroy_publisher+0x10>
 800f13c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f13e:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800f142:	f005 fb73 	bl	801482c <destroy_topic>
 800f146:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800f14a:	6962      	ldr	r2, [r4, #20]
 800f14c:	6918      	ldr	r0, [r3, #16]
 800f14e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f152:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f156:	6819      	ldr	r1, [r3, #0]
 800f158:	f000 fd7c 	bl	800fc54 <uxr_buffer_delete_entity>
 800f15c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800f160:	6922      	ldr	r2, [r4, #16]
 800f162:	4603      	mov	r3, r0
 800f164:	6908      	ldr	r0, [r1, #16]
 800f166:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f16a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f16e:	6809      	ldr	r1, [r1, #0]
 800f170:	461c      	mov	r4, r3
 800f172:	f000 fd6f 	bl	800fc54 <uxr_buffer_delete_entity>
 800f176:	4606      	mov	r6, r0
 800f178:	6938      	ldr	r0, [r7, #16]
 800f17a:	4622      	mov	r2, r4
 800f17c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f180:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f184:	f000 fb4a 	bl	800f81c <run_xrce_session>
 800f188:	4604      	mov	r4, r0
 800f18a:	6938      	ldr	r0, [r7, #16]
 800f18c:	4632      	mov	r2, r6
 800f18e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f192:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f196:	f000 fb41 	bl	800f81c <run_xrce_session>
 800f19a:	b12c      	cbz	r4, 800f1a8 <rmw_destroy_publisher+0x9c>
 800f19c:	b120      	cbz	r0, 800f1a8 <rmw_destroy_publisher+0x9c>
 800f19e:	2400      	movs	r4, #0
 800f1a0:	4628      	mov	r0, r5
 800f1a2:	f000 fa8b 	bl	800f6bc <rmw_uxrce_fini_publisher_memory>
 800f1a6:	e7ba      	b.n	800f11e <rmw_destroy_publisher+0x12>
 800f1a8:	2402      	movs	r4, #2
 800f1aa:	e7f9      	b.n	800f1a0 <rmw_destroy_publisher+0x94>

0800f1ac <rmw_create_subscription>:
 800f1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1b0:	b08d      	sub	sp, #52	; 0x34
 800f1b2:	2800      	cmp	r0, #0
 800f1b4:	f000 80cf 	beq.w	800f356 <rmw_create_subscription+0x1aa>
 800f1b8:	460e      	mov	r6, r1
 800f1ba:	2900      	cmp	r1, #0
 800f1bc:	f000 80cb 	beq.w	800f356 <rmw_create_subscription+0x1aa>
 800f1c0:	4604      	mov	r4, r0
 800f1c2:	6800      	ldr	r0, [r0, #0]
 800f1c4:	4615      	mov	r5, r2
 800f1c6:	4698      	mov	r8, r3
 800f1c8:	f000 fba8 	bl	800f91c <is_uxrce_rmw_identifier_valid>
 800f1cc:	2800      	cmp	r0, #0
 800f1ce:	f000 80c2 	beq.w	800f356 <rmw_create_subscription+0x1aa>
 800f1d2:	2d00      	cmp	r5, #0
 800f1d4:	f000 80bf 	beq.w	800f356 <rmw_create_subscription+0x1aa>
 800f1d8:	782b      	ldrb	r3, [r5, #0]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	f000 80bb 	beq.w	800f356 <rmw_create_subscription+0x1aa>
 800f1e0:	f1b8 0f00 	cmp.w	r8, #0
 800f1e4:	f000 80b7 	beq.w	800f356 <rmw_create_subscription+0x1aa>
 800f1e8:	485d      	ldr	r0, [pc, #372]	; (800f360 <rmw_create_subscription+0x1b4>)
 800f1ea:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f1ee:	f005 f84d 	bl	801428c <get_memory>
 800f1f2:	4604      	mov	r4, r0
 800f1f4:	2800      	cmp	r0, #0
 800f1f6:	f000 80af 	beq.w	800f358 <rmw_create_subscription+0x1ac>
 800f1fa:	68c7      	ldr	r7, [r0, #12]
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f202:	f005 f867 	bl	80142d4 <rmw_get_implementation_identifier>
 800f206:	f107 0a94 	add.w	sl, r7, #148	; 0x94
 800f20a:	67f8      	str	r0, [r7, #124]	; 0x7c
 800f20c:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 800f210:	4628      	mov	r0, r5
 800f212:	f7f0 ffef 	bl	80001f4 <strlen>
 800f216:	3001      	adds	r0, #1
 800f218:	283c      	cmp	r0, #60	; 0x3c
 800f21a:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 800f21e:	f200 8097 	bhi.w	800f350 <rmw_create_subscription+0x1a4>
 800f222:	4a50      	ldr	r2, [pc, #320]	; (800f364 <rmw_create_subscription+0x1b8>)
 800f224:	462b      	mov	r3, r5
 800f226:	213c      	movs	r1, #60	; 0x3c
 800f228:	4650      	mov	r0, sl
 800f22a:	f008 fd3f 	bl	8017cac <sniprintf>
 800f22e:	4641      	mov	r1, r8
 800f230:	f8c7 9020 	str.w	r9, [r7, #32]
 800f234:	2250      	movs	r2, #80	; 0x50
 800f236:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800f23a:	f008 ffbc 	bl	80181b6 <memcpy>
 800f23e:	494a      	ldr	r1, [pc, #296]	; (800f368 <rmw_create_subscription+0x1bc>)
 800f240:	4630      	mov	r0, r6
 800f242:	f000 fb79 	bl	800f938 <get_message_typesupport_handle>
 800f246:	2800      	cmp	r0, #0
 800f248:	f000 8082 	beq.w	800f350 <rmw_create_subscription+0x1a4>
 800f24c:	6842      	ldr	r2, [r0, #4]
 800f24e:	61ba      	str	r2, [r7, #24]
 800f250:	2a00      	cmp	r2, #0
 800f252:	d07d      	beq.n	800f350 <rmw_create_subscription+0x1a4>
 800f254:	4629      	mov	r1, r5
 800f256:	4643      	mov	r3, r8
 800f258:	4648      	mov	r0, r9
 800f25a:	f005 fa85 	bl	8014768 <create_topic>
 800f25e:	61f8      	str	r0, [r7, #28]
 800f260:	2800      	cmp	r0, #0
 800f262:	d075      	beq.n	800f350 <rmw_create_subscription+0x1a4>
 800f264:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800f268:	f241 539c 	movw	r3, #5532	; 0x159c
 800f26c:	2104      	movs	r1, #4
 800f26e:	5ad0      	ldrh	r0, [r2, r3]
 800f270:	1c45      	adds	r5, r0, #1
 800f272:	52d5      	strh	r5, [r2, r3]
 800f274:	f000 fef0 	bl	8010058 <uxr_object_id>
 800f278:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f27c:	6138      	str	r0, [r7, #16]
 800f27e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800f282:	2606      	movs	r6, #6
 800f284:	9600      	str	r6, [sp, #0]
 800f286:	6811      	ldr	r1, [r2, #0]
 800f288:	693a      	ldr	r2, [r7, #16]
 800f28a:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800f28e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f292:	f000 fdbf 	bl	800fe14 <uxr_buffer_create_subscriber_bin>
 800f296:	4602      	mov	r2, r0
 800f298:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f29c:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800f2a0:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800f2a4:	f000 faba 	bl	800f81c <run_xrce_session>
 800f2a8:	2800      	cmp	r0, #0
 800f2aa:	d04d      	beq.n	800f348 <rmw_create_subscription+0x19c>
 800f2ac:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800f2b0:	f241 539e 	movw	r3, #5534	; 0x159e
 800f2b4:	4631      	mov	r1, r6
 800f2b6:	5ad0      	ldrh	r0, [r2, r3]
 800f2b8:	1c45      	adds	r5, r0, #1
 800f2ba:	52d5      	strh	r5, [r2, r3]
 800f2bc:	f000 fecc 	bl	8010058 <uxr_object_id>
 800f2c0:	ad08      	add	r5, sp, #32
 800f2c2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f2c6:	69fb      	ldr	r3, [r7, #28]
 800f2c8:	6178      	str	r0, [r7, #20]
 800f2ca:	4641      	mov	r1, r8
 800f2cc:	4628      	mov	r0, r5
 800f2ce:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 800f2d2:	9305      	str	r3, [sp, #20]
 800f2d4:	f000 fabe 	bl	800f854 <convert_qos_profile>
 800f2d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f2dc:	9b05      	ldr	r3, [sp, #20]
 800f2de:	9001      	str	r0, [sp, #4]
 800f2e0:	9603      	str	r6, [sp, #12]
 800f2e2:	f8ad 1008 	strh.w	r1, [sp, #8]
 800f2e6:	691b      	ldr	r3, [r3, #16]
 800f2e8:	9300      	str	r3, [sp, #0]
 800f2ea:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800f2ee:	f8db 1000 	ldr.w	r1, [fp]
 800f2f2:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 800f2f6:	f000 fe35 	bl	800ff64 <uxr_buffer_create_datareader_bin>
 800f2fa:	4602      	mov	r2, r0
 800f2fc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f300:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800f304:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800f308:	f000 fa88 	bl	800f81c <run_xrce_session>
 800f30c:	b1e0      	cbz	r0, 800f348 <rmw_create_subscription+0x19c>
 800f30e:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 800f312:	f898 3008 	ldrb.w	r3, [r8, #8]
 800f316:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f31a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f31e:	2200      	movs	r2, #0
 800f320:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 800f324:	2b02      	cmp	r3, #2
 800f326:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800f32a:	bf0c      	ite	eq
 800f32c:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 800f330:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 800f334:	9307      	str	r3, [sp, #28]
 800f336:	aa0a      	add	r2, sp, #40	; 0x28
 800f338:	9200      	str	r2, [sp, #0]
 800f33a:	697a      	ldr	r2, [r7, #20]
 800f33c:	6809      	ldr	r1, [r1, #0]
 800f33e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f342:	f000 feb7 	bl	80100b4 <uxr_buffer_request_data>
 800f346:	e007      	b.n	800f358 <rmw_create_subscription+0x1ac>
 800f348:	4805      	ldr	r0, [pc, #20]	; (800f360 <rmw_create_subscription+0x1b4>)
 800f34a:	4639      	mov	r1, r7
 800f34c:	f004 ffae 	bl	80142ac <put_memory>
 800f350:	4620      	mov	r0, r4
 800f352:	f000 f9c9 	bl	800f6e8 <rmw_uxrce_fini_subscription_memory>
 800f356:	2400      	movs	r4, #0
 800f358:	4620      	mov	r0, r4
 800f35a:	b00d      	add	sp, #52	; 0x34
 800f35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f360:	2000d464 	.word	0x2000d464
 800f364:	08019214 	.word	0x08019214
 800f368:	080191e0 	.word	0x080191e0

0800f36c <rmw_subscription_get_actual_qos>:
 800f36c:	2000      	movs	r0, #0
 800f36e:	4770      	bx	lr

0800f370 <rmw_destroy_subscription>:
 800f370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f372:	b128      	cbz	r0, 800f380 <rmw_destroy_subscription+0x10>
 800f374:	4604      	mov	r4, r0
 800f376:	6800      	ldr	r0, [r0, #0]
 800f378:	460d      	mov	r5, r1
 800f37a:	f000 facf 	bl	800f91c <is_uxrce_rmw_identifier_valid>
 800f37e:	b910      	cbnz	r0, 800f386 <rmw_destroy_subscription+0x16>
 800f380:	2401      	movs	r4, #1
 800f382:	4620      	mov	r0, r4
 800f384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f386:	6863      	ldr	r3, [r4, #4]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d0f9      	beq.n	800f380 <rmw_destroy_subscription+0x10>
 800f38c:	2d00      	cmp	r5, #0
 800f38e:	d0f7      	beq.n	800f380 <rmw_destroy_subscription+0x10>
 800f390:	6828      	ldr	r0, [r5, #0]
 800f392:	f000 fac3 	bl	800f91c <is_uxrce_rmw_identifier_valid>
 800f396:	2800      	cmp	r0, #0
 800f398:	d0f2      	beq.n	800f380 <rmw_destroy_subscription+0x10>
 800f39a:	686c      	ldr	r4, [r5, #4]
 800f39c:	2c00      	cmp	r4, #0
 800f39e:	d0ef      	beq.n	800f380 <rmw_destroy_subscription+0x10>
 800f3a0:	6a26      	ldr	r6, [r4, #32]
 800f3a2:	6962      	ldr	r2, [r4, #20]
 800f3a4:	6930      	ldr	r0, [r6, #16]
 800f3a6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f3aa:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f3ae:	6819      	ldr	r1, [r3, #0]
 800f3b0:	f000 feba 	bl	8010128 <uxr_buffer_cancel_data>
 800f3b4:	4602      	mov	r2, r0
 800f3b6:	6930      	ldr	r0, [r6, #16]
 800f3b8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f3bc:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f3c0:	f000 fa2c 	bl	800f81c <run_xrce_session>
 800f3c4:	69e0      	ldr	r0, [r4, #28]
 800f3c6:	f005 fa31 	bl	801482c <destroy_topic>
 800f3ca:	6a23      	ldr	r3, [r4, #32]
 800f3cc:	6962      	ldr	r2, [r4, #20]
 800f3ce:	6918      	ldr	r0, [r3, #16]
 800f3d0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f3d4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f3d8:	6819      	ldr	r1, [r3, #0]
 800f3da:	f000 fc3b 	bl	800fc54 <uxr_buffer_delete_entity>
 800f3de:	6a21      	ldr	r1, [r4, #32]
 800f3e0:	6922      	ldr	r2, [r4, #16]
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	6908      	ldr	r0, [r1, #16]
 800f3e6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f3ea:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f3ee:	6809      	ldr	r1, [r1, #0]
 800f3f0:	461c      	mov	r4, r3
 800f3f2:	f000 fc2f 	bl	800fc54 <uxr_buffer_delete_entity>
 800f3f6:	4607      	mov	r7, r0
 800f3f8:	6930      	ldr	r0, [r6, #16]
 800f3fa:	4622      	mov	r2, r4
 800f3fc:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f400:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f404:	f000 fa0a 	bl	800f81c <run_xrce_session>
 800f408:	4604      	mov	r4, r0
 800f40a:	6930      	ldr	r0, [r6, #16]
 800f40c:	463a      	mov	r2, r7
 800f40e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f412:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f416:	f000 fa01 	bl	800f81c <run_xrce_session>
 800f41a:	b12c      	cbz	r4, 800f428 <rmw_destroy_subscription+0xb8>
 800f41c:	b120      	cbz	r0, 800f428 <rmw_destroy_subscription+0xb8>
 800f41e:	2400      	movs	r4, #0
 800f420:	4628      	mov	r0, r5
 800f422:	f000 f961 	bl	800f6e8 <rmw_uxrce_fini_subscription_memory>
 800f426:	e7ac      	b.n	800f382 <rmw_destroy_subscription+0x12>
 800f428:	2402      	movs	r4, #2
 800f42a:	e7f9      	b.n	800f420 <rmw_destroy_subscription+0xb0>

0800f42c <rmw_uxrce_init_service_memory>:
 800f42c:	b1b2      	cbz	r2, 800f45c <rmw_uxrce_init_service_memory+0x30>
 800f42e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f430:	7a07      	ldrb	r7, [r0, #8]
 800f432:	4605      	mov	r5, r0
 800f434:	b98f      	cbnz	r7, 800f45a <rmw_uxrce_init_service_memory+0x2e>
 800f436:	e9c0 7700 	strd	r7, r7, [r0]
 800f43a:	460c      	mov	r4, r1
 800f43c:	23c8      	movs	r3, #200	; 0xc8
 800f43e:	2101      	movs	r1, #1
 800f440:	fb03 4602 	mla	r6, r3, r2, r4
 800f444:	60c3      	str	r3, [r0, #12]
 800f446:	7201      	strb	r1, [r0, #8]
 800f448:	4621      	mov	r1, r4
 800f44a:	4628      	mov	r0, r5
 800f44c:	f004 ff2e 	bl	80142ac <put_memory>
 800f450:	60e4      	str	r4, [r4, #12]
 800f452:	f804 7bc8 	strb.w	r7, [r4], #200
 800f456:	42a6      	cmp	r6, r4
 800f458:	d1f6      	bne.n	800f448 <rmw_uxrce_init_service_memory+0x1c>
 800f45a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f45c:	4770      	bx	lr
 800f45e:	bf00      	nop

0800f460 <rmw_uxrce_init_client_memory>:
 800f460:	b1b2      	cbz	r2, 800f490 <rmw_uxrce_init_client_memory+0x30>
 800f462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f464:	7a07      	ldrb	r7, [r0, #8]
 800f466:	4605      	mov	r5, r0
 800f468:	b98f      	cbnz	r7, 800f48e <rmw_uxrce_init_client_memory+0x2e>
 800f46a:	e9c0 7700 	strd	r7, r7, [r0]
 800f46e:	460c      	mov	r4, r1
 800f470:	23c8      	movs	r3, #200	; 0xc8
 800f472:	2101      	movs	r1, #1
 800f474:	fb03 4602 	mla	r6, r3, r2, r4
 800f478:	60c3      	str	r3, [r0, #12]
 800f47a:	7201      	strb	r1, [r0, #8]
 800f47c:	4621      	mov	r1, r4
 800f47e:	4628      	mov	r0, r5
 800f480:	f004 ff14 	bl	80142ac <put_memory>
 800f484:	60e4      	str	r4, [r4, #12]
 800f486:	f804 7bc8 	strb.w	r7, [r4], #200
 800f48a:	42a6      	cmp	r6, r4
 800f48c:	d1f6      	bne.n	800f47c <rmw_uxrce_init_client_memory+0x1c>
 800f48e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f490:	4770      	bx	lr
 800f492:	bf00      	nop

0800f494 <rmw_uxrce_init_publisher_memory>:
 800f494:	b1b2      	cbz	r2, 800f4c4 <rmw_uxrce_init_publisher_memory+0x30>
 800f496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f498:	7a07      	ldrb	r7, [r0, #8]
 800f49a:	4605      	mov	r5, r0
 800f49c:	b98f      	cbnz	r7, 800f4c2 <rmw_uxrce_init_publisher_memory+0x2e>
 800f49e:	e9c0 7700 	strd	r7, r7, [r0]
 800f4a2:	460c      	mov	r4, r1
 800f4a4:	23d8      	movs	r3, #216	; 0xd8
 800f4a6:	2101      	movs	r1, #1
 800f4a8:	fb03 4602 	mla	r6, r3, r2, r4
 800f4ac:	60c3      	str	r3, [r0, #12]
 800f4ae:	7201      	strb	r1, [r0, #8]
 800f4b0:	4621      	mov	r1, r4
 800f4b2:	4628      	mov	r0, r5
 800f4b4:	f004 fefa 	bl	80142ac <put_memory>
 800f4b8:	60e4      	str	r4, [r4, #12]
 800f4ba:	f804 7bd8 	strb.w	r7, [r4], #216
 800f4be:	42a6      	cmp	r6, r4
 800f4c0:	d1f6      	bne.n	800f4b0 <rmw_uxrce_init_publisher_memory+0x1c>
 800f4c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4c4:	4770      	bx	lr
 800f4c6:	bf00      	nop

0800f4c8 <rmw_uxrce_init_subscription_memory>:
 800f4c8:	b1b2      	cbz	r2, 800f4f8 <rmw_uxrce_init_subscription_memory+0x30>
 800f4ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4cc:	7a07      	ldrb	r7, [r0, #8]
 800f4ce:	4605      	mov	r5, r0
 800f4d0:	b98f      	cbnz	r7, 800f4f6 <rmw_uxrce_init_subscription_memory+0x2e>
 800f4d2:	e9c0 7700 	strd	r7, r7, [r0]
 800f4d6:	460c      	mov	r4, r1
 800f4d8:	23d0      	movs	r3, #208	; 0xd0
 800f4da:	2101      	movs	r1, #1
 800f4dc:	fb03 4602 	mla	r6, r3, r2, r4
 800f4e0:	60c3      	str	r3, [r0, #12]
 800f4e2:	7201      	strb	r1, [r0, #8]
 800f4e4:	4621      	mov	r1, r4
 800f4e6:	4628      	mov	r0, r5
 800f4e8:	f004 fee0 	bl	80142ac <put_memory>
 800f4ec:	60e4      	str	r4, [r4, #12]
 800f4ee:	f804 7bd0 	strb.w	r7, [r4], #208
 800f4f2:	42a6      	cmp	r6, r4
 800f4f4:	d1f6      	bne.n	800f4e4 <rmw_uxrce_init_subscription_memory+0x1c>
 800f4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4f8:	4770      	bx	lr
 800f4fa:	bf00      	nop

0800f4fc <rmw_uxrce_init_node_memory>:
 800f4fc:	b1b2      	cbz	r2, 800f52c <rmw_uxrce_init_node_memory+0x30>
 800f4fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f500:	7a07      	ldrb	r7, [r0, #8]
 800f502:	4605      	mov	r5, r0
 800f504:	b98f      	cbnz	r7, 800f52a <rmw_uxrce_init_node_memory+0x2e>
 800f506:	e9c0 7700 	strd	r7, r7, [r0]
 800f50a:	460c      	mov	r4, r1
 800f50c:	23a4      	movs	r3, #164	; 0xa4
 800f50e:	2101      	movs	r1, #1
 800f510:	fb03 4602 	mla	r6, r3, r2, r4
 800f514:	60c3      	str	r3, [r0, #12]
 800f516:	7201      	strb	r1, [r0, #8]
 800f518:	4621      	mov	r1, r4
 800f51a:	4628      	mov	r0, r5
 800f51c:	f004 fec6 	bl	80142ac <put_memory>
 800f520:	60e4      	str	r4, [r4, #12]
 800f522:	f804 7ba4 	strb.w	r7, [r4], #164
 800f526:	42a6      	cmp	r6, r4
 800f528:	d1f6      	bne.n	800f518 <rmw_uxrce_init_node_memory+0x1c>
 800f52a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f52c:	4770      	bx	lr
 800f52e:	bf00      	nop

0800f530 <rmw_uxrce_init_session_memory>:
 800f530:	b1d2      	cbz	r2, 800f568 <rmw_uxrce_init_session_memory+0x38>
 800f532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f536:	7a07      	ldrb	r7, [r0, #8]
 800f538:	4605      	mov	r5, r0
 800f53a:	b99f      	cbnz	r7, 800f564 <rmw_uxrce_init_session_memory+0x34>
 800f53c:	e9c0 7700 	strd	r7, r7, [r0]
 800f540:	f241 53a8 	movw	r3, #5544	; 0x15a8
 800f544:	460c      	mov	r4, r1
 800f546:	2101      	movs	r1, #1
 800f548:	fb03 4602 	mla	r6, r3, r2, r4
 800f54c:	60c3      	str	r3, [r0, #12]
 800f54e:	4698      	mov	r8, r3
 800f550:	7201      	strb	r1, [r0, #8]
 800f552:	4621      	mov	r1, r4
 800f554:	4628      	mov	r0, r5
 800f556:	f004 fea9 	bl	80142ac <put_memory>
 800f55a:	60e4      	str	r4, [r4, #12]
 800f55c:	7027      	strb	r7, [r4, #0]
 800f55e:	4444      	add	r4, r8
 800f560:	42a6      	cmp	r6, r4
 800f562:	d1f6      	bne.n	800f552 <rmw_uxrce_init_session_memory+0x22>
 800f564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f568:	4770      	bx	lr
 800f56a:	bf00      	nop

0800f56c <rmw_uxrce_init_topic_memory>:
 800f56c:	b1c2      	cbz	r2, 800f5a0 <rmw_uxrce_init_topic_memory+0x34>
 800f56e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f570:	7a07      	ldrb	r7, [r0, #8]
 800f572:	4606      	mov	r6, r0
 800f574:	b99f      	cbnz	r7, 800f59e <rmw_uxrce_init_topic_memory+0x32>
 800f576:	e9c0 7700 	strd	r7, r7, [r0]
 800f57a:	460c      	mov	r4, r1
 800f57c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800f580:	2101      	movs	r1, #1
 800f582:	231c      	movs	r3, #28
 800f584:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f588:	7201      	strb	r1, [r0, #8]
 800f58a:	60c3      	str	r3, [r0, #12]
 800f58c:	4621      	mov	r1, r4
 800f58e:	4630      	mov	r0, r6
 800f590:	f004 fe8c 	bl	80142ac <put_memory>
 800f594:	60e4      	str	r4, [r4, #12]
 800f596:	f804 7b1c 	strb.w	r7, [r4], #28
 800f59a:	42a5      	cmp	r5, r4
 800f59c:	d1f6      	bne.n	800f58c <rmw_uxrce_init_topic_memory+0x20>
 800f59e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5a0:	4770      	bx	lr
 800f5a2:	bf00      	nop

0800f5a4 <rmw_uxrce_init_static_input_buffer_memory>:
 800f5a4:	b1d2      	cbz	r2, 800f5dc <rmw_uxrce_init_static_input_buffer_memory+0x38>
 800f5a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5a8:	7a07      	ldrb	r7, [r0, #8]
 800f5aa:	4606      	mov	r6, r0
 800f5ac:	b9af      	cbnz	r7, 800f5da <rmw_uxrce_init_static_input_buffer_memory+0x36>
 800f5ae:	e9c0 7700 	strd	r7, r7, [r0]
 800f5b2:	460c      	mov	r4, r1
 800f5b4:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 800f5b8:	2101      	movs	r1, #1
 800f5ba:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800f5be:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 800f5c2:	7201      	strb	r1, [r0, #8]
 800f5c4:	60c3      	str	r3, [r0, #12]
 800f5c6:	4621      	mov	r1, r4
 800f5c8:	4630      	mov	r0, r6
 800f5ca:	f004 fe6f 	bl	80142ac <put_memory>
 800f5ce:	60e4      	str	r4, [r4, #12]
 800f5d0:	7027      	strb	r7, [r4, #0]
 800f5d2:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800f5d6:	42a5      	cmp	r5, r4
 800f5d8:	d1f5      	bne.n	800f5c6 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800f5da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5dc:	4770      	bx	lr
 800f5de:	bf00      	nop

0800f5e0 <rmw_uxrce_init_init_options_impl_memory>:
 800f5e0:	b1b2      	cbz	r2, 800f610 <rmw_uxrce_init_init_options_impl_memory+0x30>
 800f5e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5e4:	7a07      	ldrb	r7, [r0, #8]
 800f5e6:	4605      	mov	r5, r0
 800f5e8:	b98f      	cbnz	r7, 800f60e <rmw_uxrce_init_init_options_impl_memory+0x2e>
 800f5ea:	e9c0 7700 	strd	r7, r7, [r0]
 800f5ee:	460c      	mov	r4, r1
 800f5f0:	232c      	movs	r3, #44	; 0x2c
 800f5f2:	2101      	movs	r1, #1
 800f5f4:	fb03 4602 	mla	r6, r3, r2, r4
 800f5f8:	60c3      	str	r3, [r0, #12]
 800f5fa:	7201      	strb	r1, [r0, #8]
 800f5fc:	4621      	mov	r1, r4
 800f5fe:	4628      	mov	r0, r5
 800f600:	f004 fe54 	bl	80142ac <put_memory>
 800f604:	60e4      	str	r4, [r4, #12]
 800f606:	f804 7b2c 	strb.w	r7, [r4], #44
 800f60a:	42a6      	cmp	r6, r4
 800f60c:	d1f6      	bne.n	800f5fc <rmw_uxrce_init_init_options_impl_memory+0x1c>
 800f60e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f610:	4770      	bx	lr
 800f612:	bf00      	nop

0800f614 <rmw_uxrce_init_wait_set_memory>:
 800f614:	b1c2      	cbz	r2, 800f648 <rmw_uxrce_init_wait_set_memory+0x34>
 800f616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f618:	7a07      	ldrb	r7, [r0, #8]
 800f61a:	4606      	mov	r6, r0
 800f61c:	b99f      	cbnz	r7, 800f646 <rmw_uxrce_init_wait_set_memory+0x32>
 800f61e:	e9c0 7700 	strd	r7, r7, [r0]
 800f622:	460c      	mov	r4, r1
 800f624:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800f628:	2101      	movs	r1, #1
 800f62a:	231c      	movs	r3, #28
 800f62c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f630:	7201      	strb	r1, [r0, #8]
 800f632:	60c3      	str	r3, [r0, #12]
 800f634:	4621      	mov	r1, r4
 800f636:	4630      	mov	r0, r6
 800f638:	f004 fe38 	bl	80142ac <put_memory>
 800f63c:	60e4      	str	r4, [r4, #12]
 800f63e:	f804 7b1c 	strb.w	r7, [r4], #28
 800f642:	42a5      	cmp	r5, r4
 800f644:	d1f6      	bne.n	800f634 <rmw_uxrce_init_wait_set_memory+0x20>
 800f646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f648:	4770      	bx	lr
 800f64a:	bf00      	nop

0800f64c <rmw_uxrce_init_guard_condition_memory>:
 800f64c:	b1b2      	cbz	r2, 800f67c <rmw_uxrce_init_guard_condition_memory+0x30>
 800f64e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f650:	7a07      	ldrb	r7, [r0, #8]
 800f652:	4605      	mov	r5, r0
 800f654:	b98f      	cbnz	r7, 800f67a <rmw_uxrce_init_guard_condition_memory+0x2e>
 800f656:	e9c0 7700 	strd	r7, r7, [r0]
 800f65a:	460c      	mov	r4, r1
 800f65c:	2320      	movs	r3, #32
 800f65e:	2101      	movs	r1, #1
 800f660:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 800f664:	7201      	strb	r1, [r0, #8]
 800f666:	60c3      	str	r3, [r0, #12]
 800f668:	4621      	mov	r1, r4
 800f66a:	4628      	mov	r0, r5
 800f66c:	f004 fe1e 	bl	80142ac <put_memory>
 800f670:	60e4      	str	r4, [r4, #12]
 800f672:	f804 7b20 	strb.w	r7, [r4], #32
 800f676:	42a6      	cmp	r6, r4
 800f678:	d1f6      	bne.n	800f668 <rmw_uxrce_init_guard_condition_memory+0x1c>
 800f67a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f67c:	4770      	bx	lr
 800f67e:	bf00      	nop

0800f680 <rmw_uxrce_fini_session_memory>:
 800f680:	4601      	mov	r1, r0
 800f682:	4801      	ldr	r0, [pc, #4]	; (800f688 <rmw_uxrce_fini_session_memory+0x8>)
 800f684:	f004 be12 	b.w	80142ac <put_memory>
 800f688:	2000d3a0 	.word	0x2000d3a0

0800f68c <rmw_uxrce_fini_node_memory>:
 800f68c:	b538      	push	{r3, r4, r5, lr}
 800f68e:	4604      	mov	r4, r0
 800f690:	6800      	ldr	r0, [r0, #0]
 800f692:	b128      	cbz	r0, 800f6a0 <rmw_uxrce_fini_node_memory+0x14>
 800f694:	4b07      	ldr	r3, [pc, #28]	; (800f6b4 <rmw_uxrce_fini_node_memory+0x28>)
 800f696:	6819      	ldr	r1, [r3, #0]
 800f698:	f7f0 fda2 	bl	80001e0 <strcmp>
 800f69c:	b940      	cbnz	r0, 800f6b0 <rmw_uxrce_fini_node_memory+0x24>
 800f69e:	6020      	str	r0, [r4, #0]
 800f6a0:	6861      	ldr	r1, [r4, #4]
 800f6a2:	b129      	cbz	r1, 800f6b0 <rmw_uxrce_fini_node_memory+0x24>
 800f6a4:	2500      	movs	r5, #0
 800f6a6:	4804      	ldr	r0, [pc, #16]	; (800f6b8 <rmw_uxrce_fini_node_memory+0x2c>)
 800f6a8:	610d      	str	r5, [r1, #16]
 800f6aa:	f004 fdff 	bl	80142ac <put_memory>
 800f6ae:	6065      	str	r5, [r4, #4]
 800f6b0:	bd38      	pop	{r3, r4, r5, pc}
 800f6b2:	bf00      	nop
 800f6b4:	080196e8 	.word	0x080196e8
 800f6b8:	2000d1cc 	.word	0x2000d1cc

0800f6bc <rmw_uxrce_fini_publisher_memory>:
 800f6bc:	b510      	push	{r4, lr}
 800f6be:	4604      	mov	r4, r0
 800f6c0:	6800      	ldr	r0, [r0, #0]
 800f6c2:	b128      	cbz	r0, 800f6d0 <rmw_uxrce_fini_publisher_memory+0x14>
 800f6c4:	4b06      	ldr	r3, [pc, #24]	; (800f6e0 <rmw_uxrce_fini_publisher_memory+0x24>)
 800f6c6:	6819      	ldr	r1, [r3, #0]
 800f6c8:	f7f0 fd8a 	bl	80001e0 <strcmp>
 800f6cc:	b938      	cbnz	r0, 800f6de <rmw_uxrce_fini_publisher_memory+0x22>
 800f6ce:	6020      	str	r0, [r4, #0]
 800f6d0:	6861      	ldr	r1, [r4, #4]
 800f6d2:	b121      	cbz	r1, 800f6de <rmw_uxrce_fini_publisher_memory+0x22>
 800f6d4:	4803      	ldr	r0, [pc, #12]	; (800f6e4 <rmw_uxrce_fini_publisher_memory+0x28>)
 800f6d6:	f004 fde9 	bl	80142ac <put_memory>
 800f6da:	2300      	movs	r3, #0
 800f6dc:	6063      	str	r3, [r4, #4]
 800f6de:	bd10      	pop	{r4, pc}
 800f6e0:	080196e8 	.word	0x080196e8
 800f6e4:	2000a208 	.word	0x2000a208

0800f6e8 <rmw_uxrce_fini_subscription_memory>:
 800f6e8:	b510      	push	{r4, lr}
 800f6ea:	4604      	mov	r4, r0
 800f6ec:	6800      	ldr	r0, [r0, #0]
 800f6ee:	b128      	cbz	r0, 800f6fc <rmw_uxrce_fini_subscription_memory+0x14>
 800f6f0:	4b06      	ldr	r3, [pc, #24]	; (800f70c <rmw_uxrce_fini_subscription_memory+0x24>)
 800f6f2:	6819      	ldr	r1, [r3, #0]
 800f6f4:	f7f0 fd74 	bl	80001e0 <strcmp>
 800f6f8:	b938      	cbnz	r0, 800f70a <rmw_uxrce_fini_subscription_memory+0x22>
 800f6fa:	6020      	str	r0, [r4, #0]
 800f6fc:	6861      	ldr	r1, [r4, #4]
 800f6fe:	b121      	cbz	r1, 800f70a <rmw_uxrce_fini_subscription_memory+0x22>
 800f700:	4803      	ldr	r0, [pc, #12]	; (800f710 <rmw_uxrce_fini_subscription_memory+0x28>)
 800f702:	f004 fdd3 	bl	80142ac <put_memory>
 800f706:	2300      	movs	r3, #0
 800f708:	6063      	str	r3, [r4, #4]
 800f70a:	bd10      	pop	{r4, pc}
 800f70c:	080196e8 	.word	0x080196e8
 800f710:	2000d464 	.word	0x2000d464

0800f714 <rmw_uxrce_fini_service_memory>:
 800f714:	b510      	push	{r4, lr}
 800f716:	4604      	mov	r4, r0
 800f718:	6800      	ldr	r0, [r0, #0]
 800f71a:	b128      	cbz	r0, 800f728 <rmw_uxrce_fini_service_memory+0x14>
 800f71c:	4b06      	ldr	r3, [pc, #24]	; (800f738 <rmw_uxrce_fini_service_memory+0x24>)
 800f71e:	6819      	ldr	r1, [r3, #0]
 800f720:	f7f0 fd5e 	bl	80001e0 <strcmp>
 800f724:	b938      	cbnz	r0, 800f736 <rmw_uxrce_fini_service_memory+0x22>
 800f726:	6020      	str	r0, [r4, #0]
 800f728:	6861      	ldr	r1, [r4, #4]
 800f72a:	b121      	cbz	r1, 800f736 <rmw_uxrce_fini_service_memory+0x22>
 800f72c:	4803      	ldr	r0, [pc, #12]	; (800f73c <rmw_uxrce_fini_service_memory+0x28>)
 800f72e:	f004 fdbd 	bl	80142ac <put_memory>
 800f732:	2300      	movs	r3, #0
 800f734:	6063      	str	r3, [r4, #4]
 800f736:	bd10      	pop	{r4, pc}
 800f738:	080196e8 	.word	0x080196e8
 800f73c:	2000d454 	.word	0x2000d454

0800f740 <rmw_uxrce_fini_client_memory>:
 800f740:	b510      	push	{r4, lr}
 800f742:	4604      	mov	r4, r0
 800f744:	6800      	ldr	r0, [r0, #0]
 800f746:	b128      	cbz	r0, 800f754 <rmw_uxrce_fini_client_memory+0x14>
 800f748:	4b06      	ldr	r3, [pc, #24]	; (800f764 <rmw_uxrce_fini_client_memory+0x24>)
 800f74a:	6819      	ldr	r1, [r3, #0]
 800f74c:	f7f0 fd48 	bl	80001e0 <strcmp>
 800f750:	b938      	cbnz	r0, 800f762 <rmw_uxrce_fini_client_memory+0x22>
 800f752:	6020      	str	r0, [r4, #0]
 800f754:	6861      	ldr	r1, [r4, #4]
 800f756:	b121      	cbz	r1, 800f762 <rmw_uxrce_fini_client_memory+0x22>
 800f758:	4803      	ldr	r0, [pc, #12]	; (800f768 <rmw_uxrce_fini_client_memory+0x28>)
 800f75a:	f004 fda7 	bl	80142ac <put_memory>
 800f75e:	2300      	movs	r3, #0
 800f760:	6063      	str	r3, [r4, #4]
 800f762:	bd10      	pop	{r4, pc}
 800f764:	080196e8 	.word	0x080196e8
 800f768:	2000aa88 	.word	0x2000aa88

0800f76c <rmw_uxrce_fini_topic_memory>:
 800f76c:	b510      	push	{r4, lr}
 800f76e:	4601      	mov	r1, r0
 800f770:	4604      	mov	r4, r0
 800f772:	4803      	ldr	r0, [pc, #12]	; (800f780 <rmw_uxrce_fini_topic_memory+0x14>)
 800f774:	f004 fd9a 	bl	80142ac <put_memory>
 800f778:	2300      	movs	r3, #0
 800f77a:	61a3      	str	r3, [r4, #24]
 800f77c:	bd10      	pop	{r4, pc}
 800f77e:	bf00      	nop
 800f780:	2000d390 	.word	0x2000d390

0800f784 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800f784:	b082      	sub	sp, #8
 800f786:	b4f0      	push	{r4, r5, r6, r7}
 800f788:	4923      	ldr	r1, [pc, #140]	; (800f818 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800f78a:	ac04      	add	r4, sp, #16
 800f78c:	e884 000c 	stmia.w	r4, {r2, r3}
 800f790:	680d      	ldr	r5, [r1, #0]
 800f792:	9c05      	ldr	r4, [sp, #20]
 800f794:	2d00      	cmp	r5, #0
 800f796:	d03d      	beq.n	800f814 <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 800f798:	462b      	mov	r3, r5
 800f79a:	2100      	movs	r1, #0
 800f79c:	68da      	ldr	r2, [r3, #12]
 800f79e:	689b      	ldr	r3, [r3, #8]
 800f7a0:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800f7a4:	4290      	cmp	r0, r2
 800f7a6:	bf08      	it	eq
 800f7a8:	3101      	addeq	r1, #1
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d1f6      	bne.n	800f79c <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800f7ae:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800f7b2:	2b02      	cmp	r3, #2
 800f7b4:	d026      	beq.n	800f804 <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 800f7b6:	d906      	bls.n	800f7c6 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800f7b8:	2b03      	cmp	r3, #3
 800f7ba:	d004      	beq.n	800f7c6 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800f7bc:	2100      	movs	r1, #0
 800f7be:	bcf0      	pop	{r4, r5, r6, r7}
 800f7c0:	4608      	mov	r0, r1
 800f7c2:	b002      	add	sp, #8
 800f7c4:	4770      	bx	lr
 800f7c6:	b304      	cbz	r4, 800f80a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800f7c8:	428c      	cmp	r4, r1
 800f7ca:	d81e      	bhi.n	800f80a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800f7cc:	2d00      	cmp	r5, #0
 800f7ce:	d0f5      	beq.n	800f7bc <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800f7d0:	2100      	movs	r1, #0
 800f7d2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800f7d6:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800f7da:	e002      	b.n	800f7e2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800f7dc:	68ad      	ldr	r5, [r5, #8]
 800f7de:	2d00      	cmp	r5, #0
 800f7e0:	d0ed      	beq.n	800f7be <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800f7e2:	68eb      	ldr	r3, [r5, #12]
 800f7e4:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800f7e8:	4290      	cmp	r0, r2
 800f7ea:	d1f7      	bne.n	800f7dc <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800f7ec:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800f7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f4:	42b2      	cmp	r2, r6
 800f7f6:	eb73 0407 	sbcs.w	r4, r3, r7
 800f7fa:	daef      	bge.n	800f7dc <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800f7fc:	4616      	mov	r6, r2
 800f7fe:	461f      	mov	r7, r3
 800f800:	4629      	mov	r1, r5
 800f802:	e7eb      	b.n	800f7dc <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800f804:	b10c      	cbz	r4, 800f80a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800f806:	428c      	cmp	r4, r1
 800f808:	d9d8      	bls.n	800f7bc <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800f80a:	bcf0      	pop	{r4, r5, r6, r7}
 800f80c:	4802      	ldr	r0, [pc, #8]	; (800f818 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800f80e:	b002      	add	sp, #8
 800f810:	f004 bd3c 	b.w	801428c <get_memory>
 800f814:	4629      	mov	r1, r5
 800f816:	e7ca      	b.n	800f7ae <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800f818:	2000a1f8 	.word	0x2000a1f8

0800f81c <run_xrce_session>:
 800f81c:	b510      	push	{r4, lr}
 800f81e:	788c      	ldrb	r4, [r1, #2]
 800f820:	b086      	sub	sp, #24
 800f822:	2c01      	cmp	r4, #1
 800f824:	f8ad 200e 	strh.w	r2, [sp, #14]
 800f828:	d00c      	beq.n	800f844 <run_xrce_session+0x28>
 800f82a:	4619      	mov	r1, r3
 800f82c:	2301      	movs	r3, #1
 800f82e:	9300      	str	r3, [sp, #0]
 800f830:	f10d 020e 	add.w	r2, sp, #14
 800f834:	f10d 0317 	add.w	r3, sp, #23
 800f838:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f83c:	f001 fa26 	bl	8010c8c <uxr_run_session_until_all_status>
 800f840:	b006      	add	sp, #24
 800f842:	bd10      	pop	{r4, pc}
 800f844:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f848:	f000 fe78 	bl	801053c <uxr_flash_output_streams>
 800f84c:	4620      	mov	r0, r4
 800f84e:	b006      	add	sp, #24
 800f850:	bd10      	pop	{r4, pc}
 800f852:	bf00      	nop

0800f854 <convert_qos_profile>:
 800f854:	b430      	push	{r4, r5}
 800f856:	7a0d      	ldrb	r5, [r1, #8]
 800f858:	780c      	ldrb	r4, [r1, #0]
 800f85a:	7a4a      	ldrb	r2, [r1, #9]
 800f85c:	8889      	ldrh	r1, [r1, #4]
 800f85e:	8081      	strh	r1, [r0, #4]
 800f860:	f1a5 0502 	sub.w	r5, r5, #2
 800f864:	f1a4 0402 	sub.w	r4, r4, #2
 800f868:	2a02      	cmp	r2, #2
 800f86a:	fab5 f585 	clz	r5, r5
 800f86e:	fab4 f484 	clz	r4, r4
 800f872:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800f876:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800f87a:	bf18      	it	ne
 800f87c:	2200      	movne	r2, #0
 800f87e:	7045      	strb	r5, [r0, #1]
 800f880:	7084      	strb	r4, [r0, #2]
 800f882:	7002      	strb	r2, [r0, #0]
 800f884:	bc30      	pop	{r4, r5}
 800f886:	4770      	bx	lr

0800f888 <generate_type_name>:
 800f888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f88a:	2300      	movs	r3, #0
 800f88c:	700b      	strb	r3, [r1, #0]
 800f88e:	6803      	ldr	r3, [r0, #0]
 800f890:	b087      	sub	sp, #28
 800f892:	4614      	mov	r4, r2
 800f894:	b1d3      	cbz	r3, 800f8cc <generate_type_name+0x44>
 800f896:	4d0f      	ldr	r5, [pc, #60]	; (800f8d4 <generate_type_name+0x4c>)
 800f898:	462f      	mov	r7, r5
 800f89a:	4a0f      	ldr	r2, [pc, #60]	; (800f8d8 <generate_type_name+0x50>)
 800f89c:	4e0f      	ldr	r6, [pc, #60]	; (800f8dc <generate_type_name+0x54>)
 800f89e:	6840      	ldr	r0, [r0, #4]
 800f8a0:	9004      	str	r0, [sp, #16]
 800f8a2:	e9cd 6201 	strd	r6, r2, [sp, #4]
 800f8a6:	4608      	mov	r0, r1
 800f8a8:	9205      	str	r2, [sp, #20]
 800f8aa:	9503      	str	r5, [sp, #12]
 800f8ac:	4a0c      	ldr	r2, [pc, #48]	; (800f8e0 <generate_type_name+0x58>)
 800f8ae:	9700      	str	r7, [sp, #0]
 800f8b0:	4621      	mov	r1, r4
 800f8b2:	f008 f9fb 	bl	8017cac <sniprintf>
 800f8b6:	2800      	cmp	r0, #0
 800f8b8:	db05      	blt.n	800f8c6 <generate_type_name+0x3e>
 800f8ba:	4284      	cmp	r4, r0
 800f8bc:	bfd4      	ite	le
 800f8be:	2000      	movle	r0, #0
 800f8c0:	2001      	movgt	r0, #1
 800f8c2:	b007      	add	sp, #28
 800f8c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8c6:	2000      	movs	r0, #0
 800f8c8:	b007      	add	sp, #28
 800f8ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8cc:	4b05      	ldr	r3, [pc, #20]	; (800f8e4 <generate_type_name+0x5c>)
 800f8ce:	4d01      	ldr	r5, [pc, #4]	; (800f8d4 <generate_type_name+0x4c>)
 800f8d0:	461f      	mov	r7, r3
 800f8d2:	e7e2      	b.n	800f89a <generate_type_name+0x12>
 800f8d4:	08019204 	.word	0x08019204
 800f8d8:	08019218 	.word	0x08019218
 800f8dc:	0801921c 	.word	0x0801921c
 800f8e0:	08019208 	.word	0x08019208
 800f8e4:	080194c0 	.word	0x080194c0

0800f8e8 <generate_topic_name>:
 800f8e8:	b510      	push	{r4, lr}
 800f8ea:	b082      	sub	sp, #8
 800f8ec:	4b09      	ldr	r3, [pc, #36]	; (800f914 <generate_topic_name+0x2c>)
 800f8ee:	9000      	str	r0, [sp, #0]
 800f8f0:	4614      	mov	r4, r2
 800f8f2:	4608      	mov	r0, r1
 800f8f4:	4611      	mov	r1, r2
 800f8f6:	4a08      	ldr	r2, [pc, #32]	; (800f918 <generate_topic_name+0x30>)
 800f8f8:	f008 f9d8 	bl	8017cac <sniprintf>
 800f8fc:	2800      	cmp	r0, #0
 800f8fe:	db05      	blt.n	800f90c <generate_topic_name+0x24>
 800f900:	4284      	cmp	r4, r0
 800f902:	bfd4      	ite	le
 800f904:	2000      	movle	r0, #0
 800f906:	2001      	movgt	r0, #1
 800f908:	b002      	add	sp, #8
 800f90a:	bd10      	pop	{r4, pc}
 800f90c:	2000      	movs	r0, #0
 800f90e:	b002      	add	sp, #8
 800f910:	bd10      	pop	{r4, pc}
 800f912:	bf00      	nop
 800f914:	08019228 	.word	0x08019228
 800f918:	08019220 	.word	0x08019220

0800f91c <is_uxrce_rmw_identifier_valid>:
 800f91c:	b510      	push	{r4, lr}
 800f91e:	4604      	mov	r4, r0
 800f920:	b140      	cbz	r0, 800f934 <is_uxrce_rmw_identifier_valid+0x18>
 800f922:	f004 fcd7 	bl	80142d4 <rmw_get_implementation_identifier>
 800f926:	4601      	mov	r1, r0
 800f928:	4620      	mov	r0, r4
 800f92a:	f7f0 fc59 	bl	80001e0 <strcmp>
 800f92e:	fab0 f080 	clz	r0, r0
 800f932:	0940      	lsrs	r0, r0, #5
 800f934:	bd10      	pop	{r4, pc}
 800f936:	bf00      	nop

0800f938 <get_message_typesupport_handle>:
 800f938:	6883      	ldr	r3, [r0, #8]
 800f93a:	4718      	bx	r3

0800f93c <get_message_typesupport_handle_function>:
 800f93c:	b510      	push	{r4, lr}
 800f93e:	4604      	mov	r4, r0
 800f940:	6800      	ldr	r0, [r0, #0]
 800f942:	f7f0 fc4d 	bl	80001e0 <strcmp>
 800f946:	2800      	cmp	r0, #0
 800f948:	bf0c      	ite	eq
 800f94a:	4620      	moveq	r0, r4
 800f94c:	2000      	movne	r0, #0
 800f94e:	bd10      	pop	{r4, pc}

0800f950 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 800f950:	f000 b862 	b.w	800fa18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>

0800f954 <_String__max_serialized_size>:
 800f954:	2000      	movs	r0, #0
 800f956:	4770      	bx	lr

0800f958 <_String__cdr_serialize>:
 800f958:	b1c0      	cbz	r0, 800f98c <_String__cdr_serialize+0x34>
 800f95a:	b570      	push	{r4, r5, r6, lr}
 800f95c:	6806      	ldr	r6, [r0, #0]
 800f95e:	460d      	mov	r5, r1
 800f960:	4604      	mov	r4, r0
 800f962:	b156      	cbz	r6, 800f97a <_String__cdr_serialize+0x22>
 800f964:	4630      	mov	r0, r6
 800f966:	f7f0 fc45 	bl	80001f4 <strlen>
 800f96a:	4631      	mov	r1, r6
 800f96c:	6060      	str	r0, [r4, #4]
 800f96e:	1c42      	adds	r2, r0, #1
 800f970:	4628      	mov	r0, r5
 800f972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f976:	f000 b915 	b.w	800fba4 <ucdr_serialize_sequence_char>
 800f97a:	4630      	mov	r0, r6
 800f97c:	6060      	str	r0, [r4, #4]
 800f97e:	4632      	mov	r2, r6
 800f980:	4631      	mov	r1, r6
 800f982:	4628      	mov	r0, r5
 800f984:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f988:	f000 b90c 	b.w	800fba4 <ucdr_serialize_sequence_char>
 800f98c:	4770      	bx	lr
 800f98e:	bf00      	nop

0800f990 <get_serialized_size_std_msgs__msg__String>:
 800f990:	b510      	push	{r4, lr}
 800f992:	4604      	mov	r4, r0
 800f994:	b130      	cbz	r0, 800f9a4 <get_serialized_size_std_msgs__msg__String+0x14>
 800f996:	4608      	mov	r0, r1
 800f998:	2104      	movs	r1, #4
 800f99a:	f000 f897 	bl	800facc <ucdr_alignment>
 800f99e:	6863      	ldr	r3, [r4, #4]
 800f9a0:	3305      	adds	r3, #5
 800f9a2:	4418      	add	r0, r3
 800f9a4:	bd10      	pop	{r4, pc}
 800f9a6:	bf00      	nop

0800f9a8 <_String__cdr_deserialize>:
 800f9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9aa:	460c      	mov	r4, r1
 800f9ac:	b083      	sub	sp, #12
 800f9ae:	b1a1      	cbz	r1, 800f9da <_String__cdr_deserialize+0x32>
 800f9b0:	688f      	ldr	r7, [r1, #8]
 800f9b2:	6809      	ldr	r1, [r1, #0]
 800f9b4:	ab01      	add	r3, sp, #4
 800f9b6:	463a      	mov	r2, r7
 800f9b8:	4606      	mov	r6, r0
 800f9ba:	f000 f905 	bl	800fbc8 <ucdr_deserialize_sequence_char>
 800f9be:	9b01      	ldr	r3, [sp, #4]
 800f9c0:	4605      	mov	r5, r0
 800f9c2:	b920      	cbnz	r0, 800f9ce <_String__cdr_deserialize+0x26>
 800f9c4:	429f      	cmp	r7, r3
 800f9c6:	d30c      	bcc.n	800f9e2 <_String__cdr_deserialize+0x3a>
 800f9c8:	4628      	mov	r0, r5
 800f9ca:	b003      	add	sp, #12
 800f9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9ce:	b103      	cbz	r3, 800f9d2 <_String__cdr_deserialize+0x2a>
 800f9d0:	3b01      	subs	r3, #1
 800f9d2:	4628      	mov	r0, r5
 800f9d4:	6063      	str	r3, [r4, #4]
 800f9d6:	b003      	add	sp, #12
 800f9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9da:	460d      	mov	r5, r1
 800f9dc:	4628      	mov	r0, r5
 800f9de:	b003      	add	sp, #12
 800f9e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9e2:	2101      	movs	r1, #1
 800f9e4:	75b0      	strb	r0, [r6, #22]
 800f9e6:	7571      	strb	r1, [r6, #21]
 800f9e8:	6060      	str	r0, [r4, #4]
 800f9ea:	4630      	mov	r0, r6
 800f9ec:	f000 f884 	bl	800faf8 <ucdr_align_to>
 800f9f0:	4630      	mov	r0, r6
 800f9f2:	9901      	ldr	r1, [sp, #4]
 800f9f4:	f000 f8b6 	bl	800fb64 <ucdr_advance_buffer>
 800f9f8:	4628      	mov	r0, r5
 800f9fa:	b003      	add	sp, #12
 800f9fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9fe:	bf00      	nop

0800fa00 <_String__get_serialized_size>:
 800fa00:	b510      	push	{r4, lr}
 800fa02:	4604      	mov	r4, r0
 800fa04:	b130      	cbz	r0, 800fa14 <_String__get_serialized_size+0x14>
 800fa06:	2104      	movs	r1, #4
 800fa08:	2000      	movs	r0, #0
 800fa0a:	f000 f85f 	bl	800facc <ucdr_alignment>
 800fa0e:	6863      	ldr	r3, [r4, #4]
 800fa10:	3305      	adds	r3, #5
 800fa12:	4418      	add	r0, r3
 800fa14:	bd10      	pop	{r4, pc}
 800fa16:	bf00      	nop

0800fa18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 800fa18:	4800      	ldr	r0, [pc, #0]	; (800fa1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 800fa1a:	4770      	bx	lr
 800fa1c:	20000040 	.word	0x20000040

0800fa20 <ucdr_check_buffer_available_for>:
 800fa20:	7d83      	ldrb	r3, [r0, #22]
 800fa22:	b93b      	cbnz	r3, 800fa34 <ucdr_check_buffer_available_for+0x14>
 800fa24:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800fa28:	4419      	add	r1, r3
 800fa2a:	4288      	cmp	r0, r1
 800fa2c:	bf34      	ite	cc
 800fa2e:	2000      	movcc	r0, #0
 800fa30:	2001      	movcs	r0, #1
 800fa32:	4770      	bx	lr
 800fa34:	2000      	movs	r0, #0
 800fa36:	4770      	bx	lr

0800fa38 <ucdr_check_final_buffer_behavior>:
 800fa38:	7d83      	ldrb	r3, [r0, #22]
 800fa3a:	b943      	cbnz	r3, 800fa4e <ucdr_check_final_buffer_behavior+0x16>
 800fa3c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800fa40:	4291      	cmp	r1, r2
 800fa42:	b510      	push	{r4, lr}
 800fa44:	4604      	mov	r4, r0
 800fa46:	d205      	bcs.n	800fa54 <ucdr_check_final_buffer_behavior+0x1c>
 800fa48:	2301      	movs	r3, #1
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	bd10      	pop	{r4, pc}
 800fa4e:	2300      	movs	r3, #0
 800fa50:	4618      	mov	r0, r3
 800fa52:	4770      	bx	lr
 800fa54:	6982      	ldr	r2, [r0, #24]
 800fa56:	b13a      	cbz	r2, 800fa68 <ucdr_check_final_buffer_behavior+0x30>
 800fa58:	69c1      	ldr	r1, [r0, #28]
 800fa5a:	4790      	blx	r2
 800fa5c:	f080 0301 	eor.w	r3, r0, #1
 800fa60:	b2db      	uxtb	r3, r3
 800fa62:	75a0      	strb	r0, [r4, #22]
 800fa64:	4618      	mov	r0, r3
 800fa66:	bd10      	pop	{r4, pc}
 800fa68:	2001      	movs	r0, #1
 800fa6a:	75a0      	strb	r0, [r4, #22]
 800fa6c:	e7fa      	b.n	800fa64 <ucdr_check_final_buffer_behavior+0x2c>
 800fa6e:	bf00      	nop

0800fa70 <ucdr_set_on_full_buffer_callback>:
 800fa70:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800fa74:	4770      	bx	lr
 800fa76:	bf00      	nop

0800fa78 <ucdr_init_buffer_origin_offset_endian>:
 800fa78:	b430      	push	{r4, r5}
 800fa7a:	9c02      	ldr	r4, [sp, #8]
 800fa7c:	f89d 500c 	ldrb.w	r5, [sp, #12]
 800fa80:	6001      	str	r1, [r0, #0]
 800fa82:	440a      	add	r2, r1
 800fa84:	60c3      	str	r3, [r0, #12]
 800fa86:	4421      	add	r1, r4
 800fa88:	441c      	add	r4, r3
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	6104      	str	r4, [r0, #16]
 800fa8e:	7505      	strb	r5, [r0, #20]
 800fa90:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800fa94:	bc30      	pop	{r4, r5}
 800fa96:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800fa9a:	7543      	strb	r3, [r0, #21]
 800fa9c:	7583      	strb	r3, [r0, #22]
 800fa9e:	4770      	bx	lr

0800faa0 <ucdr_init_buffer_origin_offset>:
 800faa0:	b510      	push	{r4, lr}
 800faa2:	b082      	sub	sp, #8
 800faa4:	9c04      	ldr	r4, [sp, #16]
 800faa6:	9400      	str	r4, [sp, #0]
 800faa8:	2401      	movs	r4, #1
 800faaa:	9401      	str	r4, [sp, #4]
 800faac:	f7ff ffe4 	bl	800fa78 <ucdr_init_buffer_origin_offset_endian>
 800fab0:	b002      	add	sp, #8
 800fab2:	bd10      	pop	{r4, pc}

0800fab4 <ucdr_init_buffer_origin>:
 800fab4:	b510      	push	{r4, lr}
 800fab6:	b082      	sub	sp, #8
 800fab8:	2400      	movs	r4, #0
 800faba:	9400      	str	r4, [sp, #0]
 800fabc:	f7ff fff0 	bl	800faa0 <ucdr_init_buffer_origin_offset>
 800fac0:	b002      	add	sp, #8
 800fac2:	bd10      	pop	{r4, pc}

0800fac4 <ucdr_init_buffer>:
 800fac4:	2300      	movs	r3, #0
 800fac6:	f7ff bff5 	b.w	800fab4 <ucdr_init_buffer_origin>
 800faca:	bf00      	nop

0800facc <ucdr_alignment>:
 800facc:	fbb0 f3f1 	udiv	r3, r0, r1
 800fad0:	fb03 0011 	mls	r0, r3, r1, r0
 800fad4:	1a08      	subs	r0, r1, r0
 800fad6:	3901      	subs	r1, #1
 800fad8:	4008      	ands	r0, r1
 800fada:	4770      	bx	lr

0800fadc <ucdr_buffer_alignment>:
 800fadc:	7d43      	ldrb	r3, [r0, #21]
 800fade:	428b      	cmp	r3, r1
 800fae0:	d208      	bcs.n	800faf4 <ucdr_buffer_alignment+0x18>
 800fae2:	6903      	ldr	r3, [r0, #16]
 800fae4:	fbb3 f0f1 	udiv	r0, r3, r1
 800fae8:	fb01 3010 	mls	r0, r1, r0, r3
 800faec:	1a08      	subs	r0, r1, r0
 800faee:	3901      	subs	r1, #1
 800faf0:	4008      	ands	r0, r1
 800faf2:	4770      	bx	lr
 800faf4:	2000      	movs	r0, #0
 800faf6:	4770      	bx	lr

0800faf8 <ucdr_align_to>:
 800faf8:	b570      	push	{r4, r5, r6, lr}
 800fafa:	4604      	mov	r4, r0
 800fafc:	460e      	mov	r6, r1
 800fafe:	f7ff ffed 	bl	800fadc <ucdr_buffer_alignment>
 800fb02:	68a5      	ldr	r5, [r4, #8]
 800fb04:	6863      	ldr	r3, [r4, #4]
 800fb06:	6922      	ldr	r2, [r4, #16]
 800fb08:	7566      	strb	r6, [r4, #21]
 800fb0a:	4405      	add	r5, r0
 800fb0c:	42ab      	cmp	r3, r5
 800fb0e:	4410      	add	r0, r2
 800fb10:	bf28      	it	cs
 800fb12:	462b      	movcs	r3, r5
 800fb14:	6120      	str	r0, [r4, #16]
 800fb16:	60a3      	str	r3, [r4, #8]
 800fb18:	bd70      	pop	{r4, r5, r6, pc}
 800fb1a:	bf00      	nop

0800fb1c <ucdr_buffer_length>:
 800fb1c:	6882      	ldr	r2, [r0, #8]
 800fb1e:	6800      	ldr	r0, [r0, #0]
 800fb20:	1a10      	subs	r0, r2, r0
 800fb22:	4770      	bx	lr

0800fb24 <ucdr_buffer_remaining>:
 800fb24:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800fb28:	1a10      	subs	r0, r2, r0
 800fb2a:	4770      	bx	lr

0800fb2c <ucdr_check_final_buffer_behavior_array>:
 800fb2c:	b538      	push	{r3, r4, r5, lr}
 800fb2e:	7d83      	ldrb	r3, [r0, #22]
 800fb30:	b963      	cbnz	r3, 800fb4c <ucdr_check_final_buffer_behavior_array+0x20>
 800fb32:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800fb36:	429a      	cmp	r2, r3
 800fb38:	4604      	mov	r4, r0
 800fb3a:	460d      	mov	r5, r1
 800fb3c:	d308      	bcc.n	800fb50 <ucdr_check_final_buffer_behavior_array+0x24>
 800fb3e:	b139      	cbz	r1, 800fb50 <ucdr_check_final_buffer_behavior_array+0x24>
 800fb40:	6983      	ldr	r3, [r0, #24]
 800fb42:	b163      	cbz	r3, 800fb5e <ucdr_check_final_buffer_behavior_array+0x32>
 800fb44:	69c1      	ldr	r1, [r0, #28]
 800fb46:	4798      	blx	r3
 800fb48:	75a0      	strb	r0, [r4, #22]
 800fb4a:	b108      	cbz	r0, 800fb50 <ucdr_check_final_buffer_behavior_array+0x24>
 800fb4c:	2000      	movs	r0, #0
 800fb4e:	bd38      	pop	{r3, r4, r5, pc}
 800fb50:	4620      	mov	r0, r4
 800fb52:	f7ff ffe7 	bl	800fb24 <ucdr_buffer_remaining>
 800fb56:	42a8      	cmp	r0, r5
 800fb58:	bf28      	it	cs
 800fb5a:	4628      	movcs	r0, r5
 800fb5c:	bd38      	pop	{r3, r4, r5, pc}
 800fb5e:	2301      	movs	r3, #1
 800fb60:	7583      	strb	r3, [r0, #22]
 800fb62:	e7f3      	b.n	800fb4c <ucdr_check_final_buffer_behavior_array+0x20>

0800fb64 <ucdr_advance_buffer>:
 800fb64:	b538      	push	{r3, r4, r5, lr}
 800fb66:	4604      	mov	r4, r0
 800fb68:	460d      	mov	r5, r1
 800fb6a:	f7ff ff59 	bl	800fa20 <ucdr_check_buffer_available_for>
 800fb6e:	b178      	cbz	r0, 800fb90 <ucdr_advance_buffer+0x2c>
 800fb70:	68a3      	ldr	r3, [r4, #8]
 800fb72:	6921      	ldr	r1, [r4, #16]
 800fb74:	442b      	add	r3, r5
 800fb76:	60a3      	str	r3, [r4, #8]
 800fb78:	2301      	movs	r3, #1
 800fb7a:	4429      	add	r1, r5
 800fb7c:	7563      	strb	r3, [r4, #21]
 800fb7e:	6121      	str	r1, [r4, #16]
 800fb80:	bd38      	pop	{r3, r4, r5, pc}
 800fb82:	68a2      	ldr	r2, [r4, #8]
 800fb84:	6923      	ldr	r3, [r4, #16]
 800fb86:	4402      	add	r2, r0
 800fb88:	4403      	add	r3, r0
 800fb8a:	1a2d      	subs	r5, r5, r0
 800fb8c:	60a2      	str	r2, [r4, #8]
 800fb8e:	6123      	str	r3, [r4, #16]
 800fb90:	2201      	movs	r2, #1
 800fb92:	4629      	mov	r1, r5
 800fb94:	4620      	mov	r0, r4
 800fb96:	f7ff ffc9 	bl	800fb2c <ucdr_check_final_buffer_behavior_array>
 800fb9a:	2800      	cmp	r0, #0
 800fb9c:	d1f1      	bne.n	800fb82 <ucdr_advance_buffer+0x1e>
 800fb9e:	2301      	movs	r3, #1
 800fba0:	7563      	strb	r3, [r4, #21]
 800fba2:	bd38      	pop	{r3, r4, r5, pc}

0800fba4 <ucdr_serialize_sequence_char>:
 800fba4:	b570      	push	{r4, r5, r6, lr}
 800fba6:	460e      	mov	r6, r1
 800fba8:	4615      	mov	r5, r2
 800fbaa:	7d01      	ldrb	r1, [r0, #20]
 800fbac:	4604      	mov	r4, r0
 800fbae:	f005 fbe5 	bl	801537c <ucdr_serialize_endian_uint32_t>
 800fbb2:	b90d      	cbnz	r5, 800fbb8 <ucdr_serialize_sequence_char+0x14>
 800fbb4:	2001      	movs	r0, #1
 800fbb6:	bd70      	pop	{r4, r5, r6, pc}
 800fbb8:	7d21      	ldrb	r1, [r4, #20]
 800fbba:	462b      	mov	r3, r5
 800fbbc:	4632      	mov	r2, r6
 800fbbe:	4620      	mov	r0, r4
 800fbc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fbc4:	f004 bfd0 	b.w	8014b68 <ucdr_serialize_endian_array_char>

0800fbc8 <ucdr_deserialize_sequence_char>:
 800fbc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbcc:	461d      	mov	r5, r3
 800fbce:	4616      	mov	r6, r2
 800fbd0:	460f      	mov	r7, r1
 800fbd2:	461a      	mov	r2, r3
 800fbd4:	7d01      	ldrb	r1, [r0, #20]
 800fbd6:	4604      	mov	r4, r0
 800fbd8:	f005 fcf8 	bl	80155cc <ucdr_deserialize_endian_uint32_t>
 800fbdc:	682b      	ldr	r3, [r5, #0]
 800fbde:	429e      	cmp	r6, r3
 800fbe0:	bf3c      	itt	cc
 800fbe2:	2201      	movcc	r2, #1
 800fbe4:	75a2      	strbcc	r2, [r4, #22]
 800fbe6:	b913      	cbnz	r3, 800fbee <ucdr_deserialize_sequence_char+0x26>
 800fbe8:	2001      	movs	r0, #1
 800fbea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbee:	7d21      	ldrb	r1, [r4, #20]
 800fbf0:	463a      	mov	r2, r7
 800fbf2:	4620      	mov	r0, r4
 800fbf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbf8:	f004 bfe8 	b.w	8014bcc <ucdr_deserialize_endian_array_char>

0800fbfc <ucdr_serialize_sequence_uint8_t>:
 800fbfc:	b570      	push	{r4, r5, r6, lr}
 800fbfe:	460e      	mov	r6, r1
 800fc00:	4615      	mov	r5, r2
 800fc02:	7d01      	ldrb	r1, [r0, #20]
 800fc04:	4604      	mov	r4, r0
 800fc06:	f005 fbb9 	bl	801537c <ucdr_serialize_endian_uint32_t>
 800fc0a:	b90d      	cbnz	r5, 800fc10 <ucdr_serialize_sequence_uint8_t+0x14>
 800fc0c:	2001      	movs	r0, #1
 800fc0e:	bd70      	pop	{r4, r5, r6, pc}
 800fc10:	7d21      	ldrb	r1, [r4, #20]
 800fc12:	462b      	mov	r3, r5
 800fc14:	4632      	mov	r2, r6
 800fc16:	4620      	mov	r0, r4
 800fc18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fc1c:	f005 b83a 	b.w	8014c94 <ucdr_serialize_endian_array_uint8_t>

0800fc20 <ucdr_deserialize_sequence_uint8_t>:
 800fc20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc24:	461d      	mov	r5, r3
 800fc26:	4616      	mov	r6, r2
 800fc28:	460f      	mov	r7, r1
 800fc2a:	461a      	mov	r2, r3
 800fc2c:	7d01      	ldrb	r1, [r0, #20]
 800fc2e:	4604      	mov	r4, r0
 800fc30:	f005 fccc 	bl	80155cc <ucdr_deserialize_endian_uint32_t>
 800fc34:	682b      	ldr	r3, [r5, #0]
 800fc36:	429e      	cmp	r6, r3
 800fc38:	bf3c      	itt	cc
 800fc3a:	2201      	movcc	r2, #1
 800fc3c:	75a2      	strbcc	r2, [r4, #22]
 800fc3e:	b913      	cbnz	r3, 800fc46 <ucdr_deserialize_sequence_uint8_t+0x26>
 800fc40:	2001      	movs	r0, #1
 800fc42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc46:	7d21      	ldrb	r1, [r4, #20]
 800fc48:	463a      	mov	r2, r7
 800fc4a:	4620      	mov	r0, r4
 800fc4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc50:	f005 b884 	b.w	8014d5c <ucdr_deserialize_endian_array_uint8_t>

0800fc54 <uxr_buffer_delete_entity>:
 800fc54:	b530      	push	{r4, r5, lr}
 800fc56:	b08f      	sub	sp, #60	; 0x3c
 800fc58:	2403      	movs	r4, #3
 800fc5a:	2500      	movs	r5, #0
 800fc5c:	e9cd 4500 	strd	r4, r5, [sp]
 800fc60:	9202      	str	r2, [sp, #8]
 800fc62:	ab06      	add	r3, sp, #24
 800fc64:	2204      	movs	r2, #4
 800fc66:	9103      	str	r1, [sp, #12]
 800fc68:	4604      	mov	r4, r0
 800fc6a:	f001 fa4b 	bl	8011104 <uxr_prepare_stream_to_write_submessage>
 800fc6e:	b918      	cbnz	r0, 800fc78 <uxr_buffer_delete_entity+0x24>
 800fc70:	4604      	mov	r4, r0
 800fc72:	4620      	mov	r0, r4
 800fc74:	b00f      	add	sp, #60	; 0x3c
 800fc76:	bd30      	pop	{r4, r5, pc}
 800fc78:	9902      	ldr	r1, [sp, #8]
 800fc7a:	aa05      	add	r2, sp, #20
 800fc7c:	4620      	mov	r0, r4
 800fc7e:	f001 fb7b 	bl	8011378 <uxr_init_base_object_request>
 800fc82:	a905      	add	r1, sp, #20
 800fc84:	4604      	mov	r4, r0
 800fc86:	a806      	add	r0, sp, #24
 800fc88:	f002 fdb6 	bl	80127f8 <uxr_serialize_DELETE_Payload>
 800fc8c:	4620      	mov	r0, r4
 800fc8e:	b00f      	add	sp, #60	; 0x3c
 800fc90:	bd30      	pop	{r4, r5, pc}
 800fc92:	bf00      	nop

0800fc94 <uxr_common_create_entity>:
 800fc94:	b530      	push	{r4, r5, lr}
 800fc96:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800fc9a:	b08d      	sub	sp, #52	; 0x34
 800fc9c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800fca0:	2d01      	cmp	r5, #1
 800fca2:	bf0c      	ite	eq
 800fca4:	f003 0201 	andeq.w	r2, r3, #1
 800fca8:	2200      	movne	r2, #0
 800fcaa:	330e      	adds	r3, #14
 800fcac:	4604      	mov	r4, r0
 800fcae:	441a      	add	r2, r3
 800fcb0:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 800fcb4:	9001      	str	r0, [sp, #4]
 800fcb6:	2101      	movs	r1, #1
 800fcb8:	9100      	str	r1, [sp, #0]
 800fcba:	b292      	uxth	r2, r2
 800fcbc:	9903      	ldr	r1, [sp, #12]
 800fcbe:	ab04      	add	r3, sp, #16
 800fcc0:	4620      	mov	r0, r4
 800fcc2:	f001 fa1f 	bl	8011104 <uxr_prepare_stream_to_write_submessage>
 800fcc6:	b918      	cbnz	r0, 800fcd0 <uxr_common_create_entity+0x3c>
 800fcc8:	4604      	mov	r4, r0
 800fcca:	4620      	mov	r0, r4
 800fccc:	b00d      	add	sp, #52	; 0x34
 800fcce:	bd30      	pop	{r4, r5, pc}
 800fcd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fcd2:	9902      	ldr	r1, [sp, #8]
 800fcd4:	4620      	mov	r0, r4
 800fcd6:	f001 fb4f 	bl	8011378 <uxr_init_base_object_request>
 800fcda:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fcdc:	4604      	mov	r4, r0
 800fcde:	a804      	add	r0, sp, #16
 800fce0:	f002 fcde 	bl	80126a0 <uxr_serialize_CREATE_Payload>
 800fce4:	4620      	mov	r0, r4
 800fce6:	b00d      	add	sp, #52	; 0x34
 800fce8:	bd30      	pop	{r4, r5, pc}
 800fcea:	bf00      	nop

0800fcec <uxr_buffer_create_participant_bin>:
 800fcec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcee:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 800fcf2:	ac11      	add	r4, sp, #68	; 0x44
 800fcf4:	9103      	str	r1, [sp, #12]
 800fcf6:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 800fcf8:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 800fcfc:	2103      	movs	r1, #3
 800fcfe:	7221      	strb	r1, [r4, #8]
 800fd00:	2301      	movs	r3, #1
 800fd02:	2100      	movs	r1, #0
 800fd04:	7123      	strb	r3, [r4, #4]
 800fd06:	f89d 7274 	ldrb.w	r7, [sp, #628]	; 0x274
 800fd0a:	9202      	str	r2, [sp, #8]
 800fd0c:	4605      	mov	r5, r0
 800fd0e:	f88d 1014 	strb.w	r1, [sp, #20]
 800fd12:	b1ce      	cbz	r6, 800fd48 <uxr_buffer_create_participant_bin+0x5c>
 800fd14:	f88d 301c 	strb.w	r3, [sp, #28]
 800fd18:	9608      	str	r6, [sp, #32]
 800fd1a:	a809      	add	r0, sp, #36	; 0x24
 800fd1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fd20:	a915      	add	r1, sp, #84	; 0x54
 800fd22:	f7ff fecf 	bl	800fac4 <ucdr_init_buffer>
 800fd26:	a905      	add	r1, sp, #20
 800fd28:	a809      	add	r0, sp, #36	; 0x24
 800fd2a:	f002 f881 	bl	8011e30 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800fd2e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800fd30:	9401      	str	r4, [sp, #4]
 800fd32:	b283      	uxth	r3, r0
 800fd34:	9700      	str	r7, [sp, #0]
 800fd36:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fd3a:	60e0      	str	r0, [r4, #12]
 800fd3c:	4628      	mov	r0, r5
 800fd3e:	f7ff ffa9 	bl	800fc94 <uxr_common_create_entity>
 800fd42:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 800fd46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd48:	f88d 601c 	strb.w	r6, [sp, #28]
 800fd4c:	e7e5      	b.n	800fd1a <uxr_buffer_create_participant_bin+0x2e>
 800fd4e:	bf00      	nop

0800fd50 <uxr_buffer_create_topic_bin>:
 800fd50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd52:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800fd56:	ac13      	add	r4, sp, #76	; 0x4c
 800fd58:	4605      	mov	r5, r0
 800fd5a:	9105      	str	r1, [sp, #20]
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	a997      	add	r1, sp, #604	; 0x25c
 800fd60:	2602      	movs	r6, #2
 800fd62:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fd66:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 800fd6a:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 800fd6e:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 800fd70:	f000 f994 	bl	801009c <uxr_object_id_to_raw>
 800fd74:	9a9e      	ldr	r2, [sp, #632]	; 0x278
 800fd76:	9206      	str	r2, [sp, #24]
 800fd78:	2303      	movs	r3, #3
 800fd7a:	2101      	movs	r1, #1
 800fd7c:	7223      	strb	r3, [r4, #8]
 800fd7e:	a80b      	add	r0, sp, #44	; 0x2c
 800fd80:	2300      	movs	r3, #0
 800fd82:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fd86:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800fd8a:	a917      	add	r1, sp, #92	; 0x5c
 800fd8c:	f88d 301c 	strb.w	r3, [sp, #28]
 800fd90:	960a      	str	r6, [sp, #40]	; 0x28
 800fd92:	f7ff fe97 	bl	800fac4 <ucdr_init_buffer>
 800fd96:	a906      	add	r1, sp, #24
 800fd98:	a80b      	add	r0, sp, #44	; 0x2c
 800fd9a:	f002 f86b 	bl	8011e74 <uxr_serialize_OBJK_Topic_Binary>
 800fd9e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800fda0:	9401      	str	r4, [sp, #4]
 800fda2:	9700      	str	r7, [sp, #0]
 800fda4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fda8:	4628      	mov	r0, r5
 800fdaa:	b2b3      	uxth	r3, r6
 800fdac:	60e6      	str	r6, [r4, #12]
 800fdae:	f7ff ff71 	bl	800fc94 <uxr_common_create_entity>
 800fdb2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800fdb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fdb8 <uxr_buffer_create_publisher_bin>:
 800fdb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdba:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800fdbe:	ac0e      	add	r4, sp, #56	; 0x38
 800fdc0:	4605      	mov	r5, r0
 800fdc2:	9105      	str	r1, [sp, #20]
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	2603      	movs	r6, #3
 800fdc8:	a992      	add	r1, sp, #584	; 0x248
 800fdca:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fdce:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800fdd2:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800fdd6:	f000 f961 	bl	801009c <uxr_object_id_to_raw>
 800fdda:	2300      	movs	r3, #0
 800fddc:	a806      	add	r0, sp, #24
 800fdde:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fde2:	a912      	add	r1, sp, #72	; 0x48
 800fde4:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800fde8:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800fdec:	7226      	strb	r6, [r4, #8]
 800fdee:	f7ff fe69 	bl	800fac4 <ucdr_init_buffer>
 800fdf2:	a993      	add	r1, sp, #588	; 0x24c
 800fdf4:	a806      	add	r0, sp, #24
 800fdf6:	f002 f8f1 	bl	8011fdc <uxr_serialize_OBJK_Publisher_Binary>
 800fdfa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fdfc:	9700      	str	r7, [sp, #0]
 800fdfe:	9401      	str	r4, [sp, #4]
 800fe00:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fe04:	4628      	mov	r0, r5
 800fe06:	b2b3      	uxth	r3, r6
 800fe08:	60e6      	str	r6, [r4, #12]
 800fe0a:	f7ff ff43 	bl	800fc94 <uxr_common_create_entity>
 800fe0e:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800fe12:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fe14 <uxr_buffer_create_subscriber_bin>:
 800fe14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe16:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800fe1a:	ac0e      	add	r4, sp, #56	; 0x38
 800fe1c:	4605      	mov	r5, r0
 800fe1e:	9105      	str	r1, [sp, #20]
 800fe20:	4618      	mov	r0, r3
 800fe22:	a992      	add	r1, sp, #584	; 0x248
 800fe24:	2604      	movs	r6, #4
 800fe26:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fe2a:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800fe2e:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800fe32:	f000 f933 	bl	801009c <uxr_object_id_to_raw>
 800fe36:	2103      	movs	r1, #3
 800fe38:	2300      	movs	r3, #0
 800fe3a:	a806      	add	r0, sp, #24
 800fe3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fe40:	7221      	strb	r1, [r4, #8]
 800fe42:	a912      	add	r1, sp, #72	; 0x48
 800fe44:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800fe48:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800fe4c:	f7ff fe3a 	bl	800fac4 <ucdr_init_buffer>
 800fe50:	a993      	add	r1, sp, #588	; 0x24c
 800fe52:	a806      	add	r0, sp, #24
 800fe54:	f002 f972 	bl	801213c <uxr_serialize_OBJK_Subscriber_Binary>
 800fe58:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fe5a:	9700      	str	r7, [sp, #0]
 800fe5c:	9401      	str	r4, [sp, #4]
 800fe5e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fe62:	4628      	mov	r0, r5
 800fe64:	b2b3      	uxth	r3, r6
 800fe66:	60e6      	str	r6, [r4, #12]
 800fe68:	f7ff ff14 	bl	800fc94 <uxr_common_create_entity>
 800fe6c:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800fe70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe72:	bf00      	nop

0800fe74 <uxr_buffer_create_datawriter_bin>:
 800fe74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe78:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800fe7c:	ac1d      	add	r4, sp, #116	; 0x74
 800fe7e:	2505      	movs	r5, #5
 800fe80:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fe84:	9105      	str	r1, [sp, #20]
 800fe86:	4606      	mov	r6, r0
 800fe88:	a9a1      	add	r1, sp, #644	; 0x284
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	7125      	strb	r5, [r4, #4]
 800fe8e:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800fe92:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800fe96:	2703      	movs	r7, #3
 800fe98:	f000 f900 	bl	801009c <uxr_object_id_to_raw>
 800fe9c:	a90e      	add	r1, sp, #56	; 0x38
 800fe9e:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800fea0:	7227      	strb	r7, [r4, #8]
 800fea2:	f000 f8fb 	bl	801009c <uxr_object_id_to_raw>
 800fea6:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800feaa:	f89d 12a5 	ldrb.w	r1, [sp, #677]	; 0x2a5
 800feae:	3d00      	subs	r5, #0
 800feb0:	f04f 0300 	mov.w	r3, #0
 800feb4:	bf18      	it	ne
 800feb6:	2501      	movne	r5, #1
 800feb8:	2201      	movs	r2, #1
 800feba:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800febe:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800fec2:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800fec6:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800feca:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800fece:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800fed2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800fed6:	bb89      	cbnz	r1, 800ff3c <uxr_buffer_create_datawriter_bin+0xc8>
 800fed8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800fedc:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800fee0:	f04f 0c13 	mov.w	ip, #19
 800fee4:	250b      	movs	r5, #11
 800fee6:	2221      	movs	r2, #33	; 0x21
 800fee8:	2111      	movs	r1, #17
 800feea:	2009      	movs	r0, #9
 800feec:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800fef0:	b923      	cbnz	r3, 800fefc <uxr_buffer_create_datawriter_bin+0x88>
 800fef2:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800fef6:	4672      	mov	r2, lr
 800fef8:	4661      	mov	r1, ip
 800fefa:	4628      	mov	r0, r5
 800fefc:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800ff00:	2b01      	cmp	r3, #1
 800ff02:	d025      	beq.n	800ff50 <uxr_buffer_create_datawriter_bin+0xdc>
 800ff04:	2b03      	cmp	r3, #3
 800ff06:	d029      	beq.n	800ff5c <uxr_buffer_create_datawriter_bin+0xe8>
 800ff08:	b32b      	cbz	r3, 800ff56 <uxr_buffer_create_datawriter_bin+0xe2>
 800ff0a:	a806      	add	r0, sp, #24
 800ff0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ff10:	a921      	add	r1, sp, #132	; 0x84
 800ff12:	f7ff fdd7 	bl	800fac4 <ucdr_init_buffer>
 800ff16:	a90e      	add	r1, sp, #56	; 0x38
 800ff18:	a806      	add	r0, sp, #24
 800ff1a:	f002 f9c1 	bl	80122a0 <uxr_serialize_OBJK_DataWriter_Binary>
 800ff1e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ff20:	9401      	str	r4, [sp, #4]
 800ff22:	b283      	uxth	r3, r0
 800ff24:	f8cd 8000 	str.w	r8, [sp]
 800ff28:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ff2c:	60e0      	str	r0, [r4, #12]
 800ff2e:	4630      	mov	r0, r6
 800ff30:	f7ff feb0 	bl	800fc94 <uxr_common_create_entity>
 800ff34:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800ff38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff3c:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800ff40:	f04f 0c12 	mov.w	ip, #18
 800ff44:	250a      	movs	r5, #10
 800ff46:	2220      	movs	r2, #32
 800ff48:	2110      	movs	r1, #16
 800ff4a:	2008      	movs	r0, #8
 800ff4c:	2702      	movs	r7, #2
 800ff4e:	e7cd      	b.n	800feec <uxr_buffer_create_datawriter_bin+0x78>
 800ff50:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800ff54:	e7d9      	b.n	800ff0a <uxr_buffer_create_datawriter_bin+0x96>
 800ff56:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800ff5a:	e7d6      	b.n	800ff0a <uxr_buffer_create_datawriter_bin+0x96>
 800ff5c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800ff60:	e7d3      	b.n	800ff0a <uxr_buffer_create_datawriter_bin+0x96>
 800ff62:	bf00      	nop

0800ff64 <uxr_buffer_create_datareader_bin>:
 800ff64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff68:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800ff6c:	ac1f      	add	r4, sp, #124	; 0x7c
 800ff6e:	2506      	movs	r5, #6
 800ff70:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ff74:	9105      	str	r1, [sp, #20]
 800ff76:	4606      	mov	r6, r0
 800ff78:	a9a3      	add	r1, sp, #652	; 0x28c
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	7125      	strb	r5, [r4, #4]
 800ff7e:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 800ff82:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 800ff86:	2703      	movs	r7, #3
 800ff88:	f000 f888 	bl	801009c <uxr_object_id_to_raw>
 800ff8c:	a90e      	add	r1, sp, #56	; 0x38
 800ff8e:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 800ff90:	7227      	strb	r7, [r4, #8]
 800ff92:	f000 f883 	bl	801009c <uxr_object_id_to_raw>
 800ff96:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800ff9a:	f89d 12ad 	ldrb.w	r1, [sp, #685]	; 0x2ad
 800ff9e:	3d00      	subs	r5, #0
 800ffa0:	f04f 0300 	mov.w	r3, #0
 800ffa4:	bf18      	it	ne
 800ffa6:	2501      	movne	r5, #1
 800ffa8:	2201      	movs	r2, #1
 800ffaa:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800ffae:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800ffb2:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800ffb6:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800ffba:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800ffbe:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800ffc2:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800ffc6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800ffca:	bb89      	cbnz	r1, 8010030 <uxr_buffer_create_datareader_bin+0xcc>
 800ffcc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800ffd0:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800ffd4:	f04f 0c13 	mov.w	ip, #19
 800ffd8:	250b      	movs	r5, #11
 800ffda:	2221      	movs	r2, #33	; 0x21
 800ffdc:	2111      	movs	r1, #17
 800ffde:	2009      	movs	r0, #9
 800ffe0:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 800ffe4:	b923      	cbnz	r3, 800fff0 <uxr_buffer_create_datareader_bin+0x8c>
 800ffe6:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800ffea:	4672      	mov	r2, lr
 800ffec:	4661      	mov	r1, ip
 800ffee:	4628      	mov	r0, r5
 800fff0:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 800fff4:	2b01      	cmp	r3, #1
 800fff6:	d025      	beq.n	8010044 <uxr_buffer_create_datareader_bin+0xe0>
 800fff8:	2b03      	cmp	r3, #3
 800fffa:	d029      	beq.n	8010050 <uxr_buffer_create_datareader_bin+0xec>
 800fffc:	b32b      	cbz	r3, 801004a <uxr_buffer_create_datareader_bin+0xe6>
 800fffe:	a806      	add	r0, sp, #24
 8010000:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010004:	a923      	add	r1, sp, #140	; 0x8c
 8010006:	f7ff fd5d 	bl	800fac4 <ucdr_init_buffer>
 801000a:	a90e      	add	r1, sp, #56	; 0x38
 801000c:	a806      	add	r0, sp, #24
 801000e:	f002 f90b 	bl	8012228 <uxr_serialize_OBJK_DataReader_Binary>
 8010012:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010014:	9401      	str	r4, [sp, #4]
 8010016:	b283      	uxth	r3, r0
 8010018:	f8cd 8000 	str.w	r8, [sp]
 801001c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010020:	60e0      	str	r0, [r4, #12]
 8010022:	4630      	mov	r0, r6
 8010024:	f7ff fe36 	bl	800fc94 <uxr_common_create_entity>
 8010028:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 801002c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010030:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8010034:	f04f 0c12 	mov.w	ip, #18
 8010038:	250a      	movs	r5, #10
 801003a:	2220      	movs	r2, #32
 801003c:	2110      	movs	r1, #16
 801003e:	2008      	movs	r0, #8
 8010040:	2702      	movs	r7, #2
 8010042:	e7cd      	b.n	800ffe0 <uxr_buffer_create_datareader_bin+0x7c>
 8010044:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8010048:	e7d9      	b.n	800fffe <uxr_buffer_create_datareader_bin+0x9a>
 801004a:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 801004e:	e7d6      	b.n	800fffe <uxr_buffer_create_datareader_bin+0x9a>
 8010050:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8010054:	e7d3      	b.n	800fffe <uxr_buffer_create_datareader_bin+0x9a>
 8010056:	bf00      	nop

08010058 <uxr_object_id>:
 8010058:	b082      	sub	sp, #8
 801005a:	2300      	movs	r3, #0
 801005c:	f88d 1006 	strb.w	r1, [sp, #6]
 8010060:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010064:	f360 030f 	bfi	r3, r0, #0, #16
 8010068:	f362 431f 	bfi	r3, r2, #16, #16
 801006c:	4618      	mov	r0, r3
 801006e:	b002      	add	sp, #8
 8010070:	4770      	bx	lr
 8010072:	bf00      	nop

08010074 <uxr_object_id_from_raw>:
 8010074:	7843      	ldrb	r3, [r0, #1]
 8010076:	7801      	ldrb	r1, [r0, #0]
 8010078:	b082      	sub	sp, #8
 801007a:	f003 000f 	and.w	r0, r3, #15
 801007e:	f88d 0006 	strb.w	r0, [sp, #6]
 8010082:	091b      	lsrs	r3, r3, #4
 8010084:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8010088:	2200      	movs	r2, #0
 801008a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801008e:	f363 020f 	bfi	r2, r3, #0, #16
 8010092:	f361 421f 	bfi	r2, r1, #16, #16
 8010096:	4610      	mov	r0, r2
 8010098:	b002      	add	sp, #8
 801009a:	4770      	bx	lr

0801009c <uxr_object_id_to_raw>:
 801009c:	4602      	mov	r2, r0
 801009e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80100a2:	b082      	sub	sp, #8
 80100a4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80100a8:	f3c2 120b 	ubfx	r2, r2, #4, #12
 80100ac:	700a      	strb	r2, [r1, #0]
 80100ae:	704b      	strb	r3, [r1, #1]
 80100b0:	b002      	add	sp, #8
 80100b2:	4770      	bx	lr

080100b4 <uxr_buffer_request_data>:
 80100b4:	b530      	push	{r4, r5, lr}
 80100b6:	b095      	sub	sp, #84	; 0x54
 80100b8:	4604      	mov	r4, r0
 80100ba:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80100bc:	9105      	str	r1, [sp, #20]
 80100be:	2d00      	cmp	r5, #0
 80100c0:	bf14      	ite	ne
 80100c2:	2101      	movne	r1, #1
 80100c4:	2100      	moveq	r1, #0
 80100c6:	9204      	str	r2, [sp, #16]
 80100c8:	f04f 0200 	mov.w	r2, #0
 80100cc:	9303      	str	r3, [sp, #12]
 80100ce:	f88d 301c 	strb.w	r3, [sp, #28]
 80100d2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80100d6:	f88d 201d 	strb.w	r2, [sp, #29]
 80100da:	f88d 201e 	strb.w	r2, [sp, #30]
 80100de:	d021      	beq.n	8010124 <uxr_buffer_request_data+0x70>
 80100e0:	686a      	ldr	r2, [r5, #4]
 80100e2:	682b      	ldr	r3, [r5, #0]
 80100e4:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 80100e8:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 80100ec:	2210      	movs	r2, #16
 80100ee:	2000      	movs	r0, #0
 80100f0:	2108      	movs	r1, #8
 80100f2:	e9cd 1000 	strd	r1, r0, [sp]
 80100f6:	ab0c      	add	r3, sp, #48	; 0x30
 80100f8:	9905      	ldr	r1, [sp, #20]
 80100fa:	4620      	mov	r0, r4
 80100fc:	f001 f802 	bl	8011104 <uxr_prepare_stream_to_write_submessage>
 8010100:	b918      	cbnz	r0, 801010a <uxr_buffer_request_data+0x56>
 8010102:	4604      	mov	r4, r0
 8010104:	4620      	mov	r0, r4
 8010106:	b015      	add	sp, #84	; 0x54
 8010108:	bd30      	pop	{r4, r5, pc}
 801010a:	9904      	ldr	r1, [sp, #16]
 801010c:	aa06      	add	r2, sp, #24
 801010e:	4620      	mov	r0, r4
 8010110:	f001 f932 	bl	8011378 <uxr_init_base_object_request>
 8010114:	a906      	add	r1, sp, #24
 8010116:	4604      	mov	r4, r0
 8010118:	a80c      	add	r0, sp, #48	; 0x30
 801011a:	f002 fc17 	bl	801294c <uxr_serialize_READ_DATA_Payload>
 801011e:	4620      	mov	r0, r4
 8010120:	b015      	add	sp, #84	; 0x54
 8010122:	bd30      	pop	{r4, r5, pc}
 8010124:	2208      	movs	r2, #8
 8010126:	e7e2      	b.n	80100ee <uxr_buffer_request_data+0x3a>

08010128 <uxr_buffer_cancel_data>:
 8010128:	b530      	push	{r4, r5, lr}
 801012a:	b095      	sub	sp, #84	; 0x54
 801012c:	2400      	movs	r4, #0
 801012e:	2308      	movs	r3, #8
 8010130:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8010134:	9300      	str	r3, [sp, #0]
 8010136:	9205      	str	r2, [sp, #20]
 8010138:	2501      	movs	r5, #1
 801013a:	ab0c      	add	r3, sp, #48	; 0x30
 801013c:	2210      	movs	r2, #16
 801013e:	f8ad 401c 	strh.w	r4, [sp, #28]
 8010142:	f88d 401e 	strb.w	r4, [sp, #30]
 8010146:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 801014a:	f8cd 402a 	str.w	r4, [sp, #42]	; 0x2a
 801014e:	9103      	str	r1, [sp, #12]
 8010150:	4604      	mov	r4, r0
 8010152:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8010156:	f000 ffd5 	bl	8011104 <uxr_prepare_stream_to_write_submessage>
 801015a:	b918      	cbnz	r0, 8010164 <uxr_buffer_cancel_data+0x3c>
 801015c:	4604      	mov	r4, r0
 801015e:	4620      	mov	r0, r4
 8010160:	b015      	add	sp, #84	; 0x54
 8010162:	bd30      	pop	{r4, r5, pc}
 8010164:	9905      	ldr	r1, [sp, #20]
 8010166:	aa06      	add	r2, sp, #24
 8010168:	4620      	mov	r0, r4
 801016a:	f001 f905 	bl	8011378 <uxr_init_base_object_request>
 801016e:	a906      	add	r1, sp, #24
 8010170:	4604      	mov	r4, r0
 8010172:	a80c      	add	r0, sp, #48	; 0x30
 8010174:	f002 fbea 	bl	801294c <uxr_serialize_READ_DATA_Payload>
 8010178:	4620      	mov	r0, r4
 801017a:	b015      	add	sp, #84	; 0x54
 801017c:	bd30      	pop	{r4, r5, pc}
 801017e:	bf00      	nop

08010180 <read_submessage_format>:
 8010180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010184:	b095      	sub	sp, #84	; 0x54
 8010186:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 801018a:	b113      	cbz	r3, 8010192 <read_submessage_format+0x12>
 801018c:	b015      	add	sp, #84	; 0x54
 801018e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010192:	460c      	mov	r4, r1
 8010194:	4616      	mov	r6, r2
 8010196:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801019a:	461d      	mov	r5, r3
 801019c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801019e:	9304      	str	r3, [sp, #16]
 80101a0:	1a52      	subs	r2, r2, r1
 80101a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80101a4:	9305      	str	r3, [sp, #20]
 80101a6:	4607      	mov	r7, r0
 80101a8:	a80c      	add	r0, sp, #48	; 0x30
 80101aa:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 80101ae:	f7ff fc89 	bl	800fac4 <ucdr_init_buffer>
 80101b2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80101b6:	a80c      	add	r0, sp, #48	; 0x30
 80101b8:	f7ff fc5a 	bl	800fa70 <ucdr_set_on_full_buffer_callback>
 80101bc:	69e3      	ldr	r3, [r4, #28]
 80101be:	b193      	cbz	r3, 80101e6 <read_submessage_format+0x66>
 80101c0:	f1b8 0f07 	cmp.w	r8, #7
 80101c4:	751d      	strb	r5, [r3, #20]
 80101c6:	d03e      	beq.n	8010246 <read_submessage_format+0xc6>
 80101c8:	f1b8 0f08 	cmp.w	r8, #8
 80101cc:	d02c      	beq.n	8010228 <read_submessage_format+0xa8>
 80101ce:	f1b8 0f06 	cmp.w	r8, #6
 80101d2:	d011      	beq.n	80101f8 <read_submessage_format+0x78>
 80101d4:	2201      	movs	r2, #1
 80101d6:	751a      	strb	r2, [r3, #20]
 80101d8:	4631      	mov	r1, r6
 80101da:	4620      	mov	r0, r4
 80101dc:	f7ff fcc2 	bl	800fb64 <ucdr_advance_buffer>
 80101e0:	b015      	add	sp, #84	; 0x54
 80101e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101e6:	f1b8 0f07 	cmp.w	r8, #7
 80101ea:	d02c      	beq.n	8010246 <read_submessage_format+0xc6>
 80101ec:	f1b8 0f08 	cmp.w	r8, #8
 80101f0:	d01a      	beq.n	8010228 <read_submessage_format+0xa8>
 80101f2:	f1b8 0f06 	cmp.w	r8, #6
 80101f6:	d1ef      	bne.n	80101d8 <read_submessage_format+0x58>
 80101f8:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 80101fc:	b18d      	cbz	r5, 8010222 <read_submessage_format+0xa2>
 80101fe:	2306      	movs	r3, #6
 8010200:	f88d 3016 	strb.w	r3, [sp, #22]
 8010204:	aa0c      	add	r2, sp, #48	; 0x30
 8010206:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801020a:	9302      	str	r3, [sp, #8]
 801020c:	9200      	str	r2, [sp, #0]
 801020e:	9b04      	ldr	r3, [sp, #16]
 8010210:	9905      	ldr	r1, [sp, #20]
 8010212:	9601      	str	r6, [sp, #4]
 8010214:	464a      	mov	r2, r9
 8010216:	4638      	mov	r0, r7
 8010218:	47a8      	blx	r5
 801021a:	2301      	movs	r3, #1
 801021c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8010220:	69e3      	ldr	r3, [r4, #28]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d1d6      	bne.n	80101d4 <read_submessage_format+0x54>
 8010226:	e7d7      	b.n	80101d8 <read_submessage_format+0x58>
 8010228:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801022c:	2a00      	cmp	r2, #0
 801022e:	d0f8      	beq.n	8010222 <read_submessage_format+0xa2>
 8010230:	a906      	add	r1, sp, #24
 8010232:	a80c      	add	r0, sp, #48	; 0x30
 8010234:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010236:	f002 fc29 	bl	8012a8c <uxr_deserialize_SampleIdentity>
 801023a:	2800      	cmp	r0, #0
 801023c:	d13c      	bne.n	80102b8 <read_submessage_format+0x138>
 801023e:	69e3      	ldr	r3, [r4, #28]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d1c7      	bne.n	80101d4 <read_submessage_format+0x54>
 8010244:	e7c8      	b.n	80101d8 <read_submessage_format+0x58>
 8010246:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801024a:	b132      	cbz	r2, 801025a <read_submessage_format+0xda>
 801024c:	a906      	add	r1, sp, #24
 801024e:	a80c      	add	r0, sp, #48	; 0x30
 8010250:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010252:	f002 f8ff 	bl	8012454 <uxr_deserialize_BaseObjectRequest>
 8010256:	b930      	cbnz	r0, 8010266 <read_submessage_format+0xe6>
 8010258:	69e3      	ldr	r3, [r4, #28]
 801025a:	68a2      	ldr	r2, [r4, #8]
 801025c:	4432      	add	r2, r6
 801025e:	60a2      	str	r2, [r4, #8]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d1b7      	bne.n	80101d4 <read_submessage_format+0x54>
 8010264:	e7b8      	b.n	80101d8 <read_submessage_format+0x58>
 8010266:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801026a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801026c:	1a52      	subs	r2, r2, r1
 801026e:	a80c      	add	r0, sp, #48	; 0x30
 8010270:	1aed      	subs	r5, r5, r3
 8010272:	f7ff fc27 	bl	800fac4 <ucdr_init_buffer>
 8010276:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801027a:	a80c      	add	r0, sp, #48	; 0x30
 801027c:	f7ff fbf8 	bl	800fa70 <ucdr_set_on_full_buffer_callback>
 8010280:	4435      	add	r5, r6
 8010282:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8010286:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801028a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 801028e:	9002      	str	r0, [sp, #8]
 8010290:	2207      	movs	r2, #7
 8010292:	f88d 2016 	strb.w	r2, [sp, #22]
 8010296:	b2ad      	uxth	r5, r5
 8010298:	aa0c      	add	r2, sp, #48	; 0x30
 801029a:	9200      	str	r2, [sp, #0]
 801029c:	9501      	str	r5, [sp, #4]
 801029e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80102a2:	b29b      	uxth	r3, r3
 80102a4:	9905      	ldr	r1, [sp, #20]
 80102a6:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
 80102aa:	464a      	mov	r2, r9
 80102ac:	4638      	mov	r0, r7
 80102ae:	47a8      	blx	r5
 80102b0:	2301      	movs	r3, #1
 80102b2:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80102b6:	e7cf      	b.n	8010258 <read_submessage_format+0xd8>
 80102b8:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80102bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80102be:	1a52      	subs	r2, r2, r1
 80102c0:	a80c      	add	r0, sp, #48	; 0x30
 80102c2:	1aed      	subs	r5, r5, r3
 80102c4:	f7ff fbfe 	bl	800fac4 <ucdr_init_buffer>
 80102c8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80102cc:	a80c      	add	r0, sp, #48	; 0x30
 80102ce:	f7ff fbcf 	bl	800fa70 <ucdr_set_on_full_buffer_callback>
 80102d2:	4435      	add	r5, r6
 80102d4:	2308      	movs	r3, #8
 80102d6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80102da:	f88d 3016 	strb.w	r3, [sp, #22]
 80102de:	b2ad      	uxth	r5, r5
 80102e0:	ab0c      	add	r3, sp, #48	; 0x30
 80102e2:	9300      	str	r3, [sp, #0]
 80102e4:	9002      	str	r0, [sp, #8]
 80102e6:	9501      	str	r5, [sp, #4]
 80102e8:	ab06      	add	r3, sp, #24
 80102ea:	9905      	ldr	r1, [sp, #20]
 80102ec:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 80102f0:	464a      	mov	r2, r9
 80102f2:	4638      	mov	r0, r7
 80102f4:	47a8      	blx	r5
 80102f6:	2301      	movs	r3, #1
 80102f8:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80102fc:	e79f      	b.n	801023e <read_submessage_format+0xbe>
 80102fe:	bf00      	nop

08010300 <on_get_fragmentation_info>:
 8010300:	b500      	push	{lr}
 8010302:	b08b      	sub	sp, #44	; 0x2c
 8010304:	4601      	mov	r1, r0
 8010306:	2204      	movs	r2, #4
 8010308:	a802      	add	r0, sp, #8
 801030a:	f7ff fbdb 	bl	800fac4 <ucdr_init_buffer>
 801030e:	f10d 0305 	add.w	r3, sp, #5
 8010312:	a802      	add	r0, sp, #8
 8010314:	f10d 0206 	add.w	r2, sp, #6
 8010318:	a901      	add	r1, sp, #4
 801031a:	f001 f9b1 	bl	8011680 <uxr_read_submessage_header>
 801031e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010322:	2b0d      	cmp	r3, #13
 8010324:	d003      	beq.n	801032e <on_get_fragmentation_info+0x2e>
 8010326:	2000      	movs	r0, #0
 8010328:	b00b      	add	sp, #44	; 0x2c
 801032a:	f85d fb04 	ldr.w	pc, [sp], #4
 801032e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010332:	f013 0f02 	tst.w	r3, #2
 8010336:	bf14      	ite	ne
 8010338:	2002      	movne	r0, #2
 801033a:	2001      	moveq	r0, #1
 801033c:	b00b      	add	sp, #44	; 0x2c
 801033e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010342:	bf00      	nop

08010344 <read_submessage_get_info>:
 8010344:	b570      	push	{r4, r5, r6, lr}
 8010346:	2500      	movs	r5, #0
 8010348:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 801034c:	4604      	mov	r4, r0
 801034e:	f44f 7224 	mov.w	r2, #656	; 0x290
 8010352:	460e      	mov	r6, r1
 8010354:	a810      	add	r0, sp, #64	; 0x40
 8010356:	4629      	mov	r1, r5
 8010358:	e9cd 5503 	strd	r5, r5, [sp, #12]
 801035c:	f007 fe0c 	bl	8017f78 <memset>
 8010360:	a903      	add	r1, sp, #12
 8010362:	4630      	mov	r0, r6
 8010364:	f002 fa34 	bl	80127d0 <uxr_deserialize_GET_INFO_Payload>
 8010368:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801036c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010370:	4620      	mov	r0, r4
 8010372:	f000 fff9 	bl	8011368 <uxr_session_header_offset>
 8010376:	462b      	mov	r3, r5
 8010378:	9000      	str	r0, [sp, #0]
 801037a:	a905      	add	r1, sp, #20
 801037c:	a808      	add	r0, sp, #32
 801037e:	220c      	movs	r2, #12
 8010380:	f7ff fb8e 	bl	800faa0 <ucdr_init_buffer_origin_offset>
 8010384:	a910      	add	r1, sp, #64	; 0x40
 8010386:	a808      	add	r0, sp, #32
 8010388:	f002 fa94 	bl	80128b4 <uxr_serialize_INFO_Payload>
 801038c:	9b08      	ldr	r3, [sp, #32]
 801038e:	462a      	mov	r2, r5
 8010390:	4629      	mov	r1, r5
 8010392:	4620      	mov	r0, r4
 8010394:	f000 ff90 	bl	80112b8 <uxr_stamp_session_header>
 8010398:	a808      	add	r0, sp, #32
 801039a:	f7ff fbbf 	bl	800fb1c <ucdr_buffer_length>
 801039e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80103a0:	4602      	mov	r2, r0
 80103a2:	a905      	add	r1, sp, #20
 80103a4:	e9d3 0400 	ldrd	r0, r4, [r3]
 80103a8:	47a0      	blx	r4
 80103aa:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 80103ae:	bd70      	pop	{r4, r5, r6, pc}

080103b0 <write_submessage_acknack.isra.0>:
 80103b0:	b570      	push	{r4, r5, r6, lr}
 80103b2:	b092      	sub	sp, #72	; 0x48
 80103b4:	4605      	mov	r5, r0
 80103b6:	460e      	mov	r6, r1
 80103b8:	4614      	mov	r4, r2
 80103ba:	f000 ffd5 	bl	8011368 <uxr_session_header_offset>
 80103be:	a905      	add	r1, sp, #20
 80103c0:	9000      	str	r0, [sp, #0]
 80103c2:	2300      	movs	r3, #0
 80103c4:	a80a      	add	r0, sp, #40	; 0x28
 80103c6:	2211      	movs	r2, #17
 80103c8:	f7ff fb6a 	bl	800faa0 <ucdr_init_buffer_origin_offset>
 80103cc:	2218      	movs	r2, #24
 80103ce:	fb02 5404 	mla	r4, r2, r4, r5
 80103d2:	2300      	movs	r3, #0
 80103d4:	2205      	movs	r2, #5
 80103d6:	3450      	adds	r4, #80	; 0x50
 80103d8:	a80a      	add	r0, sp, #40	; 0x28
 80103da:	210a      	movs	r1, #10
 80103dc:	f001 f936 	bl	801164c <uxr_buffer_submessage_header>
 80103e0:	a903      	add	r1, sp, #12
 80103e2:	4620      	mov	r0, r4
 80103e4:	f005 fe4a 	bl	801607c <uxr_compute_acknack>
 80103e8:	a903      	add	r1, sp, #12
 80103ea:	ba43      	rev16	r3, r0
 80103ec:	a80a      	add	r0, sp, #40	; 0x28
 80103ee:	f8ad 300e 	strh.w	r3, [sp, #14]
 80103f2:	f88d 6010 	strb.w	r6, [sp, #16]
 80103f6:	f002 facd 	bl	8012994 <uxr_serialize_ACKNACK_Payload>
 80103fa:	2200      	movs	r2, #0
 80103fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103fe:	4611      	mov	r1, r2
 8010400:	4628      	mov	r0, r5
 8010402:	f000 ff59 	bl	80112b8 <uxr_stamp_session_header>
 8010406:	a80a      	add	r0, sp, #40	; 0x28
 8010408:	f7ff fb88 	bl	800fb1c <ucdr_buffer_length>
 801040c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 801040e:	4602      	mov	r2, r0
 8010410:	a905      	add	r1, sp, #20
 8010412:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010416:	47a0      	blx	r4
 8010418:	b012      	add	sp, #72	; 0x48
 801041a:	bd70      	pop	{r4, r5, r6, pc}

0801041c <uxr_init_session>:
 801041c:	b5d0      	push	{r4, r6, r7, lr}
 801041e:	2300      	movs	r3, #0
 8010420:	2600      	movs	r6, #0
 8010422:	2700      	movs	r7, #0
 8010424:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 8010428:	4604      	mov	r4, r0
 801042a:	6701      	str	r1, [r0, #112]	; 0x70
 801042c:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 8010430:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 8010434:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 8010438:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 801043c:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 8010440:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8010444:	2181      	movs	r1, #129	; 0x81
 8010446:	f000 fea1 	bl	801118c <uxr_init_session_info>
 801044a:	f104 0008 	add.w	r0, r4, #8
 801044e:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 8010452:	f001 b817 	b.w	8011484 <uxr_init_stream_storage>
 8010456:	bf00      	nop

08010458 <uxr_set_status_callback>:
 8010458:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 801045c:	4770      	bx	lr
 801045e:	bf00      	nop

08010460 <uxr_set_topic_callback>:
 8010460:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8010464:	4770      	bx	lr
 8010466:	bf00      	nop

08010468 <uxr_set_request_callback>:
 8010468:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 801046c:	4770      	bx	lr
 801046e:	bf00      	nop

08010470 <uxr_set_reply_callback>:
 8010470:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8010474:	4770      	bx	lr
 8010476:	bf00      	nop

08010478 <uxr_create_output_best_effort_stream>:
 8010478:	b510      	push	{r4, lr}
 801047a:	b084      	sub	sp, #16
 801047c:	e9cd 2100 	strd	r2, r1, [sp]
 8010480:	4604      	mov	r4, r0
 8010482:	f000 ff71 	bl	8011368 <uxr_session_header_offset>
 8010486:	e9dd 2100 	ldrd	r2, r1, [sp]
 801048a:	4603      	mov	r3, r0
 801048c:	f104 0008 	add.w	r0, r4, #8
 8010490:	b004      	add	sp, #16
 8010492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010496:	f001 b83f 	b.w	8011518 <uxr_add_output_best_effort_buffer>
 801049a:	bf00      	nop

0801049c <uxr_create_output_reliable_stream>:
 801049c:	b530      	push	{r4, r5, lr}
 801049e:	b089      	sub	sp, #36	; 0x24
 80104a0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80104a4:	9303      	str	r3, [sp, #12]
 80104a6:	4604      	mov	r4, r0
 80104a8:	f000 ff5e 	bl	8011368 <uxr_session_header_offset>
 80104ac:	4605      	mov	r5, r0
 80104ae:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80104b2:	9905      	ldr	r1, [sp, #20]
 80104b4:	9500      	str	r5, [sp, #0]
 80104b6:	f104 0008 	add.w	r0, r4, #8
 80104ba:	f001 f83f 	bl	801153c <uxr_add_output_reliable_buffer>
 80104be:	2200      	movs	r2, #0
 80104c0:	b2c3      	uxtb	r3, r0
 80104c2:	f363 0207 	bfi	r2, r3, #0, #8
 80104c6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80104ca:	f363 220f 	bfi	r2, r3, #8, #8
 80104ce:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80104d2:	f363 4217 	bfi	r2, r3, #16, #8
 80104d6:	0e03      	lsrs	r3, r0, #24
 80104d8:	f363 621f 	bfi	r2, r3, #24, #8
 80104dc:	4610      	mov	r0, r2
 80104de:	b009      	add	sp, #36	; 0x24
 80104e0:	bd30      	pop	{r4, r5, pc}
 80104e2:	bf00      	nop

080104e4 <uxr_create_input_best_effort_stream>:
 80104e4:	b082      	sub	sp, #8
 80104e6:	3008      	adds	r0, #8
 80104e8:	b002      	add	sp, #8
 80104ea:	f001 b841 	b.w	8011570 <uxr_add_input_best_effort_buffer>
 80104ee:	bf00      	nop

080104f0 <uxr_create_input_reliable_stream>:
 80104f0:	b510      	push	{r4, lr}
 80104f2:	b084      	sub	sp, #16
 80104f4:	4c0b      	ldr	r4, [pc, #44]	; (8010524 <uxr_create_input_reliable_stream+0x34>)
 80104f6:	9400      	str	r4, [sp, #0]
 80104f8:	3008      	adds	r0, #8
 80104fa:	f001 f84f 	bl	801159c <uxr_add_input_reliable_buffer>
 80104fe:	2200      	movs	r2, #0
 8010500:	b2c3      	uxtb	r3, r0
 8010502:	f363 0207 	bfi	r2, r3, #0, #8
 8010506:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801050a:	f363 220f 	bfi	r2, r3, #8, #8
 801050e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010512:	f363 4217 	bfi	r2, r3, #16, #8
 8010516:	0e03      	lsrs	r3, r0, #24
 8010518:	f363 621f 	bfi	r2, r3, #24, #8
 801051c:	4610      	mov	r0, r2
 801051e:	b004      	add	sp, #16
 8010520:	bd10      	pop	{r4, pc}
 8010522:	bf00      	nop
 8010524:	08010301 	.word	0x08010301

08010528 <uxr_epoch_nanos>:
 8010528:	b510      	push	{r4, lr}
 801052a:	4604      	mov	r4, r0
 801052c:	f001 f8f0 	bl	8011710 <uxr_nanos>
 8010530:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8010534:	1ac0      	subs	r0, r0, r3
 8010536:	eb61 0102 	sbc.w	r1, r1, r2
 801053a:	bd10      	pop	{r4, pc}

0801053c <uxr_flash_output_streams>:
 801053c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010540:	7e03      	ldrb	r3, [r0, #24]
 8010542:	b084      	sub	sp, #16
 8010544:	4604      	mov	r4, r0
 8010546:	b1fb      	cbz	r3, 8010588 <uxr_flash_output_streams+0x4c>
 8010548:	f04f 0900 	mov.w	r9, #0
 801054c:	4648      	mov	r0, r9
 801054e:	f10d 0802 	add.w	r8, sp, #2
 8010552:	af03      	add	r7, sp, #12
 8010554:	ae02      	add	r6, sp, #8
 8010556:	2201      	movs	r2, #1
 8010558:	4611      	mov	r1, r2
 801055a:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801055e:	f000 ff3b 	bl	80113d8 <uxr_stream_id>
 8010562:	3508      	adds	r5, #8
 8010564:	4684      	mov	ip, r0
 8010566:	4643      	mov	r3, r8
 8010568:	4628      	mov	r0, r5
 801056a:	463a      	mov	r2, r7
 801056c:	4631      	mov	r1, r6
 801056e:	f8cd c004 	str.w	ip, [sp, #4]
 8010572:	f005 fe0b 	bl	801618c <uxr_prepare_best_effort_buffer_to_send>
 8010576:	2800      	cmp	r0, #0
 8010578:	d13d      	bne.n	80105f6 <uxr_flash_output_streams+0xba>
 801057a:	7e23      	ldrb	r3, [r4, #24]
 801057c:	f109 0901 	add.w	r9, r9, #1
 8010580:	fa5f f089 	uxtb.w	r0, r9
 8010584:	4283      	cmp	r3, r0
 8010586:	d8e6      	bhi.n	8010556 <uxr_flash_output_streams+0x1a>
 8010588:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801058c:	b383      	cbz	r3, 80105f0 <uxr_flash_output_streams+0xb4>
 801058e:	f04f 0900 	mov.w	r9, #0
 8010592:	4648      	mov	r0, r9
 8010594:	f10d 0802 	add.w	r8, sp, #2
 8010598:	af03      	add	r7, sp, #12
 801059a:	ae02      	add	r6, sp, #8
 801059c:	2201      	movs	r2, #1
 801059e:	2102      	movs	r1, #2
 80105a0:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80105a4:	f000 ff18 	bl	80113d8 <uxr_stream_id>
 80105a8:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80105ac:	3520      	adds	r5, #32
 80105ae:	9001      	str	r0, [sp, #4]
 80105b0:	e00c      	b.n	80105cc <uxr_flash_output_streams+0x90>
 80105b2:	9b02      	ldr	r3, [sp, #8]
 80105b4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80105b8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80105bc:	f000 fe7c 	bl	80112b8 <uxr_stamp_session_header>
 80105c0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80105c2:	9a03      	ldr	r2, [sp, #12]
 80105c4:	9902      	ldr	r1, [sp, #8]
 80105c6:	e9d3 0a00 	ldrd	r0, sl, [r3]
 80105ca:	47d0      	blx	sl
 80105cc:	4643      	mov	r3, r8
 80105ce:	463a      	mov	r2, r7
 80105d0:	4631      	mov	r1, r6
 80105d2:	4628      	mov	r0, r5
 80105d4:	f005 ffe2 	bl	801659c <uxr_prepare_next_reliable_buffer_to_send>
 80105d8:	4603      	mov	r3, r0
 80105da:	4620      	mov	r0, r4
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d1e8      	bne.n	80105b2 <uxr_flash_output_streams+0x76>
 80105e0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80105e4:	f109 0901 	add.w	r9, r9, #1
 80105e8:	fa5f f089 	uxtb.w	r0, r9
 80105ec:	4283      	cmp	r3, r0
 80105ee:	d8d5      	bhi.n	801059c <uxr_flash_output_streams+0x60>
 80105f0:	b004      	add	sp, #16
 80105f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105f6:	9b02      	ldr	r3, [sp, #8]
 80105f8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80105fc:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010600:	4620      	mov	r0, r4
 8010602:	f000 fe59 	bl	80112b8 <uxr_stamp_session_header>
 8010606:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010608:	9a03      	ldr	r2, [sp, #12]
 801060a:	9902      	ldr	r1, [sp, #8]
 801060c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010610:	47a8      	blx	r5
 8010612:	f109 0901 	add.w	r9, r9, #1
 8010616:	7e23      	ldrb	r3, [r4, #24]
 8010618:	fa5f f089 	uxtb.w	r0, r9
 801061c:	4283      	cmp	r3, r0
 801061e:	d89a      	bhi.n	8010556 <uxr_flash_output_streams+0x1a>
 8010620:	e7b2      	b.n	8010588 <uxr_flash_output_streams+0x4c>
 8010622:	bf00      	nop

08010624 <read_submessage_info>:
 8010624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010628:	460d      	mov	r5, r1
 801062a:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 801062e:	4669      	mov	r1, sp
 8010630:	4607      	mov	r7, r0
 8010632:	4628      	mov	r0, r5
 8010634:	f001 ffd2 	bl	80125dc <uxr_deserialize_BaseObjectReply>
 8010638:	a902      	add	r1, sp, #8
 801063a:	4604      	mov	r4, r0
 801063c:	4628      	mov	r0, r5
 801063e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8010642:	f004 fbd3 	bl	8014dec <ucdr_deserialize_bool>
 8010646:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801064a:	4004      	ands	r4, r0
 801064c:	b2e4      	uxtb	r4, r4
 801064e:	b95b      	cbnz	r3, 8010668 <read_submessage_info+0x44>
 8010650:	a987      	add	r1, sp, #540	; 0x21c
 8010652:	4628      	mov	r0, r5
 8010654:	f004 fbca 	bl	8014dec <ucdr_deserialize_bool>
 8010658:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 801065c:	4606      	mov	r6, r0
 801065e:	b94b      	cbnz	r3, 8010674 <read_submessage_info+0x50>
 8010660:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8010664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010668:	a903      	add	r1, sp, #12
 801066a:	4628      	mov	r0, r5
 801066c:	f001 fe44 	bl	80122f8 <uxr_deserialize_ObjectVariant>
 8010670:	4004      	ands	r4, r0
 8010672:	e7ed      	b.n	8010650 <read_submessage_info+0x2c>
 8010674:	a988      	add	r1, sp, #544	; 0x220
 8010676:	4628      	mov	r0, r5
 8010678:	f004 fbe8 	bl	8014e4c <ucdr_deserialize_uint8_t>
 801067c:	4234      	tst	r4, r6
 801067e:	d0ef      	beq.n	8010660 <read_submessage_info+0x3c>
 8010680:	2800      	cmp	r0, #0
 8010682:	d0ed      	beq.n	8010660 <read_submessage_info+0x3c>
 8010684:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 8010688:	2b0d      	cmp	r3, #13
 801068a:	d1e9      	bne.n	8010660 <read_submessage_info+0x3c>
 801068c:	4628      	mov	r0, r5
 801068e:	a98a      	add	r1, sp, #552	; 0x228
 8010690:	f005 f982 	bl	8015998 <ucdr_deserialize_int16_t>
 8010694:	b140      	cbz	r0, 80106a8 <read_submessage_info+0x84>
 8010696:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 801069a:	2b00      	cmp	r3, #0
 801069c:	dd07      	ble.n	80106ae <read_submessage_info+0x8a>
 801069e:	f1b8 0f00 	cmp.w	r8, #0
 80106a2:	bf14      	ite	ne
 80106a4:	2001      	movne	r0, #1
 80106a6:	2002      	moveq	r0, #2
 80106a8:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 80106ac:	e7d8      	b.n	8010660 <read_submessage_info+0x3c>
 80106ae:	2000      	movs	r0, #0
 80106b0:	e7fa      	b.n	80106a8 <read_submessage_info+0x84>
 80106b2:	bf00      	nop

080106b4 <read_submessage_list>:
 80106b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106b8:	b098      	sub	sp, #96	; 0x60
 80106ba:	f8df 9304 	ldr.w	r9, [pc, #772]	; 80109c0 <read_submessage_list+0x30c>
 80106be:	920b      	str	r2, [sp, #44]	; 0x2c
 80106c0:	4604      	mov	r4, r0
 80106c2:	4688      	mov	r8, r1
 80106c4:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 80106c8:	aa0e      	add	r2, sp, #56	; 0x38
 80106ca:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 80106ce:	4640      	mov	r0, r8
 80106d0:	f000 ffd6 	bl	8011680 <uxr_read_submessage_header>
 80106d4:	2800      	cmp	r0, #0
 80106d6:	f000 813d 	beq.w	8010954 <read_submessage_list+0x2a0>
 80106da:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 80106de:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 80106e2:	3b02      	subs	r3, #2
 80106e4:	2b0d      	cmp	r3, #13
 80106e6:	d8ed      	bhi.n	80106c4 <read_submessage_list+0x10>
 80106e8:	a101      	add	r1, pc, #4	; (adr r1, 80106f0 <read_submessage_list+0x3c>)
 80106ea:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80106ee:	bf00      	nop
 80106f0:	0801094b 	.word	0x0801094b
 80106f4:	080106c5 	.word	0x080106c5
 80106f8:	0801093b 	.word	0x0801093b
 80106fc:	080108df 	.word	0x080108df
 8010700:	080108d5 	.word	0x080108d5
 8010704:	080106c5 	.word	0x080106c5
 8010708:	080106c5 	.word	0x080106c5
 801070c:	08010837 	.word	0x08010837
 8010710:	080107c9 	.word	0x080107c9
 8010714:	08010787 	.word	0x08010787
 8010718:	080106c5 	.word	0x080106c5
 801071c:	080106c5 	.word	0x080106c5
 8010720:	080106c5 	.word	0x080106c5
 8010724:	08010729 	.word	0x08010729
 8010728:	a912      	add	r1, sp, #72	; 0x48
 801072a:	4640      	mov	r0, r8
 801072c:	f002 f982 	bl	8012a34 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8010730:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8010734:	2d00      	cmp	r5, #0
 8010736:	f000 8115 	beq.w	8010964 <read_submessage_list+0x2b0>
 801073a:	f000 ffe9 	bl	8011710 <uxr_nanos>
 801073e:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010740:	460b      	mov	r3, r1
 8010742:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010744:	2700      	movs	r7, #0
 8010746:	fbc9 6701 	smlal	r6, r7, r9, r1
 801074a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801074e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8010750:	4602      	mov	r2, r0
 8010752:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010754:	460e      	mov	r6, r1
 8010756:	2700      	movs	r7, #0
 8010758:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 801075c:	9106      	str	r1, [sp, #24]
 801075e:	fbc9 6700 	smlal	r6, r7, r9, r0
 8010762:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010764:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8010768:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801076a:	2700      	movs	r7, #0
 801076c:	4608      	mov	r0, r1
 801076e:	4639      	mov	r1, r7
 8010770:	fbc9 0106 	smlal	r0, r1, r9, r6
 8010774:	e9cd 0100 	strd	r0, r1, [sp]
 8010778:	4620      	mov	r0, r4
 801077a:	47a8      	blx	r5
 801077c:	f04f 0301 	mov.w	r3, #1
 8010780:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8010784:	e79e      	b.n	80106c4 <read_submessage_list+0x10>
 8010786:	a912      	add	r1, sp, #72	; 0x48
 8010788:	4640      	mov	r0, r8
 801078a:	f002 f941 	bl	8012a10 <uxr_deserialize_HEARTBEAT_Payload>
 801078e:	2100      	movs	r1, #0
 8010790:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8010794:	f000 fe4a 	bl	801142c <uxr_stream_id_from_raw>
 8010798:	f3c0 2507 	ubfx	r5, r0, #8, #8
 801079c:	4603      	mov	r3, r0
 801079e:	4629      	mov	r1, r5
 80107a0:	f104 0008 	add.w	r0, r4, #8
 80107a4:	9311      	str	r3, [sp, #68]	; 0x44
 80107a6:	f000 ff2f 	bl	8011608 <uxr_get_input_reliable_stream>
 80107aa:	2800      	cmp	r0, #0
 80107ac:	d08a      	beq.n	80106c4 <read_submessage_list+0x10>
 80107ae:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 80107b2:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 80107b6:	f005 fc55 	bl	8016064 <uxr_process_heartbeat>
 80107ba:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 80107be:	462a      	mov	r2, r5
 80107c0:	4620      	mov	r0, r4
 80107c2:	f7ff fdf5 	bl	80103b0 <write_submessage_acknack.isra.0>
 80107c6:	e77d      	b.n	80106c4 <read_submessage_list+0x10>
 80107c8:	a912      	add	r1, sp, #72	; 0x48
 80107ca:	4640      	mov	r0, r8
 80107cc:	f002 f8f8 	bl	80129c0 <uxr_deserialize_ACKNACK_Payload>
 80107d0:	2100      	movs	r1, #0
 80107d2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80107d6:	f000 fe29 	bl	801142c <uxr_stream_id_from_raw>
 80107da:	4603      	mov	r3, r0
 80107dc:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80107e0:	f104 0008 	add.w	r0, r4, #8
 80107e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80107e6:	f000 fef9 	bl	80115dc <uxr_get_output_reliable_stream>
 80107ea:	4605      	mov	r5, r0
 80107ec:	2800      	cmp	r0, #0
 80107ee:	f43f af69 	beq.w	80106c4 <read_submessage_list+0x10>
 80107f2:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 80107f6:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 80107fa:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 80107fe:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8010802:	b289      	uxth	r1, r1
 8010804:	f005 ff72 	bl	80166ec <uxr_process_acknack>
 8010808:	4628      	mov	r0, r5
 801080a:	f005 ff35 	bl	8016678 <uxr_begin_output_nack_buffer_it>
 801080e:	af10      	add	r7, sp, #64	; 0x40
 8010810:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 8010814:	e005      	b.n	8010822 <read_submessage_list+0x16e>
 8010816:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010818:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801081a:	9910      	ldr	r1, [sp, #64]	; 0x40
 801081c:	e9d3 0600 	ldrd	r0, r6, [r3]
 8010820:	47b0      	blx	r6
 8010822:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 8010826:	aa11      	add	r2, sp, #68	; 0x44
 8010828:	4639      	mov	r1, r7
 801082a:	4628      	mov	r0, r5
 801082c:	f005 ff26 	bl	801667c <uxr_next_reliable_nack_buffer_to_send>
 8010830:	2800      	cmp	r0, #0
 8010832:	d1f0      	bne.n	8010816 <read_submessage_list+0x162>
 8010834:	e746      	b.n	80106c4 <read_submessage_list+0x10>
 8010836:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801083a:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 801083e:	af10      	add	r7, sp, #64	; 0x40
 8010840:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8010844:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 8010848:	4639      	mov	r1, r7
 801084a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801084e:	f89d 6037 	ldrb.w	r6, [sp, #55]	; 0x37
 8010852:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8010856:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
 801085a:	4640      	mov	r0, r8
 801085c:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8010860:	f001 fdf8 	bl	8012454 <uxr_deserialize_BaseObjectRequest>
 8010864:	4638      	mov	r0, r7
 8010866:	a911      	add	r1, sp, #68	; 0x44
 8010868:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 801086c:	f000 fda2 	bl	80113b4 <uxr_parse_base_object_request>
 8010870:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8010874:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010876:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
 801087a:	9112      	str	r1, [sp, #72]	; 0x48
 801087c:	3d04      	subs	r5, #4
 801087e:	f006 060e 	and.w	r6, r6, #14
 8010882:	b2ad      	uxth	r5, r5
 8010884:	f1ba 0f00 	cmp.w	sl, #0
 8010888:	d006      	beq.n	8010898 <read_submessage_list+0x1e4>
 801088a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 801088e:	9300      	str	r3, [sp, #0]
 8010890:	463a      	mov	r2, r7
 8010892:	2300      	movs	r3, #0
 8010894:	4620      	mov	r0, r4
 8010896:	47d0      	blx	sl
 8010898:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 801089a:	b168      	cbz	r0, 80108b8 <read_submessage_list+0x204>
 801089c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 801089e:	2300      	movs	r3, #0
 80108a0:	3902      	subs	r1, #2
 80108a2:	e002      	b.n	80108aa <read_submessage_list+0x1f6>
 80108a4:	3301      	adds	r3, #1
 80108a6:	4283      	cmp	r3, r0
 80108a8:	d006      	beq.n	80108b8 <read_submessage_list+0x204>
 80108aa:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 80108ae:	42ba      	cmp	r2, r7
 80108b0:	d1f8      	bne.n	80108a4 <read_submessage_list+0x1f0>
 80108b2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80108b4:	2100      	movs	r1, #0
 80108b6:	54d1      	strb	r1, [r2, r3]
 80108b8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80108ba:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80108bc:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80108c0:	9302      	str	r3, [sp, #8]
 80108c2:	e9cd 1000 	strd	r1, r0, [sp]
 80108c6:	4633      	mov	r3, r6
 80108c8:	462a      	mov	r2, r5
 80108ca:	4641      	mov	r1, r8
 80108cc:	4620      	mov	r0, r4
 80108ce:	f7ff fc57 	bl	8010180 <read_submessage_format>
 80108d2:	e6f7      	b.n	80106c4 <read_submessage_list+0x10>
 80108d4:	4641      	mov	r1, r8
 80108d6:	4620      	mov	r0, r4
 80108d8:	f7ff fea4 	bl	8010624 <read_submessage_info>
 80108dc:	e6f2      	b.n	80106c4 <read_submessage_list+0x10>
 80108de:	2a00      	cmp	r2, #0
 80108e0:	d03b      	beq.n	801095a <read_submessage_list+0x2a6>
 80108e2:	a912      	add	r1, sp, #72	; 0x48
 80108e4:	4640      	mov	r0, r8
 80108e6:	f001 ffc7 	bl	8012878 <uxr_deserialize_STATUS_Payload>
 80108ea:	a910      	add	r1, sp, #64	; 0x40
 80108ec:	aa0f      	add	r2, sp, #60	; 0x3c
 80108ee:	a812      	add	r0, sp, #72	; 0x48
 80108f0:	f000 fd60 	bl	80113b4 <uxr_parse_base_object_request>
 80108f4:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80108f8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80108fa:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 80108fe:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8010902:	9111      	str	r1, [sp, #68]	; 0x44
 8010904:	b135      	cbz	r5, 8010914 <read_submessage_list+0x260>
 8010906:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 801090a:	9300      	str	r3, [sp, #0]
 801090c:	4632      	mov	r2, r6
 801090e:	463b      	mov	r3, r7
 8010910:	4620      	mov	r0, r4
 8010912:	47a8      	blx	r5
 8010914:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8010916:	2b00      	cmp	r3, #0
 8010918:	f43f aed4 	beq.w	80106c4 <read_submessage_list+0x10>
 801091c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801091e:	2100      	movs	r1, #0
 8010920:	3802      	subs	r0, #2
 8010922:	e003      	b.n	801092c <read_submessage_list+0x278>
 8010924:	3101      	adds	r1, #1
 8010926:	4299      	cmp	r1, r3
 8010928:	f43f aecc 	beq.w	80106c4 <read_submessage_list+0x10>
 801092c:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 8010930:	42b2      	cmp	r2, r6
 8010932:	d1f7      	bne.n	8010924 <read_submessage_list+0x270>
 8010934:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8010936:	545f      	strb	r7, [r3, r1]
 8010938:	e6c4      	b.n	80106c4 <read_submessage_list+0x10>
 801093a:	2a00      	cmp	r2, #0
 801093c:	f47f aec2 	bne.w	80106c4 <read_submessage_list+0x10>
 8010940:	4641      	mov	r1, r8
 8010942:	4620      	mov	r0, r4
 8010944:	f000 fc7a 	bl	801123c <uxr_read_create_session_status>
 8010948:	e6bc      	b.n	80106c4 <read_submessage_list+0x10>
 801094a:	4641      	mov	r1, r8
 801094c:	4620      	mov	r0, r4
 801094e:	f7ff fcf9 	bl	8010344 <read_submessage_get_info>
 8010952:	e6b7      	b.n	80106c4 <read_submessage_list+0x10>
 8010954:	b018      	add	sp, #96	; 0x60
 8010956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801095a:	4641      	mov	r1, r8
 801095c:	4620      	mov	r0, r4
 801095e:	f000 fc79 	bl	8011254 <uxr_read_delete_session_status>
 8010962:	e6af      	b.n	80106c4 <read_submessage_list+0x10>
 8010964:	f000 fed4 	bl	8011710 <uxr_nanos>
 8010968:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801096a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801096c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801096e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8010970:	2700      	movs	r7, #0
 8010972:	fbc9 6703 	smlal	r6, r7, r9, r3
 8010976:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010978:	eb16 0c00 	adds.w	ip, r6, r0
 801097c:	4618      	mov	r0, r3
 801097e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010980:	eb47 0e01 	adc.w	lr, r7, r1
 8010984:	461e      	mov	r6, r3
 8010986:	2100      	movs	r1, #0
 8010988:	2700      	movs	r7, #0
 801098a:	fbc9 0105 	smlal	r0, r1, r9, r5
 801098e:	fbc9 6702 	smlal	r6, r7, r9, r2
 8010992:	1983      	adds	r3, r0, r6
 8010994:	eb41 0207 	adc.w	r2, r1, r7
 8010998:	ebbc 0303 	subs.w	r3, ip, r3
 801099c:	9308      	str	r3, [sp, #32]
 801099e:	eb6e 0302 	sbc.w	r3, lr, r2
 80109a2:	9309      	str	r3, [sp, #36]	; 0x24
 80109a4:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80109a8:	0fd3      	lsrs	r3, r2, #31
 80109aa:	18c9      	adds	r1, r1, r3
 80109ac:	f142 0200 	adc.w	r2, r2, #0
 80109b0:	084b      	lsrs	r3, r1, #1
 80109b2:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 80109b6:	1052      	asrs	r2, r2, #1
 80109b8:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 80109bc:	e6de      	b.n	801077c <read_submessage_list+0xc8>
 80109be:	bf00      	nop
 80109c0:	3b9aca00 	.word	0x3b9aca00

080109c4 <listen_message_reliably>:
 80109c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109c8:	1e0b      	subs	r3, r1, #0
 80109ca:	b09d      	sub	sp, #116	; 0x74
 80109cc:	bfb8      	it	lt
 80109ce:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 80109d2:	9305      	str	r3, [sp, #20]
 80109d4:	4607      	mov	r7, r0
 80109d6:	f000 fe7f 	bl	80116d8 <uxr_millis>
 80109da:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 80109de:	4681      	mov	r9, r0
 80109e0:	2a00      	cmp	r2, #0
 80109e2:	f000 8095 	beq.w	8010b10 <listen_message_reliably+0x14c>
 80109e6:	2600      	movs	r6, #0
 80109e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80109ec:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80109f0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80109f4:	4630      	mov	r0, r6
 80109f6:	4688      	mov	r8, r1
 80109f8:	46ca      	mov	sl, r9
 80109fa:	e00f      	b.n	8010a1c <listen_message_reliably+0x58>
 80109fc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010a00:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010a04:	42a2      	cmp	r2, r4
 8010a06:	eb73 0105 	sbcs.w	r1, r3, r5
 8010a0a:	bfb8      	it	lt
 8010a0c:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
 8010a10:	3601      	adds	r6, #1
 8010a12:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8010a16:	b2f0      	uxtb	r0, r6
 8010a18:	4283      	cmp	r3, r0
 8010a1a:	d951      	bls.n	8010ac0 <listen_message_reliably+0xfc>
 8010a1c:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8010a20:	2201      	movs	r2, #1
 8010a22:	2102      	movs	r1, #2
 8010a24:	f000 fcd8 	bl	80113d8 <uxr_stream_id>
 8010a28:	00e4      	lsls	r4, r4, #3
 8010a2a:	f104 0520 	add.w	r5, r4, #32
 8010a2e:	443d      	add	r5, r7
 8010a30:	4601      	mov	r1, r0
 8010a32:	4643      	mov	r3, r8
 8010a34:	4652      	mov	r2, sl
 8010a36:	4628      	mov	r0, r5
 8010a38:	9109      	str	r1, [sp, #36]	; 0x24
 8010a3a:	f005 fdf1 	bl	8016620 <uxr_update_output_stream_heartbeat_timestamp>
 8010a3e:	193b      	adds	r3, r7, r4
 8010a40:	2800      	cmp	r0, #0
 8010a42:	d0db      	beq.n	80109fc <listen_message_reliably+0x38>
 8010a44:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 8010a48:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8010a4c:	4638      	mov	r0, r7
 8010a4e:	f000 fc8b 	bl	8011368 <uxr_session_header_offset>
 8010a52:	3501      	adds	r5, #1
 8010a54:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 8010a58:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8010a5c:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8010a60:	9000      	str	r0, [sp, #0]
 8010a62:	2300      	movs	r3, #0
 8010a64:	4658      	mov	r0, fp
 8010a66:	2211      	movs	r2, #17
 8010a68:	a90c      	add	r1, sp, #48	; 0x30
 8010a6a:	f7ff f819 	bl	800faa0 <ucdr_init_buffer_origin_offset>
 8010a6e:	2300      	movs	r3, #0
 8010a70:	2205      	movs	r2, #5
 8010a72:	210b      	movs	r1, #11
 8010a74:	4658      	mov	r0, fp
 8010a76:	f000 fde9 	bl	801164c <uxr_buffer_submessage_header>
 8010a7a:	8968      	ldrh	r0, [r5, #10]
 8010a7c:	2101      	movs	r1, #1
 8010a7e:	f005 fe8d 	bl	801679c <uxr_seq_num_add>
 8010a82:	892a      	ldrh	r2, [r5, #8]
 8010a84:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8010a88:	4603      	mov	r3, r0
 8010a8a:	a90a      	add	r1, sp, #40	; 0x28
 8010a8c:	4658      	mov	r0, fp
 8010a8e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8010a92:	f88d 902c 	strb.w	r9, [sp, #44]	; 0x2c
 8010a96:	f001 ffa7 	bl	80129e8 <uxr_serialize_HEARTBEAT_Payload>
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	4611      	mov	r1, r2
 8010a9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010aa0:	4638      	mov	r0, r7
 8010aa2:	f000 fc09 	bl	80112b8 <uxr_stamp_session_header>
 8010aa6:	4658      	mov	r0, fp
 8010aa8:	f7ff f838 	bl	800fb1c <ucdr_buffer_length>
 8010aac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010aae:	4602      	mov	r2, r0
 8010ab0:	a90c      	add	r1, sp, #48	; 0x30
 8010ab2:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010ab6:	443c      	add	r4, r7
 8010ab8:	47a8      	blx	r5
 8010aba:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8010abe:	e79f      	b.n	8010a00 <listen_message_reliably+0x3c>
 8010ac0:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 8010ac4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8010ac8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010acc:	4294      	cmp	r4, r2
 8010ace:	bf08      	it	eq
 8010ad0:	428b      	cmpeq	r3, r1
 8010ad2:	d01d      	beq.n	8010b10 <listen_message_reliably+0x14c>
 8010ad4:	eba3 030a 	sub.w	r3, r3, sl
 8010ad8:	9905      	ldr	r1, [sp, #20]
 8010ada:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	bf08      	it	eq
 8010ae0:	2301      	moveq	r3, #1
 8010ae2:	4299      	cmp	r1, r3
 8010ae4:	bfa8      	it	ge
 8010ae6:	4619      	movge	r1, r3
 8010ae8:	6894      	ldr	r4, [r2, #8]
 8010aea:	6810      	ldr	r0, [r2, #0]
 8010aec:	4689      	mov	r9, r1
 8010aee:	460b      	mov	r3, r1
 8010af0:	aa08      	add	r2, sp, #32
 8010af2:	a907      	add	r1, sp, #28
 8010af4:	47a0      	blx	r4
 8010af6:	b968      	cbnz	r0, 8010b14 <listen_message_reliably+0x150>
 8010af8:	9b05      	ldr	r3, [sp, #20]
 8010afa:	eba3 0309 	sub.w	r3, r3, r9
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	9305      	str	r3, [sp, #20]
 8010b02:	f73f af68 	bgt.w	80109d6 <listen_message_reliably+0x12>
 8010b06:	4604      	mov	r4, r0
 8010b08:	4620      	mov	r0, r4
 8010b0a:	b01d      	add	sp, #116	; 0x74
 8010b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b10:	9b05      	ldr	r3, [sp, #20]
 8010b12:	e7e1      	b.n	8010ad8 <listen_message_reliably+0x114>
 8010b14:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8010b18:	4604      	mov	r4, r0
 8010b1a:	a80c      	add	r0, sp, #48	; 0x30
 8010b1c:	f7fe ffd2 	bl	800fac4 <ucdr_init_buffer>
 8010b20:	2500      	movs	r5, #0
 8010b22:	a90c      	add	r1, sp, #48	; 0x30
 8010b24:	f10d 031a 	add.w	r3, sp, #26
 8010b28:	aa06      	add	r2, sp, #24
 8010b2a:	4638      	mov	r0, r7
 8010b2c:	f88d 5018 	strb.w	r5, [sp, #24]
 8010b30:	f000 fbd8 	bl	80112e4 <uxr_read_session_header>
 8010b34:	b918      	cbnz	r0, 8010b3e <listen_message_reliably+0x17a>
 8010b36:	4620      	mov	r0, r4
 8010b38:	b01d      	add	sp, #116	; 0x74
 8010b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b3e:	4629      	mov	r1, r5
 8010b40:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010b44:	f000 fc72 	bl	801142c <uxr_stream_id_from_raw>
 8010b48:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8010b4c:	2e01      	cmp	r6, #1
 8010b4e:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8010b52:	900a      	str	r0, [sp, #40]	; 0x28
 8010b54:	fa5f fa80 	uxtb.w	sl, r0
 8010b58:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8010b5c:	d04b      	beq.n	8010bf6 <listen_message_reliably+0x232>
 8010b5e:	2e02      	cmp	r6, #2
 8010b60:	d00f      	beq.n	8010b82 <listen_message_reliably+0x1be>
 8010b62:	2e00      	cmp	r6, #0
 8010b64:	d1e7      	bne.n	8010b36 <listen_message_reliably+0x172>
 8010b66:	4631      	mov	r1, r6
 8010b68:	4630      	mov	r0, r6
 8010b6a:	f000 fc5f 	bl	801142c <uxr_stream_id_from_raw>
 8010b6e:	a90c      	add	r1, sp, #48	; 0x30
 8010b70:	4602      	mov	r2, r0
 8010b72:	4638      	mov	r0, r7
 8010b74:	920a      	str	r2, [sp, #40]	; 0x28
 8010b76:	f7ff fd9d 	bl	80106b4 <read_submessage_list>
 8010b7a:	4620      	mov	r0, r4
 8010b7c:	b01d      	add	sp, #116	; 0x74
 8010b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b82:	4629      	mov	r1, r5
 8010b84:	f107 0008 	add.w	r0, r7, #8
 8010b88:	f000 fd3e 	bl	8011608 <uxr_get_input_reliable_stream>
 8010b8c:	4680      	mov	r8, r0
 8010b8e:	b348      	cbz	r0, 8010be4 <listen_message_reliably+0x220>
 8010b90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010b92:	9202      	str	r2, [sp, #8]
 8010b94:	a80c      	add	r0, sp, #48	; 0x30
 8010b96:	f7fe ffc5 	bl	800fb24 <ucdr_buffer_remaining>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	f10d 0019 	add.w	r0, sp, #25
 8010ba0:	9000      	str	r0, [sp, #0]
 8010ba2:	9a02      	ldr	r2, [sp, #8]
 8010ba4:	4649      	mov	r1, r9
 8010ba6:	4640      	mov	r0, r8
 8010ba8:	f005 f95e 	bl	8015e68 <uxr_receive_reliable_message>
 8010bac:	b1d0      	cbz	r0, 8010be4 <listen_message_reliably+0x220>
 8010bae:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d037      	beq.n	8010c26 <listen_message_reliably+0x262>
 8010bb6:	ae14      	add	r6, sp, #80	; 0x50
 8010bb8:	f04f 0902 	mov.w	r9, #2
 8010bbc:	e008      	b.n	8010bd0 <listen_message_reliably+0x20c>
 8010bbe:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8010bc2:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8010bc6:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8010bca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010bcc:	f7ff fd72 	bl	80106b4 <read_submessage_list>
 8010bd0:	4631      	mov	r1, r6
 8010bd2:	2204      	movs	r2, #4
 8010bd4:	4640      	mov	r0, r8
 8010bd6:	f005 f9c7 	bl	8015f68 <uxr_next_input_reliable_buffer_available>
 8010bda:	4603      	mov	r3, r0
 8010bdc:	4631      	mov	r1, r6
 8010bde:	4638      	mov	r0, r7
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d1ec      	bne.n	8010bbe <listen_message_reliably+0x1fa>
 8010be4:	4638      	mov	r0, r7
 8010be6:	462a      	mov	r2, r5
 8010be8:	4651      	mov	r1, sl
 8010bea:	f7ff fbe1 	bl	80103b0 <write_submessage_acknack.isra.0>
 8010bee:	4620      	mov	r0, r4
 8010bf0:	b01d      	add	sp, #116	; 0x74
 8010bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bf6:	4629      	mov	r1, r5
 8010bf8:	f107 0008 	add.w	r0, r7, #8
 8010bfc:	f000 fcfa 	bl	80115f4 <uxr_get_input_best_effort_stream>
 8010c00:	2800      	cmp	r0, #0
 8010c02:	d098      	beq.n	8010b36 <listen_message_reliably+0x172>
 8010c04:	4649      	mov	r1, r9
 8010c06:	f005 f8ab 	bl	8015d60 <uxr_receive_best_effort_message>
 8010c0a:	2800      	cmp	r0, #0
 8010c0c:	d093      	beq.n	8010b36 <listen_message_reliably+0x172>
 8010c0e:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8010c12:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8010c16:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8010c1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010c1c:	a90c      	add	r1, sp, #48	; 0x30
 8010c1e:	4638      	mov	r0, r7
 8010c20:	f7ff fd48 	bl	80106b4 <read_submessage_list>
 8010c24:	e787      	b.n	8010b36 <listen_message_reliably+0x172>
 8010c26:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8010c2a:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8010c2e:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8010c32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010c34:	a90c      	add	r1, sp, #48	; 0x30
 8010c36:	4638      	mov	r0, r7
 8010c38:	f7ff fd3c 	bl	80106b4 <read_submessage_list>
 8010c3c:	e7bb      	b.n	8010bb6 <listen_message_reliably+0x1f2>
 8010c3e:	bf00      	nop

08010c40 <uxr_run_session_until_confirm_delivery>:
 8010c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c44:	4606      	mov	r6, r0
 8010c46:	460d      	mov	r5, r1
 8010c48:	f000 fd46 	bl	80116d8 <uxr_millis>
 8010c4c:	4607      	mov	r7, r0
 8010c4e:	4630      	mov	r0, r6
 8010c50:	f7ff fc74 	bl	801053c <uxr_flash_output_streams>
 8010c54:	2d00      	cmp	r5, #0
 8010c56:	f106 0808 	add.w	r8, r6, #8
 8010c5a:	bfa8      	it	ge
 8010c5c:	462c      	movge	r4, r5
 8010c5e:	da07      	bge.n	8010c70 <uxr_run_session_until_confirm_delivery+0x30>
 8010c60:	e00e      	b.n	8010c80 <uxr_run_session_until_confirm_delivery+0x40>
 8010c62:	f7ff feaf 	bl	80109c4 <listen_message_reliably>
 8010c66:	f000 fd37 	bl	80116d8 <uxr_millis>
 8010c6a:	1bc3      	subs	r3, r0, r7
 8010c6c:	1aec      	subs	r4, r5, r3
 8010c6e:	d407      	bmi.n	8010c80 <uxr_run_session_until_confirm_delivery+0x40>
 8010c70:	4640      	mov	r0, r8
 8010c72:	f000 fcd5 	bl	8011620 <uxr_output_streams_confirmed>
 8010c76:	4603      	mov	r3, r0
 8010c78:	4621      	mov	r1, r4
 8010c7a:	4630      	mov	r0, r6
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d0f0      	beq.n	8010c62 <uxr_run_session_until_confirm_delivery+0x22>
 8010c80:	4640      	mov	r0, r8
 8010c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c86:	f000 bccb 	b.w	8011620 <uxr_output_streams_confirmed>
 8010c8a:	bf00      	nop

08010c8c <uxr_run_session_until_all_status>:
 8010c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c90:	9d08      	ldr	r5, [sp, #32]
 8010c92:	460f      	mov	r7, r1
 8010c94:	4692      	mov	sl, r2
 8010c96:	461c      	mov	r4, r3
 8010c98:	4606      	mov	r6, r0
 8010c9a:	f7ff fc4f 	bl	801053c <uxr_flash_output_streams>
 8010c9e:	b125      	cbz	r5, 8010caa <uxr_run_session_until_all_status+0x1e>
 8010ca0:	462a      	mov	r2, r5
 8010ca2:	21ff      	movs	r1, #255	; 0xff
 8010ca4:	4620      	mov	r0, r4
 8010ca6:	f007 f967 	bl	8017f78 <memset>
 8010caa:	e9c6 a41d 	strd	sl, r4, [r6, #116]	; 0x74
 8010cae:	67f5      	str	r5, [r6, #124]	; 0x7c
 8010cb0:	f000 fd12 	bl	80116d8 <uxr_millis>
 8010cb4:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8010cb8:	f1aa 0a02 	sub.w	sl, sl, #2
 8010cbc:	4680      	mov	r8, r0
 8010cbe:	4639      	mov	r1, r7
 8010cc0:	4630      	mov	r0, r6
 8010cc2:	f7ff fe7f 	bl	80109c4 <listen_message_reliably>
 8010cc6:	f000 fd07 	bl	80116d8 <uxr_millis>
 8010cca:	eba0 0008 	sub.w	r0, r0, r8
 8010cce:	1a39      	subs	r1, r7, r0
 8010cd0:	b33d      	cbz	r5, 8010d22 <uxr_run_session_until_all_status+0x96>
 8010cd2:	46cc      	mov	ip, r9
 8010cd4:	464a      	mov	r2, r9
 8010cd6:	2301      	movs	r3, #1
 8010cd8:	e002      	b.n	8010ce0 <uxr_run_session_until_all_status+0x54>
 8010cda:	42ab      	cmp	r3, r5
 8010cdc:	d20c      	bcs.n	8010cf8 <uxr_run_session_until_all_status+0x6c>
 8010cde:	3301      	adds	r3, #1
 8010ce0:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8010ce4:	2cff      	cmp	r4, #255	; 0xff
 8010ce6:	d1f8      	bne.n	8010cda <uxr_run_session_until_all_status+0x4e>
 8010ce8:	42ab      	cmp	r3, r5
 8010cea:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 8010cee:	d213      	bcs.n	8010d18 <uxr_run_session_until_all_status+0x8c>
 8010cf0:	2800      	cmp	r0, #0
 8010cf2:	d0f4      	beq.n	8010cde <uxr_run_session_until_all_status+0x52>
 8010cf4:	2900      	cmp	r1, #0
 8010cf6:	dce3      	bgt.n	8010cc0 <uxr_run_session_until_all_status+0x34>
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	444d      	add	r5, r9
 8010cfc:	67f3      	str	r3, [r6, #124]	; 0x7c
 8010cfe:	e001      	b.n	8010d04 <uxr_run_session_until_all_status+0x78>
 8010d00:	2b01      	cmp	r3, #1
 8010d02:	d812      	bhi.n	8010d2a <uxr_run_session_until_all_status+0x9e>
 8010d04:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8010d08:	4565      	cmp	r5, ip
 8010d0a:	d1f9      	bne.n	8010d00 <uxr_run_session_until_all_status+0x74>
 8010d0c:	2b01      	cmp	r3, #1
 8010d0e:	bf8c      	ite	hi
 8010d10:	2000      	movhi	r0, #0
 8010d12:	2001      	movls	r0, #1
 8010d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d18:	2900      	cmp	r1, #0
 8010d1a:	dded      	ble.n	8010cf8 <uxr_run_session_until_all_status+0x6c>
 8010d1c:	2800      	cmp	r0, #0
 8010d1e:	d1cf      	bne.n	8010cc0 <uxr_run_session_until_all_status+0x34>
 8010d20:	e7ea      	b.n	8010cf8 <uxr_run_session_until_all_status+0x6c>
 8010d22:	67f5      	str	r5, [r6, #124]	; 0x7c
 8010d24:	2001      	movs	r0, #1
 8010d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d2a:	2000      	movs	r0, #0
 8010d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010d30 <uxr_create_session>:
 8010d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d34:	ed2d 8b02 	vpush	{d8}
 8010d38:	f100 0808 	add.w	r8, r0, #8
 8010d3c:	b0a9      	sub	sp, #164	; 0xa4
 8010d3e:	4604      	mov	r4, r0
 8010d40:	4640      	mov	r0, r8
 8010d42:	f000 fba9 	bl	8011498 <uxr_reset_stream_storage>
 8010d46:	4620      	mov	r0, r4
 8010d48:	f000 fb0e 	bl	8011368 <uxr_session_header_offset>
 8010d4c:	a909      	add	r1, sp, #36	; 0x24
 8010d4e:	9000      	str	r0, [sp, #0]
 8010d50:	2300      	movs	r3, #0
 8010d52:	a810      	add	r0, sp, #64	; 0x40
 8010d54:	221c      	movs	r2, #28
 8010d56:	f7fe fea3 	bl	800faa0 <ucdr_init_buffer_origin_offset>
 8010d5a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010d5c:	8a1a      	ldrh	r2, [r3, #16]
 8010d5e:	3a04      	subs	r2, #4
 8010d60:	b292      	uxth	r2, r2
 8010d62:	4620      	mov	r0, r4
 8010d64:	a910      	add	r1, sp, #64	; 0x40
 8010d66:	f000 fa23 	bl	80111b0 <uxr_buffer_create_session>
 8010d6a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010d6c:	4620      	mov	r0, r4
 8010d6e:	f000 fa8f 	bl	8011290 <uxr_stamp_create_session_header>
 8010d72:	a810      	add	r0, sp, #64	; 0x40
 8010d74:	f7fe fed2 	bl	800fb1c <ucdr_buffer_length>
 8010d78:	23ff      	movs	r3, #255	; 0xff
 8010d7a:	ee08 0a10 	vmov	s16, r0
 8010d7e:	7163      	strb	r3, [r4, #5]
 8010d80:	f04f 090a 	mov.w	r9, #10
 8010d84:	46c2      	mov	sl, r8
 8010d86:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010d88:	ee18 2a10 	vmov	r2, s16
 8010d8c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010d90:	a909      	add	r1, sp, #36	; 0x24
 8010d92:	47a8      	blx	r5
 8010d94:	f000 fca0 	bl	80116d8 <uxr_millis>
 8010d98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010d9c:	9002      	str	r0, [sp, #8]
 8010d9e:	e00c      	b.n	8010dba <uxr_create_session+0x8a>
 8010da0:	f000 fc9a 	bl	80116d8 <uxr_millis>
 8010da4:	9b02      	ldr	r3, [sp, #8]
 8010da6:	7962      	ldrb	r2, [r4, #5]
 8010da8:	1ac0      	subs	r0, r0, r3
 8010daa:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	f340 8094 	ble.w	8010edc <uxr_create_session+0x1ac>
 8010db4:	2aff      	cmp	r2, #255	; 0xff
 8010db6:	f040 8097 	bne.w	8010ee8 <uxr_create_session+0x1b8>
 8010dba:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8010dbc:	a905      	add	r1, sp, #20
 8010dbe:	6895      	ldr	r5, [r2, #8]
 8010dc0:	6810      	ldr	r0, [r2, #0]
 8010dc2:	aa06      	add	r2, sp, #24
 8010dc4:	47a8      	blx	r5
 8010dc6:	2800      	cmp	r0, #0
 8010dc8:	d0ea      	beq.n	8010da0 <uxr_create_session+0x70>
 8010dca:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8010dce:	a818      	add	r0, sp, #96	; 0x60
 8010dd0:	f7fe fe78 	bl	800fac4 <ucdr_init_buffer>
 8010dd4:	2500      	movs	r5, #0
 8010dd6:	f10d 0312 	add.w	r3, sp, #18
 8010dda:	aa04      	add	r2, sp, #16
 8010ddc:	a918      	add	r1, sp, #96	; 0x60
 8010dde:	4620      	mov	r0, r4
 8010de0:	f88d 5010 	strb.w	r5, [sp, #16]
 8010de4:	f000 fa7e 	bl	80112e4 <uxr_read_session_header>
 8010de8:	2800      	cmp	r0, #0
 8010dea:	d0d9      	beq.n	8010da0 <uxr_create_session+0x70>
 8010dec:	4629      	mov	r1, r5
 8010dee:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8010df2:	f000 fb1b 	bl	801142c <uxr_stream_id_from_raw>
 8010df6:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010dfa:	2f01      	cmp	r7, #1
 8010dfc:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8010e00:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8010e04:	fa5f f880 	uxtb.w	r8, r0
 8010e08:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8010e0c:	d04d      	beq.n	8010eaa <uxr_create_session+0x17a>
 8010e0e:	2f02      	cmp	r7, #2
 8010e10:	d00c      	beq.n	8010e2c <uxr_create_session+0xfc>
 8010e12:	2f00      	cmp	r7, #0
 8010e14:	d1c4      	bne.n	8010da0 <uxr_create_session+0x70>
 8010e16:	4639      	mov	r1, r7
 8010e18:	4638      	mov	r0, r7
 8010e1a:	f000 fb07 	bl	801142c <uxr_stream_id_from_raw>
 8010e1e:	a918      	add	r1, sp, #96	; 0x60
 8010e20:	4602      	mov	r2, r0
 8010e22:	4620      	mov	r0, r4
 8010e24:	9208      	str	r2, [sp, #32]
 8010e26:	f7ff fc45 	bl	80106b4 <read_submessage_list>
 8010e2a:	e7b9      	b.n	8010da0 <uxr_create_session+0x70>
 8010e2c:	4629      	mov	r1, r5
 8010e2e:	4650      	mov	r0, sl
 8010e30:	f000 fbea 	bl	8011608 <uxr_get_input_reliable_stream>
 8010e34:	4606      	mov	r6, r0
 8010e36:	b390      	cbz	r0, 8010e9e <uxr_create_session+0x16e>
 8010e38:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010e3a:	9203      	str	r2, [sp, #12]
 8010e3c:	a818      	add	r0, sp, #96	; 0x60
 8010e3e:	f7fe fe71 	bl	800fb24 <ucdr_buffer_remaining>
 8010e42:	4603      	mov	r3, r0
 8010e44:	f10d 0011 	add.w	r0, sp, #17
 8010e48:	9000      	str	r0, [sp, #0]
 8010e4a:	9a03      	ldr	r2, [sp, #12]
 8010e4c:	4659      	mov	r1, fp
 8010e4e:	4630      	mov	r0, r6
 8010e50:	f005 f80a 	bl	8015e68 <uxr_receive_reliable_message>
 8010e54:	b318      	cbz	r0, 8010e9e <uxr_create_session+0x16e>
 8010e56:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8010e5a:	b9b3      	cbnz	r3, 8010e8a <uxr_create_session+0x15a>
 8010e5c:	f88d 8020 	strb.w	r8, [sp, #32]
 8010e60:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8010e64:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 8010e68:	9a08      	ldr	r2, [sp, #32]
 8010e6a:	a918      	add	r1, sp, #96	; 0x60
 8010e6c:	4620      	mov	r0, r4
 8010e6e:	f7ff fc21 	bl	80106b4 <read_submessage_list>
 8010e72:	e00a      	b.n	8010e8a <uxr_create_session+0x15a>
 8010e74:	f04f 0302 	mov.w	r3, #2
 8010e78:	f88d 8020 	strb.w	r8, [sp, #32]
 8010e7c:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8010e80:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 8010e84:	9a08      	ldr	r2, [sp, #32]
 8010e86:	f7ff fc15 	bl	80106b4 <read_submessage_list>
 8010e8a:	a920      	add	r1, sp, #128	; 0x80
 8010e8c:	2204      	movs	r2, #4
 8010e8e:	4630      	mov	r0, r6
 8010e90:	f005 f86a 	bl	8015f68 <uxr_next_input_reliable_buffer_available>
 8010e94:	4603      	mov	r3, r0
 8010e96:	a920      	add	r1, sp, #128	; 0x80
 8010e98:	4620      	mov	r0, r4
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d1ea      	bne.n	8010e74 <uxr_create_session+0x144>
 8010e9e:	462a      	mov	r2, r5
 8010ea0:	4641      	mov	r1, r8
 8010ea2:	4620      	mov	r0, r4
 8010ea4:	f7ff fa84 	bl	80103b0 <write_submessage_acknack.isra.0>
 8010ea8:	e77a      	b.n	8010da0 <uxr_create_session+0x70>
 8010eaa:	4629      	mov	r1, r5
 8010eac:	4650      	mov	r0, sl
 8010eae:	f000 fba1 	bl	80115f4 <uxr_get_input_best_effort_stream>
 8010eb2:	2800      	cmp	r0, #0
 8010eb4:	f43f af74 	beq.w	8010da0 <uxr_create_session+0x70>
 8010eb8:	4659      	mov	r1, fp
 8010eba:	f004 ff51 	bl	8015d60 <uxr_receive_best_effort_message>
 8010ebe:	2800      	cmp	r0, #0
 8010ec0:	f43f af6e 	beq.w	8010da0 <uxr_create_session+0x70>
 8010ec4:	f88d 8020 	strb.w	r8, [sp, #32]
 8010ec8:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8010ecc:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 8010ed0:	9a08      	ldr	r2, [sp, #32]
 8010ed2:	a918      	add	r1, sp, #96	; 0x60
 8010ed4:	4620      	mov	r0, r4
 8010ed6:	f7ff fbed 	bl	80106b4 <read_submessage_list>
 8010eda:	e761      	b.n	8010da0 <uxr_create_session+0x70>
 8010edc:	f1b9 0901 	subs.w	r9, r9, #1
 8010ee0:	d002      	beq.n	8010ee8 <uxr_create_session+0x1b8>
 8010ee2:	2aff      	cmp	r2, #255	; 0xff
 8010ee4:	f43f af4f 	beq.w	8010d86 <uxr_create_session+0x56>
 8010ee8:	b12a      	cbz	r2, 8010ef6 <uxr_create_session+0x1c6>
 8010eea:	2000      	movs	r0, #0
 8010eec:	b029      	add	sp, #164	; 0xa4
 8010eee:	ecbd 8b02 	vpop	{d8}
 8010ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ef6:	4650      	mov	r0, sl
 8010ef8:	f000 face 	bl	8011498 <uxr_reset_stream_storage>
 8010efc:	2001      	movs	r0, #1
 8010efe:	b029      	add	sp, #164	; 0xa4
 8010f00:	ecbd 8b02 	vpop	{d8}
 8010f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010f08 <wait_session_status>:
 8010f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f0c:	4604      	mov	r4, r0
 8010f0e:	b09d      	sub	sp, #116	; 0x74
 8010f10:	20ff      	movs	r0, #255	; 0xff
 8010f12:	7160      	strb	r0, [r4, #5]
 8010f14:	9304      	str	r3, [sp, #16]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	f000 80b8 	beq.w	801108c <wait_session_status+0x184>
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	468b      	mov	fp, r1
 8010f20:	4692      	mov	sl, r2
 8010f22:	9303      	str	r3, [sp, #12]
 8010f24:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010f26:	4652      	mov	r2, sl
 8010f28:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010f2c:	4659      	mov	r1, fp
 8010f2e:	47a8      	blx	r5
 8010f30:	f000 fbd2 	bl	80116d8 <uxr_millis>
 8010f34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010f38:	4605      	mov	r5, r0
 8010f3a:	e009      	b.n	8010f50 <wait_session_status+0x48>
 8010f3c:	f000 fbcc 	bl	80116d8 <uxr_millis>
 8010f40:	1b40      	subs	r0, r0, r5
 8010f42:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	dd42      	ble.n	8010fd0 <wait_session_status+0xc8>
 8010f4a:	7960      	ldrb	r0, [r4, #5]
 8010f4c:	28ff      	cmp	r0, #255	; 0xff
 8010f4e:	d148      	bne.n	8010fe2 <wait_session_status+0xda>
 8010f50:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8010f52:	a908      	add	r1, sp, #32
 8010f54:	6896      	ldr	r6, [r2, #8]
 8010f56:	6810      	ldr	r0, [r2, #0]
 8010f58:	aa09      	add	r2, sp, #36	; 0x24
 8010f5a:	47b0      	blx	r6
 8010f5c:	2800      	cmp	r0, #0
 8010f5e:	d0ed      	beq.n	8010f3c <wait_session_status+0x34>
 8010f60:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8010f64:	a80c      	add	r0, sp, #48	; 0x30
 8010f66:	f7fe fdad 	bl	800fac4 <ucdr_init_buffer>
 8010f6a:	2600      	movs	r6, #0
 8010f6c:	f10d 031e 	add.w	r3, sp, #30
 8010f70:	aa07      	add	r2, sp, #28
 8010f72:	a90c      	add	r1, sp, #48	; 0x30
 8010f74:	4620      	mov	r0, r4
 8010f76:	f88d 601c 	strb.w	r6, [sp, #28]
 8010f7a:	f000 f9b3 	bl	80112e4 <uxr_read_session_header>
 8010f7e:	2800      	cmp	r0, #0
 8010f80:	d0dc      	beq.n	8010f3c <wait_session_status+0x34>
 8010f82:	4631      	mov	r1, r6
 8010f84:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010f88:	f000 fa50 	bl	801142c <uxr_stream_id_from_raw>
 8010f8c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010f90:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8010f94:	9302      	str	r3, [sp, #8]
 8010f96:	2f01      	cmp	r7, #1
 8010f98:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8010f9c:	fa5f f880 	uxtb.w	r8, r0
 8010fa0:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010fa4:	d058      	beq.n	8011058 <wait_session_status+0x150>
 8010fa6:	2f02      	cmp	r7, #2
 8010fa8:	d021      	beq.n	8010fee <wait_session_status+0xe6>
 8010faa:	2f00      	cmp	r7, #0
 8010fac:	d1c6      	bne.n	8010f3c <wait_session_status+0x34>
 8010fae:	4639      	mov	r1, r7
 8010fb0:	4638      	mov	r0, r7
 8010fb2:	f000 fa3b 	bl	801142c <uxr_stream_id_from_raw>
 8010fb6:	a90c      	add	r1, sp, #48	; 0x30
 8010fb8:	4602      	mov	r2, r0
 8010fba:	4620      	mov	r0, r4
 8010fbc:	920b      	str	r2, [sp, #44]	; 0x2c
 8010fbe:	f7ff fb79 	bl	80106b4 <read_submessage_list>
 8010fc2:	f000 fb89 	bl	80116d8 <uxr_millis>
 8010fc6:	1b40      	subs	r0, r0, r5
 8010fc8:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	dcbc      	bgt.n	8010f4a <wait_session_status+0x42>
 8010fd0:	9b03      	ldr	r3, [sp, #12]
 8010fd2:	9a04      	ldr	r2, [sp, #16]
 8010fd4:	7960      	ldrb	r0, [r4, #5]
 8010fd6:	3301      	adds	r3, #1
 8010fd8:	429a      	cmp	r2, r3
 8010fda:	9303      	str	r3, [sp, #12]
 8010fdc:	d001      	beq.n	8010fe2 <wait_session_status+0xda>
 8010fde:	28ff      	cmp	r0, #255	; 0xff
 8010fe0:	d0a0      	beq.n	8010f24 <wait_session_status+0x1c>
 8010fe2:	38ff      	subs	r0, #255	; 0xff
 8010fe4:	bf18      	it	ne
 8010fe6:	2001      	movne	r0, #1
 8010fe8:	b01d      	add	sp, #116	; 0x74
 8010fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fee:	4631      	mov	r1, r6
 8010ff0:	f104 0008 	add.w	r0, r4, #8
 8010ff4:	f000 fb08 	bl	8011608 <uxr_get_input_reliable_stream>
 8010ff8:	4681      	mov	r9, r0
 8010ffa:	b338      	cbz	r0, 801104c <wait_session_status+0x144>
 8010ffc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010ffe:	9205      	str	r2, [sp, #20]
 8011000:	a80c      	add	r0, sp, #48	; 0x30
 8011002:	f7fe fd8f 	bl	800fb24 <ucdr_buffer_remaining>
 8011006:	4603      	mov	r3, r0
 8011008:	f10d 001d 	add.w	r0, sp, #29
 801100c:	9000      	str	r0, [sp, #0]
 801100e:	9a05      	ldr	r2, [sp, #20]
 8011010:	9902      	ldr	r1, [sp, #8]
 8011012:	4648      	mov	r0, r9
 8011014:	f004 ff28 	bl	8015e68 <uxr_receive_reliable_message>
 8011018:	b1c0      	cbz	r0, 801104c <wait_session_status+0x144>
 801101a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801101e:	b95b      	cbnz	r3, 8011038 <wait_session_status+0x130>
 8011020:	e03c      	b.n	801109c <wait_session_status+0x194>
 8011022:	f04f 0302 	mov.w	r3, #2
 8011026:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 801102a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801102e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8011032:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011034:	f7ff fb3e 	bl	80106b4 <read_submessage_list>
 8011038:	a914      	add	r1, sp, #80	; 0x50
 801103a:	2204      	movs	r2, #4
 801103c:	4648      	mov	r0, r9
 801103e:	f004 ff93 	bl	8015f68 <uxr_next_input_reliable_buffer_available>
 8011042:	4603      	mov	r3, r0
 8011044:	a914      	add	r1, sp, #80	; 0x50
 8011046:	4620      	mov	r0, r4
 8011048:	2b00      	cmp	r3, #0
 801104a:	d1ea      	bne.n	8011022 <wait_session_status+0x11a>
 801104c:	4632      	mov	r2, r6
 801104e:	4641      	mov	r1, r8
 8011050:	4620      	mov	r0, r4
 8011052:	f7ff f9ad 	bl	80103b0 <write_submessage_acknack.isra.0>
 8011056:	e771      	b.n	8010f3c <wait_session_status+0x34>
 8011058:	4631      	mov	r1, r6
 801105a:	f104 0008 	add.w	r0, r4, #8
 801105e:	f000 fac9 	bl	80115f4 <uxr_get_input_best_effort_stream>
 8011062:	2800      	cmp	r0, #0
 8011064:	f43f af6a 	beq.w	8010f3c <wait_session_status+0x34>
 8011068:	9902      	ldr	r1, [sp, #8]
 801106a:	f004 fe79 	bl	8015d60 <uxr_receive_best_effort_message>
 801106e:	2800      	cmp	r0, #0
 8011070:	f43f af64 	beq.w	8010f3c <wait_session_status+0x34>
 8011074:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8011078:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801107c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8011080:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011082:	a90c      	add	r1, sp, #48	; 0x30
 8011084:	4620      	mov	r0, r4
 8011086:	f7ff fb15 	bl	80106b4 <read_submessage_list>
 801108a:	e757      	b.n	8010f3c <wait_session_status+0x34>
 801108c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801108e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011092:	47a0      	blx	r4
 8011094:	2001      	movs	r0, #1
 8011096:	b01d      	add	sp, #116	; 0x74
 8011098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801109c:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 80110a0:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 80110a4:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 80110a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80110aa:	a90c      	add	r1, sp, #48	; 0x30
 80110ac:	4620      	mov	r0, r4
 80110ae:	f7ff fb01 	bl	80106b4 <read_submessage_list>
 80110b2:	e7c1      	b.n	8011038 <wait_session_status+0x130>

080110b4 <uxr_delete_session_retries>:
 80110b4:	b530      	push	{r4, r5, lr}
 80110b6:	b08f      	sub	sp, #60	; 0x3c
 80110b8:	4604      	mov	r4, r0
 80110ba:	460d      	mov	r5, r1
 80110bc:	f000 f954 	bl	8011368 <uxr_session_header_offset>
 80110c0:	2300      	movs	r3, #0
 80110c2:	2210      	movs	r2, #16
 80110c4:	9000      	str	r0, [sp, #0]
 80110c6:	a902      	add	r1, sp, #8
 80110c8:	a806      	add	r0, sp, #24
 80110ca:	f7fe fce9 	bl	800faa0 <ucdr_init_buffer_origin_offset>
 80110ce:	a906      	add	r1, sp, #24
 80110d0:	4620      	mov	r0, r4
 80110d2:	f000 f897 	bl	8011204 <uxr_buffer_delete_session>
 80110d6:	2200      	movs	r2, #0
 80110d8:	4611      	mov	r1, r2
 80110da:	9b06      	ldr	r3, [sp, #24]
 80110dc:	4620      	mov	r0, r4
 80110de:	f000 f8eb 	bl	80112b8 <uxr_stamp_session_header>
 80110e2:	a806      	add	r0, sp, #24
 80110e4:	f7fe fd1a 	bl	800fb1c <ucdr_buffer_length>
 80110e8:	462b      	mov	r3, r5
 80110ea:	4602      	mov	r2, r0
 80110ec:	a902      	add	r1, sp, #8
 80110ee:	4620      	mov	r0, r4
 80110f0:	f7ff ff0a 	bl	8010f08 <wait_session_status>
 80110f4:	b118      	cbz	r0, 80110fe <uxr_delete_session_retries+0x4a>
 80110f6:	7960      	ldrb	r0, [r4, #5]
 80110f8:	fab0 f080 	clz	r0, r0
 80110fc:	0940      	lsrs	r0, r0, #5
 80110fe:	b00f      	add	sp, #60	; 0x3c
 8011100:	bd30      	pop	{r4, r5, pc}
 8011102:	bf00      	nop

08011104 <uxr_prepare_stream_to_write_submessage>:
 8011104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011108:	b082      	sub	sp, #8
 801110a:	4682      	mov	sl, r0
 801110c:	4610      	mov	r0, r2
 801110e:	4615      	mov	r5, r2
 8011110:	461e      	mov	r6, r3
 8011112:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8011116:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 801111a:	9101      	str	r1, [sp, #4]
 801111c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8011120:	f000 fad4 	bl	80116cc <uxr_submessage_padding>
 8011124:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011128:	f105 0904 	add.w	r9, r5, #4
 801112c:	2b01      	cmp	r3, #1
 801112e:	4481      	add	r9, r0
 8011130:	d01d      	beq.n	801116e <uxr_prepare_stream_to_write_submessage+0x6a>
 8011132:	2b02      	cmp	r3, #2
 8011134:	d116      	bne.n	8011164 <uxr_prepare_stream_to_write_submessage+0x60>
 8011136:	4621      	mov	r1, r4
 8011138:	f10a 0008 	add.w	r0, sl, #8
 801113c:	f000 fa4e 	bl	80115dc <uxr_get_output_reliable_stream>
 8011140:	4604      	mov	r4, r0
 8011142:	b158      	cbz	r0, 801115c <uxr_prepare_stream_to_write_submessage+0x58>
 8011144:	4649      	mov	r1, r9
 8011146:	4632      	mov	r2, r6
 8011148:	f005 f8c4 	bl	80162d4 <uxr_prepare_reliable_buffer_to_write>
 801114c:	4604      	mov	r4, r0
 801114e:	b12c      	cbz	r4, 801115c <uxr_prepare_stream_to_write_submessage+0x58>
 8011150:	4643      	mov	r3, r8
 8011152:	b2aa      	uxth	r2, r5
 8011154:	4639      	mov	r1, r7
 8011156:	4630      	mov	r0, r6
 8011158:	f000 fa78 	bl	801164c <uxr_buffer_submessage_header>
 801115c:	4620      	mov	r0, r4
 801115e:	b002      	add	sp, #8
 8011160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011164:	2400      	movs	r4, #0
 8011166:	4620      	mov	r0, r4
 8011168:	b002      	add	sp, #8
 801116a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801116e:	4621      	mov	r1, r4
 8011170:	f10a 0008 	add.w	r0, sl, #8
 8011174:	f000 fa2a 	bl	80115cc <uxr_get_output_best_effort_stream>
 8011178:	4604      	mov	r4, r0
 801117a:	2800      	cmp	r0, #0
 801117c:	d0ee      	beq.n	801115c <uxr_prepare_stream_to_write_submessage+0x58>
 801117e:	4649      	mov	r1, r9
 8011180:	4632      	mov	r2, r6
 8011182:	f004 ffe3 	bl	801614c <uxr_prepare_best_effort_buffer_to_write>
 8011186:	4604      	mov	r4, r0
 8011188:	e7e1      	b.n	801114e <uxr_prepare_stream_to_write_submessage+0x4a>
 801118a:	bf00      	nop

0801118c <uxr_init_session_info>:
 801118c:	b470      	push	{r4, r5, r6}
 801118e:	7102      	strb	r2, [r0, #4]
 8011190:	0e16      	lsrs	r6, r2, #24
 8011192:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8011196:	f3c2 2407 	ubfx	r4, r2, #8, #8
 801119a:	23ff      	movs	r3, #255	; 0xff
 801119c:	2209      	movs	r2, #9
 801119e:	7046      	strb	r6, [r0, #1]
 80111a0:	7085      	strb	r5, [r0, #2]
 80111a2:	70c4      	strb	r4, [r0, #3]
 80111a4:	7001      	strb	r1, [r0, #0]
 80111a6:	bc70      	pop	{r4, r5, r6}
 80111a8:	80c2      	strh	r2, [r0, #6]
 80111aa:	7143      	strb	r3, [r0, #5]
 80111ac:	4770      	bx	lr
 80111ae:	bf00      	nop

080111b0 <uxr_buffer_create_session>:
 80111b0:	b570      	push	{r4, r5, r6, lr}
 80111b2:	b088      	sub	sp, #32
 80111b4:	2300      	movs	r3, #0
 80111b6:	4d12      	ldr	r5, [pc, #72]	; (8011200 <uxr_buffer_create_session+0x50>)
 80111b8:	9307      	str	r3, [sp, #28]
 80111ba:	f8ad 201c 	strh.w	r2, [sp, #28]
 80111be:	7802      	ldrb	r2, [r0, #0]
 80111c0:	9303      	str	r3, [sp, #12]
 80111c2:	460c      	mov	r4, r1
 80111c4:	f88d 200c 	strb.w	r2, [sp, #12]
 80111c8:	2101      	movs	r1, #1
 80111ca:	682a      	ldr	r2, [r5, #0]
 80111cc:	f8d0 6001 	ldr.w	r6, [r0, #1]
 80111d0:	88ad      	ldrh	r5, [r5, #4]
 80111d2:	80c1      	strh	r1, [r0, #6]
 80111d4:	f8ad 1004 	strh.w	r1, [sp, #4]
 80111d8:	9200      	str	r2, [sp, #0]
 80111da:	4619      	mov	r1, r3
 80111dc:	2210      	movs	r2, #16
 80111de:	4620      	mov	r0, r4
 80111e0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80111e4:	9306      	str	r3, [sp, #24]
 80111e6:	f88d 300d 	strb.w	r3, [sp, #13]
 80111ea:	9602      	str	r6, [sp, #8]
 80111ec:	f8ad 5006 	strh.w	r5, [sp, #6]
 80111f0:	f000 fa2c 	bl	801164c <uxr_buffer_submessage_header>
 80111f4:	4620      	mov	r0, r4
 80111f6:	4669      	mov	r1, sp
 80111f8:	f001 fa50 	bl	801269c <uxr_serialize_CREATE_CLIENT_Payload>
 80111fc:	b008      	add	sp, #32
 80111fe:	bd70      	pop	{r4, r5, r6, pc}
 8011200:	08019098 	.word	0x08019098

08011204 <uxr_buffer_delete_session>:
 8011204:	b530      	push	{r4, r5, lr}
 8011206:	4b0c      	ldr	r3, [pc, #48]	; (8011238 <uxr_buffer_delete_session+0x34>)
 8011208:	b083      	sub	sp, #12
 801120a:	891b      	ldrh	r3, [r3, #8]
 801120c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011210:	2202      	movs	r2, #2
 8011212:	460c      	mov	r4, r1
 8011214:	80c2      	strh	r2, [r0, #6]
 8011216:	2300      	movs	r3, #0
 8011218:	2204      	movs	r2, #4
 801121a:	4608      	mov	r0, r1
 801121c:	f44f 7500 	mov.w	r5, #512	; 0x200
 8011220:	2103      	movs	r1, #3
 8011222:	f8ad 5004 	strh.w	r5, [sp, #4]
 8011226:	f000 fa11 	bl	801164c <uxr_buffer_submessage_header>
 801122a:	4620      	mov	r0, r4
 801122c:	a901      	add	r1, sp, #4
 801122e:	f001 fae3 	bl	80127f8 <uxr_serialize_DELETE_Payload>
 8011232:	b003      	add	sp, #12
 8011234:	bd30      	pop	{r4, r5, pc}
 8011236:	bf00      	nop
 8011238:	08019098 	.word	0x08019098

0801123c <uxr_read_create_session_status>:
 801123c:	b510      	push	{r4, lr}
 801123e:	b088      	sub	sp, #32
 8011240:	4604      	mov	r4, r0
 8011242:	4608      	mov	r0, r1
 8011244:	a901      	add	r1, sp, #4
 8011246:	f001 fae7 	bl	8012818 <uxr_deserialize_STATUS_AGENT_Payload>
 801124a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801124e:	7163      	strb	r3, [r4, #5]
 8011250:	b008      	add	sp, #32
 8011252:	bd10      	pop	{r4, pc}

08011254 <uxr_read_delete_session_status>:
 8011254:	b510      	push	{r4, lr}
 8011256:	4604      	mov	r4, r0
 8011258:	b084      	sub	sp, #16
 801125a:	4608      	mov	r0, r1
 801125c:	a902      	add	r1, sp, #8
 801125e:	f001 fb0b 	bl	8012878 <uxr_deserialize_STATUS_Payload>
 8011262:	88e3      	ldrh	r3, [r4, #6]
 8011264:	2b02      	cmp	r3, #2
 8011266:	d001      	beq.n	801126c <uxr_read_delete_session_status+0x18>
 8011268:	b004      	add	sp, #16
 801126a:	bd10      	pop	{r4, pc}
 801126c:	f10d 000a 	add.w	r0, sp, #10
 8011270:	f7fe ff00 	bl	8010074 <uxr_object_id_from_raw>
 8011274:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8011278:	f89d 3009 	ldrb.w	r3, [sp, #9]
 801127c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011280:	b29b      	uxth	r3, r3
 8011282:	2b02      	cmp	r3, #2
 8011284:	bf04      	itt	eq
 8011286:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 801128a:	7163      	strbeq	r3, [r4, #5]
 801128c:	b004      	add	sp, #16
 801128e:	bd10      	pop	{r4, pc}

08011290 <uxr_stamp_create_session_header>:
 8011290:	b510      	push	{r4, lr}
 8011292:	4604      	mov	r4, r0
 8011294:	b08a      	sub	sp, #40	; 0x28
 8011296:	a802      	add	r0, sp, #8
 8011298:	2208      	movs	r2, #8
 801129a:	f7fe fc13 	bl	800fac4 <ucdr_init_buffer>
 801129e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112a2:	9400      	str	r4, [sp, #0]
 80112a4:	2300      	movs	r3, #0
 80112a6:	a802      	add	r0, sp, #8
 80112a8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80112ac:	461a      	mov	r2, r3
 80112ae:	f000 fbcb 	bl	8011a48 <uxr_serialize_message_header>
 80112b2:	b00a      	add	sp, #40	; 0x28
 80112b4:	bd10      	pop	{r4, pc}
 80112b6:	bf00      	nop

080112b8 <uxr_stamp_session_header>:
 80112b8:	b570      	push	{r4, r5, r6, lr}
 80112ba:	4604      	mov	r4, r0
 80112bc:	b08c      	sub	sp, #48	; 0x30
 80112be:	460d      	mov	r5, r1
 80112c0:	4616      	mov	r6, r2
 80112c2:	4619      	mov	r1, r3
 80112c4:	a804      	add	r0, sp, #16
 80112c6:	2208      	movs	r2, #8
 80112c8:	9603      	str	r6, [sp, #12]
 80112ca:	f7fe fbfb 	bl	800fac4 <ucdr_init_buffer>
 80112ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112d2:	9b03      	ldr	r3, [sp, #12]
 80112d4:	9400      	str	r4, [sp, #0]
 80112d6:	462a      	mov	r2, r5
 80112d8:	a804      	add	r0, sp, #16
 80112da:	f000 fbb5 	bl	8011a48 <uxr_serialize_message_header>
 80112de:	b00c      	add	sp, #48	; 0x30
 80112e0:	bd70      	pop	{r4, r5, r6, pc}
 80112e2:	bf00      	nop

080112e4 <uxr_read_session_header>:
 80112e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112e8:	4607      	mov	r7, r0
 80112ea:	b084      	sub	sp, #16
 80112ec:	4608      	mov	r0, r1
 80112ee:	460c      	mov	r4, r1
 80112f0:	4615      	mov	r5, r2
 80112f2:	461e      	mov	r6, r3
 80112f4:	f7fe fc16 	bl	800fb24 <ucdr_buffer_remaining>
 80112f8:	2808      	cmp	r0, #8
 80112fa:	d803      	bhi.n	8011304 <uxr_read_session_header+0x20>
 80112fc:	2000      	movs	r0, #0
 80112fe:	b004      	add	sp, #16
 8011300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011304:	f10d 080c 	add.w	r8, sp, #12
 8011308:	4633      	mov	r3, r6
 801130a:	462a      	mov	r2, r5
 801130c:	4620      	mov	r0, r4
 801130e:	f8cd 8000 	str.w	r8, [sp]
 8011312:	f10d 010b 	add.w	r1, sp, #11
 8011316:	f000 fbb5 	bl	8011a84 <uxr_deserialize_message_header>
 801131a:	783a      	ldrb	r2, [r7, #0]
 801131c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8011320:	4293      	cmp	r3, r2
 8011322:	d1eb      	bne.n	80112fc <uxr_read_session_header+0x18>
 8011324:	061b      	lsls	r3, r3, #24
 8011326:	d41c      	bmi.n	8011362 <uxr_read_session_header+0x7e>
 8011328:	f898 2000 	ldrb.w	r2, [r8]
 801132c:	787b      	ldrb	r3, [r7, #1]
 801132e:	429a      	cmp	r2, r3
 8011330:	d003      	beq.n	801133a <uxr_read_session_header+0x56>
 8011332:	2001      	movs	r0, #1
 8011334:	f080 0001 	eor.w	r0, r0, #1
 8011338:	e7e1      	b.n	80112fe <uxr_read_session_header+0x1a>
 801133a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801133e:	78bb      	ldrb	r3, [r7, #2]
 8011340:	429a      	cmp	r2, r3
 8011342:	f107 0102 	add.w	r1, r7, #2
 8011346:	d1f4      	bne.n	8011332 <uxr_read_session_header+0x4e>
 8011348:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801134c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011350:	429a      	cmp	r2, r3
 8011352:	d1ee      	bne.n	8011332 <uxr_read_session_header+0x4e>
 8011354:	784b      	ldrb	r3, [r1, #1]
 8011356:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801135a:	429a      	cmp	r2, r3
 801135c:	d1e9      	bne.n	8011332 <uxr_read_session_header+0x4e>
 801135e:	2000      	movs	r0, #0
 8011360:	e7e8      	b.n	8011334 <uxr_read_session_header+0x50>
 8011362:	2001      	movs	r0, #1
 8011364:	e7cb      	b.n	80112fe <uxr_read_session_header+0x1a>
 8011366:	bf00      	nop

08011368 <uxr_session_header_offset>:
 8011368:	f990 3000 	ldrsb.w	r3, [r0]
 801136c:	2b00      	cmp	r3, #0
 801136e:	bfac      	ite	ge
 8011370:	2008      	movge	r0, #8
 8011372:	2004      	movlt	r0, #4
 8011374:	4770      	bx	lr
 8011376:	bf00      	nop

08011378 <uxr_init_base_object_request>:
 8011378:	b530      	push	{r4, r5, lr}
 801137a:	88c3      	ldrh	r3, [r0, #6]
 801137c:	b083      	sub	sp, #12
 801137e:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8011382:	9101      	str	r1, [sp, #4]
 8011384:	f1a3 010a 	sub.w	r1, r3, #10
 8011388:	b289      	uxth	r1, r1
 801138a:	42a1      	cmp	r1, r4
 801138c:	d80e      	bhi.n	80113ac <uxr_init_base_object_request+0x34>
 801138e:	3301      	adds	r3, #1
 8011390:	b29c      	uxth	r4, r3
 8011392:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8011396:	b2db      	uxtb	r3, r3
 8011398:	80c4      	strh	r4, [r0, #6]
 801139a:	1c91      	adds	r1, r2, #2
 801139c:	9801      	ldr	r0, [sp, #4]
 801139e:	7015      	strb	r5, [r2, #0]
 80113a0:	7053      	strb	r3, [r2, #1]
 80113a2:	f7fe fe7b 	bl	801009c <uxr_object_id_to_raw>
 80113a6:	4620      	mov	r0, r4
 80113a8:	b003      	add	sp, #12
 80113aa:	bd30      	pop	{r4, r5, pc}
 80113ac:	230a      	movs	r3, #10
 80113ae:	461c      	mov	r4, r3
 80113b0:	2500      	movs	r5, #0
 80113b2:	e7f1      	b.n	8011398 <uxr_init_base_object_request+0x20>

080113b4 <uxr_parse_base_object_request>:
 80113b4:	b570      	push	{r4, r5, r6, lr}
 80113b6:	4604      	mov	r4, r0
 80113b8:	3002      	adds	r0, #2
 80113ba:	460d      	mov	r5, r1
 80113bc:	4616      	mov	r6, r2
 80113be:	f7fe fe59 	bl	8010074 <uxr_object_id_from_raw>
 80113c2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80113c6:	8028      	strh	r0, [r5, #0]
 80113c8:	806b      	strh	r3, [r5, #2]
 80113ca:	7822      	ldrb	r2, [r4, #0]
 80113cc:	7863      	ldrb	r3, [r4, #1]
 80113ce:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80113d2:	8033      	strh	r3, [r6, #0]
 80113d4:	bd70      	pop	{r4, r5, r6, pc}
 80113d6:	bf00      	nop

080113d8 <uxr_stream_id>:
 80113d8:	b410      	push	{r4}
 80113da:	2901      	cmp	r1, #1
 80113dc:	b083      	sub	sp, #12
 80113de:	d01f      	beq.n	8011420 <uxr_stream_id+0x48>
 80113e0:	2902      	cmp	r1, #2
 80113e2:	f04f 0400 	mov.w	r4, #0
 80113e6:	d01e      	beq.n	8011426 <uxr_stream_id+0x4e>
 80113e8:	2300      	movs	r3, #0
 80113ea:	f364 0307 	bfi	r3, r4, #0, #8
 80113ee:	f360 230f 	bfi	r3, r0, #8, #8
 80113f2:	f361 4317 	bfi	r3, r1, #16, #8
 80113f6:	f362 631f 	bfi	r3, r2, #24, #8
 80113fa:	b2da      	uxtb	r2, r3
 80113fc:	2000      	movs	r0, #0
 80113fe:	f362 0007 	bfi	r0, r2, #0, #8
 8011402:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011406:	f362 200f 	bfi	r0, r2, #8, #8
 801140a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801140e:	f362 4017 	bfi	r0, r2, #16, #8
 8011412:	0e1b      	lsrs	r3, r3, #24
 8011414:	f363 601f 	bfi	r0, r3, #24, #8
 8011418:	b003      	add	sp, #12
 801141a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801141e:	4770      	bx	lr
 8011420:	1c44      	adds	r4, r0, #1
 8011422:	b2e4      	uxtb	r4, r4
 8011424:	e7e0      	b.n	80113e8 <uxr_stream_id+0x10>
 8011426:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 801142a:	e7dd      	b.n	80113e8 <uxr_stream_id+0x10>

0801142c <uxr_stream_id_from_raw>:
 801142c:	b410      	push	{r4}
 801142e:	b083      	sub	sp, #12
 8011430:	b128      	cbz	r0, 801143e <uxr_stream_id_from_raw+0x12>
 8011432:	0603      	lsls	r3, r0, #24
 8011434:	d421      	bmi.n	801147a <uxr_stream_id_from_raw+0x4e>
 8011436:	1e42      	subs	r2, r0, #1
 8011438:	b2d2      	uxtb	r2, r2
 801143a:	2401      	movs	r4, #1
 801143c:	e001      	b.n	8011442 <uxr_stream_id_from_raw+0x16>
 801143e:	4604      	mov	r4, r0
 8011440:	4602      	mov	r2, r0
 8011442:	2300      	movs	r3, #0
 8011444:	f360 0307 	bfi	r3, r0, #0, #8
 8011448:	f362 230f 	bfi	r3, r2, #8, #8
 801144c:	f364 4317 	bfi	r3, r4, #16, #8
 8011450:	f361 631f 	bfi	r3, r1, #24, #8
 8011454:	b2da      	uxtb	r2, r3
 8011456:	2000      	movs	r0, #0
 8011458:	f362 0007 	bfi	r0, r2, #0, #8
 801145c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011460:	f362 200f 	bfi	r0, r2, #8, #8
 8011464:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011468:	f362 4017 	bfi	r0, r2, #16, #8
 801146c:	0e1b      	lsrs	r3, r3, #24
 801146e:	f363 601f 	bfi	r0, r3, #24, #8
 8011472:	b003      	add	sp, #12
 8011474:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011478:	4770      	bx	lr
 801147a:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 801147e:	2402      	movs	r4, #2
 8011480:	e7df      	b.n	8011442 <uxr_stream_id_from_raw+0x16>
 8011482:	bf00      	nop

08011484 <uxr_init_stream_storage>:
 8011484:	2300      	movs	r3, #0
 8011486:	7403      	strb	r3, [r0, #16]
 8011488:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 801148c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8011490:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8011494:	4770      	bx	lr
 8011496:	bf00      	nop

08011498 <uxr_reset_stream_storage>:
 8011498:	b570      	push	{r4, r5, r6, lr}
 801149a:	7c03      	ldrb	r3, [r0, #16]
 801149c:	4604      	mov	r4, r0
 801149e:	b153      	cbz	r3, 80114b6 <uxr_reset_stream_storage+0x1e>
 80114a0:	4606      	mov	r6, r0
 80114a2:	2500      	movs	r5, #0
 80114a4:	4630      	mov	r0, r6
 80114a6:	f004 fe4b 	bl	8016140 <uxr_reset_output_best_effort_stream>
 80114aa:	7c23      	ldrb	r3, [r4, #16]
 80114ac:	3501      	adds	r5, #1
 80114ae:	42ab      	cmp	r3, r5
 80114b0:	f106 0610 	add.w	r6, r6, #16
 80114b4:	d8f6      	bhi.n	80114a4 <uxr_reset_stream_storage+0xc>
 80114b6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80114ba:	b163      	cbz	r3, 80114d6 <uxr_reset_stream_storage+0x3e>
 80114bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80114c0:	2500      	movs	r5, #0
 80114c2:	4630      	mov	r0, r6
 80114c4:	f004 fc48 	bl	8015d58 <uxr_reset_input_best_effort_stream>
 80114c8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80114cc:	3501      	adds	r5, #1
 80114ce:	42ab      	cmp	r3, r5
 80114d0:	f106 0602 	add.w	r6, r6, #2
 80114d4:	d8f5      	bhi.n	80114c2 <uxr_reset_stream_storage+0x2a>
 80114d6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80114da:	b163      	cbz	r3, 80114f6 <uxr_reset_stream_storage+0x5e>
 80114dc:	f104 0618 	add.w	r6, r4, #24
 80114e0:	2500      	movs	r5, #0
 80114e2:	4630      	mov	r0, r6
 80114e4:	f004 fecc 	bl	8016280 <uxr_reset_output_reliable_stream>
 80114e8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80114ec:	3501      	adds	r5, #1
 80114ee:	42ab      	cmp	r3, r5
 80114f0:	f106 0628 	add.w	r6, r6, #40	; 0x28
 80114f4:	d8f5      	bhi.n	80114e2 <uxr_reset_stream_storage+0x4a>
 80114f6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80114fa:	b163      	cbz	r3, 8011516 <uxr_reset_stream_storage+0x7e>
 80114fc:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8011500:	2500      	movs	r5, #0
 8011502:	4630      	mov	r0, r6
 8011504:	f004 fc90 	bl	8015e28 <uxr_reset_input_reliable_stream>
 8011508:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801150c:	3501      	adds	r5, #1
 801150e:	42ab      	cmp	r3, r5
 8011510:	f106 0618 	add.w	r6, r6, #24
 8011514:	d8f5      	bhi.n	8011502 <uxr_reset_stream_storage+0x6a>
 8011516:	bd70      	pop	{r4, r5, r6, pc}

08011518 <uxr_add_output_best_effort_buffer>:
 8011518:	b530      	push	{r4, r5, lr}
 801151a:	7c04      	ldrb	r4, [r0, #16]
 801151c:	1c65      	adds	r5, r4, #1
 801151e:	b083      	sub	sp, #12
 8011520:	7405      	strb	r5, [r0, #16]
 8011522:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8011526:	f004 fdff 	bl	8016128 <uxr_init_output_best_effort_stream>
 801152a:	2201      	movs	r2, #1
 801152c:	4620      	mov	r0, r4
 801152e:	4611      	mov	r1, r2
 8011530:	b003      	add	sp, #12
 8011532:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011536:	f7ff bf4f 	b.w	80113d8 <uxr_stream_id>
 801153a:	bf00      	nop

0801153c <uxr_add_output_reliable_buffer>:
 801153c:	b570      	push	{r4, r5, r6, lr}
 801153e:	b084      	sub	sp, #16
 8011540:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8011544:	f89d 6020 	ldrb.w	r6, [sp, #32]
 8011548:	9600      	str	r6, [sp, #0]
 801154a:	2528      	movs	r5, #40	; 0x28
 801154c:	1c66      	adds	r6, r4, #1
 801154e:	fb05 0504 	mla	r5, r5, r4, r0
 8011552:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 8011556:	f105 0018 	add.w	r0, r5, #24
 801155a:	f004 fe5f 	bl	801621c <uxr_init_output_reliable_stream>
 801155e:	4620      	mov	r0, r4
 8011560:	2201      	movs	r2, #1
 8011562:	2102      	movs	r1, #2
 8011564:	b004      	add	sp, #16
 8011566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801156a:	f7ff bf35 	b.w	80113d8 <uxr_stream_id>
 801156e:	bf00      	nop

08011570 <uxr_add_input_best_effort_buffer>:
 8011570:	b510      	push	{r4, lr}
 8011572:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8011576:	1c62      	adds	r2, r4, #1
 8011578:	f104 0321 	add.w	r3, r4, #33	; 0x21
 801157c:	b082      	sub	sp, #8
 801157e:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8011582:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011586:	f004 fbe3 	bl	8015d50 <uxr_init_input_best_effort_stream>
 801158a:	4620      	mov	r0, r4
 801158c:	2200      	movs	r2, #0
 801158e:	2101      	movs	r1, #1
 8011590:	b002      	add	sp, #8
 8011592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011596:	f7ff bf1f 	b.w	80113d8 <uxr_stream_id>
 801159a:	bf00      	nop

0801159c <uxr_add_input_reliable_buffer>:
 801159c:	b570      	push	{r4, r5, r6, lr}
 801159e:	b084      	sub	sp, #16
 80115a0:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 80115a4:	9e08      	ldr	r6, [sp, #32]
 80115a6:	9600      	str	r6, [sp, #0]
 80115a8:	2518      	movs	r5, #24
 80115aa:	1c66      	adds	r6, r4, #1
 80115ac:	fb05 0504 	mla	r5, r5, r4, r0
 80115b0:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 80115b4:	f105 0048 	add.w	r0, r5, #72	; 0x48
 80115b8:	f004 fc12 	bl	8015de0 <uxr_init_input_reliable_stream>
 80115bc:	4620      	mov	r0, r4
 80115be:	2200      	movs	r2, #0
 80115c0:	2102      	movs	r1, #2
 80115c2:	b004      	add	sp, #16
 80115c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80115c8:	f7ff bf06 	b.w	80113d8 <uxr_stream_id>

080115cc <uxr_get_output_best_effort_stream>:
 80115cc:	7c03      	ldrb	r3, [r0, #16]
 80115ce:	428b      	cmp	r3, r1
 80115d0:	bf8c      	ite	hi
 80115d2:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80115d6:	2000      	movls	r0, #0
 80115d8:	4770      	bx	lr
 80115da:	bf00      	nop

080115dc <uxr_get_output_reliable_stream>:
 80115dc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80115e0:	428b      	cmp	r3, r1
 80115e2:	bf83      	ittte	hi
 80115e4:	2328      	movhi	r3, #40	; 0x28
 80115e6:	fb03 0101 	mlahi	r1, r3, r1, r0
 80115ea:	f101 0018 	addhi.w	r0, r1, #24
 80115ee:	2000      	movls	r0, #0
 80115f0:	4770      	bx	lr
 80115f2:	bf00      	nop

080115f4 <uxr_get_input_best_effort_stream>:
 80115f4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80115f8:	428b      	cmp	r3, r1
 80115fa:	bf86      	itte	hi
 80115fc:	3121      	addhi	r1, #33	; 0x21
 80115fe:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8011602:	2000      	movls	r0, #0
 8011604:	4770      	bx	lr
 8011606:	bf00      	nop

08011608 <uxr_get_input_reliable_stream>:
 8011608:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 801160c:	428b      	cmp	r3, r1
 801160e:	bf83      	ittte	hi
 8011610:	2318      	movhi	r3, #24
 8011612:	fb03 0101 	mlahi	r1, r3, r1, r0
 8011616:	f101 0048 	addhi.w	r0, r1, #72	; 0x48
 801161a:	2000      	movls	r0, #0
 801161c:	4770      	bx	lr
 801161e:	bf00      	nop

08011620 <uxr_output_streams_confirmed>:
 8011620:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8011624:	b183      	cbz	r3, 8011648 <uxr_output_streams_confirmed+0x28>
 8011626:	b570      	push	{r4, r5, r6, lr}
 8011628:	4606      	mov	r6, r0
 801162a:	f100 0518 	add.w	r5, r0, #24
 801162e:	2400      	movs	r4, #0
 8011630:	e001      	b.n	8011636 <uxr_output_streams_confirmed+0x16>
 8011632:	3528      	adds	r5, #40	; 0x28
 8011634:	b138      	cbz	r0, 8011646 <uxr_output_streams_confirmed+0x26>
 8011636:	4628      	mov	r0, r5
 8011638:	f005 f886 	bl	8016748 <uxr_is_output_up_to_date>
 801163c:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 8011640:	3401      	adds	r4, #1
 8011642:	42a3      	cmp	r3, r4
 8011644:	d8f5      	bhi.n	8011632 <uxr_output_streams_confirmed+0x12>
 8011646:	bd70      	pop	{r4, r5, r6, pc}
 8011648:	2001      	movs	r0, #1
 801164a:	4770      	bx	lr

0801164c <uxr_buffer_submessage_header>:
 801164c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801164e:	4604      	mov	r4, r0
 8011650:	460e      	mov	r6, r1
 8011652:	2104      	movs	r1, #4
 8011654:	4615      	mov	r5, r2
 8011656:	461f      	mov	r7, r3
 8011658:	f7fe fa4e 	bl	800faf8 <ucdr_align_to>
 801165c:	2301      	movs	r3, #1
 801165e:	ea47 0203 	orr.w	r2, r7, r3
 8011662:	4631      	mov	r1, r6
 8011664:	7523      	strb	r3, [r4, #20]
 8011666:	4620      	mov	r0, r4
 8011668:	462b      	mov	r3, r5
 801166a:	f000 fa2b 	bl	8011ac4 <uxr_serialize_submessage_header>
 801166e:	4620      	mov	r0, r4
 8011670:	f7fe fa58 	bl	800fb24 <ucdr_buffer_remaining>
 8011674:	42a8      	cmp	r0, r5
 8011676:	bf34      	ite	cc
 8011678:	2000      	movcc	r0, #0
 801167a:	2001      	movcs	r0, #1
 801167c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801167e:	bf00      	nop

08011680 <uxr_read_submessage_header>:
 8011680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011684:	4604      	mov	r4, r0
 8011686:	460d      	mov	r5, r1
 8011688:	2104      	movs	r1, #4
 801168a:	4616      	mov	r6, r2
 801168c:	4698      	mov	r8, r3
 801168e:	f7fe fa33 	bl	800faf8 <ucdr_align_to>
 8011692:	4620      	mov	r0, r4
 8011694:	f7fe fa46 	bl	800fb24 <ucdr_buffer_remaining>
 8011698:	2803      	cmp	r0, #3
 801169a:	bf8c      	ite	hi
 801169c:	2701      	movhi	r7, #1
 801169e:	2700      	movls	r7, #0
 80116a0:	d802      	bhi.n	80116a8 <uxr_read_submessage_header+0x28>
 80116a2:	4638      	mov	r0, r7
 80116a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116a8:	4633      	mov	r3, r6
 80116aa:	4642      	mov	r2, r8
 80116ac:	4620      	mov	r0, r4
 80116ae:	4629      	mov	r1, r5
 80116b0:	f000 fa1c 	bl	8011aec <uxr_deserialize_submessage_header>
 80116b4:	f898 3000 	ldrb.w	r3, [r8]
 80116b8:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 80116bc:	f003 0301 	and.w	r3, r3, #1
 80116c0:	f888 2000 	strb.w	r2, [r8]
 80116c4:	7523      	strb	r3, [r4, #20]
 80116c6:	4638      	mov	r0, r7
 80116c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080116cc <uxr_submessage_padding>:
 80116cc:	f010 0003 	ands.w	r0, r0, #3
 80116d0:	bf18      	it	ne
 80116d2:	f1c0 0004 	rsbne	r0, r0, #4
 80116d6:	4770      	bx	lr

080116d8 <uxr_millis>:
 80116d8:	b510      	push	{r4, lr}
 80116da:	b084      	sub	sp, #16
 80116dc:	4669      	mov	r1, sp
 80116de:	2001      	movs	r0, #1
 80116e0:	f7f1 fe4e 	bl	8003380 <clock_gettime>
 80116e4:	e9dd 2400 	ldrd	r2, r4, [sp]
 80116e8:	4907      	ldr	r1, [pc, #28]	; (8011708 <uxr_millis+0x30>)
 80116ea:	9802      	ldr	r0, [sp, #8]
 80116ec:	fba2 2301 	umull	r2, r3, r2, r1
 80116f0:	fb01 3304 	mla	r3, r1, r4, r3
 80116f4:	4604      	mov	r4, r0
 80116f6:	1810      	adds	r0, r2, r0
 80116f8:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 80116fc:	4a03      	ldr	r2, [pc, #12]	; (801170c <uxr_millis+0x34>)
 80116fe:	2300      	movs	r3, #0
 8011700:	f7ef fa7c 	bl	8000bfc <__aeabi_ldivmod>
 8011704:	b004      	add	sp, #16
 8011706:	bd10      	pop	{r4, pc}
 8011708:	3b9aca00 	.word	0x3b9aca00
 801170c:	000f4240 	.word	0x000f4240

08011710 <uxr_nanos>:
 8011710:	b510      	push	{r4, lr}
 8011712:	b084      	sub	sp, #16
 8011714:	4669      	mov	r1, sp
 8011716:	2001      	movs	r0, #1
 8011718:	f7f1 fe32 	bl	8003380 <clock_gettime>
 801171c:	e9dd 2400 	ldrd	r2, r4, [sp]
 8011720:	4905      	ldr	r1, [pc, #20]	; (8011738 <uxr_nanos+0x28>)
 8011722:	9802      	ldr	r0, [sp, #8]
 8011724:	fba2 2301 	umull	r2, r3, r2, r1
 8011728:	fb01 3304 	mla	r3, r1, r4, r3
 801172c:	4604      	mov	r4, r0
 801172e:	1810      	adds	r0, r2, r0
 8011730:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8011734:	b004      	add	sp, #16
 8011736:	bd10      	pop	{r4, pc}
 8011738:	3b9aca00 	.word	0x3b9aca00

0801173c <on_full_output_buffer_fragmented>:
 801173c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011740:	460c      	mov	r4, r1
 8011742:	b08a      	sub	sp, #40	; 0x28
 8011744:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8011748:	4606      	mov	r6, r0
 801174a:	f104 0008 	add.w	r0, r4, #8
 801174e:	f7ff ff45 	bl	80115dc <uxr_get_output_reliable_stream>
 8011752:	4605      	mov	r5, r0
 8011754:	f005 f802 	bl	801675c <get_available_free_slots>
 8011758:	b968      	cbnz	r0, 8011776 <on_full_output_buffer_fragmented+0x3a>
 801175a:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 801175e:	4620      	mov	r0, r4
 8011760:	4798      	blx	r3
 8011762:	b918      	cbnz	r0, 801176c <on_full_output_buffer_fragmented+0x30>
 8011764:	2001      	movs	r0, #1
 8011766:	b00a      	add	sp, #40	; 0x28
 8011768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801176c:	4628      	mov	r0, r5
 801176e:	f004 fff5 	bl	801675c <get_available_free_slots>
 8011772:	2800      	cmp	r0, #0
 8011774:	d0f6      	beq.n	8011764 <on_full_output_buffer_fragmented+0x28>
 8011776:	8928      	ldrh	r0, [r5, #8]
 8011778:	89eb      	ldrh	r3, [r5, #14]
 801177a:	7b2a      	ldrb	r2, [r5, #12]
 801177c:	fbb3 f1f0 	udiv	r1, r3, r0
 8011780:	f5c2 427f 	rsb	r2, r2, #65280	; 0xff00
 8011784:	fb00 3111 	mls	r1, r0, r1, r3
 8011788:	b28b      	uxth	r3, r1
 801178a:	32fc      	adds	r2, #252	; 0xfc
 801178c:	6869      	ldr	r1, [r5, #4]
 801178e:	fbb1 f1f0 	udiv	r1, r1, r0
 8011792:	1f0f      	subs	r7, r1, #4
 8011794:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 8011798:	fb01 f103 	mul.w	r1, r1, r3
 801179c:	443a      	add	r2, r7
 801179e:	682b      	ldr	r3, [r5, #0]
 80117a0:	fa1f f882 	uxth.w	r8, r2
 80117a4:	3104      	adds	r1, #4
 80117a6:	4419      	add	r1, r3
 80117a8:	eba0 0008 	sub.w	r0, r0, r8
 80117ac:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 80117b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80117b4:	9300      	str	r3, [sp, #0]
 80117b6:	463a      	mov	r2, r7
 80117b8:	2300      	movs	r3, #0
 80117ba:	a802      	add	r0, sp, #8
 80117bc:	f7fe f970 	bl	800faa0 <ucdr_init_buffer_origin_offset>
 80117c0:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80117c4:	f102 0308 	add.w	r3, r2, #8
 80117c8:	42bb      	cmp	r3, r7
 80117ca:	d927      	bls.n	801181c <on_full_output_buffer_fragmented+0xe0>
 80117cc:	4642      	mov	r2, r8
 80117ce:	2300      	movs	r3, #0
 80117d0:	210d      	movs	r1, #13
 80117d2:	a802      	add	r0, sp, #8
 80117d4:	f7ff ff3a 	bl	801164c <uxr_buffer_submessage_header>
 80117d8:	8928      	ldrh	r0, [r5, #8]
 80117da:	89eb      	ldrh	r3, [r5, #14]
 80117dc:	fbb3 f1f0 	udiv	r1, r3, r0
 80117e0:	fb00 3111 	mls	r1, r0, r1, r3
 80117e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80117e8:	b289      	uxth	r1, r1
 80117ea:	fbb3 f3f0 	udiv	r3, r3, r0
 80117ee:	fb03 f301 	mul.w	r3, r3, r1
 80117f2:	50d7      	str	r7, [r2, r3]
 80117f4:	89e8      	ldrh	r0, [r5, #14]
 80117f6:	2101      	movs	r1, #1
 80117f8:	f004 ffd0 	bl	801679c <uxr_seq_num_add>
 80117fc:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8011800:	81e8      	strh	r0, [r5, #14]
 8011802:	1a52      	subs	r2, r2, r1
 8011804:	4630      	mov	r0, r6
 8011806:	f7fe f95d 	bl	800fac4 <ucdr_init_buffer>
 801180a:	4630      	mov	r0, r6
 801180c:	490f      	ldr	r1, [pc, #60]	; (801184c <on_full_output_buffer_fragmented+0x110>)
 801180e:	4622      	mov	r2, r4
 8011810:	f7fe f92e 	bl	800fa70 <ucdr_set_on_full_buffer_callback>
 8011814:	2000      	movs	r0, #0
 8011816:	b00a      	add	sp, #40	; 0x28
 8011818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801181c:	b292      	uxth	r2, r2
 801181e:	2302      	movs	r3, #2
 8011820:	210d      	movs	r1, #13
 8011822:	a802      	add	r0, sp, #8
 8011824:	f7ff ff12 	bl	801164c <uxr_buffer_submessage_header>
 8011828:	8928      	ldrh	r0, [r5, #8]
 801182a:	89eb      	ldrh	r3, [r5, #14]
 801182c:	fbb3 f2f0 	udiv	r2, r3, r0
 8011830:	fb00 3212 	mls	r2, r0, r2, r3
 8011834:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 8011838:	686b      	ldr	r3, [r5, #4]
 801183a:	fbb3 f3f0 	udiv	r3, r3, r0
 801183e:	b292      	uxth	r2, r2
 8011840:	6828      	ldr	r0, [r5, #0]
 8011842:	fb03 f302 	mul.w	r3, r3, r2
 8011846:	3108      	adds	r1, #8
 8011848:	50c1      	str	r1, [r0, r3]
 801184a:	e7d3      	b.n	80117f4 <on_full_output_buffer_fragmented+0xb8>
 801184c:	0801173d 	.word	0x0801173d

08011850 <uxr_prepare_output_stream>:
 8011850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011852:	b087      	sub	sp, #28
 8011854:	2407      	movs	r4, #7
 8011856:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011858:	9202      	str	r2, [sp, #8]
 801185a:	2500      	movs	r5, #0
 801185c:	1d32      	adds	r2, r6, #4
 801185e:	e9cd 4500 	strd	r4, r5, [sp]
 8011862:	9103      	str	r1, [sp, #12]
 8011864:	461c      	mov	r4, r3
 8011866:	4606      	mov	r6, r0
 8011868:	f7ff fc4c 	bl	8011104 <uxr_prepare_stream_to_write_submessage>
 801186c:	f080 0201 	eor.w	r2, r0, #1
 8011870:	b2d2      	uxtb	r2, r2
 8011872:	75a2      	strb	r2, [r4, #22]
 8011874:	b112      	cbz	r2, 801187c <uxr_prepare_output_stream+0x2c>
 8011876:	4628      	mov	r0, r5
 8011878:	b007      	add	sp, #28
 801187a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801187c:	aa05      	add	r2, sp, #20
 801187e:	9902      	ldr	r1, [sp, #8]
 8011880:	4630      	mov	r0, r6
 8011882:	f7ff fd79 	bl	8011378 <uxr_init_base_object_request>
 8011886:	a905      	add	r1, sp, #20
 8011888:	4605      	mov	r5, r0
 801188a:	4620      	mov	r0, r4
 801188c:	f001 f872 	bl	8012974 <uxr_serialize_WRITE_DATA_Payload_Data>
 8011890:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8011894:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 8011898:	1a52      	subs	r2, r2, r1
 801189a:	4620      	mov	r0, r4
 801189c:	f7fe f912 	bl	800fac4 <ucdr_init_buffer>
 80118a0:	4620      	mov	r0, r4
 80118a2:	463a      	mov	r2, r7
 80118a4:	4631      	mov	r1, r6
 80118a6:	f7fe f8e3 	bl	800fa70 <ucdr_set_on_full_buffer_callback>
 80118aa:	4628      	mov	r0, r5
 80118ac:	b007      	add	sp, #28
 80118ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080118b0 <uxr_prepare_output_stream_fragmented>:
 80118b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118b4:	b093      	sub	sp, #76	; 0x4c
 80118b6:	4605      	mov	r5, r0
 80118b8:	9107      	str	r1, [sp, #28]
 80118ba:	3008      	adds	r0, #8
 80118bc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80118c0:	9303      	str	r3, [sp, #12]
 80118c2:	9206      	str	r2, [sp, #24]
 80118c4:	f7ff fe8a 	bl	80115dc <uxr_get_output_reliable_stream>
 80118c8:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80118cc:	2b01      	cmp	r3, #1
 80118ce:	f000 8094 	beq.w	80119fa <uxr_prepare_output_stream_fragmented+0x14a>
 80118d2:	4604      	mov	r4, r0
 80118d4:	2800      	cmp	r0, #0
 80118d6:	f000 8090 	beq.w	80119fa <uxr_prepare_output_stream_fragmented+0x14a>
 80118da:	f004 ff3f 	bl	801675c <get_available_free_slots>
 80118de:	2800      	cmp	r0, #0
 80118e0:	f000 8086 	beq.w	80119f0 <uxr_prepare_output_stream_fragmented+0x140>
 80118e4:	8922      	ldrh	r2, [r4, #8]
 80118e6:	89e7      	ldrh	r7, [r4, #14]
 80118e8:	fbb7 f8f2 	udiv	r8, r7, r2
 80118ec:	e9d4 3100 	ldrd	r3, r1, [r4]
 80118f0:	fb02 7818 	mls	r8, r2, r8, r7
 80118f4:	fa1f f888 	uxth.w	r8, r8
 80118f8:	fbb1 f2f2 	udiv	r2, r1, r2
 80118fc:	fb02 f808 	mul.w	r8, r2, r8
 8011900:	f108 0804 	add.w	r8, r8, #4
 8011904:	4498      	add	r8, r3
 8011906:	7b23      	ldrb	r3, [r4, #12]
 8011908:	f858 ac04 	ldr.w	sl, [r8, #-4]
 801190c:	9204      	str	r2, [sp, #16]
 801190e:	4553      	cmp	r3, sl
 8011910:	f1a2 0b04 	sub.w	fp, r2, #4
 8011914:	d37d      	bcc.n	8011a12 <uxr_prepare_output_stream_fragmented+0x162>
 8011916:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8011918:	f8cd a000 	str.w	sl, [sp]
 801191c:	f1ab 0904 	sub.w	r9, fp, #4
 8011920:	eba9 0903 	sub.w	r9, r9, r3
 8011924:	3608      	adds	r6, #8
 8011926:	a80a      	add	r0, sp, #40	; 0x28
 8011928:	2300      	movs	r3, #0
 801192a:	465a      	mov	r2, fp
 801192c:	4641      	mov	r1, r8
 801192e:	fa1f f989 	uxth.w	r9, r9
 8011932:	9605      	str	r6, [sp, #20]
 8011934:	f7fe f8b4 	bl	800faa0 <ucdr_init_buffer_origin_offset>
 8011938:	455e      	cmp	r6, fp
 801193a:	bf34      	ite	cc
 801193c:	2302      	movcc	r3, #2
 801193e:	2300      	movcs	r3, #0
 8011940:	464a      	mov	r2, r9
 8011942:	210d      	movs	r1, #13
 8011944:	a80a      	add	r0, sp, #40	; 0x28
 8011946:	f7ff fe81 	bl	801164c <uxr_buffer_submessage_header>
 801194a:	8920      	ldrh	r0, [r4, #8]
 801194c:	fbb7 f3f0 	udiv	r3, r7, r0
 8011950:	e9d4 2100 	ldrd	r2, r1, [r4]
 8011954:	fb00 7313 	mls	r3, r0, r3, r7
 8011958:	b29b      	uxth	r3, r3
 801195a:	fbb1 f1f0 	udiv	r1, r1, r0
 801195e:	fb03 f301 	mul.w	r3, r3, r1
 8011962:	4638      	mov	r0, r7
 8011964:	f842 b003 	str.w	fp, [r2, r3]
 8011968:	2101      	movs	r1, #1
 801196a:	f004 ff17 	bl	801679c <uxr_seq_num_add>
 801196e:	9b04      	ldr	r3, [sp, #16]
 8011970:	9e03      	ldr	r6, [sp, #12]
 8011972:	f1a3 0208 	sub.w	r2, r3, #8
 8011976:	f10a 0104 	add.w	r1, sl, #4
 801197a:	4607      	mov	r7, r0
 801197c:	eba2 020a 	sub.w	r2, r2, sl
 8011980:	4441      	add	r1, r8
 8011982:	4630      	mov	r0, r6
 8011984:	f7fe f89e 	bl	800fac4 <ucdr_init_buffer>
 8011988:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801198a:	81e7      	strh	r7, [r4, #14]
 801198c:	1d1a      	adds	r2, r3, #4
 801198e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8011992:	bf28      	it	cs
 8011994:	2200      	movcs	r2, #0
 8011996:	b292      	uxth	r2, r2
 8011998:	2300      	movs	r3, #0
 801199a:	2107      	movs	r1, #7
 801199c:	4630      	mov	r0, r6
 801199e:	f7ff fe55 	bl	801164c <uxr_buffer_submessage_header>
 80119a2:	9906      	ldr	r1, [sp, #24]
 80119a4:	aa09      	add	r2, sp, #36	; 0x24
 80119a6:	4628      	mov	r0, r5
 80119a8:	f7ff fce6 	bl	8011378 <uxr_init_base_object_request>
 80119ac:	4604      	mov	r4, r0
 80119ae:	b328      	cbz	r0, 80119fc <uxr_prepare_output_stream_fragmented+0x14c>
 80119b0:	9e03      	ldr	r6, [sp, #12]
 80119b2:	a909      	add	r1, sp, #36	; 0x24
 80119b4:	4630      	mov	r0, r6
 80119b6:	f000 ffdd 	bl	8012974 <uxr_serialize_WRITE_DATA_Payload_Data>
 80119ba:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80119be:	4630      	mov	r0, r6
 80119c0:	1a52      	subs	r2, r2, r1
 80119c2:	f7fe f87f 	bl	800fac4 <ucdr_init_buffer>
 80119c6:	9a05      	ldr	r2, [sp, #20]
 80119c8:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 80119cc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80119ce:	9b07      	ldr	r3, [sp, #28]
 80119d0:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 80119d4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80119d6:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
 80119da:	4630      	mov	r0, r6
 80119dc:	4919      	ldr	r1, [pc, #100]	; (8011a44 <uxr_prepare_output_stream_fragmented+0x194>)
 80119de:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 80119e2:	462a      	mov	r2, r5
 80119e4:	f7fe f844 	bl	800fa70 <ucdr_set_on_full_buffer_callback>
 80119e8:	4620      	mov	r0, r4
 80119ea:	b013      	add	sp, #76	; 0x4c
 80119ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119f0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80119f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80119f4:	4628      	mov	r0, r5
 80119f6:	4798      	blx	r3
 80119f8:	b920      	cbnz	r0, 8011a04 <uxr_prepare_output_stream_fragmented+0x154>
 80119fa:	2400      	movs	r4, #0
 80119fc:	4620      	mov	r0, r4
 80119fe:	b013      	add	sp, #76	; 0x4c
 8011a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a04:	4620      	mov	r0, r4
 8011a06:	f004 fea9 	bl	801675c <get_available_free_slots>
 8011a0a:	2800      	cmp	r0, #0
 8011a0c:	f47f af6a 	bne.w	80118e4 <uxr_prepare_output_stream_fragmented+0x34>
 8011a10:	e7f3      	b.n	80119fa <uxr_prepare_output_stream_fragmented+0x14a>
 8011a12:	4638      	mov	r0, r7
 8011a14:	2101      	movs	r1, #1
 8011a16:	f004 fec1 	bl	801679c <uxr_seq_num_add>
 8011a1a:	8922      	ldrh	r2, [r4, #8]
 8011a1c:	fbb0 f8f2 	udiv	r8, r0, r2
 8011a20:	fb02 0818 	mls	r8, r2, r8, r0
 8011a24:	fa1f f888 	uxth.w	r8, r8
 8011a28:	6863      	ldr	r3, [r4, #4]
 8011a2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8011a2e:	6822      	ldr	r2, [r4, #0]
 8011a30:	fb08 f803 	mul.w	r8, r8, r3
 8011a34:	f108 0804 	add.w	r8, r8, #4
 8011a38:	4490      	add	r8, r2
 8011a3a:	7b23      	ldrb	r3, [r4, #12]
 8011a3c:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8011a40:	4607      	mov	r7, r0
 8011a42:	e768      	b.n	8011916 <uxr_prepare_output_stream_fragmented+0x66>
 8011a44:	0801173d 	.word	0x0801173d

08011a48 <uxr_serialize_message_header>:
 8011a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a4a:	b083      	sub	sp, #12
 8011a4c:	4616      	mov	r6, r2
 8011a4e:	4604      	mov	r4, r0
 8011a50:	9301      	str	r3, [sp, #4]
 8011a52:	460d      	mov	r5, r1
 8011a54:	9f08      	ldr	r7, [sp, #32]
 8011a56:	f003 f9e3 	bl	8014e20 <ucdr_serialize_uint8_t>
 8011a5a:	4631      	mov	r1, r6
 8011a5c:	4620      	mov	r0, r4
 8011a5e:	f003 f9df 	bl	8014e20 <ucdr_serialize_uint8_t>
 8011a62:	9a01      	ldr	r2, [sp, #4]
 8011a64:	4620      	mov	r0, r4
 8011a66:	2101      	movs	r1, #1
 8011a68:	f003 fa86 	bl	8014f78 <ucdr_serialize_endian_uint16_t>
 8011a6c:	062b      	lsls	r3, r5, #24
 8011a6e:	d501      	bpl.n	8011a74 <uxr_serialize_message_header+0x2c>
 8011a70:	b003      	add	sp, #12
 8011a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a74:	4639      	mov	r1, r7
 8011a76:	4620      	mov	r0, r4
 8011a78:	2204      	movs	r2, #4
 8011a7a:	b003      	add	sp, #12
 8011a7c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011a80:	f003 b8d6 	b.w	8014c30 <ucdr_serialize_array_uint8_t>

08011a84 <uxr_deserialize_message_header>:
 8011a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a86:	b083      	sub	sp, #12
 8011a88:	4616      	mov	r6, r2
 8011a8a:	4604      	mov	r4, r0
 8011a8c:	9301      	str	r3, [sp, #4]
 8011a8e:	460d      	mov	r5, r1
 8011a90:	9f08      	ldr	r7, [sp, #32]
 8011a92:	f003 f9db 	bl	8014e4c <ucdr_deserialize_uint8_t>
 8011a96:	4631      	mov	r1, r6
 8011a98:	4620      	mov	r0, r4
 8011a9a:	f003 f9d7 	bl	8014e4c <ucdr_deserialize_uint8_t>
 8011a9e:	9a01      	ldr	r2, [sp, #4]
 8011aa0:	4620      	mov	r0, r4
 8011aa2:	2101      	movs	r1, #1
 8011aa4:	f003 fb5c 	bl	8015160 <ucdr_deserialize_endian_uint16_t>
 8011aa8:	f995 3000 	ldrsb.w	r3, [r5]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	da01      	bge.n	8011ab4 <uxr_deserialize_message_header+0x30>
 8011ab0:	b003      	add	sp, #12
 8011ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ab4:	4639      	mov	r1, r7
 8011ab6:	4620      	mov	r0, r4
 8011ab8:	2204      	movs	r2, #4
 8011aba:	b003      	add	sp, #12
 8011abc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011ac0:	f003 b91a 	b.w	8014cf8 <ucdr_deserialize_array_uint8_t>

08011ac4 <uxr_serialize_submessage_header>:
 8011ac4:	b530      	push	{r4, r5, lr}
 8011ac6:	b083      	sub	sp, #12
 8011ac8:	4615      	mov	r5, r2
 8011aca:	4604      	mov	r4, r0
 8011acc:	9301      	str	r3, [sp, #4]
 8011ace:	f003 f9a7 	bl	8014e20 <ucdr_serialize_uint8_t>
 8011ad2:	4629      	mov	r1, r5
 8011ad4:	4620      	mov	r0, r4
 8011ad6:	f003 f9a3 	bl	8014e20 <ucdr_serialize_uint8_t>
 8011ada:	9a01      	ldr	r2, [sp, #4]
 8011adc:	4620      	mov	r0, r4
 8011ade:	2101      	movs	r1, #1
 8011ae0:	b003      	add	sp, #12
 8011ae2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011ae6:	f003 ba47 	b.w	8014f78 <ucdr_serialize_endian_uint16_t>
 8011aea:	bf00      	nop

08011aec <uxr_deserialize_submessage_header>:
 8011aec:	b530      	push	{r4, r5, lr}
 8011aee:	b083      	sub	sp, #12
 8011af0:	4615      	mov	r5, r2
 8011af2:	4604      	mov	r4, r0
 8011af4:	9301      	str	r3, [sp, #4]
 8011af6:	f003 f9a9 	bl	8014e4c <ucdr_deserialize_uint8_t>
 8011afa:	4629      	mov	r1, r5
 8011afc:	4620      	mov	r0, r4
 8011afe:	f003 f9a5 	bl	8014e4c <ucdr_deserialize_uint8_t>
 8011b02:	9a01      	ldr	r2, [sp, #4]
 8011b04:	4620      	mov	r0, r4
 8011b06:	2101      	movs	r1, #1
 8011b08:	b003      	add	sp, #12
 8011b0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011b0e:	f003 bb27 	b.w	8015160 <ucdr_deserialize_endian_uint16_t>
 8011b12:	bf00      	nop

08011b14 <uxr_serialize_CLIENT_Representation>:
 8011b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b18:	2204      	movs	r2, #4
 8011b1a:	460c      	mov	r4, r1
 8011b1c:	4605      	mov	r5, r0
 8011b1e:	f003 f887 	bl	8014c30 <ucdr_serialize_array_uint8_t>
 8011b22:	1d21      	adds	r1, r4, #4
 8011b24:	4607      	mov	r7, r0
 8011b26:	2202      	movs	r2, #2
 8011b28:	4628      	mov	r0, r5
 8011b2a:	f003 f881 	bl	8014c30 <ucdr_serialize_array_uint8_t>
 8011b2e:	1da1      	adds	r1, r4, #6
 8011b30:	4007      	ands	r7, r0
 8011b32:	2202      	movs	r2, #2
 8011b34:	4628      	mov	r0, r5
 8011b36:	f003 f87b 	bl	8014c30 <ucdr_serialize_array_uint8_t>
 8011b3a:	fa5f f887 	uxtb.w	r8, r7
 8011b3e:	2204      	movs	r2, #4
 8011b40:	4607      	mov	r7, r0
 8011b42:	f104 0108 	add.w	r1, r4, #8
 8011b46:	4628      	mov	r0, r5
 8011b48:	f003 f872 	bl	8014c30 <ucdr_serialize_array_uint8_t>
 8011b4c:	ea08 0707 	and.w	r7, r8, r7
 8011b50:	7b21      	ldrb	r1, [r4, #12]
 8011b52:	4680      	mov	r8, r0
 8011b54:	4628      	mov	r0, r5
 8011b56:	f003 f963 	bl	8014e20 <ucdr_serialize_uint8_t>
 8011b5a:	ea08 0807 	and.w	r8, r8, r7
 8011b5e:	7b61      	ldrb	r1, [r4, #13]
 8011b60:	4607      	mov	r7, r0
 8011b62:	4628      	mov	r0, r5
 8011b64:	f003 f92c 	bl	8014dc0 <ucdr_serialize_bool>
 8011b68:	7b63      	ldrb	r3, [r4, #13]
 8011b6a:	ea08 0707 	and.w	r7, r8, r7
 8011b6e:	ea07 0600 	and.w	r6, r7, r0
 8011b72:	b933      	cbnz	r3, 8011b82 <uxr_serialize_CLIENT_Representation+0x6e>
 8011b74:	8ba1      	ldrh	r1, [r4, #28]
 8011b76:	4628      	mov	r0, r5
 8011b78:	f003 f97e 	bl	8014e78 <ucdr_serialize_uint16_t>
 8011b7c:	4030      	ands	r0, r6
 8011b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b82:	6921      	ldr	r1, [r4, #16]
 8011b84:	4628      	mov	r0, r5
 8011b86:	f003 fb61 	bl	801524c <ucdr_serialize_uint32_t>
 8011b8a:	6923      	ldr	r3, [r4, #16]
 8011b8c:	b1cb      	cbz	r3, 8011bc2 <uxr_serialize_CLIENT_Representation+0xae>
 8011b8e:	b1d0      	cbz	r0, 8011bc6 <uxr_serialize_CLIENT_Representation+0xb2>
 8011b90:	46a0      	mov	r8, r4
 8011b92:	f04f 0900 	mov.w	r9, #0
 8011b96:	e002      	b.n	8011b9e <uxr_serialize_CLIENT_Representation+0x8a>
 8011b98:	f108 0808 	add.w	r8, r8, #8
 8011b9c:	b198      	cbz	r0, 8011bc6 <uxr_serialize_CLIENT_Representation+0xb2>
 8011b9e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011ba2:	4628      	mov	r0, r5
 8011ba4:	f003 fffc 	bl	8015ba0 <ucdr_serialize_string>
 8011ba8:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8011bac:	4607      	mov	r7, r0
 8011bae:	4628      	mov	r0, r5
 8011bb0:	f003 fff6 	bl	8015ba0 <ucdr_serialize_string>
 8011bb4:	6923      	ldr	r3, [r4, #16]
 8011bb6:	f109 0901 	add.w	r9, r9, #1
 8011bba:	4038      	ands	r0, r7
 8011bbc:	4599      	cmp	r9, r3
 8011bbe:	b2c0      	uxtb	r0, r0
 8011bc0:	d3ea      	bcc.n	8011b98 <uxr_serialize_CLIENT_Representation+0x84>
 8011bc2:	4006      	ands	r6, r0
 8011bc4:	e7d6      	b.n	8011b74 <uxr_serialize_CLIENT_Representation+0x60>
 8011bc6:	2600      	movs	r6, #0
 8011bc8:	e7d4      	b.n	8011b74 <uxr_serialize_CLIENT_Representation+0x60>
 8011bca:	bf00      	nop

08011bcc <uxr_deserialize_CLIENT_Representation>:
 8011bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bd0:	2204      	movs	r2, #4
 8011bd2:	460c      	mov	r4, r1
 8011bd4:	4605      	mov	r5, r0
 8011bd6:	f003 f88f 	bl	8014cf8 <ucdr_deserialize_array_uint8_t>
 8011bda:	1d21      	adds	r1, r4, #4
 8011bdc:	4607      	mov	r7, r0
 8011bde:	2202      	movs	r2, #2
 8011be0:	4628      	mov	r0, r5
 8011be2:	f003 f889 	bl	8014cf8 <ucdr_deserialize_array_uint8_t>
 8011be6:	1da1      	adds	r1, r4, #6
 8011be8:	4007      	ands	r7, r0
 8011bea:	2202      	movs	r2, #2
 8011bec:	4628      	mov	r0, r5
 8011bee:	f003 f883 	bl	8014cf8 <ucdr_deserialize_array_uint8_t>
 8011bf2:	fa5f f887 	uxtb.w	r8, r7
 8011bf6:	2204      	movs	r2, #4
 8011bf8:	4607      	mov	r7, r0
 8011bfa:	f104 0108 	add.w	r1, r4, #8
 8011bfe:	4628      	mov	r0, r5
 8011c00:	f003 f87a 	bl	8014cf8 <ucdr_deserialize_array_uint8_t>
 8011c04:	ea08 0707 	and.w	r7, r8, r7
 8011c08:	f104 010c 	add.w	r1, r4, #12
 8011c0c:	4680      	mov	r8, r0
 8011c0e:	4628      	mov	r0, r5
 8011c10:	f003 f91c 	bl	8014e4c <ucdr_deserialize_uint8_t>
 8011c14:	ea08 0807 	and.w	r8, r8, r7
 8011c18:	f104 010d 	add.w	r1, r4, #13
 8011c1c:	4607      	mov	r7, r0
 8011c1e:	4628      	mov	r0, r5
 8011c20:	f003 f8e4 	bl	8014dec <ucdr_deserialize_bool>
 8011c24:	7b63      	ldrb	r3, [r4, #13]
 8011c26:	ea08 0707 	and.w	r7, r8, r7
 8011c2a:	ea07 0600 	and.w	r6, r7, r0
 8011c2e:	b93b      	cbnz	r3, 8011c40 <uxr_deserialize_CLIENT_Representation+0x74>
 8011c30:	f104 011c 	add.w	r1, r4, #28
 8011c34:	4628      	mov	r0, r5
 8011c36:	f003 fa1f 	bl	8015078 <ucdr_deserialize_uint16_t>
 8011c3a:	4030      	ands	r0, r6
 8011c3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c40:	f104 0110 	add.w	r1, r4, #16
 8011c44:	4628      	mov	r0, r5
 8011c46:	f003 fc31 	bl	80154ac <ucdr_deserialize_uint32_t>
 8011c4a:	6923      	ldr	r3, [r4, #16]
 8011c4c:	2b01      	cmp	r3, #1
 8011c4e:	d903      	bls.n	8011c58 <uxr_deserialize_CLIENT_Representation+0x8c>
 8011c50:	2301      	movs	r3, #1
 8011c52:	75ab      	strb	r3, [r5, #22]
 8011c54:	2600      	movs	r6, #0
 8011c56:	e7eb      	b.n	8011c30 <uxr_deserialize_CLIENT_Representation+0x64>
 8011c58:	b1fb      	cbz	r3, 8011c9a <uxr_deserialize_CLIENT_Representation+0xce>
 8011c5a:	2800      	cmp	r0, #0
 8011c5c:	d0fa      	beq.n	8011c54 <uxr_deserialize_CLIENT_Representation+0x88>
 8011c5e:	46a0      	mov	r8, r4
 8011c60:	f04f 0900 	mov.w	r9, #0
 8011c64:	e003      	b.n	8011c6e <uxr_deserialize_CLIENT_Representation+0xa2>
 8011c66:	f108 0808 	add.w	r8, r8, #8
 8011c6a:	2800      	cmp	r0, #0
 8011c6c:	d0f2      	beq.n	8011c54 <uxr_deserialize_CLIENT_Representation+0x88>
 8011c6e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011c72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011c76:	4628      	mov	r0, r5
 8011c78:	f003 ffa2 	bl	8015bc0 <ucdr_deserialize_string>
 8011c7c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8011c80:	4607      	mov	r7, r0
 8011c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011c86:	4628      	mov	r0, r5
 8011c88:	f003 ff9a 	bl	8015bc0 <ucdr_deserialize_string>
 8011c8c:	6923      	ldr	r3, [r4, #16]
 8011c8e:	f109 0901 	add.w	r9, r9, #1
 8011c92:	4038      	ands	r0, r7
 8011c94:	4599      	cmp	r9, r3
 8011c96:	b2c0      	uxtb	r0, r0
 8011c98:	d3e5      	bcc.n	8011c66 <uxr_deserialize_CLIENT_Representation+0x9a>
 8011c9a:	4006      	ands	r6, r0
 8011c9c:	e7c8      	b.n	8011c30 <uxr_deserialize_CLIENT_Representation+0x64>
 8011c9e:	bf00      	nop

08011ca0 <uxr_serialize_AGENT_Representation>:
 8011ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ca4:	2204      	movs	r2, #4
 8011ca6:	460c      	mov	r4, r1
 8011ca8:	4605      	mov	r5, r0
 8011caa:	f002 ffc1 	bl	8014c30 <ucdr_serialize_array_uint8_t>
 8011cae:	1d21      	adds	r1, r4, #4
 8011cb0:	4606      	mov	r6, r0
 8011cb2:	2202      	movs	r2, #2
 8011cb4:	4628      	mov	r0, r5
 8011cb6:	f002 ffbb 	bl	8014c30 <ucdr_serialize_array_uint8_t>
 8011cba:	1da1      	adds	r1, r4, #6
 8011cbc:	4006      	ands	r6, r0
 8011cbe:	2202      	movs	r2, #2
 8011cc0:	4628      	mov	r0, r5
 8011cc2:	f002 ffb5 	bl	8014c30 <ucdr_serialize_array_uint8_t>
 8011cc6:	b2f6      	uxtb	r6, r6
 8011cc8:	4603      	mov	r3, r0
 8011cca:	7a21      	ldrb	r1, [r4, #8]
 8011ccc:	4628      	mov	r0, r5
 8011cce:	401e      	ands	r6, r3
 8011cd0:	f003 f876 	bl	8014dc0 <ucdr_serialize_bool>
 8011cd4:	7a23      	ldrb	r3, [r4, #8]
 8011cd6:	ea00 0706 	and.w	r7, r0, r6
 8011cda:	b913      	cbnz	r3, 8011ce2 <uxr_serialize_AGENT_Representation+0x42>
 8011cdc:	4638      	mov	r0, r7
 8011cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ce2:	68e1      	ldr	r1, [r4, #12]
 8011ce4:	4628      	mov	r0, r5
 8011ce6:	f003 fab1 	bl	801524c <ucdr_serialize_uint32_t>
 8011cea:	68e3      	ldr	r3, [r4, #12]
 8011cec:	b313      	cbz	r3, 8011d34 <uxr_serialize_AGENT_Representation+0x94>
 8011cee:	b1e8      	cbz	r0, 8011d2c <uxr_serialize_AGENT_Representation+0x8c>
 8011cf0:	46a0      	mov	r8, r4
 8011cf2:	f04f 0900 	mov.w	r9, #0
 8011cf6:	e002      	b.n	8011cfe <uxr_serialize_AGENT_Representation+0x5e>
 8011cf8:	f108 0808 	add.w	r8, r8, #8
 8011cfc:	b1b3      	cbz	r3, 8011d2c <uxr_serialize_AGENT_Representation+0x8c>
 8011cfe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011d02:	4628      	mov	r0, r5
 8011d04:	f003 ff4c 	bl	8015ba0 <ucdr_serialize_string>
 8011d08:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011d0c:	4606      	mov	r6, r0
 8011d0e:	4628      	mov	r0, r5
 8011d10:	f003 ff46 	bl	8015ba0 <ucdr_serialize_string>
 8011d14:	68e2      	ldr	r2, [r4, #12]
 8011d16:	f109 0901 	add.w	r9, r9, #1
 8011d1a:	ea06 0300 	and.w	r3, r6, r0
 8011d1e:	4591      	cmp	r9, r2
 8011d20:	b2db      	uxtb	r3, r3
 8011d22:	d3e9      	bcc.n	8011cf8 <uxr_serialize_AGENT_Representation+0x58>
 8011d24:	401f      	ands	r7, r3
 8011d26:	4638      	mov	r0, r7
 8011d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d2c:	2700      	movs	r7, #0
 8011d2e:	4638      	mov	r0, r7
 8011d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d34:	4007      	ands	r7, r0
 8011d36:	e7d1      	b.n	8011cdc <uxr_serialize_AGENT_Representation+0x3c>

08011d38 <uxr_serialize_ObjectVariant.part.0>:
 8011d38:	b570      	push	{r4, r5, r6, lr}
 8011d3a:	780b      	ldrb	r3, [r1, #0]
 8011d3c:	3b01      	subs	r3, #1
 8011d3e:	460c      	mov	r4, r1
 8011d40:	4605      	mov	r5, r0
 8011d42:	2b0d      	cmp	r3, #13
 8011d44:	d869      	bhi.n	8011e1a <uxr_serialize_ObjectVariant.part.0+0xe2>
 8011d46:	e8df f003 	tbb	[pc, r3]
 8011d4a:	074a      	.short	0x074a
 8011d4c:	07073030 	.word	0x07073030
 8011d50:	21680707 	.word	0x21680707
 8011d54:	45632121 	.word	0x45632121
 8011d58:	7909      	ldrb	r1, [r1, #4]
 8011d5a:	f003 f861 	bl	8014e20 <ucdr_serialize_uint8_t>
 8011d5e:	4606      	mov	r6, r0
 8011d60:	b158      	cbz	r0, 8011d7a <uxr_serialize_ObjectVariant.part.0+0x42>
 8011d62:	7923      	ldrb	r3, [r4, #4]
 8011d64:	2b02      	cmp	r3, #2
 8011d66:	d003      	beq.n	8011d70 <uxr_serialize_ObjectVariant.part.0+0x38>
 8011d68:	2b03      	cmp	r3, #3
 8011d6a:	d029      	beq.n	8011dc0 <uxr_serialize_ObjectVariant.part.0+0x88>
 8011d6c:	2b01      	cmp	r3, #1
 8011d6e:	d104      	bne.n	8011d7a <uxr_serialize_ObjectVariant.part.0+0x42>
 8011d70:	68a1      	ldr	r1, [r4, #8]
 8011d72:	4628      	mov	r0, r5
 8011d74:	f003 ff14 	bl	8015ba0 <ucdr_serialize_string>
 8011d78:	4606      	mov	r6, r0
 8011d7a:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8011d7e:	4628      	mov	r0, r5
 8011d80:	2202      	movs	r2, #2
 8011d82:	f002 ff55 	bl	8014c30 <ucdr_serialize_array_uint8_t>
 8011d86:	4030      	ands	r0, r6
 8011d88:	b2c0      	uxtb	r0, r0
 8011d8a:	bd70      	pop	{r4, r5, r6, pc}
 8011d8c:	7909      	ldrb	r1, [r1, #4]
 8011d8e:	f003 f847 	bl	8014e20 <ucdr_serialize_uint8_t>
 8011d92:	b1e8      	cbz	r0, 8011dd0 <uxr_serialize_ObjectVariant.part.0+0x98>
 8011d94:	7923      	ldrb	r3, [r4, #4]
 8011d96:	2b01      	cmp	r3, #1
 8011d98:	d001      	beq.n	8011d9e <uxr_serialize_ObjectVariant.part.0+0x66>
 8011d9a:	2b02      	cmp	r3, #2
 8011d9c:	d13d      	bne.n	8011e1a <uxr_serialize_ObjectVariant.part.0+0xe2>
 8011d9e:	68a1      	ldr	r1, [r4, #8]
 8011da0:	4628      	mov	r0, r5
 8011da2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011da6:	f003 befb 	b.w	8015ba0 <ucdr_serialize_string>
 8011daa:	7909      	ldrb	r1, [r1, #4]
 8011dac:	f003 f838 	bl	8014e20 <ucdr_serialize_uint8_t>
 8011db0:	4606      	mov	r6, r0
 8011db2:	2800      	cmp	r0, #0
 8011db4:	d0e1      	beq.n	8011d7a <uxr_serialize_ObjectVariant.part.0+0x42>
 8011db6:	7923      	ldrb	r3, [r4, #4]
 8011db8:	2b02      	cmp	r3, #2
 8011dba:	d0d9      	beq.n	8011d70 <uxr_serialize_ObjectVariant.part.0+0x38>
 8011dbc:	2b03      	cmp	r3, #3
 8011dbe:	d1dc      	bne.n	8011d7a <uxr_serialize_ObjectVariant.part.0+0x42>
 8011dc0:	68a2      	ldr	r2, [r4, #8]
 8011dc2:	f104 010c 	add.w	r1, r4, #12
 8011dc6:	4628      	mov	r0, r5
 8011dc8:	f7fd ff18 	bl	800fbfc <ucdr_serialize_sequence_uint8_t>
 8011dcc:	4606      	mov	r6, r0
 8011dce:	e7d4      	b.n	8011d7a <uxr_serialize_ObjectVariant.part.0+0x42>
 8011dd0:	2000      	movs	r0, #0
 8011dd2:	bd70      	pop	{r4, r5, r6, pc}
 8011dd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011dd8:	3104      	adds	r1, #4
 8011dda:	f7ff be9b 	b.w	8011b14 <uxr_serialize_CLIENT_Representation>
 8011dde:	7909      	ldrb	r1, [r1, #4]
 8011de0:	f003 f81e 	bl	8014e20 <ucdr_serialize_uint8_t>
 8011de4:	4606      	mov	r6, r0
 8011de6:	b158      	cbz	r0, 8011e00 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8011de8:	7923      	ldrb	r3, [r4, #4]
 8011dea:	2b02      	cmp	r3, #2
 8011dec:	d003      	beq.n	8011df6 <uxr_serialize_ObjectVariant.part.0+0xbe>
 8011dee:	2b03      	cmp	r3, #3
 8011df0:	d015      	beq.n	8011e1e <uxr_serialize_ObjectVariant.part.0+0xe6>
 8011df2:	2b01      	cmp	r3, #1
 8011df4:	d104      	bne.n	8011e00 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8011df6:	68a1      	ldr	r1, [r4, #8]
 8011df8:	4628      	mov	r0, r5
 8011dfa:	f003 fed1 	bl	8015ba0 <ucdr_serialize_string>
 8011dfe:	4606      	mov	r6, r0
 8011e00:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8011e04:	4628      	mov	r0, r5
 8011e06:	f003 fd47 	bl	8015898 <ucdr_serialize_int16_t>
 8011e0a:	4030      	ands	r0, r6
 8011e0c:	b2c0      	uxtb	r0, r0
 8011e0e:	bd70      	pop	{r4, r5, r6, pc}
 8011e10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011e14:	3104      	adds	r1, #4
 8011e16:	f7ff bf43 	b.w	8011ca0 <uxr_serialize_AGENT_Representation>
 8011e1a:	2001      	movs	r0, #1
 8011e1c:	bd70      	pop	{r4, r5, r6, pc}
 8011e1e:	68a2      	ldr	r2, [r4, #8]
 8011e20:	f104 010c 	add.w	r1, r4, #12
 8011e24:	4628      	mov	r0, r5
 8011e26:	f7fd fee9 	bl	800fbfc <ucdr_serialize_sequence_uint8_t>
 8011e2a:	4606      	mov	r6, r0
 8011e2c:	e7e8      	b.n	8011e00 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8011e2e:	bf00      	nop

08011e30 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8011e30:	b570      	push	{r4, r5, r6, lr}
 8011e32:	460d      	mov	r5, r1
 8011e34:	7809      	ldrb	r1, [r1, #0]
 8011e36:	4606      	mov	r6, r0
 8011e38:	f002 ffc2 	bl	8014dc0 <ucdr_serialize_bool>
 8011e3c:	782b      	ldrb	r3, [r5, #0]
 8011e3e:	4604      	mov	r4, r0
 8011e40:	b94b      	cbnz	r3, 8011e56 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8011e42:	7a29      	ldrb	r1, [r5, #8]
 8011e44:	4630      	mov	r0, r6
 8011e46:	f002 ffbb 	bl	8014dc0 <ucdr_serialize_bool>
 8011e4a:	7a2b      	ldrb	r3, [r5, #8]
 8011e4c:	4004      	ands	r4, r0
 8011e4e:	b2e4      	uxtb	r4, r4
 8011e50:	b943      	cbnz	r3, 8011e64 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8011e52:	4620      	mov	r0, r4
 8011e54:	bd70      	pop	{r4, r5, r6, pc}
 8011e56:	6869      	ldr	r1, [r5, #4]
 8011e58:	4630      	mov	r0, r6
 8011e5a:	f003 fea1 	bl	8015ba0 <ucdr_serialize_string>
 8011e5e:	4004      	ands	r4, r0
 8011e60:	b2e4      	uxtb	r4, r4
 8011e62:	e7ee      	b.n	8011e42 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8011e64:	68e9      	ldr	r1, [r5, #12]
 8011e66:	4630      	mov	r0, r6
 8011e68:	f003 fe9a 	bl	8015ba0 <ucdr_serialize_string>
 8011e6c:	4004      	ands	r4, r0
 8011e6e:	4620      	mov	r0, r4
 8011e70:	bd70      	pop	{r4, r5, r6, pc}
 8011e72:	bf00      	nop

08011e74 <uxr_serialize_OBJK_Topic_Binary>:
 8011e74:	b570      	push	{r4, r5, r6, lr}
 8011e76:	460d      	mov	r5, r1
 8011e78:	6809      	ldr	r1, [r1, #0]
 8011e7a:	4606      	mov	r6, r0
 8011e7c:	f003 fe90 	bl	8015ba0 <ucdr_serialize_string>
 8011e80:	7929      	ldrb	r1, [r5, #4]
 8011e82:	4604      	mov	r4, r0
 8011e84:	4630      	mov	r0, r6
 8011e86:	f002 ff9b 	bl	8014dc0 <ucdr_serialize_bool>
 8011e8a:	792b      	ldrb	r3, [r5, #4]
 8011e8c:	4004      	ands	r4, r0
 8011e8e:	b2e4      	uxtb	r4, r4
 8011e90:	b943      	cbnz	r3, 8011ea4 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8011e92:	7b29      	ldrb	r1, [r5, #12]
 8011e94:	4630      	mov	r0, r6
 8011e96:	f002 ff93 	bl	8014dc0 <ucdr_serialize_bool>
 8011e9a:	7b2b      	ldrb	r3, [r5, #12]
 8011e9c:	4004      	ands	r4, r0
 8011e9e:	b93b      	cbnz	r3, 8011eb0 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8011ea0:	4620      	mov	r0, r4
 8011ea2:	bd70      	pop	{r4, r5, r6, pc}
 8011ea4:	68a9      	ldr	r1, [r5, #8]
 8011ea6:	4630      	mov	r0, r6
 8011ea8:	f003 fe7a 	bl	8015ba0 <ucdr_serialize_string>
 8011eac:	4004      	ands	r4, r0
 8011eae:	e7f0      	b.n	8011e92 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8011eb0:	6929      	ldr	r1, [r5, #16]
 8011eb2:	4630      	mov	r0, r6
 8011eb4:	f003 fe74 	bl	8015ba0 <ucdr_serialize_string>
 8011eb8:	4004      	ands	r4, r0
 8011eba:	b2e4      	uxtb	r4, r4
 8011ebc:	4620      	mov	r0, r4
 8011ebe:	bd70      	pop	{r4, r5, r6, pc}

08011ec0 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8011ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ec4:	460c      	mov	r4, r1
 8011ec6:	7809      	ldrb	r1, [r1, #0]
 8011ec8:	4606      	mov	r6, r0
 8011eca:	f002 ff79 	bl	8014dc0 <ucdr_serialize_bool>
 8011ece:	7823      	ldrb	r3, [r4, #0]
 8011ed0:	4605      	mov	r5, r0
 8011ed2:	b96b      	cbnz	r3, 8011ef0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8011ed4:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8011ed8:	4630      	mov	r0, r6
 8011eda:	f002 ff71 	bl	8014dc0 <ucdr_serialize_bool>
 8011ede:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8011ee2:	4005      	ands	r5, r0
 8011ee4:	b2ed      	uxtb	r5, r5
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d169      	bne.n	8011fbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8011eea:	4628      	mov	r0, r5
 8011eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ef0:	6861      	ldr	r1, [r4, #4]
 8011ef2:	4630      	mov	r0, r6
 8011ef4:	f003 f9aa 	bl	801524c <ucdr_serialize_uint32_t>
 8011ef8:	6863      	ldr	r3, [r4, #4]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d06b      	beq.n	8011fd6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8011efe:	2800      	cmp	r0, #0
 8011f00:	d067      	beq.n	8011fd2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011f02:	68a1      	ldr	r1, [r4, #8]
 8011f04:	4630      	mov	r0, r6
 8011f06:	f003 fe4b 	bl	8015ba0 <ucdr_serialize_string>
 8011f0a:	6863      	ldr	r3, [r4, #4]
 8011f0c:	2b01      	cmp	r3, #1
 8011f0e:	d953      	bls.n	8011fb8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011f10:	2800      	cmp	r0, #0
 8011f12:	d05e      	beq.n	8011fd2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011f14:	68e1      	ldr	r1, [r4, #12]
 8011f16:	4630      	mov	r0, r6
 8011f18:	f003 fe42 	bl	8015ba0 <ucdr_serialize_string>
 8011f1c:	6863      	ldr	r3, [r4, #4]
 8011f1e:	2b02      	cmp	r3, #2
 8011f20:	d94a      	bls.n	8011fb8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011f22:	2800      	cmp	r0, #0
 8011f24:	d055      	beq.n	8011fd2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011f26:	6921      	ldr	r1, [r4, #16]
 8011f28:	4630      	mov	r0, r6
 8011f2a:	f003 fe39 	bl	8015ba0 <ucdr_serialize_string>
 8011f2e:	6863      	ldr	r3, [r4, #4]
 8011f30:	2b03      	cmp	r3, #3
 8011f32:	d941      	bls.n	8011fb8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011f34:	2800      	cmp	r0, #0
 8011f36:	d04c      	beq.n	8011fd2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011f38:	6961      	ldr	r1, [r4, #20]
 8011f3a:	4630      	mov	r0, r6
 8011f3c:	f003 fe30 	bl	8015ba0 <ucdr_serialize_string>
 8011f40:	6863      	ldr	r3, [r4, #4]
 8011f42:	2b04      	cmp	r3, #4
 8011f44:	d938      	bls.n	8011fb8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011f46:	2800      	cmp	r0, #0
 8011f48:	d043      	beq.n	8011fd2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011f4a:	69a1      	ldr	r1, [r4, #24]
 8011f4c:	4630      	mov	r0, r6
 8011f4e:	f003 fe27 	bl	8015ba0 <ucdr_serialize_string>
 8011f52:	6863      	ldr	r3, [r4, #4]
 8011f54:	2b05      	cmp	r3, #5
 8011f56:	d92f      	bls.n	8011fb8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011f58:	2800      	cmp	r0, #0
 8011f5a:	d03a      	beq.n	8011fd2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011f5c:	69e1      	ldr	r1, [r4, #28]
 8011f5e:	4630      	mov	r0, r6
 8011f60:	f003 fe1e 	bl	8015ba0 <ucdr_serialize_string>
 8011f64:	6863      	ldr	r3, [r4, #4]
 8011f66:	2b06      	cmp	r3, #6
 8011f68:	d926      	bls.n	8011fb8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011f6a:	b390      	cbz	r0, 8011fd2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011f6c:	6a21      	ldr	r1, [r4, #32]
 8011f6e:	4630      	mov	r0, r6
 8011f70:	f003 fe16 	bl	8015ba0 <ucdr_serialize_string>
 8011f74:	6863      	ldr	r3, [r4, #4]
 8011f76:	2b07      	cmp	r3, #7
 8011f78:	d91e      	bls.n	8011fb8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011f7a:	b350      	cbz	r0, 8011fd2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011f7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011f7e:	4630      	mov	r0, r6
 8011f80:	f003 fe0e 	bl	8015ba0 <ucdr_serialize_string>
 8011f84:	6863      	ldr	r3, [r4, #4]
 8011f86:	2b08      	cmp	r3, #8
 8011f88:	d916      	bls.n	8011fb8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011f8a:	b310      	cbz	r0, 8011fd2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011f8c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8011f8e:	4630      	mov	r0, r6
 8011f90:	f003 fe06 	bl	8015ba0 <ucdr_serialize_string>
 8011f94:	6863      	ldr	r3, [r4, #4]
 8011f96:	2b09      	cmp	r3, #9
 8011f98:	d90e      	bls.n	8011fb8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011f9a:	b1d0      	cbz	r0, 8011fd2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011f9c:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8011fa0:	2709      	movs	r7, #9
 8011fa2:	e000      	b.n	8011fa6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8011fa4:	b1a8      	cbz	r0, 8011fd2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011fa6:	f858 1b04 	ldr.w	r1, [r8], #4
 8011faa:	4630      	mov	r0, r6
 8011fac:	f003 fdf8 	bl	8015ba0 <ucdr_serialize_string>
 8011fb0:	6862      	ldr	r2, [r4, #4]
 8011fb2:	3701      	adds	r7, #1
 8011fb4:	4297      	cmp	r7, r2
 8011fb6:	d3f5      	bcc.n	8011fa4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8011fb8:	4005      	ands	r5, r0
 8011fba:	b2ed      	uxtb	r5, r5
 8011fbc:	e78a      	b.n	8011ed4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011fbe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011fc0:	4630      	mov	r0, r6
 8011fc2:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8011fc6:	f7fd fe19 	bl	800fbfc <ucdr_serialize_sequence_uint8_t>
 8011fca:	4005      	ands	r5, r0
 8011fcc:	4628      	mov	r0, r5
 8011fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fd2:	2500      	movs	r5, #0
 8011fd4:	e77e      	b.n	8011ed4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011fd6:	4028      	ands	r0, r5
 8011fd8:	b2c5      	uxtb	r5, r0
 8011fda:	e77b      	b.n	8011ed4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08011fdc <uxr_serialize_OBJK_Publisher_Binary>:
 8011fdc:	b570      	push	{r4, r5, r6, lr}
 8011fde:	460d      	mov	r5, r1
 8011fe0:	7809      	ldrb	r1, [r1, #0]
 8011fe2:	4606      	mov	r6, r0
 8011fe4:	f002 feec 	bl	8014dc0 <ucdr_serialize_bool>
 8011fe8:	782b      	ldrb	r3, [r5, #0]
 8011fea:	4604      	mov	r4, r0
 8011fec:	b94b      	cbnz	r3, 8012002 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8011fee:	7a29      	ldrb	r1, [r5, #8]
 8011ff0:	4630      	mov	r0, r6
 8011ff2:	f002 fee5 	bl	8014dc0 <ucdr_serialize_bool>
 8011ff6:	7a2b      	ldrb	r3, [r5, #8]
 8011ff8:	4004      	ands	r4, r0
 8011ffa:	b2e4      	uxtb	r4, r4
 8011ffc:	b943      	cbnz	r3, 8012010 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8011ffe:	4620      	mov	r0, r4
 8012000:	bd70      	pop	{r4, r5, r6, pc}
 8012002:	6869      	ldr	r1, [r5, #4]
 8012004:	4630      	mov	r0, r6
 8012006:	f003 fdcb 	bl	8015ba0 <ucdr_serialize_string>
 801200a:	4004      	ands	r4, r0
 801200c:	b2e4      	uxtb	r4, r4
 801200e:	e7ee      	b.n	8011fee <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8012010:	f105 010c 	add.w	r1, r5, #12
 8012014:	4630      	mov	r0, r6
 8012016:	f7ff ff53 	bl	8011ec0 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801201a:	4004      	ands	r4, r0
 801201c:	4620      	mov	r0, r4
 801201e:	bd70      	pop	{r4, r5, r6, pc}

08012020 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8012020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012024:	460c      	mov	r4, r1
 8012026:	7809      	ldrb	r1, [r1, #0]
 8012028:	4606      	mov	r6, r0
 801202a:	f002 fec9 	bl	8014dc0 <ucdr_serialize_bool>
 801202e:	7823      	ldrb	r3, [r4, #0]
 8012030:	4605      	mov	r5, r0
 8012032:	b96b      	cbnz	r3, 8012050 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8012034:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8012038:	4630      	mov	r0, r6
 801203a:	f002 fec1 	bl	8014dc0 <ucdr_serialize_bool>
 801203e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012042:	4005      	ands	r5, r0
 8012044:	b2ed      	uxtb	r5, r5
 8012046:	2b00      	cmp	r3, #0
 8012048:	d169      	bne.n	801211e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801204a:	4628      	mov	r0, r5
 801204c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012050:	6861      	ldr	r1, [r4, #4]
 8012052:	4630      	mov	r0, r6
 8012054:	f003 f8fa 	bl	801524c <ucdr_serialize_uint32_t>
 8012058:	6863      	ldr	r3, [r4, #4]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d06b      	beq.n	8012136 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801205e:	2800      	cmp	r0, #0
 8012060:	d067      	beq.n	8012132 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012062:	68a1      	ldr	r1, [r4, #8]
 8012064:	4630      	mov	r0, r6
 8012066:	f003 fd9b 	bl	8015ba0 <ucdr_serialize_string>
 801206a:	6863      	ldr	r3, [r4, #4]
 801206c:	2b01      	cmp	r3, #1
 801206e:	d953      	bls.n	8012118 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012070:	2800      	cmp	r0, #0
 8012072:	d05e      	beq.n	8012132 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012074:	68e1      	ldr	r1, [r4, #12]
 8012076:	4630      	mov	r0, r6
 8012078:	f003 fd92 	bl	8015ba0 <ucdr_serialize_string>
 801207c:	6863      	ldr	r3, [r4, #4]
 801207e:	2b02      	cmp	r3, #2
 8012080:	d94a      	bls.n	8012118 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012082:	2800      	cmp	r0, #0
 8012084:	d055      	beq.n	8012132 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012086:	6921      	ldr	r1, [r4, #16]
 8012088:	4630      	mov	r0, r6
 801208a:	f003 fd89 	bl	8015ba0 <ucdr_serialize_string>
 801208e:	6863      	ldr	r3, [r4, #4]
 8012090:	2b03      	cmp	r3, #3
 8012092:	d941      	bls.n	8012118 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012094:	2800      	cmp	r0, #0
 8012096:	d04c      	beq.n	8012132 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012098:	6961      	ldr	r1, [r4, #20]
 801209a:	4630      	mov	r0, r6
 801209c:	f003 fd80 	bl	8015ba0 <ucdr_serialize_string>
 80120a0:	6863      	ldr	r3, [r4, #4]
 80120a2:	2b04      	cmp	r3, #4
 80120a4:	d938      	bls.n	8012118 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80120a6:	2800      	cmp	r0, #0
 80120a8:	d043      	beq.n	8012132 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80120aa:	69a1      	ldr	r1, [r4, #24]
 80120ac:	4630      	mov	r0, r6
 80120ae:	f003 fd77 	bl	8015ba0 <ucdr_serialize_string>
 80120b2:	6863      	ldr	r3, [r4, #4]
 80120b4:	2b05      	cmp	r3, #5
 80120b6:	d92f      	bls.n	8012118 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80120b8:	2800      	cmp	r0, #0
 80120ba:	d03a      	beq.n	8012132 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80120bc:	69e1      	ldr	r1, [r4, #28]
 80120be:	4630      	mov	r0, r6
 80120c0:	f003 fd6e 	bl	8015ba0 <ucdr_serialize_string>
 80120c4:	6863      	ldr	r3, [r4, #4]
 80120c6:	2b06      	cmp	r3, #6
 80120c8:	d926      	bls.n	8012118 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80120ca:	b390      	cbz	r0, 8012132 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80120cc:	6a21      	ldr	r1, [r4, #32]
 80120ce:	4630      	mov	r0, r6
 80120d0:	f003 fd66 	bl	8015ba0 <ucdr_serialize_string>
 80120d4:	6863      	ldr	r3, [r4, #4]
 80120d6:	2b07      	cmp	r3, #7
 80120d8:	d91e      	bls.n	8012118 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80120da:	b350      	cbz	r0, 8012132 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80120dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80120de:	4630      	mov	r0, r6
 80120e0:	f003 fd5e 	bl	8015ba0 <ucdr_serialize_string>
 80120e4:	6863      	ldr	r3, [r4, #4]
 80120e6:	2b08      	cmp	r3, #8
 80120e8:	d916      	bls.n	8012118 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80120ea:	b310      	cbz	r0, 8012132 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80120ec:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80120ee:	4630      	mov	r0, r6
 80120f0:	f003 fd56 	bl	8015ba0 <ucdr_serialize_string>
 80120f4:	6863      	ldr	r3, [r4, #4]
 80120f6:	2b09      	cmp	r3, #9
 80120f8:	d90e      	bls.n	8012118 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80120fa:	b1d0      	cbz	r0, 8012132 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80120fc:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8012100:	2709      	movs	r7, #9
 8012102:	e000      	b.n	8012106 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8012104:	b1a8      	cbz	r0, 8012132 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012106:	f858 1b04 	ldr.w	r1, [r8], #4
 801210a:	4630      	mov	r0, r6
 801210c:	f003 fd48 	bl	8015ba0 <ucdr_serialize_string>
 8012110:	6862      	ldr	r2, [r4, #4]
 8012112:	3701      	adds	r7, #1
 8012114:	4297      	cmp	r7, r2
 8012116:	d3f5      	bcc.n	8012104 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8012118:	4005      	ands	r5, r0
 801211a:	b2ed      	uxtb	r5, r5
 801211c:	e78a      	b.n	8012034 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801211e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012120:	4630      	mov	r0, r6
 8012122:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8012126:	f7fd fd69 	bl	800fbfc <ucdr_serialize_sequence_uint8_t>
 801212a:	4005      	ands	r5, r0
 801212c:	4628      	mov	r0, r5
 801212e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012132:	2500      	movs	r5, #0
 8012134:	e77e      	b.n	8012034 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012136:	4028      	ands	r0, r5
 8012138:	b2c5      	uxtb	r5, r0
 801213a:	e77b      	b.n	8012034 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0801213c <uxr_serialize_OBJK_Subscriber_Binary>:
 801213c:	b570      	push	{r4, r5, r6, lr}
 801213e:	460d      	mov	r5, r1
 8012140:	7809      	ldrb	r1, [r1, #0]
 8012142:	4606      	mov	r6, r0
 8012144:	f002 fe3c 	bl	8014dc0 <ucdr_serialize_bool>
 8012148:	782b      	ldrb	r3, [r5, #0]
 801214a:	4604      	mov	r4, r0
 801214c:	b94b      	cbnz	r3, 8012162 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801214e:	7a29      	ldrb	r1, [r5, #8]
 8012150:	4630      	mov	r0, r6
 8012152:	f002 fe35 	bl	8014dc0 <ucdr_serialize_bool>
 8012156:	7a2b      	ldrb	r3, [r5, #8]
 8012158:	4004      	ands	r4, r0
 801215a:	b2e4      	uxtb	r4, r4
 801215c:	b943      	cbnz	r3, 8012170 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801215e:	4620      	mov	r0, r4
 8012160:	bd70      	pop	{r4, r5, r6, pc}
 8012162:	6869      	ldr	r1, [r5, #4]
 8012164:	4630      	mov	r0, r6
 8012166:	f003 fd1b 	bl	8015ba0 <ucdr_serialize_string>
 801216a:	4004      	ands	r4, r0
 801216c:	b2e4      	uxtb	r4, r4
 801216e:	e7ee      	b.n	801214e <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8012170:	f105 010c 	add.w	r1, r5, #12
 8012174:	4630      	mov	r0, r6
 8012176:	f7ff ff53 	bl	8012020 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801217a:	4004      	ands	r4, r0
 801217c:	4620      	mov	r0, r4
 801217e:	bd70      	pop	{r4, r5, r6, pc}

08012180 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8012180:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8012184:	4688      	mov	r8, r1
 8012186:	8809      	ldrh	r1, [r1, #0]
 8012188:	4681      	mov	r9, r0
 801218a:	f002 fe75 	bl	8014e78 <ucdr_serialize_uint16_t>
 801218e:	f898 1002 	ldrb.w	r1, [r8, #2]
 8012192:	4606      	mov	r6, r0
 8012194:	4648      	mov	r0, r9
 8012196:	f002 fe13 	bl	8014dc0 <ucdr_serialize_bool>
 801219a:	f898 3002 	ldrb.w	r3, [r8, #2]
 801219e:	4030      	ands	r0, r6
 80121a0:	b2c5      	uxtb	r5, r0
 80121a2:	b9eb      	cbnz	r3, 80121e0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80121a4:	f898 1006 	ldrb.w	r1, [r8, #6]
 80121a8:	4648      	mov	r0, r9
 80121aa:	f002 fe09 	bl	8014dc0 <ucdr_serialize_bool>
 80121ae:	f898 3006 	ldrb.w	r3, [r8, #6]
 80121b2:	4005      	ands	r5, r0
 80121b4:	bb7b      	cbnz	r3, 8012216 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80121b6:	f898 100c 	ldrb.w	r1, [r8, #12]
 80121ba:	4648      	mov	r0, r9
 80121bc:	f002 fe00 	bl	8014dc0 <ucdr_serialize_bool>
 80121c0:	f898 300c 	ldrb.w	r3, [r8, #12]
 80121c4:	4005      	ands	r5, r0
 80121c6:	b9f3      	cbnz	r3, 8012206 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80121c8:	f898 1014 	ldrb.w	r1, [r8, #20]
 80121cc:	4648      	mov	r0, r9
 80121ce:	f002 fdf7 	bl	8014dc0 <ucdr_serialize_bool>
 80121d2:	f898 3014 	ldrb.w	r3, [r8, #20]
 80121d6:	4005      	ands	r5, r0
 80121d8:	b94b      	cbnz	r3, 80121ee <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80121da:	4628      	mov	r0, r5
 80121dc:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80121e0:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80121e4:	4648      	mov	r0, r9
 80121e6:	f002 fe47 	bl	8014e78 <ucdr_serialize_uint16_t>
 80121ea:	4005      	ands	r5, r0
 80121ec:	e7da      	b.n	80121a4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80121ee:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80121f2:	4648      	mov	r0, r9
 80121f4:	f108 011c 	add.w	r1, r8, #28
 80121f8:	f7fd fd00 	bl	800fbfc <ucdr_serialize_sequence_uint8_t>
 80121fc:	4028      	ands	r0, r5
 80121fe:	b2c5      	uxtb	r5, r0
 8012200:	4628      	mov	r0, r5
 8012202:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012206:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801220a:	4648      	mov	r0, r9
 801220c:	f003 f81e 	bl	801524c <ucdr_serialize_uint32_t>
 8012210:	4028      	ands	r0, r5
 8012212:	b2c5      	uxtb	r5, r0
 8012214:	e7d8      	b.n	80121c8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8012216:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801221a:	4648      	mov	r0, r9
 801221c:	f003 f816 	bl	801524c <ucdr_serialize_uint32_t>
 8012220:	4028      	ands	r0, r5
 8012222:	b2c5      	uxtb	r5, r0
 8012224:	e7c7      	b.n	80121b6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8012226:	bf00      	nop

08012228 <uxr_serialize_OBJK_DataReader_Binary>:
 8012228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801222a:	2202      	movs	r2, #2
 801222c:	460c      	mov	r4, r1
 801222e:	4606      	mov	r6, r0
 8012230:	f002 fcfe 	bl	8014c30 <ucdr_serialize_array_uint8_t>
 8012234:	78a1      	ldrb	r1, [r4, #2]
 8012236:	4605      	mov	r5, r0
 8012238:	4630      	mov	r0, r6
 801223a:	f002 fdc1 	bl	8014dc0 <ucdr_serialize_bool>
 801223e:	78a3      	ldrb	r3, [r4, #2]
 8012240:	4005      	ands	r5, r0
 8012242:	b2ed      	uxtb	r5, r5
 8012244:	b90b      	cbnz	r3, 801224a <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8012246:	4628      	mov	r0, r5
 8012248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801224a:	f104 0108 	add.w	r1, r4, #8
 801224e:	4630      	mov	r0, r6
 8012250:	f7ff ff96 	bl	8012180 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012254:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8012258:	4607      	mov	r7, r0
 801225a:	4630      	mov	r0, r6
 801225c:	f002 fdb0 	bl	8014dc0 <ucdr_serialize_bool>
 8012260:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8012264:	4038      	ands	r0, r7
 8012266:	b2c7      	uxtb	r7, r0
 8012268:	b95b      	cbnz	r3, 8012282 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801226a:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 801226e:	4630      	mov	r0, r6
 8012270:	f002 fda6 	bl	8014dc0 <ucdr_serialize_bool>
 8012274:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012278:	4007      	ands	r7, r0
 801227a:	b94b      	cbnz	r3, 8012290 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801227c:	403d      	ands	r5, r7
 801227e:	4628      	mov	r0, r5
 8012280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012282:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8012286:	4630      	mov	r0, r6
 8012288:	f003 fa36 	bl	80156f8 <ucdr_serialize_uint64_t>
 801228c:	4007      	ands	r7, r0
 801228e:	e7ec      	b.n	801226a <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8012290:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012292:	4630      	mov	r0, r6
 8012294:	f003 fc84 	bl	8015ba0 <ucdr_serialize_string>
 8012298:	4007      	ands	r7, r0
 801229a:	b2ff      	uxtb	r7, r7
 801229c:	e7ee      	b.n	801227c <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801229e:	bf00      	nop

080122a0 <uxr_serialize_OBJK_DataWriter_Binary>:
 80122a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122a2:	2202      	movs	r2, #2
 80122a4:	460d      	mov	r5, r1
 80122a6:	4606      	mov	r6, r0
 80122a8:	f002 fcc2 	bl	8014c30 <ucdr_serialize_array_uint8_t>
 80122ac:	78a9      	ldrb	r1, [r5, #2]
 80122ae:	4604      	mov	r4, r0
 80122b0:	4630      	mov	r0, r6
 80122b2:	f002 fd85 	bl	8014dc0 <ucdr_serialize_bool>
 80122b6:	78ab      	ldrb	r3, [r5, #2]
 80122b8:	4004      	ands	r4, r0
 80122ba:	b2e4      	uxtb	r4, r4
 80122bc:	b90b      	cbnz	r3, 80122c2 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80122be:	4620      	mov	r0, r4
 80122c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122c2:	f105 0108 	add.w	r1, r5, #8
 80122c6:	4630      	mov	r0, r6
 80122c8:	f7ff ff5a 	bl	8012180 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80122cc:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 80122d0:	4607      	mov	r7, r0
 80122d2:	4630      	mov	r0, r6
 80122d4:	f002 fd74 	bl	8014dc0 <ucdr_serialize_bool>
 80122d8:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80122dc:	4007      	ands	r7, r0
 80122de:	b2ff      	uxtb	r7, r7
 80122e0:	b913      	cbnz	r3, 80122e8 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80122e2:	403c      	ands	r4, r7
 80122e4:	4620      	mov	r0, r4
 80122e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122e8:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 80122ec:	4630      	mov	r0, r6
 80122ee:	f003 fa03 	bl	80156f8 <ucdr_serialize_uint64_t>
 80122f2:	4007      	ands	r7, r0
 80122f4:	e7f5      	b.n	80122e2 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80122f6:	bf00      	nop

080122f8 <uxr_deserialize_ObjectVariant>:
 80122f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122fa:	4605      	mov	r5, r0
 80122fc:	460e      	mov	r6, r1
 80122fe:	f002 fda5 	bl	8014e4c <ucdr_deserialize_uint8_t>
 8012302:	b320      	cbz	r0, 801234e <uxr_deserialize_ObjectVariant+0x56>
 8012304:	7833      	ldrb	r3, [r6, #0]
 8012306:	3b01      	subs	r3, #1
 8012308:	4604      	mov	r4, r0
 801230a:	2b0d      	cmp	r3, #13
 801230c:	d81d      	bhi.n	801234a <uxr_deserialize_ObjectVariant+0x52>
 801230e:	e8df f003 	tbb	[pc, r3]
 8012312:	2107      	.short	0x2107
 8012314:	21214b4b 	.word	0x21214b4b
 8012318:	381c2121 	.word	0x381c2121
 801231c:	876a3838 	.word	0x876a3838
 8012320:	1d31      	adds	r1, r6, #4
 8012322:	4628      	mov	r0, r5
 8012324:	f002 fd92 	bl	8014e4c <ucdr_deserialize_uint8_t>
 8012328:	4607      	mov	r7, r0
 801232a:	b138      	cbz	r0, 801233c <uxr_deserialize_ObjectVariant+0x44>
 801232c:	7933      	ldrb	r3, [r6, #4]
 801232e:	2b02      	cmp	r3, #2
 8012330:	d07c      	beq.n	801242c <uxr_deserialize_ObjectVariant+0x134>
 8012332:	2b03      	cmp	r3, #3
 8012334:	f000 8082 	beq.w	801243c <uxr_deserialize_ObjectVariant+0x144>
 8012338:	2b01      	cmp	r3, #1
 801233a:	d077      	beq.n	801242c <uxr_deserialize_ObjectVariant+0x134>
 801233c:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8012340:	4628      	mov	r0, r5
 8012342:	f003 fb29 	bl	8015998 <ucdr_deserialize_int16_t>
 8012346:	4038      	ands	r0, r7
 8012348:	b2c4      	uxtb	r4, r0
 801234a:	4620      	mov	r0, r4
 801234c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801234e:	2400      	movs	r4, #0
 8012350:	4620      	mov	r0, r4
 8012352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012354:	1d31      	adds	r1, r6, #4
 8012356:	4628      	mov	r0, r5
 8012358:	f002 fd78 	bl	8014e4c <ucdr_deserialize_uint8_t>
 801235c:	4607      	mov	r7, r0
 801235e:	b130      	cbz	r0, 801236e <uxr_deserialize_ObjectVariant+0x76>
 8012360:	7933      	ldrb	r3, [r6, #4]
 8012362:	2b02      	cmp	r3, #2
 8012364:	d037      	beq.n	80123d6 <uxr_deserialize_ObjectVariant+0xde>
 8012366:	2b03      	cmp	r3, #3
 8012368:	d02a      	beq.n	80123c0 <uxr_deserialize_ObjectVariant+0xc8>
 801236a:	2b01      	cmp	r3, #1
 801236c:	d033      	beq.n	80123d6 <uxr_deserialize_ObjectVariant+0xde>
 801236e:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8012372:	4628      	mov	r0, r5
 8012374:	2202      	movs	r2, #2
 8012376:	f002 fcbf 	bl	8014cf8 <ucdr_deserialize_array_uint8_t>
 801237a:	4038      	ands	r0, r7
 801237c:	b2c4      	uxtb	r4, r0
 801237e:	4620      	mov	r0, r4
 8012380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012382:	1d31      	adds	r1, r6, #4
 8012384:	4628      	mov	r0, r5
 8012386:	f002 fd61 	bl	8014e4c <ucdr_deserialize_uint8_t>
 801238a:	2800      	cmp	r0, #0
 801238c:	d0df      	beq.n	801234e <uxr_deserialize_ObjectVariant+0x56>
 801238e:	7933      	ldrb	r3, [r6, #4]
 8012390:	2b01      	cmp	r3, #1
 8012392:	d001      	beq.n	8012398 <uxr_deserialize_ObjectVariant+0xa0>
 8012394:	2b02      	cmp	r3, #2
 8012396:	d1d8      	bne.n	801234a <uxr_deserialize_ObjectVariant+0x52>
 8012398:	68b1      	ldr	r1, [r6, #8]
 801239a:	4628      	mov	r0, r5
 801239c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80123a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80123a4:	f003 bc0c 	b.w	8015bc0 <ucdr_deserialize_string>
 80123a8:	1d31      	adds	r1, r6, #4
 80123aa:	4628      	mov	r0, r5
 80123ac:	f002 fd4e 	bl	8014e4c <ucdr_deserialize_uint8_t>
 80123b0:	4607      	mov	r7, r0
 80123b2:	2800      	cmp	r0, #0
 80123b4:	d0db      	beq.n	801236e <uxr_deserialize_ObjectVariant+0x76>
 80123b6:	7933      	ldrb	r3, [r6, #4]
 80123b8:	2b02      	cmp	r3, #2
 80123ba:	d00c      	beq.n	80123d6 <uxr_deserialize_ObjectVariant+0xde>
 80123bc:	2b03      	cmp	r3, #3
 80123be:	d1d6      	bne.n	801236e <uxr_deserialize_ObjectVariant+0x76>
 80123c0:	f106 0308 	add.w	r3, r6, #8
 80123c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80123c8:	f106 010c 	add.w	r1, r6, #12
 80123cc:	4628      	mov	r0, r5
 80123ce:	f7fd fc27 	bl	800fc20 <ucdr_deserialize_sequence_uint8_t>
 80123d2:	4607      	mov	r7, r0
 80123d4:	e7cb      	b.n	801236e <uxr_deserialize_ObjectVariant+0x76>
 80123d6:	68b1      	ldr	r1, [r6, #8]
 80123d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80123dc:	4628      	mov	r0, r5
 80123de:	f003 fbef 	bl	8015bc0 <ucdr_deserialize_string>
 80123e2:	4607      	mov	r7, r0
 80123e4:	e7c3      	b.n	801236e <uxr_deserialize_ObjectVariant+0x76>
 80123e6:	2204      	movs	r2, #4
 80123e8:	18b1      	adds	r1, r6, r2
 80123ea:	4628      	mov	r0, r5
 80123ec:	f002 fc84 	bl	8014cf8 <ucdr_deserialize_array_uint8_t>
 80123f0:	2202      	movs	r2, #2
 80123f2:	4604      	mov	r4, r0
 80123f4:	f106 0108 	add.w	r1, r6, #8
 80123f8:	4628      	mov	r0, r5
 80123fa:	f002 fc7d 	bl	8014cf8 <ucdr_deserialize_array_uint8_t>
 80123fe:	2202      	movs	r2, #2
 8012400:	4004      	ands	r4, r0
 8012402:	f106 010a 	add.w	r1, r6, #10
 8012406:	4628      	mov	r0, r5
 8012408:	f002 fc76 	bl	8014cf8 <ucdr_deserialize_array_uint8_t>
 801240c:	b2e4      	uxtb	r4, r4
 801240e:	4603      	mov	r3, r0
 8012410:	f106 010c 	add.w	r1, r6, #12
 8012414:	4628      	mov	r0, r5
 8012416:	401c      	ands	r4, r3
 8012418:	f002 fce8 	bl	8014dec <ucdr_deserialize_bool>
 801241c:	4004      	ands	r4, r0
 801241e:	e794      	b.n	801234a <uxr_deserialize_ObjectVariant+0x52>
 8012420:	1d31      	adds	r1, r6, #4
 8012422:	4628      	mov	r0, r5
 8012424:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012428:	f7ff bbd0 	b.w	8011bcc <uxr_deserialize_CLIENT_Representation>
 801242c:	68b1      	ldr	r1, [r6, #8]
 801242e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012432:	4628      	mov	r0, r5
 8012434:	f003 fbc4 	bl	8015bc0 <ucdr_deserialize_string>
 8012438:	4607      	mov	r7, r0
 801243a:	e77f      	b.n	801233c <uxr_deserialize_ObjectVariant+0x44>
 801243c:	f106 0308 	add.w	r3, r6, #8
 8012440:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012444:	f106 010c 	add.w	r1, r6, #12
 8012448:	4628      	mov	r0, r5
 801244a:	f7fd fbe9 	bl	800fc20 <ucdr_deserialize_sequence_uint8_t>
 801244e:	4607      	mov	r7, r0
 8012450:	e774      	b.n	801233c <uxr_deserialize_ObjectVariant+0x44>
 8012452:	bf00      	nop

08012454 <uxr_deserialize_BaseObjectRequest>:
 8012454:	b570      	push	{r4, r5, r6, lr}
 8012456:	2202      	movs	r2, #2
 8012458:	4605      	mov	r5, r0
 801245a:	460e      	mov	r6, r1
 801245c:	f002 fc4c 	bl	8014cf8 <ucdr_deserialize_array_uint8_t>
 8012460:	1cb1      	adds	r1, r6, #2
 8012462:	4604      	mov	r4, r0
 8012464:	2202      	movs	r2, #2
 8012466:	4628      	mov	r0, r5
 8012468:	f002 fc46 	bl	8014cf8 <ucdr_deserialize_array_uint8_t>
 801246c:	4020      	ands	r0, r4
 801246e:	b2c0      	uxtb	r0, r0
 8012470:	bd70      	pop	{r4, r5, r6, pc}
 8012472:	bf00      	nop

08012474 <uxr_serialize_AGENT_ActivityInfo>:
 8012474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012478:	460e      	mov	r6, r1
 801247a:	f9b1 1000 	ldrsh.w	r1, [r1]
 801247e:	4607      	mov	r7, r0
 8012480:	f003 fa0a 	bl	8015898 <ucdr_serialize_int16_t>
 8012484:	6871      	ldr	r1, [r6, #4]
 8012486:	4680      	mov	r8, r0
 8012488:	4638      	mov	r0, r7
 801248a:	f002 fedf 	bl	801524c <ucdr_serialize_uint32_t>
 801248e:	6873      	ldr	r3, [r6, #4]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d06a      	beq.n	801256a <uxr_serialize_AGENT_ActivityInfo+0xf6>
 8012494:	b318      	cbz	r0, 80124de <uxr_serialize_AGENT_ActivityInfo+0x6a>
 8012496:	f106 0904 	add.w	r9, r6, #4
 801249a:	2500      	movs	r5, #0
 801249c:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 80124a0:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 80124a4:	7a21      	ldrb	r1, [r4, #8]
 80124a6:	4638      	mov	r0, r7
 80124a8:	f002 fcba 	bl	8014e20 <ucdr_serialize_uint8_t>
 80124ac:	2800      	cmp	r0, #0
 80124ae:	d051      	beq.n	8012554 <uxr_serialize_AGENT_ActivityInfo+0xe0>
 80124b0:	7a23      	ldrb	r3, [r4, #8]
 80124b2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80124b6:	00c9      	lsls	r1, r1, #3
 80124b8:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 80124bc:	2b03      	cmp	r3, #3
 80124be:	d859      	bhi.n	8012574 <uxr_serialize_AGENT_ActivityInfo+0x100>
 80124c0:	e8df f003 	tbb	[pc, r3]
 80124c4:	02122436 	.word	0x02122436
 80124c8:	4449      	add	r1, r9
 80124ca:	4638      	mov	r0, r7
 80124cc:	6889      	ldr	r1, [r1, #8]
 80124ce:	f003 fb67 	bl	8015ba0 <ucdr_serialize_string>
 80124d2:	6873      	ldr	r3, [r6, #4]
 80124d4:	3501      	adds	r5, #1
 80124d6:	429d      	cmp	r5, r3
 80124d8:	d240      	bcs.n	801255c <uxr_serialize_AGENT_ActivityInfo+0xe8>
 80124da:	2800      	cmp	r0, #0
 80124dc:	d1de      	bne.n	801249c <uxr_serialize_AGENT_ActivityInfo+0x28>
 80124de:	f04f 0800 	mov.w	r8, #0
 80124e2:	4640      	mov	r0, r8
 80124e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124e8:	3108      	adds	r1, #8
 80124ea:	4449      	add	r1, r9
 80124ec:	2210      	movs	r2, #16
 80124ee:	4638      	mov	r0, r7
 80124f0:	f002 fb9e 	bl	8014c30 <ucdr_serialize_array_uint8_t>
 80124f4:	44aa      	add	sl, r5
 80124f6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80124fa:	4604      	mov	r4, r0
 80124fc:	f8da 101c 	ldr.w	r1, [sl, #28]
 8012500:	4638      	mov	r0, r7
 8012502:	f002 fea3 	bl	801524c <ucdr_serialize_uint32_t>
 8012506:	4020      	ands	r0, r4
 8012508:	b2c0      	uxtb	r0, r0
 801250a:	e7e2      	b.n	80124d2 <uxr_serialize_AGENT_ActivityInfo+0x5e>
 801250c:	3108      	adds	r1, #8
 801250e:	4449      	add	r1, r9
 8012510:	2204      	movs	r2, #4
 8012512:	4638      	mov	r0, r7
 8012514:	f002 fb8c 	bl	8014c30 <ucdr_serialize_array_uint8_t>
 8012518:	44aa      	add	sl, r5
 801251a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801251e:	4604      	mov	r4, r0
 8012520:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 8012524:	4638      	mov	r0, r7
 8012526:	f002 fca7 	bl	8014e78 <ucdr_serialize_uint16_t>
 801252a:	4020      	ands	r0, r4
 801252c:	b2c0      	uxtb	r0, r0
 801252e:	e7d0      	b.n	80124d2 <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8012530:	3108      	adds	r1, #8
 8012532:	4449      	add	r1, r9
 8012534:	2202      	movs	r2, #2
 8012536:	4638      	mov	r0, r7
 8012538:	f002 fb7a 	bl	8014c30 <ucdr_serialize_array_uint8_t>
 801253c:	44aa      	add	sl, r5
 801253e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8012542:	4604      	mov	r4, r0
 8012544:	f89a 100e 	ldrb.w	r1, [sl, #14]
 8012548:	4638      	mov	r0, r7
 801254a:	f002 fc69 	bl	8014e20 <ucdr_serialize_uint8_t>
 801254e:	4020      	ands	r0, r4
 8012550:	b2c0      	uxtb	r0, r0
 8012552:	e7be      	b.n	80124d2 <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8012554:	6873      	ldr	r3, [r6, #4]
 8012556:	3501      	adds	r5, #1
 8012558:	429d      	cmp	r5, r3
 801255a:	d3c0      	bcc.n	80124de <uxr_serialize_AGENT_ActivityInfo+0x6a>
 801255c:	ea08 0000 	and.w	r0, r8, r0
 8012560:	fa5f f880 	uxtb.w	r8, r0
 8012564:	4640      	mov	r0, r8
 8012566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801256a:	ea08 0800 	and.w	r8, r8, r0
 801256e:	fa5f f888 	uxtb.w	r8, r8
 8012572:	e7b6      	b.n	80124e2 <uxr_serialize_AGENT_ActivityInfo+0x6e>
 8012574:	6873      	ldr	r3, [r6, #4]
 8012576:	3501      	adds	r5, #1
 8012578:	42ab      	cmp	r3, r5
 801257a:	f104 0418 	add.w	r4, r4, #24
 801257e:	d891      	bhi.n	80124a4 <uxr_serialize_AGENT_ActivityInfo+0x30>
 8012580:	e7af      	b.n	80124e2 <uxr_serialize_AGENT_ActivityInfo+0x6e>
 8012582:	bf00      	nop

08012584 <uxr_serialize_ActivityInfoVariant>:
 8012584:	b570      	push	{r4, r5, r6, lr}
 8012586:	460d      	mov	r5, r1
 8012588:	7809      	ldrb	r1, [r1, #0]
 801258a:	4606      	mov	r6, r0
 801258c:	f002 fc48 	bl	8014e20 <ucdr_serialize_uint8_t>
 8012590:	b130      	cbz	r0, 80125a0 <uxr_serialize_ActivityInfoVariant+0x1c>
 8012592:	782b      	ldrb	r3, [r5, #0]
 8012594:	2b06      	cmp	r3, #6
 8012596:	d019      	beq.n	80125cc <uxr_serialize_ActivityInfoVariant+0x48>
 8012598:	2b0d      	cmp	r3, #13
 801259a:	d010      	beq.n	80125be <uxr_serialize_ActivityInfoVariant+0x3a>
 801259c:	2b05      	cmp	r3, #5
 801259e:	d000      	beq.n	80125a2 <uxr_serialize_ActivityInfoVariant+0x1e>
 80125a0:	bd70      	pop	{r4, r5, r6, pc}
 80125a2:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80125a6:	4630      	mov	r0, r6
 80125a8:	f003 f976 	bl	8015898 <ucdr_serialize_int16_t>
 80125ac:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80125b0:	4604      	mov	r4, r0
 80125b2:	4630      	mov	r0, r6
 80125b4:	f003 f8a0 	bl	80156f8 <ucdr_serialize_uint64_t>
 80125b8:	4020      	ands	r0, r4
 80125ba:	b2c0      	uxtb	r0, r0
 80125bc:	bd70      	pop	{r4, r5, r6, pc}
 80125be:	f105 0108 	add.w	r1, r5, #8
 80125c2:	4630      	mov	r0, r6
 80125c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80125c8:	f7ff bf54 	b.w	8012474 <uxr_serialize_AGENT_ActivityInfo>
 80125cc:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80125d0:	4630      	mov	r0, r6
 80125d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80125d6:	f003 b95f 	b.w	8015898 <ucdr_serialize_int16_t>
 80125da:	bf00      	nop

080125dc <uxr_deserialize_BaseObjectReply>:
 80125dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125e0:	2202      	movs	r2, #2
 80125e2:	4606      	mov	r6, r0
 80125e4:	460f      	mov	r7, r1
 80125e6:	f002 fb87 	bl	8014cf8 <ucdr_deserialize_array_uint8_t>
 80125ea:	2202      	movs	r2, #2
 80125ec:	1cb9      	adds	r1, r7, #2
 80125ee:	4605      	mov	r5, r0
 80125f0:	4630      	mov	r0, r6
 80125f2:	f002 fb81 	bl	8014cf8 <ucdr_deserialize_array_uint8_t>
 80125f6:	1d39      	adds	r1, r7, #4
 80125f8:	4680      	mov	r8, r0
 80125fa:	4630      	mov	r0, r6
 80125fc:	f002 fc26 	bl	8014e4c <ucdr_deserialize_uint8_t>
 8012600:	1d79      	adds	r1, r7, #5
 8012602:	4604      	mov	r4, r0
 8012604:	4630      	mov	r0, r6
 8012606:	f002 fc21 	bl	8014e4c <ucdr_deserialize_uint8_t>
 801260a:	ea05 0508 	and.w	r5, r5, r8
 801260e:	402c      	ands	r4, r5
 8012610:	4020      	ands	r0, r4
 8012612:	b2c0      	uxtb	r0, r0
 8012614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012618 <uxr_serialize_ReadSpecification>:
 8012618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801261c:	460e      	mov	r6, r1
 801261e:	7809      	ldrb	r1, [r1, #0]
 8012620:	4607      	mov	r7, r0
 8012622:	f002 fbfd 	bl	8014e20 <ucdr_serialize_uint8_t>
 8012626:	7871      	ldrb	r1, [r6, #1]
 8012628:	4604      	mov	r4, r0
 801262a:	4638      	mov	r0, r7
 801262c:	f002 fbf8 	bl	8014e20 <ucdr_serialize_uint8_t>
 8012630:	78b1      	ldrb	r1, [r6, #2]
 8012632:	4004      	ands	r4, r0
 8012634:	4638      	mov	r0, r7
 8012636:	f002 fbc3 	bl	8014dc0 <ucdr_serialize_bool>
 801263a:	78b3      	ldrb	r3, [r6, #2]
 801263c:	b2e4      	uxtb	r4, r4
 801263e:	4004      	ands	r4, r0
 8012640:	b94b      	cbnz	r3, 8012656 <uxr_serialize_ReadSpecification+0x3e>
 8012642:	7a31      	ldrb	r1, [r6, #8]
 8012644:	4638      	mov	r0, r7
 8012646:	f002 fbbb 	bl	8014dc0 <ucdr_serialize_bool>
 801264a:	7a33      	ldrb	r3, [r6, #8]
 801264c:	4004      	ands	r4, r0
 801264e:	b943      	cbnz	r3, 8012662 <uxr_serialize_ReadSpecification+0x4a>
 8012650:	4620      	mov	r0, r4
 8012652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012656:	6871      	ldr	r1, [r6, #4]
 8012658:	4638      	mov	r0, r7
 801265a:	f003 faa1 	bl	8015ba0 <ucdr_serialize_string>
 801265e:	4004      	ands	r4, r0
 8012660:	e7ef      	b.n	8012642 <uxr_serialize_ReadSpecification+0x2a>
 8012662:	8971      	ldrh	r1, [r6, #10]
 8012664:	4638      	mov	r0, r7
 8012666:	f002 fc07 	bl	8014e78 <ucdr_serialize_uint16_t>
 801266a:	89b1      	ldrh	r1, [r6, #12]
 801266c:	4605      	mov	r5, r0
 801266e:	4638      	mov	r0, r7
 8012670:	f002 fc02 	bl	8014e78 <ucdr_serialize_uint16_t>
 8012674:	89f1      	ldrh	r1, [r6, #14]
 8012676:	4005      	ands	r5, r0
 8012678:	4638      	mov	r0, r7
 801267a:	f002 fbfd 	bl	8014e78 <ucdr_serialize_uint16_t>
 801267e:	8a31      	ldrh	r1, [r6, #16]
 8012680:	4680      	mov	r8, r0
 8012682:	4638      	mov	r0, r7
 8012684:	f002 fbf8 	bl	8014e78 <ucdr_serialize_uint16_t>
 8012688:	b2ed      	uxtb	r5, r5
 801268a:	4025      	ands	r5, r4
 801268c:	ea08 0505 	and.w	r5, r8, r5
 8012690:	ea00 0405 	and.w	r4, r0, r5
 8012694:	4620      	mov	r0, r4
 8012696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801269a:	bf00      	nop

0801269c <uxr_serialize_CREATE_CLIENT_Payload>:
 801269c:	f7ff ba3a 	b.w	8011b14 <uxr_serialize_CLIENT_Representation>

080126a0 <uxr_serialize_CREATE_Payload>:
 80126a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126a2:	2202      	movs	r2, #2
 80126a4:	4606      	mov	r6, r0
 80126a6:	460d      	mov	r5, r1
 80126a8:	f002 fac2 	bl	8014c30 <ucdr_serialize_array_uint8_t>
 80126ac:	1ca9      	adds	r1, r5, #2
 80126ae:	4604      	mov	r4, r0
 80126b0:	2202      	movs	r2, #2
 80126b2:	4630      	mov	r0, r6
 80126b4:	f002 fabc 	bl	8014c30 <ucdr_serialize_array_uint8_t>
 80126b8:	7929      	ldrb	r1, [r5, #4]
 80126ba:	4607      	mov	r7, r0
 80126bc:	4630      	mov	r0, r6
 80126be:	f002 fbaf 	bl	8014e20 <ucdr_serialize_uint8_t>
 80126c2:	b328      	cbz	r0, 8012710 <uxr_serialize_CREATE_Payload+0x70>
 80126c4:	792b      	ldrb	r3, [r5, #4]
 80126c6:	403c      	ands	r4, r7
 80126c8:	3b01      	subs	r3, #1
 80126ca:	b2e4      	uxtb	r4, r4
 80126cc:	2b0d      	cmp	r3, #13
 80126ce:	d81d      	bhi.n	801270c <uxr_serialize_CREATE_Payload+0x6c>
 80126d0:	e8df f003 	tbb	[pc, r3]
 80126d4:	32320753 	.word	0x32320753
 80126d8:	07070707 	.word	0x07070707
 80126dc:	2121211c 	.word	0x2121211c
 80126e0:	684c      	.short	0x684c
 80126e2:	7a29      	ldrb	r1, [r5, #8]
 80126e4:	4630      	mov	r0, r6
 80126e6:	f002 fb9b 	bl	8014e20 <ucdr_serialize_uint8_t>
 80126ea:	4607      	mov	r7, r0
 80126ec:	b130      	cbz	r0, 80126fc <uxr_serialize_CREATE_Payload+0x5c>
 80126ee:	7a2b      	ldrb	r3, [r5, #8]
 80126f0:	2b02      	cmp	r3, #2
 80126f2:	d035      	beq.n	8012760 <uxr_serialize_CREATE_Payload+0xc0>
 80126f4:	2b03      	cmp	r3, #3
 80126f6:	d02b      	beq.n	8012750 <uxr_serialize_CREATE_Payload+0xb0>
 80126f8:	2b01      	cmp	r3, #1
 80126fa:	d031      	beq.n	8012760 <uxr_serialize_CREATE_Payload+0xc0>
 80126fc:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8012700:	4630      	mov	r0, r6
 8012702:	2202      	movs	r2, #2
 8012704:	f002 fa94 	bl	8014c30 <ucdr_serialize_array_uint8_t>
 8012708:	4038      	ands	r0, r7
 801270a:	4004      	ands	r4, r0
 801270c:	4620      	mov	r0, r4
 801270e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012710:	2400      	movs	r4, #0
 8012712:	4620      	mov	r0, r4
 8012714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012716:	7a29      	ldrb	r1, [r5, #8]
 8012718:	4630      	mov	r0, r6
 801271a:	f002 fb81 	bl	8014e20 <ucdr_serialize_uint8_t>
 801271e:	2800      	cmp	r0, #0
 8012720:	d0f6      	beq.n	8012710 <uxr_serialize_CREATE_Payload+0x70>
 8012722:	7a2b      	ldrb	r3, [r5, #8]
 8012724:	2b01      	cmp	r3, #1
 8012726:	d001      	beq.n	801272c <uxr_serialize_CREATE_Payload+0x8c>
 8012728:	2b02      	cmp	r3, #2
 801272a:	d1ef      	bne.n	801270c <uxr_serialize_CREATE_Payload+0x6c>
 801272c:	68e9      	ldr	r1, [r5, #12]
 801272e:	4630      	mov	r0, r6
 8012730:	f003 fa36 	bl	8015ba0 <ucdr_serialize_string>
 8012734:	4004      	ands	r4, r0
 8012736:	e7e9      	b.n	801270c <uxr_serialize_CREATE_Payload+0x6c>
 8012738:	7a29      	ldrb	r1, [r5, #8]
 801273a:	4630      	mov	r0, r6
 801273c:	f002 fb70 	bl	8014e20 <ucdr_serialize_uint8_t>
 8012740:	4607      	mov	r7, r0
 8012742:	2800      	cmp	r0, #0
 8012744:	d0da      	beq.n	80126fc <uxr_serialize_CREATE_Payload+0x5c>
 8012746:	7a2b      	ldrb	r3, [r5, #8]
 8012748:	2b02      	cmp	r3, #2
 801274a:	d009      	beq.n	8012760 <uxr_serialize_CREATE_Payload+0xc0>
 801274c:	2b03      	cmp	r3, #3
 801274e:	d1d5      	bne.n	80126fc <uxr_serialize_CREATE_Payload+0x5c>
 8012750:	68ea      	ldr	r2, [r5, #12]
 8012752:	f105 0110 	add.w	r1, r5, #16
 8012756:	4630      	mov	r0, r6
 8012758:	f7fd fa50 	bl	800fbfc <ucdr_serialize_sequence_uint8_t>
 801275c:	4607      	mov	r7, r0
 801275e:	e7cd      	b.n	80126fc <uxr_serialize_CREATE_Payload+0x5c>
 8012760:	68e9      	ldr	r1, [r5, #12]
 8012762:	4630      	mov	r0, r6
 8012764:	f003 fa1c 	bl	8015ba0 <ucdr_serialize_string>
 8012768:	4607      	mov	r7, r0
 801276a:	e7c7      	b.n	80126fc <uxr_serialize_CREATE_Payload+0x5c>
 801276c:	f105 0108 	add.w	r1, r5, #8
 8012770:	4630      	mov	r0, r6
 8012772:	f7ff fa95 	bl	8011ca0 <uxr_serialize_AGENT_Representation>
 8012776:	4004      	ands	r4, r0
 8012778:	e7c8      	b.n	801270c <uxr_serialize_CREATE_Payload+0x6c>
 801277a:	7a29      	ldrb	r1, [r5, #8]
 801277c:	4630      	mov	r0, r6
 801277e:	f002 fb4f 	bl	8014e20 <ucdr_serialize_uint8_t>
 8012782:	4607      	mov	r7, r0
 8012784:	b130      	cbz	r0, 8012794 <uxr_serialize_CREATE_Payload+0xf4>
 8012786:	7a2b      	ldrb	r3, [r5, #8]
 8012788:	2b02      	cmp	r3, #2
 801278a:	d012      	beq.n	80127b2 <uxr_serialize_CREATE_Payload+0x112>
 801278c:	2b03      	cmp	r3, #3
 801278e:	d016      	beq.n	80127be <uxr_serialize_CREATE_Payload+0x11e>
 8012790:	2b01      	cmp	r3, #1
 8012792:	d00e      	beq.n	80127b2 <uxr_serialize_CREATE_Payload+0x112>
 8012794:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 8012798:	4630      	mov	r0, r6
 801279a:	f003 f87d 	bl	8015898 <ucdr_serialize_int16_t>
 801279e:	4038      	ands	r0, r7
 80127a0:	4004      	ands	r4, r0
 80127a2:	e7b3      	b.n	801270c <uxr_serialize_CREATE_Payload+0x6c>
 80127a4:	f105 0108 	add.w	r1, r5, #8
 80127a8:	4630      	mov	r0, r6
 80127aa:	f7ff f9b3 	bl	8011b14 <uxr_serialize_CLIENT_Representation>
 80127ae:	4004      	ands	r4, r0
 80127b0:	e7ac      	b.n	801270c <uxr_serialize_CREATE_Payload+0x6c>
 80127b2:	68e9      	ldr	r1, [r5, #12]
 80127b4:	4630      	mov	r0, r6
 80127b6:	f003 f9f3 	bl	8015ba0 <ucdr_serialize_string>
 80127ba:	4607      	mov	r7, r0
 80127bc:	e7ea      	b.n	8012794 <uxr_serialize_CREATE_Payload+0xf4>
 80127be:	68ea      	ldr	r2, [r5, #12]
 80127c0:	f105 0110 	add.w	r1, r5, #16
 80127c4:	4630      	mov	r0, r6
 80127c6:	f7fd fa19 	bl	800fbfc <ucdr_serialize_sequence_uint8_t>
 80127ca:	4607      	mov	r7, r0
 80127cc:	e7e2      	b.n	8012794 <uxr_serialize_CREATE_Payload+0xf4>
 80127ce:	bf00      	nop

080127d0 <uxr_deserialize_GET_INFO_Payload>:
 80127d0:	b570      	push	{r4, r5, r6, lr}
 80127d2:	2202      	movs	r2, #2
 80127d4:	4605      	mov	r5, r0
 80127d6:	460e      	mov	r6, r1
 80127d8:	f002 fa8e 	bl	8014cf8 <ucdr_deserialize_array_uint8_t>
 80127dc:	1cb1      	adds	r1, r6, #2
 80127de:	2202      	movs	r2, #2
 80127e0:	4604      	mov	r4, r0
 80127e2:	4628      	mov	r0, r5
 80127e4:	f002 fa88 	bl	8014cf8 <ucdr_deserialize_array_uint8_t>
 80127e8:	1d31      	adds	r1, r6, #4
 80127ea:	4004      	ands	r4, r0
 80127ec:	4628      	mov	r0, r5
 80127ee:	f002 fe5d 	bl	80154ac <ucdr_deserialize_uint32_t>
 80127f2:	b2e4      	uxtb	r4, r4
 80127f4:	4020      	ands	r0, r4
 80127f6:	bd70      	pop	{r4, r5, r6, pc}

080127f8 <uxr_serialize_DELETE_Payload>:
 80127f8:	b570      	push	{r4, r5, r6, lr}
 80127fa:	2202      	movs	r2, #2
 80127fc:	4605      	mov	r5, r0
 80127fe:	460e      	mov	r6, r1
 8012800:	f002 fa16 	bl	8014c30 <ucdr_serialize_array_uint8_t>
 8012804:	1cb1      	adds	r1, r6, #2
 8012806:	4604      	mov	r4, r0
 8012808:	2202      	movs	r2, #2
 801280a:	4628      	mov	r0, r5
 801280c:	f002 fa10 	bl	8014c30 <ucdr_serialize_array_uint8_t>
 8012810:	4020      	ands	r0, r4
 8012812:	b2c0      	uxtb	r0, r0
 8012814:	bd70      	pop	{r4, r5, r6, pc}
 8012816:	bf00      	nop

08012818 <uxr_deserialize_STATUS_AGENT_Payload>:
 8012818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801281c:	4606      	mov	r6, r0
 801281e:	460f      	mov	r7, r1
 8012820:	f002 fb14 	bl	8014e4c <ucdr_deserialize_uint8_t>
 8012824:	1c79      	adds	r1, r7, #1
 8012826:	4605      	mov	r5, r0
 8012828:	4630      	mov	r0, r6
 801282a:	f002 fb0f 	bl	8014e4c <ucdr_deserialize_uint8_t>
 801282e:	1d39      	adds	r1, r7, #4
 8012830:	4681      	mov	r9, r0
 8012832:	2204      	movs	r2, #4
 8012834:	4630      	mov	r0, r6
 8012836:	f002 fa5f 	bl	8014cf8 <ucdr_deserialize_array_uint8_t>
 801283a:	f107 0108 	add.w	r1, r7, #8
 801283e:	4604      	mov	r4, r0
 8012840:	2202      	movs	r2, #2
 8012842:	4630      	mov	r0, r6
 8012844:	f002 fa58 	bl	8014cf8 <ucdr_deserialize_array_uint8_t>
 8012848:	f107 010a 	add.w	r1, r7, #10
 801284c:	4680      	mov	r8, r0
 801284e:	2202      	movs	r2, #2
 8012850:	4630      	mov	r0, r6
 8012852:	f002 fa51 	bl	8014cf8 <ucdr_deserialize_array_uint8_t>
 8012856:	ea05 0509 	and.w	r5, r5, r9
 801285a:	b2ed      	uxtb	r5, r5
 801285c:	402c      	ands	r4, r5
 801285e:	f107 010c 	add.w	r1, r7, #12
 8012862:	4605      	mov	r5, r0
 8012864:	4630      	mov	r0, r6
 8012866:	f002 fac1 	bl	8014dec <ucdr_deserialize_bool>
 801286a:	ea08 0404 	and.w	r4, r8, r4
 801286e:	4025      	ands	r5, r4
 8012870:	4028      	ands	r0, r5
 8012872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012876:	bf00      	nop

08012878 <uxr_deserialize_STATUS_Payload>:
 8012878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801287c:	2202      	movs	r2, #2
 801287e:	4606      	mov	r6, r0
 8012880:	460f      	mov	r7, r1
 8012882:	f002 fa39 	bl	8014cf8 <ucdr_deserialize_array_uint8_t>
 8012886:	2202      	movs	r2, #2
 8012888:	1cb9      	adds	r1, r7, #2
 801288a:	4605      	mov	r5, r0
 801288c:	4630      	mov	r0, r6
 801288e:	f002 fa33 	bl	8014cf8 <ucdr_deserialize_array_uint8_t>
 8012892:	1d39      	adds	r1, r7, #4
 8012894:	4680      	mov	r8, r0
 8012896:	4630      	mov	r0, r6
 8012898:	f002 fad8 	bl	8014e4c <ucdr_deserialize_uint8_t>
 801289c:	1d79      	adds	r1, r7, #5
 801289e:	4604      	mov	r4, r0
 80128a0:	4630      	mov	r0, r6
 80128a2:	f002 fad3 	bl	8014e4c <ucdr_deserialize_uint8_t>
 80128a6:	ea05 0508 	and.w	r5, r5, r8
 80128aa:	402c      	ands	r4, r5
 80128ac:	4020      	ands	r0, r4
 80128ae:	b2c0      	uxtb	r0, r0
 80128b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080128b4 <uxr_serialize_INFO_Payload>:
 80128b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128b8:	2202      	movs	r2, #2
 80128ba:	460c      	mov	r4, r1
 80128bc:	4605      	mov	r5, r0
 80128be:	f002 f9b7 	bl	8014c30 <ucdr_serialize_array_uint8_t>
 80128c2:	2202      	movs	r2, #2
 80128c4:	4680      	mov	r8, r0
 80128c6:	1ca1      	adds	r1, r4, #2
 80128c8:	4628      	mov	r0, r5
 80128ca:	f002 f9b1 	bl	8014c30 <ucdr_serialize_array_uint8_t>
 80128ce:	7921      	ldrb	r1, [r4, #4]
 80128d0:	4607      	mov	r7, r0
 80128d2:	4628      	mov	r0, r5
 80128d4:	f002 faa4 	bl	8014e20 <ucdr_serialize_uint8_t>
 80128d8:	7961      	ldrb	r1, [r4, #5]
 80128da:	4606      	mov	r6, r0
 80128dc:	4628      	mov	r0, r5
 80128de:	f002 fa9f 	bl	8014e20 <ucdr_serialize_uint8_t>
 80128e2:	ea08 0807 	and.w	r8, r8, r7
 80128e6:	ea06 0608 	and.w	r6, r6, r8
 80128ea:	4006      	ands	r6, r0
 80128ec:	7a21      	ldrb	r1, [r4, #8]
 80128ee:	4628      	mov	r0, r5
 80128f0:	f002 fa66 	bl	8014dc0 <ucdr_serialize_bool>
 80128f4:	7a23      	ldrb	r3, [r4, #8]
 80128f6:	b2f7      	uxtb	r7, r6
 80128f8:	4606      	mov	r6, r0
 80128fa:	b96b      	cbnz	r3, 8012918 <uxr_serialize_INFO_Payload+0x64>
 80128fc:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 8012900:	4628      	mov	r0, r5
 8012902:	f002 fa5d 	bl	8014dc0 <ucdr_serialize_bool>
 8012906:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 801290a:	4030      	ands	r0, r6
 801290c:	b2c6      	uxtb	r6, r0
 801290e:	b983      	cbnz	r3, 8012932 <uxr_serialize_INFO_Payload+0x7e>
 8012910:	ea06 0007 	and.w	r0, r6, r7
 8012914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012918:	7b21      	ldrb	r1, [r4, #12]
 801291a:	4628      	mov	r0, r5
 801291c:	f002 fa80 	bl	8014e20 <ucdr_serialize_uint8_t>
 8012920:	b188      	cbz	r0, 8012946 <uxr_serialize_INFO_Payload+0x92>
 8012922:	f104 010c 	add.w	r1, r4, #12
 8012926:	4628      	mov	r0, r5
 8012928:	f7ff fa06 	bl	8011d38 <uxr_serialize_ObjectVariant.part.0>
 801292c:	4030      	ands	r0, r6
 801292e:	b2c6      	uxtb	r6, r0
 8012930:	e7e4      	b.n	80128fc <uxr_serialize_INFO_Payload+0x48>
 8012932:	f504 7108 	add.w	r1, r4, #544	; 0x220
 8012936:	4628      	mov	r0, r5
 8012938:	f7ff fe24 	bl	8012584 <uxr_serialize_ActivityInfoVariant>
 801293c:	4006      	ands	r6, r0
 801293e:	ea06 0007 	and.w	r0, r6, r7
 8012942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012946:	4606      	mov	r6, r0
 8012948:	e7d8      	b.n	80128fc <uxr_serialize_INFO_Payload+0x48>
 801294a:	bf00      	nop

0801294c <uxr_serialize_READ_DATA_Payload>:
 801294c:	b570      	push	{r4, r5, r6, lr}
 801294e:	2202      	movs	r2, #2
 8012950:	4605      	mov	r5, r0
 8012952:	460e      	mov	r6, r1
 8012954:	f002 f96c 	bl	8014c30 <ucdr_serialize_array_uint8_t>
 8012958:	1cb1      	adds	r1, r6, #2
 801295a:	2202      	movs	r2, #2
 801295c:	4604      	mov	r4, r0
 801295e:	4628      	mov	r0, r5
 8012960:	f002 f966 	bl	8014c30 <ucdr_serialize_array_uint8_t>
 8012964:	1d31      	adds	r1, r6, #4
 8012966:	4004      	ands	r4, r0
 8012968:	4628      	mov	r0, r5
 801296a:	f7ff fe55 	bl	8012618 <uxr_serialize_ReadSpecification>
 801296e:	b2e4      	uxtb	r4, r4
 8012970:	4020      	ands	r0, r4
 8012972:	bd70      	pop	{r4, r5, r6, pc}

08012974 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8012974:	b570      	push	{r4, r5, r6, lr}
 8012976:	2202      	movs	r2, #2
 8012978:	4605      	mov	r5, r0
 801297a:	460e      	mov	r6, r1
 801297c:	f002 f958 	bl	8014c30 <ucdr_serialize_array_uint8_t>
 8012980:	1cb1      	adds	r1, r6, #2
 8012982:	4604      	mov	r4, r0
 8012984:	2202      	movs	r2, #2
 8012986:	4628      	mov	r0, r5
 8012988:	f002 f952 	bl	8014c30 <ucdr_serialize_array_uint8_t>
 801298c:	4020      	ands	r0, r4
 801298e:	b2c0      	uxtb	r0, r0
 8012990:	bd70      	pop	{r4, r5, r6, pc}
 8012992:	bf00      	nop

08012994 <uxr_serialize_ACKNACK_Payload>:
 8012994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012996:	460f      	mov	r7, r1
 8012998:	460e      	mov	r6, r1
 801299a:	f837 1b02 	ldrh.w	r1, [r7], #2
 801299e:	4605      	mov	r5, r0
 80129a0:	f002 fa6a 	bl	8014e78 <ucdr_serialize_uint16_t>
 80129a4:	4639      	mov	r1, r7
 80129a6:	2202      	movs	r2, #2
 80129a8:	4604      	mov	r4, r0
 80129aa:	4628      	mov	r0, r5
 80129ac:	f002 f940 	bl	8014c30 <ucdr_serialize_array_uint8_t>
 80129b0:	7931      	ldrb	r1, [r6, #4]
 80129b2:	4004      	ands	r4, r0
 80129b4:	4628      	mov	r0, r5
 80129b6:	f002 fa33 	bl	8014e20 <ucdr_serialize_uint8_t>
 80129ba:	b2e4      	uxtb	r4, r4
 80129bc:	4020      	ands	r0, r4
 80129be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080129c0 <uxr_deserialize_ACKNACK_Payload>:
 80129c0:	b570      	push	{r4, r5, r6, lr}
 80129c2:	4605      	mov	r5, r0
 80129c4:	460e      	mov	r6, r1
 80129c6:	f002 fb57 	bl	8015078 <ucdr_deserialize_uint16_t>
 80129ca:	1cb1      	adds	r1, r6, #2
 80129cc:	2202      	movs	r2, #2
 80129ce:	4604      	mov	r4, r0
 80129d0:	4628      	mov	r0, r5
 80129d2:	f002 f991 	bl	8014cf8 <ucdr_deserialize_array_uint8_t>
 80129d6:	1d31      	adds	r1, r6, #4
 80129d8:	4004      	ands	r4, r0
 80129da:	4628      	mov	r0, r5
 80129dc:	f002 fa36 	bl	8014e4c <ucdr_deserialize_uint8_t>
 80129e0:	b2e4      	uxtb	r4, r4
 80129e2:	4020      	ands	r0, r4
 80129e4:	bd70      	pop	{r4, r5, r6, pc}
 80129e6:	bf00      	nop

080129e8 <uxr_serialize_HEARTBEAT_Payload>:
 80129e8:	b570      	push	{r4, r5, r6, lr}
 80129ea:	460d      	mov	r5, r1
 80129ec:	8809      	ldrh	r1, [r1, #0]
 80129ee:	4606      	mov	r6, r0
 80129f0:	f002 fa42 	bl	8014e78 <ucdr_serialize_uint16_t>
 80129f4:	8869      	ldrh	r1, [r5, #2]
 80129f6:	4604      	mov	r4, r0
 80129f8:	4630      	mov	r0, r6
 80129fa:	f002 fa3d 	bl	8014e78 <ucdr_serialize_uint16_t>
 80129fe:	7929      	ldrb	r1, [r5, #4]
 8012a00:	4004      	ands	r4, r0
 8012a02:	4630      	mov	r0, r6
 8012a04:	f002 fa0c 	bl	8014e20 <ucdr_serialize_uint8_t>
 8012a08:	b2e4      	uxtb	r4, r4
 8012a0a:	4020      	ands	r0, r4
 8012a0c:	bd70      	pop	{r4, r5, r6, pc}
 8012a0e:	bf00      	nop

08012a10 <uxr_deserialize_HEARTBEAT_Payload>:
 8012a10:	b570      	push	{r4, r5, r6, lr}
 8012a12:	4605      	mov	r5, r0
 8012a14:	460e      	mov	r6, r1
 8012a16:	f002 fb2f 	bl	8015078 <ucdr_deserialize_uint16_t>
 8012a1a:	1cb1      	adds	r1, r6, #2
 8012a1c:	4604      	mov	r4, r0
 8012a1e:	4628      	mov	r0, r5
 8012a20:	f002 fb2a 	bl	8015078 <ucdr_deserialize_uint16_t>
 8012a24:	1d31      	adds	r1, r6, #4
 8012a26:	4004      	ands	r4, r0
 8012a28:	4628      	mov	r0, r5
 8012a2a:	f002 fa0f 	bl	8014e4c <ucdr_deserialize_uint8_t>
 8012a2e:	b2e4      	uxtb	r4, r4
 8012a30:	4020      	ands	r0, r4
 8012a32:	bd70      	pop	{r4, r5, r6, pc}

08012a34 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8012a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a38:	4605      	mov	r5, r0
 8012a3a:	460e      	mov	r6, r1
 8012a3c:	f003 f820 	bl	8015a80 <ucdr_deserialize_int32_t>
 8012a40:	1d31      	adds	r1, r6, #4
 8012a42:	4607      	mov	r7, r0
 8012a44:	4628      	mov	r0, r5
 8012a46:	f002 fd31 	bl	80154ac <ucdr_deserialize_uint32_t>
 8012a4a:	f106 0108 	add.w	r1, r6, #8
 8012a4e:	4680      	mov	r8, r0
 8012a50:	4628      	mov	r0, r5
 8012a52:	f003 f815 	bl	8015a80 <ucdr_deserialize_int32_t>
 8012a56:	f106 010c 	add.w	r1, r6, #12
 8012a5a:	4604      	mov	r4, r0
 8012a5c:	4628      	mov	r0, r5
 8012a5e:	f002 fd25 	bl	80154ac <ucdr_deserialize_uint32_t>
 8012a62:	ea07 0708 	and.w	r7, r7, r8
 8012a66:	403c      	ands	r4, r7
 8012a68:	f106 0110 	add.w	r1, r6, #16
 8012a6c:	4004      	ands	r4, r0
 8012a6e:	4628      	mov	r0, r5
 8012a70:	f003 f806 	bl	8015a80 <ucdr_deserialize_int32_t>
 8012a74:	f106 0114 	add.w	r1, r6, #20
 8012a78:	4603      	mov	r3, r0
 8012a7a:	4628      	mov	r0, r5
 8012a7c:	461d      	mov	r5, r3
 8012a7e:	f002 fd15 	bl	80154ac <ucdr_deserialize_uint32_t>
 8012a82:	b2e4      	uxtb	r4, r4
 8012a84:	402c      	ands	r4, r5
 8012a86:	4020      	ands	r0, r4
 8012a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012a8c <uxr_deserialize_SampleIdentity>:
 8012a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a90:	220c      	movs	r2, #12
 8012a92:	4604      	mov	r4, r0
 8012a94:	460d      	mov	r5, r1
 8012a96:	f002 f92f 	bl	8014cf8 <ucdr_deserialize_array_uint8_t>
 8012a9a:	2203      	movs	r2, #3
 8012a9c:	f105 010c 	add.w	r1, r5, #12
 8012aa0:	4607      	mov	r7, r0
 8012aa2:	4620      	mov	r0, r4
 8012aa4:	f002 f928 	bl	8014cf8 <ucdr_deserialize_array_uint8_t>
 8012aa8:	f105 010f 	add.w	r1, r5, #15
 8012aac:	4680      	mov	r8, r0
 8012aae:	4620      	mov	r0, r4
 8012ab0:	f002 f9cc 	bl	8014e4c <ucdr_deserialize_uint8_t>
 8012ab4:	f105 0110 	add.w	r1, r5, #16
 8012ab8:	4606      	mov	r6, r0
 8012aba:	4620      	mov	r0, r4
 8012abc:	f002 ffe0 	bl	8015a80 <ucdr_deserialize_int32_t>
 8012ac0:	f105 0114 	add.w	r1, r5, #20
 8012ac4:	4603      	mov	r3, r0
 8012ac6:	4620      	mov	r0, r4
 8012ac8:	ea07 0708 	and.w	r7, r7, r8
 8012acc:	461c      	mov	r4, r3
 8012ace:	f002 fced 	bl	80154ac <ucdr_deserialize_uint32_t>
 8012ad2:	403e      	ands	r6, r7
 8012ad4:	4034      	ands	r4, r6
 8012ad6:	4020      	ands	r0, r4
 8012ad8:	b2c0      	uxtb	r0, r0
 8012ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ade:	bf00      	nop

08012ae0 <rcl_convert_rmw_ret_to_rcl_ret>:
 8012ae0:	280b      	cmp	r0, #11
 8012ae2:	dc0d      	bgt.n	8012b00 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8012ae4:	2800      	cmp	r0, #0
 8012ae6:	db09      	blt.n	8012afc <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012ae8:	280b      	cmp	r0, #11
 8012aea:	d807      	bhi.n	8012afc <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012aec:	e8df f000 	tbb	[pc, r0]
 8012af0:	07060607 	.word	0x07060607
 8012af4:	06060606 	.word	0x06060606
 8012af8:	07070606 	.word	0x07070606
 8012afc:	2001      	movs	r0, #1
 8012afe:	4770      	bx	lr
 8012b00:	28cb      	cmp	r0, #203	; 0xcb
 8012b02:	bf18      	it	ne
 8012b04:	2001      	movne	r0, #1
 8012b06:	4770      	bx	lr

08012b08 <rcl_get_zero_initialized_context>:
 8012b08:	4a03      	ldr	r2, [pc, #12]	; (8012b18 <rcl_get_zero_initialized_context+0x10>)
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012b10:	e883 0003 	stmia.w	r3, {r0, r1}
 8012b14:	4618      	mov	r0, r3
 8012b16:	4770      	bx	lr
 8012b18:	08019244 	.word	0x08019244

08012b1c <rcl_context_is_valid>:
 8012b1c:	b118      	cbz	r0, 8012b26 <rcl_context_is_valid+0xa>
 8012b1e:	6840      	ldr	r0, [r0, #4]
 8012b20:	3800      	subs	r0, #0
 8012b22:	bf18      	it	ne
 8012b24:	2001      	movne	r0, #1
 8012b26:	4770      	bx	lr

08012b28 <__cleanup_context>:
 8012b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b2c:	4606      	mov	r6, r0
 8012b2e:	6800      	ldr	r0, [r0, #0]
 8012b30:	2300      	movs	r3, #0
 8012b32:	6073      	str	r3, [r6, #4]
 8012b34:	2800      	cmp	r0, #0
 8012b36:	d04d      	beq.n	8012bd4 <__cleanup_context+0xac>
 8012b38:	6947      	ldr	r7, [r0, #20]
 8012b3a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8012b3e:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8012b42:	b137      	cbz	r7, 8012b52 <__cleanup_context+0x2a>
 8012b44:	3014      	adds	r0, #20
 8012b46:	f000 fb1d 	bl	8013184 <rcl_init_options_fini>
 8012b4a:	4607      	mov	r7, r0
 8012b4c:	2800      	cmp	r0, #0
 8012b4e:	d148      	bne.n	8012be2 <__cleanup_context+0xba>
 8012b50:	6830      	ldr	r0, [r6, #0]
 8012b52:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8012b54:	b143      	cbz	r3, 8012b68 <__cleanup_context+0x40>
 8012b56:	3028      	adds	r0, #40	; 0x28
 8012b58:	f001 fdd4 	bl	8014704 <rmw_context_fini>
 8012b5c:	b118      	cbz	r0, 8012b66 <__cleanup_context+0x3e>
 8012b5e:	2f00      	cmp	r7, #0
 8012b60:	d042      	beq.n	8012be8 <__cleanup_context+0xc0>
 8012b62:	f7fb ffa5 	bl	800eab0 <rcutils_reset_error>
 8012b66:	6830      	ldr	r0, [r6, #0]
 8012b68:	f8d0 c020 	ldr.w	ip, [r0, #32]
 8012b6c:	f1bc 0f00 	cmp.w	ip, #0
 8012b70:	d01c      	beq.n	8012bac <__cleanup_context+0x84>
 8012b72:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8012b76:	2a01      	cmp	r2, #1
 8012b78:	f173 0100 	sbcs.w	r1, r3, #0
 8012b7c:	db12      	blt.n	8012ba4 <__cleanup_context+0x7c>
 8012b7e:	2400      	movs	r4, #0
 8012b80:	2500      	movs	r5, #0
 8012b82:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 8012b86:	4649      	mov	r1, r9
 8012b88:	b1c0      	cbz	r0, 8012bbc <__cleanup_context+0x94>
 8012b8a:	47c0      	blx	r8
 8012b8c:	6831      	ldr	r1, [r6, #0]
 8012b8e:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8012b92:	3401      	adds	r4, #1
 8012b94:	f145 0500 	adc.w	r5, r5, #0
 8012b98:	4294      	cmp	r4, r2
 8012b9a:	f8d1 c020 	ldr.w	ip, [r1, #32]
 8012b9e:	eb75 0103 	sbcs.w	r1, r5, r3
 8012ba2:	dbee      	blt.n	8012b82 <__cleanup_context+0x5a>
 8012ba4:	4660      	mov	r0, ip
 8012ba6:	4649      	mov	r1, r9
 8012ba8:	47c0      	blx	r8
 8012baa:	6830      	ldr	r0, [r6, #0]
 8012bac:	4649      	mov	r1, r9
 8012bae:	47c0      	blx	r8
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	e9c6 3300 	strd	r3, r3, [r6]
 8012bb6:	4638      	mov	r0, r7
 8012bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bbc:	3401      	adds	r4, #1
 8012bbe:	f145 0500 	adc.w	r5, r5, #0
 8012bc2:	4294      	cmp	r4, r2
 8012bc4:	eb75 0103 	sbcs.w	r1, r5, r3
 8012bc8:	dbdb      	blt.n	8012b82 <__cleanup_context+0x5a>
 8012bca:	4660      	mov	r0, ip
 8012bcc:	4649      	mov	r1, r9
 8012bce:	47c0      	blx	r8
 8012bd0:	6830      	ldr	r0, [r6, #0]
 8012bd2:	e7eb      	b.n	8012bac <__cleanup_context+0x84>
 8012bd4:	4607      	mov	r7, r0
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	e9c6 3300 	strd	r3, r3, [r6]
 8012bdc:	4638      	mov	r0, r7
 8012bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012be2:	f7fb ff65 	bl	800eab0 <rcutils_reset_error>
 8012be6:	e7b3      	b.n	8012b50 <__cleanup_context+0x28>
 8012be8:	f7ff ff7a 	bl	8012ae0 <rcl_convert_rmw_ret_to_rcl_ret>
 8012bec:	4607      	mov	r7, r0
 8012bee:	e7b8      	b.n	8012b62 <__cleanup_context+0x3a>

08012bf0 <rcl_expand_topic_name>:
 8012bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bf4:	b08b      	sub	sp, #44	; 0x2c
 8012bf6:	9306      	str	r3, [sp, #24]
 8012bf8:	2800      	cmp	r0, #0
 8012bfa:	f000 80d2 	beq.w	8012da2 <rcl_expand_topic_name+0x1b2>
 8012bfe:	460e      	mov	r6, r1
 8012c00:	2900      	cmp	r1, #0
 8012c02:	f000 80ce 	beq.w	8012da2 <rcl_expand_topic_name+0x1b2>
 8012c06:	4617      	mov	r7, r2
 8012c08:	2a00      	cmp	r2, #0
 8012c0a:	f000 80ca 	beq.w	8012da2 <rcl_expand_topic_name+0x1b2>
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	f000 80c7 	beq.w	8012da2 <rcl_expand_topic_name+0x1b2>
 8012c14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	f000 80c3 	beq.w	8012da2 <rcl_expand_topic_name+0x1b2>
 8012c1c:	a909      	add	r1, sp, #36	; 0x24
 8012c1e:	2200      	movs	r2, #0
 8012c20:	4680      	mov	r8, r0
 8012c22:	f000 ff67 	bl	8013af4 <rcl_validate_topic_name>
 8012c26:	4604      	mov	r4, r0
 8012c28:	2800      	cmp	r0, #0
 8012c2a:	f040 80b6 	bne.w	8012d9a <rcl_expand_topic_name+0x1aa>
 8012c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	f040 80bf 	bne.w	8012db4 <rcl_expand_topic_name+0x1c4>
 8012c36:	4602      	mov	r2, r0
 8012c38:	a909      	add	r1, sp, #36	; 0x24
 8012c3a:	4630      	mov	r0, r6
 8012c3c:	f001 fac8 	bl	80141d0 <rmw_validate_node_name>
 8012c40:	2800      	cmp	r0, #0
 8012c42:	f040 80b3 	bne.w	8012dac <rcl_expand_topic_name+0x1bc>
 8012c46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c48:	2a00      	cmp	r2, #0
 8012c4a:	f040 80b8 	bne.w	8012dbe <rcl_expand_topic_name+0x1ce>
 8012c4e:	a909      	add	r1, sp, #36	; 0x24
 8012c50:	4638      	mov	r0, r7
 8012c52:	f001 fa9f 	bl	8014194 <rmw_validate_namespace>
 8012c56:	2800      	cmp	r0, #0
 8012c58:	f040 80a8 	bne.w	8012dac <rcl_expand_topic_name+0x1bc>
 8012c5c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012c5e:	2c00      	cmp	r4, #0
 8012c60:	f040 80f6 	bne.w	8012e50 <rcl_expand_topic_name+0x260>
 8012c64:	217b      	movs	r1, #123	; 0x7b
 8012c66:	4640      	mov	r0, r8
 8012c68:	f005 f98e 	bl	8017f88 <strchr>
 8012c6c:	f898 3000 	ldrb.w	r3, [r8]
 8012c70:	2b2f      	cmp	r3, #47	; 0x2f
 8012c72:	4605      	mov	r5, r0
 8012c74:	f000 80c4 	beq.w	8012e00 <rcl_expand_topic_name+0x210>
 8012c78:	2b7e      	cmp	r3, #126	; 0x7e
 8012c7a:	d16f      	bne.n	8012d5c <rcl_expand_topic_name+0x16c>
 8012c7c:	4638      	mov	r0, r7
 8012c7e:	f7ed fab9 	bl	80001f4 <strlen>
 8012c82:	4b87      	ldr	r3, [pc, #540]	; (8012ea0 <rcl_expand_topic_name+0x2b0>)
 8012c84:	4987      	ldr	r1, [pc, #540]	; (8012ea4 <rcl_expand_topic_name+0x2b4>)
 8012c86:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012c88:	9604      	str	r6, [sp, #16]
 8012c8a:	2801      	cmp	r0, #1
 8012c8c:	bf0c      	ite	eq
 8012c8e:	4618      	moveq	r0, r3
 8012c90:	4608      	movne	r0, r1
 8012c92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012c96:	e9cd 2300 	strd	r2, r3, [sp]
 8012c9a:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8012c9e:	f108 0101 	add.w	r1, r8, #1
 8012ca2:	9105      	str	r1, [sp, #20]
 8012ca4:	ab14      	add	r3, sp, #80	; 0x50
 8012ca6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012ca8:	f001 f852 	bl	8013d50 <rcutils_format_string_limit>
 8012cac:	4682      	mov	sl, r0
 8012cae:	2800      	cmp	r0, #0
 8012cb0:	f000 80d0 	beq.w	8012e54 <rcl_expand_topic_name+0x264>
 8012cb4:	2d00      	cmp	r5, #0
 8012cb6:	f000 80aa 	beq.w	8012e0e <rcl_expand_topic_name+0x21e>
 8012cba:	217b      	movs	r1, #123	; 0x7b
 8012cbc:	f005 f964 	bl	8017f88 <strchr>
 8012cc0:	46d1      	mov	r9, sl
 8012cc2:	4605      	mov	r5, r0
 8012cc4:	9407      	str	r4, [sp, #28]
 8012cc6:	46d3      	mov	fp, sl
 8012cc8:	464c      	mov	r4, r9
 8012cca:	2d00      	cmp	r5, #0
 8012ccc:	f000 80c7 	beq.w	8012e5e <rcl_expand_topic_name+0x26e>
 8012cd0:	217d      	movs	r1, #125	; 0x7d
 8012cd2:	4620      	mov	r0, r4
 8012cd4:	f005 f958 	bl	8017f88 <strchr>
 8012cd8:	eba0 0905 	sub.w	r9, r0, r5
 8012cdc:	f109 0a01 	add.w	sl, r9, #1
 8012ce0:	4871      	ldr	r0, [pc, #452]	; (8012ea8 <rcl_expand_topic_name+0x2b8>)
 8012ce2:	4652      	mov	r2, sl
 8012ce4:	4629      	mov	r1, r5
 8012ce6:	f005 f95c 	bl	8017fa2 <strncmp>
 8012cea:	2800      	cmp	r0, #0
 8012cec:	f000 808d 	beq.w	8012e0a <rcl_expand_topic_name+0x21a>
 8012cf0:	486e      	ldr	r0, [pc, #440]	; (8012eac <rcl_expand_topic_name+0x2bc>)
 8012cf2:	4652      	mov	r2, sl
 8012cf4:	4629      	mov	r1, r5
 8012cf6:	f005 f954 	bl	8017fa2 <strncmp>
 8012cfa:	b130      	cbz	r0, 8012d0a <rcl_expand_topic_name+0x11a>
 8012cfc:	486c      	ldr	r0, [pc, #432]	; (8012eb0 <rcl_expand_topic_name+0x2c0>)
 8012cfe:	4652      	mov	r2, sl
 8012d00:	4629      	mov	r1, r5
 8012d02:	f005 f94e 	bl	8017fa2 <strncmp>
 8012d06:	2800      	cmp	r0, #0
 8012d08:	d15b      	bne.n	8012dc2 <rcl_expand_topic_name+0x1d2>
 8012d0a:	46b9      	mov	r9, r7
 8012d0c:	ab16      	add	r3, sp, #88	; 0x58
 8012d0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012d12:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012d16:	ab14      	add	r3, sp, #80	; 0x50
 8012d18:	4628      	mov	r0, r5
 8012d1a:	cb0c      	ldmia	r3, {r2, r3}
 8012d1c:	4651      	mov	r1, sl
 8012d1e:	f001 f963 	bl	8013fe8 <rcutils_strndup>
 8012d22:	4605      	mov	r5, r0
 8012d24:	2800      	cmp	r0, #0
 8012d26:	f000 80a4 	beq.w	8012e72 <rcl_expand_topic_name+0x282>
 8012d2a:	464a      	mov	r2, r9
 8012d2c:	4620      	mov	r0, r4
 8012d2e:	ab14      	add	r3, sp, #80	; 0x50
 8012d30:	4629      	mov	r1, r5
 8012d32:	f001 f85f 	bl	8013df4 <rcutils_repl_str>
 8012d36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012d38:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012d3a:	4604      	mov	r4, r0
 8012d3c:	4628      	mov	r0, r5
 8012d3e:	4798      	blx	r3
 8012d40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012d42:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012d44:	4658      	mov	r0, fp
 8012d46:	4798      	blx	r3
 8012d48:	2c00      	cmp	r4, #0
 8012d4a:	f000 8083 	beq.w	8012e54 <rcl_expand_topic_name+0x264>
 8012d4e:	217b      	movs	r1, #123	; 0x7b
 8012d50:	4620      	mov	r0, r4
 8012d52:	f005 f919 	bl	8017f88 <strchr>
 8012d56:	46a3      	mov	fp, r4
 8012d58:	4605      	mov	r5, r0
 8012d5a:	e7b6      	b.n	8012cca <rcl_expand_topic_name+0xda>
 8012d5c:	2800      	cmp	r0, #0
 8012d5e:	d151      	bne.n	8012e04 <rcl_expand_topic_name+0x214>
 8012d60:	4638      	mov	r0, r7
 8012d62:	f7ed fa47 	bl	80001f4 <strlen>
 8012d66:	4b53      	ldr	r3, [pc, #332]	; (8012eb4 <rcl_expand_topic_name+0x2c4>)
 8012d68:	4a53      	ldr	r2, [pc, #332]	; (8012eb8 <rcl_expand_topic_name+0x2c8>)
 8012d6a:	f8cd 8010 	str.w	r8, [sp, #16]
 8012d6e:	2801      	cmp	r0, #1
 8012d70:	bf0c      	ite	eq
 8012d72:	4618      	moveq	r0, r3
 8012d74:	4610      	movne	r0, r2
 8012d76:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012d78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012d7c:	e9cd 3200 	strd	r3, r2, [sp]
 8012d80:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8012d84:	ab14      	add	r3, sp, #80	; 0x50
 8012d86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012d88:	f000 ffe2 	bl	8013d50 <rcutils_format_string_limit>
 8012d8c:	4682      	mov	sl, r0
 8012d8e:	4653      	mov	r3, sl
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d05f      	beq.n	8012e54 <rcl_expand_topic_name+0x264>
 8012d94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012d96:	f8c3 a000 	str.w	sl, [r3]
 8012d9a:	4620      	mov	r0, r4
 8012d9c:	b00b      	add	sp, #44	; 0x2c
 8012d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012da2:	240b      	movs	r4, #11
 8012da4:	4620      	mov	r0, r4
 8012da6:	b00b      	add	sp, #44	; 0x2c
 8012da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dac:	f7ff fe98 	bl	8012ae0 <rcl_convert_rmw_ret_to_rcl_ret>
 8012db0:	4604      	mov	r4, r0
 8012db2:	e7f2      	b.n	8012d9a <rcl_expand_topic_name+0x1aa>
 8012db4:	2467      	movs	r4, #103	; 0x67
 8012db6:	4620      	mov	r0, r4
 8012db8:	b00b      	add	sp, #44	; 0x2c
 8012dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dbe:	24c9      	movs	r4, #201	; 0xc9
 8012dc0:	e7eb      	b.n	8012d9a <rcl_expand_topic_name+0x1aa>
 8012dc2:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8012dc6:	9806      	ldr	r0, [sp, #24]
 8012dc8:	1c69      	adds	r1, r5, #1
 8012dca:	f7fb ff87 	bl	800ecdc <rcutils_string_map_getn>
 8012dce:	4681      	mov	r9, r0
 8012dd0:	2800      	cmp	r0, #0
 8012dd2:	d19b      	bne.n	8012d0c <rcl_expand_topic_name+0x11c>
 8012dd4:	aa16      	add	r2, sp, #88	; 0x58
 8012dd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8012dd8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012dda:	f8c3 9000 	str.w	r9, [r3]
 8012dde:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012de2:	ab14      	add	r3, sp, #80	; 0x50
 8012de4:	cb0c      	ldmia	r3, {r2, r3}
 8012de6:	4651      	mov	r1, sl
 8012de8:	4628      	mov	r0, r5
 8012dea:	f001 f8fd 	bl	8013fe8 <rcutils_strndup>
 8012dee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012df0:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012df2:	4798      	blx	r3
 8012df4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012df6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012df8:	4658      	mov	r0, fp
 8012dfa:	4798      	blx	r3
 8012dfc:	2469      	movs	r4, #105	; 0x69
 8012dfe:	e7cc      	b.n	8012d9a <rcl_expand_topic_name+0x1aa>
 8012e00:	2800      	cmp	r0, #0
 8012e02:	d03e      	beq.n	8012e82 <rcl_expand_topic_name+0x292>
 8012e04:	46c1      	mov	r9, r8
 8012e06:	46a2      	mov	sl, r4
 8012e08:	e75c      	b.n	8012cc4 <rcl_expand_topic_name+0xd4>
 8012e0a:	46b1      	mov	r9, r6
 8012e0c:	e77e      	b.n	8012d0c <rcl_expand_topic_name+0x11c>
 8012e0e:	f89a 3000 	ldrb.w	r3, [sl]
 8012e12:	2b2f      	cmp	r3, #47	; 0x2f
 8012e14:	d0be      	beq.n	8012d94 <rcl_expand_topic_name+0x1a4>
 8012e16:	4638      	mov	r0, r7
 8012e18:	f7ed f9ec 	bl	80001f4 <strlen>
 8012e1c:	4b25      	ldr	r3, [pc, #148]	; (8012eb4 <rcl_expand_topic_name+0x2c4>)
 8012e1e:	4926      	ldr	r1, [pc, #152]	; (8012eb8 <rcl_expand_topic_name+0x2c8>)
 8012e20:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012e22:	f8cd a010 	str.w	sl, [sp, #16]
 8012e26:	2801      	cmp	r0, #1
 8012e28:	bf0c      	ite	eq
 8012e2a:	4618      	moveq	r0, r3
 8012e2c:	4608      	movne	r0, r1
 8012e2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012e32:	e9cd 2300 	strd	r2, r3, [sp]
 8012e36:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8012e3a:	ab14      	add	r3, sp, #80	; 0x50
 8012e3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012e3e:	f000 ff87 	bl	8013d50 <rcutils_format_string_limit>
 8012e42:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012e44:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012e46:	4603      	mov	r3, r0
 8012e48:	4650      	mov	r0, sl
 8012e4a:	469a      	mov	sl, r3
 8012e4c:	4790      	blx	r2
 8012e4e:	e79e      	b.n	8012d8e <rcl_expand_topic_name+0x19e>
 8012e50:	24ca      	movs	r4, #202	; 0xca
 8012e52:	e7a2      	b.n	8012d9a <rcl_expand_topic_name+0x1aa>
 8012e54:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012e56:	2300      	movs	r3, #0
 8012e58:	6013      	str	r3, [r2, #0]
 8012e5a:	240a      	movs	r4, #10
 8012e5c:	e79d      	b.n	8012d9a <rcl_expand_topic_name+0x1aa>
 8012e5e:	465b      	mov	r3, fp
 8012e60:	9c07      	ldr	r4, [sp, #28]
 8012e62:	46da      	mov	sl, fp
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d1d2      	bne.n	8012e0e <rcl_expand_topic_name+0x21e>
 8012e68:	f898 3000 	ldrb.w	r3, [r8]
 8012e6c:	2b2f      	cmp	r3, #47	; 0x2f
 8012e6e:	d091      	beq.n	8012d94 <rcl_expand_topic_name+0x1a4>
 8012e70:	e776      	b.n	8012d60 <rcl_expand_topic_name+0x170>
 8012e72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012e74:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012e76:	601d      	str	r5, [r3, #0]
 8012e78:	4658      	mov	r0, fp
 8012e7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012e7c:	4798      	blx	r3
 8012e7e:	240a      	movs	r4, #10
 8012e80:	e78b      	b.n	8012d9a <rcl_expand_topic_name+0x1aa>
 8012e82:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 8012e86:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012e8a:	ab14      	add	r3, sp, #80	; 0x50
 8012e8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012e8e:	4640      	mov	r0, r8
 8012e90:	f001 f888 	bl	8013fa4 <rcutils_strdup>
 8012e94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012e96:	2800      	cmp	r0, #0
 8012e98:	bf08      	it	eq
 8012e9a:	240a      	moveq	r4, #10
 8012e9c:	6018      	str	r0, [r3, #0]
 8012e9e:	e77c      	b.n	8012d9a <rcl_expand_topic_name+0x1aa>
 8012ea0:	08019210 	.word	0x08019210
 8012ea4:	0801924c 	.word	0x0801924c
 8012ea8:	0801925c 	.word	0x0801925c
 8012eac:	08019264 	.word	0x08019264
 8012eb0:	0801926c 	.word	0x0801926c
 8012eb4:	08019220 	.word	0x08019220
 8012eb8:	08019254 	.word	0x08019254

08012ebc <rcl_get_default_topic_name_substitutions>:
 8012ebc:	2800      	cmp	r0, #0
 8012ebe:	bf0c      	ite	eq
 8012ec0:	200b      	moveq	r0, #11
 8012ec2:	2000      	movne	r0, #0
 8012ec4:	4770      	bx	lr
 8012ec6:	bf00      	nop

08012ec8 <rcl_init>:
 8012ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ecc:	1e07      	subs	r7, r0, #0
 8012ece:	b09f      	sub	sp, #124	; 0x7c
 8012ed0:	4688      	mov	r8, r1
 8012ed2:	4692      	mov	sl, r2
 8012ed4:	4699      	mov	r9, r3
 8012ed6:	f340 8097 	ble.w	8013008 <rcl_init+0x140>
 8012eda:	2900      	cmp	r1, #0
 8012edc:	f000 8097 	beq.w	801300e <rcl_init+0x146>
 8012ee0:	1f0d      	subs	r5, r1, #4
 8012ee2:	2400      	movs	r4, #0
 8012ee4:	f855 6f04 	ldr.w	r6, [r5, #4]!
 8012ee8:	3401      	adds	r4, #1
 8012eea:	2e00      	cmp	r6, #0
 8012eec:	f000 808f 	beq.w	801300e <rcl_init+0x146>
 8012ef0:	42a7      	cmp	r7, r4
 8012ef2:	d1f7      	bne.n	8012ee4 <rcl_init+0x1c>
 8012ef4:	f1ba 0f00 	cmp.w	sl, #0
 8012ef8:	f000 8089 	beq.w	801300e <rcl_init+0x146>
 8012efc:	f8da 4000 	ldr.w	r4, [sl]
 8012f00:	2c00      	cmp	r4, #0
 8012f02:	f000 8084 	beq.w	801300e <rcl_init+0x146>
 8012f06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012f08:	ad19      	add	r5, sp, #100	; 0x64
 8012f0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012f0c:	6823      	ldr	r3, [r4, #0]
 8012f0e:	602b      	str	r3, [r5, #0]
 8012f10:	a819      	add	r0, sp, #100	; 0x64
 8012f12:	f7fb fda9 	bl	800ea68 <rcutils_allocator_is_valid>
 8012f16:	2800      	cmp	r0, #0
 8012f18:	d079      	beq.n	801300e <rcl_init+0x146>
 8012f1a:	f1b9 0f00 	cmp.w	r9, #0
 8012f1e:	d076      	beq.n	801300e <rcl_init+0x146>
 8012f20:	f8d9 3000 	ldr.w	r3, [r9]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d177      	bne.n	8013018 <rcl_init+0x150>
 8012f28:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8012f2c:	2178      	movs	r1, #120	; 0x78
 8012f2e:	2001      	movs	r0, #1
 8012f30:	4798      	blx	r3
 8012f32:	4604      	mov	r4, r0
 8012f34:	f8c9 0000 	str.w	r0, [r9]
 8012f38:	2800      	cmp	r0, #0
 8012f3a:	f000 80ba 	beq.w	80130b2 <rcl_init+0x1ea>
 8012f3e:	a802      	add	r0, sp, #8
 8012f40:	f001 f8be 	bl	80140c0 <rmw_get_zero_initialized_context>
 8012f44:	a902      	add	r1, sp, #8
 8012f46:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8012f4a:	2250      	movs	r2, #80	; 0x50
 8012f4c:	ac19      	add	r4, sp, #100	; 0x64
 8012f4e:	f005 f932 	bl	80181b6 <memcpy>
 8012f52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012f54:	f8d9 5000 	ldr.w	r5, [r9]
 8012f58:	6826      	ldr	r6, [r4, #0]
 8012f5a:	462c      	mov	r4, r5
 8012f5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012f5e:	f105 0114 	add.w	r1, r5, #20
 8012f62:	6026      	str	r6, [r4, #0]
 8012f64:	4650      	mov	r0, sl
 8012f66:	f000 f931 	bl	80131cc <rcl_init_options_copy>
 8012f6a:	4606      	mov	r6, r0
 8012f6c:	2800      	cmp	r0, #0
 8012f6e:	d144      	bne.n	8012ffa <rcl_init+0x132>
 8012f70:	f8d9 a000 	ldr.w	sl, [r9]
 8012f74:	463c      	mov	r4, r7
 8012f76:	17fd      	asrs	r5, r7, #31
 8012f78:	e9ca 4506 	strd	r4, r5, [sl, #24]
 8012f7c:	f8ca 0020 	str.w	r0, [sl, #32]
 8012f80:	2f00      	cmp	r7, #0
 8012f82:	d050      	beq.n	8013026 <rcl_init+0x15e>
 8012f84:	f1b8 0f00 	cmp.w	r8, #0
 8012f88:	d04d      	beq.n	8013026 <rcl_init+0x15e>
 8012f8a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8012f8e:	4638      	mov	r0, r7
 8012f90:	2104      	movs	r1, #4
 8012f92:	4798      	blx	r3
 8012f94:	f8ca 0020 	str.w	r0, [sl, #32]
 8012f98:	f8d9 a000 	ldr.w	sl, [r9]
 8012f9c:	f8da 3020 	ldr.w	r3, [sl, #32]
 8012fa0:	46d3      	mov	fp, sl
 8012fa2:	b34b      	cbz	r3, 8012ff8 <rcl_init+0x130>
 8012fa4:	2f01      	cmp	r7, #1
 8012fa6:	f175 0300 	sbcs.w	r3, r5, #0
 8012faa:	db3c      	blt.n	8013026 <rcl_init+0x15e>
 8012fac:	f1a8 0804 	sub.w	r8, r8, #4
 8012fb0:	2600      	movs	r6, #0
 8012fb2:	2700      	movs	r7, #0
 8012fb4:	e00c      	b.n	8012fd0 <rcl_init+0x108>
 8012fb6:	f8d8 1000 	ldr.w	r1, [r8]
 8012fba:	f005 f8fc 	bl	80181b6 <memcpy>
 8012fbe:	3601      	adds	r6, #1
 8012fc0:	f147 0700 	adc.w	r7, r7, #0
 8012fc4:	42bd      	cmp	r5, r7
 8012fc6:	bf08      	it	eq
 8012fc8:	42b4      	cmpeq	r4, r6
 8012fca:	d02a      	beq.n	8013022 <rcl_init+0x15a>
 8012fcc:	f8d9 b000 	ldr.w	fp, [r9]
 8012fd0:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8012fd4:	f7ed f90e 	bl	80001f4 <strlen>
 8012fd8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012fda:	991d      	ldr	r1, [sp, #116]	; 0x74
 8012fdc:	f8db a020 	ldr.w	sl, [fp, #32]
 8012fe0:	9001      	str	r0, [sp, #4]
 8012fe2:	4798      	blx	r3
 8012fe4:	f8d9 1000 	ldr.w	r1, [r9]
 8012fe8:	9a01      	ldr	r2, [sp, #4]
 8012fea:	6a09      	ldr	r1, [r1, #32]
 8012fec:	00b3      	lsls	r3, r6, #2
 8012fee:	f84a 0003 	str.w	r0, [sl, r3]
 8012ff2:	58c8      	ldr	r0, [r1, r3]
 8012ff4:	2800      	cmp	r0, #0
 8012ff6:	d1de      	bne.n	8012fb6 <rcl_init+0xee>
 8012ff8:	260a      	movs	r6, #10
 8012ffa:	4648      	mov	r0, r9
 8012ffc:	f7ff fd94 	bl	8012b28 <__cleanup_context>
 8013000:	4630      	mov	r0, r6
 8013002:	b01f      	add	sp, #124	; 0x7c
 8013004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013008:	2900      	cmp	r1, #0
 801300a:	f43f af73 	beq.w	8012ef4 <rcl_init+0x2c>
 801300e:	260b      	movs	r6, #11
 8013010:	4630      	mov	r0, r6
 8013012:	b01f      	add	sp, #124	; 0x7c
 8013014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013018:	2664      	movs	r6, #100	; 0x64
 801301a:	4630      	mov	r0, r6
 801301c:	b01f      	add	sp, #124	; 0x7c
 801301e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013022:	f8d9 a000 	ldr.w	sl, [r9]
 8013026:	4a2c      	ldr	r2, [pc, #176]	; (80130d8 <rcl_init+0x210>)
 8013028:	6813      	ldr	r3, [r2, #0]
 801302a:	3301      	adds	r3, #1
 801302c:	d03b      	beq.n	80130a6 <rcl_init+0x1de>
 801302e:	6013      	str	r3, [r2, #0]
 8013030:	4619      	mov	r1, r3
 8013032:	2000      	movs	r0, #0
 8013034:	f8da 4014 	ldr.w	r4, [sl, #20]
 8013038:	f8c9 3004 	str.w	r3, [r9, #4]
 801303c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801303e:	3301      	adds	r3, #1
 8013040:	e9c4 1006 	strd	r1, r0, [r4, #24]
 8013044:	d039      	beq.n	80130ba <rcl_init+0x1f2>
 8013046:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 801304a:	b94b      	cbnz	r3, 8013060 <rcl_init+0x198>
 801304c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8013050:	f000 f962 	bl	8013318 <rcl_get_localhost_only>
 8013054:	4606      	mov	r6, r0
 8013056:	2800      	cmp	r0, #0
 8013058:	d1cf      	bne.n	8012ffa <rcl_init+0x132>
 801305a:	f8d9 3000 	ldr.w	r3, [r9]
 801305e:	695c      	ldr	r4, [r3, #20]
 8013060:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8013062:	aa18      	add	r2, sp, #96	; 0x60
 8013064:	a917      	add	r1, sp, #92	; 0x5c
 8013066:	f000 fd33 	bl	8013ad0 <rcl_validate_enclave_name>
 801306a:	4606      	mov	r6, r0
 801306c:	2800      	cmp	r0, #0
 801306e:	d1c4      	bne.n	8012ffa <rcl_init+0x132>
 8013070:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013072:	bb03      	cbnz	r3, 80130b6 <rcl_init+0x1ee>
 8013074:	f8d9 1000 	ldr.w	r1, [r9]
 8013078:	694b      	ldr	r3, [r1, #20]
 801307a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801307c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8013080:	f000 fbf2 	bl	8013868 <rcl_get_security_options_from_environment>
 8013084:	4606      	mov	r6, r0
 8013086:	2800      	cmp	r0, #0
 8013088:	d1b7      	bne.n	8012ffa <rcl_init+0x132>
 801308a:	f8d9 1000 	ldr.w	r1, [r9]
 801308e:	6948      	ldr	r0, [r1, #20]
 8013090:	3128      	adds	r1, #40	; 0x28
 8013092:	3018      	adds	r0, #24
 8013094:	f001 f9fe 	bl	8014494 <rmw_init>
 8013098:	4606      	mov	r6, r0
 801309a:	2800      	cmp	r0, #0
 801309c:	d0b8      	beq.n	8013010 <rcl_init+0x148>
 801309e:	f7ff fd1f 	bl	8012ae0 <rcl_convert_rmw_ret_to_rcl_ret>
 80130a2:	4606      	mov	r6, r0
 80130a4:	e7a9      	b.n	8012ffa <rcl_init+0x132>
 80130a6:	2401      	movs	r4, #1
 80130a8:	4618      	mov	r0, r3
 80130aa:	4621      	mov	r1, r4
 80130ac:	6014      	str	r4, [r2, #0]
 80130ae:	4623      	mov	r3, r4
 80130b0:	e7c0      	b.n	8013034 <rcl_init+0x16c>
 80130b2:	260a      	movs	r6, #10
 80130b4:	e7ac      	b.n	8013010 <rcl_init+0x148>
 80130b6:	2601      	movs	r6, #1
 80130b8:	e79f      	b.n	8012ffa <rcl_init+0x132>
 80130ba:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80130be:	f004 f80b 	bl	80170d8 <rcl_get_default_domain_id>
 80130c2:	4606      	mov	r6, r0
 80130c4:	2800      	cmp	r0, #0
 80130c6:	d198      	bne.n	8012ffa <rcl_init+0x132>
 80130c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80130ca:	3301      	adds	r3, #1
 80130cc:	f8d9 3000 	ldr.w	r3, [r9]
 80130d0:	bf08      	it	eq
 80130d2:	6260      	streq	r0, [r4, #36]	; 0x24
 80130d4:	695c      	ldr	r4, [r3, #20]
 80130d6:	e7b6      	b.n	8013046 <rcl_init+0x17e>
 80130d8:	20009f60 	.word	0x20009f60

080130dc <rcl_get_zero_initialized_init_options>:
 80130dc:	2000      	movs	r0, #0
 80130de:	4770      	bx	lr

080130e0 <rcl_init_options_init>:
 80130e0:	b084      	sub	sp, #16
 80130e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130e4:	b091      	sub	sp, #68	; 0x44
 80130e6:	af17      	add	r7, sp, #92	; 0x5c
 80130e8:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 80130ec:	2800      	cmp	r0, #0
 80130ee:	d044      	beq.n	801317a <rcl_init_options_init+0x9a>
 80130f0:	6803      	ldr	r3, [r0, #0]
 80130f2:	4606      	mov	r6, r0
 80130f4:	b133      	cbz	r3, 8013104 <rcl_init_options_init+0x24>
 80130f6:	2464      	movs	r4, #100	; 0x64
 80130f8:	4620      	mov	r0, r4
 80130fa:	b011      	add	sp, #68	; 0x44
 80130fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013100:	b004      	add	sp, #16
 8013102:	4770      	bx	lr
 8013104:	4638      	mov	r0, r7
 8013106:	f7fb fcaf 	bl	800ea68 <rcutils_allocator_is_valid>
 801310a:	2800      	cmp	r0, #0
 801310c:	d035      	beq.n	801317a <rcl_init_options_init+0x9a>
 801310e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013110:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8013112:	2050      	movs	r0, #80	; 0x50
 8013114:	4798      	blx	r3
 8013116:	4604      	mov	r4, r0
 8013118:	6030      	str	r0, [r6, #0]
 801311a:	2800      	cmp	r0, #0
 801311c:	d02f      	beq.n	801317e <rcl_init_options_init+0x9e>
 801311e:	46bc      	mov	ip, r7
 8013120:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013124:	4625      	mov	r5, r4
 8013126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013128:	f8dc 3000 	ldr.w	r3, [ip]
 801312c:	602b      	str	r3, [r5, #0]
 801312e:	a802      	add	r0, sp, #8
 8013130:	ad02      	add	r5, sp, #8
 8013132:	f000 ffcd 	bl	80140d0 <rmw_get_zero_initialized_init_options>
 8013136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013138:	3418      	adds	r4, #24
 801313a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801313c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801313e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013144:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013148:	6833      	ldr	r3, [r6, #0]
 801314a:	e884 0003 	stmia.w	r4, {r0, r1}
 801314e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8013152:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013156:	f103 0018 	add.w	r0, r3, #24
 801315a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 801315e:	f001 f8bf 	bl	80142e0 <rmw_init_options_init>
 8013162:	4604      	mov	r4, r0
 8013164:	2800      	cmp	r0, #0
 8013166:	d0c7      	beq.n	80130f8 <rcl_init_options_init+0x18>
 8013168:	6830      	ldr	r0, [r6, #0]
 801316a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801316c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801316e:	4798      	blx	r3
 8013170:	4620      	mov	r0, r4
 8013172:	f7ff fcb5 	bl	8012ae0 <rcl_convert_rmw_ret_to_rcl_ret>
 8013176:	4604      	mov	r4, r0
 8013178:	e7be      	b.n	80130f8 <rcl_init_options_init+0x18>
 801317a:	240b      	movs	r4, #11
 801317c:	e7bc      	b.n	80130f8 <rcl_init_options_init+0x18>
 801317e:	240a      	movs	r4, #10
 8013180:	e7ba      	b.n	80130f8 <rcl_init_options_init+0x18>
 8013182:	bf00      	nop

08013184 <rcl_init_options_fini>:
 8013184:	b570      	push	{r4, r5, r6, lr}
 8013186:	b086      	sub	sp, #24
 8013188:	b1c0      	cbz	r0, 80131bc <rcl_init_options_fini+0x38>
 801318a:	6804      	ldr	r4, [r0, #0]
 801318c:	4606      	mov	r6, r0
 801318e:	b1ac      	cbz	r4, 80131bc <rcl_init_options_fini+0x38>
 8013190:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013192:	ad01      	add	r5, sp, #4
 8013194:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013196:	6823      	ldr	r3, [r4, #0]
 8013198:	602b      	str	r3, [r5, #0]
 801319a:	a801      	add	r0, sp, #4
 801319c:	f7fb fc64 	bl	800ea68 <rcutils_allocator_is_valid>
 80131a0:	b160      	cbz	r0, 80131bc <rcl_init_options_fini+0x38>
 80131a2:	6830      	ldr	r0, [r6, #0]
 80131a4:	3018      	adds	r0, #24
 80131a6:	f001 f935 	bl	8014414 <rmw_init_options_fini>
 80131aa:	4604      	mov	r4, r0
 80131ac:	b950      	cbnz	r0, 80131c4 <rcl_init_options_fini+0x40>
 80131ae:	6830      	ldr	r0, [r6, #0]
 80131b0:	9b02      	ldr	r3, [sp, #8]
 80131b2:	9905      	ldr	r1, [sp, #20]
 80131b4:	4798      	blx	r3
 80131b6:	4620      	mov	r0, r4
 80131b8:	b006      	add	sp, #24
 80131ba:	bd70      	pop	{r4, r5, r6, pc}
 80131bc:	240b      	movs	r4, #11
 80131be:	4620      	mov	r0, r4
 80131c0:	b006      	add	sp, #24
 80131c2:	bd70      	pop	{r4, r5, r6, pc}
 80131c4:	f7ff fc8c 	bl	8012ae0 <rcl_convert_rmw_ret_to_rcl_ret>
 80131c8:	4604      	mov	r4, r0
 80131ca:	e7f8      	b.n	80131be <rcl_init_options_fini+0x3a>

080131cc <rcl_init_options_copy>:
 80131cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131d0:	b096      	sub	sp, #88	; 0x58
 80131d2:	2800      	cmp	r0, #0
 80131d4:	d063      	beq.n	801329e <rcl_init_options_copy+0xd2>
 80131d6:	6806      	ldr	r6, [r0, #0]
 80131d8:	4605      	mov	r5, r0
 80131da:	2e00      	cmp	r6, #0
 80131dc:	d05f      	beq.n	801329e <rcl_init_options_copy+0xd2>
 80131de:	460c      	mov	r4, r1
 80131e0:	2900      	cmp	r1, #0
 80131e2:	d05c      	beq.n	801329e <rcl_init_options_copy+0xd2>
 80131e4:	680b      	ldr	r3, [r1, #0]
 80131e6:	b123      	cbz	r3, 80131f2 <rcl_init_options_copy+0x26>
 80131e8:	2664      	movs	r6, #100	; 0x64
 80131ea:	4630      	mov	r0, r6
 80131ec:	b016      	add	sp, #88	; 0x58
 80131ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80131f4:	af11      	add	r7, sp, #68	; 0x44
 80131f6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80131f8:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 80131fc:	6833      	ldr	r3, [r6, #0]
 80131fe:	603b      	str	r3, [r7, #0]
 8013200:	4640      	mov	r0, r8
 8013202:	f7fb fc31 	bl	800ea68 <rcutils_allocator_is_valid>
 8013206:	2800      	cmp	r0, #0
 8013208:	d049      	beq.n	801329e <rcl_init_options_copy+0xd2>
 801320a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801320c:	9915      	ldr	r1, [sp, #84]	; 0x54
 801320e:	2050      	movs	r0, #80	; 0x50
 8013210:	4798      	blx	r3
 8013212:	4606      	mov	r6, r0
 8013214:	6020      	str	r0, [r4, #0]
 8013216:	2800      	cmp	r0, #0
 8013218:	d077      	beq.n	801330a <rcl_init_options_copy+0x13e>
 801321a:	46c4      	mov	ip, r8
 801321c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013220:	4637      	mov	r7, r6
 8013222:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013224:	f8dc 3000 	ldr.w	r3, [ip]
 8013228:	603b      	str	r3, [r7, #0]
 801322a:	a802      	add	r0, sp, #8
 801322c:	af02      	add	r7, sp, #8
 801322e:	f000 ff4f 	bl	80140d0 <rmw_get_zero_initialized_init_options>
 8013232:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013234:	3618      	adds	r6, #24
 8013236:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013238:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801323a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801323c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801323e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013240:	e897 0003 	ldmia.w	r7, {r0, r1}
 8013244:	ab16      	add	r3, sp, #88	; 0x58
 8013246:	e886 0003 	stmia.w	r6, {r0, r1}
 801324a:	e913 0003 	ldmdb	r3, {r0, r1}
 801324e:	6823      	ldr	r3, [r4, #0]
 8013250:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013254:	f103 0018 	add.w	r0, r3, #24
 8013258:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 801325c:	f001 f840 	bl	80142e0 <rmw_init_options_init>
 8013260:	4606      	mov	r6, r0
 8013262:	bb08      	cbnz	r0, 80132a8 <rcl_init_options_copy+0xdc>
 8013264:	682f      	ldr	r7, [r5, #0]
 8013266:	f8d4 c000 	ldr.w	ip, [r4]
 801326a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801326c:	4666      	mov	r6, ip
 801326e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013270:	683b      	ldr	r3, [r7, #0]
 8013272:	6033      	str	r3, [r6, #0]
 8013274:	f10c 0018 	add.w	r0, ip, #24
 8013278:	f001 f8cc 	bl	8014414 <rmw_init_options_fini>
 801327c:	4607      	mov	r7, r0
 801327e:	b1f0      	cbz	r0, 80132be <rcl_init_options_copy+0xf2>
 8013280:	f7fb fc00 	bl	800ea84 <rcutils_get_error_string>
 8013284:	f7fb fc14 	bl	800eab0 <rcutils_reset_error>
 8013288:	4620      	mov	r0, r4
 801328a:	f7ff ff7b 	bl	8013184 <rcl_init_options_fini>
 801328e:	4606      	mov	r6, r0
 8013290:	2800      	cmp	r0, #0
 8013292:	d1aa      	bne.n	80131ea <rcl_init_options_copy+0x1e>
 8013294:	4638      	mov	r0, r7
 8013296:	f7ff fc23 	bl	8012ae0 <rcl_convert_rmw_ret_to_rcl_ret>
 801329a:	4606      	mov	r6, r0
 801329c:	e7a5      	b.n	80131ea <rcl_init_options_copy+0x1e>
 801329e:	260b      	movs	r6, #11
 80132a0:	4630      	mov	r0, r6
 80132a2:	b016      	add	sp, #88	; 0x58
 80132a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80132aa:	9915      	ldr	r1, [sp, #84]	; 0x54
 80132ac:	6820      	ldr	r0, [r4, #0]
 80132ae:	4798      	blx	r3
 80132b0:	4630      	mov	r0, r6
 80132b2:	f7ff fc15 	bl	8012ae0 <rcl_convert_rmw_ret_to_rcl_ret>
 80132b6:	4606      	mov	r6, r0
 80132b8:	2800      	cmp	r0, #0
 80132ba:	d0d3      	beq.n	8013264 <rcl_init_options_copy+0x98>
 80132bc:	e795      	b.n	80131ea <rcl_init_options_copy+0x1e>
 80132be:	a802      	add	r0, sp, #8
 80132c0:	ae02      	add	r6, sp, #8
 80132c2:	6827      	ldr	r7, [r4, #0]
 80132c4:	f000 ff04 	bl	80140d0 <rmw_get_zero_initialized_init_options>
 80132c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80132ca:	3718      	adds	r7, #24
 80132cc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80132ce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80132d0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80132d2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80132d4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80132d6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80132da:	682a      	ldr	r2, [r5, #0]
 80132dc:	6823      	ldr	r3, [r4, #0]
 80132de:	e887 0003 	stmia.w	r7, {r0, r1}
 80132e2:	f102 0018 	add.w	r0, r2, #24
 80132e6:	f103 0118 	add.w	r1, r3, #24
 80132ea:	f001 f851 	bl	8014390 <rmw_init_options_copy>
 80132ee:	4606      	mov	r6, r0
 80132f0:	2800      	cmp	r0, #0
 80132f2:	f43f af7a 	beq.w	80131ea <rcl_init_options_copy+0x1e>
 80132f6:	f7fb fbc5 	bl	800ea84 <rcutils_get_error_string>
 80132fa:	f7fb fbd9 	bl	800eab0 <rcutils_reset_error>
 80132fe:	4620      	mov	r0, r4
 8013300:	f7ff ff40 	bl	8013184 <rcl_init_options_fini>
 8013304:	b118      	cbz	r0, 801330e <rcl_init_options_copy+0x142>
 8013306:	4606      	mov	r6, r0
 8013308:	e76f      	b.n	80131ea <rcl_init_options_copy+0x1e>
 801330a:	260a      	movs	r6, #10
 801330c:	e76d      	b.n	80131ea <rcl_init_options_copy+0x1e>
 801330e:	4630      	mov	r0, r6
 8013310:	f7ff fbe6 	bl	8012ae0 <rcl_convert_rmw_ret_to_rcl_ret>
 8013314:	4606      	mov	r6, r0
 8013316:	e768      	b.n	80131ea <rcl_init_options_copy+0x1e>

08013318 <rcl_get_localhost_only>:
 8013318:	b510      	push	{r4, lr}
 801331a:	b082      	sub	sp, #8
 801331c:	2300      	movs	r3, #0
 801331e:	9301      	str	r3, [sp, #4]
 8013320:	b1b8      	cbz	r0, 8013352 <rcl_get_localhost_only+0x3a>
 8013322:	4604      	mov	r4, r0
 8013324:	a901      	add	r1, sp, #4
 8013326:	480c      	ldr	r0, [pc, #48]	; (8013358 <rcl_get_localhost_only+0x40>)
 8013328:	f000 fd4c 	bl	8013dc4 <rcutils_get_env>
 801332c:	b110      	cbz	r0, 8013334 <rcl_get_localhost_only+0x1c>
 801332e:	2001      	movs	r0, #1
 8013330:	b002      	add	sp, #8
 8013332:	bd10      	pop	{r4, pc}
 8013334:	9b01      	ldr	r3, [sp, #4]
 8013336:	b113      	cbz	r3, 801333e <rcl_get_localhost_only+0x26>
 8013338:	781a      	ldrb	r2, [r3, #0]
 801333a:	2a31      	cmp	r2, #49	; 0x31
 801333c:	d004      	beq.n	8013348 <rcl_get_localhost_only+0x30>
 801333e:	2302      	movs	r3, #2
 8013340:	2000      	movs	r0, #0
 8013342:	7023      	strb	r3, [r4, #0]
 8013344:	b002      	add	sp, #8
 8013346:	bd10      	pop	{r4, pc}
 8013348:	785b      	ldrb	r3, [r3, #1]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d1f7      	bne.n	801333e <rcl_get_localhost_only+0x26>
 801334e:	2301      	movs	r3, #1
 8013350:	e7f6      	b.n	8013340 <rcl_get_localhost_only+0x28>
 8013352:	200b      	movs	r0, #11
 8013354:	b002      	add	sp, #8
 8013356:	bd10      	pop	{r4, pc}
 8013358:	08019278 	.word	0x08019278

0801335c <rcl_get_zero_initialized_node>:
 801335c:	4a03      	ldr	r2, [pc, #12]	; (801336c <rcl_get_zero_initialized_node+0x10>)
 801335e:	4603      	mov	r3, r0
 8013360:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013364:	e883 0003 	stmia.w	r3, {r0, r1}
 8013368:	4618      	mov	r0, r3
 801336a:	4770      	bx	lr
 801336c:	08019298 	.word	0x08019298

08013370 <rcl_node_init>:
 8013370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013374:	b09b      	sub	sp, #108	; 0x6c
 8013376:	4604      	mov	r4, r0
 8013378:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 801337c:	f04f 0c00 	mov.w	ip, #0
 8013380:	a815      	add	r0, sp, #84	; 0x54
 8013382:	460e      	mov	r6, r1
 8013384:	4615      	mov	r5, r2
 8013386:	461f      	mov	r7, r3
 8013388:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 801338c:	f003 ff60 	bl	8017250 <rcl_guard_condition_get_default_options>
 8013390:	f1b8 0f00 	cmp.w	r8, #0
 8013394:	f000 80fd 	beq.w	8013592 <rcl_node_init+0x222>
 8013398:	f108 0b04 	add.w	fp, r8, #4
 801339c:	4658      	mov	r0, fp
 801339e:	f7fb fb63 	bl	800ea68 <rcutils_allocator_is_valid>
 80133a2:	2800      	cmp	r0, #0
 80133a4:	f000 80f5 	beq.w	8013592 <rcl_node_init+0x222>
 80133a8:	2e00      	cmp	r6, #0
 80133aa:	f000 80f2 	beq.w	8013592 <rcl_node_init+0x222>
 80133ae:	2d00      	cmp	r5, #0
 80133b0:	f000 80ef 	beq.w	8013592 <rcl_node_init+0x222>
 80133b4:	2c00      	cmp	r4, #0
 80133b6:	f000 80ec 	beq.w	8013592 <rcl_node_init+0x222>
 80133ba:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80133be:	f1b9 0f00 	cmp.w	r9, #0
 80133c2:	f040 8112 	bne.w	80135ea <rcl_node_init+0x27a>
 80133c6:	2f00      	cmp	r7, #0
 80133c8:	f000 80e3 	beq.w	8013592 <rcl_node_init+0x222>
 80133cc:	4638      	mov	r0, r7
 80133ce:	f7ff fba5 	bl	8012b1c <rcl_context_is_valid>
 80133d2:	4682      	mov	sl, r0
 80133d4:	2800      	cmp	r0, #0
 80133d6:	f000 80e2 	beq.w	801359e <rcl_node_init+0x22e>
 80133da:	464a      	mov	r2, r9
 80133dc:	a914      	add	r1, sp, #80	; 0x50
 80133de:	4630      	mov	r0, r6
 80133e0:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 80133e4:	f000 fef4 	bl	80141d0 <rmw_validate_node_name>
 80133e8:	4681      	mov	r9, r0
 80133ea:	2800      	cmp	r0, #0
 80133ec:	f040 80d3 	bne.w	8013596 <rcl_node_init+0x226>
 80133f0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80133f2:	2800      	cmp	r0, #0
 80133f4:	f040 8105 	bne.w	8013602 <rcl_node_init+0x292>
 80133f8:	4628      	mov	r0, r5
 80133fa:	f7ec fefb 	bl	80001f4 <strlen>
 80133fe:	2800      	cmp	r0, #0
 8013400:	f040 80d0 	bne.w	80135a4 <rcl_node_init+0x234>
 8013404:	4d8e      	ldr	r5, [pc, #568]	; (8013640 <rcl_node_init+0x2d0>)
 8013406:	a914      	add	r1, sp, #80	; 0x50
 8013408:	2200      	movs	r2, #0
 801340a:	4628      	mov	r0, r5
 801340c:	f000 fec2 	bl	8014194 <rmw_validate_namespace>
 8013410:	4681      	mov	r9, r0
 8013412:	2800      	cmp	r0, #0
 8013414:	f040 80bf 	bne.w	8013596 <rcl_node_init+0x226>
 8013418:	4682      	mov	sl, r0
 801341a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801341c:	2b00      	cmp	r3, #0
 801341e:	f040 80f5 	bne.w	801360c <rcl_node_init+0x29c>
 8013422:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8013426:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801342a:	9307      	str	r3, [sp, #28]
 801342c:	2030      	movs	r0, #48	; 0x30
 801342e:	4790      	blx	r2
 8013430:	4681      	mov	r9, r0
 8013432:	6060      	str	r0, [r4, #4]
 8013434:	2800      	cmp	r0, #0
 8013436:	f000 80de 	beq.w	80135f6 <rcl_node_init+0x286>
 801343a:	9b07      	ldr	r3, [sp, #28]
 801343c:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8013440:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 8013444:	a80a      	add	r0, sp, #40	; 0x28
 8013446:	f000 f92b 	bl	80136a0 <rcl_node_get_default_options>
 801344a:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 801344e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013452:	46cc      	mov	ip, r9
 8013454:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013458:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 801345c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8013460:	6861      	ldr	r1, [r4, #4]
 8013462:	6027      	str	r7, [r4, #0]
 8013464:	4640      	mov	r0, r8
 8013466:	f000 f937 	bl	80136d8 <rcl_node_options_copy>
 801346a:	2800      	cmp	r0, #0
 801346c:	d167      	bne.n	801353e <rcl_node_init+0x1ce>
 801346e:	4628      	mov	r0, r5
 8013470:	f7ec fec0 	bl	80001f4 <strlen>
 8013474:	4428      	add	r0, r5
 8013476:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801347a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801347e:	2b2f      	cmp	r3, #47	; 0x2f
 8013480:	bf08      	it	eq
 8013482:	4970      	ldreq	r1, [pc, #448]	; (8013644 <rcl_node_init+0x2d4>)
 8013484:	f8db 3010 	ldr.w	r3, [fp, #16]
 8013488:	bf18      	it	ne
 801348a:	496f      	ldrne	r1, [pc, #444]	; (8013648 <rcl_node_init+0x2d8>)
 801348c:	9604      	str	r6, [sp, #16]
 801348e:	e9cd 1502 	strd	r1, r5, [sp, #8]
 8013492:	e9cd 3200 	strd	r3, r2, [sp]
 8013496:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 801349a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801349e:	f000 fc57 	bl	8013d50 <rcutils_format_string_limit>
 80134a2:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 80134a6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80134aa:	f8d9 3000 	ldr.w	r3, [r9]
 80134ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80134b0:	1c59      	adds	r1, r3, #1
 80134b2:	f000 80b7 	beq.w	8013624 <rcl_node_init+0x2b4>
 80134b6:	683a      	ldr	r2, [r7, #0]
 80134b8:	f8c9 301c 	str.w	r3, [r9, #28]
 80134bc:	6952      	ldr	r2, [r2, #20]
 80134be:	6821      	ldr	r1, [r4, #0]
 80134c0:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80134c4:	6808      	ldr	r0, [r1, #0]
 80134c6:	f1a2 0201 	sub.w	r2, r2, #1
 80134ca:	fab2 f282 	clz	r2, r2
 80134ce:	0952      	lsrs	r2, r2, #5
 80134d0:	9200      	str	r2, [sp, #0]
 80134d2:	4631      	mov	r1, r6
 80134d4:	3028      	adds	r0, #40	; 0x28
 80134d6:	462a      	mov	r2, r5
 80134d8:	f001 fa44 	bl	8014964 <rmw_create_node>
 80134dc:	6863      	ldr	r3, [r4, #4]
 80134de:	f8c9 0020 	str.w	r0, [r9, #32]
 80134e2:	6a18      	ldr	r0, [r3, #32]
 80134e4:	b368      	cbz	r0, 8013542 <rcl_node_init+0x1d2>
 80134e6:	f001 facf 	bl	8014a88 <rmw_node_get_graph_guard_condition>
 80134ea:	4681      	mov	r9, r0
 80134ec:	b338      	cbz	r0, 801353e <rcl_node_init+0x1ce>
 80134ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80134f2:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80134f6:	6866      	ldr	r6, [r4, #4]
 80134f8:	2008      	movs	r0, #8
 80134fa:	4798      	blx	r3
 80134fc:	6863      	ldr	r3, [r4, #4]
 80134fe:	6270      	str	r0, [r6, #36]	; 0x24
 8013500:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8013502:	b1f6      	cbz	r6, 8013542 <rcl_node_init+0x1d2>
 8013504:	a808      	add	r0, sp, #32
 8013506:	f003 fe1b 	bl	8017140 <rcl_get_zero_initialized_guard_condition>
 801350a:	a808      	add	r0, sp, #32
 801350c:	c803      	ldmia	r0, {r0, r1}
 801350e:	e886 0003 	stmia.w	r6, {r0, r1}
 8013512:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8013516:	ae15      	add	r6, sp, #84	; 0x54
 8013518:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801351a:	f8db 3000 	ldr.w	r3, [fp]
 801351e:	6033      	str	r3, [r6, #0]
 8013520:	ab1a      	add	r3, sp, #104	; 0x68
 8013522:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8013526:	6866      	ldr	r6, [r4, #4]
 8013528:	6a76      	ldr	r6, [r6, #36]	; 0x24
 801352a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801352e:	4649      	mov	r1, r9
 8013530:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013532:	4630      	mov	r0, r6
 8013534:	463a      	mov	r2, r7
 8013536:	f003 fe0d 	bl	8017154 <rcl_guard_condition_init_from_rmw>
 801353a:	4681      	mov	r9, r0
 801353c:	b328      	cbz	r0, 801358a <rcl_node_init+0x21a>
 801353e:	6863      	ldr	r3, [r4, #4]
 8013540:	b1f3      	cbz	r3, 8013580 <rcl_node_init+0x210>
 8013542:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8013544:	b128      	cbz	r0, 8013552 <rcl_node_init+0x1e2>
 8013546:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801354a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801354e:	4798      	blx	r3
 8013550:	6863      	ldr	r3, [r4, #4]
 8013552:	6a18      	ldr	r0, [r3, #32]
 8013554:	b110      	cbz	r0, 801355c <rcl_node_init+0x1ec>
 8013556:	f001 fa1d 	bl	8014994 <rmw_destroy_node>
 801355a:	6863      	ldr	r3, [r4, #4]
 801355c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801355e:	b148      	cbz	r0, 8013574 <rcl_node_init+0x204>
 8013560:	f003 fe50 	bl	8017204 <rcl_guard_condition_fini>
 8013564:	6862      	ldr	r2, [r4, #4]
 8013566:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801356a:	6a50      	ldr	r0, [r2, #36]	; 0x24
 801356c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013570:	4798      	blx	r3
 8013572:	6863      	ldr	r3, [r4, #4]
 8013574:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8013578:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801357c:	4618      	mov	r0, r3
 801357e:	4790      	blx	r2
 8013580:	2300      	movs	r3, #0
 8013582:	e9c4 3300 	strd	r3, r3, [r4]
 8013586:	f04f 0901 	mov.w	r9, #1
 801358a:	f1ba 0f00 	cmp.w	sl, #0
 801358e:	d125      	bne.n	80135dc <rcl_node_init+0x26c>
 8013590:	e001      	b.n	8013596 <rcl_node_init+0x226>
 8013592:	f04f 090b 	mov.w	r9, #11
 8013596:	4648      	mov	r0, r9
 8013598:	b01b      	add	sp, #108	; 0x6c
 801359a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801359e:	f04f 0965 	mov.w	r9, #101	; 0x65
 80135a2:	e7f8      	b.n	8013596 <rcl_node_init+0x226>
 80135a4:	782b      	ldrb	r3, [r5, #0]
 80135a6:	2b2f      	cmp	r3, #47	; 0x2f
 80135a8:	f43f af2d 	beq.w	8013406 <rcl_node_init+0x96>
 80135ac:	4927      	ldr	r1, [pc, #156]	; (801364c <rcl_node_init+0x2dc>)
 80135ae:	f8db 3010 	ldr.w	r3, [fp, #16]
 80135b2:	9300      	str	r3, [sp, #0]
 80135b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80135b8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80135bc:	9503      	str	r5, [sp, #12]
 80135be:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80135c2:	f000 fbc5 	bl	8013d50 <rcutils_format_string_limit>
 80135c6:	4605      	mov	r5, r0
 80135c8:	b348      	cbz	r0, 801361e <rcl_node_init+0x2ae>
 80135ca:	2200      	movs	r2, #0
 80135cc:	a914      	add	r1, sp, #80	; 0x50
 80135ce:	9214      	str	r2, [sp, #80]	; 0x50
 80135d0:	f000 fde0 	bl	8014194 <rmw_validate_namespace>
 80135d4:	4681      	mov	r9, r0
 80135d6:	2800      	cmp	r0, #0
 80135d8:	f43f af1f 	beq.w	801341a <rcl_node_init+0xaa>
 80135dc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80135e0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80135e4:	4628      	mov	r0, r5
 80135e6:	4798      	blx	r3
 80135e8:	e7d5      	b.n	8013596 <rcl_node_init+0x226>
 80135ea:	f04f 0964 	mov.w	r9, #100	; 0x64
 80135ee:	4648      	mov	r0, r9
 80135f0:	b01b      	add	sp, #108	; 0x6c
 80135f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135f6:	f04f 090a 	mov.w	r9, #10
 80135fa:	f1ba 0f00 	cmp.w	sl, #0
 80135fe:	d1ed      	bne.n	80135dc <rcl_node_init+0x26c>
 8013600:	e7c9      	b.n	8013596 <rcl_node_init+0x226>
 8013602:	f000 fe37 	bl	8014274 <rmw_node_name_validation_result_string>
 8013606:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 801360a:	e7c4      	b.n	8013596 <rcl_node_init+0x226>
 801360c:	4618      	mov	r0, r3
 801360e:	f000 fdd3 	bl	80141b8 <rmw_namespace_validation_result_string>
 8013612:	f04f 09ca 	mov.w	r9, #202	; 0xca
 8013616:	f1ba 0f00 	cmp.w	sl, #0
 801361a:	d1df      	bne.n	80135dc <rcl_node_init+0x26c>
 801361c:	e7bb      	b.n	8013596 <rcl_node_init+0x226>
 801361e:	f04f 090a 	mov.w	r9, #10
 8013622:	e7b8      	b.n	8013596 <rcl_node_init+0x226>
 8013624:	a813      	add	r0, sp, #76	; 0x4c
 8013626:	f003 fd57 	bl	80170d8 <rcl_get_default_domain_id>
 801362a:	2800      	cmp	r0, #0
 801362c:	d187      	bne.n	801353e <rcl_node_init+0x1ce>
 801362e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013630:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013634:	1c5a      	adds	r2, r3, #1
 8013636:	bf04      	itt	eq
 8013638:	9013      	streq	r0, [sp, #76]	; 0x4c
 801363a:	4603      	moveq	r3, r0
 801363c:	e73b      	b.n	80134b6 <rcl_node_init+0x146>
 801363e:	bf00      	nop
 8013640:	08019290 	.word	0x08019290
 8013644:	08019220 	.word	0x08019220
 8013648:	08019254 	.word	0x08019254
 801364c:	08019294 	.word	0x08019294

08013650 <rcl_node_is_valid>:
 8013650:	b130      	cbz	r0, 8013660 <rcl_node_is_valid+0x10>
 8013652:	6843      	ldr	r3, [r0, #4]
 8013654:	b123      	cbz	r3, 8013660 <rcl_node_is_valid+0x10>
 8013656:	6a1b      	ldr	r3, [r3, #32]
 8013658:	b113      	cbz	r3, 8013660 <rcl_node_is_valid+0x10>
 801365a:	6800      	ldr	r0, [r0, #0]
 801365c:	f7ff ba5e 	b.w	8012b1c <rcl_context_is_valid>
 8013660:	2000      	movs	r0, #0
 8013662:	4770      	bx	lr

08013664 <rcl_node_get_name>:
 8013664:	b120      	cbz	r0, 8013670 <rcl_node_get_name+0xc>
 8013666:	6840      	ldr	r0, [r0, #4]
 8013668:	b110      	cbz	r0, 8013670 <rcl_node_get_name+0xc>
 801366a:	6a00      	ldr	r0, [r0, #32]
 801366c:	b100      	cbz	r0, 8013670 <rcl_node_get_name+0xc>
 801366e:	6880      	ldr	r0, [r0, #8]
 8013670:	4770      	bx	lr
 8013672:	bf00      	nop

08013674 <rcl_node_get_namespace>:
 8013674:	b120      	cbz	r0, 8013680 <rcl_node_get_namespace+0xc>
 8013676:	6840      	ldr	r0, [r0, #4]
 8013678:	b110      	cbz	r0, 8013680 <rcl_node_get_namespace+0xc>
 801367a:	6a00      	ldr	r0, [r0, #32]
 801367c:	b100      	cbz	r0, 8013680 <rcl_node_get_namespace+0xc>
 801367e:	68c0      	ldr	r0, [r0, #12]
 8013680:	4770      	bx	lr
 8013682:	bf00      	nop

08013684 <rcl_node_get_options>:
 8013684:	b128      	cbz	r0, 8013692 <rcl_node_get_options+0xe>
 8013686:	6840      	ldr	r0, [r0, #4]
 8013688:	b118      	cbz	r0, 8013692 <rcl_node_get_options+0xe>
 801368a:	6a03      	ldr	r3, [r0, #32]
 801368c:	2b00      	cmp	r3, #0
 801368e:	bf08      	it	eq
 8013690:	2000      	moveq	r0, #0
 8013692:	4770      	bx	lr

08013694 <rcl_node_get_rmw_handle>:
 8013694:	b110      	cbz	r0, 801369c <rcl_node_get_rmw_handle+0x8>
 8013696:	6840      	ldr	r0, [r0, #4]
 8013698:	b100      	cbz	r0, 801369c <rcl_node_get_rmw_handle+0x8>
 801369a:	6a00      	ldr	r0, [r0, #32]
 801369c:	4770      	bx	lr
 801369e:	bf00      	nop

080136a0 <rcl_node_get_default_options>:
 80136a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136a2:	b087      	sub	sp, #28
 80136a4:	4607      	mov	r7, r0
 80136a6:	466d      	mov	r5, sp
 80136a8:	4668      	mov	r0, sp
 80136aa:	f7fb f9cf 	bl	800ea4c <rcutils_get_default_allocator>
 80136ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80136b0:	4c08      	ldr	r4, [pc, #32]	; (80136d4 <rcl_node_get_default_options+0x34>)
 80136b2:	f8d5 c000 	ldr.w	ip, [r5]
 80136b6:	1d26      	adds	r6, r4, #4
 80136b8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80136ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80136bc:	463d      	mov	r5, r7
 80136be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80136c0:	f8c6 c000 	str.w	ip, [r6]
 80136c4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80136c8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80136cc:	4638      	mov	r0, r7
 80136ce:	b007      	add	sp, #28
 80136d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136d2:	bf00      	nop
 80136d4:	20000068 	.word	0x20000068

080136d8 <rcl_node_options_copy>:
 80136d8:	b1c8      	cbz	r0, 801370e <rcl_node_options_copy+0x36>
 80136da:	b4f0      	push	{r4, r5, r6, r7}
 80136dc:	460f      	mov	r7, r1
 80136de:	b199      	cbz	r1, 8013708 <rcl_node_options_copy+0x30>
 80136e0:	4288      	cmp	r0, r1
 80136e2:	4606      	mov	r6, r0
 80136e4:	d010      	beq.n	8013708 <rcl_node_options_copy+0x30>
 80136e6:	4605      	mov	r5, r0
 80136e8:	460c      	mov	r4, r1
 80136ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80136ee:	f844 3b04 	str.w	r3, [r4], #4
 80136f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80136f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80136f6:	7e32      	ldrb	r2, [r6, #24]
 80136f8:	6829      	ldr	r1, [r5, #0]
 80136fa:	7e73      	ldrb	r3, [r6, #25]
 80136fc:	6021      	str	r1, [r4, #0]
 80136fe:	2000      	movs	r0, #0
 8013700:	763a      	strb	r2, [r7, #24]
 8013702:	767b      	strb	r3, [r7, #25]
 8013704:	bcf0      	pop	{r4, r5, r6, r7}
 8013706:	4770      	bx	lr
 8013708:	200b      	movs	r0, #11
 801370a:	bcf0      	pop	{r4, r5, r6, r7}
 801370c:	4770      	bx	lr
 801370e:	200b      	movs	r0, #11
 8013710:	4770      	bx	lr
 8013712:	bf00      	nop

08013714 <exact_match_lookup>:
 8013714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013716:	f102 0708 	add.w	r7, r2, #8
 801371a:	460b      	mov	r3, r1
 801371c:	4614      	mov	r4, r2
 801371e:	4606      	mov	r6, r0
 8013720:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8013724:	b085      	sub	sp, #20
 8013726:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801372a:	4618      	mov	r0, r3
 801372c:	4918      	ldr	r1, [pc, #96]	; (8013790 <exact_match_lookup+0x7c>)
 801372e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013732:	f000 faff 	bl	8013d34 <rcutils_join_path>
 8013736:	7833      	ldrb	r3, [r6, #0]
 8013738:	2b2f      	cmp	r3, #47	; 0x2f
 801373a:	4605      	mov	r5, r0
 801373c:	d021      	beq.n	8013782 <exact_match_lookup+0x6e>
 801373e:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8013742:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013746:	1c70      	adds	r0, r6, #1
 8013748:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801374c:	f000 faf8 	bl	8013d40 <rcutils_to_native_path>
 8013750:	4606      	mov	r6, r0
 8013752:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8013756:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801375a:	4631      	mov	r1, r6
 801375c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013760:	4628      	mov	r0, r5
 8013762:	f000 fae7 	bl	8013d34 <rcutils_join_path>
 8013766:	6862      	ldr	r2, [r4, #4]
 8013768:	6921      	ldr	r1, [r4, #16]
 801376a:	4603      	mov	r3, r0
 801376c:	4630      	mov	r0, r6
 801376e:	461e      	mov	r6, r3
 8013770:	4790      	blx	r2
 8013772:	4628      	mov	r0, r5
 8013774:	6863      	ldr	r3, [r4, #4]
 8013776:	6921      	ldr	r1, [r4, #16]
 8013778:	4798      	blx	r3
 801377a:	4635      	mov	r5, r6
 801377c:	4628      	mov	r0, r5
 801377e:	b005      	add	sp, #20
 8013780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013782:	7873      	ldrb	r3, [r6, #1]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d1da      	bne.n	801373e <exact_match_lookup+0x2a>
 8013788:	4628      	mov	r0, r5
 801378a:	b005      	add	sp, #20
 801378c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801378e:	bf00      	nop
 8013790:	080192dc 	.word	0x080192dc

08013794 <rcl_get_secure_root>:
 8013794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013798:	b085      	sub	sp, #20
 801379a:	b168      	cbz	r0, 80137b8 <rcl_get_secure_root+0x24>
 801379c:	4607      	mov	r7, r0
 801379e:	4608      	mov	r0, r1
 80137a0:	460c      	mov	r4, r1
 80137a2:	f7fb f961 	bl	800ea68 <rcutils_allocator_is_valid>
 80137a6:	b138      	cbz	r0, 80137b8 <rcl_get_secure_root+0x24>
 80137a8:	2300      	movs	r3, #0
 80137aa:	482d      	ldr	r0, [pc, #180]	; (8013860 <rcl_get_secure_root+0xcc>)
 80137ac:	9303      	str	r3, [sp, #12]
 80137ae:	a903      	add	r1, sp, #12
 80137b0:	f000 fb08 	bl	8013dc4 <rcutils_get_env>
 80137b4:	4605      	mov	r5, r0
 80137b6:	b120      	cbz	r0, 80137c2 <rcl_get_secure_root+0x2e>
 80137b8:	2500      	movs	r5, #0
 80137ba:	4628      	mov	r0, r5
 80137bc:	b005      	add	sp, #20
 80137be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137c2:	9b03      	ldr	r3, [sp, #12]
 80137c4:	781a      	ldrb	r2, [r3, #0]
 80137c6:	2a00      	cmp	r2, #0
 80137c8:	d0f6      	beq.n	80137b8 <rcl_get_secure_root+0x24>
 80137ca:	f104 090c 	add.w	r9, r4, #12
 80137ce:	e899 0003 	ldmia.w	r9, {r0, r1}
 80137d2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80137d6:	4618      	mov	r0, r3
 80137d8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80137dc:	f000 fbe2 	bl	8013fa4 <rcutils_strdup>
 80137e0:	4680      	mov	r8, r0
 80137e2:	2800      	cmp	r0, #0
 80137e4:	d0e8      	beq.n	80137b8 <rcl_get_secure_root+0x24>
 80137e6:	481f      	ldr	r0, [pc, #124]	; (8013864 <rcl_get_secure_root+0xd0>)
 80137e8:	9503      	str	r5, [sp, #12]
 80137ea:	a903      	add	r1, sp, #12
 80137ec:	f000 faea 	bl	8013dc4 <rcutils_get_env>
 80137f0:	b160      	cbz	r0, 801380c <rcl_get_secure_root+0x78>
 80137f2:	2600      	movs	r6, #0
 80137f4:	6863      	ldr	r3, [r4, #4]
 80137f6:	6921      	ldr	r1, [r4, #16]
 80137f8:	4630      	mov	r0, r6
 80137fa:	4798      	blx	r3
 80137fc:	4640      	mov	r0, r8
 80137fe:	6863      	ldr	r3, [r4, #4]
 8013800:	6921      	ldr	r1, [r4, #16]
 8013802:	4798      	blx	r3
 8013804:	4628      	mov	r0, r5
 8013806:	b005      	add	sp, #20
 8013808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801380c:	9b03      	ldr	r3, [sp, #12]
 801380e:	781e      	ldrb	r6, [r3, #0]
 8013810:	b1f6      	cbz	r6, 8013850 <rcl_get_secure_root+0xbc>
 8013812:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013816:	e88d 0003 	stmia.w	sp, {r0, r1}
 801381a:	4618      	mov	r0, r3
 801381c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013820:	f000 fbc0 	bl	8013fa4 <rcutils_strdup>
 8013824:	4606      	mov	r6, r0
 8013826:	2800      	cmp	r0, #0
 8013828:	d0e3      	beq.n	80137f2 <rcl_get_secure_root+0x5e>
 801382a:	4622      	mov	r2, r4
 801382c:	4641      	mov	r1, r8
 801382e:	f7ff ff71 	bl	8013714 <exact_match_lookup>
 8013832:	4605      	mov	r5, r0
 8013834:	2d00      	cmp	r5, #0
 8013836:	d0dd      	beq.n	80137f4 <rcl_get_secure_root+0x60>
 8013838:	4628      	mov	r0, r5
 801383a:	f000 fa79 	bl	8013d30 <rcutils_is_directory>
 801383e:	4607      	mov	r7, r0
 8013840:	2800      	cmp	r0, #0
 8013842:	d1d7      	bne.n	80137f4 <rcl_get_secure_root+0x60>
 8013844:	4628      	mov	r0, r5
 8013846:	6863      	ldr	r3, [r4, #4]
 8013848:	6921      	ldr	r1, [r4, #16]
 801384a:	4798      	blx	r3
 801384c:	463d      	mov	r5, r7
 801384e:	e7d1      	b.n	80137f4 <rcl_get_secure_root+0x60>
 8013850:	4638      	mov	r0, r7
 8013852:	4622      	mov	r2, r4
 8013854:	4641      	mov	r1, r8
 8013856:	f7ff ff5d 	bl	8013714 <exact_match_lookup>
 801385a:	4605      	mov	r5, r0
 801385c:	e7ea      	b.n	8013834 <rcl_get_secure_root+0xa0>
 801385e:	bf00      	nop
 8013860:	080192e8 	.word	0x080192e8
 8013864:	08019300 	.word	0x08019300

08013868 <rcl_get_security_options_from_environment>:
 8013868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801386c:	b082      	sub	sp, #8
 801386e:	4607      	mov	r7, r0
 8013870:	4688      	mov	r8, r1
 8013872:	2400      	movs	r4, #0
 8013874:	481d      	ldr	r0, [pc, #116]	; (80138ec <rcl_get_security_options_from_environment+0x84>)
 8013876:	9401      	str	r4, [sp, #4]
 8013878:	a901      	add	r1, sp, #4
 801387a:	4616      	mov	r6, r2
 801387c:	f000 faa2 	bl	8013dc4 <rcutils_get_env>
 8013880:	b120      	cbz	r0, 801388c <rcl_get_security_options_from_environment+0x24>
 8013882:	2501      	movs	r5, #1
 8013884:	4628      	mov	r0, r5
 8013886:	b002      	add	sp, #8
 8013888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801388c:	4918      	ldr	r1, [pc, #96]	; (80138f0 <rcl_get_security_options_from_environment+0x88>)
 801388e:	4604      	mov	r4, r0
 8013890:	9801      	ldr	r0, [sp, #4]
 8013892:	f7ec fca5 	bl	80001e0 <strcmp>
 8013896:	4605      	mov	r5, r0
 8013898:	b9c8      	cbnz	r0, 80138ce <rcl_get_security_options_from_environment+0x66>
 801389a:	9001      	str	r0, [sp, #4]
 801389c:	b1ee      	cbz	r6, 80138da <rcl_get_security_options_from_environment+0x72>
 801389e:	4815      	ldr	r0, [pc, #84]	; (80138f4 <rcl_get_security_options_from_environment+0x8c>)
 80138a0:	a901      	add	r1, sp, #4
 80138a2:	f000 fa8f 	bl	8013dc4 <rcutils_get_env>
 80138a6:	2800      	cmp	r0, #0
 80138a8:	d1eb      	bne.n	8013882 <rcl_get_security_options_from_environment+0x1a>
 80138aa:	4913      	ldr	r1, [pc, #76]	; (80138f8 <rcl_get_security_options_from_environment+0x90>)
 80138ac:	9801      	ldr	r0, [sp, #4]
 80138ae:	f7ec fc97 	bl	80001e0 <strcmp>
 80138b2:	fab0 f080 	clz	r0, r0
 80138b6:	0940      	lsrs	r0, r0, #5
 80138b8:	7030      	strb	r0, [r6, #0]
 80138ba:	4641      	mov	r1, r8
 80138bc:	4638      	mov	r0, r7
 80138be:	f7ff ff69 	bl	8013794 <rcl_get_secure_root>
 80138c2:	b160      	cbz	r0, 80138de <rcl_get_security_options_from_environment+0x76>
 80138c4:	6070      	str	r0, [r6, #4]
 80138c6:	4628      	mov	r0, r5
 80138c8:	b002      	add	sp, #8
 80138ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138ce:	4625      	mov	r5, r4
 80138d0:	4628      	mov	r0, r5
 80138d2:	7034      	strb	r4, [r6, #0]
 80138d4:	b002      	add	sp, #8
 80138d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138da:	250b      	movs	r5, #11
 80138dc:	e7d2      	b.n	8013884 <rcl_get_security_options_from_environment+0x1c>
 80138de:	7835      	ldrb	r5, [r6, #0]
 80138e0:	f1a5 0501 	sub.w	r5, r5, #1
 80138e4:	fab5 f585 	clz	r5, r5
 80138e8:	096d      	lsrs	r5, r5, #5
 80138ea:	e7cb      	b.n	8013884 <rcl_get_security_options_from_environment+0x1c>
 80138ec:	080192a0 	.word	0x080192a0
 80138f0:	080192b4 	.word	0x080192b4
 80138f4:	080192bc 	.word	0x080192bc
 80138f8:	080192d4 	.word	0x080192d4

080138fc <rcl_get_system_time>:
 80138fc:	4608      	mov	r0, r1
 80138fe:	f000 bb8f 	b.w	8014020 <rcutils_system_time_now>
 8013902:	bf00      	nop

08013904 <rcl_get_steady_time>:
 8013904:	4608      	mov	r0, r1
 8013906:	f000 bbb3 	b.w	8014070 <rcutils_steady_time_now>
 801390a:	bf00      	nop

0801390c <rcl_get_ros_time>:
 801390c:	7a03      	ldrb	r3, [r0, #8]
 801390e:	b510      	push	{r4, lr}
 8013910:	460c      	mov	r4, r1
 8013912:	b133      	cbz	r3, 8013922 <rcl_get_ros_time+0x16>
 8013914:	2105      	movs	r1, #5
 8013916:	f000 f9d7 	bl	8013cc8 <__atomic_load_8>
 801391a:	e9c4 0100 	strd	r0, r1, [r4]
 801391e:	2000      	movs	r0, #0
 8013920:	bd10      	pop	{r4, pc}
 8013922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013926:	4608      	mov	r0, r1
 8013928:	f000 bb7a 	b.w	8014020 <rcutils_system_time_now>

0801392c <rcl_clock_init>:
 801392c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013930:	4606      	mov	r6, r0
 8013932:	4610      	mov	r0, r2
 8013934:	4614      	mov	r4, r2
 8013936:	460d      	mov	r5, r1
 8013938:	f7fb f896 	bl	800ea68 <rcutils_allocator_is_valid>
 801393c:	b128      	cbz	r0, 801394a <rcl_clock_init+0x1e>
 801393e:	2e03      	cmp	r6, #3
 8013940:	d803      	bhi.n	801394a <rcl_clock_init+0x1e>
 8013942:	e8df f006 	tbb	[pc, r6]
 8013946:	2c1b      	.short	0x2c1b
 8013948:	0554      	.short	0x0554
 801394a:	200b      	movs	r0, #11
 801394c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013950:	2d00      	cmp	r5, #0
 8013952:	d0fa      	beq.n	801394a <rcl_clock_init+0x1e>
 8013954:	2c00      	cmp	r4, #0
 8013956:	d0f8      	beq.n	801394a <rcl_clock_init+0x1e>
 8013958:	2600      	movs	r6, #0
 801395a:	702e      	strb	r6, [r5, #0]
 801395c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801395e:	f105 0714 	add.w	r7, r5, #20
 8013962:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8013966:	612e      	str	r6, [r5, #16]
 8013968:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801396a:	6823      	ldr	r3, [r4, #0]
 801396c:	603b      	str	r3, [r7, #0]
 801396e:	2303      	movs	r3, #3
 8013970:	4a2b      	ldr	r2, [pc, #172]	; (8013a20 <rcl_clock_init+0xf4>)
 8013972:	702b      	strb	r3, [r5, #0]
 8013974:	4630      	mov	r0, r6
 8013976:	60ea      	str	r2, [r5, #12]
 8013978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801397c:	2d00      	cmp	r5, #0
 801397e:	d0e4      	beq.n	801394a <rcl_clock_init+0x1e>
 8013980:	2600      	movs	r6, #0
 8013982:	702e      	strb	r6, [r5, #0]
 8013984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013986:	f105 0714 	add.w	r7, r5, #20
 801398a:	e9c5 6601 	strd	r6, r6, [r5, #4]
 801398e:	e9c5 6603 	strd	r6, r6, [r5, #12]
 8013992:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013994:	6823      	ldr	r3, [r4, #0]
 8013996:	603b      	str	r3, [r7, #0]
 8013998:	4630      	mov	r0, r6
 801399a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801399e:	2d00      	cmp	r5, #0
 80139a0:	d0d3      	beq.n	801394a <rcl_clock_init+0x1e>
 80139a2:	2c00      	cmp	r4, #0
 80139a4:	d0d1      	beq.n	801394a <rcl_clock_init+0x1e>
 80139a6:	2600      	movs	r6, #0
 80139a8:	702e      	strb	r6, [r5, #0]
 80139aa:	46a4      	mov	ip, r4
 80139ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80139b0:	f105 0714 	add.w	r7, r5, #20
 80139b4:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80139b8:	e9c5 6603 	strd	r6, r6, [r5, #12]
 80139bc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80139be:	f8dc 3000 	ldr.w	r3, [ip]
 80139c2:	603b      	str	r3, [r7, #0]
 80139c4:	6921      	ldr	r1, [r4, #16]
 80139c6:	6823      	ldr	r3, [r4, #0]
 80139c8:	2010      	movs	r0, #16
 80139ca:	4798      	blx	r3
 80139cc:	4603      	mov	r3, r0
 80139ce:	6128      	str	r0, [r5, #16]
 80139d0:	b318      	cbz	r0, 8013a1a <rcl_clock_init+0xee>
 80139d2:	f04f 0800 	mov.w	r8, #0
 80139d6:	f04f 0900 	mov.w	r9, #0
 80139da:	7206      	strb	r6, [r0, #8]
 80139dc:	e9c3 8900 	strd	r8, r9, [r3]
 80139e0:	2301      	movs	r3, #1
 80139e2:	4a10      	ldr	r2, [pc, #64]	; (8013a24 <rcl_clock_init+0xf8>)
 80139e4:	702b      	strb	r3, [r5, #0]
 80139e6:	4630      	mov	r0, r6
 80139e8:	60ea      	str	r2, [r5, #12]
 80139ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139ee:	2d00      	cmp	r5, #0
 80139f0:	d0ab      	beq.n	801394a <rcl_clock_init+0x1e>
 80139f2:	2c00      	cmp	r4, #0
 80139f4:	d0a9      	beq.n	801394a <rcl_clock_init+0x1e>
 80139f6:	2600      	movs	r6, #0
 80139f8:	702e      	strb	r6, [r5, #0]
 80139fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80139fc:	f105 0714 	add.w	r7, r5, #20
 8013a00:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8013a04:	612e      	str	r6, [r5, #16]
 8013a06:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013a08:	6823      	ldr	r3, [r4, #0]
 8013a0a:	603b      	str	r3, [r7, #0]
 8013a0c:	2302      	movs	r3, #2
 8013a0e:	4a06      	ldr	r2, [pc, #24]	; (8013a28 <rcl_clock_init+0xfc>)
 8013a10:	702b      	strb	r3, [r5, #0]
 8013a12:	4630      	mov	r0, r6
 8013a14:	60ea      	str	r2, [r5, #12]
 8013a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a1a:	200a      	movs	r0, #10
 8013a1c:	e796      	b.n	801394c <rcl_clock_init+0x20>
 8013a1e:	bf00      	nop
 8013a20:	08013905 	.word	0x08013905
 8013a24:	0801390d 	.word	0x0801390d
 8013a28:	080138fd 	.word	0x080138fd

08013a2c <rcl_validate_enclave_name_with_size>:
 8013a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a2e:	b0c3      	sub	sp, #268	; 0x10c
 8013a30:	b1d0      	cbz	r0, 8013a68 <rcl_validate_enclave_name_with_size+0x3c>
 8013a32:	4615      	mov	r5, r2
 8013a34:	b1c2      	cbz	r2, 8013a68 <rcl_validate_enclave_name_with_size+0x3c>
 8013a36:	461f      	mov	r7, r3
 8013a38:	466a      	mov	r2, sp
 8013a3a:	ab01      	add	r3, sp, #4
 8013a3c:	460e      	mov	r6, r1
 8013a3e:	f000 fb5b 	bl	80140f8 <rmw_validate_namespace_with_size>
 8013a42:	4604      	mov	r4, r0
 8013a44:	b9e0      	cbnz	r0, 8013a80 <rcl_validate_enclave_name_with_size+0x54>
 8013a46:	9b00      	ldr	r3, [sp, #0]
 8013a48:	b923      	cbnz	r3, 8013a54 <rcl_validate_enclave_name_with_size+0x28>
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	602b      	str	r3, [r5, #0]
 8013a4e:	4620      	mov	r0, r4
 8013a50:	b043      	add	sp, #268	; 0x10c
 8013a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a54:	2b07      	cmp	r3, #7
 8013a56:	d00b      	beq.n	8013a70 <rcl_validate_enclave_name_with_size+0x44>
 8013a58:	1e5a      	subs	r2, r3, #1
 8013a5a:	2a05      	cmp	r2, #5
 8013a5c:	d82e      	bhi.n	8013abc <rcl_validate_enclave_name_with_size+0x90>
 8013a5e:	e8df f002 	tbb	[pc, r2]
 8013a62:	211e      	.short	0x211e
 8013a64:	152a2724 	.word	0x152a2724
 8013a68:	240b      	movs	r4, #11
 8013a6a:	4620      	mov	r0, r4
 8013a6c:	b043      	add	sp, #268	; 0x10c
 8013a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a70:	2eff      	cmp	r6, #255	; 0xff
 8013a72:	d9ea      	bls.n	8013a4a <rcl_validate_enclave_name_with_size+0x1e>
 8013a74:	602b      	str	r3, [r5, #0]
 8013a76:	2f00      	cmp	r7, #0
 8013a78:	d0e9      	beq.n	8013a4e <rcl_validate_enclave_name_with_size+0x22>
 8013a7a:	23fe      	movs	r3, #254	; 0xfe
 8013a7c:	603b      	str	r3, [r7, #0]
 8013a7e:	e7e6      	b.n	8013a4e <rcl_validate_enclave_name_with_size+0x22>
 8013a80:	f7ff f82e 	bl	8012ae0 <rcl_convert_rmw_ret_to_rcl_ret>
 8013a84:	4604      	mov	r4, r0
 8013a86:	4620      	mov	r0, r4
 8013a88:	b043      	add	sp, #268	; 0x10c
 8013a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a8c:	2306      	movs	r3, #6
 8013a8e:	602b      	str	r3, [r5, #0]
 8013a90:	2f00      	cmp	r7, #0
 8013a92:	d0dc      	beq.n	8013a4e <rcl_validate_enclave_name_with_size+0x22>
 8013a94:	9b01      	ldr	r3, [sp, #4]
 8013a96:	603b      	str	r3, [r7, #0]
 8013a98:	4620      	mov	r0, r4
 8013a9a:	b043      	add	sp, #268	; 0x10c
 8013a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a9e:	2301      	movs	r3, #1
 8013aa0:	602b      	str	r3, [r5, #0]
 8013aa2:	e7f5      	b.n	8013a90 <rcl_validate_enclave_name_with_size+0x64>
 8013aa4:	2302      	movs	r3, #2
 8013aa6:	602b      	str	r3, [r5, #0]
 8013aa8:	e7f2      	b.n	8013a90 <rcl_validate_enclave_name_with_size+0x64>
 8013aaa:	2303      	movs	r3, #3
 8013aac:	602b      	str	r3, [r5, #0]
 8013aae:	e7ef      	b.n	8013a90 <rcl_validate_enclave_name_with_size+0x64>
 8013ab0:	2304      	movs	r3, #4
 8013ab2:	602b      	str	r3, [r5, #0]
 8013ab4:	e7ec      	b.n	8013a90 <rcl_validate_enclave_name_with_size+0x64>
 8013ab6:	2305      	movs	r3, #5
 8013ab8:	602b      	str	r3, [r5, #0]
 8013aba:	e7e9      	b.n	8013a90 <rcl_validate_enclave_name_with_size+0x64>
 8013abc:	4a03      	ldr	r2, [pc, #12]	; (8013acc <rcl_validate_enclave_name_with_size+0xa0>)
 8013abe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013ac2:	a802      	add	r0, sp, #8
 8013ac4:	f000 fa42 	bl	8013f4c <rcutils_snprintf>
 8013ac8:	2401      	movs	r4, #1
 8013aca:	e7c0      	b.n	8013a4e <rcl_validate_enclave_name_with_size+0x22>
 8013acc:	08019320 	.word	0x08019320

08013ad0 <rcl_validate_enclave_name>:
 8013ad0:	b168      	cbz	r0, 8013aee <rcl_validate_enclave_name+0x1e>
 8013ad2:	b570      	push	{r4, r5, r6, lr}
 8013ad4:	460d      	mov	r5, r1
 8013ad6:	4616      	mov	r6, r2
 8013ad8:	4604      	mov	r4, r0
 8013ada:	f7ec fb8b 	bl	80001f4 <strlen>
 8013ade:	4633      	mov	r3, r6
 8013ae0:	4601      	mov	r1, r0
 8013ae2:	462a      	mov	r2, r5
 8013ae4:	4620      	mov	r0, r4
 8013ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013aea:	f7ff bf9f 	b.w	8013a2c <rcl_validate_enclave_name_with_size>
 8013aee:	200b      	movs	r0, #11
 8013af0:	4770      	bx	lr
 8013af2:	bf00      	nop

08013af4 <rcl_validate_topic_name>:
 8013af4:	2800      	cmp	r0, #0
 8013af6:	f000 808b 	beq.w	8013c10 <rcl_validate_topic_name+0x11c>
 8013afa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013afe:	460e      	mov	r6, r1
 8013b00:	2900      	cmp	r1, #0
 8013b02:	f000 808c 	beq.w	8013c1e <rcl_validate_topic_name+0x12a>
 8013b06:	4617      	mov	r7, r2
 8013b08:	4605      	mov	r5, r0
 8013b0a:	f7ec fb73 	bl	80001f4 <strlen>
 8013b0e:	b1b0      	cbz	r0, 8013b3e <rcl_validate_topic_name+0x4a>
 8013b10:	f895 9000 	ldrb.w	r9, [r5]
 8013b14:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8013cc4 <rcl_validate_topic_name+0x1d0>
 8013b18:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8013b1c:	f013 0304 	ands.w	r3, r3, #4
 8013b20:	d178      	bne.n	8013c14 <rcl_validate_topic_name+0x120>
 8013b22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8013b26:	f815 2008 	ldrb.w	r2, [r5, r8]
 8013b2a:	2a2f      	cmp	r2, #47	; 0x2f
 8013b2c:	d10e      	bne.n	8013b4c <rcl_validate_topic_name+0x58>
 8013b2e:	2202      	movs	r2, #2
 8013b30:	6032      	str	r2, [r6, #0]
 8013b32:	b36f      	cbz	r7, 8013b90 <rcl_validate_topic_name+0x9c>
 8013b34:	f8c7 8000 	str.w	r8, [r7]
 8013b38:	4618      	mov	r0, r3
 8013b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b3e:	2301      	movs	r3, #1
 8013b40:	6033      	str	r3, [r6, #0]
 8013b42:	b32f      	cbz	r7, 8013b90 <rcl_validate_topic_name+0x9c>
 8013b44:	2000      	movs	r0, #0
 8013b46:	6038      	str	r0, [r7, #0]
 8013b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b4c:	461c      	mov	r4, r3
 8013b4e:	4619      	mov	r1, r3
 8013b50:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8013b54:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8013b58:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8013b5c:	f1be 0f09 	cmp.w	lr, #9
 8013b60:	d946      	bls.n	8013bf0 <rcl_validate_topic_name+0xfc>
 8013b62:	f022 0e20 	bic.w	lr, r2, #32
 8013b66:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8013b6a:	f1be 0f19 	cmp.w	lr, #25
 8013b6e:	d93f      	bls.n	8013bf0 <rcl_validate_topic_name+0xfc>
 8013b70:	2a5f      	cmp	r2, #95	; 0x5f
 8013b72:	d014      	beq.n	8013b9e <rcl_validate_topic_name+0xaa>
 8013b74:	2a2f      	cmp	r2, #47	; 0x2f
 8013b76:	d05b      	beq.n	8013c30 <rcl_validate_topic_name+0x13c>
 8013b78:	2a7e      	cmp	r2, #126	; 0x7e
 8013b7a:	d052      	beq.n	8013c22 <rcl_validate_topic_name+0x12e>
 8013b7c:	2a7b      	cmp	r2, #123	; 0x7b
 8013b7e:	d00a      	beq.n	8013b96 <rcl_validate_topic_name+0xa2>
 8013b80:	2a7d      	cmp	r2, #125	; 0x7d
 8013b82:	d16f      	bne.n	8013c64 <rcl_validate_topic_name+0x170>
 8013b84:	2c00      	cmp	r4, #0
 8013b86:	d15e      	bne.n	8013c46 <rcl_validate_topic_name+0x152>
 8013b88:	2305      	movs	r3, #5
 8013b8a:	6033      	str	r3, [r6, #0]
 8013b8c:	b107      	cbz	r7, 8013b90 <rcl_validate_topic_name+0x9c>
 8013b8e:	6039      	str	r1, [r7, #0]
 8013b90:	2000      	movs	r0, #0
 8013b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b96:	2c00      	cmp	r4, #0
 8013b98:	d14c      	bne.n	8013c34 <rcl_validate_topic_name+0x140>
 8013b9a:	460b      	mov	r3, r1
 8013b9c:	2401      	movs	r4, #1
 8013b9e:	3101      	adds	r1, #1
 8013ba0:	4288      	cmp	r0, r1
 8013ba2:	d1d7      	bne.n	8013b54 <rcl_validate_topic_name+0x60>
 8013ba4:	2c00      	cmp	r4, #0
 8013ba6:	d156      	bne.n	8013c56 <rcl_validate_topic_name+0x162>
 8013ba8:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8013bac:	4620      	mov	r0, r4
 8013bae:	d061      	beq.n	8013c74 <rcl_validate_topic_name+0x180>
 8013bb0:	f108 0e01 	add.w	lr, r8, #1
 8013bb4:	e007      	b.n	8013bc6 <rcl_validate_topic_name+0xd2>
 8013bb6:	2801      	cmp	r0, #1
 8013bb8:	d047      	beq.n	8013c4a <rcl_validate_topic_name+0x156>
 8013bba:	461a      	mov	r2, r3
 8013bbc:	4291      	cmp	r1, r2
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	f105 0501 	add.w	r5, r5, #1
 8013bc4:	d944      	bls.n	8013c50 <rcl_validate_topic_name+0x15c>
 8013bc6:	4580      	cmp	r8, r0
 8013bc8:	f100 0301 	add.w	r3, r0, #1
 8013bcc:	d037      	beq.n	8013c3e <rcl_validate_topic_name+0x14a>
 8013bce:	782a      	ldrb	r2, [r5, #0]
 8013bd0:	2a2f      	cmp	r2, #47	; 0x2f
 8013bd2:	d1f0      	bne.n	8013bb6 <rcl_validate_topic_name+0xc2>
 8013bd4:	786b      	ldrb	r3, [r5, #1]
 8013bd6:	f81c 4003 	ldrb.w	r4, [ip, r3]
 8013bda:	1c43      	adds	r3, r0, #1
 8013bdc:	0760      	lsls	r0, r4, #29
 8013bde:	461a      	mov	r2, r3
 8013be0:	d5ec      	bpl.n	8013bbc <rcl_validate_topic_name+0xc8>
 8013be2:	2304      	movs	r3, #4
 8013be4:	6033      	str	r3, [r6, #0]
 8013be6:	2f00      	cmp	r7, #0
 8013be8:	d0d2      	beq.n	8013b90 <rcl_validate_topic_name+0x9c>
 8013bea:	603a      	str	r2, [r7, #0]
 8013bec:	2000      	movs	r0, #0
 8013bee:	e7ab      	b.n	8013b48 <rcl_validate_topic_name+0x54>
 8013bf0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013bf4:	0752      	lsls	r2, r2, #29
 8013bf6:	d5d2      	bpl.n	8013b9e <rcl_validate_topic_name+0xaa>
 8013bf8:	2c00      	cmp	r4, #0
 8013bfa:	d0d0      	beq.n	8013b9e <rcl_validate_topic_name+0xaa>
 8013bfc:	2900      	cmp	r1, #0
 8013bfe:	d0ce      	beq.n	8013b9e <rcl_validate_topic_name+0xaa>
 8013c00:	1e4a      	subs	r2, r1, #1
 8013c02:	429a      	cmp	r2, r3
 8013c04:	d1cb      	bne.n	8013b9e <rcl_validate_topic_name+0xaa>
 8013c06:	2309      	movs	r3, #9
 8013c08:	6033      	str	r3, [r6, #0]
 8013c0a:	2f00      	cmp	r7, #0
 8013c0c:	d1bf      	bne.n	8013b8e <rcl_validate_topic_name+0x9a>
 8013c0e:	e7bf      	b.n	8013b90 <rcl_validate_topic_name+0x9c>
 8013c10:	200b      	movs	r0, #11
 8013c12:	4770      	bx	lr
 8013c14:	2304      	movs	r3, #4
 8013c16:	6033      	str	r3, [r6, #0]
 8013c18:	2f00      	cmp	r7, #0
 8013c1a:	d193      	bne.n	8013b44 <rcl_validate_topic_name+0x50>
 8013c1c:	e7b8      	b.n	8013b90 <rcl_validate_topic_name+0x9c>
 8013c1e:	200b      	movs	r0, #11
 8013c20:	e792      	b.n	8013b48 <rcl_validate_topic_name+0x54>
 8013c22:	2900      	cmp	r1, #0
 8013c24:	d0bb      	beq.n	8013b9e <rcl_validate_topic_name+0xaa>
 8013c26:	2306      	movs	r3, #6
 8013c28:	6033      	str	r3, [r6, #0]
 8013c2a:	2f00      	cmp	r7, #0
 8013c2c:	d1af      	bne.n	8013b8e <rcl_validate_topic_name+0x9a>
 8013c2e:	e7af      	b.n	8013b90 <rcl_validate_topic_name+0x9c>
 8013c30:	2c00      	cmp	r4, #0
 8013c32:	d0b4      	beq.n	8013b9e <rcl_validate_topic_name+0xaa>
 8013c34:	2308      	movs	r3, #8
 8013c36:	6033      	str	r3, [r6, #0]
 8013c38:	2f00      	cmp	r7, #0
 8013c3a:	d1a8      	bne.n	8013b8e <rcl_validate_topic_name+0x9a>
 8013c3c:	e7a8      	b.n	8013b90 <rcl_validate_topic_name+0x9c>
 8013c3e:	4672      	mov	r2, lr
 8013c40:	f108 0301 	add.w	r3, r8, #1
 8013c44:	e7ba      	b.n	8013bbc <rcl_validate_topic_name+0xc8>
 8013c46:	2400      	movs	r4, #0
 8013c48:	e7a9      	b.n	8013b9e <rcl_validate_topic_name+0xaa>
 8013c4a:	2202      	movs	r2, #2
 8013c4c:	4613      	mov	r3, r2
 8013c4e:	e7b5      	b.n	8013bbc <rcl_validate_topic_name+0xc8>
 8013c50:	2000      	movs	r0, #0
 8013c52:	6030      	str	r0, [r6, #0]
 8013c54:	e778      	b.n	8013b48 <rcl_validate_topic_name+0x54>
 8013c56:	2205      	movs	r2, #5
 8013c58:	6032      	str	r2, [r6, #0]
 8013c5a:	2f00      	cmp	r7, #0
 8013c5c:	d098      	beq.n	8013b90 <rcl_validate_topic_name+0x9c>
 8013c5e:	603b      	str	r3, [r7, #0]
 8013c60:	2000      	movs	r0, #0
 8013c62:	e771      	b.n	8013b48 <rcl_validate_topic_name+0x54>
 8013c64:	2c00      	cmp	r4, #0
 8013c66:	bf14      	ite	ne
 8013c68:	2308      	movne	r3, #8
 8013c6a:	2303      	moveq	r3, #3
 8013c6c:	6033      	str	r3, [r6, #0]
 8013c6e:	2f00      	cmp	r7, #0
 8013c70:	d18d      	bne.n	8013b8e <rcl_validate_topic_name+0x9a>
 8013c72:	e78d      	b.n	8013b90 <rcl_validate_topic_name+0x9c>
 8013c74:	f108 0401 	add.w	r4, r8, #1
 8013c78:	e007      	b.n	8013c8a <rcl_validate_topic_name+0x196>
 8013c7a:	2801      	cmp	r0, #1
 8013c7c:	d019      	beq.n	8013cb2 <rcl_validate_topic_name+0x1be>
 8013c7e:	461a      	mov	r2, r3
 8013c80:	4291      	cmp	r1, r2
 8013c82:	4618      	mov	r0, r3
 8013c84:	f105 0501 	add.w	r5, r5, #1
 8013c88:	d9e2      	bls.n	8013c50 <rcl_validate_topic_name+0x15c>
 8013c8a:	4580      	cmp	r8, r0
 8013c8c:	f100 0301 	add.w	r3, r0, #1
 8013c90:	d00b      	beq.n	8013caa <rcl_validate_topic_name+0x1b6>
 8013c92:	782a      	ldrb	r2, [r5, #0]
 8013c94:	2a2f      	cmp	r2, #47	; 0x2f
 8013c96:	d1f0      	bne.n	8013c7a <rcl_validate_topic_name+0x186>
 8013c98:	786b      	ldrb	r3, [r5, #1]
 8013c9a:	f81c e003 	ldrb.w	lr, [ip, r3]
 8013c9e:	1c43      	adds	r3, r0, #1
 8013ca0:	f01e 0f04 	tst.w	lr, #4
 8013ca4:	461a      	mov	r2, r3
 8013ca6:	d0eb      	beq.n	8013c80 <rcl_validate_topic_name+0x18c>
 8013ca8:	e79b      	b.n	8013be2 <rcl_validate_topic_name+0xee>
 8013caa:	4622      	mov	r2, r4
 8013cac:	f108 0301 	add.w	r3, r8, #1
 8013cb0:	e7e6      	b.n	8013c80 <rcl_validate_topic_name+0x18c>
 8013cb2:	2307      	movs	r3, #7
 8013cb4:	6033      	str	r3, [r6, #0]
 8013cb6:	2f00      	cmp	r7, #0
 8013cb8:	f43f af6a 	beq.w	8013b90 <rcl_validate_topic_name+0x9c>
 8013cbc:	6038      	str	r0, [r7, #0]
 8013cbe:	2000      	movs	r0, #0
 8013cc0:	e742      	b.n	8013b48 <rcl_validate_topic_name+0x54>
 8013cc2:	bf00      	nop
 8013cc4:	08019974 	.word	0x08019974

08013cc8 <__atomic_load_8>:
 8013cc8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8013ccc:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8013cd0:	4b14      	ldr	r3, [pc, #80]	; (8013d24 <__atomic_load_8+0x5c>)
 8013cd2:	4a15      	ldr	r2, [pc, #84]	; (8013d28 <__atomic_load_8+0x60>)
 8013cd4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8013cd8:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8013cdc:	fb03 f301 	mul.w	r3, r3, r1
 8013ce0:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 8013ce4:	fba2 1203 	umull	r1, r2, r2, r3
 8013ce8:	0912      	lsrs	r2, r2, #4
 8013cea:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8013cee:	b430      	push	{r4, r5}
 8013cf0:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 8013cf4:	4c0d      	ldr	r4, [pc, #52]	; (8013d2c <__atomic_load_8+0x64>)
 8013cf6:	1a9b      	subs	r3, r3, r2
 8013cf8:	18e1      	adds	r1, r4, r3
 8013cfa:	f04f 0501 	mov.w	r5, #1
 8013cfe:	e8d1 2f4f 	ldrexb	r2, [r1]
 8013d02:	e8c1 5f4c 	strexb	ip, r5, [r1]
 8013d06:	f1bc 0f00 	cmp.w	ip, #0
 8013d0a:	d1f8      	bne.n	8013cfe <__atomic_load_8+0x36>
 8013d0c:	f3bf 8f5b 	dmb	ish
 8013d10:	b2d2      	uxtb	r2, r2
 8013d12:	2a00      	cmp	r2, #0
 8013d14:	d1f3      	bne.n	8013cfe <__atomic_load_8+0x36>
 8013d16:	e9d0 0100 	ldrd	r0, r1, [r0]
 8013d1a:	f3bf 8f5b 	dmb	ish
 8013d1e:	54e2      	strb	r2, [r4, r3]
 8013d20:	bc30      	pop	{r4, r5}
 8013d22:	4770      	bx	lr
 8013d24:	27d4eb2d 	.word	0x27d4eb2d
 8013d28:	b21642c9 	.word	0xb21642c9
 8013d2c:	20009f64 	.word	0x20009f64

08013d30 <rcutils_is_directory>:
 8013d30:	2000      	movs	r0, #0
 8013d32:	4770      	bx	lr

08013d34 <rcutils_join_path>:
 8013d34:	b082      	sub	sp, #8
 8013d36:	e88d 000c 	stmia.w	sp, {r2, r3}
 8013d3a:	2000      	movs	r0, #0
 8013d3c:	b002      	add	sp, #8
 8013d3e:	4770      	bx	lr

08013d40 <rcutils_to_native_path>:
 8013d40:	b084      	sub	sp, #16
 8013d42:	a801      	add	r0, sp, #4
 8013d44:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8013d48:	b004      	add	sp, #16
 8013d4a:	2000      	movs	r0, #0
 8013d4c:	4770      	bx	lr
 8013d4e:	bf00      	nop

08013d50 <rcutils_format_string_limit>:
 8013d50:	b40f      	push	{r0, r1, r2, r3}
 8013d52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d54:	b083      	sub	sp, #12
 8013d56:	ac08      	add	r4, sp, #32
 8013d58:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8013d5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013d5e:	b34e      	cbz	r6, 8013db4 <rcutils_format_string_limit+0x64>
 8013d60:	a808      	add	r0, sp, #32
 8013d62:	f7fa fe81 	bl	800ea68 <rcutils_allocator_is_valid>
 8013d66:	b328      	cbz	r0, 8013db4 <rcutils_format_string_limit+0x64>
 8013d68:	2100      	movs	r1, #0
 8013d6a:	ab0f      	add	r3, sp, #60	; 0x3c
 8013d6c:	4608      	mov	r0, r1
 8013d6e:	4632      	mov	r2, r6
 8013d70:	e9cd 3300 	strd	r3, r3, [sp]
 8013d74:	f000 f904 	bl	8013f80 <rcutils_vsnprintf>
 8013d78:	1c43      	adds	r3, r0, #1
 8013d7a:	4605      	mov	r5, r0
 8013d7c:	d01a      	beq.n	8013db4 <rcutils_format_string_limit+0x64>
 8013d7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013d80:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013d82:	1c47      	adds	r7, r0, #1
 8013d84:	429f      	cmp	r7, r3
 8013d86:	bf84      	itt	hi
 8013d88:	461f      	movhi	r7, r3
 8013d8a:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 8013d8e:	4638      	mov	r0, r7
 8013d90:	9b08      	ldr	r3, [sp, #32]
 8013d92:	4798      	blx	r3
 8013d94:	4604      	mov	r4, r0
 8013d96:	b168      	cbz	r0, 8013db4 <rcutils_format_string_limit+0x64>
 8013d98:	9b01      	ldr	r3, [sp, #4]
 8013d9a:	4632      	mov	r2, r6
 8013d9c:	4639      	mov	r1, r7
 8013d9e:	f000 f8ef 	bl	8013f80 <rcutils_vsnprintf>
 8013da2:	2800      	cmp	r0, #0
 8013da4:	db02      	blt.n	8013dac <rcutils_format_string_limit+0x5c>
 8013da6:	2300      	movs	r3, #0
 8013da8:	5563      	strb	r3, [r4, r5]
 8013daa:	e004      	b.n	8013db6 <rcutils_format_string_limit+0x66>
 8013dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dae:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013db0:	4620      	mov	r0, r4
 8013db2:	4798      	blx	r3
 8013db4:	2400      	movs	r4, #0
 8013db6:	4620      	mov	r0, r4
 8013db8:	b003      	add	sp, #12
 8013dba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013dbe:	b004      	add	sp, #16
 8013dc0:	4770      	bx	lr
 8013dc2:	bf00      	nop

08013dc4 <rcutils_get_env>:
 8013dc4:	b168      	cbz	r0, 8013de2 <rcutils_get_env+0x1e>
 8013dc6:	b510      	push	{r4, lr}
 8013dc8:	460c      	mov	r4, r1
 8013dca:	b129      	cbz	r1, 8013dd8 <rcutils_get_env+0x14>
 8013dcc:	f003 fbc8 	bl	8017560 <getenv>
 8013dd0:	b120      	cbz	r0, 8013ddc <rcutils_get_env+0x18>
 8013dd2:	6020      	str	r0, [r4, #0]
 8013dd4:	2000      	movs	r0, #0
 8013dd6:	bd10      	pop	{r4, pc}
 8013dd8:	4803      	ldr	r0, [pc, #12]	; (8013de8 <rcutils_get_env+0x24>)
 8013dda:	bd10      	pop	{r4, pc}
 8013ddc:	4b03      	ldr	r3, [pc, #12]	; (8013dec <rcutils_get_env+0x28>)
 8013dde:	6023      	str	r3, [r4, #0]
 8013de0:	bd10      	pop	{r4, pc}
 8013de2:	4803      	ldr	r0, [pc, #12]	; (8013df0 <rcutils_get_env+0x2c>)
 8013de4:	4770      	bx	lr
 8013de6:	bf00      	nop
 8013de8:	0801939c 	.word	0x0801939c
 8013dec:	080194c0 	.word	0x080194c0
 8013df0:	08019380 	.word	0x08019380

08013df4 <rcutils_repl_str>:
 8013df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013df8:	ed2d 8b02 	vpush	{d8}
 8013dfc:	b087      	sub	sp, #28
 8013dfe:	4680      	mov	r8, r0
 8013e00:	4608      	mov	r0, r1
 8013e02:	f8cd 8000 	str.w	r8, [sp]
 8013e06:	ee08 2a10 	vmov	s16, r2
 8013e0a:	468a      	mov	sl, r1
 8013e0c:	4699      	mov	r9, r3
 8013e0e:	f7ec f9f1 	bl	80001f4 <strlen>
 8013e12:	2600      	movs	r6, #0
 8013e14:	4647      	mov	r7, r8
 8013e16:	9001      	str	r0, [sp, #4]
 8013e18:	46b3      	mov	fp, r6
 8013e1a:	2510      	movs	r5, #16
 8013e1c:	46b0      	mov	r8, r6
 8013e1e:	e01d      	b.n	8013e5c <rcutils_repl_str+0x68>
 8013e20:	f10b 0b01 	add.w	fp, fp, #1
 8013e24:	455e      	cmp	r6, fp
 8013e26:	d211      	bcs.n	8013e4c <rcutils_repl_str+0x58>
 8013e28:	442e      	add	r6, r5
 8013e2a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013e2e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8013e32:	00b1      	lsls	r1, r6, #2
 8013e34:	4798      	blx	r3
 8013e36:	2800      	cmp	r0, #0
 8013e38:	f000 8084 	beq.w	8013f44 <rcutils_repl_str+0x150>
 8013e3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013e40:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8013e44:	bf28      	it	cs
 8013e46:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8013e4a:	4680      	mov	r8, r0
 8013e4c:	9a00      	ldr	r2, [sp, #0]
 8013e4e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8013e52:	1aa2      	subs	r2, r4, r2
 8013e54:	f843 2c04 	str.w	r2, [r3, #-4]
 8013e58:	9b01      	ldr	r3, [sp, #4]
 8013e5a:	18e7      	adds	r7, r4, r3
 8013e5c:	4651      	mov	r1, sl
 8013e5e:	4638      	mov	r0, r7
 8013e60:	f004 f8b1 	bl	8017fc6 <strstr>
 8013e64:	4604      	mov	r4, r0
 8013e66:	4640      	mov	r0, r8
 8013e68:	2c00      	cmp	r4, #0
 8013e6a:	d1d9      	bne.n	8013e20 <rcutils_repl_str+0x2c>
 8013e6c:	46b8      	mov	r8, r7
 8013e6e:	4607      	mov	r7, r0
 8013e70:	4640      	mov	r0, r8
 8013e72:	f7ec f9bf 	bl	80001f4 <strlen>
 8013e76:	9b00      	ldr	r3, [sp, #0]
 8013e78:	eba8 0303 	sub.w	r3, r8, r3
 8013e7c:	181d      	adds	r5, r3, r0
 8013e7e:	9504      	str	r5, [sp, #16]
 8013e80:	f1bb 0f00 	cmp.w	fp, #0
 8013e84:	d03d      	beq.n	8013f02 <rcutils_repl_str+0x10e>
 8013e86:	ee18 0a10 	vmov	r0, s16
 8013e8a:	f7ec f9b3 	bl	80001f4 <strlen>
 8013e8e:	9b01      	ldr	r3, [sp, #4]
 8013e90:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013e94:	1ac3      	subs	r3, r0, r3
 8013e96:	fb0b 5303 	mla	r3, fp, r3, r5
 8013e9a:	9305      	str	r3, [sp, #20]
 8013e9c:	4606      	mov	r6, r0
 8013e9e:	1c58      	adds	r0, r3, #1
 8013ea0:	f8d9 3000 	ldr.w	r3, [r9]
 8013ea4:	4798      	blx	r3
 8013ea6:	9003      	str	r0, [sp, #12]
 8013ea8:	2800      	cmp	r0, #0
 8013eaa:	d04c      	beq.n	8013f46 <rcutils_repl_str+0x152>
 8013eac:	683a      	ldr	r2, [r7, #0]
 8013eae:	9900      	ldr	r1, [sp, #0]
 8013eb0:	f004 f981 	bl	80181b6 <memcpy>
 8013eb4:	9b03      	ldr	r3, [sp, #12]
 8013eb6:	683d      	ldr	r5, [r7, #0]
 8013eb8:	ee18 8a10 	vmov	r8, s16
 8013ebc:	441d      	add	r5, r3
 8013ebe:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8013ec2:	9302      	str	r3, [sp, #8]
 8013ec4:	46ba      	mov	sl, r7
 8013ec6:	4632      	mov	r2, r6
 8013ec8:	4641      	mov	r1, r8
 8013eca:	4628      	mov	r0, r5
 8013ecc:	f004 f973 	bl	80181b6 <memcpy>
 8013ed0:	9b01      	ldr	r3, [sp, #4]
 8013ed2:	f85a 2b04 	ldr.w	r2, [sl], #4
 8013ed6:	441a      	add	r2, r3
 8013ed8:	9b00      	ldr	r3, [sp, #0]
 8013eda:	1899      	adds	r1, r3, r2
 8013edc:	9b02      	ldr	r3, [sp, #8]
 8013ede:	4435      	add	r5, r6
 8013ee0:	429c      	cmp	r4, r3
 8013ee2:	4628      	mov	r0, r5
 8013ee4:	d025      	beq.n	8013f32 <rcutils_repl_str+0x13e>
 8013ee6:	f8da 3000 	ldr.w	r3, [sl]
 8013eea:	3401      	adds	r4, #1
 8013eec:	1a9a      	subs	r2, r3, r2
 8013eee:	4415      	add	r5, r2
 8013ef0:	f004 f961 	bl	80181b6 <memcpy>
 8013ef4:	455c      	cmp	r4, fp
 8013ef6:	d3e6      	bcc.n	8013ec6 <rcutils_repl_str+0xd2>
 8013ef8:	9a03      	ldr	r2, [sp, #12]
 8013efa:	9905      	ldr	r1, [sp, #20]
 8013efc:	2300      	movs	r3, #0
 8013efe:	5453      	strb	r3, [r2, r1]
 8013f00:	e00b      	b.n	8013f1a <rcutils_repl_str+0x126>
 8013f02:	4628      	mov	r0, r5
 8013f04:	f8d9 3000 	ldr.w	r3, [r9]
 8013f08:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013f0c:	3001      	adds	r0, #1
 8013f0e:	4798      	blx	r3
 8013f10:	9003      	str	r0, [sp, #12]
 8013f12:	b110      	cbz	r0, 8013f1a <rcutils_repl_str+0x126>
 8013f14:	9900      	ldr	r1, [sp, #0]
 8013f16:	f004 f946 	bl	80181a6 <strcpy>
 8013f1a:	4638      	mov	r0, r7
 8013f1c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013f20:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013f24:	4798      	blx	r3
 8013f26:	9803      	ldr	r0, [sp, #12]
 8013f28:	b007      	add	sp, #28
 8013f2a:	ecbd 8b02 	vpop	{d8}
 8013f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f32:	9b04      	ldr	r3, [sp, #16]
 8013f34:	3401      	adds	r4, #1
 8013f36:	1a9a      	subs	r2, r3, r2
 8013f38:	4415      	add	r5, r2
 8013f3a:	f004 f93c 	bl	80181b6 <memcpy>
 8013f3e:	455c      	cmp	r4, fp
 8013f40:	d3c1      	bcc.n	8013ec6 <rcutils_repl_str+0xd2>
 8013f42:	e7d9      	b.n	8013ef8 <rcutils_repl_str+0x104>
 8013f44:	4647      	mov	r7, r8
 8013f46:	2300      	movs	r3, #0
 8013f48:	9303      	str	r3, [sp, #12]
 8013f4a:	e7e6      	b.n	8013f1a <rcutils_repl_str+0x126>

08013f4c <rcutils_snprintf>:
 8013f4c:	b40c      	push	{r2, r3}
 8013f4e:	b530      	push	{r4, r5, lr}
 8013f50:	b083      	sub	sp, #12
 8013f52:	ab06      	add	r3, sp, #24
 8013f54:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f58:	9301      	str	r3, [sp, #4]
 8013f5a:	b152      	cbz	r2, 8013f72 <rcutils_snprintf+0x26>
 8013f5c:	b138      	cbz	r0, 8013f6e <rcutils_snprintf+0x22>
 8013f5e:	b141      	cbz	r1, 8013f72 <rcutils_snprintf+0x26>
 8013f60:	f003 ff66 	bl	8017e30 <vsniprintf>
 8013f64:	b003      	add	sp, #12
 8013f66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013f6a:	b002      	add	sp, #8
 8013f6c:	4770      	bx	lr
 8013f6e:	2900      	cmp	r1, #0
 8013f70:	d0f6      	beq.n	8013f60 <rcutils_snprintf+0x14>
 8013f72:	f004 f8eb 	bl	801814c <__errno>
 8013f76:	2316      	movs	r3, #22
 8013f78:	6003      	str	r3, [r0, #0]
 8013f7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013f7e:	e7f1      	b.n	8013f64 <rcutils_snprintf+0x18>

08013f80 <rcutils_vsnprintf>:
 8013f80:	b570      	push	{r4, r5, r6, lr}
 8013f82:	b13a      	cbz	r2, 8013f94 <rcutils_vsnprintf+0x14>
 8013f84:	b120      	cbz	r0, 8013f90 <rcutils_vsnprintf+0x10>
 8013f86:	b129      	cbz	r1, 8013f94 <rcutils_vsnprintf+0x14>
 8013f88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f8c:	f003 bf50 	b.w	8017e30 <vsniprintf>
 8013f90:	2900      	cmp	r1, #0
 8013f92:	d0f9      	beq.n	8013f88 <rcutils_vsnprintf+0x8>
 8013f94:	f004 f8da 	bl	801814c <__errno>
 8013f98:	2316      	movs	r3, #22
 8013f9a:	6003      	str	r3, [r0, #0]
 8013f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013fa0:	bd70      	pop	{r4, r5, r6, pc}
 8013fa2:	bf00      	nop

08013fa4 <rcutils_strdup>:
 8013fa4:	b084      	sub	sp, #16
 8013fa6:	b570      	push	{r4, r5, r6, lr}
 8013fa8:	b082      	sub	sp, #8
 8013faa:	ac07      	add	r4, sp, #28
 8013fac:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8013fb0:	4605      	mov	r5, r0
 8013fb2:	b1b0      	cbz	r0, 8013fe2 <rcutils_strdup+0x3e>
 8013fb4:	f7ec f91e 	bl	80001f4 <strlen>
 8013fb8:	1c42      	adds	r2, r0, #1
 8013fba:	9b07      	ldr	r3, [sp, #28]
 8013fbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013fbe:	9201      	str	r2, [sp, #4]
 8013fc0:	4606      	mov	r6, r0
 8013fc2:	4610      	mov	r0, r2
 8013fc4:	4798      	blx	r3
 8013fc6:	4604      	mov	r4, r0
 8013fc8:	b128      	cbz	r0, 8013fd6 <rcutils_strdup+0x32>
 8013fca:	9a01      	ldr	r2, [sp, #4]
 8013fcc:	4629      	mov	r1, r5
 8013fce:	f004 f8f2 	bl	80181b6 <memcpy>
 8013fd2:	2300      	movs	r3, #0
 8013fd4:	55a3      	strb	r3, [r4, r6]
 8013fd6:	4620      	mov	r0, r4
 8013fd8:	b002      	add	sp, #8
 8013fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013fde:	b004      	add	sp, #16
 8013fe0:	4770      	bx	lr
 8013fe2:	4604      	mov	r4, r0
 8013fe4:	e7f7      	b.n	8013fd6 <rcutils_strdup+0x32>
 8013fe6:	bf00      	nop

08013fe8 <rcutils_strndup>:
 8013fe8:	b082      	sub	sp, #8
 8013fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fec:	460e      	mov	r6, r1
 8013fee:	a906      	add	r1, sp, #24
 8013ff0:	e881 000c 	stmia.w	r1, {r2, r3}
 8013ff4:	4605      	mov	r5, r0
 8013ff6:	b180      	cbz	r0, 801401a <rcutils_strndup+0x32>
 8013ff8:	1c77      	adds	r7, r6, #1
 8013ffa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013ffc:	4638      	mov	r0, r7
 8013ffe:	4790      	blx	r2
 8014000:	4604      	mov	r4, r0
 8014002:	b128      	cbz	r0, 8014010 <rcutils_strndup+0x28>
 8014004:	463a      	mov	r2, r7
 8014006:	4629      	mov	r1, r5
 8014008:	f004 f8d5 	bl	80181b6 <memcpy>
 801400c:	2300      	movs	r3, #0
 801400e:	55a3      	strb	r3, [r4, r6]
 8014010:	4620      	mov	r0, r4
 8014012:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014016:	b002      	add	sp, #8
 8014018:	4770      	bx	lr
 801401a:	4604      	mov	r4, r0
 801401c:	e7f8      	b.n	8014010 <rcutils_strndup+0x28>
 801401e:	bf00      	nop

08014020 <rcutils_system_time_now>:
 8014020:	b310      	cbz	r0, 8014068 <rcutils_system_time_now+0x48>
 8014022:	b570      	push	{r4, r5, r6, lr}
 8014024:	b084      	sub	sp, #16
 8014026:	4669      	mov	r1, sp
 8014028:	4604      	mov	r4, r0
 801402a:	2001      	movs	r0, #1
 801402c:	f7ef f9a8 	bl	8003380 <clock_gettime>
 8014030:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014034:	2800      	cmp	r0, #0
 8014036:	f171 0300 	sbcs.w	r3, r1, #0
 801403a:	db12      	blt.n	8014062 <rcutils_system_time_now+0x42>
 801403c:	9d02      	ldr	r5, [sp, #8]
 801403e:	2d00      	cmp	r5, #0
 8014040:	db0c      	blt.n	801405c <rcutils_system_time_now+0x3c>
 8014042:	4e0a      	ldr	r6, [pc, #40]	; (801406c <rcutils_system_time_now+0x4c>)
 8014044:	fba0 2306 	umull	r2, r3, r0, r6
 8014048:	1952      	adds	r2, r2, r5
 801404a:	fb06 3301 	mla	r3, r6, r1, r3
 801404e:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 8014052:	2000      	movs	r0, #0
 8014054:	e9c4 2300 	strd	r2, r3, [r4]
 8014058:	b004      	add	sp, #16
 801405a:	bd70      	pop	{r4, r5, r6, pc}
 801405c:	ea50 0301 	orrs.w	r3, r0, r1
 8014060:	d1ef      	bne.n	8014042 <rcutils_system_time_now+0x22>
 8014062:	2002      	movs	r0, #2
 8014064:	b004      	add	sp, #16
 8014066:	bd70      	pop	{r4, r5, r6, pc}
 8014068:	200b      	movs	r0, #11
 801406a:	4770      	bx	lr
 801406c:	3b9aca00 	.word	0x3b9aca00

08014070 <rcutils_steady_time_now>:
 8014070:	b310      	cbz	r0, 80140b8 <rcutils_steady_time_now+0x48>
 8014072:	b570      	push	{r4, r5, r6, lr}
 8014074:	b084      	sub	sp, #16
 8014076:	4669      	mov	r1, sp
 8014078:	4604      	mov	r4, r0
 801407a:	2000      	movs	r0, #0
 801407c:	f7ef f980 	bl	8003380 <clock_gettime>
 8014080:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014084:	2800      	cmp	r0, #0
 8014086:	f171 0300 	sbcs.w	r3, r1, #0
 801408a:	db12      	blt.n	80140b2 <rcutils_steady_time_now+0x42>
 801408c:	9d02      	ldr	r5, [sp, #8]
 801408e:	2d00      	cmp	r5, #0
 8014090:	db0c      	blt.n	80140ac <rcutils_steady_time_now+0x3c>
 8014092:	4e0a      	ldr	r6, [pc, #40]	; (80140bc <rcutils_steady_time_now+0x4c>)
 8014094:	fba0 2306 	umull	r2, r3, r0, r6
 8014098:	1952      	adds	r2, r2, r5
 801409a:	fb06 3301 	mla	r3, r6, r1, r3
 801409e:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 80140a2:	2000      	movs	r0, #0
 80140a4:	e9c4 2300 	strd	r2, r3, [r4]
 80140a8:	b004      	add	sp, #16
 80140aa:	bd70      	pop	{r4, r5, r6, pc}
 80140ac:	ea50 0301 	orrs.w	r3, r0, r1
 80140b0:	d1ef      	bne.n	8014092 <rcutils_steady_time_now+0x22>
 80140b2:	2002      	movs	r0, #2
 80140b4:	b004      	add	sp, #16
 80140b6:	bd70      	pop	{r4, r5, r6, pc}
 80140b8:	200b      	movs	r0, #11
 80140ba:	4770      	bx	lr
 80140bc:	3b9aca00 	.word	0x3b9aca00

080140c0 <rmw_get_zero_initialized_context>:
 80140c0:	b510      	push	{r4, lr}
 80140c2:	2250      	movs	r2, #80	; 0x50
 80140c4:	4604      	mov	r4, r0
 80140c6:	2100      	movs	r1, #0
 80140c8:	f003 ff56 	bl	8017f78 <memset>
 80140cc:	4620      	mov	r0, r4
 80140ce:	bd10      	pop	{r4, pc}

080140d0 <rmw_get_zero_initialized_init_options>:
 80140d0:	b510      	push	{r4, lr}
 80140d2:	2238      	movs	r2, #56	; 0x38
 80140d4:	4604      	mov	r4, r0
 80140d6:	2100      	movs	r1, #0
 80140d8:	f003 ff4e 	bl	8017f78 <memset>
 80140dc:	f104 0010 	add.w	r0, r4, #16
 80140e0:	f000 f806 	bl	80140f0 <rmw_get_default_security_options>
 80140e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80140e8:	60e3      	str	r3, [r4, #12]
 80140ea:	4620      	mov	r0, r4
 80140ec:	bd10      	pop	{r4, pc}
 80140ee:	bf00      	nop

080140f0 <rmw_get_default_security_options>:
 80140f0:	2200      	movs	r2, #0
 80140f2:	7002      	strb	r2, [r0, #0]
 80140f4:	6042      	str	r2, [r0, #4]
 80140f6:	4770      	bx	lr

080140f8 <rmw_validate_namespace_with_size>:
 80140f8:	b340      	cbz	r0, 801414c <rmw_validate_namespace_with_size+0x54>
 80140fa:	b5d0      	push	{r4, r6, r7, lr}
 80140fc:	4614      	mov	r4, r2
 80140fe:	b0c2      	sub	sp, #264	; 0x108
 8014100:	b332      	cbz	r2, 8014150 <rmw_validate_namespace_with_size+0x58>
 8014102:	2901      	cmp	r1, #1
 8014104:	460f      	mov	r7, r1
 8014106:	461e      	mov	r6, r3
 8014108:	d102      	bne.n	8014110 <rmw_validate_namespace_with_size+0x18>
 801410a:	7803      	ldrb	r3, [r0, #0]
 801410c:	2b2f      	cmp	r3, #47	; 0x2f
 801410e:	d019      	beq.n	8014144 <rmw_validate_namespace_with_size+0x4c>
 8014110:	aa01      	add	r2, sp, #4
 8014112:	4669      	mov	r1, sp
 8014114:	f7fa fe1a 	bl	800ed4c <rmw_validate_full_topic_name>
 8014118:	b990      	cbnz	r0, 8014140 <rmw_validate_namespace_with_size+0x48>
 801411a:	9b00      	ldr	r3, [sp, #0]
 801411c:	b14b      	cbz	r3, 8014132 <rmw_validate_namespace_with_size+0x3a>
 801411e:	2b07      	cmp	r3, #7
 8014120:	d007      	beq.n	8014132 <rmw_validate_namespace_with_size+0x3a>
 8014122:	1e5a      	subs	r2, r3, #1
 8014124:	2a05      	cmp	r2, #5
 8014126:	d82b      	bhi.n	8014180 <rmw_validate_namespace_with_size+0x88>
 8014128:	e8df f002 	tbb	[pc, r2]
 801412c:	24211e1b 	.word	0x24211e1b
 8014130:	1427      	.short	0x1427
 8014132:	2ff5      	cmp	r7, #245	; 0xf5
 8014134:	d906      	bls.n	8014144 <rmw_validate_namespace_with_size+0x4c>
 8014136:	2307      	movs	r3, #7
 8014138:	6023      	str	r3, [r4, #0]
 801413a:	b10e      	cbz	r6, 8014140 <rmw_validate_namespace_with_size+0x48>
 801413c:	23f4      	movs	r3, #244	; 0xf4
 801413e:	6033      	str	r3, [r6, #0]
 8014140:	b042      	add	sp, #264	; 0x108
 8014142:	bdd0      	pop	{r4, r6, r7, pc}
 8014144:	2000      	movs	r0, #0
 8014146:	6020      	str	r0, [r4, #0]
 8014148:	b042      	add	sp, #264	; 0x108
 801414a:	bdd0      	pop	{r4, r6, r7, pc}
 801414c:	200b      	movs	r0, #11
 801414e:	4770      	bx	lr
 8014150:	200b      	movs	r0, #11
 8014152:	e7f5      	b.n	8014140 <rmw_validate_namespace_with_size+0x48>
 8014154:	2306      	movs	r3, #6
 8014156:	6023      	str	r3, [r4, #0]
 8014158:	2e00      	cmp	r6, #0
 801415a:	d0f1      	beq.n	8014140 <rmw_validate_namespace_with_size+0x48>
 801415c:	9b01      	ldr	r3, [sp, #4]
 801415e:	6033      	str	r3, [r6, #0]
 8014160:	e7ee      	b.n	8014140 <rmw_validate_namespace_with_size+0x48>
 8014162:	2301      	movs	r3, #1
 8014164:	6023      	str	r3, [r4, #0]
 8014166:	e7f7      	b.n	8014158 <rmw_validate_namespace_with_size+0x60>
 8014168:	2302      	movs	r3, #2
 801416a:	6023      	str	r3, [r4, #0]
 801416c:	e7f4      	b.n	8014158 <rmw_validate_namespace_with_size+0x60>
 801416e:	2303      	movs	r3, #3
 8014170:	6023      	str	r3, [r4, #0]
 8014172:	e7f1      	b.n	8014158 <rmw_validate_namespace_with_size+0x60>
 8014174:	2304      	movs	r3, #4
 8014176:	6023      	str	r3, [r4, #0]
 8014178:	e7ee      	b.n	8014158 <rmw_validate_namespace_with_size+0x60>
 801417a:	2305      	movs	r3, #5
 801417c:	6023      	str	r3, [r4, #0]
 801417e:	e7eb      	b.n	8014158 <rmw_validate_namespace_with_size+0x60>
 8014180:	4a03      	ldr	r2, [pc, #12]	; (8014190 <rmw_validate_namespace_with_size+0x98>)
 8014182:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014186:	a802      	add	r0, sp, #8
 8014188:	f7ff fee0 	bl	8013f4c <rcutils_snprintf>
 801418c:	2001      	movs	r0, #1
 801418e:	e7d7      	b.n	8014140 <rmw_validate_namespace_with_size+0x48>
 8014190:	080193b8 	.word	0x080193b8

08014194 <rmw_validate_namespace>:
 8014194:	b168      	cbz	r0, 80141b2 <rmw_validate_namespace+0x1e>
 8014196:	b570      	push	{r4, r5, r6, lr}
 8014198:	460d      	mov	r5, r1
 801419a:	4616      	mov	r6, r2
 801419c:	4604      	mov	r4, r0
 801419e:	f7ec f829 	bl	80001f4 <strlen>
 80141a2:	4633      	mov	r3, r6
 80141a4:	4601      	mov	r1, r0
 80141a6:	462a      	mov	r2, r5
 80141a8:	4620      	mov	r0, r4
 80141aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80141ae:	f7ff bfa3 	b.w	80140f8 <rmw_validate_namespace_with_size>
 80141b2:	200b      	movs	r0, #11
 80141b4:	4770      	bx	lr
 80141b6:	bf00      	nop

080141b8 <rmw_namespace_validation_result_string>:
 80141b8:	2807      	cmp	r0, #7
 80141ba:	bf9a      	itte	ls
 80141bc:	4b02      	ldrls	r3, [pc, #8]	; (80141c8 <rmw_namespace_validation_result_string+0x10>)
 80141be:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80141c2:	4802      	ldrhi	r0, [pc, #8]	; (80141cc <rmw_namespace_validation_result_string+0x14>)
 80141c4:	4770      	bx	lr
 80141c6:	bf00      	nop
 80141c8:	080195b0 	.word	0x080195b0
 80141cc:	08019408 	.word	0x08019408

080141d0 <rmw_validate_node_name>:
 80141d0:	2800      	cmp	r0, #0
 80141d2:	d03b      	beq.n	801424c <rmw_validate_node_name+0x7c>
 80141d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141d8:	460f      	mov	r7, r1
 80141da:	2900      	cmp	r1, #0
 80141dc:	d038      	beq.n	8014250 <rmw_validate_node_name+0x80>
 80141de:	4615      	mov	r5, r2
 80141e0:	4604      	mov	r4, r0
 80141e2:	f7ec f807 	bl	80001f4 <strlen>
 80141e6:	b1e0      	cbz	r0, 8014222 <rmw_validate_node_name+0x52>
 80141e8:	1e63      	subs	r3, r4, #1
 80141ea:	eb03 0e00 	add.w	lr, r3, r0
 80141ee:	f1c4 0c01 	rsb	ip, r4, #1
 80141f2:	eb0c 0803 	add.w	r8, ip, r3
 80141f6:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 80141fa:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 80141fe:	f026 0220 	bic.w	r2, r6, #32
 8014202:	2909      	cmp	r1, #9
 8014204:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 8014208:	d913      	bls.n	8014232 <rmw_validate_node_name+0x62>
 801420a:	2a19      	cmp	r2, #25
 801420c:	d911      	bls.n	8014232 <rmw_validate_node_name+0x62>
 801420e:	2e5f      	cmp	r6, #95	; 0x5f
 8014210:	d00f      	beq.n	8014232 <rmw_validate_node_name+0x62>
 8014212:	2302      	movs	r3, #2
 8014214:	603b      	str	r3, [r7, #0]
 8014216:	b10d      	cbz	r5, 801421c <rmw_validate_node_name+0x4c>
 8014218:	f8c5 8000 	str.w	r8, [r5]
 801421c:	2000      	movs	r0, #0
 801421e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014222:	2301      	movs	r3, #1
 8014224:	603b      	str	r3, [r7, #0]
 8014226:	2d00      	cmp	r5, #0
 8014228:	d0f8      	beq.n	801421c <rmw_validate_node_name+0x4c>
 801422a:	2000      	movs	r0, #0
 801422c:	6028      	str	r0, [r5, #0]
 801422e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014232:	4573      	cmp	r3, lr
 8014234:	d1dd      	bne.n	80141f2 <rmw_validate_node_name+0x22>
 8014236:	7822      	ldrb	r2, [r4, #0]
 8014238:	4b0d      	ldr	r3, [pc, #52]	; (8014270 <rmw_validate_node_name+0xa0>)
 801423a:	5cd3      	ldrb	r3, [r2, r3]
 801423c:	f013 0304 	ands.w	r3, r3, #4
 8014240:	d110      	bne.n	8014264 <rmw_validate_node_name+0x94>
 8014242:	28ff      	cmp	r0, #255	; 0xff
 8014244:	d806      	bhi.n	8014254 <rmw_validate_node_name+0x84>
 8014246:	603b      	str	r3, [r7, #0]
 8014248:	4618      	mov	r0, r3
 801424a:	e7e8      	b.n	801421e <rmw_validate_node_name+0x4e>
 801424c:	200b      	movs	r0, #11
 801424e:	4770      	bx	lr
 8014250:	200b      	movs	r0, #11
 8014252:	e7e4      	b.n	801421e <rmw_validate_node_name+0x4e>
 8014254:	2204      	movs	r2, #4
 8014256:	603a      	str	r2, [r7, #0]
 8014258:	2d00      	cmp	r5, #0
 801425a:	d0df      	beq.n	801421c <rmw_validate_node_name+0x4c>
 801425c:	22fe      	movs	r2, #254	; 0xfe
 801425e:	4618      	mov	r0, r3
 8014260:	602a      	str	r2, [r5, #0]
 8014262:	e7dc      	b.n	801421e <rmw_validate_node_name+0x4e>
 8014264:	2303      	movs	r3, #3
 8014266:	603b      	str	r3, [r7, #0]
 8014268:	2d00      	cmp	r5, #0
 801426a:	d1de      	bne.n	801422a <rmw_validate_node_name+0x5a>
 801426c:	e7d6      	b.n	801421c <rmw_validate_node_name+0x4c>
 801426e:	bf00      	nop
 8014270:	08019974 	.word	0x08019974

08014274 <rmw_node_name_validation_result_string>:
 8014274:	2804      	cmp	r0, #4
 8014276:	bf9a      	itte	ls
 8014278:	4b02      	ldrls	r3, [pc, #8]	; (8014284 <rmw_node_name_validation_result_string+0x10>)
 801427a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801427e:	4802      	ldrhi	r0, [pc, #8]	; (8014288 <rmw_node_name_validation_result_string+0x14>)
 8014280:	4770      	bx	lr
 8014282:	bf00      	nop
 8014284:	080196bc 	.word	0x080196bc
 8014288:	080195d0 	.word	0x080195d0

0801428c <get_memory>:
 801428c:	4603      	mov	r3, r0
 801428e:	6840      	ldr	r0, [r0, #4]
 8014290:	b158      	cbz	r0, 80142aa <get_memory+0x1e>
 8014292:	6882      	ldr	r2, [r0, #8]
 8014294:	605a      	str	r2, [r3, #4]
 8014296:	b10a      	cbz	r2, 801429c <get_memory+0x10>
 8014298:	2100      	movs	r1, #0
 801429a:	6051      	str	r1, [r2, #4]
 801429c:	681a      	ldr	r2, [r3, #0]
 801429e:	6082      	str	r2, [r0, #8]
 80142a0:	b102      	cbz	r2, 80142a4 <get_memory+0x18>
 80142a2:	6050      	str	r0, [r2, #4]
 80142a4:	2200      	movs	r2, #0
 80142a6:	6042      	str	r2, [r0, #4]
 80142a8:	6018      	str	r0, [r3, #0]
 80142aa:	4770      	bx	lr

080142ac <put_memory>:
 80142ac:	684b      	ldr	r3, [r1, #4]
 80142ae:	b10b      	cbz	r3, 80142b4 <put_memory+0x8>
 80142b0:	688a      	ldr	r2, [r1, #8]
 80142b2:	609a      	str	r2, [r3, #8]
 80142b4:	688a      	ldr	r2, [r1, #8]
 80142b6:	b102      	cbz	r2, 80142ba <put_memory+0xe>
 80142b8:	6053      	str	r3, [r2, #4]
 80142ba:	6803      	ldr	r3, [r0, #0]
 80142bc:	428b      	cmp	r3, r1
 80142be:	6843      	ldr	r3, [r0, #4]
 80142c0:	bf08      	it	eq
 80142c2:	6002      	streq	r2, [r0, #0]
 80142c4:	608b      	str	r3, [r1, #8]
 80142c6:	b103      	cbz	r3, 80142ca <put_memory+0x1e>
 80142c8:	6059      	str	r1, [r3, #4]
 80142ca:	2300      	movs	r3, #0
 80142cc:	604b      	str	r3, [r1, #4]
 80142ce:	6041      	str	r1, [r0, #4]
 80142d0:	4770      	bx	lr
 80142d2:	bf00      	nop

080142d4 <rmw_get_implementation_identifier>:
 80142d4:	4b01      	ldr	r3, [pc, #4]	; (80142dc <rmw_get_implementation_identifier+0x8>)
 80142d6:	6818      	ldr	r0, [r3, #0]
 80142d8:	4770      	bx	lr
 80142da:	bf00      	nop
 80142dc:	080196e8 	.word	0x080196e8

080142e0 <rmw_init_options_init>:
 80142e0:	b084      	sub	sp, #16
 80142e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80142e6:	ad09      	add	r5, sp, #36	; 0x24
 80142e8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80142ec:	b130      	cbz	r0, 80142fc <rmw_init_options_init+0x1c>
 80142ee:	4604      	mov	r4, r0
 80142f0:	4628      	mov	r0, r5
 80142f2:	f7fa fbb9 	bl	800ea68 <rcutils_allocator_is_valid>
 80142f6:	b108      	cbz	r0, 80142fc <rmw_init_options_init+0x1c>
 80142f8:	68a3      	ldr	r3, [r4, #8]
 80142fa:	b123      	cbz	r3, 8014306 <rmw_init_options_init+0x26>
 80142fc:	200b      	movs	r0, #11
 80142fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014302:	b004      	add	sp, #16
 8014304:	4770      	bx	lr
 8014306:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014308:	4f1c      	ldr	r7, [pc, #112]	; (801437c <rmw_init_options_init+0x9c>)
 801430a:	682e      	ldr	r6, [r5, #0]
 801430c:	683d      	ldr	r5, [r7, #0]
 801430e:	60a5      	str	r5, [r4, #8]
 8014310:	f04f 0800 	mov.w	r8, #0
 8014314:	f04f 0900 	mov.w	r9, #0
 8014318:	f104 0520 	add.w	r5, r4, #32
 801431c:	e9c4 8900 	strd	r8, r9, [r4]
 8014320:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014322:	4b17      	ldr	r3, [pc, #92]	; (8014380 <rmw_init_options_init+0xa0>)
 8014324:	4817      	ldr	r0, [pc, #92]	; (8014384 <rmw_init_options_init+0xa4>)
 8014326:	602e      	str	r6, [r5, #0]
 8014328:	4917      	ldr	r1, [pc, #92]	; (8014388 <rmw_init_options_init+0xa8>)
 801432a:	61e3      	str	r3, [r4, #28]
 801432c:	2203      	movs	r2, #3
 801432e:	f7fb f957 	bl	800f5e0 <rmw_uxrce_init_init_options_impl_memory>
 8014332:	4814      	ldr	r0, [pc, #80]	; (8014384 <rmw_init_options_init+0xa4>)
 8014334:	f7ff ffaa 	bl	801428c <get_memory>
 8014338:	b1e8      	cbz	r0, 8014376 <rmw_init_options_init+0x96>
 801433a:	4a14      	ldr	r2, [pc, #80]	; (801438c <rmw_init_options_init+0xac>)
 801433c:	68c3      	ldr	r3, [r0, #12]
 801433e:	6851      	ldr	r1, [r2, #4]
 8014340:	7810      	ldrb	r0, [r2, #0]
 8014342:	6363      	str	r3, [r4, #52]	; 0x34
 8014344:	7418      	strb	r0, [r3, #16]
 8014346:	6159      	str	r1, [r3, #20]
 8014348:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 801434c:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 8014350:	e9c3 5006 	strd	r5, r0, [r3, #24]
 8014354:	e9c3 1208 	strd	r1, r2, [r3, #32]
 8014358:	f7fd f9da 	bl	8011710 <uxr_nanos>
 801435c:	f003 fa04 	bl	8017768 <srand>
 8014360:	f003 fa30 	bl	80177c4 <rand>
 8014364:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014366:	6298      	str	r0, [r3, #40]	; 0x28
 8014368:	2800      	cmp	r0, #0
 801436a:	d0f9      	beq.n	8014360 <rmw_init_options_init+0x80>
 801436c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014370:	2000      	movs	r0, #0
 8014372:	b004      	add	sp, #16
 8014374:	4770      	bx	lr
 8014376:	2001      	movs	r0, #1
 8014378:	e7c1      	b.n	80142fe <rmw_init_options_init+0x1e>
 801437a:	bf00      	nop
 801437c:	080196e8 	.word	0x080196e8
 8014380:	08019290 	.word	0x08019290
 8014384:	2000d4f4 	.word	0x2000d4f4
 8014388:	2000d148 	.word	0x2000d148
 801438c:	2000a1d8 	.word	0x2000a1d8

08014390 <rmw_init_options_copy>:
 8014390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014392:	b158      	cbz	r0, 80143ac <rmw_init_options_copy+0x1c>
 8014394:	460e      	mov	r6, r1
 8014396:	b149      	cbz	r1, 80143ac <rmw_init_options_copy+0x1c>
 8014398:	4604      	mov	r4, r0
 801439a:	6880      	ldr	r0, [r0, #8]
 801439c:	b120      	cbz	r0, 80143a8 <rmw_init_options_copy+0x18>
 801439e:	4b1b      	ldr	r3, [pc, #108]	; (801440c <rmw_init_options_copy+0x7c>)
 80143a0:	6819      	ldr	r1, [r3, #0]
 80143a2:	f7eb ff1d 	bl	80001e0 <strcmp>
 80143a6:	bb60      	cbnz	r0, 8014402 <rmw_init_options_copy+0x72>
 80143a8:	68b3      	ldr	r3, [r6, #8]
 80143aa:	b113      	cbz	r3, 80143b2 <rmw_init_options_copy+0x22>
 80143ac:	230b      	movs	r3, #11
 80143ae:	4618      	mov	r0, r3
 80143b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143b2:	4623      	mov	r3, r4
 80143b4:	4632      	mov	r2, r6
 80143b6:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80143ba:	681d      	ldr	r5, [r3, #0]
 80143bc:	6858      	ldr	r0, [r3, #4]
 80143be:	6899      	ldr	r1, [r3, #8]
 80143c0:	68df      	ldr	r7, [r3, #12]
 80143c2:	60d7      	str	r7, [r2, #12]
 80143c4:	3310      	adds	r3, #16
 80143c6:	4563      	cmp	r3, ip
 80143c8:	6015      	str	r5, [r2, #0]
 80143ca:	6050      	str	r0, [r2, #4]
 80143cc:	6091      	str	r1, [r2, #8]
 80143ce:	f102 0210 	add.w	r2, r2, #16
 80143d2:	d1f2      	bne.n	80143ba <rmw_init_options_copy+0x2a>
 80143d4:	6819      	ldr	r1, [r3, #0]
 80143d6:	685b      	ldr	r3, [r3, #4]
 80143d8:	480d      	ldr	r0, [pc, #52]	; (8014410 <rmw_init_options_copy+0x80>)
 80143da:	6053      	str	r3, [r2, #4]
 80143dc:	6011      	str	r1, [r2, #0]
 80143de:	f7ff ff55 	bl	801428c <get_memory>
 80143e2:	b188      	cbz	r0, 8014408 <rmw_init_options_copy+0x78>
 80143e4:	68c5      	ldr	r5, [r0, #12]
 80143e6:	6375      	str	r5, [r6, #52]	; 0x34
 80143e8:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80143ea:	3610      	adds	r6, #16
 80143ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80143ee:	f105 0410 	add.w	r4, r5, #16
 80143f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80143f4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80143f8:	2300      	movs	r3, #0
 80143fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80143fe:	4618      	mov	r0, r3
 8014400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014402:	230c      	movs	r3, #12
 8014404:	4618      	mov	r0, r3
 8014406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014408:	2301      	movs	r3, #1
 801440a:	e7d0      	b.n	80143ae <rmw_init_options_copy+0x1e>
 801440c:	080196e8 	.word	0x080196e8
 8014410:	2000d4f4 	.word	0x2000d4f4

08014414 <rmw_init_options_fini>:
 8014414:	2800      	cmp	r0, #0
 8014416:	d036      	beq.n	8014486 <rmw_init_options_fini+0x72>
 8014418:	b530      	push	{r4, r5, lr}
 801441a:	4604      	mov	r4, r0
 801441c:	b08f      	sub	sp, #60	; 0x3c
 801441e:	3020      	adds	r0, #32
 8014420:	f7fa fb22 	bl	800ea68 <rcutils_allocator_is_valid>
 8014424:	b328      	cbz	r0, 8014472 <rmw_init_options_fini+0x5e>
 8014426:	68a0      	ldr	r0, [r4, #8]
 8014428:	b120      	cbz	r0, 8014434 <rmw_init_options_fini+0x20>
 801442a:	4b18      	ldr	r3, [pc, #96]	; (801448c <rmw_init_options_fini+0x78>)
 801442c:	6819      	ldr	r1, [r3, #0]
 801442e:	f7eb fed7 	bl	80001e0 <strcmp>
 8014432:	bb30      	cbnz	r0, 8014482 <rmw_init_options_fini+0x6e>
 8014434:	4b16      	ldr	r3, [pc, #88]	; (8014490 <rmw_init_options_fini+0x7c>)
 8014436:	6819      	ldr	r1, [r3, #0]
 8014438:	b1f9      	cbz	r1, 801447a <rmw_init_options_fini+0x66>
 801443a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801443c:	e001      	b.n	8014442 <rmw_init_options_fini+0x2e>
 801443e:	6889      	ldr	r1, [r1, #8]
 8014440:	b1d9      	cbz	r1, 801447a <rmw_init_options_fini+0x66>
 8014442:	68cb      	ldr	r3, [r1, #12]
 8014444:	429a      	cmp	r2, r3
 8014446:	d1fa      	bne.n	801443e <rmw_init_options_fini+0x2a>
 8014448:	4811      	ldr	r0, [pc, #68]	; (8014490 <rmw_init_options_fini+0x7c>)
 801444a:	f7ff ff2f 	bl	80142ac <put_memory>
 801444e:	466d      	mov	r5, sp
 8014450:	4668      	mov	r0, sp
 8014452:	f7ff fe3d 	bl	80140d0 <rmw_get_zero_initialized_init_options>
 8014456:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014458:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801445a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801445c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801445e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014462:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014466:	e884 0003 	stmia.w	r4, {r0, r1}
 801446a:	2300      	movs	r3, #0
 801446c:	4618      	mov	r0, r3
 801446e:	b00f      	add	sp, #60	; 0x3c
 8014470:	bd30      	pop	{r4, r5, pc}
 8014472:	230b      	movs	r3, #11
 8014474:	4618      	mov	r0, r3
 8014476:	b00f      	add	sp, #60	; 0x3c
 8014478:	bd30      	pop	{r4, r5, pc}
 801447a:	2301      	movs	r3, #1
 801447c:	4618      	mov	r0, r3
 801447e:	b00f      	add	sp, #60	; 0x3c
 8014480:	bd30      	pop	{r4, r5, pc}
 8014482:	230c      	movs	r3, #12
 8014484:	e7f2      	b.n	801446c <rmw_init_options_fini+0x58>
 8014486:	230b      	movs	r3, #11
 8014488:	4618      	mov	r0, r3
 801448a:	4770      	bx	lr
 801448c:	080196e8 	.word	0x080196e8
 8014490:	2000d4f4 	.word	0x2000d4f4

08014494 <rmw_init>:
 8014494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014498:	b082      	sub	sp, #8
 801449a:	2800      	cmp	r0, #0
 801449c:	f000 80d6 	beq.w	801464c <rmw_init+0x1b8>
 80144a0:	460e      	mov	r6, r1
 80144a2:	2900      	cmp	r1, #0
 80144a4:	f000 80d2 	beq.w	801464c <rmw_init+0x1b8>
 80144a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80144aa:	4605      	mov	r5, r0
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	f000 80cd 	beq.w	801464c <rmw_init+0x1b8>
 80144b2:	4b79      	ldr	r3, [pc, #484]	; (8014698 <rmw_init+0x204>)
 80144b4:	6880      	ldr	r0, [r0, #8]
 80144b6:	f8d3 9000 	ldr.w	r9, [r3]
 80144ba:	b128      	cbz	r0, 80144c8 <rmw_init+0x34>
 80144bc:	4649      	mov	r1, r9
 80144be:	f7eb fe8f 	bl	80001e0 <strcmp>
 80144c2:	2800      	cmp	r0, #0
 80144c4:	f040 80cc 	bne.w	8014660 <rmw_init+0x1cc>
 80144c8:	e9d5 0100 	ldrd	r0, r1, [r5]
 80144cc:	68eb      	ldr	r3, [r5, #12]
 80144ce:	61f3      	str	r3, [r6, #28]
 80144d0:	e9c6 0100 	strd	r0, r1, [r6]
 80144d4:	2201      	movs	r2, #1
 80144d6:	4971      	ldr	r1, [pc, #452]	; (801469c <rmw_init+0x208>)
 80144d8:	4871      	ldr	r0, [pc, #452]	; (80146a0 <rmw_init+0x20c>)
 80144da:	f8c6 9008 	str.w	r9, [r6, #8]
 80144de:	f7fb f827 	bl	800f530 <rmw_uxrce_init_session_memory>
 80144e2:	4870      	ldr	r0, [pc, #448]	; (80146a4 <rmw_init+0x210>)
 80144e4:	4970      	ldr	r1, [pc, #448]	; (80146a8 <rmw_init+0x214>)
 80144e6:	2204      	movs	r2, #4
 80144e8:	f7fb f85c 	bl	800f5a4 <rmw_uxrce_init_static_input_buffer_memory>
 80144ec:	486c      	ldr	r0, [pc, #432]	; (80146a0 <rmw_init+0x20c>)
 80144ee:	f7ff fecd 	bl	801428c <get_memory>
 80144f2:	2800      	cmp	r0, #0
 80144f4:	f000 80af 	beq.w	8014656 <rmw_init+0x1c2>
 80144f8:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 80144fa:	68c4      	ldr	r4, [r0, #12]
 80144fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80144fe:	7c39      	ldrb	r1, [r7, #16]
 8014500:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8014504:	9001      	str	r0, [sp, #4]
 8014506:	6a38      	ldr	r0, [r7, #32]
 8014508:	9000      	str	r0, [sp, #0]
 801450a:	f104 0a10 	add.w	sl, r4, #16
 801450e:	4650      	mov	r0, sl
 8014510:	f001 fbda 	bl	8015cc8 <uxr_set_custom_transport_callbacks>
 8014514:	f241 5294 	movw	r2, #5524	; 0x1594
 8014518:	f241 5398 	movw	r3, #5528	; 0x1598
 801451c:	f04f 0800 	mov.w	r8, #0
 8014520:	f241 509c 	movw	r0, #5532	; 0x159c
 8014524:	f504 51ad 	add.w	r1, r4, #5536	; 0x15a0
 8014528:	f844 8002 	str.w	r8, [r4, r2]
 801452c:	f844 8003 	str.w	r8, [r4, r3]
 8014530:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014534:	f504 735e 	add.w	r3, r4, #888	; 0x378
 8014538:	f844 8000 	str.w	r8, [r4, r0]
 801453c:	e9c4 33e1 	strd	r3, r3, [r4, #900]	; 0x384
 8014540:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8014544:	4859      	ldr	r0, [pc, #356]	; (80146ac <rmw_init+0x218>)
 8014546:	f8c1 8000 	str.w	r8, [r1]
 801454a:	2201      	movs	r2, #1
 801454c:	e9c4 98da 	strd	r9, r8, [r4, #872]	; 0x368
 8014550:	4957      	ldr	r1, [pc, #348]	; (80146b0 <rmw_init+0x21c>)
 8014552:	64b4      	str	r4, [r6, #72]	; 0x48
 8014554:	f7fa ffd2 	bl	800f4fc <rmw_uxrce_init_node_memory>
 8014558:	4956      	ldr	r1, [pc, #344]	; (80146b4 <rmw_init+0x220>)
 801455a:	4857      	ldr	r0, [pc, #348]	; (80146b8 <rmw_init+0x224>)
 801455c:	2205      	movs	r2, #5
 801455e:	f7fa ffb3 	bl	800f4c8 <rmw_uxrce_init_subscription_memory>
 8014562:	4956      	ldr	r1, [pc, #344]	; (80146bc <rmw_init+0x228>)
 8014564:	4856      	ldr	r0, [pc, #344]	; (80146c0 <rmw_init+0x22c>)
 8014566:	220a      	movs	r2, #10
 8014568:	f7fa ff94 	bl	800f494 <rmw_uxrce_init_publisher_memory>
 801456c:	4955      	ldr	r1, [pc, #340]	; (80146c4 <rmw_init+0x230>)
 801456e:	4856      	ldr	r0, [pc, #344]	; (80146c8 <rmw_init+0x234>)
 8014570:	2201      	movs	r2, #1
 8014572:	f7fa ff5b 	bl	800f42c <rmw_uxrce_init_service_memory>
 8014576:	4955      	ldr	r1, [pc, #340]	; (80146cc <rmw_init+0x238>)
 8014578:	4855      	ldr	r0, [pc, #340]	; (80146d0 <rmw_init+0x23c>)
 801457a:	2201      	movs	r2, #1
 801457c:	f7fa ff70 	bl	800f460 <rmw_uxrce_init_client_memory>
 8014580:	4954      	ldr	r1, [pc, #336]	; (80146d4 <rmw_init+0x240>)
 8014582:	4855      	ldr	r0, [pc, #340]	; (80146d8 <rmw_init+0x244>)
 8014584:	220f      	movs	r2, #15
 8014586:	f7fa fff1 	bl	800f56c <rmw_uxrce_init_topic_memory>
 801458a:	4954      	ldr	r1, [pc, #336]	; (80146dc <rmw_init+0x248>)
 801458c:	4854      	ldr	r0, [pc, #336]	; (80146e0 <rmw_init+0x24c>)
 801458e:	2203      	movs	r2, #3
 8014590:	f7fb f826 	bl	800f5e0 <rmw_uxrce_init_init_options_impl_memory>
 8014594:	4953      	ldr	r1, [pc, #332]	; (80146e4 <rmw_init+0x250>)
 8014596:	4854      	ldr	r0, [pc, #336]	; (80146e8 <rmw_init+0x254>)
 8014598:	2204      	movs	r2, #4
 801459a:	f7fb f83b 	bl	800f614 <rmw_uxrce_init_wait_set_memory>
 801459e:	4953      	ldr	r1, [pc, #332]	; (80146ec <rmw_init+0x258>)
 80145a0:	4853      	ldr	r0, [pc, #332]	; (80146f0 <rmw_init+0x25c>)
 80145a2:	2204      	movs	r2, #4
 80145a4:	f7fb f852 	bl	800f64c <rmw_uxrce_init_guard_condition_memory>
 80145a8:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80145aa:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 80145ac:	4642      	mov	r2, r8
 80145ae:	f000 fab5 	bl	8014b1c <rmw_uxrce_transport_init>
 80145b2:	4607      	mov	r7, r0
 80145b4:	2800      	cmp	r0, #0
 80145b6:	d158      	bne.n	801466a <rmw_init+0x1d6>
 80145b8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80145ba:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 80145be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80145c0:	4628      	mov	r0, r5
 80145c2:	f504 7122 	add.w	r1, r4, #648	; 0x288
 80145c6:	f7fb ff29 	bl	801041c <uxr_init_session>
 80145ca:	494a      	ldr	r1, [pc, #296]	; (80146f4 <rmw_init+0x260>)
 80145cc:	4622      	mov	r2, r4
 80145ce:	4628      	mov	r0, r5
 80145d0:	f7fb ff46 	bl	8010460 <uxr_set_topic_callback>
 80145d4:	4948      	ldr	r1, [pc, #288]	; (80146f8 <rmw_init+0x264>)
 80145d6:	463a      	mov	r2, r7
 80145d8:	4628      	mov	r0, r5
 80145da:	f7fb ff3d 	bl	8010458 <uxr_set_status_callback>
 80145de:	4947      	ldr	r1, [pc, #284]	; (80146fc <rmw_init+0x268>)
 80145e0:	463a      	mov	r2, r7
 80145e2:	4628      	mov	r0, r5
 80145e4:	f7fb ff40 	bl	8010468 <uxr_set_request_callback>
 80145e8:	4945      	ldr	r1, [pc, #276]	; (8014700 <rmw_init+0x26c>)
 80145ea:	463a      	mov	r2, r7
 80145ec:	4628      	mov	r0, r5
 80145ee:	f7fb ff3f 	bl	8010470 <uxr_set_reply_callback>
 80145f2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80145f6:	2304      	movs	r3, #4
 80145f8:	0092      	lsls	r2, r2, #2
 80145fa:	f504 7165 	add.w	r1, r4, #916	; 0x394
 80145fe:	4628      	mov	r0, r5
 8014600:	f7fb ff76 	bl	80104f0 <uxr_create_input_reliable_stream>
 8014604:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8014608:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 801460c:	0092      	lsls	r2, r2, #2
 801460e:	2304      	movs	r3, #4
 8014610:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8014614:	4628      	mov	r0, r5
 8014616:	f7fb ff41 	bl	801049c <uxr_create_output_reliable_stream>
 801461a:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 801461e:	4628      	mov	r0, r5
 8014620:	f7fb ff60 	bl	80104e4 <uxr_create_input_best_effort_stream>
 8014624:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 8014628:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 801462c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8014630:	4628      	mov	r0, r5
 8014632:	3114      	adds	r1, #20
 8014634:	f7fb ff20 	bl	8010478 <uxr_create_output_best_effort_stream>
 8014638:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 801463c:	4628      	mov	r0, r5
 801463e:	f7fc fb77 	bl	8010d30 <uxr_create_session>
 8014642:	b1f8      	cbz	r0, 8014684 <rmw_init+0x1f0>
 8014644:	4638      	mov	r0, r7
 8014646:	b002      	add	sp, #8
 8014648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801464c:	270b      	movs	r7, #11
 801464e:	4638      	mov	r0, r7
 8014650:	b002      	add	sp, #8
 8014652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014656:	2701      	movs	r7, #1
 8014658:	4638      	mov	r0, r7
 801465a:	b002      	add	sp, #8
 801465c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014660:	270c      	movs	r7, #12
 8014662:	4638      	mov	r0, r7
 8014664:	b002      	add	sp, #8
 8014666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801466a:	4650      	mov	r0, sl
 801466c:	f001 fb6c 	bl	8015d48 <uxr_close_custom_transport>
 8014670:	480b      	ldr	r0, [pc, #44]	; (80146a0 <rmw_init+0x20c>)
 8014672:	4621      	mov	r1, r4
 8014674:	f7ff fe1a 	bl	80142ac <put_memory>
 8014678:	4638      	mov	r0, r7
 801467a:	f8c6 8048 	str.w	r8, [r6, #72]	; 0x48
 801467e:	b002      	add	sp, #8
 8014680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014684:	4650      	mov	r0, sl
 8014686:	f001 fb5f 	bl	8015d48 <uxr_close_custom_transport>
 801468a:	4805      	ldr	r0, [pc, #20]	; (80146a0 <rmw_init+0x20c>)
 801468c:	4621      	mov	r1, r4
 801468e:	f7ff fe0d 	bl	80142ac <put_memory>
 8014692:	64b7      	str	r7, [r6, #72]	; 0x48
 8014694:	2701      	movs	r7, #1
 8014696:	e7d5      	b.n	8014644 <rmw_init+0x1b0>
 8014698:	080196e8 	.word	0x080196e8
 801469c:	2000d5d0 	.word	0x2000d5d0
 80146a0:	2000d3a0 	.word	0x2000d3a0
 80146a4:	2000a1f8 	.word	0x2000a1f8
 80146a8:	2000afd8 	.word	0x2000afd8
 80146ac:	2000d1cc 	.word	0x2000d1cc
 80146b0:	2000d3b0 	.word	0x2000d3b0
 80146b4:	2000ab00 	.word	0x2000ab00
 80146b8:	2000d464 	.word	0x2000d464
 80146bc:	2000a218 	.word	0x2000a218
 80146c0:	2000a208 	.word	0x2000a208
 80146c4:	2000d508 	.word	0x2000d508
 80146c8:	2000d454 	.word	0x2000d454
 80146cc:	2000af10 	.word	0x2000af10
 80146d0:	2000aa88 	.word	0x2000aa88
 80146d4:	2000d1dc 	.word	0x2000d1dc
 80146d8:	2000d390 	.word	0x2000d390
 80146dc:	2000d148 	.word	0x2000d148
 80146e0:	2000d4f4 	.word	0x2000d4f4
 80146e4:	2000d0d8 	.word	0x2000d0d8
 80146e8:	2000eb78 	.word	0x2000eb78
 80146ec:	2000d474 	.word	0x2000d474
 80146f0:	2000d380 	.word	0x2000d380
 80146f4:	0801728d 	.word	0x0801728d
 80146f8:	08017285 	.word	0x08017285
 80146fc:	08017321 	.word	0x08017321
 8014700:	080173b9 	.word	0x080173b9

08014704 <rmw_context_fini>:
 8014704:	4b17      	ldr	r3, [pc, #92]	; (8014764 <rmw_context_fini+0x60>)
 8014706:	b570      	push	{r4, r5, r6, lr}
 8014708:	681c      	ldr	r4, [r3, #0]
 801470a:	4605      	mov	r5, r0
 801470c:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801470e:	b33c      	cbz	r4, 8014760 <rmw_context_fini+0x5c>
 8014710:	2600      	movs	r6, #0
 8014712:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 8014716:	691a      	ldr	r2, [r3, #16]
 8014718:	4282      	cmp	r2, r0
 801471a:	d018      	beq.n	801474e <rmw_context_fini+0x4a>
 801471c:	2c00      	cmp	r4, #0
 801471e:	d1f8      	bne.n	8014712 <rmw_context_fini+0xe>
 8014720:	b188      	cbz	r0, 8014746 <rmw_context_fini+0x42>
 8014722:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014726:	789b      	ldrb	r3, [r3, #2]
 8014728:	2b01      	cmp	r3, #1
 801472a:	bf14      	ite	ne
 801472c:	210a      	movne	r1, #10
 801472e:	2100      	moveq	r1, #0
 8014730:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014734:	f7fc fcbe 	bl	80110b4 <uxr_delete_session_retries>
 8014738:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 801473a:	f7fa ffa1 	bl	800f680 <rmw_uxrce_fini_session_memory>
 801473e:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8014740:	3010      	adds	r0, #16
 8014742:	f001 fb01 	bl	8015d48 <uxr_close_custom_transport>
 8014746:	2300      	movs	r3, #0
 8014748:	4630      	mov	r0, r6
 801474a:	64ab      	str	r3, [r5, #72]	; 0x48
 801474c:	bd70      	pop	{r4, r5, r6, pc}
 801474e:	f103 0018 	add.w	r0, r3, #24
 8014752:	f000 f91f 	bl	8014994 <rmw_destroy_node>
 8014756:	4606      	mov	r6, r0
 8014758:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 801475a:	2c00      	cmp	r4, #0
 801475c:	d1d9      	bne.n	8014712 <rmw_context_fini+0xe>
 801475e:	e7df      	b.n	8014720 <rmw_context_fini+0x1c>
 8014760:	4626      	mov	r6, r4
 8014762:	e7dd      	b.n	8014720 <rmw_context_fini+0x1c>
 8014764:	2000d1cc 	.word	0x2000d1cc

08014768 <create_topic>:
 8014768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801476c:	4605      	mov	r5, r0
 801476e:	b084      	sub	sp, #16
 8014770:	482b      	ldr	r0, [pc, #172]	; (8014820 <create_topic+0xb8>)
 8014772:	460f      	mov	r7, r1
 8014774:	4616      	mov	r6, r2
 8014776:	f7ff fd89 	bl	801428c <get_memory>
 801477a:	4604      	mov	r4, r0
 801477c:	2800      	cmp	r0, #0
 801477e:	d036      	beq.n	80147ee <create_topic+0x86>
 8014780:	692a      	ldr	r2, [r5, #16]
 8014782:	68c4      	ldr	r4, [r0, #12]
 8014784:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8014828 <create_topic+0xc0>
 8014788:	61a5      	str	r5, [r4, #24]
 801478a:	f241 5396 	movw	r3, #5526	; 0x1596
 801478e:	6166      	str	r6, [r4, #20]
 8014790:	5ad0      	ldrh	r0, [r2, r3]
 8014792:	1c41      	adds	r1, r0, #1
 8014794:	52d1      	strh	r1, [r2, r3]
 8014796:	2102      	movs	r1, #2
 8014798:	f7fb fc5e 	bl	8010058 <uxr_object_id>
 801479c:	4641      	mov	r1, r8
 801479e:	6120      	str	r0, [r4, #16]
 80147a0:	223c      	movs	r2, #60	; 0x3c
 80147a2:	4638      	mov	r0, r7
 80147a4:	f7fb f8a0 	bl	800f8e8 <generate_topic_name>
 80147a8:	4607      	mov	r7, r0
 80147aa:	b320      	cbz	r0, 80147f6 <create_topic+0x8e>
 80147ac:	4f1d      	ldr	r7, [pc, #116]	; (8014824 <create_topic+0xbc>)
 80147ae:	4630      	mov	r0, r6
 80147b0:	4639      	mov	r1, r7
 80147b2:	2264      	movs	r2, #100	; 0x64
 80147b4:	f7fb f868 	bl	800f888 <generate_type_name>
 80147b8:	4606      	mov	r6, r0
 80147ba:	b320      	cbz	r0, 8014806 <create_topic+0x9e>
 80147bc:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
 80147c0:	2106      	movs	r1, #6
 80147c2:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 80147c6:	9701      	str	r7, [sp, #4]
 80147c8:	f8cd 8000 	str.w	r8, [sp]
 80147cc:	9102      	str	r1, [sp, #8]
 80147ce:	6811      	ldr	r1, [r2, #0]
 80147d0:	6922      	ldr	r2, [r4, #16]
 80147d2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80147d6:	f7fb fabb 	bl	800fd50 <uxr_buffer_create_topic_bin>
 80147da:	4602      	mov	r2, r0
 80147dc:	6928      	ldr	r0, [r5, #16]
 80147de:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80147e2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80147e6:	f7fb f819 	bl	800f81c <run_xrce_session>
 80147ea:	4605      	mov	r5, r0
 80147ec:	b198      	cbz	r0, 8014816 <create_topic+0xae>
 80147ee:	4620      	mov	r0, r4
 80147f0:	b004      	add	sp, #16
 80147f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147f6:	4620      	mov	r0, r4
 80147f8:	f7fa ffb8 	bl	800f76c <rmw_uxrce_fini_topic_memory>
 80147fc:	463c      	mov	r4, r7
 80147fe:	4620      	mov	r0, r4
 8014800:	b004      	add	sp, #16
 8014802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014806:	4620      	mov	r0, r4
 8014808:	f7fa ffb0 	bl	800f76c <rmw_uxrce_fini_topic_memory>
 801480c:	4634      	mov	r4, r6
 801480e:	4620      	mov	r0, r4
 8014810:	b004      	add	sp, #16
 8014812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014816:	4620      	mov	r0, r4
 8014818:	f7fa ffa8 	bl	800f76c <rmw_uxrce_fini_topic_memory>
 801481c:	462c      	mov	r4, r5
 801481e:	e7e6      	b.n	80147ee <create_topic+0x86>
 8014820:	2000d390 	.word	0x2000d390
 8014824:	20009fb8 	.word	0x20009fb8
 8014828:	20009f7c 	.word	0x20009f7c

0801482c <destroy_topic>:
 801482c:	b538      	push	{r3, r4, r5, lr}
 801482e:	6985      	ldr	r5, [r0, #24]
 8014830:	b1d5      	cbz	r5, 8014868 <destroy_topic+0x3c>
 8014832:	4604      	mov	r4, r0
 8014834:	6928      	ldr	r0, [r5, #16]
 8014836:	6922      	ldr	r2, [r4, #16]
 8014838:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801483c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014840:	6819      	ldr	r1, [r3, #0]
 8014842:	f7fb fa07 	bl	800fc54 <uxr_buffer_delete_entity>
 8014846:	4602      	mov	r2, r0
 8014848:	6928      	ldr	r0, [r5, #16]
 801484a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801484e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8014852:	f7fa ffe3 	bl	800f81c <run_xrce_session>
 8014856:	2800      	cmp	r0, #0
 8014858:	4620      	mov	r0, r4
 801485a:	bf14      	ite	ne
 801485c:	2400      	movne	r4, #0
 801485e:	2402      	moveq	r4, #2
 8014860:	f7fa ff84 	bl	800f76c <rmw_uxrce_fini_topic_memory>
 8014864:	4620      	mov	r0, r4
 8014866:	bd38      	pop	{r3, r4, r5, pc}
 8014868:	2401      	movs	r4, #1
 801486a:	4620      	mov	r0, r4
 801486c:	bd38      	pop	{r3, r4, r5, pc}
 801486e:	bf00      	nop

08014870 <create_node>:
 8014870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014874:	b083      	sub	sp, #12
 8014876:	2b00      	cmp	r3, #0
 8014878:	d05f      	beq.n	801493a <create_node+0xca>
 801487a:	4606      	mov	r6, r0
 801487c:	4835      	ldr	r0, [pc, #212]	; (8014954 <create_node+0xe4>)
 801487e:	460f      	mov	r7, r1
 8014880:	4690      	mov	r8, r2
 8014882:	461d      	mov	r5, r3
 8014884:	f7ff fd02 	bl	801428c <get_memory>
 8014888:	2800      	cmp	r0, #0
 801488a:	d056      	beq.n	801493a <create_node+0xca>
 801488c:	68c4      	ldr	r4, [r0, #12]
 801488e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8014890:	6123      	str	r3, [r4, #16]
 8014892:	f7ff fd1f 	bl	80142d4 <rmw_get_implementation_identifier>
 8014896:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 801489a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801489e:	f8c4 9020 	str.w	r9, [r4, #32]
 80148a2:	4630      	mov	r0, r6
 80148a4:	f7eb fca6 	bl	80001f4 <strlen>
 80148a8:	1c42      	adds	r2, r0, #1
 80148aa:	2a3c      	cmp	r2, #60	; 0x3c
 80148ac:	f104 0518 	add.w	r5, r4, #24
 80148b0:	d840      	bhi.n	8014934 <create_node+0xc4>
 80148b2:	4648      	mov	r0, r9
 80148b4:	4631      	mov	r1, r6
 80148b6:	f104 0968 	add.w	r9, r4, #104	; 0x68
 80148ba:	f003 fc7c 	bl	80181b6 <memcpy>
 80148be:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 80148c2:	4638      	mov	r0, r7
 80148c4:	f7eb fc96 	bl	80001f4 <strlen>
 80148c8:	1c42      	adds	r2, r0, #1
 80148ca:	2a3c      	cmp	r2, #60	; 0x3c
 80148cc:	d832      	bhi.n	8014934 <create_node+0xc4>
 80148ce:	4639      	mov	r1, r7
 80148d0:	4648      	mov	r0, r9
 80148d2:	f003 fc70 	bl	80181b6 <memcpy>
 80148d6:	f241 5394 	movw	r3, #5524	; 0x1594
 80148da:	6922      	ldr	r2, [r4, #16]
 80148dc:	5ad0      	ldrh	r0, [r2, r3]
 80148de:	2101      	movs	r1, #1
 80148e0:	eb00 0c01 	add.w	ip, r0, r1
 80148e4:	f822 c003 	strh.w	ip, [r2, r3]
 80148e8:	f7fb fbb6 	bl	8010058 <uxr_object_id>
 80148ec:	6160      	str	r0, [r4, #20]
 80148ee:	783b      	ldrb	r3, [r7, #0]
 80148f0:	2b2f      	cmp	r3, #47	; 0x2f
 80148f2:	d127      	bne.n	8014944 <create_node+0xd4>
 80148f4:	787b      	ldrb	r3, [r7, #1]
 80148f6:	bb2b      	cbnz	r3, 8014944 <create_node+0xd4>
 80148f8:	4a17      	ldr	r2, [pc, #92]	; (8014958 <create_node+0xe8>)
 80148fa:	4818      	ldr	r0, [pc, #96]	; (801495c <create_node+0xec>)
 80148fc:	4633      	mov	r3, r6
 80148fe:	213c      	movs	r1, #60	; 0x3c
 8014900:	f003 f9d4 	bl	8017cac <sniprintf>
 8014904:	6920      	ldr	r0, [r4, #16]
 8014906:	4b15      	ldr	r3, [pc, #84]	; (801495c <create_node+0xec>)
 8014908:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 801490c:	9300      	str	r3, [sp, #0]
 801490e:	2306      	movs	r3, #6
 8014910:	9301      	str	r3, [sp, #4]
 8014912:	6811      	ldr	r1, [r2, #0]
 8014914:	6962      	ldr	r2, [r4, #20]
 8014916:	fa1f f388 	uxth.w	r3, r8
 801491a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801491e:	f7fb f9e5 	bl	800fcec <uxr_buffer_create_participant_bin>
 8014922:	4602      	mov	r2, r0
 8014924:	6920      	ldr	r0, [r4, #16]
 8014926:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801492a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801492e:	f7fa ff75 	bl	800f81c <run_xrce_session>
 8014932:	b918      	cbnz	r0, 801493c <create_node+0xcc>
 8014934:	4628      	mov	r0, r5
 8014936:	f7fa fea9 	bl	800f68c <rmw_uxrce_fini_node_memory>
 801493a:	2500      	movs	r5, #0
 801493c:	4628      	mov	r0, r5
 801493e:	b003      	add	sp, #12
 8014940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014944:	4a06      	ldr	r2, [pc, #24]	; (8014960 <create_node+0xf0>)
 8014946:	9600      	str	r6, [sp, #0]
 8014948:	463b      	mov	r3, r7
 801494a:	213c      	movs	r1, #60	; 0x3c
 801494c:	4803      	ldr	r0, [pc, #12]	; (801495c <create_node+0xec>)
 801494e:	f003 f9ad 	bl	8017cac <sniprintf>
 8014952:	e7d7      	b.n	8014904 <create_node+0x94>
 8014954:	2000d1cc 	.word	0x2000d1cc
 8014958:	08019214 	.word	0x08019214
 801495c:	2000a01c 	.word	0x2000a01c
 8014960:	08019254 	.word	0x08019254

08014964 <rmw_create_node>:
 8014964:	b199      	cbz	r1, 801498e <rmw_create_node+0x2a>
 8014966:	b430      	push	{r4, r5}
 8014968:	4615      	mov	r5, r2
 801496a:	461a      	mov	r2, r3
 801496c:	780b      	ldrb	r3, [r1, #0]
 801496e:	460c      	mov	r4, r1
 8014970:	b153      	cbz	r3, 8014988 <rmw_create_node+0x24>
 8014972:	b14d      	cbz	r5, 8014988 <rmw_create_node+0x24>
 8014974:	782b      	ldrb	r3, [r5, #0]
 8014976:	b13b      	cbz	r3, 8014988 <rmw_create_node+0x24>
 8014978:	b902      	cbnz	r2, 801497c <rmw_create_node+0x18>
 801497a:	69c2      	ldr	r2, [r0, #28]
 801497c:	4603      	mov	r3, r0
 801497e:	4629      	mov	r1, r5
 8014980:	4620      	mov	r0, r4
 8014982:	bc30      	pop	{r4, r5}
 8014984:	f7ff bf74 	b.w	8014870 <create_node>
 8014988:	2000      	movs	r0, #0
 801498a:	bc30      	pop	{r4, r5}
 801498c:	4770      	bx	lr
 801498e:	2000      	movs	r0, #0
 8014990:	4770      	bx	lr
 8014992:	bf00      	nop

08014994 <rmw_destroy_node>:
 8014994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014996:	2800      	cmp	r0, #0
 8014998:	d066      	beq.n	8014a68 <rmw_destroy_node+0xd4>
 801499a:	4607      	mov	r7, r0
 801499c:	6800      	ldr	r0, [r0, #0]
 801499e:	b128      	cbz	r0, 80149ac <rmw_destroy_node+0x18>
 80149a0:	4b34      	ldr	r3, [pc, #208]	; (8014a74 <rmw_destroy_node+0xe0>)
 80149a2:	6819      	ldr	r1, [r3, #0]
 80149a4:	f7eb fc1c 	bl	80001e0 <strcmp>
 80149a8:	2800      	cmp	r0, #0
 80149aa:	d15d      	bne.n	8014a68 <rmw_destroy_node+0xd4>
 80149ac:	687c      	ldr	r4, [r7, #4]
 80149ae:	2c00      	cmp	r4, #0
 80149b0:	d05a      	beq.n	8014a68 <rmw_destroy_node+0xd4>
 80149b2:	4b31      	ldr	r3, [pc, #196]	; (8014a78 <rmw_destroy_node+0xe4>)
 80149b4:	681d      	ldr	r5, [r3, #0]
 80149b6:	2d00      	cmp	r5, #0
 80149b8:	d059      	beq.n	8014a6e <rmw_destroy_node+0xda>
 80149ba:	2600      	movs	r6, #0
 80149bc:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 80149c0:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 80149c4:	429c      	cmp	r4, r3
 80149c6:	d047      	beq.n	8014a58 <rmw_destroy_node+0xc4>
 80149c8:	2d00      	cmp	r5, #0
 80149ca:	d1f7      	bne.n	80149bc <rmw_destroy_node+0x28>
 80149cc:	4b2b      	ldr	r3, [pc, #172]	; (8014a7c <rmw_destroy_node+0xe8>)
 80149ce:	681d      	ldr	r5, [r3, #0]
 80149d0:	b15d      	cbz	r5, 80149ea <rmw_destroy_node+0x56>
 80149d2:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 80149d6:	6a0b      	ldr	r3, [r1, #32]
 80149d8:	429c      	cmp	r4, r3
 80149da:	d1f9      	bne.n	80149d0 <rmw_destroy_node+0x3c>
 80149dc:	317c      	adds	r1, #124	; 0x7c
 80149de:	4638      	mov	r0, r7
 80149e0:	f7fa fcc6 	bl	800f370 <rmw_destroy_subscription>
 80149e4:	4606      	mov	r6, r0
 80149e6:	2d00      	cmp	r5, #0
 80149e8:	d1f3      	bne.n	80149d2 <rmw_destroy_node+0x3e>
 80149ea:	4b25      	ldr	r3, [pc, #148]	; (8014a80 <rmw_destroy_node+0xec>)
 80149ec:	681d      	ldr	r5, [r3, #0]
 80149ee:	b15d      	cbz	r5, 8014a08 <rmw_destroy_node+0x74>
 80149f0:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 80149f4:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 80149f6:	429c      	cmp	r4, r3
 80149f8:	d1f9      	bne.n	80149ee <rmw_destroy_node+0x5a>
 80149fa:	317c      	adds	r1, #124	; 0x7c
 80149fc:	4638      	mov	r0, r7
 80149fe:	f000 f849 	bl	8014a94 <rmw_destroy_service>
 8014a02:	4606      	mov	r6, r0
 8014a04:	2d00      	cmp	r5, #0
 8014a06:	d1f3      	bne.n	80149f0 <rmw_destroy_node+0x5c>
 8014a08:	4b1e      	ldr	r3, [pc, #120]	; (8014a84 <rmw_destroy_node+0xf0>)
 8014a0a:	681d      	ldr	r5, [r3, #0]
 8014a0c:	b15d      	cbz	r5, 8014a26 <rmw_destroy_node+0x92>
 8014a0e:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 8014a12:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8014a14:	429c      	cmp	r4, r3
 8014a16:	d1f9      	bne.n	8014a0c <rmw_destroy_node+0x78>
 8014a18:	317c      	adds	r1, #124	; 0x7c
 8014a1a:	4638      	mov	r0, r7
 8014a1c:	f002 fd16 	bl	801744c <rmw_destroy_client>
 8014a20:	4606      	mov	r6, r0
 8014a22:	2d00      	cmp	r5, #0
 8014a24:	d1f3      	bne.n	8014a0e <rmw_destroy_node+0x7a>
 8014a26:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8014a2a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014a2e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014a32:	6819      	ldr	r1, [r3, #0]
 8014a34:	f7fb f90e 	bl	800fc54 <uxr_buffer_delete_entity>
 8014a38:	4602      	mov	r2, r0
 8014a3a:	6920      	ldr	r0, [r4, #16]
 8014a3c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8014a40:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8014a44:	f7fa feea 	bl	800f81c <run_xrce_session>
 8014a48:	2800      	cmp	r0, #0
 8014a4a:	bf08      	it	eq
 8014a4c:	2602      	moveq	r6, #2
 8014a4e:	4638      	mov	r0, r7
 8014a50:	f7fa fe1c 	bl	800f68c <rmw_uxrce_fini_node_memory>
 8014a54:	4630      	mov	r0, r6
 8014a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a58:	3184      	adds	r1, #132	; 0x84
 8014a5a:	4638      	mov	r0, r7
 8014a5c:	f7fa fb56 	bl	800f10c <rmw_destroy_publisher>
 8014a60:	4606      	mov	r6, r0
 8014a62:	2d00      	cmp	r5, #0
 8014a64:	d1aa      	bne.n	80149bc <rmw_destroy_node+0x28>
 8014a66:	e7b1      	b.n	80149cc <rmw_destroy_node+0x38>
 8014a68:	2601      	movs	r6, #1
 8014a6a:	4630      	mov	r0, r6
 8014a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a6e:	462e      	mov	r6, r5
 8014a70:	e7ac      	b.n	80149cc <rmw_destroy_node+0x38>
 8014a72:	bf00      	nop
 8014a74:	080196e8 	.word	0x080196e8
 8014a78:	2000a208 	.word	0x2000a208
 8014a7c:	2000d464 	.word	0x2000d464
 8014a80:	2000d454 	.word	0x2000d454
 8014a84:	2000aa88 	.word	0x2000aa88

08014a88 <rmw_node_get_graph_guard_condition>:
 8014a88:	6843      	ldr	r3, [r0, #4]
 8014a8a:	6918      	ldr	r0, [r3, #16]
 8014a8c:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8014a90:	4770      	bx	lr
 8014a92:	bf00      	nop

08014a94 <rmw_destroy_service>:
 8014a94:	b570      	push	{r4, r5, r6, lr}
 8014a96:	b128      	cbz	r0, 8014aa4 <rmw_destroy_service+0x10>
 8014a98:	4604      	mov	r4, r0
 8014a9a:	6800      	ldr	r0, [r0, #0]
 8014a9c:	460d      	mov	r5, r1
 8014a9e:	f7fa ff3d 	bl	800f91c <is_uxrce_rmw_identifier_valid>
 8014aa2:	b910      	cbnz	r0, 8014aaa <rmw_destroy_service+0x16>
 8014aa4:	2401      	movs	r4, #1
 8014aa6:	4620      	mov	r0, r4
 8014aa8:	bd70      	pop	{r4, r5, r6, pc}
 8014aaa:	6863      	ldr	r3, [r4, #4]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d0f9      	beq.n	8014aa4 <rmw_destroy_service+0x10>
 8014ab0:	2d00      	cmp	r5, #0
 8014ab2:	d0f7      	beq.n	8014aa4 <rmw_destroy_service+0x10>
 8014ab4:	6828      	ldr	r0, [r5, #0]
 8014ab6:	f7fa ff31 	bl	800f91c <is_uxrce_rmw_identifier_valid>
 8014aba:	2800      	cmp	r0, #0
 8014abc:	d0f2      	beq.n	8014aa4 <rmw_destroy_service+0x10>
 8014abe:	686e      	ldr	r6, [r5, #4]
 8014ac0:	2e00      	cmp	r6, #0
 8014ac2:	d0ef      	beq.n	8014aa4 <rmw_destroy_service+0x10>
 8014ac4:	6864      	ldr	r4, [r4, #4]
 8014ac6:	6932      	ldr	r2, [r6, #16]
 8014ac8:	6920      	ldr	r0, [r4, #16]
 8014aca:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014ace:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014ad2:	6819      	ldr	r1, [r3, #0]
 8014ad4:	f7fb fb28 	bl	8010128 <uxr_buffer_cancel_data>
 8014ad8:	4602      	mov	r2, r0
 8014ada:	6920      	ldr	r0, [r4, #16]
 8014adc:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8014ae0:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8014ae4:	f7fa fe9a 	bl	800f81c <run_xrce_session>
 8014ae8:	6920      	ldr	r0, [r4, #16]
 8014aea:	6932      	ldr	r2, [r6, #16]
 8014aec:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014af0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014af4:	6819      	ldr	r1, [r3, #0]
 8014af6:	f7fb f8ad 	bl	800fc54 <uxr_buffer_delete_entity>
 8014afa:	4602      	mov	r2, r0
 8014afc:	6920      	ldr	r0, [r4, #16]
 8014afe:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8014b02:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8014b06:	f7fa fe89 	bl	800f81c <run_xrce_session>
 8014b0a:	2800      	cmp	r0, #0
 8014b0c:	4628      	mov	r0, r5
 8014b0e:	bf14      	ite	ne
 8014b10:	2400      	movne	r4, #0
 8014b12:	2402      	moveq	r4, #2
 8014b14:	f7fa fdfe 	bl	800f714 <rmw_uxrce_fini_service_memory>
 8014b18:	e7c5      	b.n	8014aa6 <rmw_destroy_service+0x12>
 8014b1a:	bf00      	nop

08014b1c <rmw_uxrce_transport_init>:
 8014b1c:	b508      	push	{r3, lr}
 8014b1e:	b108      	cbz	r0, 8014b24 <rmw_uxrce_transport_init+0x8>
 8014b20:	f100 0210 	add.w	r2, r0, #16
 8014b24:	b139      	cbz	r1, 8014b36 <rmw_uxrce_transport_init+0x1a>
 8014b26:	6949      	ldr	r1, [r1, #20]
 8014b28:	4610      	mov	r0, r2
 8014b2a:	f001 f8d9 	bl	8015ce0 <uxr_init_custom_transport>
 8014b2e:	f080 0001 	eor.w	r0, r0, #1
 8014b32:	b2c0      	uxtb	r0, r0
 8014b34:	bd08      	pop	{r3, pc}
 8014b36:	4b04      	ldr	r3, [pc, #16]	; (8014b48 <rmw_uxrce_transport_init+0x2c>)
 8014b38:	4610      	mov	r0, r2
 8014b3a:	6859      	ldr	r1, [r3, #4]
 8014b3c:	f001 f8d0 	bl	8015ce0 <uxr_init_custom_transport>
 8014b40:	f080 0001 	eor.w	r0, r0, #1
 8014b44:	b2c0      	uxtb	r0, r0
 8014b46:	bd08      	pop	{r3, pc}
 8014b48:	2000a1d8 	.word	0x2000a1d8

08014b4c <rmw_uros_epoch_nanos>:
 8014b4c:	4b05      	ldr	r3, [pc, #20]	; (8014b64 <rmw_uros_epoch_nanos+0x18>)
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	b123      	cbz	r3, 8014b5c <rmw_uros_epoch_nanos+0x10>
 8014b52:	68d8      	ldr	r0, [r3, #12]
 8014b54:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014b58:	f7fb bce6 	b.w	8010528 <uxr_epoch_nanos>
 8014b5c:	2000      	movs	r0, #0
 8014b5e:	2100      	movs	r1, #0
 8014b60:	4770      	bx	lr
 8014b62:	bf00      	nop
 8014b64:	2000d3a0 	.word	0x2000d3a0

08014b68 <ucdr_serialize_endian_array_char>:
 8014b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b6c:	4619      	mov	r1, r3
 8014b6e:	461e      	mov	r6, r3
 8014b70:	4690      	mov	r8, r2
 8014b72:	4604      	mov	r4, r0
 8014b74:	f7fa ff54 	bl	800fa20 <ucdr_check_buffer_available_for>
 8014b78:	b9e0      	cbnz	r0, 8014bb4 <ucdr_serialize_endian_array_char+0x4c>
 8014b7a:	4637      	mov	r7, r6
 8014b7c:	e009      	b.n	8014b92 <ucdr_serialize_endian_array_char+0x2a>
 8014b7e:	68a0      	ldr	r0, [r4, #8]
 8014b80:	f003 fb19 	bl	80181b6 <memcpy>
 8014b84:	68a2      	ldr	r2, [r4, #8]
 8014b86:	6923      	ldr	r3, [r4, #16]
 8014b88:	442a      	add	r2, r5
 8014b8a:	442b      	add	r3, r5
 8014b8c:	1b7f      	subs	r7, r7, r5
 8014b8e:	60a2      	str	r2, [r4, #8]
 8014b90:	6123      	str	r3, [r4, #16]
 8014b92:	2201      	movs	r2, #1
 8014b94:	4639      	mov	r1, r7
 8014b96:	4620      	mov	r0, r4
 8014b98:	f7fa ffc8 	bl	800fb2c <ucdr_check_final_buffer_behavior_array>
 8014b9c:	1bf1      	subs	r1, r6, r7
 8014b9e:	4441      	add	r1, r8
 8014ba0:	4605      	mov	r5, r0
 8014ba2:	4602      	mov	r2, r0
 8014ba4:	2800      	cmp	r0, #0
 8014ba6:	d1ea      	bne.n	8014b7e <ucdr_serialize_endian_array_char+0x16>
 8014ba8:	2301      	movs	r3, #1
 8014baa:	7da0      	ldrb	r0, [r4, #22]
 8014bac:	7563      	strb	r3, [r4, #21]
 8014bae:	4058      	eors	r0, r3
 8014bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bb4:	4632      	mov	r2, r6
 8014bb6:	68a0      	ldr	r0, [r4, #8]
 8014bb8:	4641      	mov	r1, r8
 8014bba:	f003 fafc 	bl	80181b6 <memcpy>
 8014bbe:	68a2      	ldr	r2, [r4, #8]
 8014bc0:	6923      	ldr	r3, [r4, #16]
 8014bc2:	4432      	add	r2, r6
 8014bc4:	4433      	add	r3, r6
 8014bc6:	60a2      	str	r2, [r4, #8]
 8014bc8:	6123      	str	r3, [r4, #16]
 8014bca:	e7ed      	b.n	8014ba8 <ucdr_serialize_endian_array_char+0x40>

08014bcc <ucdr_deserialize_endian_array_char>:
 8014bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bd0:	4619      	mov	r1, r3
 8014bd2:	461e      	mov	r6, r3
 8014bd4:	4690      	mov	r8, r2
 8014bd6:	4604      	mov	r4, r0
 8014bd8:	f7fa ff22 	bl	800fa20 <ucdr_check_buffer_available_for>
 8014bdc:	b9e0      	cbnz	r0, 8014c18 <ucdr_deserialize_endian_array_char+0x4c>
 8014bde:	4637      	mov	r7, r6
 8014be0:	e009      	b.n	8014bf6 <ucdr_deserialize_endian_array_char+0x2a>
 8014be2:	68a1      	ldr	r1, [r4, #8]
 8014be4:	f003 fae7 	bl	80181b6 <memcpy>
 8014be8:	68a2      	ldr	r2, [r4, #8]
 8014bea:	6923      	ldr	r3, [r4, #16]
 8014bec:	442a      	add	r2, r5
 8014bee:	442b      	add	r3, r5
 8014bf0:	1b7f      	subs	r7, r7, r5
 8014bf2:	60a2      	str	r2, [r4, #8]
 8014bf4:	6123      	str	r3, [r4, #16]
 8014bf6:	2201      	movs	r2, #1
 8014bf8:	4639      	mov	r1, r7
 8014bfa:	4620      	mov	r0, r4
 8014bfc:	f7fa ff96 	bl	800fb2c <ucdr_check_final_buffer_behavior_array>
 8014c00:	4605      	mov	r5, r0
 8014c02:	1bf0      	subs	r0, r6, r7
 8014c04:	4440      	add	r0, r8
 8014c06:	462a      	mov	r2, r5
 8014c08:	2d00      	cmp	r5, #0
 8014c0a:	d1ea      	bne.n	8014be2 <ucdr_deserialize_endian_array_char+0x16>
 8014c0c:	2301      	movs	r3, #1
 8014c0e:	7da0      	ldrb	r0, [r4, #22]
 8014c10:	7563      	strb	r3, [r4, #21]
 8014c12:	4058      	eors	r0, r3
 8014c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c18:	4632      	mov	r2, r6
 8014c1a:	68a1      	ldr	r1, [r4, #8]
 8014c1c:	4640      	mov	r0, r8
 8014c1e:	f003 faca 	bl	80181b6 <memcpy>
 8014c22:	68a2      	ldr	r2, [r4, #8]
 8014c24:	6923      	ldr	r3, [r4, #16]
 8014c26:	4432      	add	r2, r6
 8014c28:	4433      	add	r3, r6
 8014c2a:	60a2      	str	r2, [r4, #8]
 8014c2c:	6123      	str	r3, [r4, #16]
 8014c2e:	e7ed      	b.n	8014c0c <ucdr_deserialize_endian_array_char+0x40>

08014c30 <ucdr_serialize_array_uint8_t>:
 8014c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c34:	4688      	mov	r8, r1
 8014c36:	4611      	mov	r1, r2
 8014c38:	4616      	mov	r6, r2
 8014c3a:	4604      	mov	r4, r0
 8014c3c:	f7fa fef0 	bl	800fa20 <ucdr_check_buffer_available_for>
 8014c40:	b9e0      	cbnz	r0, 8014c7c <ucdr_serialize_array_uint8_t+0x4c>
 8014c42:	4637      	mov	r7, r6
 8014c44:	e009      	b.n	8014c5a <ucdr_serialize_array_uint8_t+0x2a>
 8014c46:	68a0      	ldr	r0, [r4, #8]
 8014c48:	f003 fab5 	bl	80181b6 <memcpy>
 8014c4c:	68a2      	ldr	r2, [r4, #8]
 8014c4e:	6923      	ldr	r3, [r4, #16]
 8014c50:	442a      	add	r2, r5
 8014c52:	442b      	add	r3, r5
 8014c54:	1b7f      	subs	r7, r7, r5
 8014c56:	60a2      	str	r2, [r4, #8]
 8014c58:	6123      	str	r3, [r4, #16]
 8014c5a:	2201      	movs	r2, #1
 8014c5c:	4639      	mov	r1, r7
 8014c5e:	4620      	mov	r0, r4
 8014c60:	f7fa ff64 	bl	800fb2c <ucdr_check_final_buffer_behavior_array>
 8014c64:	1bf1      	subs	r1, r6, r7
 8014c66:	4441      	add	r1, r8
 8014c68:	4605      	mov	r5, r0
 8014c6a:	4602      	mov	r2, r0
 8014c6c:	2800      	cmp	r0, #0
 8014c6e:	d1ea      	bne.n	8014c46 <ucdr_serialize_array_uint8_t+0x16>
 8014c70:	2301      	movs	r3, #1
 8014c72:	7da0      	ldrb	r0, [r4, #22]
 8014c74:	7563      	strb	r3, [r4, #21]
 8014c76:	4058      	eors	r0, r3
 8014c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c7c:	4632      	mov	r2, r6
 8014c7e:	68a0      	ldr	r0, [r4, #8]
 8014c80:	4641      	mov	r1, r8
 8014c82:	f003 fa98 	bl	80181b6 <memcpy>
 8014c86:	68a3      	ldr	r3, [r4, #8]
 8014c88:	6922      	ldr	r2, [r4, #16]
 8014c8a:	4433      	add	r3, r6
 8014c8c:	4432      	add	r2, r6
 8014c8e:	60a3      	str	r3, [r4, #8]
 8014c90:	6122      	str	r2, [r4, #16]
 8014c92:	e7ed      	b.n	8014c70 <ucdr_serialize_array_uint8_t+0x40>

08014c94 <ucdr_serialize_endian_array_uint8_t>:
 8014c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c98:	4619      	mov	r1, r3
 8014c9a:	461e      	mov	r6, r3
 8014c9c:	4690      	mov	r8, r2
 8014c9e:	4604      	mov	r4, r0
 8014ca0:	f7fa febe 	bl	800fa20 <ucdr_check_buffer_available_for>
 8014ca4:	b9e0      	cbnz	r0, 8014ce0 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8014ca6:	4637      	mov	r7, r6
 8014ca8:	e009      	b.n	8014cbe <ucdr_serialize_endian_array_uint8_t+0x2a>
 8014caa:	68a0      	ldr	r0, [r4, #8]
 8014cac:	f003 fa83 	bl	80181b6 <memcpy>
 8014cb0:	68a2      	ldr	r2, [r4, #8]
 8014cb2:	6923      	ldr	r3, [r4, #16]
 8014cb4:	442a      	add	r2, r5
 8014cb6:	442b      	add	r3, r5
 8014cb8:	1b7f      	subs	r7, r7, r5
 8014cba:	60a2      	str	r2, [r4, #8]
 8014cbc:	6123      	str	r3, [r4, #16]
 8014cbe:	2201      	movs	r2, #1
 8014cc0:	4639      	mov	r1, r7
 8014cc2:	4620      	mov	r0, r4
 8014cc4:	f7fa ff32 	bl	800fb2c <ucdr_check_final_buffer_behavior_array>
 8014cc8:	1bf1      	subs	r1, r6, r7
 8014cca:	4441      	add	r1, r8
 8014ccc:	4605      	mov	r5, r0
 8014cce:	4602      	mov	r2, r0
 8014cd0:	2800      	cmp	r0, #0
 8014cd2:	d1ea      	bne.n	8014caa <ucdr_serialize_endian_array_uint8_t+0x16>
 8014cd4:	2301      	movs	r3, #1
 8014cd6:	7da0      	ldrb	r0, [r4, #22]
 8014cd8:	7563      	strb	r3, [r4, #21]
 8014cda:	4058      	eors	r0, r3
 8014cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ce0:	4632      	mov	r2, r6
 8014ce2:	68a0      	ldr	r0, [r4, #8]
 8014ce4:	4641      	mov	r1, r8
 8014ce6:	f003 fa66 	bl	80181b6 <memcpy>
 8014cea:	68a2      	ldr	r2, [r4, #8]
 8014cec:	6923      	ldr	r3, [r4, #16]
 8014cee:	4432      	add	r2, r6
 8014cf0:	4433      	add	r3, r6
 8014cf2:	60a2      	str	r2, [r4, #8]
 8014cf4:	6123      	str	r3, [r4, #16]
 8014cf6:	e7ed      	b.n	8014cd4 <ucdr_serialize_endian_array_uint8_t+0x40>

08014cf8 <ucdr_deserialize_array_uint8_t>:
 8014cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cfc:	4688      	mov	r8, r1
 8014cfe:	4611      	mov	r1, r2
 8014d00:	4616      	mov	r6, r2
 8014d02:	4604      	mov	r4, r0
 8014d04:	f7fa fe8c 	bl	800fa20 <ucdr_check_buffer_available_for>
 8014d08:	b9e0      	cbnz	r0, 8014d44 <ucdr_deserialize_array_uint8_t+0x4c>
 8014d0a:	4637      	mov	r7, r6
 8014d0c:	e009      	b.n	8014d22 <ucdr_deserialize_array_uint8_t+0x2a>
 8014d0e:	68a1      	ldr	r1, [r4, #8]
 8014d10:	f003 fa51 	bl	80181b6 <memcpy>
 8014d14:	68a2      	ldr	r2, [r4, #8]
 8014d16:	6923      	ldr	r3, [r4, #16]
 8014d18:	442a      	add	r2, r5
 8014d1a:	442b      	add	r3, r5
 8014d1c:	1b7f      	subs	r7, r7, r5
 8014d1e:	60a2      	str	r2, [r4, #8]
 8014d20:	6123      	str	r3, [r4, #16]
 8014d22:	2201      	movs	r2, #1
 8014d24:	4639      	mov	r1, r7
 8014d26:	4620      	mov	r0, r4
 8014d28:	f7fa ff00 	bl	800fb2c <ucdr_check_final_buffer_behavior_array>
 8014d2c:	4605      	mov	r5, r0
 8014d2e:	1bf0      	subs	r0, r6, r7
 8014d30:	4440      	add	r0, r8
 8014d32:	462a      	mov	r2, r5
 8014d34:	2d00      	cmp	r5, #0
 8014d36:	d1ea      	bne.n	8014d0e <ucdr_deserialize_array_uint8_t+0x16>
 8014d38:	2301      	movs	r3, #1
 8014d3a:	7da0      	ldrb	r0, [r4, #22]
 8014d3c:	7563      	strb	r3, [r4, #21]
 8014d3e:	4058      	eors	r0, r3
 8014d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d44:	4632      	mov	r2, r6
 8014d46:	68a1      	ldr	r1, [r4, #8]
 8014d48:	4640      	mov	r0, r8
 8014d4a:	f003 fa34 	bl	80181b6 <memcpy>
 8014d4e:	68a3      	ldr	r3, [r4, #8]
 8014d50:	6922      	ldr	r2, [r4, #16]
 8014d52:	4433      	add	r3, r6
 8014d54:	4432      	add	r2, r6
 8014d56:	60a3      	str	r3, [r4, #8]
 8014d58:	6122      	str	r2, [r4, #16]
 8014d5a:	e7ed      	b.n	8014d38 <ucdr_deserialize_array_uint8_t+0x40>

08014d5c <ucdr_deserialize_endian_array_uint8_t>:
 8014d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d60:	4619      	mov	r1, r3
 8014d62:	461e      	mov	r6, r3
 8014d64:	4690      	mov	r8, r2
 8014d66:	4604      	mov	r4, r0
 8014d68:	f7fa fe5a 	bl	800fa20 <ucdr_check_buffer_available_for>
 8014d6c:	b9e0      	cbnz	r0, 8014da8 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8014d6e:	4637      	mov	r7, r6
 8014d70:	e009      	b.n	8014d86 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8014d72:	68a1      	ldr	r1, [r4, #8]
 8014d74:	f003 fa1f 	bl	80181b6 <memcpy>
 8014d78:	68a2      	ldr	r2, [r4, #8]
 8014d7a:	6923      	ldr	r3, [r4, #16]
 8014d7c:	442a      	add	r2, r5
 8014d7e:	442b      	add	r3, r5
 8014d80:	1b7f      	subs	r7, r7, r5
 8014d82:	60a2      	str	r2, [r4, #8]
 8014d84:	6123      	str	r3, [r4, #16]
 8014d86:	2201      	movs	r2, #1
 8014d88:	4639      	mov	r1, r7
 8014d8a:	4620      	mov	r0, r4
 8014d8c:	f7fa fece 	bl	800fb2c <ucdr_check_final_buffer_behavior_array>
 8014d90:	4605      	mov	r5, r0
 8014d92:	1bf0      	subs	r0, r6, r7
 8014d94:	4440      	add	r0, r8
 8014d96:	462a      	mov	r2, r5
 8014d98:	2d00      	cmp	r5, #0
 8014d9a:	d1ea      	bne.n	8014d72 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8014d9c:	2301      	movs	r3, #1
 8014d9e:	7da0      	ldrb	r0, [r4, #22]
 8014da0:	7563      	strb	r3, [r4, #21]
 8014da2:	4058      	eors	r0, r3
 8014da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014da8:	4632      	mov	r2, r6
 8014daa:	68a1      	ldr	r1, [r4, #8]
 8014dac:	4640      	mov	r0, r8
 8014dae:	f003 fa02 	bl	80181b6 <memcpy>
 8014db2:	68a2      	ldr	r2, [r4, #8]
 8014db4:	6923      	ldr	r3, [r4, #16]
 8014db6:	4432      	add	r2, r6
 8014db8:	4433      	add	r3, r6
 8014dba:	60a2      	str	r2, [r4, #8]
 8014dbc:	6123      	str	r3, [r4, #16]
 8014dbe:	e7ed      	b.n	8014d9c <ucdr_deserialize_endian_array_uint8_t+0x40>

08014dc0 <ucdr_serialize_bool>:
 8014dc0:	b538      	push	{r3, r4, r5, lr}
 8014dc2:	460d      	mov	r5, r1
 8014dc4:	2101      	movs	r1, #1
 8014dc6:	4604      	mov	r4, r0
 8014dc8:	f7fa fe36 	bl	800fa38 <ucdr_check_final_buffer_behavior>
 8014dcc:	b148      	cbz	r0, 8014de2 <ucdr_serialize_bool+0x22>
 8014dce:	68a3      	ldr	r3, [r4, #8]
 8014dd0:	701d      	strb	r5, [r3, #0]
 8014dd2:	68a2      	ldr	r2, [r4, #8]
 8014dd4:	6923      	ldr	r3, [r4, #16]
 8014dd6:	3201      	adds	r2, #1
 8014dd8:	3301      	adds	r3, #1
 8014dda:	2101      	movs	r1, #1
 8014ddc:	60a2      	str	r2, [r4, #8]
 8014dde:	6123      	str	r3, [r4, #16]
 8014de0:	7561      	strb	r1, [r4, #21]
 8014de2:	7da0      	ldrb	r0, [r4, #22]
 8014de4:	f080 0001 	eor.w	r0, r0, #1
 8014de8:	bd38      	pop	{r3, r4, r5, pc}
 8014dea:	bf00      	nop

08014dec <ucdr_deserialize_bool>:
 8014dec:	b538      	push	{r3, r4, r5, lr}
 8014dee:	460d      	mov	r5, r1
 8014df0:	2101      	movs	r1, #1
 8014df2:	4604      	mov	r4, r0
 8014df4:	f7fa fe20 	bl	800fa38 <ucdr_check_final_buffer_behavior>
 8014df8:	b168      	cbz	r0, 8014e16 <ucdr_deserialize_bool+0x2a>
 8014dfa:	68a2      	ldr	r2, [r4, #8]
 8014dfc:	6923      	ldr	r3, [r4, #16]
 8014dfe:	f812 1b01 	ldrb.w	r1, [r2], #1
 8014e02:	3900      	subs	r1, #0
 8014e04:	f103 0301 	add.w	r3, r3, #1
 8014e08:	bf18      	it	ne
 8014e0a:	2101      	movne	r1, #1
 8014e0c:	2001      	movs	r0, #1
 8014e0e:	7029      	strb	r1, [r5, #0]
 8014e10:	60a2      	str	r2, [r4, #8]
 8014e12:	6123      	str	r3, [r4, #16]
 8014e14:	7560      	strb	r0, [r4, #21]
 8014e16:	7da0      	ldrb	r0, [r4, #22]
 8014e18:	f080 0001 	eor.w	r0, r0, #1
 8014e1c:	bd38      	pop	{r3, r4, r5, pc}
 8014e1e:	bf00      	nop

08014e20 <ucdr_serialize_uint8_t>:
 8014e20:	b538      	push	{r3, r4, r5, lr}
 8014e22:	460d      	mov	r5, r1
 8014e24:	2101      	movs	r1, #1
 8014e26:	4604      	mov	r4, r0
 8014e28:	f7fa fe06 	bl	800fa38 <ucdr_check_final_buffer_behavior>
 8014e2c:	b148      	cbz	r0, 8014e42 <ucdr_serialize_uint8_t+0x22>
 8014e2e:	68a3      	ldr	r3, [r4, #8]
 8014e30:	701d      	strb	r5, [r3, #0]
 8014e32:	68a2      	ldr	r2, [r4, #8]
 8014e34:	6923      	ldr	r3, [r4, #16]
 8014e36:	3201      	adds	r2, #1
 8014e38:	3301      	adds	r3, #1
 8014e3a:	2101      	movs	r1, #1
 8014e3c:	60a2      	str	r2, [r4, #8]
 8014e3e:	6123      	str	r3, [r4, #16]
 8014e40:	7561      	strb	r1, [r4, #21]
 8014e42:	7da0      	ldrb	r0, [r4, #22]
 8014e44:	f080 0001 	eor.w	r0, r0, #1
 8014e48:	bd38      	pop	{r3, r4, r5, pc}
 8014e4a:	bf00      	nop

08014e4c <ucdr_deserialize_uint8_t>:
 8014e4c:	b538      	push	{r3, r4, r5, lr}
 8014e4e:	460d      	mov	r5, r1
 8014e50:	2101      	movs	r1, #1
 8014e52:	4604      	mov	r4, r0
 8014e54:	f7fa fdf0 	bl	800fa38 <ucdr_check_final_buffer_behavior>
 8014e58:	b150      	cbz	r0, 8014e70 <ucdr_deserialize_uint8_t+0x24>
 8014e5a:	68a3      	ldr	r3, [r4, #8]
 8014e5c:	781b      	ldrb	r3, [r3, #0]
 8014e5e:	702b      	strb	r3, [r5, #0]
 8014e60:	68a2      	ldr	r2, [r4, #8]
 8014e62:	6923      	ldr	r3, [r4, #16]
 8014e64:	3201      	adds	r2, #1
 8014e66:	3301      	adds	r3, #1
 8014e68:	2101      	movs	r1, #1
 8014e6a:	60a2      	str	r2, [r4, #8]
 8014e6c:	6123      	str	r3, [r4, #16]
 8014e6e:	7561      	strb	r1, [r4, #21]
 8014e70:	7da0      	ldrb	r0, [r4, #22]
 8014e72:	f080 0001 	eor.w	r0, r0, #1
 8014e76:	bd38      	pop	{r3, r4, r5, pc}

08014e78 <ucdr_serialize_uint16_t>:
 8014e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e7c:	b082      	sub	sp, #8
 8014e7e:	460b      	mov	r3, r1
 8014e80:	2102      	movs	r1, #2
 8014e82:	4604      	mov	r4, r0
 8014e84:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014e88:	f7fa fe28 	bl	800fadc <ucdr_buffer_alignment>
 8014e8c:	4601      	mov	r1, r0
 8014e8e:	4620      	mov	r0, r4
 8014e90:	7d67      	ldrb	r7, [r4, #21]
 8014e92:	f7fa fe67 	bl	800fb64 <ucdr_advance_buffer>
 8014e96:	4620      	mov	r0, r4
 8014e98:	2102      	movs	r1, #2
 8014e9a:	f7fa fdc1 	bl	800fa20 <ucdr_check_buffer_available_for>
 8014e9e:	bb78      	cbnz	r0, 8014f00 <ucdr_serialize_uint16_t+0x88>
 8014ea0:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8014ea4:	42b5      	cmp	r5, r6
 8014ea6:	d926      	bls.n	8014ef6 <ucdr_serialize_uint16_t+0x7e>
 8014ea8:	6922      	ldr	r2, [r4, #16]
 8014eaa:	60a5      	str	r5, [r4, #8]
 8014eac:	1bad      	subs	r5, r5, r6
 8014eae:	442a      	add	r2, r5
 8014eb0:	f1c5 0802 	rsb	r8, r5, #2
 8014eb4:	6122      	str	r2, [r4, #16]
 8014eb6:	4641      	mov	r1, r8
 8014eb8:	4620      	mov	r0, r4
 8014eba:	f7fa fdbd 	bl	800fa38 <ucdr_check_final_buffer_behavior>
 8014ebe:	2800      	cmp	r0, #0
 8014ec0:	d03b      	beq.n	8014f3a <ucdr_serialize_uint16_t+0xc2>
 8014ec2:	7d23      	ldrb	r3, [r4, #20]
 8014ec4:	2b01      	cmp	r3, #1
 8014ec6:	d04a      	beq.n	8014f5e <ucdr_serialize_uint16_t+0xe6>
 8014ec8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014ecc:	7033      	strb	r3, [r6, #0]
 8014ece:	2d00      	cmp	r5, #0
 8014ed0:	d040      	beq.n	8014f54 <ucdr_serialize_uint16_t+0xdc>
 8014ed2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014ed6:	7073      	strb	r3, [r6, #1]
 8014ed8:	6923      	ldr	r3, [r4, #16]
 8014eda:	68a2      	ldr	r2, [r4, #8]
 8014edc:	7da0      	ldrb	r0, [r4, #22]
 8014ede:	3302      	adds	r3, #2
 8014ee0:	1b5b      	subs	r3, r3, r5
 8014ee2:	4442      	add	r2, r8
 8014ee4:	2102      	movs	r1, #2
 8014ee6:	f080 0001 	eor.w	r0, r0, #1
 8014eea:	6123      	str	r3, [r4, #16]
 8014eec:	60a2      	str	r2, [r4, #8]
 8014eee:	7561      	strb	r1, [r4, #21]
 8014ef0:	b002      	add	sp, #8
 8014ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ef6:	2102      	movs	r1, #2
 8014ef8:	4620      	mov	r0, r4
 8014efa:	f7fa fd9d 	bl	800fa38 <ucdr_check_final_buffer_behavior>
 8014efe:	b190      	cbz	r0, 8014f26 <ucdr_serialize_uint16_t+0xae>
 8014f00:	7d23      	ldrb	r3, [r4, #20]
 8014f02:	2b01      	cmp	r3, #1
 8014f04:	68a3      	ldr	r3, [r4, #8]
 8014f06:	d014      	beq.n	8014f32 <ucdr_serialize_uint16_t+0xba>
 8014f08:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014f0c:	701a      	strb	r2, [r3, #0]
 8014f0e:	68a3      	ldr	r3, [r4, #8]
 8014f10:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014f14:	705a      	strb	r2, [r3, #1]
 8014f16:	68a2      	ldr	r2, [r4, #8]
 8014f18:	6923      	ldr	r3, [r4, #16]
 8014f1a:	3202      	adds	r2, #2
 8014f1c:	3302      	adds	r3, #2
 8014f1e:	2102      	movs	r1, #2
 8014f20:	60a2      	str	r2, [r4, #8]
 8014f22:	6123      	str	r3, [r4, #16]
 8014f24:	7561      	strb	r1, [r4, #21]
 8014f26:	7da0      	ldrb	r0, [r4, #22]
 8014f28:	f080 0001 	eor.w	r0, r0, #1
 8014f2c:	b002      	add	sp, #8
 8014f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f32:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014f36:	801a      	strh	r2, [r3, #0]
 8014f38:	e7ed      	b.n	8014f16 <ucdr_serialize_uint16_t+0x9e>
 8014f3a:	68a2      	ldr	r2, [r4, #8]
 8014f3c:	6923      	ldr	r3, [r4, #16]
 8014f3e:	7da0      	ldrb	r0, [r4, #22]
 8014f40:	7567      	strb	r7, [r4, #21]
 8014f42:	1b52      	subs	r2, r2, r5
 8014f44:	1b5b      	subs	r3, r3, r5
 8014f46:	f080 0001 	eor.w	r0, r0, #1
 8014f4a:	60a2      	str	r2, [r4, #8]
 8014f4c:	6123      	str	r3, [r4, #16]
 8014f4e:	b002      	add	sp, #8
 8014f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f54:	68a3      	ldr	r3, [r4, #8]
 8014f56:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014f5a:	701a      	strb	r2, [r3, #0]
 8014f5c:	e7bc      	b.n	8014ed8 <ucdr_serialize_uint16_t+0x60>
 8014f5e:	4630      	mov	r0, r6
 8014f60:	f10d 0606 	add.w	r6, sp, #6
 8014f64:	4631      	mov	r1, r6
 8014f66:	462a      	mov	r2, r5
 8014f68:	f003 f925 	bl	80181b6 <memcpy>
 8014f6c:	68a0      	ldr	r0, [r4, #8]
 8014f6e:	4642      	mov	r2, r8
 8014f70:	1971      	adds	r1, r6, r5
 8014f72:	f003 f920 	bl	80181b6 <memcpy>
 8014f76:	e7af      	b.n	8014ed8 <ucdr_serialize_uint16_t+0x60>

08014f78 <ucdr_serialize_endian_uint16_t>:
 8014f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014f7c:	b083      	sub	sp, #12
 8014f7e:	460d      	mov	r5, r1
 8014f80:	2102      	movs	r1, #2
 8014f82:	4604      	mov	r4, r0
 8014f84:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014f88:	f7fa fda8 	bl	800fadc <ucdr_buffer_alignment>
 8014f8c:	4601      	mov	r1, r0
 8014f8e:	4620      	mov	r0, r4
 8014f90:	f894 8015 	ldrb.w	r8, [r4, #21]
 8014f94:	f7fa fde6 	bl	800fb64 <ucdr_advance_buffer>
 8014f98:	4620      	mov	r0, r4
 8014f9a:	2102      	movs	r1, #2
 8014f9c:	f7fa fd40 	bl	800fa20 <ucdr_check_buffer_available_for>
 8014fa0:	bb70      	cbnz	r0, 8015000 <ucdr_serialize_endian_uint16_t+0x88>
 8014fa2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8014fa6:	42be      	cmp	r6, r7
 8014fa8:	d925      	bls.n	8014ff6 <ucdr_serialize_endian_uint16_t+0x7e>
 8014faa:	6922      	ldr	r2, [r4, #16]
 8014fac:	60a6      	str	r6, [r4, #8]
 8014fae:	1bf6      	subs	r6, r6, r7
 8014fb0:	4432      	add	r2, r6
 8014fb2:	f1c6 0902 	rsb	r9, r6, #2
 8014fb6:	6122      	str	r2, [r4, #16]
 8014fb8:	4649      	mov	r1, r9
 8014fba:	4620      	mov	r0, r4
 8014fbc:	f7fa fd3c 	bl	800fa38 <ucdr_check_final_buffer_behavior>
 8014fc0:	2800      	cmp	r0, #0
 8014fc2:	d039      	beq.n	8015038 <ucdr_serialize_endian_uint16_t+0xc0>
 8014fc4:	2d01      	cmp	r5, #1
 8014fc6:	d04a      	beq.n	801505e <ucdr_serialize_endian_uint16_t+0xe6>
 8014fc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014fcc:	703b      	strb	r3, [r7, #0]
 8014fce:	2e00      	cmp	r6, #0
 8014fd0:	d040      	beq.n	8015054 <ucdr_serialize_endian_uint16_t+0xdc>
 8014fd2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014fd6:	707b      	strb	r3, [r7, #1]
 8014fd8:	6923      	ldr	r3, [r4, #16]
 8014fda:	68a2      	ldr	r2, [r4, #8]
 8014fdc:	7da0      	ldrb	r0, [r4, #22]
 8014fde:	3302      	adds	r3, #2
 8014fe0:	1b9b      	subs	r3, r3, r6
 8014fe2:	444a      	add	r2, r9
 8014fe4:	2102      	movs	r1, #2
 8014fe6:	f080 0001 	eor.w	r0, r0, #1
 8014fea:	6123      	str	r3, [r4, #16]
 8014fec:	60a2      	str	r2, [r4, #8]
 8014fee:	7561      	strb	r1, [r4, #21]
 8014ff0:	b003      	add	sp, #12
 8014ff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ff6:	2102      	movs	r1, #2
 8014ff8:	4620      	mov	r0, r4
 8014ffa:	f7fa fd1d 	bl	800fa38 <ucdr_check_final_buffer_behavior>
 8014ffe:	b188      	cbz	r0, 8015024 <ucdr_serialize_endian_uint16_t+0xac>
 8015000:	2d01      	cmp	r5, #1
 8015002:	68a3      	ldr	r3, [r4, #8]
 8015004:	d014      	beq.n	8015030 <ucdr_serialize_endian_uint16_t+0xb8>
 8015006:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801500a:	701a      	strb	r2, [r3, #0]
 801500c:	68a3      	ldr	r3, [r4, #8]
 801500e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8015012:	705a      	strb	r2, [r3, #1]
 8015014:	68a2      	ldr	r2, [r4, #8]
 8015016:	6923      	ldr	r3, [r4, #16]
 8015018:	3202      	adds	r2, #2
 801501a:	3302      	adds	r3, #2
 801501c:	2102      	movs	r1, #2
 801501e:	60a2      	str	r2, [r4, #8]
 8015020:	6123      	str	r3, [r4, #16]
 8015022:	7561      	strb	r1, [r4, #21]
 8015024:	7da0      	ldrb	r0, [r4, #22]
 8015026:	f080 0001 	eor.w	r0, r0, #1
 801502a:	b003      	add	sp, #12
 801502c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015030:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8015034:	801a      	strh	r2, [r3, #0]
 8015036:	e7ed      	b.n	8015014 <ucdr_serialize_endian_uint16_t+0x9c>
 8015038:	68a2      	ldr	r2, [r4, #8]
 801503a:	6923      	ldr	r3, [r4, #16]
 801503c:	7da0      	ldrb	r0, [r4, #22]
 801503e:	f884 8015 	strb.w	r8, [r4, #21]
 8015042:	1b92      	subs	r2, r2, r6
 8015044:	1b9b      	subs	r3, r3, r6
 8015046:	f080 0001 	eor.w	r0, r0, #1
 801504a:	60a2      	str	r2, [r4, #8]
 801504c:	6123      	str	r3, [r4, #16]
 801504e:	b003      	add	sp, #12
 8015050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015054:	68a3      	ldr	r3, [r4, #8]
 8015056:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801505a:	701a      	strb	r2, [r3, #0]
 801505c:	e7bc      	b.n	8014fd8 <ucdr_serialize_endian_uint16_t+0x60>
 801505e:	f10d 0506 	add.w	r5, sp, #6
 8015062:	4629      	mov	r1, r5
 8015064:	4632      	mov	r2, r6
 8015066:	4638      	mov	r0, r7
 8015068:	f003 f8a5 	bl	80181b6 <memcpy>
 801506c:	68a0      	ldr	r0, [r4, #8]
 801506e:	464a      	mov	r2, r9
 8015070:	19a9      	adds	r1, r5, r6
 8015072:	f003 f8a0 	bl	80181b6 <memcpy>
 8015076:	e7af      	b.n	8014fd8 <ucdr_serialize_endian_uint16_t+0x60>

08015078 <ucdr_deserialize_uint16_t>:
 8015078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801507c:	460d      	mov	r5, r1
 801507e:	2102      	movs	r1, #2
 8015080:	4604      	mov	r4, r0
 8015082:	f7fa fd2b 	bl	800fadc <ucdr_buffer_alignment>
 8015086:	4601      	mov	r1, r0
 8015088:	4620      	mov	r0, r4
 801508a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801508e:	f7fa fd69 	bl	800fb64 <ucdr_advance_buffer>
 8015092:	4620      	mov	r0, r4
 8015094:	2102      	movs	r1, #2
 8015096:	f7fa fcc3 	bl	800fa20 <ucdr_check_buffer_available_for>
 801509a:	bb60      	cbnz	r0, 80150f6 <ucdr_deserialize_uint16_t+0x7e>
 801509c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80150a0:	42be      	cmp	r6, r7
 80150a2:	d923      	bls.n	80150ec <ucdr_deserialize_uint16_t+0x74>
 80150a4:	6922      	ldr	r2, [r4, #16]
 80150a6:	60a6      	str	r6, [r4, #8]
 80150a8:	1bf6      	subs	r6, r6, r7
 80150aa:	4432      	add	r2, r6
 80150ac:	f1c6 0902 	rsb	r9, r6, #2
 80150b0:	6122      	str	r2, [r4, #16]
 80150b2:	4649      	mov	r1, r9
 80150b4:	4620      	mov	r0, r4
 80150b6:	f7fa fcbf 	bl	800fa38 <ucdr_check_final_buffer_behavior>
 80150ba:	2800      	cmp	r0, #0
 80150bc:	d034      	beq.n	8015128 <ucdr_deserialize_uint16_t+0xb0>
 80150be:	7d23      	ldrb	r3, [r4, #20]
 80150c0:	2b01      	cmp	r3, #1
 80150c2:	d042      	beq.n	801514a <ucdr_deserialize_uint16_t+0xd2>
 80150c4:	787b      	ldrb	r3, [r7, #1]
 80150c6:	702b      	strb	r3, [r5, #0]
 80150c8:	2e00      	cmp	r6, #0
 80150ca:	d03a      	beq.n	8015142 <ucdr_deserialize_uint16_t+0xca>
 80150cc:	783b      	ldrb	r3, [r7, #0]
 80150ce:	706b      	strb	r3, [r5, #1]
 80150d0:	6923      	ldr	r3, [r4, #16]
 80150d2:	68a2      	ldr	r2, [r4, #8]
 80150d4:	7da0      	ldrb	r0, [r4, #22]
 80150d6:	2102      	movs	r1, #2
 80150d8:	3302      	adds	r3, #2
 80150da:	1b9b      	subs	r3, r3, r6
 80150dc:	444a      	add	r2, r9
 80150de:	7561      	strb	r1, [r4, #21]
 80150e0:	6123      	str	r3, [r4, #16]
 80150e2:	60a2      	str	r2, [r4, #8]
 80150e4:	f080 0001 	eor.w	r0, r0, #1
 80150e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80150ec:	2102      	movs	r1, #2
 80150ee:	4620      	mov	r0, r4
 80150f0:	f7fa fca2 	bl	800fa38 <ucdr_check_final_buffer_behavior>
 80150f4:	b180      	cbz	r0, 8015118 <ucdr_deserialize_uint16_t+0xa0>
 80150f6:	7d23      	ldrb	r3, [r4, #20]
 80150f8:	2b01      	cmp	r3, #1
 80150fa:	68a3      	ldr	r3, [r4, #8]
 80150fc:	d011      	beq.n	8015122 <ucdr_deserialize_uint16_t+0xaa>
 80150fe:	785b      	ldrb	r3, [r3, #1]
 8015100:	702b      	strb	r3, [r5, #0]
 8015102:	68a3      	ldr	r3, [r4, #8]
 8015104:	781b      	ldrb	r3, [r3, #0]
 8015106:	706b      	strb	r3, [r5, #1]
 8015108:	68a2      	ldr	r2, [r4, #8]
 801510a:	6923      	ldr	r3, [r4, #16]
 801510c:	3202      	adds	r2, #2
 801510e:	3302      	adds	r3, #2
 8015110:	2102      	movs	r1, #2
 8015112:	60a2      	str	r2, [r4, #8]
 8015114:	6123      	str	r3, [r4, #16]
 8015116:	7561      	strb	r1, [r4, #21]
 8015118:	7da0      	ldrb	r0, [r4, #22]
 801511a:	f080 0001 	eor.w	r0, r0, #1
 801511e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015122:	881b      	ldrh	r3, [r3, #0]
 8015124:	802b      	strh	r3, [r5, #0]
 8015126:	e7ef      	b.n	8015108 <ucdr_deserialize_uint16_t+0x90>
 8015128:	68a2      	ldr	r2, [r4, #8]
 801512a:	6923      	ldr	r3, [r4, #16]
 801512c:	7da0      	ldrb	r0, [r4, #22]
 801512e:	f884 8015 	strb.w	r8, [r4, #21]
 8015132:	1b92      	subs	r2, r2, r6
 8015134:	1b9b      	subs	r3, r3, r6
 8015136:	60a2      	str	r2, [r4, #8]
 8015138:	6123      	str	r3, [r4, #16]
 801513a:	f080 0001 	eor.w	r0, r0, #1
 801513e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015142:	68a3      	ldr	r3, [r4, #8]
 8015144:	781b      	ldrb	r3, [r3, #0]
 8015146:	706b      	strb	r3, [r5, #1]
 8015148:	e7c2      	b.n	80150d0 <ucdr_deserialize_uint16_t+0x58>
 801514a:	4639      	mov	r1, r7
 801514c:	4632      	mov	r2, r6
 801514e:	4628      	mov	r0, r5
 8015150:	f003 f831 	bl	80181b6 <memcpy>
 8015154:	68a1      	ldr	r1, [r4, #8]
 8015156:	464a      	mov	r2, r9
 8015158:	19a8      	adds	r0, r5, r6
 801515a:	f003 f82c 	bl	80181b6 <memcpy>
 801515e:	e7b7      	b.n	80150d0 <ucdr_deserialize_uint16_t+0x58>

08015160 <ucdr_deserialize_endian_uint16_t>:
 8015160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015164:	460e      	mov	r6, r1
 8015166:	2102      	movs	r1, #2
 8015168:	4604      	mov	r4, r0
 801516a:	4615      	mov	r5, r2
 801516c:	f7fa fcb6 	bl	800fadc <ucdr_buffer_alignment>
 8015170:	4601      	mov	r1, r0
 8015172:	4620      	mov	r0, r4
 8015174:	f894 9015 	ldrb.w	r9, [r4, #21]
 8015178:	f7fa fcf4 	bl	800fb64 <ucdr_advance_buffer>
 801517c:	4620      	mov	r0, r4
 801517e:	2102      	movs	r1, #2
 8015180:	f7fa fc4e 	bl	800fa20 <ucdr_check_buffer_available_for>
 8015184:	bb70      	cbnz	r0, 80151e4 <ucdr_deserialize_endian_uint16_t+0x84>
 8015186:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 801518a:	4547      	cmp	r7, r8
 801518c:	d925      	bls.n	80151da <ucdr_deserialize_endian_uint16_t+0x7a>
 801518e:	6922      	ldr	r2, [r4, #16]
 8015190:	60a7      	str	r7, [r4, #8]
 8015192:	eba7 0708 	sub.w	r7, r7, r8
 8015196:	443a      	add	r2, r7
 8015198:	f1c7 0a02 	rsb	sl, r7, #2
 801519c:	6122      	str	r2, [r4, #16]
 801519e:	4651      	mov	r1, sl
 80151a0:	4620      	mov	r0, r4
 80151a2:	f7fa fc49 	bl	800fa38 <ucdr_check_final_buffer_behavior>
 80151a6:	2800      	cmp	r0, #0
 80151a8:	d034      	beq.n	8015214 <ucdr_deserialize_endian_uint16_t+0xb4>
 80151aa:	2e01      	cmp	r6, #1
 80151ac:	d043      	beq.n	8015236 <ucdr_deserialize_endian_uint16_t+0xd6>
 80151ae:	f898 3001 	ldrb.w	r3, [r8, #1]
 80151b2:	702b      	strb	r3, [r5, #0]
 80151b4:	2f00      	cmp	r7, #0
 80151b6:	d03a      	beq.n	801522e <ucdr_deserialize_endian_uint16_t+0xce>
 80151b8:	f898 3000 	ldrb.w	r3, [r8]
 80151bc:	706b      	strb	r3, [r5, #1]
 80151be:	6923      	ldr	r3, [r4, #16]
 80151c0:	68a2      	ldr	r2, [r4, #8]
 80151c2:	7da0      	ldrb	r0, [r4, #22]
 80151c4:	2102      	movs	r1, #2
 80151c6:	3302      	adds	r3, #2
 80151c8:	1bdb      	subs	r3, r3, r7
 80151ca:	4452      	add	r2, sl
 80151cc:	7561      	strb	r1, [r4, #21]
 80151ce:	6123      	str	r3, [r4, #16]
 80151d0:	60a2      	str	r2, [r4, #8]
 80151d2:	f080 0001 	eor.w	r0, r0, #1
 80151d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151da:	2102      	movs	r1, #2
 80151dc:	4620      	mov	r0, r4
 80151de:	f7fa fc2b 	bl	800fa38 <ucdr_check_final_buffer_behavior>
 80151e2:	b178      	cbz	r0, 8015204 <ucdr_deserialize_endian_uint16_t+0xa4>
 80151e4:	2e01      	cmp	r6, #1
 80151e6:	68a3      	ldr	r3, [r4, #8]
 80151e8:	d011      	beq.n	801520e <ucdr_deserialize_endian_uint16_t+0xae>
 80151ea:	785b      	ldrb	r3, [r3, #1]
 80151ec:	702b      	strb	r3, [r5, #0]
 80151ee:	68a3      	ldr	r3, [r4, #8]
 80151f0:	781b      	ldrb	r3, [r3, #0]
 80151f2:	706b      	strb	r3, [r5, #1]
 80151f4:	68a2      	ldr	r2, [r4, #8]
 80151f6:	6923      	ldr	r3, [r4, #16]
 80151f8:	3202      	adds	r2, #2
 80151fa:	3302      	adds	r3, #2
 80151fc:	2102      	movs	r1, #2
 80151fe:	60a2      	str	r2, [r4, #8]
 8015200:	6123      	str	r3, [r4, #16]
 8015202:	7561      	strb	r1, [r4, #21]
 8015204:	7da0      	ldrb	r0, [r4, #22]
 8015206:	f080 0001 	eor.w	r0, r0, #1
 801520a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801520e:	881b      	ldrh	r3, [r3, #0]
 8015210:	802b      	strh	r3, [r5, #0]
 8015212:	e7ef      	b.n	80151f4 <ucdr_deserialize_endian_uint16_t+0x94>
 8015214:	68a2      	ldr	r2, [r4, #8]
 8015216:	6923      	ldr	r3, [r4, #16]
 8015218:	7da0      	ldrb	r0, [r4, #22]
 801521a:	f884 9015 	strb.w	r9, [r4, #21]
 801521e:	1bd2      	subs	r2, r2, r7
 8015220:	1bdb      	subs	r3, r3, r7
 8015222:	60a2      	str	r2, [r4, #8]
 8015224:	6123      	str	r3, [r4, #16]
 8015226:	f080 0001 	eor.w	r0, r0, #1
 801522a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801522e:	68a3      	ldr	r3, [r4, #8]
 8015230:	781b      	ldrb	r3, [r3, #0]
 8015232:	706b      	strb	r3, [r5, #1]
 8015234:	e7c3      	b.n	80151be <ucdr_deserialize_endian_uint16_t+0x5e>
 8015236:	4641      	mov	r1, r8
 8015238:	463a      	mov	r2, r7
 801523a:	4628      	mov	r0, r5
 801523c:	f002 ffbb 	bl	80181b6 <memcpy>
 8015240:	68a1      	ldr	r1, [r4, #8]
 8015242:	4652      	mov	r2, sl
 8015244:	19e8      	adds	r0, r5, r7
 8015246:	f002 ffb6 	bl	80181b6 <memcpy>
 801524a:	e7b8      	b.n	80151be <ucdr_deserialize_endian_uint16_t+0x5e>

0801524c <ucdr_serialize_uint32_t>:
 801524c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015250:	b082      	sub	sp, #8
 8015252:	4604      	mov	r4, r0
 8015254:	9101      	str	r1, [sp, #4]
 8015256:	2104      	movs	r1, #4
 8015258:	f7fa fc40 	bl	800fadc <ucdr_buffer_alignment>
 801525c:	4601      	mov	r1, r0
 801525e:	4620      	mov	r0, r4
 8015260:	7d67      	ldrb	r7, [r4, #21]
 8015262:	f7fa fc7f 	bl	800fb64 <ucdr_advance_buffer>
 8015266:	4620      	mov	r0, r4
 8015268:	2104      	movs	r1, #4
 801526a:	f7fa fbd9 	bl	800fa20 <ucdr_check_buffer_available_for>
 801526e:	2800      	cmp	r0, #0
 8015270:	d139      	bne.n	80152e6 <ucdr_serialize_uint32_t+0x9a>
 8015272:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 8015276:	42ae      	cmp	r6, r5
 8015278:	d930      	bls.n	80152dc <ucdr_serialize_uint32_t+0x90>
 801527a:	6922      	ldr	r2, [r4, #16]
 801527c:	60a6      	str	r6, [r4, #8]
 801527e:	1b76      	subs	r6, r6, r5
 8015280:	4432      	add	r2, r6
 8015282:	f1c6 0804 	rsb	r8, r6, #4
 8015286:	6122      	str	r2, [r4, #16]
 8015288:	4641      	mov	r1, r8
 801528a:	4620      	mov	r0, r4
 801528c:	f7fa fbd4 	bl	800fa38 <ucdr_check_final_buffer_behavior>
 8015290:	2800      	cmp	r0, #0
 8015292:	d04c      	beq.n	801532e <ucdr_serialize_uint32_t+0xe2>
 8015294:	7d23      	ldrb	r3, [r4, #20]
 8015296:	2b01      	cmp	r3, #1
 8015298:	d063      	beq.n	8015362 <ucdr_serialize_uint32_t+0x116>
 801529a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801529e:	702b      	strb	r3, [r5, #0]
 80152a0:	2e00      	cmp	r6, #0
 80152a2:	d051      	beq.n	8015348 <ucdr_serialize_uint32_t+0xfc>
 80152a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80152a8:	706b      	strb	r3, [r5, #1]
 80152aa:	2e01      	cmp	r6, #1
 80152ac:	d050      	beq.n	8015350 <ucdr_serialize_uint32_t+0x104>
 80152ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80152b2:	70ab      	strb	r3, [r5, #2]
 80152b4:	2e02      	cmp	r6, #2
 80152b6:	d04f      	beq.n	8015358 <ucdr_serialize_uint32_t+0x10c>
 80152b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80152bc:	70eb      	strb	r3, [r5, #3]
 80152be:	6923      	ldr	r3, [r4, #16]
 80152c0:	68a2      	ldr	r2, [r4, #8]
 80152c2:	7da0      	ldrb	r0, [r4, #22]
 80152c4:	3304      	adds	r3, #4
 80152c6:	1b9b      	subs	r3, r3, r6
 80152c8:	4442      	add	r2, r8
 80152ca:	2104      	movs	r1, #4
 80152cc:	f080 0001 	eor.w	r0, r0, #1
 80152d0:	6123      	str	r3, [r4, #16]
 80152d2:	60a2      	str	r2, [r4, #8]
 80152d4:	7561      	strb	r1, [r4, #21]
 80152d6:	b002      	add	sp, #8
 80152d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152dc:	2104      	movs	r1, #4
 80152de:	4620      	mov	r0, r4
 80152e0:	f7fa fbaa 	bl	800fa38 <ucdr_check_final_buffer_behavior>
 80152e4:	b1d0      	cbz	r0, 801531c <ucdr_serialize_uint32_t+0xd0>
 80152e6:	7d23      	ldrb	r3, [r4, #20]
 80152e8:	2b01      	cmp	r3, #1
 80152ea:	68a3      	ldr	r3, [r4, #8]
 80152ec:	d01c      	beq.n	8015328 <ucdr_serialize_uint32_t+0xdc>
 80152ee:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80152f2:	701a      	strb	r2, [r3, #0]
 80152f4:	68a3      	ldr	r3, [r4, #8]
 80152f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80152fa:	705a      	strb	r2, [r3, #1]
 80152fc:	68a3      	ldr	r3, [r4, #8]
 80152fe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8015302:	709a      	strb	r2, [r3, #2]
 8015304:	68a3      	ldr	r3, [r4, #8]
 8015306:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801530a:	70da      	strb	r2, [r3, #3]
 801530c:	68a2      	ldr	r2, [r4, #8]
 801530e:	6923      	ldr	r3, [r4, #16]
 8015310:	3204      	adds	r2, #4
 8015312:	3304      	adds	r3, #4
 8015314:	2104      	movs	r1, #4
 8015316:	60a2      	str	r2, [r4, #8]
 8015318:	6123      	str	r3, [r4, #16]
 801531a:	7561      	strb	r1, [r4, #21]
 801531c:	7da0      	ldrb	r0, [r4, #22]
 801531e:	f080 0001 	eor.w	r0, r0, #1
 8015322:	b002      	add	sp, #8
 8015324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015328:	9a01      	ldr	r2, [sp, #4]
 801532a:	601a      	str	r2, [r3, #0]
 801532c:	e7ee      	b.n	801530c <ucdr_serialize_uint32_t+0xc0>
 801532e:	68a2      	ldr	r2, [r4, #8]
 8015330:	6923      	ldr	r3, [r4, #16]
 8015332:	7da0      	ldrb	r0, [r4, #22]
 8015334:	7567      	strb	r7, [r4, #21]
 8015336:	1b92      	subs	r2, r2, r6
 8015338:	1b9b      	subs	r3, r3, r6
 801533a:	f080 0001 	eor.w	r0, r0, #1
 801533e:	60a2      	str	r2, [r4, #8]
 8015340:	6123      	str	r3, [r4, #16]
 8015342:	b002      	add	sp, #8
 8015344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015348:	68a3      	ldr	r3, [r4, #8]
 801534a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801534e:	701a      	strb	r2, [r3, #0]
 8015350:	68a3      	ldr	r3, [r4, #8]
 8015352:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8015356:	701a      	strb	r2, [r3, #0]
 8015358:	68a3      	ldr	r3, [r4, #8]
 801535a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801535e:	701a      	strb	r2, [r3, #0]
 8015360:	e7ad      	b.n	80152be <ucdr_serialize_uint32_t+0x72>
 8015362:	4628      	mov	r0, r5
 8015364:	ad01      	add	r5, sp, #4
 8015366:	4629      	mov	r1, r5
 8015368:	4632      	mov	r2, r6
 801536a:	f002 ff24 	bl	80181b6 <memcpy>
 801536e:	68a0      	ldr	r0, [r4, #8]
 8015370:	4642      	mov	r2, r8
 8015372:	19a9      	adds	r1, r5, r6
 8015374:	f002 ff1f 	bl	80181b6 <memcpy>
 8015378:	e7a1      	b.n	80152be <ucdr_serialize_uint32_t+0x72>
 801537a:	bf00      	nop

0801537c <ucdr_serialize_endian_uint32_t>:
 801537c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015380:	b083      	sub	sp, #12
 8015382:	460d      	mov	r5, r1
 8015384:	2104      	movs	r1, #4
 8015386:	4604      	mov	r4, r0
 8015388:	9201      	str	r2, [sp, #4]
 801538a:	f7fa fba7 	bl	800fadc <ucdr_buffer_alignment>
 801538e:	4601      	mov	r1, r0
 8015390:	4620      	mov	r0, r4
 8015392:	f894 8015 	ldrb.w	r8, [r4, #21]
 8015396:	f7fa fbe5 	bl	800fb64 <ucdr_advance_buffer>
 801539a:	4620      	mov	r0, r4
 801539c:	2104      	movs	r1, #4
 801539e:	f7fa fb3f 	bl	800fa20 <ucdr_check_buffer_available_for>
 80153a2:	2800      	cmp	r0, #0
 80153a4:	d138      	bne.n	8015418 <ucdr_serialize_endian_uint32_t+0x9c>
 80153a6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80153aa:	42b7      	cmp	r7, r6
 80153ac:	d92f      	bls.n	801540e <ucdr_serialize_endian_uint32_t+0x92>
 80153ae:	6922      	ldr	r2, [r4, #16]
 80153b0:	60a7      	str	r7, [r4, #8]
 80153b2:	1bbf      	subs	r7, r7, r6
 80153b4:	443a      	add	r2, r7
 80153b6:	f1c7 0904 	rsb	r9, r7, #4
 80153ba:	6122      	str	r2, [r4, #16]
 80153bc:	4649      	mov	r1, r9
 80153be:	4620      	mov	r0, r4
 80153c0:	f7fa fb3a 	bl	800fa38 <ucdr_check_final_buffer_behavior>
 80153c4:	2800      	cmp	r0, #0
 80153c6:	d04a      	beq.n	801545e <ucdr_serialize_endian_uint32_t+0xe2>
 80153c8:	2d01      	cmp	r5, #1
 80153ca:	d063      	beq.n	8015494 <ucdr_serialize_endian_uint32_t+0x118>
 80153cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80153d0:	7033      	strb	r3, [r6, #0]
 80153d2:	2f00      	cmp	r7, #0
 80153d4:	d051      	beq.n	801547a <ucdr_serialize_endian_uint32_t+0xfe>
 80153d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80153da:	7073      	strb	r3, [r6, #1]
 80153dc:	2f01      	cmp	r7, #1
 80153de:	d050      	beq.n	8015482 <ucdr_serialize_endian_uint32_t+0x106>
 80153e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80153e4:	70b3      	strb	r3, [r6, #2]
 80153e6:	2f02      	cmp	r7, #2
 80153e8:	d04f      	beq.n	801548a <ucdr_serialize_endian_uint32_t+0x10e>
 80153ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80153ee:	70f3      	strb	r3, [r6, #3]
 80153f0:	6923      	ldr	r3, [r4, #16]
 80153f2:	68a2      	ldr	r2, [r4, #8]
 80153f4:	7da0      	ldrb	r0, [r4, #22]
 80153f6:	3304      	adds	r3, #4
 80153f8:	1bdb      	subs	r3, r3, r7
 80153fa:	444a      	add	r2, r9
 80153fc:	2104      	movs	r1, #4
 80153fe:	f080 0001 	eor.w	r0, r0, #1
 8015402:	6123      	str	r3, [r4, #16]
 8015404:	60a2      	str	r2, [r4, #8]
 8015406:	7561      	strb	r1, [r4, #21]
 8015408:	b003      	add	sp, #12
 801540a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801540e:	2104      	movs	r1, #4
 8015410:	4620      	mov	r0, r4
 8015412:	f7fa fb11 	bl	800fa38 <ucdr_check_final_buffer_behavior>
 8015416:	b1c8      	cbz	r0, 801544c <ucdr_serialize_endian_uint32_t+0xd0>
 8015418:	2d01      	cmp	r5, #1
 801541a:	68a3      	ldr	r3, [r4, #8]
 801541c:	d01c      	beq.n	8015458 <ucdr_serialize_endian_uint32_t+0xdc>
 801541e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8015422:	701a      	strb	r2, [r3, #0]
 8015424:	68a3      	ldr	r3, [r4, #8]
 8015426:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801542a:	705a      	strb	r2, [r3, #1]
 801542c:	68a3      	ldr	r3, [r4, #8]
 801542e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8015432:	709a      	strb	r2, [r3, #2]
 8015434:	68a3      	ldr	r3, [r4, #8]
 8015436:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801543a:	70da      	strb	r2, [r3, #3]
 801543c:	68a2      	ldr	r2, [r4, #8]
 801543e:	6923      	ldr	r3, [r4, #16]
 8015440:	3204      	adds	r2, #4
 8015442:	3304      	adds	r3, #4
 8015444:	2104      	movs	r1, #4
 8015446:	60a2      	str	r2, [r4, #8]
 8015448:	6123      	str	r3, [r4, #16]
 801544a:	7561      	strb	r1, [r4, #21]
 801544c:	7da0      	ldrb	r0, [r4, #22]
 801544e:	f080 0001 	eor.w	r0, r0, #1
 8015452:	b003      	add	sp, #12
 8015454:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015458:	9a01      	ldr	r2, [sp, #4]
 801545a:	601a      	str	r2, [r3, #0]
 801545c:	e7ee      	b.n	801543c <ucdr_serialize_endian_uint32_t+0xc0>
 801545e:	68a2      	ldr	r2, [r4, #8]
 8015460:	6923      	ldr	r3, [r4, #16]
 8015462:	7da0      	ldrb	r0, [r4, #22]
 8015464:	f884 8015 	strb.w	r8, [r4, #21]
 8015468:	1bd2      	subs	r2, r2, r7
 801546a:	1bdb      	subs	r3, r3, r7
 801546c:	f080 0001 	eor.w	r0, r0, #1
 8015470:	60a2      	str	r2, [r4, #8]
 8015472:	6123      	str	r3, [r4, #16]
 8015474:	b003      	add	sp, #12
 8015476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801547a:	68a3      	ldr	r3, [r4, #8]
 801547c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8015480:	701a      	strb	r2, [r3, #0]
 8015482:	68a3      	ldr	r3, [r4, #8]
 8015484:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8015488:	701a      	strb	r2, [r3, #0]
 801548a:	68a3      	ldr	r3, [r4, #8]
 801548c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8015490:	701a      	strb	r2, [r3, #0]
 8015492:	e7ad      	b.n	80153f0 <ucdr_serialize_endian_uint32_t+0x74>
 8015494:	ad01      	add	r5, sp, #4
 8015496:	4629      	mov	r1, r5
 8015498:	463a      	mov	r2, r7
 801549a:	4630      	mov	r0, r6
 801549c:	f002 fe8b 	bl	80181b6 <memcpy>
 80154a0:	68a0      	ldr	r0, [r4, #8]
 80154a2:	464a      	mov	r2, r9
 80154a4:	19e9      	adds	r1, r5, r7
 80154a6:	f002 fe86 	bl	80181b6 <memcpy>
 80154aa:	e7a1      	b.n	80153f0 <ucdr_serialize_endian_uint32_t+0x74>

080154ac <ucdr_deserialize_uint32_t>:
 80154ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80154b0:	460d      	mov	r5, r1
 80154b2:	2104      	movs	r1, #4
 80154b4:	4604      	mov	r4, r0
 80154b6:	f7fa fb11 	bl	800fadc <ucdr_buffer_alignment>
 80154ba:	4601      	mov	r1, r0
 80154bc:	4620      	mov	r0, r4
 80154be:	f894 8015 	ldrb.w	r8, [r4, #21]
 80154c2:	f7fa fb4f 	bl	800fb64 <ucdr_advance_buffer>
 80154c6:	4620      	mov	r0, r4
 80154c8:	2104      	movs	r1, #4
 80154ca:	f7fa faa9 	bl	800fa20 <ucdr_check_buffer_available_for>
 80154ce:	2800      	cmp	r0, #0
 80154d0:	d138      	bne.n	8015544 <ucdr_deserialize_uint32_t+0x98>
 80154d2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80154d6:	42b7      	cmp	r7, r6
 80154d8:	d92f      	bls.n	801553a <ucdr_deserialize_uint32_t+0x8e>
 80154da:	6922      	ldr	r2, [r4, #16]
 80154dc:	60a7      	str	r7, [r4, #8]
 80154de:	1bbf      	subs	r7, r7, r6
 80154e0:	443a      	add	r2, r7
 80154e2:	f1c7 0904 	rsb	r9, r7, #4
 80154e6:	6122      	str	r2, [r4, #16]
 80154e8:	4649      	mov	r1, r9
 80154ea:	4620      	mov	r0, r4
 80154ec:	f7fa faa4 	bl	800fa38 <ucdr_check_final_buffer_behavior>
 80154f0:	2800      	cmp	r0, #0
 80154f2:	d046      	beq.n	8015582 <ucdr_deserialize_uint32_t+0xd6>
 80154f4:	7d23      	ldrb	r3, [r4, #20]
 80154f6:	2b01      	cmp	r3, #1
 80154f8:	d05c      	beq.n	80155b4 <ucdr_deserialize_uint32_t+0x108>
 80154fa:	78f3      	ldrb	r3, [r6, #3]
 80154fc:	702b      	strb	r3, [r5, #0]
 80154fe:	2f00      	cmp	r7, #0
 8015500:	d04c      	beq.n	801559c <ucdr_deserialize_uint32_t+0xf0>
 8015502:	78b3      	ldrb	r3, [r6, #2]
 8015504:	706b      	strb	r3, [r5, #1]
 8015506:	2f01      	cmp	r7, #1
 8015508:	f105 0302 	add.w	r3, r5, #2
 801550c:	d04a      	beq.n	80155a4 <ucdr_deserialize_uint32_t+0xf8>
 801550e:	7873      	ldrb	r3, [r6, #1]
 8015510:	70ab      	strb	r3, [r5, #2]
 8015512:	2f02      	cmp	r7, #2
 8015514:	f105 0303 	add.w	r3, r5, #3
 8015518:	d048      	beq.n	80155ac <ucdr_deserialize_uint32_t+0x100>
 801551a:	7833      	ldrb	r3, [r6, #0]
 801551c:	70eb      	strb	r3, [r5, #3]
 801551e:	6923      	ldr	r3, [r4, #16]
 8015520:	68a2      	ldr	r2, [r4, #8]
 8015522:	7da0      	ldrb	r0, [r4, #22]
 8015524:	2104      	movs	r1, #4
 8015526:	3304      	adds	r3, #4
 8015528:	1bdb      	subs	r3, r3, r7
 801552a:	444a      	add	r2, r9
 801552c:	7561      	strb	r1, [r4, #21]
 801552e:	6123      	str	r3, [r4, #16]
 8015530:	60a2      	str	r2, [r4, #8]
 8015532:	f080 0001 	eor.w	r0, r0, #1
 8015536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801553a:	2104      	movs	r1, #4
 801553c:	4620      	mov	r0, r4
 801553e:	f7fa fa7b 	bl	800fa38 <ucdr_check_final_buffer_behavior>
 8015542:	b1b0      	cbz	r0, 8015572 <ucdr_deserialize_uint32_t+0xc6>
 8015544:	7d23      	ldrb	r3, [r4, #20]
 8015546:	2b01      	cmp	r3, #1
 8015548:	68a3      	ldr	r3, [r4, #8]
 801554a:	d017      	beq.n	801557c <ucdr_deserialize_uint32_t+0xd0>
 801554c:	78db      	ldrb	r3, [r3, #3]
 801554e:	702b      	strb	r3, [r5, #0]
 8015550:	68a3      	ldr	r3, [r4, #8]
 8015552:	789b      	ldrb	r3, [r3, #2]
 8015554:	706b      	strb	r3, [r5, #1]
 8015556:	68a3      	ldr	r3, [r4, #8]
 8015558:	785b      	ldrb	r3, [r3, #1]
 801555a:	70ab      	strb	r3, [r5, #2]
 801555c:	68a3      	ldr	r3, [r4, #8]
 801555e:	781b      	ldrb	r3, [r3, #0]
 8015560:	70eb      	strb	r3, [r5, #3]
 8015562:	68a2      	ldr	r2, [r4, #8]
 8015564:	6923      	ldr	r3, [r4, #16]
 8015566:	3204      	adds	r2, #4
 8015568:	3304      	adds	r3, #4
 801556a:	2104      	movs	r1, #4
 801556c:	60a2      	str	r2, [r4, #8]
 801556e:	6123      	str	r3, [r4, #16]
 8015570:	7561      	strb	r1, [r4, #21]
 8015572:	7da0      	ldrb	r0, [r4, #22]
 8015574:	f080 0001 	eor.w	r0, r0, #1
 8015578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	602b      	str	r3, [r5, #0]
 8015580:	e7ef      	b.n	8015562 <ucdr_deserialize_uint32_t+0xb6>
 8015582:	68a2      	ldr	r2, [r4, #8]
 8015584:	6923      	ldr	r3, [r4, #16]
 8015586:	7da0      	ldrb	r0, [r4, #22]
 8015588:	f884 8015 	strb.w	r8, [r4, #21]
 801558c:	1bd2      	subs	r2, r2, r7
 801558e:	1bdb      	subs	r3, r3, r7
 8015590:	60a2      	str	r2, [r4, #8]
 8015592:	6123      	str	r3, [r4, #16]
 8015594:	f080 0001 	eor.w	r0, r0, #1
 8015598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801559c:	68a3      	ldr	r3, [r4, #8]
 801559e:	789b      	ldrb	r3, [r3, #2]
 80155a0:	706b      	strb	r3, [r5, #1]
 80155a2:	1cab      	adds	r3, r5, #2
 80155a4:	68a2      	ldr	r2, [r4, #8]
 80155a6:	7852      	ldrb	r2, [r2, #1]
 80155a8:	f803 2b01 	strb.w	r2, [r3], #1
 80155ac:	68a2      	ldr	r2, [r4, #8]
 80155ae:	7812      	ldrb	r2, [r2, #0]
 80155b0:	701a      	strb	r2, [r3, #0]
 80155b2:	e7b4      	b.n	801551e <ucdr_deserialize_uint32_t+0x72>
 80155b4:	4631      	mov	r1, r6
 80155b6:	463a      	mov	r2, r7
 80155b8:	4628      	mov	r0, r5
 80155ba:	f002 fdfc 	bl	80181b6 <memcpy>
 80155be:	68a1      	ldr	r1, [r4, #8]
 80155c0:	464a      	mov	r2, r9
 80155c2:	19e8      	adds	r0, r5, r7
 80155c4:	f002 fdf7 	bl	80181b6 <memcpy>
 80155c8:	e7a9      	b.n	801551e <ucdr_deserialize_uint32_t+0x72>
 80155ca:	bf00      	nop

080155cc <ucdr_deserialize_endian_uint32_t>:
 80155cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155d0:	460e      	mov	r6, r1
 80155d2:	2104      	movs	r1, #4
 80155d4:	4604      	mov	r4, r0
 80155d6:	4615      	mov	r5, r2
 80155d8:	f7fa fa80 	bl	800fadc <ucdr_buffer_alignment>
 80155dc:	4601      	mov	r1, r0
 80155de:	4620      	mov	r0, r4
 80155e0:	f894 9015 	ldrb.w	r9, [r4, #21]
 80155e4:	f7fa fabe 	bl	800fb64 <ucdr_advance_buffer>
 80155e8:	4620      	mov	r0, r4
 80155ea:	2104      	movs	r1, #4
 80155ec:	f7fa fa18 	bl	800fa20 <ucdr_check_buffer_available_for>
 80155f0:	2800      	cmp	r0, #0
 80155f2:	d13c      	bne.n	801566e <ucdr_deserialize_endian_uint32_t+0xa2>
 80155f4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80155f8:	42bb      	cmp	r3, r7
 80155fa:	d933      	bls.n	8015664 <ucdr_deserialize_endian_uint32_t+0x98>
 80155fc:	6922      	ldr	r2, [r4, #16]
 80155fe:	60a3      	str	r3, [r4, #8]
 8015600:	eba3 0807 	sub.w	r8, r3, r7
 8015604:	4442      	add	r2, r8
 8015606:	f1c8 0a04 	rsb	sl, r8, #4
 801560a:	6122      	str	r2, [r4, #16]
 801560c:	4651      	mov	r1, sl
 801560e:	4620      	mov	r0, r4
 8015610:	f7fa fa12 	bl	800fa38 <ucdr_check_final_buffer_behavior>
 8015614:	2800      	cmp	r0, #0
 8015616:	d048      	beq.n	80156aa <ucdr_deserialize_endian_uint32_t+0xde>
 8015618:	2e01      	cmp	r6, #1
 801561a:	d061      	beq.n	80156e0 <ucdr_deserialize_endian_uint32_t+0x114>
 801561c:	78fb      	ldrb	r3, [r7, #3]
 801561e:	702b      	strb	r3, [r5, #0]
 8015620:	f1b8 0f00 	cmp.w	r8, #0
 8015624:	d050      	beq.n	80156c8 <ucdr_deserialize_endian_uint32_t+0xfc>
 8015626:	78bb      	ldrb	r3, [r7, #2]
 8015628:	706b      	strb	r3, [r5, #1]
 801562a:	f1b8 0f01 	cmp.w	r8, #1
 801562e:	f105 0302 	add.w	r3, r5, #2
 8015632:	d04d      	beq.n	80156d0 <ucdr_deserialize_endian_uint32_t+0x104>
 8015634:	787b      	ldrb	r3, [r7, #1]
 8015636:	70ab      	strb	r3, [r5, #2]
 8015638:	f1b8 0f02 	cmp.w	r8, #2
 801563c:	f105 0303 	add.w	r3, r5, #3
 8015640:	d04a      	beq.n	80156d8 <ucdr_deserialize_endian_uint32_t+0x10c>
 8015642:	783b      	ldrb	r3, [r7, #0]
 8015644:	70eb      	strb	r3, [r5, #3]
 8015646:	6923      	ldr	r3, [r4, #16]
 8015648:	68a2      	ldr	r2, [r4, #8]
 801564a:	7da0      	ldrb	r0, [r4, #22]
 801564c:	2104      	movs	r1, #4
 801564e:	3304      	adds	r3, #4
 8015650:	eba3 0308 	sub.w	r3, r3, r8
 8015654:	4452      	add	r2, sl
 8015656:	7561      	strb	r1, [r4, #21]
 8015658:	6123      	str	r3, [r4, #16]
 801565a:	60a2      	str	r2, [r4, #8]
 801565c:	f080 0001 	eor.w	r0, r0, #1
 8015660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015664:	2104      	movs	r1, #4
 8015666:	4620      	mov	r0, r4
 8015668:	f7fa f9e6 	bl	800fa38 <ucdr_check_final_buffer_behavior>
 801566c:	b1a8      	cbz	r0, 801569a <ucdr_deserialize_endian_uint32_t+0xce>
 801566e:	2e01      	cmp	r6, #1
 8015670:	68a3      	ldr	r3, [r4, #8]
 8015672:	d017      	beq.n	80156a4 <ucdr_deserialize_endian_uint32_t+0xd8>
 8015674:	78db      	ldrb	r3, [r3, #3]
 8015676:	702b      	strb	r3, [r5, #0]
 8015678:	68a3      	ldr	r3, [r4, #8]
 801567a:	789b      	ldrb	r3, [r3, #2]
 801567c:	706b      	strb	r3, [r5, #1]
 801567e:	68a3      	ldr	r3, [r4, #8]
 8015680:	785b      	ldrb	r3, [r3, #1]
 8015682:	70ab      	strb	r3, [r5, #2]
 8015684:	68a3      	ldr	r3, [r4, #8]
 8015686:	781b      	ldrb	r3, [r3, #0]
 8015688:	70eb      	strb	r3, [r5, #3]
 801568a:	68a2      	ldr	r2, [r4, #8]
 801568c:	6923      	ldr	r3, [r4, #16]
 801568e:	3204      	adds	r2, #4
 8015690:	3304      	adds	r3, #4
 8015692:	2104      	movs	r1, #4
 8015694:	60a2      	str	r2, [r4, #8]
 8015696:	6123      	str	r3, [r4, #16]
 8015698:	7561      	strb	r1, [r4, #21]
 801569a:	7da0      	ldrb	r0, [r4, #22]
 801569c:	f080 0001 	eor.w	r0, r0, #1
 80156a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	602b      	str	r3, [r5, #0]
 80156a8:	e7ef      	b.n	801568a <ucdr_deserialize_endian_uint32_t+0xbe>
 80156aa:	68a2      	ldr	r2, [r4, #8]
 80156ac:	6923      	ldr	r3, [r4, #16]
 80156ae:	7da0      	ldrb	r0, [r4, #22]
 80156b0:	f884 9015 	strb.w	r9, [r4, #21]
 80156b4:	eba2 0208 	sub.w	r2, r2, r8
 80156b8:	eba3 0308 	sub.w	r3, r3, r8
 80156bc:	60a2      	str	r2, [r4, #8]
 80156be:	6123      	str	r3, [r4, #16]
 80156c0:	f080 0001 	eor.w	r0, r0, #1
 80156c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156c8:	68a3      	ldr	r3, [r4, #8]
 80156ca:	789b      	ldrb	r3, [r3, #2]
 80156cc:	706b      	strb	r3, [r5, #1]
 80156ce:	1cab      	adds	r3, r5, #2
 80156d0:	68a2      	ldr	r2, [r4, #8]
 80156d2:	7852      	ldrb	r2, [r2, #1]
 80156d4:	f803 2b01 	strb.w	r2, [r3], #1
 80156d8:	68a2      	ldr	r2, [r4, #8]
 80156da:	7812      	ldrb	r2, [r2, #0]
 80156dc:	701a      	strb	r2, [r3, #0]
 80156de:	e7b2      	b.n	8015646 <ucdr_deserialize_endian_uint32_t+0x7a>
 80156e0:	4639      	mov	r1, r7
 80156e2:	4642      	mov	r2, r8
 80156e4:	4628      	mov	r0, r5
 80156e6:	f002 fd66 	bl	80181b6 <memcpy>
 80156ea:	68a1      	ldr	r1, [r4, #8]
 80156ec:	4652      	mov	r2, sl
 80156ee:	eb05 0008 	add.w	r0, r5, r8
 80156f2:	f002 fd60 	bl	80181b6 <memcpy>
 80156f6:	e7a6      	b.n	8015646 <ucdr_deserialize_endian_uint32_t+0x7a>

080156f8 <ucdr_serialize_uint64_t>:
 80156f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156fc:	2108      	movs	r1, #8
 80156fe:	b082      	sub	sp, #8
 8015700:	4604      	mov	r4, r0
 8015702:	e9cd 2300 	strd	r2, r3, [sp]
 8015706:	f7fa f9e9 	bl	800fadc <ucdr_buffer_alignment>
 801570a:	4601      	mov	r1, r0
 801570c:	4620      	mov	r0, r4
 801570e:	7d67      	ldrb	r7, [r4, #21]
 8015710:	f7fa fa28 	bl	800fb64 <ucdr_advance_buffer>
 8015714:	4620      	mov	r0, r4
 8015716:	2108      	movs	r1, #8
 8015718:	f7fa f982 	bl	800fa20 <ucdr_check_buffer_available_for>
 801571c:	2800      	cmp	r0, #0
 801571e:	d14e      	bne.n	80157be <ucdr_serialize_uint64_t+0xc6>
 8015720:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8015724:	42b5      	cmp	r5, r6
 8015726:	d945      	bls.n	80157b4 <ucdr_serialize_uint64_t+0xbc>
 8015728:	6923      	ldr	r3, [r4, #16]
 801572a:	60a5      	str	r5, [r4, #8]
 801572c:	1bad      	subs	r5, r5, r6
 801572e:	442b      	add	r3, r5
 8015730:	f1c5 0808 	rsb	r8, r5, #8
 8015734:	6123      	str	r3, [r4, #16]
 8015736:	4641      	mov	r1, r8
 8015738:	4620      	mov	r0, r4
 801573a:	f7fa f97d 	bl	800fa38 <ucdr_check_final_buffer_behavior>
 801573e:	2800      	cmp	r0, #0
 8015740:	d074      	beq.n	801582c <ucdr_serialize_uint64_t+0x134>
 8015742:	7d23      	ldrb	r3, [r4, #20]
 8015744:	2b01      	cmp	r3, #1
 8015746:	f000 809b 	beq.w	8015880 <ucdr_serialize_uint64_t+0x188>
 801574a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801574e:	7033      	strb	r3, [r6, #0]
 8015750:	2d00      	cmp	r5, #0
 8015752:	d078      	beq.n	8015846 <ucdr_serialize_uint64_t+0x14e>
 8015754:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8015758:	7073      	strb	r3, [r6, #1]
 801575a:	2d01      	cmp	r5, #1
 801575c:	d077      	beq.n	801584e <ucdr_serialize_uint64_t+0x156>
 801575e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8015762:	70b3      	strb	r3, [r6, #2]
 8015764:	2d02      	cmp	r5, #2
 8015766:	d076      	beq.n	8015856 <ucdr_serialize_uint64_t+0x15e>
 8015768:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801576c:	70f3      	strb	r3, [r6, #3]
 801576e:	2d03      	cmp	r5, #3
 8015770:	d075      	beq.n	801585e <ucdr_serialize_uint64_t+0x166>
 8015772:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8015776:	7133      	strb	r3, [r6, #4]
 8015778:	2d04      	cmp	r5, #4
 801577a:	d074      	beq.n	8015866 <ucdr_serialize_uint64_t+0x16e>
 801577c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8015780:	7173      	strb	r3, [r6, #5]
 8015782:	2d05      	cmp	r5, #5
 8015784:	d073      	beq.n	801586e <ucdr_serialize_uint64_t+0x176>
 8015786:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801578a:	71b3      	strb	r3, [r6, #6]
 801578c:	2d06      	cmp	r5, #6
 801578e:	d072      	beq.n	8015876 <ucdr_serialize_uint64_t+0x17e>
 8015790:	f89d 3000 	ldrb.w	r3, [sp]
 8015794:	71f3      	strb	r3, [r6, #7]
 8015796:	6923      	ldr	r3, [r4, #16]
 8015798:	68a2      	ldr	r2, [r4, #8]
 801579a:	7da0      	ldrb	r0, [r4, #22]
 801579c:	3308      	adds	r3, #8
 801579e:	1b5d      	subs	r5, r3, r5
 80157a0:	4442      	add	r2, r8
 80157a2:	2308      	movs	r3, #8
 80157a4:	f080 0001 	eor.w	r0, r0, #1
 80157a8:	6125      	str	r5, [r4, #16]
 80157aa:	60a2      	str	r2, [r4, #8]
 80157ac:	7563      	strb	r3, [r4, #21]
 80157ae:	b002      	add	sp, #8
 80157b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157b4:	2108      	movs	r1, #8
 80157b6:	4620      	mov	r0, r4
 80157b8:	f7fa f93e 	bl	800fa38 <ucdr_check_final_buffer_behavior>
 80157bc:	b350      	cbz	r0, 8015814 <ucdr_serialize_uint64_t+0x11c>
 80157be:	7d23      	ldrb	r3, [r4, #20]
 80157c0:	2b01      	cmp	r3, #1
 80157c2:	d02d      	beq.n	8015820 <ucdr_serialize_uint64_t+0x128>
 80157c4:	68a3      	ldr	r3, [r4, #8]
 80157c6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80157ca:	701a      	strb	r2, [r3, #0]
 80157cc:	68a3      	ldr	r3, [r4, #8]
 80157ce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80157d2:	705a      	strb	r2, [r3, #1]
 80157d4:	68a3      	ldr	r3, [r4, #8]
 80157d6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80157da:	709a      	strb	r2, [r3, #2]
 80157dc:	68a3      	ldr	r3, [r4, #8]
 80157de:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80157e2:	70da      	strb	r2, [r3, #3]
 80157e4:	68a3      	ldr	r3, [r4, #8]
 80157e6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80157ea:	711a      	strb	r2, [r3, #4]
 80157ec:	68a3      	ldr	r3, [r4, #8]
 80157ee:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80157f2:	715a      	strb	r2, [r3, #5]
 80157f4:	68a3      	ldr	r3, [r4, #8]
 80157f6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80157fa:	719a      	strb	r2, [r3, #6]
 80157fc:	68a3      	ldr	r3, [r4, #8]
 80157fe:	f89d 2000 	ldrb.w	r2, [sp]
 8015802:	71da      	strb	r2, [r3, #7]
 8015804:	68a2      	ldr	r2, [r4, #8]
 8015806:	6923      	ldr	r3, [r4, #16]
 8015808:	3208      	adds	r2, #8
 801580a:	3308      	adds	r3, #8
 801580c:	2108      	movs	r1, #8
 801580e:	60a2      	str	r2, [r4, #8]
 8015810:	6123      	str	r3, [r4, #16]
 8015812:	7561      	strb	r1, [r4, #21]
 8015814:	7da0      	ldrb	r0, [r4, #22]
 8015816:	f080 0001 	eor.w	r0, r0, #1
 801581a:	b002      	add	sp, #8
 801581c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015820:	466b      	mov	r3, sp
 8015822:	cb03      	ldmia	r3!, {r0, r1}
 8015824:	68a3      	ldr	r3, [r4, #8]
 8015826:	6018      	str	r0, [r3, #0]
 8015828:	6059      	str	r1, [r3, #4]
 801582a:	e7eb      	b.n	8015804 <ucdr_serialize_uint64_t+0x10c>
 801582c:	68a2      	ldr	r2, [r4, #8]
 801582e:	6923      	ldr	r3, [r4, #16]
 8015830:	7da0      	ldrb	r0, [r4, #22]
 8015832:	7567      	strb	r7, [r4, #21]
 8015834:	1b52      	subs	r2, r2, r5
 8015836:	f080 0001 	eor.w	r0, r0, #1
 801583a:	1b5d      	subs	r5, r3, r5
 801583c:	60a2      	str	r2, [r4, #8]
 801583e:	6125      	str	r5, [r4, #16]
 8015840:	b002      	add	sp, #8
 8015842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015846:	68a3      	ldr	r3, [r4, #8]
 8015848:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801584c:	701a      	strb	r2, [r3, #0]
 801584e:	68a3      	ldr	r3, [r4, #8]
 8015850:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8015854:	701a      	strb	r2, [r3, #0]
 8015856:	68a3      	ldr	r3, [r4, #8]
 8015858:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801585c:	701a      	strb	r2, [r3, #0]
 801585e:	68a3      	ldr	r3, [r4, #8]
 8015860:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8015864:	701a      	strb	r2, [r3, #0]
 8015866:	68a3      	ldr	r3, [r4, #8]
 8015868:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801586c:	701a      	strb	r2, [r3, #0]
 801586e:	68a3      	ldr	r3, [r4, #8]
 8015870:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8015874:	701a      	strb	r2, [r3, #0]
 8015876:	68a3      	ldr	r3, [r4, #8]
 8015878:	f89d 2000 	ldrb.w	r2, [sp]
 801587c:	701a      	strb	r2, [r3, #0]
 801587e:	e78a      	b.n	8015796 <ucdr_serialize_uint64_t+0x9e>
 8015880:	4630      	mov	r0, r6
 8015882:	466e      	mov	r6, sp
 8015884:	4631      	mov	r1, r6
 8015886:	462a      	mov	r2, r5
 8015888:	f002 fc95 	bl	80181b6 <memcpy>
 801588c:	68a0      	ldr	r0, [r4, #8]
 801588e:	4642      	mov	r2, r8
 8015890:	1971      	adds	r1, r6, r5
 8015892:	f002 fc90 	bl	80181b6 <memcpy>
 8015896:	e77e      	b.n	8015796 <ucdr_serialize_uint64_t+0x9e>

08015898 <ucdr_serialize_int16_t>:
 8015898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801589c:	b082      	sub	sp, #8
 801589e:	460b      	mov	r3, r1
 80158a0:	2102      	movs	r1, #2
 80158a2:	4604      	mov	r4, r0
 80158a4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80158a8:	f7fa f918 	bl	800fadc <ucdr_buffer_alignment>
 80158ac:	4601      	mov	r1, r0
 80158ae:	4620      	mov	r0, r4
 80158b0:	7d67      	ldrb	r7, [r4, #21]
 80158b2:	f7fa f957 	bl	800fb64 <ucdr_advance_buffer>
 80158b6:	4620      	mov	r0, r4
 80158b8:	2102      	movs	r1, #2
 80158ba:	f7fa f8b1 	bl	800fa20 <ucdr_check_buffer_available_for>
 80158be:	bb78      	cbnz	r0, 8015920 <ucdr_serialize_int16_t+0x88>
 80158c0:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 80158c4:	42b5      	cmp	r5, r6
 80158c6:	d926      	bls.n	8015916 <ucdr_serialize_int16_t+0x7e>
 80158c8:	6922      	ldr	r2, [r4, #16]
 80158ca:	60a5      	str	r5, [r4, #8]
 80158cc:	1bad      	subs	r5, r5, r6
 80158ce:	442a      	add	r2, r5
 80158d0:	f1c5 0802 	rsb	r8, r5, #2
 80158d4:	6122      	str	r2, [r4, #16]
 80158d6:	4641      	mov	r1, r8
 80158d8:	4620      	mov	r0, r4
 80158da:	f7fa f8ad 	bl	800fa38 <ucdr_check_final_buffer_behavior>
 80158de:	2800      	cmp	r0, #0
 80158e0:	d03b      	beq.n	801595a <ucdr_serialize_int16_t+0xc2>
 80158e2:	7d23      	ldrb	r3, [r4, #20]
 80158e4:	2b01      	cmp	r3, #1
 80158e6:	d04a      	beq.n	801597e <ucdr_serialize_int16_t+0xe6>
 80158e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80158ec:	7033      	strb	r3, [r6, #0]
 80158ee:	2d00      	cmp	r5, #0
 80158f0:	d040      	beq.n	8015974 <ucdr_serialize_int16_t+0xdc>
 80158f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80158f6:	7073      	strb	r3, [r6, #1]
 80158f8:	6923      	ldr	r3, [r4, #16]
 80158fa:	68a2      	ldr	r2, [r4, #8]
 80158fc:	7da0      	ldrb	r0, [r4, #22]
 80158fe:	3302      	adds	r3, #2
 8015900:	1b5b      	subs	r3, r3, r5
 8015902:	4442      	add	r2, r8
 8015904:	2102      	movs	r1, #2
 8015906:	f080 0001 	eor.w	r0, r0, #1
 801590a:	6123      	str	r3, [r4, #16]
 801590c:	60a2      	str	r2, [r4, #8]
 801590e:	7561      	strb	r1, [r4, #21]
 8015910:	b002      	add	sp, #8
 8015912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015916:	2102      	movs	r1, #2
 8015918:	4620      	mov	r0, r4
 801591a:	f7fa f88d 	bl	800fa38 <ucdr_check_final_buffer_behavior>
 801591e:	b190      	cbz	r0, 8015946 <ucdr_serialize_int16_t+0xae>
 8015920:	7d23      	ldrb	r3, [r4, #20]
 8015922:	2b01      	cmp	r3, #1
 8015924:	68a3      	ldr	r3, [r4, #8]
 8015926:	d014      	beq.n	8015952 <ucdr_serialize_int16_t+0xba>
 8015928:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801592c:	701a      	strb	r2, [r3, #0]
 801592e:	68a3      	ldr	r3, [r4, #8]
 8015930:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8015934:	705a      	strb	r2, [r3, #1]
 8015936:	68a2      	ldr	r2, [r4, #8]
 8015938:	6923      	ldr	r3, [r4, #16]
 801593a:	3202      	adds	r2, #2
 801593c:	3302      	adds	r3, #2
 801593e:	2102      	movs	r1, #2
 8015940:	60a2      	str	r2, [r4, #8]
 8015942:	6123      	str	r3, [r4, #16]
 8015944:	7561      	strb	r1, [r4, #21]
 8015946:	7da0      	ldrb	r0, [r4, #22]
 8015948:	f080 0001 	eor.w	r0, r0, #1
 801594c:	b002      	add	sp, #8
 801594e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015952:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8015956:	801a      	strh	r2, [r3, #0]
 8015958:	e7ed      	b.n	8015936 <ucdr_serialize_int16_t+0x9e>
 801595a:	68a2      	ldr	r2, [r4, #8]
 801595c:	6923      	ldr	r3, [r4, #16]
 801595e:	7da0      	ldrb	r0, [r4, #22]
 8015960:	7567      	strb	r7, [r4, #21]
 8015962:	1b52      	subs	r2, r2, r5
 8015964:	1b5b      	subs	r3, r3, r5
 8015966:	f080 0001 	eor.w	r0, r0, #1
 801596a:	60a2      	str	r2, [r4, #8]
 801596c:	6123      	str	r3, [r4, #16]
 801596e:	b002      	add	sp, #8
 8015970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015974:	68a3      	ldr	r3, [r4, #8]
 8015976:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801597a:	701a      	strb	r2, [r3, #0]
 801597c:	e7bc      	b.n	80158f8 <ucdr_serialize_int16_t+0x60>
 801597e:	4630      	mov	r0, r6
 8015980:	f10d 0606 	add.w	r6, sp, #6
 8015984:	4631      	mov	r1, r6
 8015986:	462a      	mov	r2, r5
 8015988:	f002 fc15 	bl	80181b6 <memcpy>
 801598c:	68a0      	ldr	r0, [r4, #8]
 801598e:	4642      	mov	r2, r8
 8015990:	1971      	adds	r1, r6, r5
 8015992:	f002 fc10 	bl	80181b6 <memcpy>
 8015996:	e7af      	b.n	80158f8 <ucdr_serialize_int16_t+0x60>

08015998 <ucdr_deserialize_int16_t>:
 8015998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801599c:	460d      	mov	r5, r1
 801599e:	2102      	movs	r1, #2
 80159a0:	4604      	mov	r4, r0
 80159a2:	f7fa f89b 	bl	800fadc <ucdr_buffer_alignment>
 80159a6:	4601      	mov	r1, r0
 80159a8:	4620      	mov	r0, r4
 80159aa:	f894 8015 	ldrb.w	r8, [r4, #21]
 80159ae:	f7fa f8d9 	bl	800fb64 <ucdr_advance_buffer>
 80159b2:	4620      	mov	r0, r4
 80159b4:	2102      	movs	r1, #2
 80159b6:	f7fa f833 	bl	800fa20 <ucdr_check_buffer_available_for>
 80159ba:	bb60      	cbnz	r0, 8015a16 <ucdr_deserialize_int16_t+0x7e>
 80159bc:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80159c0:	42be      	cmp	r6, r7
 80159c2:	d923      	bls.n	8015a0c <ucdr_deserialize_int16_t+0x74>
 80159c4:	6922      	ldr	r2, [r4, #16]
 80159c6:	60a6      	str	r6, [r4, #8]
 80159c8:	1bf6      	subs	r6, r6, r7
 80159ca:	4432      	add	r2, r6
 80159cc:	f1c6 0902 	rsb	r9, r6, #2
 80159d0:	6122      	str	r2, [r4, #16]
 80159d2:	4649      	mov	r1, r9
 80159d4:	4620      	mov	r0, r4
 80159d6:	f7fa f82f 	bl	800fa38 <ucdr_check_final_buffer_behavior>
 80159da:	2800      	cmp	r0, #0
 80159dc:	d034      	beq.n	8015a48 <ucdr_deserialize_int16_t+0xb0>
 80159de:	7d23      	ldrb	r3, [r4, #20]
 80159e0:	2b01      	cmp	r3, #1
 80159e2:	d042      	beq.n	8015a6a <ucdr_deserialize_int16_t+0xd2>
 80159e4:	787b      	ldrb	r3, [r7, #1]
 80159e6:	702b      	strb	r3, [r5, #0]
 80159e8:	2e00      	cmp	r6, #0
 80159ea:	d03a      	beq.n	8015a62 <ucdr_deserialize_int16_t+0xca>
 80159ec:	783b      	ldrb	r3, [r7, #0]
 80159ee:	706b      	strb	r3, [r5, #1]
 80159f0:	6923      	ldr	r3, [r4, #16]
 80159f2:	68a2      	ldr	r2, [r4, #8]
 80159f4:	7da0      	ldrb	r0, [r4, #22]
 80159f6:	2102      	movs	r1, #2
 80159f8:	3302      	adds	r3, #2
 80159fa:	1b9b      	subs	r3, r3, r6
 80159fc:	444a      	add	r2, r9
 80159fe:	7561      	strb	r1, [r4, #21]
 8015a00:	6123      	str	r3, [r4, #16]
 8015a02:	60a2      	str	r2, [r4, #8]
 8015a04:	f080 0001 	eor.w	r0, r0, #1
 8015a08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a0c:	2102      	movs	r1, #2
 8015a0e:	4620      	mov	r0, r4
 8015a10:	f7fa f812 	bl	800fa38 <ucdr_check_final_buffer_behavior>
 8015a14:	b180      	cbz	r0, 8015a38 <ucdr_deserialize_int16_t+0xa0>
 8015a16:	7d23      	ldrb	r3, [r4, #20]
 8015a18:	2b01      	cmp	r3, #1
 8015a1a:	68a3      	ldr	r3, [r4, #8]
 8015a1c:	d011      	beq.n	8015a42 <ucdr_deserialize_int16_t+0xaa>
 8015a1e:	785b      	ldrb	r3, [r3, #1]
 8015a20:	702b      	strb	r3, [r5, #0]
 8015a22:	68a3      	ldr	r3, [r4, #8]
 8015a24:	781b      	ldrb	r3, [r3, #0]
 8015a26:	706b      	strb	r3, [r5, #1]
 8015a28:	68a2      	ldr	r2, [r4, #8]
 8015a2a:	6923      	ldr	r3, [r4, #16]
 8015a2c:	3202      	adds	r2, #2
 8015a2e:	3302      	adds	r3, #2
 8015a30:	2102      	movs	r1, #2
 8015a32:	60a2      	str	r2, [r4, #8]
 8015a34:	6123      	str	r3, [r4, #16]
 8015a36:	7561      	strb	r1, [r4, #21]
 8015a38:	7da0      	ldrb	r0, [r4, #22]
 8015a3a:	f080 0001 	eor.w	r0, r0, #1
 8015a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a42:	881b      	ldrh	r3, [r3, #0]
 8015a44:	802b      	strh	r3, [r5, #0]
 8015a46:	e7ef      	b.n	8015a28 <ucdr_deserialize_int16_t+0x90>
 8015a48:	68a2      	ldr	r2, [r4, #8]
 8015a4a:	6923      	ldr	r3, [r4, #16]
 8015a4c:	7da0      	ldrb	r0, [r4, #22]
 8015a4e:	f884 8015 	strb.w	r8, [r4, #21]
 8015a52:	1b92      	subs	r2, r2, r6
 8015a54:	1b9b      	subs	r3, r3, r6
 8015a56:	60a2      	str	r2, [r4, #8]
 8015a58:	6123      	str	r3, [r4, #16]
 8015a5a:	f080 0001 	eor.w	r0, r0, #1
 8015a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a62:	68a3      	ldr	r3, [r4, #8]
 8015a64:	781b      	ldrb	r3, [r3, #0]
 8015a66:	706b      	strb	r3, [r5, #1]
 8015a68:	e7c2      	b.n	80159f0 <ucdr_deserialize_int16_t+0x58>
 8015a6a:	4639      	mov	r1, r7
 8015a6c:	4632      	mov	r2, r6
 8015a6e:	4628      	mov	r0, r5
 8015a70:	f002 fba1 	bl	80181b6 <memcpy>
 8015a74:	68a1      	ldr	r1, [r4, #8]
 8015a76:	464a      	mov	r2, r9
 8015a78:	19a8      	adds	r0, r5, r6
 8015a7a:	f002 fb9c 	bl	80181b6 <memcpy>
 8015a7e:	e7b7      	b.n	80159f0 <ucdr_deserialize_int16_t+0x58>

08015a80 <ucdr_deserialize_int32_t>:
 8015a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a84:	460d      	mov	r5, r1
 8015a86:	2104      	movs	r1, #4
 8015a88:	4604      	mov	r4, r0
 8015a8a:	f7fa f827 	bl	800fadc <ucdr_buffer_alignment>
 8015a8e:	4601      	mov	r1, r0
 8015a90:	4620      	mov	r0, r4
 8015a92:	f894 8015 	ldrb.w	r8, [r4, #21]
 8015a96:	f7fa f865 	bl	800fb64 <ucdr_advance_buffer>
 8015a9a:	4620      	mov	r0, r4
 8015a9c:	2104      	movs	r1, #4
 8015a9e:	f7f9 ffbf 	bl	800fa20 <ucdr_check_buffer_available_for>
 8015aa2:	2800      	cmp	r0, #0
 8015aa4:	d138      	bne.n	8015b18 <ucdr_deserialize_int32_t+0x98>
 8015aa6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8015aaa:	42b7      	cmp	r7, r6
 8015aac:	d92f      	bls.n	8015b0e <ucdr_deserialize_int32_t+0x8e>
 8015aae:	6922      	ldr	r2, [r4, #16]
 8015ab0:	60a7      	str	r7, [r4, #8]
 8015ab2:	1bbf      	subs	r7, r7, r6
 8015ab4:	443a      	add	r2, r7
 8015ab6:	f1c7 0904 	rsb	r9, r7, #4
 8015aba:	6122      	str	r2, [r4, #16]
 8015abc:	4649      	mov	r1, r9
 8015abe:	4620      	mov	r0, r4
 8015ac0:	f7f9 ffba 	bl	800fa38 <ucdr_check_final_buffer_behavior>
 8015ac4:	2800      	cmp	r0, #0
 8015ac6:	d046      	beq.n	8015b56 <ucdr_deserialize_int32_t+0xd6>
 8015ac8:	7d23      	ldrb	r3, [r4, #20]
 8015aca:	2b01      	cmp	r3, #1
 8015acc:	d05c      	beq.n	8015b88 <ucdr_deserialize_int32_t+0x108>
 8015ace:	78f3      	ldrb	r3, [r6, #3]
 8015ad0:	702b      	strb	r3, [r5, #0]
 8015ad2:	2f00      	cmp	r7, #0
 8015ad4:	d04c      	beq.n	8015b70 <ucdr_deserialize_int32_t+0xf0>
 8015ad6:	78b3      	ldrb	r3, [r6, #2]
 8015ad8:	706b      	strb	r3, [r5, #1]
 8015ada:	2f01      	cmp	r7, #1
 8015adc:	f105 0302 	add.w	r3, r5, #2
 8015ae0:	d04a      	beq.n	8015b78 <ucdr_deserialize_int32_t+0xf8>
 8015ae2:	7873      	ldrb	r3, [r6, #1]
 8015ae4:	70ab      	strb	r3, [r5, #2]
 8015ae6:	2f02      	cmp	r7, #2
 8015ae8:	f105 0303 	add.w	r3, r5, #3
 8015aec:	d048      	beq.n	8015b80 <ucdr_deserialize_int32_t+0x100>
 8015aee:	7833      	ldrb	r3, [r6, #0]
 8015af0:	70eb      	strb	r3, [r5, #3]
 8015af2:	6923      	ldr	r3, [r4, #16]
 8015af4:	68a2      	ldr	r2, [r4, #8]
 8015af6:	7da0      	ldrb	r0, [r4, #22]
 8015af8:	2104      	movs	r1, #4
 8015afa:	3304      	adds	r3, #4
 8015afc:	1bdb      	subs	r3, r3, r7
 8015afe:	444a      	add	r2, r9
 8015b00:	7561      	strb	r1, [r4, #21]
 8015b02:	6123      	str	r3, [r4, #16]
 8015b04:	60a2      	str	r2, [r4, #8]
 8015b06:	f080 0001 	eor.w	r0, r0, #1
 8015b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b0e:	2104      	movs	r1, #4
 8015b10:	4620      	mov	r0, r4
 8015b12:	f7f9 ff91 	bl	800fa38 <ucdr_check_final_buffer_behavior>
 8015b16:	b1b0      	cbz	r0, 8015b46 <ucdr_deserialize_int32_t+0xc6>
 8015b18:	7d23      	ldrb	r3, [r4, #20]
 8015b1a:	2b01      	cmp	r3, #1
 8015b1c:	68a3      	ldr	r3, [r4, #8]
 8015b1e:	d017      	beq.n	8015b50 <ucdr_deserialize_int32_t+0xd0>
 8015b20:	78db      	ldrb	r3, [r3, #3]
 8015b22:	702b      	strb	r3, [r5, #0]
 8015b24:	68a3      	ldr	r3, [r4, #8]
 8015b26:	789b      	ldrb	r3, [r3, #2]
 8015b28:	706b      	strb	r3, [r5, #1]
 8015b2a:	68a3      	ldr	r3, [r4, #8]
 8015b2c:	785b      	ldrb	r3, [r3, #1]
 8015b2e:	70ab      	strb	r3, [r5, #2]
 8015b30:	68a3      	ldr	r3, [r4, #8]
 8015b32:	781b      	ldrb	r3, [r3, #0]
 8015b34:	70eb      	strb	r3, [r5, #3]
 8015b36:	68a2      	ldr	r2, [r4, #8]
 8015b38:	6923      	ldr	r3, [r4, #16]
 8015b3a:	3204      	adds	r2, #4
 8015b3c:	3304      	adds	r3, #4
 8015b3e:	2104      	movs	r1, #4
 8015b40:	60a2      	str	r2, [r4, #8]
 8015b42:	6123      	str	r3, [r4, #16]
 8015b44:	7561      	strb	r1, [r4, #21]
 8015b46:	7da0      	ldrb	r0, [r4, #22]
 8015b48:	f080 0001 	eor.w	r0, r0, #1
 8015b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	602b      	str	r3, [r5, #0]
 8015b54:	e7ef      	b.n	8015b36 <ucdr_deserialize_int32_t+0xb6>
 8015b56:	68a2      	ldr	r2, [r4, #8]
 8015b58:	6923      	ldr	r3, [r4, #16]
 8015b5a:	7da0      	ldrb	r0, [r4, #22]
 8015b5c:	f884 8015 	strb.w	r8, [r4, #21]
 8015b60:	1bd2      	subs	r2, r2, r7
 8015b62:	1bdb      	subs	r3, r3, r7
 8015b64:	60a2      	str	r2, [r4, #8]
 8015b66:	6123      	str	r3, [r4, #16]
 8015b68:	f080 0001 	eor.w	r0, r0, #1
 8015b6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b70:	68a3      	ldr	r3, [r4, #8]
 8015b72:	789b      	ldrb	r3, [r3, #2]
 8015b74:	706b      	strb	r3, [r5, #1]
 8015b76:	1cab      	adds	r3, r5, #2
 8015b78:	68a2      	ldr	r2, [r4, #8]
 8015b7a:	7852      	ldrb	r2, [r2, #1]
 8015b7c:	f803 2b01 	strb.w	r2, [r3], #1
 8015b80:	68a2      	ldr	r2, [r4, #8]
 8015b82:	7812      	ldrb	r2, [r2, #0]
 8015b84:	701a      	strb	r2, [r3, #0]
 8015b86:	e7b4      	b.n	8015af2 <ucdr_deserialize_int32_t+0x72>
 8015b88:	4631      	mov	r1, r6
 8015b8a:	463a      	mov	r2, r7
 8015b8c:	4628      	mov	r0, r5
 8015b8e:	f002 fb12 	bl	80181b6 <memcpy>
 8015b92:	68a1      	ldr	r1, [r4, #8]
 8015b94:	464a      	mov	r2, r9
 8015b96:	19e8      	adds	r0, r5, r7
 8015b98:	f002 fb0d 	bl	80181b6 <memcpy>
 8015b9c:	e7a9      	b.n	8015af2 <ucdr_deserialize_int32_t+0x72>
 8015b9e:	bf00      	nop

08015ba0 <ucdr_serialize_string>:
 8015ba0:	b510      	push	{r4, lr}
 8015ba2:	b082      	sub	sp, #8
 8015ba4:	4604      	mov	r4, r0
 8015ba6:	4608      	mov	r0, r1
 8015ba8:	9101      	str	r1, [sp, #4]
 8015baa:	f7ea fb23 	bl	80001f4 <strlen>
 8015bae:	9901      	ldr	r1, [sp, #4]
 8015bb0:	4602      	mov	r2, r0
 8015bb2:	3201      	adds	r2, #1
 8015bb4:	4620      	mov	r0, r4
 8015bb6:	b002      	add	sp, #8
 8015bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015bbc:	f7f9 bff2 	b.w	800fba4 <ucdr_serialize_sequence_char>

08015bc0 <ucdr_deserialize_string>:
 8015bc0:	b500      	push	{lr}
 8015bc2:	b083      	sub	sp, #12
 8015bc4:	ab01      	add	r3, sp, #4
 8015bc6:	f7f9 ffff 	bl	800fbc8 <ucdr_deserialize_sequence_char>
 8015bca:	b003      	add	sp, #12
 8015bcc:	f85d fb04 	ldr.w	pc, [sp], #4

08015bd0 <get_custom_error>:
 8015bd0:	4b01      	ldr	r3, [pc, #4]	; (8015bd8 <get_custom_error+0x8>)
 8015bd2:	7818      	ldrb	r0, [r3, #0]
 8015bd4:	4770      	bx	lr
 8015bd6:	bf00      	nop
 8015bd8:	2000a058 	.word	0x2000a058

08015bdc <recv_custom_msg>:
 8015bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015be0:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8015be4:	b089      	sub	sp, #36	; 0x24
 8015be6:	2600      	movs	r6, #0
 8015be8:	4604      	mov	r4, r0
 8015bea:	9305      	str	r3, [sp, #20]
 8015bec:	468a      	mov	sl, r1
 8015bee:	4693      	mov	fp, r2
 8015bf0:	f88d 601e 	strb.w	r6, [sp, #30]
 8015bf4:	b325      	cbz	r5, 8015c40 <recv_custom_msg+0x64>
 8015bf6:	f200 2902 	addw	r9, r0, #514	; 0x202
 8015bfa:	f10d 081f 	add.w	r8, sp, #31
 8015bfe:	af05      	add	r7, sp, #20
 8015c00:	f10d 061e 	add.w	r6, sp, #30
 8015c04:	f44f 7500 	mov.w	r5, #512	; 0x200
 8015c08:	e002      	b.n	8015c10 <recv_custom_msg+0x34>
 8015c0a:	9b05      	ldr	r3, [sp, #20]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	dd0f      	ble.n	8015c30 <recv_custom_msg+0x54>
 8015c10:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8015c14:	e9cd 5600 	strd	r5, r6, [sp]
 8015c18:	4623      	mov	r3, r4
 8015c1a:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8015c1e:	4622      	mov	r2, r4
 8015c20:	4648      	mov	r0, r9
 8015c22:	f000 ffc9 	bl	8016bb8 <uxr_read_framed_msg>
 8015c26:	2800      	cmp	r0, #0
 8015c28:	d0ef      	beq.n	8015c0a <recv_custom_msg+0x2e>
 8015c2a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8015c2e:	b1b3      	cbz	r3, 8015c5e <recv_custom_msg+0x82>
 8015c30:	4b0f      	ldr	r3, [pc, #60]	; (8015c70 <recv_custom_msg+0x94>)
 8015c32:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8015c36:	701a      	strb	r2, [r3, #0]
 8015c38:	2000      	movs	r0, #0
 8015c3a:	b009      	add	sp, #36	; 0x24
 8015c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c40:	f10d 021f 	add.w	r2, sp, #31
 8015c44:	9200      	str	r2, [sp, #0]
 8015c46:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8015c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015c4e:	4601      	mov	r1, r0
 8015c50:	47a8      	blx	r5
 8015c52:	2800      	cmp	r0, #0
 8015c54:	d0ec      	beq.n	8015c30 <recv_custom_msg+0x54>
 8015c56:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d1e8      	bne.n	8015c30 <recv_custom_msg+0x54>
 8015c5e:	f8cb 0000 	str.w	r0, [fp]
 8015c62:	2001      	movs	r0, #1
 8015c64:	f8ca 4000 	str.w	r4, [sl]
 8015c68:	b009      	add	sp, #36	; 0x24
 8015c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c6e:	bf00      	nop
 8015c70:	2000a058 	.word	0x2000a058

08015c74 <send_custom_msg>:
 8015c74:	b570      	push	{r4, r5, r6, lr}
 8015c76:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8015c7a:	b086      	sub	sp, #24
 8015c7c:	4616      	mov	r6, r2
 8015c7e:	b975      	cbnz	r5, 8015c9e <send_custom_msg+0x2a>
 8015c80:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 8015c84:	f10d 0317 	add.w	r3, sp, #23
 8015c88:	47a0      	blx	r4
 8015c8a:	b108      	cbz	r0, 8015c90 <send_custom_msg+0x1c>
 8015c8c:	42b0      	cmp	r0, r6
 8015c8e:	d015      	beq.n	8015cbc <send_custom_msg+0x48>
 8015c90:	4b0c      	ldr	r3, [pc, #48]	; (8015cc4 <send_custom_msg+0x50>)
 8015c92:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8015c96:	701a      	strb	r2, [r3, #0]
 8015c98:	2000      	movs	r0, #0
 8015c9a:	b006      	add	sp, #24
 8015c9c:	bd70      	pop	{r4, r5, r6, pc}
 8015c9e:	460b      	mov	r3, r1
 8015ca0:	2200      	movs	r2, #0
 8015ca2:	f10d 0117 	add.w	r1, sp, #23
 8015ca6:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8015caa:	9600      	str	r6, [sp, #0]
 8015cac:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8015cb0:	4602      	mov	r2, r0
 8015cb2:	f200 2002 	addw	r0, r0, #514	; 0x202
 8015cb6:	f000 fd97 	bl	80167e8 <uxr_write_framed_msg>
 8015cba:	e7e6      	b.n	8015c8a <send_custom_msg+0x16>
 8015cbc:	2001      	movs	r0, #1
 8015cbe:	b006      	add	sp, #24
 8015cc0:	bd70      	pop	{r4, r5, r6, pc}
 8015cc2:	bf00      	nop
 8015cc4:	2000a058 	.word	0x2000a058

08015cc8 <uxr_set_custom_transport_callbacks>:
 8015cc8:	b430      	push	{r4, r5}
 8015cca:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 8015cce:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8015cd2:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 8015cd6:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8015cda:	bc30      	pop	{r4, r5}
 8015cdc:	4770      	bx	lr
 8015cde:	bf00      	nop

08015ce0 <uxr_init_custom_transport>:
 8015ce0:	b538      	push	{r3, r4, r5, lr}
 8015ce2:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8015ce6:	b303      	cbz	r3, 8015d2a <uxr_init_custom_transport+0x4a>
 8015ce8:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8015cec:	4604      	mov	r4, r0
 8015cee:	b1e2      	cbz	r2, 8015d2a <uxr_init_custom_transport+0x4a>
 8015cf0:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8015cf4:	b1ca      	cbz	r2, 8015d2a <uxr_init_custom_transport+0x4a>
 8015cf6:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8015cfa:	b1b2      	cbz	r2, 8015d2a <uxr_init_custom_transport+0x4a>
 8015cfc:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8015d00:	4798      	blx	r3
 8015d02:	4605      	mov	r5, r0
 8015d04:	b188      	cbz	r0, 8015d2a <uxr_init_custom_transport+0x4a>
 8015d06:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8015d0a:	b98b      	cbnz	r3, 8015d30 <uxr_init_custom_transport+0x50>
 8015d0c:	480b      	ldr	r0, [pc, #44]	; (8015d3c <uxr_init_custom_transport+0x5c>)
 8015d0e:	490c      	ldr	r1, [pc, #48]	; (8015d40 <uxr_init_custom_transport+0x60>)
 8015d10:	4a0c      	ldr	r2, [pc, #48]	; (8015d44 <uxr_init_custom_transport+0x64>)
 8015d12:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 8015d16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015d1a:	e9c4 019f 	strd	r0, r1, [r4, #636]	; 0x27c
 8015d1e:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8015d22:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8015d26:	4628      	mov	r0, r5
 8015d28:	bd38      	pop	{r3, r4, r5, pc}
 8015d2a:	2500      	movs	r5, #0
 8015d2c:	4628      	mov	r0, r5
 8015d2e:	bd38      	pop	{r3, r4, r5, pc}
 8015d30:	2100      	movs	r1, #0
 8015d32:	f204 2002 	addw	r0, r4, #514	; 0x202
 8015d36:	f000 fd51 	bl	80167dc <uxr_init_framing_io>
 8015d3a:	e7e7      	b.n	8015d0c <uxr_init_custom_transport+0x2c>
 8015d3c:	08015c75 	.word	0x08015c75
 8015d40:	08015bdd 	.word	0x08015bdd
 8015d44:	08015bd1 	.word	0x08015bd1

08015d48 <uxr_close_custom_transport>:
 8015d48:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8015d4c:	4718      	bx	r3
 8015d4e:	bf00      	nop

08015d50 <uxr_init_input_best_effort_stream>:
 8015d50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015d54:	8003      	strh	r3, [r0, #0]
 8015d56:	4770      	bx	lr

08015d58 <uxr_reset_input_best_effort_stream>:
 8015d58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015d5c:	8003      	strh	r3, [r0, #0]
 8015d5e:	4770      	bx	lr

08015d60 <uxr_receive_best_effort_message>:
 8015d60:	b538      	push	{r3, r4, r5, lr}
 8015d62:	4604      	mov	r4, r0
 8015d64:	8800      	ldrh	r0, [r0, #0]
 8015d66:	460d      	mov	r5, r1
 8015d68:	f000 fd20 	bl	80167ac <uxr_seq_num_cmp>
 8015d6c:	4603      	mov	r3, r0
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8015d74:	bfb8      	it	lt
 8015d76:	8025      	strhlt	r5, [r4, #0]
 8015d78:	bd38      	pop	{r3, r4, r5, pc}
 8015d7a:	bf00      	nop

08015d7c <on_full_input_buffer>:
 8015d7c:	b570      	push	{r4, r5, r6, lr}
 8015d7e:	6802      	ldr	r2, [r0, #0]
 8015d80:	460d      	mov	r5, r1
 8015d82:	6809      	ldr	r1, [r1, #0]
 8015d84:	686c      	ldr	r4, [r5, #4]
 8015d86:	1a53      	subs	r3, r2, r1
 8015d88:	4606      	mov	r6, r0
 8015d8a:	8928      	ldrh	r0, [r5, #8]
 8015d8c:	fbb4 f4f0 	udiv	r4, r4, r0
 8015d90:	fbb3 f3f4 	udiv	r3, r3, r4
 8015d94:	3301      	adds	r3, #1
 8015d96:	b29b      	uxth	r3, r3
 8015d98:	fbb3 f2f0 	udiv	r2, r3, r0
 8015d9c:	fb00 3312 	mls	r3, r0, r2, r3
 8015da0:	b29b      	uxth	r3, r3
 8015da2:	fb04 f403 	mul.w	r4, r4, r3
 8015da6:	1d23      	adds	r3, r4, #4
 8015da8:	440b      	add	r3, r1
 8015daa:	7d28      	ldrb	r0, [r5, #20]
 8015dac:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8015db0:	b110      	cbz	r0, 8015db8 <on_full_input_buffer+0x3c>
 8015db2:	2000      	movs	r0, #0
 8015db4:	f843 0c04 	str.w	r0, [r3, #-4]
 8015db8:	2a03      	cmp	r2, #3
 8015dba:	d801      	bhi.n	8015dc0 <on_full_input_buffer+0x44>
 8015dbc:	2001      	movs	r0, #1
 8015dbe:	bd70      	pop	{r4, r5, r6, pc}
 8015dc0:	3408      	adds	r4, #8
 8015dc2:	6933      	ldr	r3, [r6, #16]
 8015dc4:	4421      	add	r1, r4
 8015dc6:	4630      	mov	r0, r6
 8015dc8:	3a04      	subs	r2, #4
 8015dca:	f7f9 fe73 	bl	800fab4 <ucdr_init_buffer_origin>
 8015dce:	4630      	mov	r0, r6
 8015dd0:	4902      	ldr	r1, [pc, #8]	; (8015ddc <on_full_input_buffer+0x60>)
 8015dd2:	462a      	mov	r2, r5
 8015dd4:	f7f9 fe4c 	bl	800fa70 <ucdr_set_on_full_buffer_callback>
 8015dd8:	2000      	movs	r0, #0
 8015dda:	bd70      	pop	{r4, r5, r6, pc}
 8015ddc:	08015d7d 	.word	0x08015d7d

08015de0 <uxr_init_input_reliable_stream>:
 8015de0:	b470      	push	{r4, r5, r6}
 8015de2:	9c03      	ldr	r4, [sp, #12]
 8015de4:	6001      	str	r1, [r0, #0]
 8015de6:	2600      	movs	r6, #0
 8015de8:	8103      	strh	r3, [r0, #8]
 8015dea:	6042      	str	r2, [r0, #4]
 8015dec:	6104      	str	r4, [r0, #16]
 8015dee:	7506      	strb	r6, [r0, #20]
 8015df0:	b1ab      	cbz	r3, 8015e1e <uxr_init_input_reliable_stream+0x3e>
 8015df2:	600e      	str	r6, [r1, #0]
 8015df4:	8901      	ldrh	r1, [r0, #8]
 8015df6:	2901      	cmp	r1, #1
 8015df8:	d911      	bls.n	8015e1e <uxr_init_input_reliable_stream+0x3e>
 8015dfa:	2201      	movs	r2, #1
 8015dfc:	e9d0 5400 	ldrd	r5, r4, [r0]
 8015e00:	fbb2 f3f1 	udiv	r3, r2, r1
 8015e04:	fb01 2313 	mls	r3, r1, r3, r2
 8015e08:	b29b      	uxth	r3, r3
 8015e0a:	fbb4 f1f1 	udiv	r1, r4, r1
 8015e0e:	fb03 f301 	mul.w	r3, r3, r1
 8015e12:	3201      	adds	r2, #1
 8015e14:	50ee      	str	r6, [r5, r3]
 8015e16:	8901      	ldrh	r1, [r0, #8]
 8015e18:	b292      	uxth	r2, r2
 8015e1a:	4291      	cmp	r1, r2
 8015e1c:	d8ee      	bhi.n	8015dfc <uxr_init_input_reliable_stream+0x1c>
 8015e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e22:	bc70      	pop	{r4, r5, r6}
 8015e24:	60c3      	str	r3, [r0, #12]
 8015e26:	4770      	bx	lr

08015e28 <uxr_reset_input_reliable_stream>:
 8015e28:	8902      	ldrh	r2, [r0, #8]
 8015e2a:	b1ca      	cbz	r2, 8015e60 <uxr_reset_input_reliable_stream+0x38>
 8015e2c:	b470      	push	{r4, r5, r6}
 8015e2e:	2400      	movs	r4, #0
 8015e30:	4621      	mov	r1, r4
 8015e32:	4626      	mov	r6, r4
 8015e34:	fbb1 f3f2 	udiv	r3, r1, r2
 8015e38:	fb02 1313 	mls	r3, r2, r3, r1
 8015e3c:	e9d0 5100 	ldrd	r5, r1, [r0]
 8015e40:	b29b      	uxth	r3, r3
 8015e42:	fbb1 f2f2 	udiv	r2, r1, r2
 8015e46:	fb03 f302 	mul.w	r3, r3, r2
 8015e4a:	3401      	adds	r4, #1
 8015e4c:	50ee      	str	r6, [r5, r3]
 8015e4e:	8902      	ldrh	r2, [r0, #8]
 8015e50:	b2a1      	uxth	r1, r4
 8015e52:	428a      	cmp	r2, r1
 8015e54:	d8ee      	bhi.n	8015e34 <uxr_reset_input_reliable_stream+0xc>
 8015e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e5a:	bc70      	pop	{r4, r5, r6}
 8015e5c:	60c3      	str	r3, [r0, #12]
 8015e5e:	4770      	bx	lr
 8015e60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e64:	60c3      	str	r3, [r0, #12]
 8015e66:	4770      	bx	lr

08015e68 <uxr_receive_reliable_message>:
 8015e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e6c:	4604      	mov	r4, r0
 8015e6e:	460d      	mov	r5, r1
 8015e70:	8901      	ldrh	r1, [r0, #8]
 8015e72:	8980      	ldrh	r0, [r0, #12]
 8015e74:	4690      	mov	r8, r2
 8015e76:	461f      	mov	r7, r3
 8015e78:	f000 fc90 	bl	801679c <uxr_seq_num_add>
 8015e7c:	4629      	mov	r1, r5
 8015e7e:	4606      	mov	r6, r0
 8015e80:	89a0      	ldrh	r0, [r4, #12]
 8015e82:	f000 fc93 	bl	80167ac <uxr_seq_num_cmp>
 8015e86:	2800      	cmp	r0, #0
 8015e88:	db0a      	blt.n	8015ea0 <uxr_receive_reliable_message+0x38>
 8015e8a:	2600      	movs	r6, #0
 8015e8c:	89e0      	ldrh	r0, [r4, #14]
 8015e8e:	4629      	mov	r1, r5
 8015e90:	f000 fc8c 	bl	80167ac <uxr_seq_num_cmp>
 8015e94:	2800      	cmp	r0, #0
 8015e96:	bfb8      	it	lt
 8015e98:	81e5      	strhlt	r5, [r4, #14]
 8015e9a:	4630      	mov	r0, r6
 8015e9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ea0:	4630      	mov	r0, r6
 8015ea2:	4629      	mov	r1, r5
 8015ea4:	f000 fc82 	bl	80167ac <uxr_seq_num_cmp>
 8015ea8:	2800      	cmp	r0, #0
 8015eaa:	dbee      	blt.n	8015e8a <uxr_receive_reliable_message+0x22>
 8015eac:	6923      	ldr	r3, [r4, #16]
 8015eae:	4640      	mov	r0, r8
 8015eb0:	4798      	blx	r3
 8015eb2:	2101      	movs	r1, #1
 8015eb4:	4681      	mov	r9, r0
 8015eb6:	89a0      	ldrh	r0, [r4, #12]
 8015eb8:	f000 fc70 	bl	801679c <uxr_seq_num_add>
 8015ebc:	f1b9 0f00 	cmp.w	r9, #0
 8015ec0:	d101      	bne.n	8015ec6 <uxr_receive_reliable_message+0x5e>
 8015ec2:	4285      	cmp	r5, r0
 8015ec4:	d049      	beq.n	8015f5a <uxr_receive_reliable_message+0xf2>
 8015ec6:	8921      	ldrh	r1, [r4, #8]
 8015ec8:	fbb5 f3f1 	udiv	r3, r5, r1
 8015ecc:	fb01 5313 	mls	r3, r1, r3, r5
 8015ed0:	b29b      	uxth	r3, r3
 8015ed2:	6862      	ldr	r2, [r4, #4]
 8015ed4:	6820      	ldr	r0, [r4, #0]
 8015ed6:	fbb2 f2f1 	udiv	r2, r2, r1
 8015eda:	fb03 f302 	mul.w	r3, r3, r2
 8015ede:	3304      	adds	r3, #4
 8015ee0:	4418      	add	r0, r3
 8015ee2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d1cf      	bne.n	8015e8a <uxr_receive_reliable_message+0x22>
 8015eea:	4641      	mov	r1, r8
 8015eec:	463a      	mov	r2, r7
 8015eee:	f002 f962 	bl	80181b6 <memcpy>
 8015ef2:	8921      	ldrh	r1, [r4, #8]
 8015ef4:	fbb5 f3f1 	udiv	r3, r5, r1
 8015ef8:	fb01 5313 	mls	r3, r1, r3, r5
 8015efc:	b29b      	uxth	r3, r3
 8015efe:	6862      	ldr	r2, [r4, #4]
 8015f00:	fbb2 f2f1 	udiv	r2, r2, r1
 8015f04:	6821      	ldr	r1, [r4, #0]
 8015f06:	fb03 f302 	mul.w	r3, r3, r2
 8015f0a:	2201      	movs	r2, #1
 8015f0c:	50cf      	str	r7, [r1, r3]
 8015f0e:	9b08      	ldr	r3, [sp, #32]
 8015f10:	701a      	strb	r2, [r3, #0]
 8015f12:	f1b9 0f00 	cmp.w	r9, #0
 8015f16:	d0b8      	beq.n	8015e8a <uxr_receive_reliable_message+0x22>
 8015f18:	89a6      	ldrh	r6, [r4, #12]
 8015f1a:	e001      	b.n	8015f20 <uxr_receive_reliable_message+0xb8>
 8015f1c:	2801      	cmp	r0, #1
 8015f1e:	d1b4      	bne.n	8015e8a <uxr_receive_reliable_message+0x22>
 8015f20:	4630      	mov	r0, r6
 8015f22:	2101      	movs	r1, #1
 8015f24:	f000 fc3a 	bl	801679c <uxr_seq_num_add>
 8015f28:	8921      	ldrh	r1, [r4, #8]
 8015f2a:	fbb0 f3f1 	udiv	r3, r0, r1
 8015f2e:	fb01 0313 	mls	r3, r1, r3, r0
 8015f32:	b29b      	uxth	r3, r3
 8015f34:	6862      	ldr	r2, [r4, #4]
 8015f36:	fbb2 f2f1 	udiv	r2, r2, r1
 8015f3a:	4606      	mov	r6, r0
 8015f3c:	fb03 f302 	mul.w	r3, r3, r2
 8015f40:	6820      	ldr	r0, [r4, #0]
 8015f42:	3304      	adds	r3, #4
 8015f44:	4418      	add	r0, r3
 8015f46:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d09d      	beq.n	8015e8a <uxr_receive_reliable_message+0x22>
 8015f4e:	6923      	ldr	r3, [r4, #16]
 8015f50:	4798      	blx	r3
 8015f52:	2802      	cmp	r0, #2
 8015f54:	d1e2      	bne.n	8015f1c <uxr_receive_reliable_message+0xb4>
 8015f56:	2601      	movs	r6, #1
 8015f58:	e798      	b.n	8015e8c <uxr_receive_reliable_message+0x24>
 8015f5a:	9b08      	ldr	r3, [sp, #32]
 8015f5c:	81a5      	strh	r5, [r4, #12]
 8015f5e:	2601      	movs	r6, #1
 8015f60:	f883 9000 	strb.w	r9, [r3]
 8015f64:	e792      	b.n	8015e8c <uxr_receive_reliable_message+0x24>
 8015f66:	bf00      	nop

08015f68 <uxr_next_input_reliable_buffer_available>:
 8015f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f6c:	4604      	mov	r4, r0
 8015f6e:	460e      	mov	r6, r1
 8015f70:	8980      	ldrh	r0, [r0, #12]
 8015f72:	2101      	movs	r1, #1
 8015f74:	4617      	mov	r7, r2
 8015f76:	f000 fc11 	bl	801679c <uxr_seq_num_add>
 8015f7a:	8921      	ldrh	r1, [r4, #8]
 8015f7c:	fbb0 f3f1 	udiv	r3, r0, r1
 8015f80:	fb01 0313 	mls	r3, r1, r3, r0
 8015f84:	b29b      	uxth	r3, r3
 8015f86:	6862      	ldr	r2, [r4, #4]
 8015f88:	fbb2 f2f1 	udiv	r2, r2, r1
 8015f8c:	fb03 f302 	mul.w	r3, r3, r2
 8015f90:	6822      	ldr	r2, [r4, #0]
 8015f92:	3304      	adds	r3, #4
 8015f94:	eb02 0803 	add.w	r8, r2, r3
 8015f98:	f858 9c04 	ldr.w	r9, [r8, #-4]
 8015f9c:	f1b9 0f00 	cmp.w	r9, #0
 8015fa0:	d025      	beq.n	8015fee <uxr_next_input_reliable_buffer_available+0x86>
 8015fa2:	6923      	ldr	r3, [r4, #16]
 8015fa4:	4605      	mov	r5, r0
 8015fa6:	4640      	mov	r0, r8
 8015fa8:	4798      	blx	r3
 8015faa:	4682      	mov	sl, r0
 8015fac:	b310      	cbz	r0, 8015ff4 <uxr_next_input_reliable_buffer_available+0x8c>
 8015fae:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8015fb2:	e005      	b.n	8015fc0 <uxr_next_input_reliable_buffer_available+0x58>
 8015fb4:	6923      	ldr	r3, [r4, #16]
 8015fb6:	4798      	blx	r3
 8015fb8:	2802      	cmp	r0, #2
 8015fba:	d032      	beq.n	8016022 <uxr_next_input_reliable_buffer_available+0xba>
 8015fbc:	2801      	cmp	r0, #1
 8015fbe:	d116      	bne.n	8015fee <uxr_next_input_reliable_buffer_available+0x86>
 8015fc0:	4650      	mov	r0, sl
 8015fc2:	2101      	movs	r1, #1
 8015fc4:	f000 fbea 	bl	801679c <uxr_seq_num_add>
 8015fc8:	8921      	ldrh	r1, [r4, #8]
 8015fca:	fbb0 f3f1 	udiv	r3, r0, r1
 8015fce:	fb01 0313 	mls	r3, r1, r3, r0
 8015fd2:	b29b      	uxth	r3, r3
 8015fd4:	6862      	ldr	r2, [r4, #4]
 8015fd6:	fbb2 f2f1 	udiv	r2, r2, r1
 8015fda:	4682      	mov	sl, r0
 8015fdc:	fb03 f302 	mul.w	r3, r3, r2
 8015fe0:	6820      	ldr	r0, [r4, #0]
 8015fe2:	3304      	adds	r3, #4
 8015fe4:	4418      	add	r0, r3
 8015fe6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d1e2      	bne.n	8015fb4 <uxr_next_input_reliable_buffer_available+0x4c>
 8015fee:	2000      	movs	r0, #0
 8015ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ff4:	464a      	mov	r2, r9
 8015ff6:	4641      	mov	r1, r8
 8015ff8:	4630      	mov	r0, r6
 8015ffa:	f7f9 fd63 	bl	800fac4 <ucdr_init_buffer>
 8015ffe:	8921      	ldrh	r1, [r4, #8]
 8016000:	fbb5 f3f1 	udiv	r3, r5, r1
 8016004:	fb01 5313 	mls	r3, r1, r3, r5
 8016008:	b29b      	uxth	r3, r3
 801600a:	6862      	ldr	r2, [r4, #4]
 801600c:	fbb2 f2f1 	udiv	r2, r2, r1
 8016010:	6821      	ldr	r1, [r4, #0]
 8016012:	fb03 f302 	mul.w	r3, r3, r2
 8016016:	2001      	movs	r0, #1
 8016018:	f841 a003 	str.w	sl, [r1, r3]
 801601c:	81a5      	strh	r5, [r4, #12]
 801601e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016022:	8922      	ldrh	r2, [r4, #8]
 8016024:	fbb5 f0f2 	udiv	r0, r5, r2
 8016028:	fb02 5510 	mls	r5, r2, r0, r5
 801602c:	b2ad      	uxth	r5, r5
 801602e:	6863      	ldr	r3, [r4, #4]
 8016030:	fbb3 f3f2 	udiv	r3, r3, r2
 8016034:	fb05 f503 	mul.w	r5, r5, r3
 8016038:	6823      	ldr	r3, [r4, #0]
 801603a:	2000      	movs	r0, #0
 801603c:	5158      	str	r0, [r3, r5]
 801603e:	eba9 0207 	sub.w	r2, r9, r7
 8016042:	eb08 0107 	add.w	r1, r8, r7
 8016046:	4630      	mov	r0, r6
 8016048:	f7f9 fd3c 	bl	800fac4 <ucdr_init_buffer>
 801604c:	4630      	mov	r0, r6
 801604e:	4904      	ldr	r1, [pc, #16]	; (8016060 <uxr_next_input_reliable_buffer_available+0xf8>)
 8016050:	4622      	mov	r2, r4
 8016052:	f7f9 fd0d 	bl	800fa70 <ucdr_set_on_full_buffer_callback>
 8016056:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801605a:	2001      	movs	r0, #1
 801605c:	e7c8      	b.n	8015ff0 <uxr_next_input_reliable_buffer_available+0x88>
 801605e:	bf00      	nop
 8016060:	08015d7d 	.word	0x08015d7d

08016064 <uxr_process_heartbeat>:
 8016064:	b538      	push	{r3, r4, r5, lr}
 8016066:	4611      	mov	r1, r2
 8016068:	4604      	mov	r4, r0
 801606a:	89c0      	ldrh	r0, [r0, #14]
 801606c:	4615      	mov	r5, r2
 801606e:	f000 fb9d 	bl	80167ac <uxr_seq_num_cmp>
 8016072:	2800      	cmp	r0, #0
 8016074:	bfb8      	it	lt
 8016076:	81e5      	strhlt	r5, [r4, #14]
 8016078:	bd38      	pop	{r3, r4, r5, pc}
 801607a:	bf00      	nop

0801607c <uxr_compute_acknack>:
 801607c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016080:	8903      	ldrh	r3, [r0, #8]
 8016082:	8986      	ldrh	r6, [r0, #12]
 8016084:	4604      	mov	r4, r0
 8016086:	460d      	mov	r5, r1
 8016088:	b1d3      	cbz	r3, 80160c0 <uxr_compute_acknack+0x44>
 801608a:	4630      	mov	r0, r6
 801608c:	2701      	movs	r7, #1
 801608e:	e003      	b.n	8016098 <uxr_compute_acknack+0x1c>
 8016090:	4567      	cmp	r7, ip
 8016092:	d215      	bcs.n	80160c0 <uxr_compute_acknack+0x44>
 8016094:	89a0      	ldrh	r0, [r4, #12]
 8016096:	3701      	adds	r7, #1
 8016098:	b2b9      	uxth	r1, r7
 801609a:	f000 fb7f 	bl	801679c <uxr_seq_num_add>
 801609e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80160a2:	fbb0 f2fc 	udiv	r2, r0, ip
 80160a6:	e9d4 1300 	ldrd	r1, r3, [r4]
 80160aa:	fb0c 0212 	mls	r2, ip, r2, r0
 80160ae:	b292      	uxth	r2, r2
 80160b0:	fbb3 f3fc 	udiv	r3, r3, ip
 80160b4:	fb02 1303 	mla	r3, r2, r3, r1
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d1e8      	bne.n	8016090 <uxr_compute_acknack+0x14>
 80160be:	4606      	mov	r6, r0
 80160c0:	802e      	strh	r6, [r5, #0]
 80160c2:	4630      	mov	r0, r6
 80160c4:	2101      	movs	r1, #1
 80160c6:	89e6      	ldrh	r6, [r4, #14]
 80160c8:	f000 fb6c 	bl	80167a4 <uxr_seq_num_sub>
 80160cc:	4601      	mov	r1, r0
 80160ce:	4630      	mov	r0, r6
 80160d0:	f000 fb68 	bl	80167a4 <uxr_seq_num_sub>
 80160d4:	4606      	mov	r6, r0
 80160d6:	b318      	cbz	r0, 8016120 <uxr_compute_acknack+0xa4>
 80160d8:	f04f 0900 	mov.w	r9, #0
 80160dc:	464f      	mov	r7, r9
 80160de:	f04f 0801 	mov.w	r8, #1
 80160e2:	fa1f f189 	uxth.w	r1, r9
 80160e6:	8828      	ldrh	r0, [r5, #0]
 80160e8:	f000 fb58 	bl	801679c <uxr_seq_num_add>
 80160ec:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80160f0:	6822      	ldr	r2, [r4, #0]
 80160f2:	fbb0 f1fc 	udiv	r1, r0, ip
 80160f6:	fb01 011c 	mls	r1, r1, ip, r0
 80160fa:	b289      	uxth	r1, r1
 80160fc:	6863      	ldr	r3, [r4, #4]
 80160fe:	fbb3 f3fc 	udiv	r3, r3, ip
 8016102:	fb01 2303 	mla	r3, r1, r3, r2
 8016106:	fa08 f209 	lsl.w	r2, r8, r9
 801610a:	681b      	ldr	r3, [r3, #0]
 801610c:	f109 0901 	add.w	r9, r9, #1
 8016110:	b90b      	cbnz	r3, 8016116 <uxr_compute_acknack+0x9a>
 8016112:	4317      	orrs	r7, r2
 8016114:	b2bf      	uxth	r7, r7
 8016116:	454e      	cmp	r6, r9
 8016118:	d1e3      	bne.n	80160e2 <uxr_compute_acknack+0x66>
 801611a:	4638      	mov	r0, r7
 801611c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016120:	4607      	mov	r7, r0
 8016122:	4638      	mov	r0, r7
 8016124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016128 <uxr_init_output_best_effort_stream>:
 8016128:	b410      	push	{r4}
 801612a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 801612e:	81c4      	strh	r4, [r0, #14]
 8016130:	e9c0 1300 	strd	r1, r3, [r0]
 8016134:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016138:	7303      	strb	r3, [r0, #12]
 801613a:	6082      	str	r2, [r0, #8]
 801613c:	4770      	bx	lr
 801613e:	bf00      	nop

08016140 <uxr_reset_output_best_effort_stream>:
 8016140:	7b02      	ldrb	r2, [r0, #12]
 8016142:	6042      	str	r2, [r0, #4]
 8016144:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016148:	81c3      	strh	r3, [r0, #14]
 801614a:	4770      	bx	lr

0801614c <uxr_prepare_best_effort_buffer_to_write>:
 801614c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801614e:	4604      	mov	r4, r0
 8016150:	b083      	sub	sp, #12
 8016152:	6840      	ldr	r0, [r0, #4]
 8016154:	460d      	mov	r5, r1
 8016156:	4616      	mov	r6, r2
 8016158:	f7fb fab8 	bl	80116cc <uxr_submessage_padding>
 801615c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8016160:	4410      	add	r0, r2
 8016162:	1942      	adds	r2, r0, r5
 8016164:	4293      	cmp	r3, r2
 8016166:	bf2c      	ite	cs
 8016168:	2701      	movcs	r7, #1
 801616a:	2700      	movcc	r7, #0
 801616c:	d202      	bcs.n	8016174 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801616e:	4638      	mov	r0, r7
 8016170:	b003      	add	sp, #12
 8016172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016174:	9000      	str	r0, [sp, #0]
 8016176:	6821      	ldr	r1, [r4, #0]
 8016178:	4630      	mov	r0, r6
 801617a:	2300      	movs	r3, #0
 801617c:	f7f9 fc90 	bl	800faa0 <ucdr_init_buffer_origin_offset>
 8016180:	6861      	ldr	r1, [r4, #4]
 8016182:	4638      	mov	r0, r7
 8016184:	4429      	add	r1, r5
 8016186:	6061      	str	r1, [r4, #4]
 8016188:	b003      	add	sp, #12
 801618a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801618c <uxr_prepare_best_effort_buffer_to_send>:
 801618c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016190:	6845      	ldr	r5, [r0, #4]
 8016192:	4604      	mov	r4, r0
 8016194:	7b00      	ldrb	r0, [r0, #12]
 8016196:	4285      	cmp	r5, r0
 8016198:	bf8c      	ite	hi
 801619a:	2701      	movhi	r7, #1
 801619c:	2700      	movls	r7, #0
 801619e:	d802      	bhi.n	80161a6 <uxr_prepare_best_effort_buffer_to_send+0x1a>
 80161a0:	4638      	mov	r0, r7
 80161a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161a6:	4688      	mov	r8, r1
 80161a8:	89e0      	ldrh	r0, [r4, #14]
 80161aa:	2101      	movs	r1, #1
 80161ac:	4615      	mov	r5, r2
 80161ae:	461e      	mov	r6, r3
 80161b0:	f000 faf4 	bl	801679c <uxr_seq_num_add>
 80161b4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80161b8:	81e0      	strh	r0, [r4, #14]
 80161ba:	8030      	strh	r0, [r6, #0]
 80161bc:	f8c8 2000 	str.w	r2, [r8]
 80161c0:	602b      	str	r3, [r5, #0]
 80161c2:	7b23      	ldrb	r3, [r4, #12]
 80161c4:	6063      	str	r3, [r4, #4]
 80161c6:	4638      	mov	r0, r7
 80161c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080161cc <on_full_output_buffer>:
 80161cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161ce:	6802      	ldr	r2, [r0, #0]
 80161d0:	460d      	mov	r5, r1
 80161d2:	6809      	ldr	r1, [r1, #0]
 80161d4:	892f      	ldrh	r7, [r5, #8]
 80161d6:	686c      	ldr	r4, [r5, #4]
 80161d8:	fbb4 f4f7 	udiv	r4, r4, r7
 80161dc:	1a53      	subs	r3, r2, r1
 80161de:	fbb3 f3f4 	udiv	r3, r3, r4
 80161e2:	3301      	adds	r3, #1
 80161e4:	b29b      	uxth	r3, r3
 80161e6:	fbb3 f2f7 	udiv	r2, r3, r7
 80161ea:	fb07 3312 	mls	r3, r7, r2, r3
 80161ee:	b29b      	uxth	r3, r3
 80161f0:	fb04 f403 	mul.w	r4, r4, r3
 80161f4:	7b2f      	ldrb	r7, [r5, #12]
 80161f6:	590a      	ldr	r2, [r1, r4]
 80161f8:	6903      	ldr	r3, [r0, #16]
 80161fa:	443c      	add	r4, r7
 80161fc:	3408      	adds	r4, #8
 80161fe:	1bd2      	subs	r2, r2, r7
 8016200:	4606      	mov	r6, r0
 8016202:	4421      	add	r1, r4
 8016204:	3a04      	subs	r2, #4
 8016206:	f7f9 fc55 	bl	800fab4 <ucdr_init_buffer_origin>
 801620a:	4630      	mov	r0, r6
 801620c:	4902      	ldr	r1, [pc, #8]	; (8016218 <on_full_output_buffer+0x4c>)
 801620e:	462a      	mov	r2, r5
 8016210:	f7f9 fc2e 	bl	800fa70 <ucdr_set_on_full_buffer_callback>
 8016214:	2000      	movs	r0, #0
 8016216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016218:	080161cd 	.word	0x080161cd

0801621c <uxr_init_output_reliable_stream>:
 801621c:	b430      	push	{r4, r5}
 801621e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8016222:	6001      	str	r1, [r0, #0]
 8016224:	8103      	strh	r3, [r0, #8]
 8016226:	6042      	str	r2, [r0, #4]
 8016228:	7304      	strb	r4, [r0, #12]
 801622a:	b1b3      	cbz	r3, 801625a <uxr_init_output_reliable_stream+0x3e>
 801622c:	600c      	str	r4, [r1, #0]
 801622e:	8901      	ldrh	r1, [r0, #8]
 8016230:	2901      	cmp	r1, #1
 8016232:	d912      	bls.n	801625a <uxr_init_output_reliable_stream+0x3e>
 8016234:	2201      	movs	r2, #1
 8016236:	e9d0 5400 	ldrd	r5, r4, [r0]
 801623a:	fbb2 f3f1 	udiv	r3, r2, r1
 801623e:	fb01 2313 	mls	r3, r1, r3, r2
 8016242:	b29b      	uxth	r3, r3
 8016244:	fbb4 f1f1 	udiv	r1, r4, r1
 8016248:	fb03 f301 	mul.w	r3, r3, r1
 801624c:	7b01      	ldrb	r1, [r0, #12]
 801624e:	50e9      	str	r1, [r5, r3]
 8016250:	3201      	adds	r2, #1
 8016252:	8901      	ldrh	r1, [r0, #8]
 8016254:	b292      	uxth	r2, r2
 8016256:	4291      	cmp	r1, r2
 8016258:	d8ed      	bhi.n	8016236 <uxr_init_output_reliable_stream+0x1a>
 801625a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801625e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016262:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8016266:	4b05      	ldr	r3, [pc, #20]	; (801627c <uxr_init_output_reliable_stream+0x60>)
 8016268:	f8c0 300e 	str.w	r3, [r0, #14]
 801626c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016270:	2300      	movs	r3, #0
 8016272:	bc30      	pop	{r4, r5}
 8016274:	8242      	strh	r2, [r0, #18]
 8016276:	8403      	strh	r3, [r0, #32]
 8016278:	4770      	bx	lr
 801627a:	bf00      	nop
 801627c:	ffff0000 	.word	0xffff0000

08016280 <uxr_reset_output_reliable_stream>:
 8016280:	8902      	ldrh	r2, [r0, #8]
 8016282:	b430      	push	{r4, r5}
 8016284:	b19a      	cbz	r2, 80162ae <uxr_reset_output_reliable_stream+0x2e>
 8016286:	2400      	movs	r4, #0
 8016288:	4621      	mov	r1, r4
 801628a:	fbb1 f3f2 	udiv	r3, r1, r2
 801628e:	fb02 1313 	mls	r3, r2, r3, r1
 8016292:	e9d0 5100 	ldrd	r5, r1, [r0]
 8016296:	b29b      	uxth	r3, r3
 8016298:	fbb1 f2f2 	udiv	r2, r1, r2
 801629c:	fb03 f302 	mul.w	r3, r3, r2
 80162a0:	7b02      	ldrb	r2, [r0, #12]
 80162a2:	50ea      	str	r2, [r5, r3]
 80162a4:	3401      	adds	r4, #1
 80162a6:	8902      	ldrh	r2, [r0, #8]
 80162a8:	b2a1      	uxth	r1, r4
 80162aa:	428a      	cmp	r2, r1
 80162ac:	d8ed      	bhi.n	801628a <uxr_reset_output_reliable_stream+0xa>
 80162ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80162b2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80162b6:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80162ba:	4b05      	ldr	r3, [pc, #20]	; (80162d0 <uxr_reset_output_reliable_stream+0x50>)
 80162bc:	f8c0 300e 	str.w	r3, [r0, #14]
 80162c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80162c4:	2300      	movs	r3, #0
 80162c6:	bc30      	pop	{r4, r5}
 80162c8:	8242      	strh	r2, [r0, #18]
 80162ca:	8403      	strh	r3, [r0, #32]
 80162cc:	4770      	bx	lr
 80162ce:	bf00      	nop
 80162d0:	ffff0000 	.word	0xffff0000

080162d4 <uxr_prepare_reliable_buffer_to_write>:
 80162d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162d8:	89c5      	ldrh	r5, [r0, #14]
 80162da:	4604      	mov	r4, r0
 80162dc:	8900      	ldrh	r0, [r0, #8]
 80162de:	fbb5 f3f0 	udiv	r3, r5, r0
 80162e2:	4688      	mov	r8, r1
 80162e4:	e9d4 1600 	ldrd	r1, r6, [r4]
 80162e8:	fb00 5313 	mls	r3, r0, r3, r5
 80162ec:	b29b      	uxth	r3, r3
 80162ee:	fbb6 f0f0 	udiv	r0, r6, r0
 80162f2:	fb00 f303 	mul.w	r3, r0, r3
 80162f6:	3304      	adds	r3, #4
 80162f8:	18cb      	adds	r3, r1, r3
 80162fa:	b091      	sub	sp, #68	; 0x44
 80162fc:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8016300:	9004      	str	r0, [sp, #16]
 8016302:	2104      	movs	r1, #4
 8016304:	4630      	mov	r0, r6
 8016306:	9305      	str	r3, [sp, #20]
 8016308:	9206      	str	r2, [sp, #24]
 801630a:	f7f9 fbdf 	bl	800facc <ucdr_alignment>
 801630e:	1833      	adds	r3, r6, r0
 8016310:	9804      	ldr	r0, [sp, #16]
 8016312:	9303      	str	r3, [sp, #12]
 8016314:	eb03 0708 	add.w	r7, r3, r8
 8016318:	1f06      	subs	r6, r0, #4
 801631a:	42b7      	cmp	r7, r6
 801631c:	f240 80dc 	bls.w	80164d8 <uxr_prepare_reliable_buffer_to_write+0x204>
 8016320:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8016324:	eb0e 0308 	add.w	r3, lr, r8
 8016328:	42b3      	cmp	r3, r6
 801632a:	f240 80c2 	bls.w	80164b2 <uxr_prepare_reliable_buffer_to_write+0x1de>
 801632e:	9b03      	ldr	r3, [sp, #12]
 8016330:	3304      	adds	r3, #4
 8016332:	42b3      	cmp	r3, r6
 8016334:	f080 8112 	bcs.w	801655c <uxr_prepare_reliable_buffer_to_write+0x288>
 8016338:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801633c:	f1bc 0f00 	cmp.w	ip, #0
 8016340:	f000 8127 	beq.w	8016592 <uxr_prepare_reliable_buffer_to_write+0x2be>
 8016344:	e9d4 7300 	ldrd	r7, r3, [r4]
 8016348:	2100      	movs	r1, #0
 801634a:	4608      	mov	r0, r1
 801634c:	460a      	mov	r2, r1
 801634e:	fbb3 f9fc 	udiv	r9, r3, ip
 8016352:	fbb2 f3fc 	udiv	r3, r2, ip
 8016356:	fb0c 2313 	mls	r3, ip, r3, r2
 801635a:	b29b      	uxth	r3, r3
 801635c:	fb09 7303 	mla	r3, r9, r3, r7
 8016360:	3101      	adds	r1, #1
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	459e      	cmp	lr, r3
 8016366:	bf08      	it	eq
 8016368:	3001      	addeq	r0, #1
 801636a:	b28a      	uxth	r2, r1
 801636c:	bf08      	it	eq
 801636e:	b280      	uxtheq	r0, r0
 8016370:	4562      	cmp	r2, ip
 8016372:	d3ee      	bcc.n	8016352 <uxr_prepare_reliable_buffer_to_write+0x7e>
 8016374:	9b03      	ldr	r3, [sp, #12]
 8016376:	1f37      	subs	r7, r6, #4
 8016378:	b2bf      	uxth	r7, r7
 801637a:	eba7 0903 	sub.w	r9, r7, r3
 801637e:	fa1f f989 	uxth.w	r9, r9
 8016382:	eba7 070e 	sub.w	r7, r7, lr
 8016386:	b2bf      	uxth	r7, r7
 8016388:	eba8 0809 	sub.w	r8, r8, r9
 801638c:	fbb8 faf7 	udiv	sl, r8, r7
 8016390:	fb07 831a 	mls	r3, r7, sl, r8
 8016394:	9707      	str	r7, [sp, #28]
 8016396:	2b00      	cmp	r3, #0
 8016398:	f040 80bf 	bne.w	801651a <uxr_prepare_reliable_buffer_to_write+0x246>
 801639c:	fa1f fa8a 	uxth.w	sl, sl
 80163a0:	4582      	cmp	sl, r0
 80163a2:	f200 8095 	bhi.w	80164d0 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 80163a6:	f10d 0b20 	add.w	fp, sp, #32
 80163aa:	f1ba 0f00 	cmp.w	sl, #0
 80163ae:	d03a      	beq.n	8016426 <uxr_prepare_reliable_buffer_to_write+0x152>
 80163b0:	f04f 0800 	mov.w	r8, #0
 80163b4:	f10d 0b20 	add.w	fp, sp, #32
 80163b8:	e000      	b.n	80163bc <uxr_prepare_reliable_buffer_to_write+0xe8>
 80163ba:	46b9      	mov	r9, r7
 80163bc:	e9d4 3200 	ldrd	r3, r2, [r4]
 80163c0:	fbb5 f1fc 	udiv	r1, r5, ip
 80163c4:	fb0c 5111 	mls	r1, ip, r1, r5
 80163c8:	b289      	uxth	r1, r1
 80163ca:	fbb2 f2fc 	udiv	r2, r2, ip
 80163ce:	fb01 f102 	mul.w	r1, r1, r2
 80163d2:	3104      	adds	r1, #4
 80163d4:	4419      	add	r1, r3
 80163d6:	4632      	mov	r2, r6
 80163d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80163dc:	9300      	str	r3, [sp, #0]
 80163de:	4658      	mov	r0, fp
 80163e0:	2300      	movs	r3, #0
 80163e2:	f7f9 fb5d 	bl	800faa0 <ucdr_init_buffer_origin_offset>
 80163e6:	464a      	mov	r2, r9
 80163e8:	2300      	movs	r3, #0
 80163ea:	210d      	movs	r1, #13
 80163ec:	4658      	mov	r0, fp
 80163ee:	f7fb f92d 	bl	801164c <uxr_buffer_submessage_header>
 80163f2:	8920      	ldrh	r0, [r4, #8]
 80163f4:	fbb5 f3f0 	udiv	r3, r5, r0
 80163f8:	e9d4 2100 	ldrd	r2, r1, [r4]
 80163fc:	fb00 5313 	mls	r3, r0, r3, r5
 8016400:	b29b      	uxth	r3, r3
 8016402:	fbb1 f1f0 	udiv	r1, r1, r0
 8016406:	fb03 f301 	mul.w	r3, r3, r1
 801640a:	4628      	mov	r0, r5
 801640c:	50d6      	str	r6, [r2, r3]
 801640e:	2101      	movs	r1, #1
 8016410:	f000 f9c4 	bl	801679c <uxr_seq_num_add>
 8016414:	f108 0801 	add.w	r8, r8, #1
 8016418:	fa1f f388 	uxth.w	r3, r8
 801641c:	459a      	cmp	sl, r3
 801641e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016422:	4605      	mov	r5, r0
 8016424:	d8c9      	bhi.n	80163ba <uxr_prepare_reliable_buffer_to_write+0xe6>
 8016426:	fbb5 f1fc 	udiv	r1, r5, ip
 801642a:	fb0c 5111 	mls	r1, ip, r1, r5
 801642e:	b289      	uxth	r1, r1
 8016430:	6863      	ldr	r3, [r4, #4]
 8016432:	fbb3 fcfc 	udiv	ip, r3, ip
 8016436:	6823      	ldr	r3, [r4, #0]
 8016438:	fb01 f10c 	mul.w	r1, r1, ip
 801643c:	3104      	adds	r1, #4
 801643e:	4419      	add	r1, r3
 8016440:	4632      	mov	r2, r6
 8016442:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016446:	9300      	str	r3, [sp, #0]
 8016448:	4658      	mov	r0, fp
 801644a:	2300      	movs	r3, #0
 801644c:	f7f9 fb28 	bl	800faa0 <ucdr_init_buffer_origin_offset>
 8016450:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8016454:	4658      	mov	r0, fp
 8016456:	fa1f f288 	uxth.w	r2, r8
 801645a:	2302      	movs	r3, #2
 801645c:	210d      	movs	r1, #13
 801645e:	f7fb f8f5 	bl	801164c <uxr_buffer_submessage_header>
 8016462:	e9d4 3200 	ldrd	r3, r2, [r4]
 8016466:	8921      	ldrh	r1, [r4, #8]
 8016468:	9f03      	ldr	r7, [sp, #12]
 801646a:	9307      	str	r3, [sp, #28]
 801646c:	9b05      	ldr	r3, [sp, #20]
 801646e:	7b26      	ldrb	r6, [r4, #12]
 8016470:	fbb5 f0f1 	udiv	r0, r5, r1
 8016474:	fbb2 f2f1 	udiv	r2, r2, r1
 8016478:	fb01 5010 	mls	r0, r1, r0, r5
 801647c:	1d39      	adds	r1, r7, #4
 801647e:	440b      	add	r3, r1
 8016480:	b280      	uxth	r0, r0
 8016482:	fb00 f002 	mul.w	r0, r0, r2
 8016486:	4619      	mov	r1, r3
 8016488:	3604      	adds	r6, #4
 801648a:	9b07      	ldr	r3, [sp, #28]
 801648c:	9a04      	ldr	r2, [sp, #16]
 801648e:	4446      	add	r6, r8
 8016490:	501e      	str	r6, [r3, r0]
 8016492:	9e06      	ldr	r6, [sp, #24]
 8016494:	3a08      	subs	r2, #8
 8016496:	1bd2      	subs	r2, r2, r7
 8016498:	4630      	mov	r0, r6
 801649a:	f7f9 fb13 	bl	800fac4 <ucdr_init_buffer>
 801649e:	4630      	mov	r0, r6
 80164a0:	493d      	ldr	r1, [pc, #244]	; (8016598 <uxr_prepare_reliable_buffer_to_write+0x2c4>)
 80164a2:	4622      	mov	r2, r4
 80164a4:	f7f9 fae4 	bl	800fa70 <ucdr_set_on_full_buffer_callback>
 80164a8:	2001      	movs	r0, #1
 80164aa:	81e5      	strh	r5, [r4, #14]
 80164ac:	b011      	add	sp, #68	; 0x44
 80164ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164b2:	2101      	movs	r1, #1
 80164b4:	89e0      	ldrh	r0, [r4, #14]
 80164b6:	f000 f971 	bl	801679c <uxr_seq_num_add>
 80164ba:	8921      	ldrh	r1, [r4, #8]
 80164bc:	4605      	mov	r5, r0
 80164be:	8a60      	ldrh	r0, [r4, #18]
 80164c0:	f000 f96c 	bl	801679c <uxr_seq_num_add>
 80164c4:	4601      	mov	r1, r0
 80164c6:	4628      	mov	r0, r5
 80164c8:	f000 f970 	bl	80167ac <uxr_seq_num_cmp>
 80164cc:	2800      	cmp	r0, #0
 80164ce:	dd2a      	ble.n	8016526 <uxr_prepare_reliable_buffer_to_write+0x252>
 80164d0:	2000      	movs	r0, #0
 80164d2:	b011      	add	sp, #68	; 0x44
 80164d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164d8:	8921      	ldrh	r1, [r4, #8]
 80164da:	8a60      	ldrh	r0, [r4, #18]
 80164dc:	f000 f95e 	bl	801679c <uxr_seq_num_add>
 80164e0:	4601      	mov	r1, r0
 80164e2:	4628      	mov	r0, r5
 80164e4:	f000 f962 	bl	80167ac <uxr_seq_num_cmp>
 80164e8:	2800      	cmp	r0, #0
 80164ea:	dcf1      	bgt.n	80164d0 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 80164ec:	8921      	ldrh	r1, [r4, #8]
 80164ee:	fbb5 f3f1 	udiv	r3, r5, r1
 80164f2:	e9d4 4200 	ldrd	r4, r2, [r4]
 80164f6:	fb01 5313 	mls	r3, r1, r3, r5
 80164fa:	b29b      	uxth	r3, r3
 80164fc:	fbb2 f2f1 	udiv	r2, r2, r1
 8016500:	fb03 f302 	mul.w	r3, r3, r2
 8016504:	e9dd 1005 	ldrd	r1, r0, [sp, #20]
 8016508:	50e7      	str	r7, [r4, r3]
 801650a:	9b03      	ldr	r3, [sp, #12]
 801650c:	9300      	str	r3, [sp, #0]
 801650e:	463a      	mov	r2, r7
 8016510:	2300      	movs	r3, #0
 8016512:	f7f9 fac5 	bl	800faa0 <ucdr_init_buffer_origin_offset>
 8016516:	2001      	movs	r0, #1
 8016518:	e7db      	b.n	80164d2 <uxr_prepare_reliable_buffer_to_write+0x1fe>
 801651a:	f10a 0a01 	add.w	sl, sl, #1
 801651e:	fa1f fa8a 	uxth.w	sl, sl
 8016522:	9307      	str	r3, [sp, #28]
 8016524:	e73c      	b.n	80163a0 <uxr_prepare_reliable_buffer_to_write+0xcc>
 8016526:	8920      	ldrh	r0, [r4, #8]
 8016528:	fbb5 f3f0 	udiv	r3, r5, r0
 801652c:	fb00 5313 	mls	r3, r0, r3, r5
 8016530:	b29b      	uxth	r3, r3
 8016532:	6862      	ldr	r2, [r4, #4]
 8016534:	6821      	ldr	r1, [r4, #0]
 8016536:	fbb2 f0f0 	udiv	r0, r2, r0
 801653a:	fb03 f300 	mul.w	r3, r3, r0
 801653e:	7b22      	ldrb	r2, [r4, #12]
 8016540:	9806      	ldr	r0, [sp, #24]
 8016542:	3304      	adds	r3, #4
 8016544:	4419      	add	r1, r3
 8016546:	4442      	add	r2, r8
 8016548:	f841 2c04 	str.w	r2, [r1, #-4]
 801654c:	7b23      	ldrb	r3, [r4, #12]
 801654e:	9300      	str	r3, [sp, #0]
 8016550:	2300      	movs	r3, #0
 8016552:	f7f9 faa5 	bl	800faa0 <ucdr_init_buffer_origin_offset>
 8016556:	81e5      	strh	r5, [r4, #14]
 8016558:	2001      	movs	r0, #1
 801655a:	e7ba      	b.n	80164d2 <uxr_prepare_reliable_buffer_to_write+0x1fe>
 801655c:	4628      	mov	r0, r5
 801655e:	2101      	movs	r1, #1
 8016560:	f000 f91c 	bl	801679c <uxr_seq_num_add>
 8016564:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016568:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801656c:	fbb3 f1fc 	udiv	r1, r3, ip
 8016570:	fbb0 f3fc 	udiv	r3, r0, ip
 8016574:	fb0c 0313 	mls	r3, ip, r3, r0
 8016578:	b29b      	uxth	r3, r3
 801657a:	fb03 f301 	mul.w	r3, r3, r1
 801657e:	3304      	adds	r3, #4
 8016580:	18d3      	adds	r3, r2, r3
 8016582:	9305      	str	r3, [sp, #20]
 8016584:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016588:	f894 e00c 	ldrb.w	lr, [r4, #12]
 801658c:	9303      	str	r3, [sp, #12]
 801658e:	4605      	mov	r5, r0
 8016590:	e6d4      	b.n	801633c <uxr_prepare_reliable_buffer_to_write+0x68>
 8016592:	4660      	mov	r0, ip
 8016594:	e6ee      	b.n	8016374 <uxr_prepare_reliable_buffer_to_write+0xa0>
 8016596:	bf00      	nop
 8016598:	080161cd 	.word	0x080161cd

0801659c <uxr_prepare_next_reliable_buffer_to_send>:
 801659c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165a0:	4605      	mov	r5, r0
 80165a2:	4688      	mov	r8, r1
 80165a4:	8a00      	ldrh	r0, [r0, #16]
 80165a6:	2101      	movs	r1, #1
 80165a8:	4617      	mov	r7, r2
 80165aa:	461e      	mov	r6, r3
 80165ac:	f000 f8f6 	bl	801679c <uxr_seq_num_add>
 80165b0:	8030      	strh	r0, [r6, #0]
 80165b2:	892a      	ldrh	r2, [r5, #8]
 80165b4:	fbb0 f3f2 	udiv	r3, r0, r2
 80165b8:	fb02 0413 	mls	r4, r2, r3, r0
 80165bc:	b2a4      	uxth	r4, r4
 80165be:	686b      	ldr	r3, [r5, #4]
 80165c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80165c4:	682b      	ldr	r3, [r5, #0]
 80165c6:	89e9      	ldrh	r1, [r5, #14]
 80165c8:	fb04 f402 	mul.w	r4, r4, r2
 80165cc:	3404      	adds	r4, #4
 80165ce:	4423      	add	r3, r4
 80165d0:	f8c8 3000 	str.w	r3, [r8]
 80165d4:	682b      	ldr	r3, [r5, #0]
 80165d6:	441c      	add	r4, r3
 80165d8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80165dc:	603b      	str	r3, [r7, #0]
 80165de:	f000 f8e5 	bl	80167ac <uxr_seq_num_cmp>
 80165e2:	2800      	cmp	r0, #0
 80165e4:	dd02      	ble.n	80165ec <uxr_prepare_next_reliable_buffer_to_send+0x50>
 80165e6:	2000      	movs	r0, #0
 80165e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165ec:	683a      	ldr	r2, [r7, #0]
 80165ee:	7b2b      	ldrb	r3, [r5, #12]
 80165f0:	429a      	cmp	r2, r3
 80165f2:	d9f8      	bls.n	80165e6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80165f4:	8a69      	ldrh	r1, [r5, #18]
 80165f6:	8a28      	ldrh	r0, [r5, #16]
 80165f8:	f000 f8d4 	bl	80167a4 <uxr_seq_num_sub>
 80165fc:	892b      	ldrh	r3, [r5, #8]
 80165fe:	4283      	cmp	r3, r0
 8016600:	d0f1      	beq.n	80165e6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016602:	8830      	ldrh	r0, [r6, #0]
 8016604:	89eb      	ldrh	r3, [r5, #14]
 8016606:	8228      	strh	r0, [r5, #16]
 8016608:	4298      	cmp	r0, r3
 801660a:	d002      	beq.n	8016612 <uxr_prepare_next_reliable_buffer_to_send+0x76>
 801660c:	2001      	movs	r0, #1
 801660e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016612:	2101      	movs	r1, #1
 8016614:	f000 f8c2 	bl	801679c <uxr_seq_num_add>
 8016618:	81e8      	strh	r0, [r5, #14]
 801661a:	2001      	movs	r0, #1
 801661c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016620 <uxr_update_output_stream_heartbeat_timestamp>:
 8016620:	b5d0      	push	{r4, r6, r7, lr}
 8016622:	8a01      	ldrh	r1, [r0, #16]
 8016624:	4604      	mov	r4, r0
 8016626:	8a40      	ldrh	r0, [r0, #18]
 8016628:	4616      	mov	r6, r2
 801662a:	461f      	mov	r7, r3
 801662c:	f000 f8be 	bl	80167ac <uxr_seq_num_cmp>
 8016630:	2800      	cmp	r0, #0
 8016632:	db07      	blt.n	8016644 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8016634:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016638:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801663c:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8016640:	2000      	movs	r0, #0
 8016642:	bdd0      	pop	{r4, r6, r7, pc}
 8016644:	f894 0020 	ldrb.w	r0, [r4, #32]
 8016648:	b948      	cbnz	r0, 801665e <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 801664a:	2301      	movs	r3, #1
 801664c:	f884 3020 	strb.w	r3, [r4, #32]
 8016650:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 8016654:	f147 0200 	adc.w	r2, r7, #0
 8016658:	e9c4 3206 	strd	r3, r2, [r4, #24]
 801665c:	bdd0      	pop	{r4, r6, r7, pc}
 801665e:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016662:	4296      	cmp	r6, r2
 8016664:	eb77 0303 	sbcs.w	r3, r7, r3
 8016668:	bfa5      	ittet	ge
 801666a:	3001      	addge	r0, #1
 801666c:	f884 0020 	strbge.w	r0, [r4, #32]
 8016670:	2000      	movlt	r0, #0
 8016672:	2001      	movge	r0, #1
 8016674:	e7ec      	b.n	8016650 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8016676:	bf00      	nop

08016678 <uxr_begin_output_nack_buffer_it>:
 8016678:	8a40      	ldrh	r0, [r0, #18]
 801667a:	4770      	bx	lr

0801667c <uxr_next_reliable_nack_buffer_to_send>:
 801667c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016680:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 8016684:	f1b9 0f00 	cmp.w	r9, #0
 8016688:	d011      	beq.n	80166ae <uxr_next_reliable_nack_buffer_to_send+0x32>
 801668a:	4605      	mov	r5, r0
 801668c:	8818      	ldrh	r0, [r3, #0]
 801668e:	460f      	mov	r7, r1
 8016690:	4690      	mov	r8, r2
 8016692:	461e      	mov	r6, r3
 8016694:	2101      	movs	r1, #1
 8016696:	f000 f881 	bl	801679c <uxr_seq_num_add>
 801669a:	8030      	strh	r0, [r6, #0]
 801669c:	8a29      	ldrh	r1, [r5, #16]
 801669e:	f000 f885 	bl	80167ac <uxr_seq_num_cmp>
 80166a2:	2800      	cmp	r0, #0
 80166a4:	dd06      	ble.n	80166b4 <uxr_next_reliable_nack_buffer_to_send+0x38>
 80166a6:	f04f 0900 	mov.w	r9, #0
 80166aa:	f885 9021 	strb.w	r9, [r5, #33]	; 0x21
 80166ae:	4648      	mov	r0, r9
 80166b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80166b4:	892a      	ldrh	r2, [r5, #8]
 80166b6:	8830      	ldrh	r0, [r6, #0]
 80166b8:	fbb0 f4f2 	udiv	r4, r0, r2
 80166bc:	fb02 0414 	mls	r4, r2, r4, r0
 80166c0:	b2a4      	uxth	r4, r4
 80166c2:	686b      	ldr	r3, [r5, #4]
 80166c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80166c8:	682b      	ldr	r3, [r5, #0]
 80166ca:	fb04 f402 	mul.w	r4, r4, r2
 80166ce:	3404      	adds	r4, #4
 80166d0:	4423      	add	r3, r4
 80166d2:	603b      	str	r3, [r7, #0]
 80166d4:	682b      	ldr	r3, [r5, #0]
 80166d6:	441c      	add	r4, r3
 80166d8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80166dc:	f8c8 3000 	str.w	r3, [r8]
 80166e0:	7b2a      	ldrb	r2, [r5, #12]
 80166e2:	429a      	cmp	r2, r3
 80166e4:	d0d6      	beq.n	8016694 <uxr_next_reliable_nack_buffer_to_send+0x18>
 80166e6:	4648      	mov	r0, r9
 80166e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080166ec <uxr_process_acknack>:
 80166ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166ee:	4604      	mov	r4, r0
 80166f0:	460e      	mov	r6, r1
 80166f2:	4610      	mov	r0, r2
 80166f4:	2101      	movs	r1, #1
 80166f6:	f000 f855 	bl	80167a4 <uxr_seq_num_sub>
 80166fa:	8a61      	ldrh	r1, [r4, #18]
 80166fc:	f000 f852 	bl	80167a4 <uxr_seq_num_sub>
 8016700:	b1c0      	cbz	r0, 8016734 <uxr_process_acknack+0x48>
 8016702:	4605      	mov	r5, r0
 8016704:	2700      	movs	r7, #0
 8016706:	2101      	movs	r1, #1
 8016708:	8a60      	ldrh	r0, [r4, #18]
 801670a:	f000 f847 	bl	801679c <uxr_seq_num_add>
 801670e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016712:	fbb0 f3fc 	udiv	r3, r0, ip
 8016716:	e9d4 2100 	ldrd	r2, r1, [r4]
 801671a:	fb0c 0313 	mls	r3, ip, r3, r0
 801671e:	b29b      	uxth	r3, r3
 8016720:	fbb1 f1fc 	udiv	r1, r1, ip
 8016724:	3701      	adds	r7, #1
 8016726:	fb03 f301 	mul.w	r3, r3, r1
 801672a:	42bd      	cmp	r5, r7
 801672c:	7b21      	ldrb	r1, [r4, #12]
 801672e:	8260      	strh	r0, [r4, #18]
 8016730:	50d1      	str	r1, [r2, r3]
 8016732:	d1e8      	bne.n	8016706 <uxr_process_acknack+0x1a>
 8016734:	3e00      	subs	r6, #0
 8016736:	f04f 0300 	mov.w	r3, #0
 801673a:	bf18      	it	ne
 801673c:	2601      	movne	r6, #1
 801673e:	f884 3020 	strb.w	r3, [r4, #32]
 8016742:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8016746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016748 <uxr_is_output_up_to_date>:
 8016748:	8a01      	ldrh	r1, [r0, #16]
 801674a:	8a40      	ldrh	r0, [r0, #18]
 801674c:	b508      	push	{r3, lr}
 801674e:	f000 f82d 	bl	80167ac <uxr_seq_num_cmp>
 8016752:	fab0 f080 	clz	r0, r0
 8016756:	0940      	lsrs	r0, r0, #5
 8016758:	bd08      	pop	{r3, pc}
 801675a:	bf00      	nop

0801675c <get_available_free_slots>:
 801675c:	8901      	ldrh	r1, [r0, #8]
 801675e:	b1d9      	cbz	r1, 8016798 <get_available_free_slots+0x3c>
 8016760:	b4f0      	push	{r4, r5, r6, r7}
 8016762:	2400      	movs	r4, #0
 8016764:	6845      	ldr	r5, [r0, #4]
 8016766:	6807      	ldr	r7, [r0, #0]
 8016768:	7b06      	ldrb	r6, [r0, #12]
 801676a:	fbb5 f5f1 	udiv	r5, r5, r1
 801676e:	4620      	mov	r0, r4
 8016770:	4622      	mov	r2, r4
 8016772:	fbb2 f3f1 	udiv	r3, r2, r1
 8016776:	fb01 2313 	mls	r3, r1, r3, r2
 801677a:	b29b      	uxth	r3, r3
 801677c:	fb05 7303 	mla	r3, r5, r3, r7
 8016780:	3401      	adds	r4, #1
 8016782:	681b      	ldr	r3, [r3, #0]
 8016784:	429e      	cmp	r6, r3
 8016786:	bf08      	it	eq
 8016788:	3001      	addeq	r0, #1
 801678a:	b2a2      	uxth	r2, r4
 801678c:	bf08      	it	eq
 801678e:	b280      	uxtheq	r0, r0
 8016790:	428a      	cmp	r2, r1
 8016792:	d3ee      	bcc.n	8016772 <get_available_free_slots+0x16>
 8016794:	bcf0      	pop	{r4, r5, r6, r7}
 8016796:	4770      	bx	lr
 8016798:	4608      	mov	r0, r1
 801679a:	4770      	bx	lr

0801679c <uxr_seq_num_add>:
 801679c:	4408      	add	r0, r1
 801679e:	b280      	uxth	r0, r0
 80167a0:	4770      	bx	lr
 80167a2:	bf00      	nop

080167a4 <uxr_seq_num_sub>:
 80167a4:	1a40      	subs	r0, r0, r1
 80167a6:	b280      	uxth	r0, r0
 80167a8:	4770      	bx	lr
 80167aa:	bf00      	nop

080167ac <uxr_seq_num_cmp>:
 80167ac:	4288      	cmp	r0, r1
 80167ae:	d011      	beq.n	80167d4 <uxr_seq_num_cmp+0x28>
 80167b0:	d309      	bcc.n	80167c6 <uxr_seq_num_cmp+0x1a>
 80167b2:	4288      	cmp	r0, r1
 80167b4:	d910      	bls.n	80167d8 <uxr_seq_num_cmp+0x2c>
 80167b6:	1a40      	subs	r0, r0, r1
 80167b8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80167bc:	bfd4      	ite	le
 80167be:	2001      	movle	r0, #1
 80167c0:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 80167c4:	4770      	bx	lr
 80167c6:	1a0b      	subs	r3, r1, r0
 80167c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80167cc:	daf1      	bge.n	80167b2 <uxr_seq_num_cmp+0x6>
 80167ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80167d2:	4770      	bx	lr
 80167d4:	2000      	movs	r0, #0
 80167d6:	4770      	bx	lr
 80167d8:	2001      	movs	r0, #1
 80167da:	4770      	bx	lr

080167dc <uxr_init_framing_io>:
 80167dc:	2300      	movs	r3, #0
 80167de:	7041      	strb	r1, [r0, #1]
 80167e0:	7003      	strb	r3, [r0, #0]
 80167e2:	8583      	strh	r3, [r0, #44]	; 0x2c
 80167e4:	4770      	bx	lr
 80167e6:	bf00      	nop

080167e8 <uxr_write_framed_msg>:
 80167e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167ec:	7845      	ldrb	r5, [r0, #1]
 80167ee:	b085      	sub	sp, #20
 80167f0:	4604      	mov	r4, r0
 80167f2:	f1a5 0c7d 	sub.w	ip, r5, #125	; 0x7d
 80167f6:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 80167fa:	f1bc 0f01 	cmp.w	ip, #1
 80167fe:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8016802:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8016806:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
 801680a:	460e      	mov	r6, r1
 801680c:	4617      	mov	r7, r2
 801680e:	469b      	mov	fp, r3
 8016810:	f240 8116 	bls.w	8016a40 <uxr_write_framed_msg+0x258>
 8016814:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8016818:	2302      	movs	r3, #2
 801681a:	2a01      	cmp	r2, #1
 801681c:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8016820:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8016824:	f240 8091 	bls.w	801694a <uxr_write_framed_msg+0x162>
 8016828:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801682a:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 801682e:	b2d9      	uxtb	r1, r3
 8016830:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8016834:	2203      	movs	r2, #3
 8016836:	2b01      	cmp	r3, #1
 8016838:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801683c:	f240 809a 	bls.w	8016974 <uxr_write_framed_msg+0x18c>
 8016840:	18a3      	adds	r3, r4, r2
 8016842:	3201      	adds	r2, #1
 8016844:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8016848:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801684c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801684e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016852:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8016856:	2901      	cmp	r1, #1
 8016858:	eb04 0102 	add.w	r1, r4, r2
 801685c:	f240 8101 	bls.w	8016a62 <uxr_write_framed_msg+0x27a>
 8016860:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8016864:	3201      	adds	r2, #1
 8016866:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016868:	b2d2      	uxtb	r2, r2
 801686a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801686e:	2b00      	cmp	r3, #0
 8016870:	f000 8106 	beq.w	8016a80 <uxr_write_framed_msg+0x298>
 8016874:	f04f 0a00 	mov.w	sl, #0
 8016878:	46d1      	mov	r9, sl
 801687a:	f81b 3009 	ldrb.w	r3, [fp, r9]
 801687e:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8016882:	2901      	cmp	r1, #1
 8016884:	f240 80a3 	bls.w	80169ce <uxr_write_framed_msg+0x1e6>
 8016888:	2a29      	cmp	r2, #41	; 0x29
 801688a:	d87f      	bhi.n	801698c <uxr_write_framed_msg+0x1a4>
 801688c:	18a1      	adds	r1, r4, r2
 801688e:	3201      	adds	r2, #1
 8016890:	b2d2      	uxtb	r2, r2
 8016892:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8016896:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801689a:	ea8a 0303 	eor.w	r3, sl, r3
 801689e:	4984      	ldr	r1, [pc, #528]	; (8016ab0 <uxr_write_framed_msg+0x2c8>)
 80168a0:	b2db      	uxtb	r3, r3
 80168a2:	f109 0901 	add.w	r9, r9, #1
 80168a6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80168aa:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 80168ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80168b0:	454b      	cmp	r3, r9
 80168b2:	d8e2      	bhi.n	801687a <uxr_write_framed_msg+0x92>
 80168b4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80168b8:	fa5f f98a 	uxtb.w	r9, sl
 80168bc:	9301      	str	r3, [sp, #4]
 80168be:	f04f 0b00 	mov.w	fp, #0
 80168c2:	f88d 900c 	strb.w	r9, [sp, #12]
 80168c6:	f88d 300d 	strb.w	r3, [sp, #13]
 80168ca:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 80168ce:	fa5f f18a 	uxtb.w	r1, sl
 80168d2:	2901      	cmp	r1, #1
 80168d4:	d920      	bls.n	8016918 <uxr_write_framed_msg+0x130>
 80168d6:	2a29      	cmp	r2, #41	; 0x29
 80168d8:	f240 808b 	bls.w	80169f2 <uxr_write_framed_msg+0x20a>
 80168dc:	2500      	movs	r5, #0
 80168de:	e000      	b.n	80168e2 <uxr_write_framed_msg+0xfa>
 80168e0:	b160      	cbz	r0, 80168fc <uxr_write_framed_msg+0x114>
 80168e2:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80168e6:	1b52      	subs	r2, r2, r5
 80168e8:	4421      	add	r1, r4
 80168ea:	4643      	mov	r3, r8
 80168ec:	4638      	mov	r0, r7
 80168ee:	47b0      	blx	r6
 80168f0:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80168f4:	4405      	add	r5, r0
 80168f6:	4295      	cmp	r5, r2
 80168f8:	d3f2      	bcc.n	80168e0 <uxr_write_framed_msg+0xf8>
 80168fa:	d003      	beq.n	8016904 <uxr_write_framed_msg+0x11c>
 80168fc:	2000      	movs	r0, #0
 80168fe:	b005      	add	sp, #20
 8016900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016904:	fa5f f18a 	uxtb.w	r1, sl
 8016908:	f04f 0300 	mov.w	r3, #0
 801690c:	2901      	cmp	r1, #1
 801690e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8016912:	f04f 0200 	mov.w	r2, #0
 8016916:	d86c      	bhi.n	80169f2 <uxr_write_framed_msg+0x20a>
 8016918:	1c51      	adds	r1, r2, #1
 801691a:	b2c9      	uxtb	r1, r1
 801691c:	2929      	cmp	r1, #41	; 0x29
 801691e:	d8dd      	bhi.n	80168dc <uxr_write_framed_msg+0xf4>
 8016920:	18a0      	adds	r0, r4, r2
 8016922:	3202      	adds	r2, #2
 8016924:	f089 0920 	eor.w	r9, r9, #32
 8016928:	b2d2      	uxtb	r2, r2
 801692a:	4659      	mov	r1, fp
 801692c:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8016930:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 8016934:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8016938:	f04f 0b01 	mov.w	fp, #1
 801693c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016940:	2900      	cmp	r1, #0
 8016942:	d162      	bne.n	8016a0a <uxr_write_framed_msg+0x222>
 8016944:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8016948:	e7bf      	b.n	80168ca <uxr_write_framed_msg+0xe2>
 801694a:	2204      	movs	r2, #4
 801694c:	2503      	movs	r5, #3
 801694e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016950:	4423      	add	r3, r4
 8016952:	b2c9      	uxtb	r1, r1
 8016954:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8016958:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 801695c:	4425      	add	r5, r4
 801695e:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8016962:	f080 0020 	eor.w	r0, r0, #32
 8016966:	2b01      	cmp	r3, #1
 8016968:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 801696c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016970:	f63f af66 	bhi.w	8016840 <uxr_write_framed_msg+0x58>
 8016974:	18a3      	adds	r3, r4, r2
 8016976:	f081 0120 	eor.w	r1, r1, #32
 801697a:	3202      	adds	r2, #2
 801697c:	207d      	movs	r0, #125	; 0x7d
 801697e:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 8016982:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
 8016986:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801698a:	e75f      	b.n	801684c <uxr_write_framed_msg+0x64>
 801698c:	2500      	movs	r5, #0
 801698e:	e001      	b.n	8016994 <uxr_write_framed_msg+0x1ac>
 8016990:	2800      	cmp	r0, #0
 8016992:	d0b3      	beq.n	80168fc <uxr_write_framed_msg+0x114>
 8016994:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8016998:	1b52      	subs	r2, r2, r5
 801699a:	4421      	add	r1, r4
 801699c:	4643      	mov	r3, r8
 801699e:	4638      	mov	r0, r7
 80169a0:	47b0      	blx	r6
 80169a2:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80169a6:	4405      	add	r5, r0
 80169a8:	4295      	cmp	r5, r2
 80169aa:	d3f1      	bcc.n	8016990 <uxr_write_framed_msg+0x1a8>
 80169ac:	d1a6      	bne.n	80168fc <uxr_write_framed_msg+0x114>
 80169ae:	f04f 0300 	mov.w	r3, #0
 80169b2:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80169b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80169b8:	454b      	cmp	r3, r9
 80169ba:	d971      	bls.n	8016aa0 <uxr_write_framed_msg+0x2b8>
 80169bc:	f81b 3009 	ldrb.w	r3, [fp, r9]
 80169c0:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 80169c4:	2901      	cmp	r1, #1
 80169c6:	f04f 0200 	mov.w	r2, #0
 80169ca:	f63f af5d 	bhi.w	8016888 <uxr_write_framed_msg+0xa0>
 80169ce:	1c51      	adds	r1, r2, #1
 80169d0:	b2c9      	uxtb	r1, r1
 80169d2:	2929      	cmp	r1, #41	; 0x29
 80169d4:	d8da      	bhi.n	801698c <uxr_write_framed_msg+0x1a4>
 80169d6:	18a0      	adds	r0, r4, r2
 80169d8:	3202      	adds	r2, #2
 80169da:	b2d2      	uxtb	r2, r2
 80169dc:	f083 0120 	eor.w	r1, r3, #32
 80169e0:	f04f 057d 	mov.w	r5, #125	; 0x7d
 80169e4:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 80169e8:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 80169ec:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80169f0:	e753      	b.n	801689a <uxr_write_framed_msg+0xb2>
 80169f2:	18a0      	adds	r0, r4, r2
 80169f4:	3201      	adds	r2, #1
 80169f6:	b2d2      	uxtb	r2, r2
 80169f8:	4659      	mov	r1, fp
 80169fa:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 80169fe:	f04f 0b01 	mov.w	fp, #1
 8016a02:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016a06:	2900      	cmp	r1, #0
 8016a08:	d09c      	beq.n	8016944 <uxr_write_framed_msg+0x15c>
 8016a0a:	2500      	movs	r5, #0
 8016a0c:	e002      	b.n	8016a14 <uxr_write_framed_msg+0x22c>
 8016a0e:	2800      	cmp	r0, #0
 8016a10:	f43f af74 	beq.w	80168fc <uxr_write_framed_msg+0x114>
 8016a14:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8016a18:	1b52      	subs	r2, r2, r5
 8016a1a:	4421      	add	r1, r4
 8016a1c:	4643      	mov	r3, r8
 8016a1e:	4638      	mov	r0, r7
 8016a20:	47b0      	blx	r6
 8016a22:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8016a26:	4405      	add	r5, r0
 8016a28:	4295      	cmp	r5, r2
 8016a2a:	d3f0      	bcc.n	8016a0e <uxr_write_framed_msg+0x226>
 8016a2c:	f47f af66 	bne.w	80168fc <uxr_write_framed_msg+0x114>
 8016a30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016a32:	2300      	movs	r3, #0
 8016a34:	b290      	uxth	r0, r2
 8016a36:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8016a3a:	b005      	add	sp, #20
 8016a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a40:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8016a44:	f085 0520 	eor.w	r5, r5, #32
 8016a48:	2303      	movs	r3, #3
 8016a4a:	217d      	movs	r1, #125	; 0x7d
 8016a4c:	2a01      	cmp	r2, #1
 8016a4e:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
 8016a52:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8016a56:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8016a5a:	d814      	bhi.n	8016a86 <uxr_write_framed_msg+0x29e>
 8016a5c:	2205      	movs	r2, #5
 8016a5e:	2504      	movs	r5, #4
 8016a60:	e775      	b.n	801694e <uxr_write_framed_msg+0x166>
 8016a62:	f083 0320 	eor.w	r3, r3, #32
 8016a66:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
 8016a6a:	3202      	adds	r2, #2
 8016a6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016a6e:	b2d2      	uxtb	r2, r2
 8016a70:	207d      	movs	r0, #125	; 0x7d
 8016a72:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8016a76:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	f47f aefa 	bne.w	8016874 <uxr_write_framed_msg+0x8c>
 8016a80:	9301      	str	r3, [sp, #4]
 8016a82:	4699      	mov	r9, r3
 8016a84:	e71b      	b.n	80168be <uxr_write_framed_msg+0xd6>
 8016a86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016a88:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8016a8c:	b2d9      	uxtb	r1, r3
 8016a8e:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8016a92:	2204      	movs	r2, #4
 8016a94:	2b01      	cmp	r3, #1
 8016a96:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016a9a:	f63f aed1 	bhi.w	8016840 <uxr_write_framed_msg+0x58>
 8016a9e:	e769      	b.n	8016974 <uxr_write_framed_msg+0x18c>
 8016aa0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8016aa4:	fa5f f98a 	uxtb.w	r9, sl
 8016aa8:	9301      	str	r3, [sp, #4]
 8016aaa:	2200      	movs	r2, #0
 8016aac:	e707      	b.n	80168be <uxr_write_framed_msg+0xd6>
 8016aae:	bf00      	nop
 8016ab0:	080196ec 	.word	0x080196ec

08016ab4 <uxr_framing_read_transport>:
 8016ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ab8:	4604      	mov	r4, r0
 8016aba:	b083      	sub	sp, #12
 8016abc:	461f      	mov	r7, r3
 8016abe:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8016ac2:	4689      	mov	r9, r1
 8016ac4:	4692      	mov	sl, r2
 8016ac6:	f7fa fe07 	bl	80116d8 <uxr_millis>
 8016aca:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8016ace:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8016ad2:	42b3      	cmp	r3, r6
 8016ad4:	4680      	mov	r8, r0
 8016ad6:	d05f      	beq.n	8016b98 <uxr_framing_read_transport+0xe4>
 8016ad8:	d81b      	bhi.n	8016b12 <uxr_framing_read_transport+0x5e>
 8016ada:	1e75      	subs	r5, r6, #1
 8016adc:	1aed      	subs	r5, r5, r3
 8016ade:	b2ed      	uxtb	r5, r5
 8016ae0:	2600      	movs	r6, #0
 8016ae2:	455d      	cmp	r5, fp
 8016ae4:	d81e      	bhi.n	8016b24 <uxr_framing_read_transport+0x70>
 8016ae6:	19ab      	adds	r3, r5, r6
 8016ae8:	455b      	cmp	r3, fp
 8016aea:	bf84      	itt	hi
 8016aec:	ebab 0605 	subhi.w	r6, fp, r5
 8016af0:	b2f6      	uxtbhi	r6, r6
 8016af2:	b9e5      	cbnz	r5, 8016b2e <uxr_framing_read_transport+0x7a>
 8016af4:	f04f 0b00 	mov.w	fp, #0
 8016af8:	f7fa fdee 	bl	80116d8 <uxr_millis>
 8016afc:	683b      	ldr	r3, [r7, #0]
 8016afe:	eba0 0008 	sub.w	r0, r0, r8
 8016b02:	1a1b      	subs	r3, r3, r0
 8016b04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016b08:	4658      	mov	r0, fp
 8016b0a:	603b      	str	r3, [r7, #0]
 8016b0c:	b003      	add	sp, #12
 8016b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b12:	2e00      	cmp	r6, #0
 8016b14:	d048      	beq.n	8016ba8 <uxr_framing_read_transport+0xf4>
 8016b16:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8016b1a:	b2ed      	uxtb	r5, r5
 8016b1c:	3e01      	subs	r6, #1
 8016b1e:	455d      	cmp	r5, fp
 8016b20:	b2f6      	uxtb	r6, r6
 8016b22:	d9e0      	bls.n	8016ae6 <uxr_framing_read_transport+0x32>
 8016b24:	fa5f f58b 	uxtb.w	r5, fp
 8016b28:	2600      	movs	r6, #0
 8016b2a:	2d00      	cmp	r5, #0
 8016b2c:	d0e2      	beq.n	8016af4 <uxr_framing_read_transport+0x40>
 8016b2e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8016b32:	3102      	adds	r1, #2
 8016b34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b36:	9300      	str	r3, [sp, #0]
 8016b38:	683b      	ldr	r3, [r7, #0]
 8016b3a:	4421      	add	r1, r4
 8016b3c:	462a      	mov	r2, r5
 8016b3e:	4650      	mov	r0, sl
 8016b40:	47c8      	blx	r9
 8016b42:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8016b46:	4a1b      	ldr	r2, [pc, #108]	; (8016bb4 <uxr_framing_read_transport+0x100>)
 8016b48:	4403      	add	r3, r0
 8016b4a:	0859      	lsrs	r1, r3, #1
 8016b4c:	fba2 2101 	umull	r2, r1, r2, r1
 8016b50:	0889      	lsrs	r1, r1, #2
 8016b52:	222a      	movs	r2, #42	; 0x2a
 8016b54:	fb02 3111 	mls	r1, r2, r1, r3
 8016b58:	4683      	mov	fp, r0
 8016b5a:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8016b5e:	2800      	cmp	r0, #0
 8016b60:	d0c8      	beq.n	8016af4 <uxr_framing_read_transport+0x40>
 8016b62:	42a8      	cmp	r0, r5
 8016b64:	d1c8      	bne.n	8016af8 <uxr_framing_read_transport+0x44>
 8016b66:	b31e      	cbz	r6, 8016bb0 <uxr_framing_read_transport+0xfc>
 8016b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b6a:	9300      	str	r3, [sp, #0]
 8016b6c:	3102      	adds	r1, #2
 8016b6e:	4421      	add	r1, r4
 8016b70:	4632      	mov	r2, r6
 8016b72:	2300      	movs	r3, #0
 8016b74:	4650      	mov	r0, sl
 8016b76:	47c8      	blx	r9
 8016b78:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8016b7c:	490d      	ldr	r1, [pc, #52]	; (8016bb4 <uxr_framing_read_transport+0x100>)
 8016b7e:	181a      	adds	r2, r3, r0
 8016b80:	0853      	lsrs	r3, r2, #1
 8016b82:	fba1 1303 	umull	r1, r3, r1, r3
 8016b86:	089b      	lsrs	r3, r3, #2
 8016b88:	212a      	movs	r1, #42	; 0x2a
 8016b8a:	fb01 2313 	mls	r3, r1, r3, r2
 8016b8e:	eb00 0b05 	add.w	fp, r0, r5
 8016b92:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8016b96:	e7af      	b.n	8016af8 <uxr_framing_read_transport+0x44>
 8016b98:	2600      	movs	r6, #0
 8016b9a:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8016b9e:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8016ba0:	d9c0      	bls.n	8016b24 <uxr_framing_read_transport+0x70>
 8016ba2:	2102      	movs	r1, #2
 8016ba4:	2529      	movs	r5, #41	; 0x29
 8016ba6:	e7c5      	b.n	8016b34 <uxr_framing_read_transport+0x80>
 8016ba8:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8016bac:	b2ed      	uxtb	r5, r5
 8016bae:	e798      	b.n	8016ae2 <uxr_framing_read_transport+0x2e>
 8016bb0:	46ab      	mov	fp, r5
 8016bb2:	e7a1      	b.n	8016af8 <uxr_framing_read_transport+0x44>
 8016bb4:	30c30c31 	.word	0x30c30c31

08016bb8 <uxr_read_framed_msg>:
 8016bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bbc:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 8016bc0:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 8016bc4:	42ae      	cmp	r6, r5
 8016bc6:	b083      	sub	sp, #12
 8016bc8:	4604      	mov	r4, r0
 8016bca:	461f      	mov	r7, r3
 8016bcc:	4689      	mov	r9, r1
 8016bce:	4692      	mov	sl, r2
 8016bd0:	f000 817d 	beq.w	8016ece <uxr_read_framed_msg+0x316>
 8016bd4:	7823      	ldrb	r3, [r4, #0]
 8016bd6:	4ecc      	ldr	r6, [pc, #816]	; (8016f08 <uxr_read_framed_msg+0x350>)
 8016bd8:	f8df 8330 	ldr.w	r8, [pc, #816]	; 8016f0c <uxr_read_framed_msg+0x354>
 8016bdc:	2b07      	cmp	r3, #7
 8016bde:	d8fd      	bhi.n	8016bdc <uxr_read_framed_msg+0x24>
 8016be0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8016be4:	00f40113 	.word	0x00f40113
 8016be8:	00b700d4 	.word	0x00b700d4
 8016bec:	004d008e 	.word	0x004d008e
 8016bf0:	00080030 	.word	0x00080030
 8016bf4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8016bf8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8016bfc:	4298      	cmp	r0, r3
 8016bfe:	f000 8141 	beq.w	8016e84 <uxr_read_framed_msg+0x2cc>
 8016c02:	18e2      	adds	r2, r4, r3
 8016c04:	7891      	ldrb	r1, [r2, #2]
 8016c06:	297d      	cmp	r1, #125	; 0x7d
 8016c08:	f000 81a2 	beq.w	8016f50 <uxr_read_framed_msg+0x398>
 8016c0c:	3301      	adds	r3, #1
 8016c0e:	085a      	lsrs	r2, r3, #1
 8016c10:	fba6 0202 	umull	r0, r2, r6, r2
 8016c14:	0892      	lsrs	r2, r2, #2
 8016c16:	202a      	movs	r0, #42	; 0x2a
 8016c18:	fb00 3312 	mls	r3, r0, r2, r3
 8016c1c:	297e      	cmp	r1, #126	; 0x7e
 8016c1e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016c22:	f000 8251 	beq.w	80170c8 <uxr_read_framed_msg+0x510>
 8016c26:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8016c28:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8016c2a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8016c2e:	b29b      	uxth	r3, r3
 8016c30:	2100      	movs	r1, #0
 8016c32:	429a      	cmp	r2, r3
 8016c34:	86a3      	strh	r3, [r4, #52]	; 0x34
 8016c36:	7021      	strb	r1, [r4, #0]
 8016c38:	f000 8182 	beq.w	8016f40 <uxr_read_framed_msg+0x388>
 8016c3c:	2000      	movs	r0, #0
 8016c3e:	b003      	add	sp, #12
 8016c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c44:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8016c48:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8016c4c:	4298      	cmp	r0, r3
 8016c4e:	f000 8128 	beq.w	8016ea2 <uxr_read_framed_msg+0x2ea>
 8016c52:	18e2      	adds	r2, r4, r3
 8016c54:	7891      	ldrb	r1, [r2, #2]
 8016c56:	297d      	cmp	r1, #125	; 0x7d
 8016c58:	f000 8196 	beq.w	8016f88 <uxr_read_framed_msg+0x3d0>
 8016c5c:	3301      	adds	r3, #1
 8016c5e:	085a      	lsrs	r2, r3, #1
 8016c60:	fba6 0202 	umull	r0, r2, r6, r2
 8016c64:	0892      	lsrs	r2, r2, #2
 8016c66:	202a      	movs	r0, #42	; 0x2a
 8016c68:	fb00 3312 	mls	r3, r0, r2, r3
 8016c6c:	297e      	cmp	r1, #126	; 0x7e
 8016c6e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016c72:	f000 8219 	beq.w	80170a8 <uxr_read_framed_msg+0x4f0>
 8016c76:	2307      	movs	r3, #7
 8016c78:	86a1      	strh	r1, [r4, #52]	; 0x34
 8016c7a:	7023      	strb	r3, [r4, #0]
 8016c7c:	e7ae      	b.n	8016bdc <uxr_read_framed_msg+0x24>
 8016c7e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8016c80:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8016c82:	429d      	cmp	r5, r3
 8016c84:	d937      	bls.n	8016cf6 <uxr_read_framed_msg+0x13e>
 8016c86:	ee07 9a90 	vmov	s15, r9
 8016c8a:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8016c8e:	e01e      	b.n	8016cce <uxr_read_framed_msg+0x116>
 8016c90:	f89e e002 	ldrb.w	lr, [lr, #2]
 8016c94:	f1be 0f7d 	cmp.w	lr, #125	; 0x7d
 8016c98:	f000 80d2 	beq.w	8016e40 <uxr_read_framed_msg+0x288>
 8016c9c:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8016ca0:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8016ca4:	f000 8214 	beq.w	80170d0 <uxr_read_framed_msg+0x518>
 8016ca8:	f807 e003 	strb.w	lr, [r7, r3]
 8016cac:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8016cae:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8016cb0:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8016cb2:	ea80 010e 	eor.w	r1, r0, lr
 8016cb6:	b2c9      	uxtb	r1, r1
 8016cb8:	3301      	adds	r3, #1
 8016cba:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 8016cbe:	b29b      	uxth	r3, r3
 8016cc0:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8016cc4:	42ab      	cmp	r3, r5
 8016cc6:	86e2      	strh	r2, [r4, #54]	; 0x36
 8016cc8:	8663      	strh	r3, [r4, #50]	; 0x32
 8016cca:	f080 8121 	bcs.w	8016f10 <uxr_read_framed_msg+0x358>
 8016cce:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 8016cd2:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8016cd6:	f101 0b01 	add.w	fp, r1, #1
 8016cda:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8016cde:	fba6 9202 	umull	r9, r2, r6, r2
 8016ce2:	0892      	lsrs	r2, r2, #2
 8016ce4:	4288      	cmp	r0, r1
 8016ce6:	eb04 0e01 	add.w	lr, r4, r1
 8016cea:	fb0c b212 	mls	r2, ip, r2, fp
 8016cee:	d1cf      	bne.n	8016c90 <uxr_read_framed_msg+0xd8>
 8016cf0:	ee17 9a90 	vmov	r9, s15
 8016cf4:	429d      	cmp	r5, r3
 8016cf6:	f040 8112 	bne.w	8016f1e <uxr_read_framed_msg+0x366>
 8016cfa:	2306      	movs	r3, #6
 8016cfc:	7023      	strb	r3, [r4, #0]
 8016cfe:	e76d      	b.n	8016bdc <uxr_read_framed_msg+0x24>
 8016d00:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8016d04:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8016d08:	4298      	cmp	r0, r3
 8016d0a:	f000 80bb 	beq.w	8016e84 <uxr_read_framed_msg+0x2cc>
 8016d0e:	18e2      	adds	r2, r4, r3
 8016d10:	7891      	ldrb	r1, [r2, #2]
 8016d12:	297d      	cmp	r1, #125	; 0x7d
 8016d14:	f000 8153 	beq.w	8016fbe <uxr_read_framed_msg+0x406>
 8016d18:	3301      	adds	r3, #1
 8016d1a:	085a      	lsrs	r2, r3, #1
 8016d1c:	fba6 0202 	umull	r0, r2, r6, r2
 8016d20:	0892      	lsrs	r2, r2, #2
 8016d22:	202a      	movs	r0, #42	; 0x2a
 8016d24:	fb00 3212 	mls	r2, r0, r2, r3
 8016d28:	297e      	cmp	r1, #126	; 0x7e
 8016d2a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8016d2e:	f000 81cb 	beq.w	80170c8 <uxr_read_framed_msg+0x510>
 8016d32:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8016d34:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8016d38:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016d3a:	b29b      	uxth	r3, r3
 8016d3c:	2000      	movs	r0, #0
 8016d3e:	428b      	cmp	r3, r1
 8016d40:	8623      	strh	r3, [r4, #48]	; 0x30
 8016d42:	8660      	strh	r0, [r4, #50]	; 0x32
 8016d44:	86e0      	strh	r0, [r4, #54]	; 0x36
 8016d46:	f240 80db 	bls.w	8016f00 <uxr_read_framed_msg+0x348>
 8016d4a:	7020      	strb	r0, [r4, #0]
 8016d4c:	b003      	add	sp, #12
 8016d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d52:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8016d56:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8016d5a:	4298      	cmp	r0, r3
 8016d5c:	f000 80a1 	beq.w	8016ea2 <uxr_read_framed_msg+0x2ea>
 8016d60:	18e2      	adds	r2, r4, r3
 8016d62:	7891      	ldrb	r1, [r2, #2]
 8016d64:	297d      	cmp	r1, #125	; 0x7d
 8016d66:	f000 8167 	beq.w	8017038 <uxr_read_framed_msg+0x480>
 8016d6a:	3301      	adds	r3, #1
 8016d6c:	085a      	lsrs	r2, r3, #1
 8016d6e:	fba6 0202 	umull	r0, r2, r6, r2
 8016d72:	0892      	lsrs	r2, r2, #2
 8016d74:	202a      	movs	r0, #42	; 0x2a
 8016d76:	fb00 3312 	mls	r3, r0, r2, r3
 8016d7a:	297e      	cmp	r1, #126	; 0x7e
 8016d7c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016d80:	f000 8192 	beq.w	80170a8 <uxr_read_framed_msg+0x4f0>
 8016d84:	2304      	movs	r3, #4
 8016d86:	8621      	strh	r1, [r4, #48]	; 0x30
 8016d88:	7023      	strb	r3, [r4, #0]
 8016d8a:	e727      	b.n	8016bdc <uxr_read_framed_msg+0x24>
 8016d8c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8016d90:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8016d94:	4290      	cmp	r0, r2
 8016d96:	f000 80b1 	beq.w	8016efc <uxr_read_framed_msg+0x344>
 8016d9a:	18a3      	adds	r3, r4, r2
 8016d9c:	7899      	ldrb	r1, [r3, #2]
 8016d9e:	297d      	cmp	r1, #125	; 0x7d
 8016da0:	f000 8166 	beq.w	8017070 <uxr_read_framed_msg+0x4b8>
 8016da4:	3201      	adds	r2, #1
 8016da6:	0850      	lsrs	r0, r2, #1
 8016da8:	fba6 3000 	umull	r3, r0, r6, r0
 8016dac:	0880      	lsrs	r0, r0, #2
 8016dae:	232a      	movs	r3, #42	; 0x2a
 8016db0:	fb03 2210 	mls	r2, r3, r0, r2
 8016db4:	297e      	cmp	r1, #126	; 0x7e
 8016db6:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8016dba:	f000 8187 	beq.w	80170cc <uxr_read_framed_msg+0x514>
 8016dbe:	7863      	ldrb	r3, [r4, #1]
 8016dc0:	428b      	cmp	r3, r1
 8016dc2:	bf0c      	ite	eq
 8016dc4:	2303      	moveq	r3, #3
 8016dc6:	2300      	movne	r3, #0
 8016dc8:	7023      	strb	r3, [r4, #0]
 8016dca:	e707      	b.n	8016bdc <uxr_read_framed_msg+0x24>
 8016dcc:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8016dd0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8016dd4:	2200      	movs	r2, #0
 8016dd6:	4299      	cmp	r1, r3
 8016dd8:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8016ddc:	d063      	beq.n	8016ea6 <uxr_read_framed_msg+0x2ee>
 8016dde:	18e2      	adds	r2, r4, r3
 8016de0:	7892      	ldrb	r2, [r2, #2]
 8016de2:	2a7d      	cmp	r2, #125	; 0x7d
 8016de4:	f000 8107 	beq.w	8016ff6 <uxr_read_framed_msg+0x43e>
 8016de8:	1c59      	adds	r1, r3, #1
 8016dea:	084b      	lsrs	r3, r1, #1
 8016dec:	fba6 0303 	umull	r0, r3, r6, r3
 8016df0:	089b      	lsrs	r3, r3, #2
 8016df2:	202a      	movs	r0, #42	; 0x2a
 8016df4:	fb00 1313 	mls	r3, r0, r3, r1
 8016df8:	2a7e      	cmp	r2, #126	; 0x7e
 8016dfa:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8016dfe:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016e02:	d050      	beq.n	8016ea6 <uxr_read_framed_msg+0x2ee>
 8016e04:	2302      	movs	r3, #2
 8016e06:	7023      	strb	r3, [r4, #0]
 8016e08:	e6e8      	b.n	8016bdc <uxr_read_framed_msg+0x24>
 8016e0a:	f894 e02c 	ldrb.w	lr, [r4, #44]	; 0x2c
 8016e0e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8016e12:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8016e16:	1c51      	adds	r1, r2, #1
 8016e18:	084b      	lsrs	r3, r1, #1
 8016e1a:	fba6 5303 	umull	r5, r3, r6, r3
 8016e1e:	089b      	lsrs	r3, r3, #2
 8016e20:	fb0c 1313 	mls	r3, ip, r3, r1
 8016e24:	4596      	cmp	lr, r2
 8016e26:	eb04 0002 	add.w	r0, r4, r2
 8016e2a:	b2da      	uxtb	r2, r3
 8016e2c:	f43f af06 	beq.w	8016c3c <uxr_read_framed_msg+0x84>
 8016e30:	7883      	ldrb	r3, [r0, #2]
 8016e32:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8016e36:	2b7e      	cmp	r3, #126	; 0x7e
 8016e38:	d1ed      	bne.n	8016e16 <uxr_read_framed_msg+0x25e>
 8016e3a:	2301      	movs	r3, #1
 8016e3c:	7023      	strb	r3, [r4, #0]
 8016e3e:	e6cd      	b.n	8016bdc <uxr_read_framed_msg+0x24>
 8016e40:	f101 0b01 	add.w	fp, r1, #1
 8016e44:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8016e48:	fba6 e202 	umull	lr, r2, r6, r2
 8016e4c:	3102      	adds	r1, #2
 8016e4e:	0892      	lsrs	r2, r2, #2
 8016e50:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 8016e54:	fb0c b212 	mls	r2, ip, r2, fp
 8016e58:	fba6 9e0e 	umull	r9, lr, r6, lr
 8016e5c:	eb04 0b02 	add.w	fp, r4, r2
 8016e60:	b2d2      	uxtb	r2, r2
 8016e62:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 8016e66:	4290      	cmp	r0, r2
 8016e68:	fb0c 111e 	mls	r1, ip, lr, r1
 8016e6c:	f43f af40 	beq.w	8016cf0 <uxr_read_framed_msg+0x138>
 8016e70:	f89b e002 	ldrb.w	lr, [fp, #2]
 8016e74:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8016e78:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8016e7c:	d036      	beq.n	8016eec <uxr_read_framed_msg+0x334>
 8016e7e:	f08e 0e20 	eor.w	lr, lr, #32
 8016e82:	e711      	b.n	8016ca8 <uxr_read_framed_msg+0xf0>
 8016e84:	2301      	movs	r3, #1
 8016e86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016e88:	4649      	mov	r1, r9
 8016e8a:	e9cd 2300 	strd	r2, r3, [sp]
 8016e8e:	4620      	mov	r0, r4
 8016e90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016e92:	4652      	mov	r2, sl
 8016e94:	f7ff fe0e 	bl	8016ab4 <uxr_framing_read_transport>
 8016e98:	2800      	cmp	r0, #0
 8016e9a:	f43f aecf 	beq.w	8016c3c <uxr_read_framed_msg+0x84>
 8016e9e:	7823      	ldrb	r3, [r4, #0]
 8016ea0:	e69c      	b.n	8016bdc <uxr_read_framed_msg+0x24>
 8016ea2:	2302      	movs	r3, #2
 8016ea4:	e7ef      	b.n	8016e86 <uxr_read_framed_msg+0x2ce>
 8016ea6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016ea8:	2304      	movs	r3, #4
 8016eaa:	e9cd 2300 	strd	r2, r3, [sp]
 8016eae:	4649      	mov	r1, r9
 8016eb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016eb2:	4652      	mov	r2, sl
 8016eb4:	4620      	mov	r0, r4
 8016eb6:	f7ff fdfd 	bl	8016ab4 <uxr_framing_read_transport>
 8016eba:	2800      	cmp	r0, #0
 8016ebc:	d1ef      	bne.n	8016e9e <uxr_read_framed_msg+0x2e6>
 8016ebe:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8016ec2:	387e      	subs	r0, #126	; 0x7e
 8016ec4:	bf18      	it	ne
 8016ec6:	2001      	movne	r0, #1
 8016ec8:	2800      	cmp	r0, #0
 8016eca:	d0e8      	beq.n	8016e9e <uxr_read_framed_msg+0x2e6>
 8016ecc:	e6b6      	b.n	8016c3c <uxr_read_framed_msg+0x84>
 8016ece:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8016ed0:	2305      	movs	r3, #5
 8016ed2:	e9cd 5300 	strd	r5, r3, [sp]
 8016ed6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016ed8:	f7ff fdec 	bl	8016ab4 <uxr_framing_read_transport>
 8016edc:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8016ee0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8016ee4:	429a      	cmp	r2, r3
 8016ee6:	f43f aea9 	beq.w	8016c3c <uxr_read_framed_msg+0x84>
 8016eea:	e673      	b.n	8016bd4 <uxr_read_framed_msg+0x1c>
 8016eec:	429d      	cmp	r5, r3
 8016eee:	ee17 9a90 	vmov	r9, s15
 8016ef2:	f43f af02 	beq.w	8016cfa <uxr_read_framed_msg+0x142>
 8016ef6:	2301      	movs	r3, #1
 8016ef8:	7023      	strb	r3, [r4, #0]
 8016efa:	e66f      	b.n	8016bdc <uxr_read_framed_msg+0x24>
 8016efc:	2303      	movs	r3, #3
 8016efe:	e7c2      	b.n	8016e86 <uxr_read_framed_msg+0x2ce>
 8016f00:	2305      	movs	r3, #5
 8016f02:	7023      	strb	r3, [r4, #0]
 8016f04:	e66a      	b.n	8016bdc <uxr_read_framed_msg+0x24>
 8016f06:	bf00      	nop
 8016f08:	30c30c31 	.word	0x30c30c31
 8016f0c:	080196ec 	.word	0x080196ec
 8016f10:	ee17 9a90 	vmov	r9, s15
 8016f14:	f43f aef1 	beq.w	8016cfa <uxr_read_framed_msg+0x142>
 8016f18:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8016f1c:	d08d      	beq.n	8016e3a <uxr_read_framed_msg+0x282>
 8016f1e:	1aeb      	subs	r3, r5, r3
 8016f20:	3302      	adds	r3, #2
 8016f22:	9301      	str	r3, [sp, #4]
 8016f24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f26:	9300      	str	r3, [sp, #0]
 8016f28:	4652      	mov	r2, sl
 8016f2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f2c:	4649      	mov	r1, r9
 8016f2e:	4620      	mov	r0, r4
 8016f30:	f7ff fdc0 	bl	8016ab4 <uxr_framing_read_transport>
 8016f34:	fab0 f080 	clz	r0, r0
 8016f38:	0940      	lsrs	r0, r0, #5
 8016f3a:	2800      	cmp	r0, #0
 8016f3c:	d0af      	beq.n	8016e9e <uxr_read_framed_msg+0x2e6>
 8016f3e:	e67d      	b.n	8016c3c <uxr_read_framed_msg+0x84>
 8016f40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016f42:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8016f46:	7013      	strb	r3, [r2, #0]
 8016f48:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8016f4a:	b003      	add	sp, #12
 8016f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f50:	1c59      	adds	r1, r3, #1
 8016f52:	084a      	lsrs	r2, r1, #1
 8016f54:	fba6 5202 	umull	r5, r2, r6, r2
 8016f58:	0892      	lsrs	r2, r2, #2
 8016f5a:	252a      	movs	r5, #42	; 0x2a
 8016f5c:	fb05 1212 	mls	r2, r5, r2, r1
 8016f60:	b2d1      	uxtb	r1, r2
 8016f62:	4288      	cmp	r0, r1
 8016f64:	d08e      	beq.n	8016e84 <uxr_read_framed_msg+0x2cc>
 8016f66:	3302      	adds	r3, #2
 8016f68:	4422      	add	r2, r4
 8016f6a:	0858      	lsrs	r0, r3, #1
 8016f6c:	fba6 1000 	umull	r1, r0, r6, r0
 8016f70:	7891      	ldrb	r1, [r2, #2]
 8016f72:	0882      	lsrs	r2, r0, #2
 8016f74:	fb05 3312 	mls	r3, r5, r2, r3
 8016f78:	297e      	cmp	r1, #126	; 0x7e
 8016f7a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016f7e:	f000 80a3 	beq.w	80170c8 <uxr_read_framed_msg+0x510>
 8016f82:	f081 0120 	eor.w	r1, r1, #32
 8016f86:	e64e      	b.n	8016c26 <uxr_read_framed_msg+0x6e>
 8016f88:	1c59      	adds	r1, r3, #1
 8016f8a:	084a      	lsrs	r2, r1, #1
 8016f8c:	fba6 5202 	umull	r5, r2, r6, r2
 8016f90:	0892      	lsrs	r2, r2, #2
 8016f92:	252a      	movs	r5, #42	; 0x2a
 8016f94:	fb05 1212 	mls	r2, r5, r2, r1
 8016f98:	b2d1      	uxtb	r1, r2
 8016f9a:	4288      	cmp	r0, r1
 8016f9c:	d081      	beq.n	8016ea2 <uxr_read_framed_msg+0x2ea>
 8016f9e:	3302      	adds	r3, #2
 8016fa0:	4422      	add	r2, r4
 8016fa2:	0858      	lsrs	r0, r3, #1
 8016fa4:	fba6 1000 	umull	r1, r0, r6, r0
 8016fa8:	7891      	ldrb	r1, [r2, #2]
 8016faa:	0882      	lsrs	r2, r0, #2
 8016fac:	fb05 3312 	mls	r3, r5, r2, r3
 8016fb0:	297e      	cmp	r1, #126	; 0x7e
 8016fb2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016fb6:	d077      	beq.n	80170a8 <uxr_read_framed_msg+0x4f0>
 8016fb8:	f081 0120 	eor.w	r1, r1, #32
 8016fbc:	e65b      	b.n	8016c76 <uxr_read_framed_msg+0xbe>
 8016fbe:	1c59      	adds	r1, r3, #1
 8016fc0:	084a      	lsrs	r2, r1, #1
 8016fc2:	fba6 5202 	umull	r5, r2, r6, r2
 8016fc6:	0892      	lsrs	r2, r2, #2
 8016fc8:	252a      	movs	r5, #42	; 0x2a
 8016fca:	fb05 1212 	mls	r2, r5, r2, r1
 8016fce:	b2d1      	uxtb	r1, r2
 8016fd0:	4288      	cmp	r0, r1
 8016fd2:	f43f af57 	beq.w	8016e84 <uxr_read_framed_msg+0x2cc>
 8016fd6:	3302      	adds	r3, #2
 8016fd8:	4422      	add	r2, r4
 8016fda:	0858      	lsrs	r0, r3, #1
 8016fdc:	fba6 1000 	umull	r1, r0, r6, r0
 8016fe0:	7891      	ldrb	r1, [r2, #2]
 8016fe2:	0882      	lsrs	r2, r0, #2
 8016fe4:	fb05 3312 	mls	r3, r5, r2, r3
 8016fe8:	297e      	cmp	r1, #126	; 0x7e
 8016fea:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016fee:	d06b      	beq.n	80170c8 <uxr_read_framed_msg+0x510>
 8016ff0:	f081 0120 	eor.w	r1, r1, #32
 8016ff4:	e69d      	b.n	8016d32 <uxr_read_framed_msg+0x17a>
 8016ff6:	1c5d      	adds	r5, r3, #1
 8016ff8:	086a      	lsrs	r2, r5, #1
 8016ffa:	fba6 0202 	umull	r0, r2, r6, r2
 8016ffe:	0892      	lsrs	r2, r2, #2
 8017000:	202a      	movs	r0, #42	; 0x2a
 8017002:	fb00 5212 	mls	r2, r0, r2, r5
 8017006:	b2d5      	uxtb	r5, r2
 8017008:	42a9      	cmp	r1, r5
 801700a:	f43f af4c 	beq.w	8016ea6 <uxr_read_framed_msg+0x2ee>
 801700e:	3302      	adds	r3, #2
 8017010:	4422      	add	r2, r4
 8017012:	0859      	lsrs	r1, r3, #1
 8017014:	fba6 5101 	umull	r5, r1, r6, r1
 8017018:	7895      	ldrb	r5, [r2, #2]
 801701a:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 801701e:	088a      	lsrs	r2, r1, #2
 8017020:	fb00 3312 	mls	r3, r0, r2, r3
 8017024:	2d7e      	cmp	r5, #126	; 0x7e
 8017026:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801702a:	f43f af3c 	beq.w	8016ea6 <uxr_read_framed_msg+0x2ee>
 801702e:	f085 0520 	eor.w	r5, r5, #32
 8017032:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 8017036:	e6e5      	b.n	8016e04 <uxr_read_framed_msg+0x24c>
 8017038:	1c59      	adds	r1, r3, #1
 801703a:	084a      	lsrs	r2, r1, #1
 801703c:	fba6 5202 	umull	r5, r2, r6, r2
 8017040:	0892      	lsrs	r2, r2, #2
 8017042:	252a      	movs	r5, #42	; 0x2a
 8017044:	fb05 1212 	mls	r2, r5, r2, r1
 8017048:	b2d1      	uxtb	r1, r2
 801704a:	4288      	cmp	r0, r1
 801704c:	f43f af29 	beq.w	8016ea2 <uxr_read_framed_msg+0x2ea>
 8017050:	3302      	adds	r3, #2
 8017052:	4422      	add	r2, r4
 8017054:	0858      	lsrs	r0, r3, #1
 8017056:	fba6 1000 	umull	r1, r0, r6, r0
 801705a:	7891      	ldrb	r1, [r2, #2]
 801705c:	0882      	lsrs	r2, r0, #2
 801705e:	fb05 3312 	mls	r3, r5, r2, r3
 8017062:	297e      	cmp	r1, #126	; 0x7e
 8017064:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017068:	d01e      	beq.n	80170a8 <uxr_read_framed_msg+0x4f0>
 801706a:	f081 0120 	eor.w	r1, r1, #32
 801706e:	e689      	b.n	8016d84 <uxr_read_framed_msg+0x1cc>
 8017070:	1c51      	adds	r1, r2, #1
 8017072:	084b      	lsrs	r3, r1, #1
 8017074:	fba6 5303 	umull	r5, r3, r6, r3
 8017078:	089b      	lsrs	r3, r3, #2
 801707a:	252a      	movs	r5, #42	; 0x2a
 801707c:	fb05 1313 	mls	r3, r5, r3, r1
 8017080:	b2d9      	uxtb	r1, r3
 8017082:	4288      	cmp	r0, r1
 8017084:	f43f af3a 	beq.w	8016efc <uxr_read_framed_msg+0x344>
 8017088:	3202      	adds	r2, #2
 801708a:	4423      	add	r3, r4
 801708c:	0850      	lsrs	r0, r2, #1
 801708e:	789b      	ldrb	r3, [r3, #2]
 8017090:	fba6 1000 	umull	r1, r0, r6, r0
 8017094:	0880      	lsrs	r0, r0, #2
 8017096:	fb05 2210 	mls	r2, r5, r0, r2
 801709a:	2b7e      	cmp	r3, #126	; 0x7e
 801709c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80170a0:	d014      	beq.n	80170cc <uxr_read_framed_msg+0x514>
 80170a2:	f083 0120 	eor.w	r1, r3, #32
 80170a6:	e68a      	b.n	8016dbe <uxr_read_framed_msg+0x206>
 80170a8:	2302      	movs	r3, #2
 80170aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80170ac:	4649      	mov	r1, r9
 80170ae:	e9cd 2300 	strd	r2, r3, [sp]
 80170b2:	4620      	mov	r0, r4
 80170b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80170b6:	4652      	mov	r2, sl
 80170b8:	f7ff fcfc 	bl	8016ab4 <uxr_framing_read_transport>
 80170bc:	2800      	cmp	r0, #0
 80170be:	f47f aeee 	bne.w	8016e9e <uxr_read_framed_msg+0x2e6>
 80170c2:	2301      	movs	r3, #1
 80170c4:	7023      	strb	r3, [r4, #0]
 80170c6:	e589      	b.n	8016bdc <uxr_read_framed_msg+0x24>
 80170c8:	2301      	movs	r3, #1
 80170ca:	e7ee      	b.n	80170aa <uxr_read_framed_msg+0x4f2>
 80170cc:	2303      	movs	r3, #3
 80170ce:	e7ec      	b.n	80170aa <uxr_read_framed_msg+0x4f2>
 80170d0:	ee17 9a90 	vmov	r9, s15
 80170d4:	e6b1      	b.n	8016e3a <uxr_read_framed_msg+0x282>
 80170d6:	bf00      	nop

080170d8 <rcl_get_default_domain_id>:
 80170d8:	b530      	push	{r4, r5, lr}
 80170da:	b083      	sub	sp, #12
 80170dc:	2300      	movs	r3, #0
 80170de:	9300      	str	r3, [sp, #0]
 80170e0:	b1d0      	cbz	r0, 8017118 <rcl_get_default_domain_id+0x40>
 80170e2:	4604      	mov	r4, r0
 80170e4:	4669      	mov	r1, sp
 80170e6:	4815      	ldr	r0, [pc, #84]	; (801713c <rcl_get_default_domain_id+0x64>)
 80170e8:	f7fc fe6c 	bl	8013dc4 <rcutils_get_env>
 80170ec:	4602      	mov	r2, r0
 80170ee:	b110      	cbz	r0, 80170f6 <rcl_get_default_domain_id+0x1e>
 80170f0:	2001      	movs	r0, #1
 80170f2:	b003      	add	sp, #12
 80170f4:	bd30      	pop	{r4, r5, pc}
 80170f6:	9b00      	ldr	r3, [sp, #0]
 80170f8:	b18b      	cbz	r3, 801711e <rcl_get_default_domain_id+0x46>
 80170fa:	7818      	ldrb	r0, [r3, #0]
 80170fc:	2800      	cmp	r0, #0
 80170fe:	d0f8      	beq.n	80170f2 <rcl_get_default_domain_id+0x1a>
 8017100:	4618      	mov	r0, r3
 8017102:	a901      	add	r1, sp, #4
 8017104:	9201      	str	r2, [sp, #4]
 8017106:	f000 fc45 	bl	8017994 <strtoul>
 801710a:	4605      	mov	r5, r0
 801710c:	b150      	cbz	r0, 8017124 <rcl_get_default_domain_id+0x4c>
 801710e:	1c43      	adds	r3, r0, #1
 8017110:	d00d      	beq.n	801712e <rcl_get_default_domain_id+0x56>
 8017112:	6025      	str	r5, [r4, #0]
 8017114:	2000      	movs	r0, #0
 8017116:	e7ec      	b.n	80170f2 <rcl_get_default_domain_id+0x1a>
 8017118:	200b      	movs	r0, #11
 801711a:	b003      	add	sp, #12
 801711c:	bd30      	pop	{r4, r5, pc}
 801711e:	4618      	mov	r0, r3
 8017120:	b003      	add	sp, #12
 8017122:	bd30      	pop	{r4, r5, pc}
 8017124:	9b01      	ldr	r3, [sp, #4]
 8017126:	781b      	ldrb	r3, [r3, #0]
 8017128:	2b00      	cmp	r3, #0
 801712a:	d0f2      	beq.n	8017112 <rcl_get_default_domain_id+0x3a>
 801712c:	e7e0      	b.n	80170f0 <rcl_get_default_domain_id+0x18>
 801712e:	f001 f80d 	bl	801814c <__errno>
 8017132:	6803      	ldr	r3, [r0, #0]
 8017134:	2b22      	cmp	r3, #34	; 0x22
 8017136:	d1ec      	bne.n	8017112 <rcl_get_default_domain_id+0x3a>
 8017138:	e7da      	b.n	80170f0 <rcl_get_default_domain_id+0x18>
 801713a:	bf00      	nop
 801713c:	080198ec 	.word	0x080198ec

08017140 <rcl_get_zero_initialized_guard_condition>:
 8017140:	4a03      	ldr	r2, [pc, #12]	; (8017150 <rcl_get_zero_initialized_guard_condition+0x10>)
 8017142:	4603      	mov	r3, r0
 8017144:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017148:	e883 0003 	stmia.w	r3, {r0, r1}
 801714c:	4618      	mov	r0, r3
 801714e:	4770      	bx	lr
 8017150:	080198fc 	.word	0x080198fc

08017154 <rcl_guard_condition_init_from_rmw>:
 8017154:	b082      	sub	sp, #8
 8017156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801715a:	b086      	sub	sp, #24
 801715c:	ac0c      	add	r4, sp, #48	; 0x30
 801715e:	4684      	mov	ip, r0
 8017160:	f844 3f04 	str.w	r3, [r4, #4]!
 8017164:	460f      	mov	r7, r1
 8017166:	4690      	mov	r8, r2
 8017168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801716a:	ad01      	add	r5, sp, #4
 801716c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801716e:	6823      	ldr	r3, [r4, #0]
 8017170:	602b      	str	r3, [r5, #0]
 8017172:	a801      	add	r0, sp, #4
 8017174:	4664      	mov	r4, ip
 8017176:	f7f7 fc77 	bl	800ea68 <rcutils_allocator_is_valid>
 801717a:	b328      	cbz	r0, 80171c8 <rcl_guard_condition_init_from_rmw+0x74>
 801717c:	b324      	cbz	r4, 80171c8 <rcl_guard_condition_init_from_rmw+0x74>
 801717e:	6866      	ldr	r6, [r4, #4]
 8017180:	b9e6      	cbnz	r6, 80171bc <rcl_guard_condition_init_from_rmw+0x68>
 8017182:	f1b8 0f00 	cmp.w	r8, #0
 8017186:	d01f      	beq.n	80171c8 <rcl_guard_condition_init_from_rmw+0x74>
 8017188:	4640      	mov	r0, r8
 801718a:	f7fb fcc7 	bl	8012b1c <rcl_context_is_valid>
 801718e:	b308      	cbz	r0, 80171d4 <rcl_guard_condition_init_from_rmw+0x80>
 8017190:	9b01      	ldr	r3, [sp, #4]
 8017192:	9905      	ldr	r1, [sp, #20]
 8017194:	201c      	movs	r0, #28
 8017196:	4798      	blx	r3
 8017198:	4605      	mov	r5, r0
 801719a:	6060      	str	r0, [r4, #4]
 801719c:	b340      	cbz	r0, 80171f0 <rcl_guard_condition_init_from_rmw+0x9c>
 801719e:	b1df      	cbz	r7, 80171d8 <rcl_guard_condition_init_from_rmw+0x84>
 80171a0:	6007      	str	r7, [r0, #0]
 80171a2:	7106      	strb	r6, [r0, #4]
 80171a4:	ac01      	add	r4, sp, #4
 80171a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80171a8:	3508      	adds	r5, #8
 80171aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80171ac:	6823      	ldr	r3, [r4, #0]
 80171ae:	602b      	str	r3, [r5, #0]
 80171b0:	2000      	movs	r0, #0
 80171b2:	b006      	add	sp, #24
 80171b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80171b8:	b002      	add	sp, #8
 80171ba:	4770      	bx	lr
 80171bc:	2064      	movs	r0, #100	; 0x64
 80171be:	b006      	add	sp, #24
 80171c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80171c4:	b002      	add	sp, #8
 80171c6:	4770      	bx	lr
 80171c8:	200b      	movs	r0, #11
 80171ca:	b006      	add	sp, #24
 80171cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80171d0:	b002      	add	sp, #8
 80171d2:	4770      	bx	lr
 80171d4:	2065      	movs	r0, #101	; 0x65
 80171d6:	e7f2      	b.n	80171be <rcl_guard_condition_init_from_rmw+0x6a>
 80171d8:	f8d8 0000 	ldr.w	r0, [r8]
 80171dc:	3028      	adds	r0, #40	; 0x28
 80171de:	f000 f979 	bl	80174d4 <rmw_create_guard_condition>
 80171e2:	6028      	str	r0, [r5, #0]
 80171e4:	6865      	ldr	r5, [r4, #4]
 80171e6:	682e      	ldr	r6, [r5, #0]
 80171e8:	b126      	cbz	r6, 80171f4 <rcl_guard_condition_init_from_rmw+0xa0>
 80171ea:	2301      	movs	r3, #1
 80171ec:	712b      	strb	r3, [r5, #4]
 80171ee:	e7d9      	b.n	80171a4 <rcl_guard_condition_init_from_rmw+0x50>
 80171f0:	200a      	movs	r0, #10
 80171f2:	e7e4      	b.n	80171be <rcl_guard_condition_init_from_rmw+0x6a>
 80171f4:	4628      	mov	r0, r5
 80171f6:	9b02      	ldr	r3, [sp, #8]
 80171f8:	9905      	ldr	r1, [sp, #20]
 80171fa:	4798      	blx	r3
 80171fc:	6066      	str	r6, [r4, #4]
 80171fe:	2001      	movs	r0, #1
 8017200:	e7dd      	b.n	80171be <rcl_guard_condition_init_from_rmw+0x6a>
 8017202:	bf00      	nop

08017204 <rcl_guard_condition_fini>:
 8017204:	b570      	push	{r4, r5, r6, lr}
 8017206:	b082      	sub	sp, #8
 8017208:	b1f0      	cbz	r0, 8017248 <rcl_guard_condition_fini+0x44>
 801720a:	4604      	mov	r4, r0
 801720c:	6840      	ldr	r0, [r0, #4]
 801720e:	b158      	cbz	r0, 8017228 <rcl_guard_condition_fini+0x24>
 8017210:	6803      	ldr	r3, [r0, #0]
 8017212:	68c6      	ldr	r6, [r0, #12]
 8017214:	6981      	ldr	r1, [r0, #24]
 8017216:	b15b      	cbz	r3, 8017230 <rcl_guard_condition_fini+0x2c>
 8017218:	7905      	ldrb	r5, [r0, #4]
 801721a:	b95d      	cbnz	r5, 8017234 <rcl_guard_condition_fini+0x30>
 801721c:	47b0      	blx	r6
 801721e:	2300      	movs	r3, #0
 8017220:	4628      	mov	r0, r5
 8017222:	6063      	str	r3, [r4, #4]
 8017224:	b002      	add	sp, #8
 8017226:	bd70      	pop	{r4, r5, r6, pc}
 8017228:	4605      	mov	r5, r0
 801722a:	4628      	mov	r0, r5
 801722c:	b002      	add	sp, #8
 801722e:	bd70      	pop	{r4, r5, r6, pc}
 8017230:	461d      	mov	r5, r3
 8017232:	e7f3      	b.n	801721c <rcl_guard_condition_fini+0x18>
 8017234:	4618      	mov	r0, r3
 8017236:	9101      	str	r1, [sp, #4]
 8017238:	f000 f960 	bl	80174fc <rmw_destroy_guard_condition>
 801723c:	1e05      	subs	r5, r0, #0
 801723e:	9901      	ldr	r1, [sp, #4]
 8017240:	6860      	ldr	r0, [r4, #4]
 8017242:	bf18      	it	ne
 8017244:	2501      	movne	r5, #1
 8017246:	e7e9      	b.n	801721c <rcl_guard_condition_fini+0x18>
 8017248:	250b      	movs	r5, #11
 801724a:	4628      	mov	r0, r5
 801724c:	b002      	add	sp, #8
 801724e:	bd70      	pop	{r4, r5, r6, pc}

08017250 <rcl_guard_condition_get_default_options>:
 8017250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017252:	b087      	sub	sp, #28
 8017254:	4607      	mov	r7, r0
 8017256:	466c      	mov	r4, sp
 8017258:	4668      	mov	r0, sp
 801725a:	f7f7 fbf7 	bl	800ea4c <rcutils_get_default_allocator>
 801725e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017260:	4d07      	ldr	r5, [pc, #28]	; (8017280 <rcl_guard_condition_get_default_options+0x30>)
 8017262:	f8d4 c000 	ldr.w	ip, [r4]
 8017266:	462e      	mov	r6, r5
 8017268:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801726a:	462c      	mov	r4, r5
 801726c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801726e:	463c      	mov	r4, r7
 8017270:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017272:	4638      	mov	r0, r7
 8017274:	f8c6 c000 	str.w	ip, [r6]
 8017278:	f8c4 c000 	str.w	ip, [r4]
 801727c:	b007      	add	sp, #28
 801727e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017280:	2000a05c 	.word	0x2000a05c

08017284 <on_status>:
 8017284:	b082      	sub	sp, #8
 8017286:	b002      	add	sp, #8
 8017288:	4770      	bx	lr
 801728a:	bf00      	nop

0801728c <on_topic>:
 801728c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017290:	4a21      	ldr	r2, [pc, #132]	; (8017318 <on_topic+0x8c>)
 8017292:	b094      	sub	sp, #80	; 0x50
 8017294:	6812      	ldr	r2, [r2, #0]
 8017296:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8017298:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801729c:	9113      	str	r1, [sp, #76]	; 0x4c
 801729e:	9312      	str	r3, [sp, #72]	; 0x48
 80172a0:	b3ba      	cbz	r2, 8017312 <on_topic+0x86>
 80172a2:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80172a6:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 80172aa:	e001      	b.n	80172b0 <on_topic+0x24>
 80172ac:	6892      	ldr	r2, [r2, #8]
 80172ae:	b382      	cbz	r2, 8017312 <on_topic+0x86>
 80172b0:	68d4      	ldr	r4, [r2, #12]
 80172b2:	8aa3      	ldrh	r3, [r4, #20]
 80172b4:	428b      	cmp	r3, r1
 80172b6:	d1f9      	bne.n	80172ac <on_topic+0x20>
 80172b8:	7da3      	ldrb	r3, [r4, #22]
 80172ba:	4283      	cmp	r3, r0
 80172bc:	d1f6      	bne.n	80172ac <on_topic+0x20>
 80172be:	2248      	movs	r2, #72	; 0x48
 80172c0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80172c4:	4668      	mov	r0, sp
 80172c6:	f000 ff76 	bl	80181b6 <memcpy>
 80172ca:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 80172ce:	4620      	mov	r0, r4
 80172d0:	f7f8 fa58 	bl	800f784 <rmw_uxrce_get_static_input_buffer_for_entity>
 80172d4:	4607      	mov	r7, r0
 80172d6:	b1e0      	cbz	r0, 8017312 <on_topic+0x86>
 80172d8:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80172dc:	462a      	mov	r2, r5
 80172de:	4630      	mov	r0, r6
 80172e0:	f108 0110 	add.w	r1, r8, #16
 80172e4:	f7fd fd08 	bl	8014cf8 <ucdr_deserialize_array_uint8_t>
 80172e8:	b930      	cbnz	r0, 80172f8 <on_topic+0x6c>
 80172ea:	480c      	ldr	r0, [pc, #48]	; (801731c <on_topic+0x90>)
 80172ec:	4639      	mov	r1, r7
 80172ee:	b014      	add	sp, #80	; 0x50
 80172f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80172f4:	f7fc bfda 	b.w	80142ac <put_memory>
 80172f8:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 80172fc:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 8017300:	f7fd fc24 	bl	8014b4c <rmw_uros_epoch_nanos>
 8017304:	f608 0218 	addw	r2, r8, #2072	; 0x818
 8017308:	2305      	movs	r3, #5
 801730a:	e9c2 0100 	strd	r0, r1, [r2]
 801730e:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8017312:	b014      	add	sp, #80	; 0x50
 8017314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017318:	2000d464 	.word	0x2000d464
 801731c:	2000a1f8 	.word	0x2000a1f8

08017320 <on_request>:
 8017320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017324:	4822      	ldr	r0, [pc, #136]	; (80173b0 <on_request+0x90>)
 8017326:	b095      	sub	sp, #84	; 0x54
 8017328:	9113      	str	r1, [sp, #76]	; 0x4c
 801732a:	6801      	ldr	r1, [r0, #0]
 801732c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801732e:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 8017332:	2900      	cmp	r1, #0
 8017334:	d039      	beq.n	80173aa <on_request+0x8a>
 8017336:	461d      	mov	r5, r3
 8017338:	e001      	b.n	801733e <on_request+0x1e>
 801733a:	6889      	ldr	r1, [r1, #8]
 801733c:	b3a9      	cbz	r1, 80173aa <on_request+0x8a>
 801733e:	68cc      	ldr	r4, [r1, #12]
 8017340:	8b20      	ldrh	r0, [r4, #24]
 8017342:	4290      	cmp	r0, r2
 8017344:	d1f9      	bne.n	801733a <on_request+0x1a>
 8017346:	2248      	movs	r2, #72	; 0x48
 8017348:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801734c:	4668      	mov	r0, sp
 801734e:	f000 ff32 	bl	80181b6 <memcpy>
 8017352:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8017356:	4620      	mov	r0, r4
 8017358:	f7f8 fa14 	bl	800f784 <rmw_uxrce_get_static_input_buffer_for_entity>
 801735c:	4680      	mov	r8, r0
 801735e:	b320      	cbz	r0, 80173aa <on_request+0x8a>
 8017360:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8017364:	4632      	mov	r2, r6
 8017366:	4638      	mov	r0, r7
 8017368:	f109 0110 	add.w	r1, r9, #16
 801736c:	f7fd fcc4 	bl	8014cf8 <ucdr_deserialize_array_uint8_t>
 8017370:	b930      	cbnz	r0, 8017380 <on_request+0x60>
 8017372:	4810      	ldr	r0, [pc, #64]	; (80173b4 <on_request+0x94>)
 8017374:	4641      	mov	r1, r8
 8017376:	b015      	add	sp, #84	; 0x54
 8017378:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801737c:	f7fc bf96 	b.w	80142ac <put_memory>
 8017380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017382:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8017386:	f609 0428 	addw	r4, r9, #2088	; 0x828
 801738a:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 801738e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017390:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017394:	e884 0003 	stmia.w	r4, {r0, r1}
 8017398:	f7fd fbd8 	bl	8014b4c <rmw_uros_epoch_nanos>
 801739c:	f609 0218 	addw	r2, r9, #2072	; 0x818
 80173a0:	2303      	movs	r3, #3
 80173a2:	e9c2 0100 	strd	r0, r1, [r2]
 80173a6:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 80173aa:	b015      	add	sp, #84	; 0x54
 80173ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80173b0:	2000d454 	.word	0x2000d454
 80173b4:	2000a1f8 	.word	0x2000a1f8

080173b8 <on_reply>:
 80173b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80173bc:	4821      	ldr	r0, [pc, #132]	; (8017444 <on_reply+0x8c>)
 80173be:	b095      	sub	sp, #84	; 0x54
 80173c0:	9113      	str	r1, [sp, #76]	; 0x4c
 80173c2:	6801      	ldr	r1, [r0, #0]
 80173c4:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80173c6:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 80173ca:	b3b9      	cbz	r1, 801743c <on_reply+0x84>
 80173cc:	461d      	mov	r5, r3
 80173ce:	e001      	b.n	80173d4 <on_reply+0x1c>
 80173d0:	6889      	ldr	r1, [r1, #8]
 80173d2:	b399      	cbz	r1, 801743c <on_reply+0x84>
 80173d4:	68cc      	ldr	r4, [r1, #12]
 80173d6:	8b20      	ldrh	r0, [r4, #24]
 80173d8:	4290      	cmp	r0, r2
 80173da:	d1f9      	bne.n	80173d0 <on_reply+0x18>
 80173dc:	2248      	movs	r2, #72	; 0x48
 80173de:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80173e2:	4668      	mov	r0, sp
 80173e4:	f000 fee7 	bl	80181b6 <memcpy>
 80173e8:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80173ec:	4620      	mov	r0, r4
 80173ee:	f7f8 f9c9 	bl	800f784 <rmw_uxrce_get_static_input_buffer_for_entity>
 80173f2:	4680      	mov	r8, r0
 80173f4:	b310      	cbz	r0, 801743c <on_reply+0x84>
 80173f6:	f8d0 900c 	ldr.w	r9, [r0, #12]
 80173fa:	4632      	mov	r2, r6
 80173fc:	4638      	mov	r0, r7
 80173fe:	f109 0110 	add.w	r1, r9, #16
 8017402:	f7fd fc79 	bl	8014cf8 <ucdr_deserialize_array_uint8_t>
 8017406:	b930      	cbnz	r0, 8017416 <on_reply+0x5e>
 8017408:	480f      	ldr	r0, [pc, #60]	; (8017448 <on_reply+0x90>)
 801740a:	4641      	mov	r1, r8
 801740c:	b015      	add	sp, #84	; 0x54
 801740e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017412:	f7fc bf4b 	b.w	80142ac <put_memory>
 8017416:	b2aa      	uxth	r2, r5
 8017418:	2300      	movs	r3, #0
 801741a:	f609 0128 	addw	r1, r9, #2088	; 0x828
 801741e:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8017422:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 8017426:	e9c1 2300 	strd	r2, r3, [r1]
 801742a:	f7fd fb8f 	bl	8014b4c <rmw_uros_epoch_nanos>
 801742e:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8017432:	2304      	movs	r3, #4
 8017434:	e9c2 0100 	strd	r0, r1, [r2]
 8017438:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 801743c:	b015      	add	sp, #84	; 0x54
 801743e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017442:	bf00      	nop
 8017444:	2000aa88 	.word	0x2000aa88
 8017448:	2000a1f8 	.word	0x2000a1f8

0801744c <rmw_destroy_client>:
 801744c:	b570      	push	{r4, r5, r6, lr}
 801744e:	b128      	cbz	r0, 801745c <rmw_destroy_client+0x10>
 8017450:	4604      	mov	r4, r0
 8017452:	6800      	ldr	r0, [r0, #0]
 8017454:	460d      	mov	r5, r1
 8017456:	f7f8 fa61 	bl	800f91c <is_uxrce_rmw_identifier_valid>
 801745a:	b910      	cbnz	r0, 8017462 <rmw_destroy_client+0x16>
 801745c:	2401      	movs	r4, #1
 801745e:	4620      	mov	r0, r4
 8017460:	bd70      	pop	{r4, r5, r6, pc}
 8017462:	6863      	ldr	r3, [r4, #4]
 8017464:	2b00      	cmp	r3, #0
 8017466:	d0f9      	beq.n	801745c <rmw_destroy_client+0x10>
 8017468:	2d00      	cmp	r5, #0
 801746a:	d0f7      	beq.n	801745c <rmw_destroy_client+0x10>
 801746c:	6828      	ldr	r0, [r5, #0]
 801746e:	f7f8 fa55 	bl	800f91c <is_uxrce_rmw_identifier_valid>
 8017472:	2800      	cmp	r0, #0
 8017474:	d0f2      	beq.n	801745c <rmw_destroy_client+0x10>
 8017476:	686e      	ldr	r6, [r5, #4]
 8017478:	2e00      	cmp	r6, #0
 801747a:	d0ef      	beq.n	801745c <rmw_destroy_client+0x10>
 801747c:	6864      	ldr	r4, [r4, #4]
 801747e:	6932      	ldr	r2, [r6, #16]
 8017480:	6920      	ldr	r0, [r4, #16]
 8017482:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017486:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801748a:	6819      	ldr	r1, [r3, #0]
 801748c:	f7f8 fe4c 	bl	8010128 <uxr_buffer_cancel_data>
 8017490:	4602      	mov	r2, r0
 8017492:	6920      	ldr	r0, [r4, #16]
 8017494:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017498:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801749c:	f7f8 f9be 	bl	800f81c <run_xrce_session>
 80174a0:	6920      	ldr	r0, [r4, #16]
 80174a2:	6932      	ldr	r2, [r6, #16]
 80174a4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80174a8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80174ac:	6819      	ldr	r1, [r3, #0]
 80174ae:	f7f8 fbd1 	bl	800fc54 <uxr_buffer_delete_entity>
 80174b2:	4602      	mov	r2, r0
 80174b4:	6920      	ldr	r0, [r4, #16]
 80174b6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80174ba:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80174be:	f7f8 f9ad 	bl	800f81c <run_xrce_session>
 80174c2:	2800      	cmp	r0, #0
 80174c4:	4628      	mov	r0, r5
 80174c6:	bf14      	ite	ne
 80174c8:	2400      	movne	r4, #0
 80174ca:	2402      	moveq	r4, #2
 80174cc:	f7f8 f938 	bl	800f740 <rmw_uxrce_fini_client_memory>
 80174d0:	e7c5      	b.n	801745e <rmw_destroy_client+0x12>
 80174d2:	bf00      	nop

080174d4 <rmw_create_guard_condition>:
 80174d4:	b538      	push	{r3, r4, r5, lr}
 80174d6:	4605      	mov	r5, r0
 80174d8:	4807      	ldr	r0, [pc, #28]	; (80174f8 <rmw_create_guard_condition+0x24>)
 80174da:	f7fc fed7 	bl	801428c <get_memory>
 80174de:	b148      	cbz	r0, 80174f4 <rmw_create_guard_condition+0x20>
 80174e0:	68c4      	ldr	r4, [r0, #12]
 80174e2:	2300      	movs	r3, #0
 80174e4:	61e5      	str	r5, [r4, #28]
 80174e6:	7423      	strb	r3, [r4, #16]
 80174e8:	f7fc fef4 	bl	80142d4 <rmw_get_implementation_identifier>
 80174ec:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80174f0:	f104 0014 	add.w	r0, r4, #20
 80174f4:	bd38      	pop	{r3, r4, r5, pc}
 80174f6:	bf00      	nop
 80174f8:	2000d380 	.word	0x2000d380

080174fc <rmw_destroy_guard_condition>:
 80174fc:	b508      	push	{r3, lr}
 80174fe:	4b08      	ldr	r3, [pc, #32]	; (8017520 <rmw_destroy_guard_condition+0x24>)
 8017500:	6819      	ldr	r1, [r3, #0]
 8017502:	b911      	cbnz	r1, 801750a <rmw_destroy_guard_condition+0xe>
 8017504:	e00a      	b.n	801751c <rmw_destroy_guard_condition+0x20>
 8017506:	6889      	ldr	r1, [r1, #8]
 8017508:	b141      	cbz	r1, 801751c <rmw_destroy_guard_condition+0x20>
 801750a:	68cb      	ldr	r3, [r1, #12]
 801750c:	3314      	adds	r3, #20
 801750e:	4298      	cmp	r0, r3
 8017510:	d1f9      	bne.n	8017506 <rmw_destroy_guard_condition+0xa>
 8017512:	4803      	ldr	r0, [pc, #12]	; (8017520 <rmw_destroy_guard_condition+0x24>)
 8017514:	f7fc feca 	bl	80142ac <put_memory>
 8017518:	2000      	movs	r0, #0
 801751a:	bd08      	pop	{r3, pc}
 801751c:	2001      	movs	r0, #1
 801751e:	bd08      	pop	{r3, pc}
 8017520:	2000d380 	.word	0x2000d380

08017524 <calloc>:
 8017524:	4b02      	ldr	r3, [pc, #8]	; (8017530 <calloc+0xc>)
 8017526:	460a      	mov	r2, r1
 8017528:	4601      	mov	r1, r0
 801752a:	6818      	ldr	r0, [r3, #0]
 801752c:	f000 b802 	b.w	8017534 <_calloc_r>
 8017530:	200000dc 	.word	0x200000dc

08017534 <_calloc_r>:
 8017534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017536:	fba1 2402 	umull	r2, r4, r1, r2
 801753a:	b94c      	cbnz	r4, 8017550 <_calloc_r+0x1c>
 801753c:	4611      	mov	r1, r2
 801753e:	9201      	str	r2, [sp, #4]
 8017540:	f000 f886 	bl	8017650 <_malloc_r>
 8017544:	9a01      	ldr	r2, [sp, #4]
 8017546:	4605      	mov	r5, r0
 8017548:	b930      	cbnz	r0, 8017558 <_calloc_r+0x24>
 801754a:	4628      	mov	r0, r5
 801754c:	b003      	add	sp, #12
 801754e:	bd30      	pop	{r4, r5, pc}
 8017550:	220c      	movs	r2, #12
 8017552:	6002      	str	r2, [r0, #0]
 8017554:	2500      	movs	r5, #0
 8017556:	e7f8      	b.n	801754a <_calloc_r+0x16>
 8017558:	4621      	mov	r1, r4
 801755a:	f000 fd0d 	bl	8017f78 <memset>
 801755e:	e7f4      	b.n	801754a <_calloc_r+0x16>

08017560 <getenv>:
 8017560:	b507      	push	{r0, r1, r2, lr}
 8017562:	4b04      	ldr	r3, [pc, #16]	; (8017574 <getenv+0x14>)
 8017564:	4601      	mov	r1, r0
 8017566:	aa01      	add	r2, sp, #4
 8017568:	6818      	ldr	r0, [r3, #0]
 801756a:	f000 f805 	bl	8017578 <_findenv_r>
 801756e:	b003      	add	sp, #12
 8017570:	f85d fb04 	ldr.w	pc, [sp], #4
 8017574:	200000dc 	.word	0x200000dc

08017578 <_findenv_r>:
 8017578:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801757c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80175ec <_findenv_r+0x74>
 8017580:	4607      	mov	r7, r0
 8017582:	4689      	mov	r9, r1
 8017584:	4616      	mov	r6, r2
 8017586:	f000 fe43 	bl	8018210 <__env_lock>
 801758a:	f8da 4000 	ldr.w	r4, [sl]
 801758e:	b134      	cbz	r4, 801759e <_findenv_r+0x26>
 8017590:	464b      	mov	r3, r9
 8017592:	4698      	mov	r8, r3
 8017594:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017598:	b13a      	cbz	r2, 80175aa <_findenv_r+0x32>
 801759a:	2a3d      	cmp	r2, #61	; 0x3d
 801759c:	d1f9      	bne.n	8017592 <_findenv_r+0x1a>
 801759e:	4638      	mov	r0, r7
 80175a0:	f000 fe3c 	bl	801821c <__env_unlock>
 80175a4:	2000      	movs	r0, #0
 80175a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175aa:	eba8 0809 	sub.w	r8, r8, r9
 80175ae:	46a3      	mov	fp, r4
 80175b0:	f854 0b04 	ldr.w	r0, [r4], #4
 80175b4:	2800      	cmp	r0, #0
 80175b6:	d0f2      	beq.n	801759e <_findenv_r+0x26>
 80175b8:	4642      	mov	r2, r8
 80175ba:	4649      	mov	r1, r9
 80175bc:	f000 fcf1 	bl	8017fa2 <strncmp>
 80175c0:	2800      	cmp	r0, #0
 80175c2:	d1f4      	bne.n	80175ae <_findenv_r+0x36>
 80175c4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80175c8:	eb03 0508 	add.w	r5, r3, r8
 80175cc:	f813 3008 	ldrb.w	r3, [r3, r8]
 80175d0:	2b3d      	cmp	r3, #61	; 0x3d
 80175d2:	d1ec      	bne.n	80175ae <_findenv_r+0x36>
 80175d4:	f8da 3000 	ldr.w	r3, [sl]
 80175d8:	ebab 0303 	sub.w	r3, fp, r3
 80175dc:	109b      	asrs	r3, r3, #2
 80175de:	4638      	mov	r0, r7
 80175e0:	6033      	str	r3, [r6, #0]
 80175e2:	f000 fe1b 	bl	801821c <__env_unlock>
 80175e6:	1c68      	adds	r0, r5, #1
 80175e8:	e7dd      	b.n	80175a6 <_findenv_r+0x2e>
 80175ea:	bf00      	nop
 80175ec:	200000e0 	.word	0x200000e0

080175f0 <malloc>:
 80175f0:	4b02      	ldr	r3, [pc, #8]	; (80175fc <malloc+0xc>)
 80175f2:	4601      	mov	r1, r0
 80175f4:	6818      	ldr	r0, [r3, #0]
 80175f6:	f000 b82b 	b.w	8017650 <_malloc_r>
 80175fa:	bf00      	nop
 80175fc:	200000dc 	.word	0x200000dc

08017600 <free>:
 8017600:	4b02      	ldr	r3, [pc, #8]	; (801760c <free+0xc>)
 8017602:	4601      	mov	r1, r0
 8017604:	6818      	ldr	r0, [r3, #0]
 8017606:	f000 be0f 	b.w	8018228 <_free_r>
 801760a:	bf00      	nop
 801760c:	200000dc 	.word	0x200000dc

08017610 <sbrk_aligned>:
 8017610:	b570      	push	{r4, r5, r6, lr}
 8017612:	4e0e      	ldr	r6, [pc, #56]	; (801764c <sbrk_aligned+0x3c>)
 8017614:	460c      	mov	r4, r1
 8017616:	6831      	ldr	r1, [r6, #0]
 8017618:	4605      	mov	r5, r0
 801761a:	b911      	cbnz	r1, 8017622 <sbrk_aligned+0x12>
 801761c:	f000 fd74 	bl	8018108 <_sbrk_r>
 8017620:	6030      	str	r0, [r6, #0]
 8017622:	4621      	mov	r1, r4
 8017624:	4628      	mov	r0, r5
 8017626:	f000 fd6f 	bl	8018108 <_sbrk_r>
 801762a:	1c43      	adds	r3, r0, #1
 801762c:	d00a      	beq.n	8017644 <sbrk_aligned+0x34>
 801762e:	1cc4      	adds	r4, r0, #3
 8017630:	f024 0403 	bic.w	r4, r4, #3
 8017634:	42a0      	cmp	r0, r4
 8017636:	d007      	beq.n	8017648 <sbrk_aligned+0x38>
 8017638:	1a21      	subs	r1, r4, r0
 801763a:	4628      	mov	r0, r5
 801763c:	f000 fd64 	bl	8018108 <_sbrk_r>
 8017640:	3001      	adds	r0, #1
 8017642:	d101      	bne.n	8017648 <sbrk_aligned+0x38>
 8017644:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8017648:	4620      	mov	r0, r4
 801764a:	bd70      	pop	{r4, r5, r6, pc}
 801764c:	2000a074 	.word	0x2000a074

08017650 <_malloc_r>:
 8017650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017654:	1ccd      	adds	r5, r1, #3
 8017656:	f025 0503 	bic.w	r5, r5, #3
 801765a:	3508      	adds	r5, #8
 801765c:	2d0c      	cmp	r5, #12
 801765e:	bf38      	it	cc
 8017660:	250c      	movcc	r5, #12
 8017662:	2d00      	cmp	r5, #0
 8017664:	4607      	mov	r7, r0
 8017666:	db01      	blt.n	801766c <_malloc_r+0x1c>
 8017668:	42a9      	cmp	r1, r5
 801766a:	d905      	bls.n	8017678 <_malloc_r+0x28>
 801766c:	230c      	movs	r3, #12
 801766e:	603b      	str	r3, [r7, #0]
 8017670:	2600      	movs	r6, #0
 8017672:	4630      	mov	r0, r6
 8017674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017678:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801774c <_malloc_r+0xfc>
 801767c:	f000 f868 	bl	8017750 <__malloc_lock>
 8017680:	f8d8 3000 	ldr.w	r3, [r8]
 8017684:	461c      	mov	r4, r3
 8017686:	bb5c      	cbnz	r4, 80176e0 <_malloc_r+0x90>
 8017688:	4629      	mov	r1, r5
 801768a:	4638      	mov	r0, r7
 801768c:	f7ff ffc0 	bl	8017610 <sbrk_aligned>
 8017690:	1c43      	adds	r3, r0, #1
 8017692:	4604      	mov	r4, r0
 8017694:	d155      	bne.n	8017742 <_malloc_r+0xf2>
 8017696:	f8d8 4000 	ldr.w	r4, [r8]
 801769a:	4626      	mov	r6, r4
 801769c:	2e00      	cmp	r6, #0
 801769e:	d145      	bne.n	801772c <_malloc_r+0xdc>
 80176a0:	2c00      	cmp	r4, #0
 80176a2:	d048      	beq.n	8017736 <_malloc_r+0xe6>
 80176a4:	6823      	ldr	r3, [r4, #0]
 80176a6:	4631      	mov	r1, r6
 80176a8:	4638      	mov	r0, r7
 80176aa:	eb04 0903 	add.w	r9, r4, r3
 80176ae:	f000 fd2b 	bl	8018108 <_sbrk_r>
 80176b2:	4581      	cmp	r9, r0
 80176b4:	d13f      	bne.n	8017736 <_malloc_r+0xe6>
 80176b6:	6821      	ldr	r1, [r4, #0]
 80176b8:	1a6d      	subs	r5, r5, r1
 80176ba:	4629      	mov	r1, r5
 80176bc:	4638      	mov	r0, r7
 80176be:	f7ff ffa7 	bl	8017610 <sbrk_aligned>
 80176c2:	3001      	adds	r0, #1
 80176c4:	d037      	beq.n	8017736 <_malloc_r+0xe6>
 80176c6:	6823      	ldr	r3, [r4, #0]
 80176c8:	442b      	add	r3, r5
 80176ca:	6023      	str	r3, [r4, #0]
 80176cc:	f8d8 3000 	ldr.w	r3, [r8]
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d038      	beq.n	8017746 <_malloc_r+0xf6>
 80176d4:	685a      	ldr	r2, [r3, #4]
 80176d6:	42a2      	cmp	r2, r4
 80176d8:	d12b      	bne.n	8017732 <_malloc_r+0xe2>
 80176da:	2200      	movs	r2, #0
 80176dc:	605a      	str	r2, [r3, #4]
 80176de:	e00f      	b.n	8017700 <_malloc_r+0xb0>
 80176e0:	6822      	ldr	r2, [r4, #0]
 80176e2:	1b52      	subs	r2, r2, r5
 80176e4:	d41f      	bmi.n	8017726 <_malloc_r+0xd6>
 80176e6:	2a0b      	cmp	r2, #11
 80176e8:	d917      	bls.n	801771a <_malloc_r+0xca>
 80176ea:	1961      	adds	r1, r4, r5
 80176ec:	42a3      	cmp	r3, r4
 80176ee:	6025      	str	r5, [r4, #0]
 80176f0:	bf18      	it	ne
 80176f2:	6059      	strne	r1, [r3, #4]
 80176f4:	6863      	ldr	r3, [r4, #4]
 80176f6:	bf08      	it	eq
 80176f8:	f8c8 1000 	streq.w	r1, [r8]
 80176fc:	5162      	str	r2, [r4, r5]
 80176fe:	604b      	str	r3, [r1, #4]
 8017700:	4638      	mov	r0, r7
 8017702:	f104 060b 	add.w	r6, r4, #11
 8017706:	f000 f829 	bl	801775c <__malloc_unlock>
 801770a:	f026 0607 	bic.w	r6, r6, #7
 801770e:	1d23      	adds	r3, r4, #4
 8017710:	1af2      	subs	r2, r6, r3
 8017712:	d0ae      	beq.n	8017672 <_malloc_r+0x22>
 8017714:	1b9b      	subs	r3, r3, r6
 8017716:	50a3      	str	r3, [r4, r2]
 8017718:	e7ab      	b.n	8017672 <_malloc_r+0x22>
 801771a:	42a3      	cmp	r3, r4
 801771c:	6862      	ldr	r2, [r4, #4]
 801771e:	d1dd      	bne.n	80176dc <_malloc_r+0x8c>
 8017720:	f8c8 2000 	str.w	r2, [r8]
 8017724:	e7ec      	b.n	8017700 <_malloc_r+0xb0>
 8017726:	4623      	mov	r3, r4
 8017728:	6864      	ldr	r4, [r4, #4]
 801772a:	e7ac      	b.n	8017686 <_malloc_r+0x36>
 801772c:	4634      	mov	r4, r6
 801772e:	6876      	ldr	r6, [r6, #4]
 8017730:	e7b4      	b.n	801769c <_malloc_r+0x4c>
 8017732:	4613      	mov	r3, r2
 8017734:	e7cc      	b.n	80176d0 <_malloc_r+0x80>
 8017736:	230c      	movs	r3, #12
 8017738:	603b      	str	r3, [r7, #0]
 801773a:	4638      	mov	r0, r7
 801773c:	f000 f80e 	bl	801775c <__malloc_unlock>
 8017740:	e797      	b.n	8017672 <_malloc_r+0x22>
 8017742:	6025      	str	r5, [r4, #0]
 8017744:	e7dc      	b.n	8017700 <_malloc_r+0xb0>
 8017746:	605b      	str	r3, [r3, #4]
 8017748:	deff      	udf	#255	; 0xff
 801774a:	bf00      	nop
 801774c:	2000a070 	.word	0x2000a070

08017750 <__malloc_lock>:
 8017750:	4801      	ldr	r0, [pc, #4]	; (8017758 <__malloc_lock+0x8>)
 8017752:	f000 bd26 	b.w	80181a2 <__retarget_lock_acquire_recursive>
 8017756:	bf00      	nop
 8017758:	2000a1b9 	.word	0x2000a1b9

0801775c <__malloc_unlock>:
 801775c:	4801      	ldr	r0, [pc, #4]	; (8017764 <__malloc_unlock+0x8>)
 801775e:	f000 bd21 	b.w	80181a4 <__retarget_lock_release_recursive>
 8017762:	bf00      	nop
 8017764:	2000a1b9 	.word	0x2000a1b9

08017768 <srand>:
 8017768:	b538      	push	{r3, r4, r5, lr}
 801776a:	4b10      	ldr	r3, [pc, #64]	; (80177ac <srand+0x44>)
 801776c:	681d      	ldr	r5, [r3, #0]
 801776e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017770:	4604      	mov	r4, r0
 8017772:	b9b3      	cbnz	r3, 80177a2 <srand+0x3a>
 8017774:	2018      	movs	r0, #24
 8017776:	f7ff ff3b 	bl	80175f0 <malloc>
 801777a:	4602      	mov	r2, r0
 801777c:	6328      	str	r0, [r5, #48]	; 0x30
 801777e:	b920      	cbnz	r0, 801778a <srand+0x22>
 8017780:	4b0b      	ldr	r3, [pc, #44]	; (80177b0 <srand+0x48>)
 8017782:	480c      	ldr	r0, [pc, #48]	; (80177b4 <srand+0x4c>)
 8017784:	2146      	movs	r1, #70	; 0x46
 8017786:	f000 fd25 	bl	80181d4 <__assert_func>
 801778a:	490b      	ldr	r1, [pc, #44]	; (80177b8 <srand+0x50>)
 801778c:	4b0b      	ldr	r3, [pc, #44]	; (80177bc <srand+0x54>)
 801778e:	e9c0 1300 	strd	r1, r3, [r0]
 8017792:	4b0b      	ldr	r3, [pc, #44]	; (80177c0 <srand+0x58>)
 8017794:	6083      	str	r3, [r0, #8]
 8017796:	230b      	movs	r3, #11
 8017798:	8183      	strh	r3, [r0, #12]
 801779a:	2100      	movs	r1, #0
 801779c:	2001      	movs	r0, #1
 801779e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80177a2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80177a4:	2200      	movs	r2, #0
 80177a6:	611c      	str	r4, [r3, #16]
 80177a8:	615a      	str	r2, [r3, #20]
 80177aa:	bd38      	pop	{r3, r4, r5, pc}
 80177ac:	200000dc 	.word	0x200000dc
 80177b0:	08019904 	.word	0x08019904
 80177b4:	0801991b 	.word	0x0801991b
 80177b8:	abcd330e 	.word	0xabcd330e
 80177bc:	e66d1234 	.word	0xe66d1234
 80177c0:	0005deec 	.word	0x0005deec

080177c4 <rand>:
 80177c4:	4b16      	ldr	r3, [pc, #88]	; (8017820 <rand+0x5c>)
 80177c6:	b510      	push	{r4, lr}
 80177c8:	681c      	ldr	r4, [r3, #0]
 80177ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80177cc:	b9b3      	cbnz	r3, 80177fc <rand+0x38>
 80177ce:	2018      	movs	r0, #24
 80177d0:	f7ff ff0e 	bl	80175f0 <malloc>
 80177d4:	4602      	mov	r2, r0
 80177d6:	6320      	str	r0, [r4, #48]	; 0x30
 80177d8:	b920      	cbnz	r0, 80177e4 <rand+0x20>
 80177da:	4b12      	ldr	r3, [pc, #72]	; (8017824 <rand+0x60>)
 80177dc:	4812      	ldr	r0, [pc, #72]	; (8017828 <rand+0x64>)
 80177de:	2152      	movs	r1, #82	; 0x52
 80177e0:	f000 fcf8 	bl	80181d4 <__assert_func>
 80177e4:	4911      	ldr	r1, [pc, #68]	; (801782c <rand+0x68>)
 80177e6:	4b12      	ldr	r3, [pc, #72]	; (8017830 <rand+0x6c>)
 80177e8:	e9c0 1300 	strd	r1, r3, [r0]
 80177ec:	4b11      	ldr	r3, [pc, #68]	; (8017834 <rand+0x70>)
 80177ee:	6083      	str	r3, [r0, #8]
 80177f0:	230b      	movs	r3, #11
 80177f2:	8183      	strh	r3, [r0, #12]
 80177f4:	2100      	movs	r1, #0
 80177f6:	2001      	movs	r0, #1
 80177f8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80177fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80177fe:	480e      	ldr	r0, [pc, #56]	; (8017838 <rand+0x74>)
 8017800:	690b      	ldr	r3, [r1, #16]
 8017802:	694c      	ldr	r4, [r1, #20]
 8017804:	4a0d      	ldr	r2, [pc, #52]	; (801783c <rand+0x78>)
 8017806:	4358      	muls	r0, r3
 8017808:	fb02 0004 	mla	r0, r2, r4, r0
 801780c:	fba3 3202 	umull	r3, r2, r3, r2
 8017810:	3301      	adds	r3, #1
 8017812:	eb40 0002 	adc.w	r0, r0, r2
 8017816:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801781a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801781e:	bd10      	pop	{r4, pc}
 8017820:	200000dc 	.word	0x200000dc
 8017824:	08019904 	.word	0x08019904
 8017828:	0801991b 	.word	0x0801991b
 801782c:	abcd330e 	.word	0xabcd330e
 8017830:	e66d1234 	.word	0xe66d1234
 8017834:	0005deec 	.word	0x0005deec
 8017838:	5851f42d 	.word	0x5851f42d
 801783c:	4c957f2d 	.word	0x4c957f2d

08017840 <realloc>:
 8017840:	4b02      	ldr	r3, [pc, #8]	; (801784c <realloc+0xc>)
 8017842:	460a      	mov	r2, r1
 8017844:	4601      	mov	r1, r0
 8017846:	6818      	ldr	r0, [r3, #0]
 8017848:	f000 b802 	b.w	8017850 <_realloc_r>
 801784c:	200000dc 	.word	0x200000dc

08017850 <_realloc_r>:
 8017850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017854:	4680      	mov	r8, r0
 8017856:	4614      	mov	r4, r2
 8017858:	460e      	mov	r6, r1
 801785a:	b921      	cbnz	r1, 8017866 <_realloc_r+0x16>
 801785c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017860:	4611      	mov	r1, r2
 8017862:	f7ff bef5 	b.w	8017650 <_malloc_r>
 8017866:	b92a      	cbnz	r2, 8017874 <_realloc_r+0x24>
 8017868:	f000 fcde 	bl	8018228 <_free_r>
 801786c:	4625      	mov	r5, r4
 801786e:	4628      	mov	r0, r5
 8017870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017874:	f000 fd24 	bl	80182c0 <_malloc_usable_size_r>
 8017878:	4284      	cmp	r4, r0
 801787a:	4607      	mov	r7, r0
 801787c:	d802      	bhi.n	8017884 <_realloc_r+0x34>
 801787e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017882:	d812      	bhi.n	80178aa <_realloc_r+0x5a>
 8017884:	4621      	mov	r1, r4
 8017886:	4640      	mov	r0, r8
 8017888:	f7ff fee2 	bl	8017650 <_malloc_r>
 801788c:	4605      	mov	r5, r0
 801788e:	2800      	cmp	r0, #0
 8017890:	d0ed      	beq.n	801786e <_realloc_r+0x1e>
 8017892:	42bc      	cmp	r4, r7
 8017894:	4622      	mov	r2, r4
 8017896:	4631      	mov	r1, r6
 8017898:	bf28      	it	cs
 801789a:	463a      	movcs	r2, r7
 801789c:	f000 fc8b 	bl	80181b6 <memcpy>
 80178a0:	4631      	mov	r1, r6
 80178a2:	4640      	mov	r0, r8
 80178a4:	f000 fcc0 	bl	8018228 <_free_r>
 80178a8:	e7e1      	b.n	801786e <_realloc_r+0x1e>
 80178aa:	4635      	mov	r5, r6
 80178ac:	e7df      	b.n	801786e <_realloc_r+0x1e>
	...

080178b0 <_strtoul_l.constprop.0>:
 80178b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80178b4:	4f36      	ldr	r7, [pc, #216]	; (8017990 <_strtoul_l.constprop.0+0xe0>)
 80178b6:	4686      	mov	lr, r0
 80178b8:	460d      	mov	r5, r1
 80178ba:	4628      	mov	r0, r5
 80178bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80178c0:	5d3e      	ldrb	r6, [r7, r4]
 80178c2:	f016 0608 	ands.w	r6, r6, #8
 80178c6:	d1f8      	bne.n	80178ba <_strtoul_l.constprop.0+0xa>
 80178c8:	2c2d      	cmp	r4, #45	; 0x2d
 80178ca:	d130      	bne.n	801792e <_strtoul_l.constprop.0+0x7e>
 80178cc:	782c      	ldrb	r4, [r5, #0]
 80178ce:	2601      	movs	r6, #1
 80178d0:	1c85      	adds	r5, r0, #2
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d057      	beq.n	8017986 <_strtoul_l.constprop.0+0xd6>
 80178d6:	2b10      	cmp	r3, #16
 80178d8:	d109      	bne.n	80178ee <_strtoul_l.constprop.0+0x3e>
 80178da:	2c30      	cmp	r4, #48	; 0x30
 80178dc:	d107      	bne.n	80178ee <_strtoul_l.constprop.0+0x3e>
 80178de:	7828      	ldrb	r0, [r5, #0]
 80178e0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80178e4:	2858      	cmp	r0, #88	; 0x58
 80178e6:	d149      	bne.n	801797c <_strtoul_l.constprop.0+0xcc>
 80178e8:	786c      	ldrb	r4, [r5, #1]
 80178ea:	2310      	movs	r3, #16
 80178ec:	3502      	adds	r5, #2
 80178ee:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80178f2:	2700      	movs	r7, #0
 80178f4:	fbb8 f8f3 	udiv	r8, r8, r3
 80178f8:	fb03 f908 	mul.w	r9, r3, r8
 80178fc:	ea6f 0909 	mvn.w	r9, r9
 8017900:	4638      	mov	r0, r7
 8017902:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8017906:	f1bc 0f09 	cmp.w	ip, #9
 801790a:	d815      	bhi.n	8017938 <_strtoul_l.constprop.0+0x88>
 801790c:	4664      	mov	r4, ip
 801790e:	42a3      	cmp	r3, r4
 8017910:	dd23      	ble.n	801795a <_strtoul_l.constprop.0+0xaa>
 8017912:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8017916:	d007      	beq.n	8017928 <_strtoul_l.constprop.0+0x78>
 8017918:	4580      	cmp	r8, r0
 801791a:	d31b      	bcc.n	8017954 <_strtoul_l.constprop.0+0xa4>
 801791c:	d101      	bne.n	8017922 <_strtoul_l.constprop.0+0x72>
 801791e:	45a1      	cmp	r9, r4
 8017920:	db18      	blt.n	8017954 <_strtoul_l.constprop.0+0xa4>
 8017922:	fb00 4003 	mla	r0, r0, r3, r4
 8017926:	2701      	movs	r7, #1
 8017928:	f815 4b01 	ldrb.w	r4, [r5], #1
 801792c:	e7e9      	b.n	8017902 <_strtoul_l.constprop.0+0x52>
 801792e:	2c2b      	cmp	r4, #43	; 0x2b
 8017930:	bf04      	itt	eq
 8017932:	782c      	ldrbeq	r4, [r5, #0]
 8017934:	1c85      	addeq	r5, r0, #2
 8017936:	e7cc      	b.n	80178d2 <_strtoul_l.constprop.0+0x22>
 8017938:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801793c:	f1bc 0f19 	cmp.w	ip, #25
 8017940:	d801      	bhi.n	8017946 <_strtoul_l.constprop.0+0x96>
 8017942:	3c37      	subs	r4, #55	; 0x37
 8017944:	e7e3      	b.n	801790e <_strtoul_l.constprop.0+0x5e>
 8017946:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801794a:	f1bc 0f19 	cmp.w	ip, #25
 801794e:	d804      	bhi.n	801795a <_strtoul_l.constprop.0+0xaa>
 8017950:	3c57      	subs	r4, #87	; 0x57
 8017952:	e7dc      	b.n	801790e <_strtoul_l.constprop.0+0x5e>
 8017954:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8017958:	e7e6      	b.n	8017928 <_strtoul_l.constprop.0+0x78>
 801795a:	1c7b      	adds	r3, r7, #1
 801795c:	d106      	bne.n	801796c <_strtoul_l.constprop.0+0xbc>
 801795e:	2322      	movs	r3, #34	; 0x22
 8017960:	f8ce 3000 	str.w	r3, [lr]
 8017964:	4638      	mov	r0, r7
 8017966:	b932      	cbnz	r2, 8017976 <_strtoul_l.constprop.0+0xc6>
 8017968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801796c:	b106      	cbz	r6, 8017970 <_strtoul_l.constprop.0+0xc0>
 801796e:	4240      	negs	r0, r0
 8017970:	2a00      	cmp	r2, #0
 8017972:	d0f9      	beq.n	8017968 <_strtoul_l.constprop.0+0xb8>
 8017974:	b107      	cbz	r7, 8017978 <_strtoul_l.constprop.0+0xc8>
 8017976:	1e69      	subs	r1, r5, #1
 8017978:	6011      	str	r1, [r2, #0]
 801797a:	e7f5      	b.n	8017968 <_strtoul_l.constprop.0+0xb8>
 801797c:	2430      	movs	r4, #48	; 0x30
 801797e:	2b00      	cmp	r3, #0
 8017980:	d1b5      	bne.n	80178ee <_strtoul_l.constprop.0+0x3e>
 8017982:	2308      	movs	r3, #8
 8017984:	e7b3      	b.n	80178ee <_strtoul_l.constprop.0+0x3e>
 8017986:	2c30      	cmp	r4, #48	; 0x30
 8017988:	d0a9      	beq.n	80178de <_strtoul_l.constprop.0+0x2e>
 801798a:	230a      	movs	r3, #10
 801798c:	e7af      	b.n	80178ee <_strtoul_l.constprop.0+0x3e>
 801798e:	bf00      	nop
 8017990:	08019974 	.word	0x08019974

08017994 <strtoul>:
 8017994:	4613      	mov	r3, r2
 8017996:	460a      	mov	r2, r1
 8017998:	4601      	mov	r1, r0
 801799a:	4802      	ldr	r0, [pc, #8]	; (80179a4 <strtoul+0x10>)
 801799c:	6800      	ldr	r0, [r0, #0]
 801799e:	f7ff bf87 	b.w	80178b0 <_strtoul_l.constprop.0>
 80179a2:	bf00      	nop
 80179a4:	200000dc 	.word	0x200000dc

080179a8 <std>:
 80179a8:	2300      	movs	r3, #0
 80179aa:	b510      	push	{r4, lr}
 80179ac:	4604      	mov	r4, r0
 80179ae:	e9c0 3300 	strd	r3, r3, [r0]
 80179b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80179b6:	6083      	str	r3, [r0, #8]
 80179b8:	8181      	strh	r1, [r0, #12]
 80179ba:	6643      	str	r3, [r0, #100]	; 0x64
 80179bc:	81c2      	strh	r2, [r0, #14]
 80179be:	6183      	str	r3, [r0, #24]
 80179c0:	4619      	mov	r1, r3
 80179c2:	2208      	movs	r2, #8
 80179c4:	305c      	adds	r0, #92	; 0x5c
 80179c6:	f000 fad7 	bl	8017f78 <memset>
 80179ca:	4b0d      	ldr	r3, [pc, #52]	; (8017a00 <std+0x58>)
 80179cc:	6263      	str	r3, [r4, #36]	; 0x24
 80179ce:	4b0d      	ldr	r3, [pc, #52]	; (8017a04 <std+0x5c>)
 80179d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80179d2:	4b0d      	ldr	r3, [pc, #52]	; (8017a08 <std+0x60>)
 80179d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80179d6:	4b0d      	ldr	r3, [pc, #52]	; (8017a0c <std+0x64>)
 80179d8:	6323      	str	r3, [r4, #48]	; 0x30
 80179da:	4b0d      	ldr	r3, [pc, #52]	; (8017a10 <std+0x68>)
 80179dc:	6224      	str	r4, [r4, #32]
 80179de:	429c      	cmp	r4, r3
 80179e0:	d006      	beq.n	80179f0 <std+0x48>
 80179e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80179e6:	4294      	cmp	r4, r2
 80179e8:	d002      	beq.n	80179f0 <std+0x48>
 80179ea:	33d0      	adds	r3, #208	; 0xd0
 80179ec:	429c      	cmp	r4, r3
 80179ee:	d105      	bne.n	80179fc <std+0x54>
 80179f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80179f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80179f8:	f000 bbd2 	b.w	80181a0 <__retarget_lock_init_recursive>
 80179fc:	bd10      	pop	{r4, pc}
 80179fe:	bf00      	nop
 8017a00:	08017d55 	.word	0x08017d55
 8017a04:	08017d77 	.word	0x08017d77
 8017a08:	08017daf 	.word	0x08017daf
 8017a0c:	08017dd3 	.word	0x08017dd3
 8017a10:	2000a078 	.word	0x2000a078

08017a14 <stdio_exit_handler>:
 8017a14:	4a02      	ldr	r2, [pc, #8]	; (8017a20 <stdio_exit_handler+0xc>)
 8017a16:	4903      	ldr	r1, [pc, #12]	; (8017a24 <stdio_exit_handler+0x10>)
 8017a18:	4803      	ldr	r0, [pc, #12]	; (8017a28 <stdio_exit_handler+0x14>)
 8017a1a:	f000 b869 	b.w	8017af0 <_fwalk_sglue>
 8017a1e:	bf00      	nop
 8017a20:	20000084 	.word	0x20000084
 8017a24:	08018c35 	.word	0x08018c35
 8017a28:	20000090 	.word	0x20000090

08017a2c <cleanup_stdio>:
 8017a2c:	6841      	ldr	r1, [r0, #4]
 8017a2e:	4b0c      	ldr	r3, [pc, #48]	; (8017a60 <cleanup_stdio+0x34>)
 8017a30:	4299      	cmp	r1, r3
 8017a32:	b510      	push	{r4, lr}
 8017a34:	4604      	mov	r4, r0
 8017a36:	d001      	beq.n	8017a3c <cleanup_stdio+0x10>
 8017a38:	f001 f8fc 	bl	8018c34 <_fflush_r>
 8017a3c:	68a1      	ldr	r1, [r4, #8]
 8017a3e:	4b09      	ldr	r3, [pc, #36]	; (8017a64 <cleanup_stdio+0x38>)
 8017a40:	4299      	cmp	r1, r3
 8017a42:	d002      	beq.n	8017a4a <cleanup_stdio+0x1e>
 8017a44:	4620      	mov	r0, r4
 8017a46:	f001 f8f5 	bl	8018c34 <_fflush_r>
 8017a4a:	68e1      	ldr	r1, [r4, #12]
 8017a4c:	4b06      	ldr	r3, [pc, #24]	; (8017a68 <cleanup_stdio+0x3c>)
 8017a4e:	4299      	cmp	r1, r3
 8017a50:	d004      	beq.n	8017a5c <cleanup_stdio+0x30>
 8017a52:	4620      	mov	r0, r4
 8017a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a58:	f001 b8ec 	b.w	8018c34 <_fflush_r>
 8017a5c:	bd10      	pop	{r4, pc}
 8017a5e:	bf00      	nop
 8017a60:	2000a078 	.word	0x2000a078
 8017a64:	2000a0e0 	.word	0x2000a0e0
 8017a68:	2000a148 	.word	0x2000a148

08017a6c <global_stdio_init.part.0>:
 8017a6c:	b510      	push	{r4, lr}
 8017a6e:	4b0b      	ldr	r3, [pc, #44]	; (8017a9c <global_stdio_init.part.0+0x30>)
 8017a70:	4c0b      	ldr	r4, [pc, #44]	; (8017aa0 <global_stdio_init.part.0+0x34>)
 8017a72:	4a0c      	ldr	r2, [pc, #48]	; (8017aa4 <global_stdio_init.part.0+0x38>)
 8017a74:	601a      	str	r2, [r3, #0]
 8017a76:	4620      	mov	r0, r4
 8017a78:	2200      	movs	r2, #0
 8017a7a:	2104      	movs	r1, #4
 8017a7c:	f7ff ff94 	bl	80179a8 <std>
 8017a80:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8017a84:	2201      	movs	r2, #1
 8017a86:	2109      	movs	r1, #9
 8017a88:	f7ff ff8e 	bl	80179a8 <std>
 8017a8c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8017a90:	2202      	movs	r2, #2
 8017a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a96:	2112      	movs	r1, #18
 8017a98:	f7ff bf86 	b.w	80179a8 <std>
 8017a9c:	2000a1b0 	.word	0x2000a1b0
 8017aa0:	2000a078 	.word	0x2000a078
 8017aa4:	08017a15 	.word	0x08017a15

08017aa8 <__sfp_lock_acquire>:
 8017aa8:	4801      	ldr	r0, [pc, #4]	; (8017ab0 <__sfp_lock_acquire+0x8>)
 8017aaa:	f000 bb7a 	b.w	80181a2 <__retarget_lock_acquire_recursive>
 8017aae:	bf00      	nop
 8017ab0:	2000a1ba 	.word	0x2000a1ba

08017ab4 <__sfp_lock_release>:
 8017ab4:	4801      	ldr	r0, [pc, #4]	; (8017abc <__sfp_lock_release+0x8>)
 8017ab6:	f000 bb75 	b.w	80181a4 <__retarget_lock_release_recursive>
 8017aba:	bf00      	nop
 8017abc:	2000a1ba 	.word	0x2000a1ba

08017ac0 <__sinit>:
 8017ac0:	b510      	push	{r4, lr}
 8017ac2:	4604      	mov	r4, r0
 8017ac4:	f7ff fff0 	bl	8017aa8 <__sfp_lock_acquire>
 8017ac8:	6a23      	ldr	r3, [r4, #32]
 8017aca:	b11b      	cbz	r3, 8017ad4 <__sinit+0x14>
 8017acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ad0:	f7ff bff0 	b.w	8017ab4 <__sfp_lock_release>
 8017ad4:	4b04      	ldr	r3, [pc, #16]	; (8017ae8 <__sinit+0x28>)
 8017ad6:	6223      	str	r3, [r4, #32]
 8017ad8:	4b04      	ldr	r3, [pc, #16]	; (8017aec <__sinit+0x2c>)
 8017ada:	681b      	ldr	r3, [r3, #0]
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d1f5      	bne.n	8017acc <__sinit+0xc>
 8017ae0:	f7ff ffc4 	bl	8017a6c <global_stdio_init.part.0>
 8017ae4:	e7f2      	b.n	8017acc <__sinit+0xc>
 8017ae6:	bf00      	nop
 8017ae8:	08017a2d 	.word	0x08017a2d
 8017aec:	2000a1b0 	.word	0x2000a1b0

08017af0 <_fwalk_sglue>:
 8017af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017af4:	4607      	mov	r7, r0
 8017af6:	4688      	mov	r8, r1
 8017af8:	4614      	mov	r4, r2
 8017afa:	2600      	movs	r6, #0
 8017afc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017b00:	f1b9 0901 	subs.w	r9, r9, #1
 8017b04:	d505      	bpl.n	8017b12 <_fwalk_sglue+0x22>
 8017b06:	6824      	ldr	r4, [r4, #0]
 8017b08:	2c00      	cmp	r4, #0
 8017b0a:	d1f7      	bne.n	8017afc <_fwalk_sglue+0xc>
 8017b0c:	4630      	mov	r0, r6
 8017b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017b12:	89ab      	ldrh	r3, [r5, #12]
 8017b14:	2b01      	cmp	r3, #1
 8017b16:	d907      	bls.n	8017b28 <_fwalk_sglue+0x38>
 8017b18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017b1c:	3301      	adds	r3, #1
 8017b1e:	d003      	beq.n	8017b28 <_fwalk_sglue+0x38>
 8017b20:	4629      	mov	r1, r5
 8017b22:	4638      	mov	r0, r7
 8017b24:	47c0      	blx	r8
 8017b26:	4306      	orrs	r6, r0
 8017b28:	3568      	adds	r5, #104	; 0x68
 8017b2a:	e7e9      	b.n	8017b00 <_fwalk_sglue+0x10>

08017b2c <iprintf>:
 8017b2c:	b40f      	push	{r0, r1, r2, r3}
 8017b2e:	b507      	push	{r0, r1, r2, lr}
 8017b30:	4906      	ldr	r1, [pc, #24]	; (8017b4c <iprintf+0x20>)
 8017b32:	ab04      	add	r3, sp, #16
 8017b34:	6808      	ldr	r0, [r1, #0]
 8017b36:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b3a:	6881      	ldr	r1, [r0, #8]
 8017b3c:	9301      	str	r3, [sp, #4]
 8017b3e:	f000 fd49 	bl	80185d4 <_vfiprintf_r>
 8017b42:	b003      	add	sp, #12
 8017b44:	f85d eb04 	ldr.w	lr, [sp], #4
 8017b48:	b004      	add	sp, #16
 8017b4a:	4770      	bx	lr
 8017b4c:	200000dc 	.word	0x200000dc

08017b50 <setvbuf>:
 8017b50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017b54:	461d      	mov	r5, r3
 8017b56:	4b54      	ldr	r3, [pc, #336]	; (8017ca8 <setvbuf+0x158>)
 8017b58:	681f      	ldr	r7, [r3, #0]
 8017b5a:	4604      	mov	r4, r0
 8017b5c:	460e      	mov	r6, r1
 8017b5e:	4690      	mov	r8, r2
 8017b60:	b127      	cbz	r7, 8017b6c <setvbuf+0x1c>
 8017b62:	6a3b      	ldr	r3, [r7, #32]
 8017b64:	b913      	cbnz	r3, 8017b6c <setvbuf+0x1c>
 8017b66:	4638      	mov	r0, r7
 8017b68:	f7ff ffaa 	bl	8017ac0 <__sinit>
 8017b6c:	f1b8 0f02 	cmp.w	r8, #2
 8017b70:	d006      	beq.n	8017b80 <setvbuf+0x30>
 8017b72:	f1b8 0f01 	cmp.w	r8, #1
 8017b76:	f200 8094 	bhi.w	8017ca2 <setvbuf+0x152>
 8017b7a:	2d00      	cmp	r5, #0
 8017b7c:	f2c0 8091 	blt.w	8017ca2 <setvbuf+0x152>
 8017b80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017b82:	07da      	lsls	r2, r3, #31
 8017b84:	d405      	bmi.n	8017b92 <setvbuf+0x42>
 8017b86:	89a3      	ldrh	r3, [r4, #12]
 8017b88:	059b      	lsls	r3, r3, #22
 8017b8a:	d402      	bmi.n	8017b92 <setvbuf+0x42>
 8017b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017b8e:	f000 fb08 	bl	80181a2 <__retarget_lock_acquire_recursive>
 8017b92:	4621      	mov	r1, r4
 8017b94:	4638      	mov	r0, r7
 8017b96:	f001 f84d 	bl	8018c34 <_fflush_r>
 8017b9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017b9c:	b141      	cbz	r1, 8017bb0 <setvbuf+0x60>
 8017b9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017ba2:	4299      	cmp	r1, r3
 8017ba4:	d002      	beq.n	8017bac <setvbuf+0x5c>
 8017ba6:	4638      	mov	r0, r7
 8017ba8:	f000 fb3e 	bl	8018228 <_free_r>
 8017bac:	2300      	movs	r3, #0
 8017bae:	6363      	str	r3, [r4, #52]	; 0x34
 8017bb0:	2300      	movs	r3, #0
 8017bb2:	61a3      	str	r3, [r4, #24]
 8017bb4:	6063      	str	r3, [r4, #4]
 8017bb6:	89a3      	ldrh	r3, [r4, #12]
 8017bb8:	0618      	lsls	r0, r3, #24
 8017bba:	d503      	bpl.n	8017bc4 <setvbuf+0x74>
 8017bbc:	6921      	ldr	r1, [r4, #16]
 8017bbe:	4638      	mov	r0, r7
 8017bc0:	f000 fb32 	bl	8018228 <_free_r>
 8017bc4:	89a3      	ldrh	r3, [r4, #12]
 8017bc6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8017bca:	f023 0303 	bic.w	r3, r3, #3
 8017bce:	f1b8 0f02 	cmp.w	r8, #2
 8017bd2:	81a3      	strh	r3, [r4, #12]
 8017bd4:	d05f      	beq.n	8017c96 <setvbuf+0x146>
 8017bd6:	ab01      	add	r3, sp, #4
 8017bd8:	466a      	mov	r2, sp
 8017bda:	4621      	mov	r1, r4
 8017bdc:	4638      	mov	r0, r7
 8017bde:	f001 f863 	bl	8018ca8 <__swhatbuf_r>
 8017be2:	89a3      	ldrh	r3, [r4, #12]
 8017be4:	4318      	orrs	r0, r3
 8017be6:	81a0      	strh	r0, [r4, #12]
 8017be8:	bb2d      	cbnz	r5, 8017c36 <setvbuf+0xe6>
 8017bea:	9d00      	ldr	r5, [sp, #0]
 8017bec:	4628      	mov	r0, r5
 8017bee:	f7ff fcff 	bl	80175f0 <malloc>
 8017bf2:	4606      	mov	r6, r0
 8017bf4:	2800      	cmp	r0, #0
 8017bf6:	d150      	bne.n	8017c9a <setvbuf+0x14a>
 8017bf8:	f8dd 9000 	ldr.w	r9, [sp]
 8017bfc:	45a9      	cmp	r9, r5
 8017bfe:	d13e      	bne.n	8017c7e <setvbuf+0x12e>
 8017c00:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8017c04:	2200      	movs	r2, #0
 8017c06:	60a2      	str	r2, [r4, #8]
 8017c08:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8017c0c:	6022      	str	r2, [r4, #0]
 8017c0e:	6122      	str	r2, [r4, #16]
 8017c10:	2201      	movs	r2, #1
 8017c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c16:	6162      	str	r2, [r4, #20]
 8017c18:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017c1a:	f043 0302 	orr.w	r3, r3, #2
 8017c1e:	07d1      	lsls	r1, r2, #31
 8017c20:	81a3      	strh	r3, [r4, #12]
 8017c22:	d404      	bmi.n	8017c2e <setvbuf+0xde>
 8017c24:	059b      	lsls	r3, r3, #22
 8017c26:	d402      	bmi.n	8017c2e <setvbuf+0xde>
 8017c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017c2a:	f000 fabb 	bl	80181a4 <__retarget_lock_release_recursive>
 8017c2e:	4628      	mov	r0, r5
 8017c30:	b003      	add	sp, #12
 8017c32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c36:	2e00      	cmp	r6, #0
 8017c38:	d0d8      	beq.n	8017bec <setvbuf+0x9c>
 8017c3a:	6a3b      	ldr	r3, [r7, #32]
 8017c3c:	b913      	cbnz	r3, 8017c44 <setvbuf+0xf4>
 8017c3e:	4638      	mov	r0, r7
 8017c40:	f7ff ff3e 	bl	8017ac0 <__sinit>
 8017c44:	f1b8 0f01 	cmp.w	r8, #1
 8017c48:	bf08      	it	eq
 8017c4a:	89a3      	ldrheq	r3, [r4, #12]
 8017c4c:	6026      	str	r6, [r4, #0]
 8017c4e:	bf04      	itt	eq
 8017c50:	f043 0301 	orreq.w	r3, r3, #1
 8017c54:	81a3      	strheq	r3, [r4, #12]
 8017c56:	89a3      	ldrh	r3, [r4, #12]
 8017c58:	f013 0208 	ands.w	r2, r3, #8
 8017c5c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8017c60:	d01d      	beq.n	8017c9e <setvbuf+0x14e>
 8017c62:	07da      	lsls	r2, r3, #31
 8017c64:	bf41      	itttt	mi
 8017c66:	2200      	movmi	r2, #0
 8017c68:	426d      	negmi	r5, r5
 8017c6a:	60a2      	strmi	r2, [r4, #8]
 8017c6c:	61a5      	strmi	r5, [r4, #24]
 8017c6e:	bf58      	it	pl
 8017c70:	60a5      	strpl	r5, [r4, #8]
 8017c72:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8017c74:	f015 0501 	ands.w	r5, r5, #1
 8017c78:	d0d4      	beq.n	8017c24 <setvbuf+0xd4>
 8017c7a:	2500      	movs	r5, #0
 8017c7c:	e7d7      	b.n	8017c2e <setvbuf+0xde>
 8017c7e:	4648      	mov	r0, r9
 8017c80:	f7ff fcb6 	bl	80175f0 <malloc>
 8017c84:	4606      	mov	r6, r0
 8017c86:	2800      	cmp	r0, #0
 8017c88:	d0ba      	beq.n	8017c00 <setvbuf+0xb0>
 8017c8a:	89a3      	ldrh	r3, [r4, #12]
 8017c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017c90:	81a3      	strh	r3, [r4, #12]
 8017c92:	464d      	mov	r5, r9
 8017c94:	e7d1      	b.n	8017c3a <setvbuf+0xea>
 8017c96:	2500      	movs	r5, #0
 8017c98:	e7b4      	b.n	8017c04 <setvbuf+0xb4>
 8017c9a:	46a9      	mov	r9, r5
 8017c9c:	e7f5      	b.n	8017c8a <setvbuf+0x13a>
 8017c9e:	60a2      	str	r2, [r4, #8]
 8017ca0:	e7e7      	b.n	8017c72 <setvbuf+0x122>
 8017ca2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8017ca6:	e7c2      	b.n	8017c2e <setvbuf+0xde>
 8017ca8:	200000dc 	.word	0x200000dc

08017cac <sniprintf>:
 8017cac:	b40c      	push	{r2, r3}
 8017cae:	b530      	push	{r4, r5, lr}
 8017cb0:	4b17      	ldr	r3, [pc, #92]	; (8017d10 <sniprintf+0x64>)
 8017cb2:	1e0c      	subs	r4, r1, #0
 8017cb4:	681d      	ldr	r5, [r3, #0]
 8017cb6:	b09d      	sub	sp, #116	; 0x74
 8017cb8:	da08      	bge.n	8017ccc <sniprintf+0x20>
 8017cba:	238b      	movs	r3, #139	; 0x8b
 8017cbc:	602b      	str	r3, [r5, #0]
 8017cbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017cc2:	b01d      	add	sp, #116	; 0x74
 8017cc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017cc8:	b002      	add	sp, #8
 8017cca:	4770      	bx	lr
 8017ccc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017cd0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017cd4:	bf14      	ite	ne
 8017cd6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8017cda:	4623      	moveq	r3, r4
 8017cdc:	9304      	str	r3, [sp, #16]
 8017cde:	9307      	str	r3, [sp, #28]
 8017ce0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017ce4:	9002      	str	r0, [sp, #8]
 8017ce6:	9006      	str	r0, [sp, #24]
 8017ce8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017cec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017cee:	ab21      	add	r3, sp, #132	; 0x84
 8017cf0:	a902      	add	r1, sp, #8
 8017cf2:	4628      	mov	r0, r5
 8017cf4:	9301      	str	r3, [sp, #4]
 8017cf6:	f000 fb45 	bl	8018384 <_svfiprintf_r>
 8017cfa:	1c43      	adds	r3, r0, #1
 8017cfc:	bfbc      	itt	lt
 8017cfe:	238b      	movlt	r3, #139	; 0x8b
 8017d00:	602b      	strlt	r3, [r5, #0]
 8017d02:	2c00      	cmp	r4, #0
 8017d04:	d0dd      	beq.n	8017cc2 <sniprintf+0x16>
 8017d06:	9b02      	ldr	r3, [sp, #8]
 8017d08:	2200      	movs	r2, #0
 8017d0a:	701a      	strb	r2, [r3, #0]
 8017d0c:	e7d9      	b.n	8017cc2 <sniprintf+0x16>
 8017d0e:	bf00      	nop
 8017d10:	200000dc 	.word	0x200000dc

08017d14 <siprintf>:
 8017d14:	b40e      	push	{r1, r2, r3}
 8017d16:	b500      	push	{lr}
 8017d18:	b09c      	sub	sp, #112	; 0x70
 8017d1a:	ab1d      	add	r3, sp, #116	; 0x74
 8017d1c:	9002      	str	r0, [sp, #8]
 8017d1e:	9006      	str	r0, [sp, #24]
 8017d20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017d24:	4809      	ldr	r0, [pc, #36]	; (8017d4c <siprintf+0x38>)
 8017d26:	9107      	str	r1, [sp, #28]
 8017d28:	9104      	str	r1, [sp, #16]
 8017d2a:	4909      	ldr	r1, [pc, #36]	; (8017d50 <siprintf+0x3c>)
 8017d2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d30:	9105      	str	r1, [sp, #20]
 8017d32:	6800      	ldr	r0, [r0, #0]
 8017d34:	9301      	str	r3, [sp, #4]
 8017d36:	a902      	add	r1, sp, #8
 8017d38:	f000 fb24 	bl	8018384 <_svfiprintf_r>
 8017d3c:	9b02      	ldr	r3, [sp, #8]
 8017d3e:	2200      	movs	r2, #0
 8017d40:	701a      	strb	r2, [r3, #0]
 8017d42:	b01c      	add	sp, #112	; 0x70
 8017d44:	f85d eb04 	ldr.w	lr, [sp], #4
 8017d48:	b003      	add	sp, #12
 8017d4a:	4770      	bx	lr
 8017d4c:	200000dc 	.word	0x200000dc
 8017d50:	ffff0208 	.word	0xffff0208

08017d54 <__sread>:
 8017d54:	b510      	push	{r4, lr}
 8017d56:	460c      	mov	r4, r1
 8017d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d5c:	f000 f9c2 	bl	80180e4 <_read_r>
 8017d60:	2800      	cmp	r0, #0
 8017d62:	bfab      	itete	ge
 8017d64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017d66:	89a3      	ldrhlt	r3, [r4, #12]
 8017d68:	181b      	addge	r3, r3, r0
 8017d6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017d6e:	bfac      	ite	ge
 8017d70:	6563      	strge	r3, [r4, #84]	; 0x54
 8017d72:	81a3      	strhlt	r3, [r4, #12]
 8017d74:	bd10      	pop	{r4, pc}

08017d76 <__swrite>:
 8017d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d7a:	461f      	mov	r7, r3
 8017d7c:	898b      	ldrh	r3, [r1, #12]
 8017d7e:	05db      	lsls	r3, r3, #23
 8017d80:	4605      	mov	r5, r0
 8017d82:	460c      	mov	r4, r1
 8017d84:	4616      	mov	r6, r2
 8017d86:	d505      	bpl.n	8017d94 <__swrite+0x1e>
 8017d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d8c:	2302      	movs	r3, #2
 8017d8e:	2200      	movs	r2, #0
 8017d90:	f000 f996 	bl	80180c0 <_lseek_r>
 8017d94:	89a3      	ldrh	r3, [r4, #12]
 8017d96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017d9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017d9e:	81a3      	strh	r3, [r4, #12]
 8017da0:	4632      	mov	r2, r6
 8017da2:	463b      	mov	r3, r7
 8017da4:	4628      	mov	r0, r5
 8017da6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017daa:	f000 b9bd 	b.w	8018128 <_write_r>

08017dae <__sseek>:
 8017dae:	b510      	push	{r4, lr}
 8017db0:	460c      	mov	r4, r1
 8017db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017db6:	f000 f983 	bl	80180c0 <_lseek_r>
 8017dba:	1c43      	adds	r3, r0, #1
 8017dbc:	89a3      	ldrh	r3, [r4, #12]
 8017dbe:	bf15      	itete	ne
 8017dc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8017dc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017dc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017dca:	81a3      	strheq	r3, [r4, #12]
 8017dcc:	bf18      	it	ne
 8017dce:	81a3      	strhne	r3, [r4, #12]
 8017dd0:	bd10      	pop	{r4, pc}

08017dd2 <__sclose>:
 8017dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017dd6:	f000 b90d 	b.w	8017ff4 <_close_r>

08017dda <_vsniprintf_r>:
 8017dda:	b530      	push	{r4, r5, lr}
 8017ddc:	4614      	mov	r4, r2
 8017dde:	2c00      	cmp	r4, #0
 8017de0:	b09b      	sub	sp, #108	; 0x6c
 8017de2:	4605      	mov	r5, r0
 8017de4:	461a      	mov	r2, r3
 8017de6:	da05      	bge.n	8017df4 <_vsniprintf_r+0x1a>
 8017de8:	238b      	movs	r3, #139	; 0x8b
 8017dea:	6003      	str	r3, [r0, #0]
 8017dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017df0:	b01b      	add	sp, #108	; 0x6c
 8017df2:	bd30      	pop	{r4, r5, pc}
 8017df4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017df8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017dfc:	bf14      	ite	ne
 8017dfe:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8017e02:	4623      	moveq	r3, r4
 8017e04:	9302      	str	r3, [sp, #8]
 8017e06:	9305      	str	r3, [sp, #20]
 8017e08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017e0c:	9100      	str	r1, [sp, #0]
 8017e0e:	9104      	str	r1, [sp, #16]
 8017e10:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017e14:	4669      	mov	r1, sp
 8017e16:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017e18:	f000 fab4 	bl	8018384 <_svfiprintf_r>
 8017e1c:	1c43      	adds	r3, r0, #1
 8017e1e:	bfbc      	itt	lt
 8017e20:	238b      	movlt	r3, #139	; 0x8b
 8017e22:	602b      	strlt	r3, [r5, #0]
 8017e24:	2c00      	cmp	r4, #0
 8017e26:	d0e3      	beq.n	8017df0 <_vsniprintf_r+0x16>
 8017e28:	9b00      	ldr	r3, [sp, #0]
 8017e2a:	2200      	movs	r2, #0
 8017e2c:	701a      	strb	r2, [r3, #0]
 8017e2e:	e7df      	b.n	8017df0 <_vsniprintf_r+0x16>

08017e30 <vsniprintf>:
 8017e30:	b507      	push	{r0, r1, r2, lr}
 8017e32:	9300      	str	r3, [sp, #0]
 8017e34:	4613      	mov	r3, r2
 8017e36:	460a      	mov	r2, r1
 8017e38:	4601      	mov	r1, r0
 8017e3a:	4803      	ldr	r0, [pc, #12]	; (8017e48 <vsniprintf+0x18>)
 8017e3c:	6800      	ldr	r0, [r0, #0]
 8017e3e:	f7ff ffcc 	bl	8017dda <_vsniprintf_r>
 8017e42:	b003      	add	sp, #12
 8017e44:	f85d fb04 	ldr.w	pc, [sp], #4
 8017e48:	200000dc 	.word	0x200000dc

08017e4c <__swbuf_r>:
 8017e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e4e:	460e      	mov	r6, r1
 8017e50:	4614      	mov	r4, r2
 8017e52:	4605      	mov	r5, r0
 8017e54:	b118      	cbz	r0, 8017e5e <__swbuf_r+0x12>
 8017e56:	6a03      	ldr	r3, [r0, #32]
 8017e58:	b90b      	cbnz	r3, 8017e5e <__swbuf_r+0x12>
 8017e5a:	f7ff fe31 	bl	8017ac0 <__sinit>
 8017e5e:	69a3      	ldr	r3, [r4, #24]
 8017e60:	60a3      	str	r3, [r4, #8]
 8017e62:	89a3      	ldrh	r3, [r4, #12]
 8017e64:	071a      	lsls	r2, r3, #28
 8017e66:	d525      	bpl.n	8017eb4 <__swbuf_r+0x68>
 8017e68:	6923      	ldr	r3, [r4, #16]
 8017e6a:	b31b      	cbz	r3, 8017eb4 <__swbuf_r+0x68>
 8017e6c:	6823      	ldr	r3, [r4, #0]
 8017e6e:	6922      	ldr	r2, [r4, #16]
 8017e70:	1a98      	subs	r0, r3, r2
 8017e72:	6963      	ldr	r3, [r4, #20]
 8017e74:	b2f6      	uxtb	r6, r6
 8017e76:	4283      	cmp	r3, r0
 8017e78:	4637      	mov	r7, r6
 8017e7a:	dc04      	bgt.n	8017e86 <__swbuf_r+0x3a>
 8017e7c:	4621      	mov	r1, r4
 8017e7e:	4628      	mov	r0, r5
 8017e80:	f000 fed8 	bl	8018c34 <_fflush_r>
 8017e84:	b9e0      	cbnz	r0, 8017ec0 <__swbuf_r+0x74>
 8017e86:	68a3      	ldr	r3, [r4, #8]
 8017e88:	3b01      	subs	r3, #1
 8017e8a:	60a3      	str	r3, [r4, #8]
 8017e8c:	6823      	ldr	r3, [r4, #0]
 8017e8e:	1c5a      	adds	r2, r3, #1
 8017e90:	6022      	str	r2, [r4, #0]
 8017e92:	701e      	strb	r6, [r3, #0]
 8017e94:	6962      	ldr	r2, [r4, #20]
 8017e96:	1c43      	adds	r3, r0, #1
 8017e98:	429a      	cmp	r2, r3
 8017e9a:	d004      	beq.n	8017ea6 <__swbuf_r+0x5a>
 8017e9c:	89a3      	ldrh	r3, [r4, #12]
 8017e9e:	07db      	lsls	r3, r3, #31
 8017ea0:	d506      	bpl.n	8017eb0 <__swbuf_r+0x64>
 8017ea2:	2e0a      	cmp	r6, #10
 8017ea4:	d104      	bne.n	8017eb0 <__swbuf_r+0x64>
 8017ea6:	4621      	mov	r1, r4
 8017ea8:	4628      	mov	r0, r5
 8017eaa:	f000 fec3 	bl	8018c34 <_fflush_r>
 8017eae:	b938      	cbnz	r0, 8017ec0 <__swbuf_r+0x74>
 8017eb0:	4638      	mov	r0, r7
 8017eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017eb4:	4621      	mov	r1, r4
 8017eb6:	4628      	mov	r0, r5
 8017eb8:	f000 f806 	bl	8017ec8 <__swsetup_r>
 8017ebc:	2800      	cmp	r0, #0
 8017ebe:	d0d5      	beq.n	8017e6c <__swbuf_r+0x20>
 8017ec0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8017ec4:	e7f4      	b.n	8017eb0 <__swbuf_r+0x64>
	...

08017ec8 <__swsetup_r>:
 8017ec8:	b538      	push	{r3, r4, r5, lr}
 8017eca:	4b2a      	ldr	r3, [pc, #168]	; (8017f74 <__swsetup_r+0xac>)
 8017ecc:	4605      	mov	r5, r0
 8017ece:	6818      	ldr	r0, [r3, #0]
 8017ed0:	460c      	mov	r4, r1
 8017ed2:	b118      	cbz	r0, 8017edc <__swsetup_r+0x14>
 8017ed4:	6a03      	ldr	r3, [r0, #32]
 8017ed6:	b90b      	cbnz	r3, 8017edc <__swsetup_r+0x14>
 8017ed8:	f7ff fdf2 	bl	8017ac0 <__sinit>
 8017edc:	89a3      	ldrh	r3, [r4, #12]
 8017ede:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017ee2:	0718      	lsls	r0, r3, #28
 8017ee4:	d422      	bmi.n	8017f2c <__swsetup_r+0x64>
 8017ee6:	06d9      	lsls	r1, r3, #27
 8017ee8:	d407      	bmi.n	8017efa <__swsetup_r+0x32>
 8017eea:	2309      	movs	r3, #9
 8017eec:	602b      	str	r3, [r5, #0]
 8017eee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017ef2:	81a3      	strh	r3, [r4, #12]
 8017ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017ef8:	e034      	b.n	8017f64 <__swsetup_r+0x9c>
 8017efa:	0758      	lsls	r0, r3, #29
 8017efc:	d512      	bpl.n	8017f24 <__swsetup_r+0x5c>
 8017efe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017f00:	b141      	cbz	r1, 8017f14 <__swsetup_r+0x4c>
 8017f02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017f06:	4299      	cmp	r1, r3
 8017f08:	d002      	beq.n	8017f10 <__swsetup_r+0x48>
 8017f0a:	4628      	mov	r0, r5
 8017f0c:	f000 f98c 	bl	8018228 <_free_r>
 8017f10:	2300      	movs	r3, #0
 8017f12:	6363      	str	r3, [r4, #52]	; 0x34
 8017f14:	89a3      	ldrh	r3, [r4, #12]
 8017f16:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017f1a:	81a3      	strh	r3, [r4, #12]
 8017f1c:	2300      	movs	r3, #0
 8017f1e:	6063      	str	r3, [r4, #4]
 8017f20:	6923      	ldr	r3, [r4, #16]
 8017f22:	6023      	str	r3, [r4, #0]
 8017f24:	89a3      	ldrh	r3, [r4, #12]
 8017f26:	f043 0308 	orr.w	r3, r3, #8
 8017f2a:	81a3      	strh	r3, [r4, #12]
 8017f2c:	6923      	ldr	r3, [r4, #16]
 8017f2e:	b94b      	cbnz	r3, 8017f44 <__swsetup_r+0x7c>
 8017f30:	89a3      	ldrh	r3, [r4, #12]
 8017f32:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017f36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017f3a:	d003      	beq.n	8017f44 <__swsetup_r+0x7c>
 8017f3c:	4621      	mov	r1, r4
 8017f3e:	4628      	mov	r0, r5
 8017f40:	f000 fed8 	bl	8018cf4 <__smakebuf_r>
 8017f44:	89a0      	ldrh	r0, [r4, #12]
 8017f46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017f4a:	f010 0301 	ands.w	r3, r0, #1
 8017f4e:	d00a      	beq.n	8017f66 <__swsetup_r+0x9e>
 8017f50:	2300      	movs	r3, #0
 8017f52:	60a3      	str	r3, [r4, #8]
 8017f54:	6963      	ldr	r3, [r4, #20]
 8017f56:	425b      	negs	r3, r3
 8017f58:	61a3      	str	r3, [r4, #24]
 8017f5a:	6923      	ldr	r3, [r4, #16]
 8017f5c:	b943      	cbnz	r3, 8017f70 <__swsetup_r+0xa8>
 8017f5e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017f62:	d1c4      	bne.n	8017eee <__swsetup_r+0x26>
 8017f64:	bd38      	pop	{r3, r4, r5, pc}
 8017f66:	0781      	lsls	r1, r0, #30
 8017f68:	bf58      	it	pl
 8017f6a:	6963      	ldrpl	r3, [r4, #20]
 8017f6c:	60a3      	str	r3, [r4, #8]
 8017f6e:	e7f4      	b.n	8017f5a <__swsetup_r+0x92>
 8017f70:	2000      	movs	r0, #0
 8017f72:	e7f7      	b.n	8017f64 <__swsetup_r+0x9c>
 8017f74:	200000dc 	.word	0x200000dc

08017f78 <memset>:
 8017f78:	4402      	add	r2, r0
 8017f7a:	4603      	mov	r3, r0
 8017f7c:	4293      	cmp	r3, r2
 8017f7e:	d100      	bne.n	8017f82 <memset+0xa>
 8017f80:	4770      	bx	lr
 8017f82:	f803 1b01 	strb.w	r1, [r3], #1
 8017f86:	e7f9      	b.n	8017f7c <memset+0x4>

08017f88 <strchr>:
 8017f88:	b2c9      	uxtb	r1, r1
 8017f8a:	4603      	mov	r3, r0
 8017f8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017f90:	b11a      	cbz	r2, 8017f9a <strchr+0x12>
 8017f92:	428a      	cmp	r2, r1
 8017f94:	d1f9      	bne.n	8017f8a <strchr+0x2>
 8017f96:	4618      	mov	r0, r3
 8017f98:	4770      	bx	lr
 8017f9a:	2900      	cmp	r1, #0
 8017f9c:	bf18      	it	ne
 8017f9e:	2300      	movne	r3, #0
 8017fa0:	e7f9      	b.n	8017f96 <strchr+0xe>

08017fa2 <strncmp>:
 8017fa2:	b510      	push	{r4, lr}
 8017fa4:	b16a      	cbz	r2, 8017fc2 <strncmp+0x20>
 8017fa6:	3901      	subs	r1, #1
 8017fa8:	1884      	adds	r4, r0, r2
 8017faa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017fae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017fb2:	429a      	cmp	r2, r3
 8017fb4:	d103      	bne.n	8017fbe <strncmp+0x1c>
 8017fb6:	42a0      	cmp	r0, r4
 8017fb8:	d001      	beq.n	8017fbe <strncmp+0x1c>
 8017fba:	2a00      	cmp	r2, #0
 8017fbc:	d1f5      	bne.n	8017faa <strncmp+0x8>
 8017fbe:	1ad0      	subs	r0, r2, r3
 8017fc0:	bd10      	pop	{r4, pc}
 8017fc2:	4610      	mov	r0, r2
 8017fc4:	e7fc      	b.n	8017fc0 <strncmp+0x1e>

08017fc6 <strstr>:
 8017fc6:	780a      	ldrb	r2, [r1, #0]
 8017fc8:	b570      	push	{r4, r5, r6, lr}
 8017fca:	b96a      	cbnz	r2, 8017fe8 <strstr+0x22>
 8017fcc:	bd70      	pop	{r4, r5, r6, pc}
 8017fce:	429a      	cmp	r2, r3
 8017fd0:	d109      	bne.n	8017fe6 <strstr+0x20>
 8017fd2:	460c      	mov	r4, r1
 8017fd4:	4605      	mov	r5, r0
 8017fd6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	d0f6      	beq.n	8017fcc <strstr+0x6>
 8017fde:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017fe2:	429e      	cmp	r6, r3
 8017fe4:	d0f7      	beq.n	8017fd6 <strstr+0x10>
 8017fe6:	3001      	adds	r0, #1
 8017fe8:	7803      	ldrb	r3, [r0, #0]
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d1ef      	bne.n	8017fce <strstr+0x8>
 8017fee:	4618      	mov	r0, r3
 8017ff0:	e7ec      	b.n	8017fcc <strstr+0x6>
	...

08017ff4 <_close_r>:
 8017ff4:	b538      	push	{r3, r4, r5, lr}
 8017ff6:	4d06      	ldr	r5, [pc, #24]	; (8018010 <_close_r+0x1c>)
 8017ff8:	2300      	movs	r3, #0
 8017ffa:	4604      	mov	r4, r0
 8017ffc:	4608      	mov	r0, r1
 8017ffe:	602b      	str	r3, [r5, #0]
 8018000:	f7eb fcb6 	bl	8003970 <_close>
 8018004:	1c43      	adds	r3, r0, #1
 8018006:	d102      	bne.n	801800e <_close_r+0x1a>
 8018008:	682b      	ldr	r3, [r5, #0]
 801800a:	b103      	cbz	r3, 801800e <_close_r+0x1a>
 801800c:	6023      	str	r3, [r4, #0]
 801800e:	bd38      	pop	{r3, r4, r5, pc}
 8018010:	2000a1b4 	.word	0x2000a1b4

08018014 <_reclaim_reent>:
 8018014:	4b29      	ldr	r3, [pc, #164]	; (80180bc <_reclaim_reent+0xa8>)
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	4283      	cmp	r3, r0
 801801a:	b570      	push	{r4, r5, r6, lr}
 801801c:	4604      	mov	r4, r0
 801801e:	d04b      	beq.n	80180b8 <_reclaim_reent+0xa4>
 8018020:	69c3      	ldr	r3, [r0, #28]
 8018022:	b143      	cbz	r3, 8018036 <_reclaim_reent+0x22>
 8018024:	68db      	ldr	r3, [r3, #12]
 8018026:	2b00      	cmp	r3, #0
 8018028:	d144      	bne.n	80180b4 <_reclaim_reent+0xa0>
 801802a:	69e3      	ldr	r3, [r4, #28]
 801802c:	6819      	ldr	r1, [r3, #0]
 801802e:	b111      	cbz	r1, 8018036 <_reclaim_reent+0x22>
 8018030:	4620      	mov	r0, r4
 8018032:	f000 f8f9 	bl	8018228 <_free_r>
 8018036:	6961      	ldr	r1, [r4, #20]
 8018038:	b111      	cbz	r1, 8018040 <_reclaim_reent+0x2c>
 801803a:	4620      	mov	r0, r4
 801803c:	f000 f8f4 	bl	8018228 <_free_r>
 8018040:	69e1      	ldr	r1, [r4, #28]
 8018042:	b111      	cbz	r1, 801804a <_reclaim_reent+0x36>
 8018044:	4620      	mov	r0, r4
 8018046:	f000 f8ef 	bl	8018228 <_free_r>
 801804a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801804c:	b111      	cbz	r1, 8018054 <_reclaim_reent+0x40>
 801804e:	4620      	mov	r0, r4
 8018050:	f000 f8ea 	bl	8018228 <_free_r>
 8018054:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018056:	b111      	cbz	r1, 801805e <_reclaim_reent+0x4a>
 8018058:	4620      	mov	r0, r4
 801805a:	f000 f8e5 	bl	8018228 <_free_r>
 801805e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018060:	b111      	cbz	r1, 8018068 <_reclaim_reent+0x54>
 8018062:	4620      	mov	r0, r4
 8018064:	f000 f8e0 	bl	8018228 <_free_r>
 8018068:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801806a:	b111      	cbz	r1, 8018072 <_reclaim_reent+0x5e>
 801806c:	4620      	mov	r0, r4
 801806e:	f000 f8db 	bl	8018228 <_free_r>
 8018072:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8018074:	b111      	cbz	r1, 801807c <_reclaim_reent+0x68>
 8018076:	4620      	mov	r0, r4
 8018078:	f000 f8d6 	bl	8018228 <_free_r>
 801807c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801807e:	b111      	cbz	r1, 8018086 <_reclaim_reent+0x72>
 8018080:	4620      	mov	r0, r4
 8018082:	f000 f8d1 	bl	8018228 <_free_r>
 8018086:	6a23      	ldr	r3, [r4, #32]
 8018088:	b1b3      	cbz	r3, 80180b8 <_reclaim_reent+0xa4>
 801808a:	4620      	mov	r0, r4
 801808c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018090:	4718      	bx	r3
 8018092:	5949      	ldr	r1, [r1, r5]
 8018094:	b941      	cbnz	r1, 80180a8 <_reclaim_reent+0x94>
 8018096:	3504      	adds	r5, #4
 8018098:	69e3      	ldr	r3, [r4, #28]
 801809a:	2d80      	cmp	r5, #128	; 0x80
 801809c:	68d9      	ldr	r1, [r3, #12]
 801809e:	d1f8      	bne.n	8018092 <_reclaim_reent+0x7e>
 80180a0:	4620      	mov	r0, r4
 80180a2:	f000 f8c1 	bl	8018228 <_free_r>
 80180a6:	e7c0      	b.n	801802a <_reclaim_reent+0x16>
 80180a8:	680e      	ldr	r6, [r1, #0]
 80180aa:	4620      	mov	r0, r4
 80180ac:	f000 f8bc 	bl	8018228 <_free_r>
 80180b0:	4631      	mov	r1, r6
 80180b2:	e7ef      	b.n	8018094 <_reclaim_reent+0x80>
 80180b4:	2500      	movs	r5, #0
 80180b6:	e7ef      	b.n	8018098 <_reclaim_reent+0x84>
 80180b8:	bd70      	pop	{r4, r5, r6, pc}
 80180ba:	bf00      	nop
 80180bc:	200000dc 	.word	0x200000dc

080180c0 <_lseek_r>:
 80180c0:	b538      	push	{r3, r4, r5, lr}
 80180c2:	4d07      	ldr	r5, [pc, #28]	; (80180e0 <_lseek_r+0x20>)
 80180c4:	4604      	mov	r4, r0
 80180c6:	4608      	mov	r0, r1
 80180c8:	4611      	mov	r1, r2
 80180ca:	2200      	movs	r2, #0
 80180cc:	602a      	str	r2, [r5, #0]
 80180ce:	461a      	mov	r2, r3
 80180d0:	f7eb fc65 	bl	800399e <_lseek>
 80180d4:	1c43      	adds	r3, r0, #1
 80180d6:	d102      	bne.n	80180de <_lseek_r+0x1e>
 80180d8:	682b      	ldr	r3, [r5, #0]
 80180da:	b103      	cbz	r3, 80180de <_lseek_r+0x1e>
 80180dc:	6023      	str	r3, [r4, #0]
 80180de:	bd38      	pop	{r3, r4, r5, pc}
 80180e0:	2000a1b4 	.word	0x2000a1b4

080180e4 <_read_r>:
 80180e4:	b538      	push	{r3, r4, r5, lr}
 80180e6:	4d07      	ldr	r5, [pc, #28]	; (8018104 <_read_r+0x20>)
 80180e8:	4604      	mov	r4, r0
 80180ea:	4608      	mov	r0, r1
 80180ec:	4611      	mov	r1, r2
 80180ee:	2200      	movs	r2, #0
 80180f0:	602a      	str	r2, [r5, #0]
 80180f2:	461a      	mov	r2, r3
 80180f4:	f7eb fc64 	bl	80039c0 <_read>
 80180f8:	1c43      	adds	r3, r0, #1
 80180fa:	d102      	bne.n	8018102 <_read_r+0x1e>
 80180fc:	682b      	ldr	r3, [r5, #0]
 80180fe:	b103      	cbz	r3, 8018102 <_read_r+0x1e>
 8018100:	6023      	str	r3, [r4, #0]
 8018102:	bd38      	pop	{r3, r4, r5, pc}
 8018104:	2000a1b4 	.word	0x2000a1b4

08018108 <_sbrk_r>:
 8018108:	b538      	push	{r3, r4, r5, lr}
 801810a:	4d06      	ldr	r5, [pc, #24]	; (8018124 <_sbrk_r+0x1c>)
 801810c:	2300      	movs	r3, #0
 801810e:	4604      	mov	r4, r0
 8018110:	4608      	mov	r0, r1
 8018112:	602b      	str	r3, [r5, #0]
 8018114:	f7ec f8fc 	bl	8004310 <_sbrk>
 8018118:	1c43      	adds	r3, r0, #1
 801811a:	d102      	bne.n	8018122 <_sbrk_r+0x1a>
 801811c:	682b      	ldr	r3, [r5, #0]
 801811e:	b103      	cbz	r3, 8018122 <_sbrk_r+0x1a>
 8018120:	6023      	str	r3, [r4, #0]
 8018122:	bd38      	pop	{r3, r4, r5, pc}
 8018124:	2000a1b4 	.word	0x2000a1b4

08018128 <_write_r>:
 8018128:	b538      	push	{r3, r4, r5, lr}
 801812a:	4d07      	ldr	r5, [pc, #28]	; (8018148 <_write_r+0x20>)
 801812c:	4604      	mov	r4, r0
 801812e:	4608      	mov	r0, r1
 8018130:	4611      	mov	r1, r2
 8018132:	2200      	movs	r2, #0
 8018134:	602a      	str	r2, [r5, #0]
 8018136:	461a      	mov	r2, r3
 8018138:	f7eb fbee 	bl	8003918 <_write>
 801813c:	1c43      	adds	r3, r0, #1
 801813e:	d102      	bne.n	8018146 <_write_r+0x1e>
 8018140:	682b      	ldr	r3, [r5, #0]
 8018142:	b103      	cbz	r3, 8018146 <_write_r+0x1e>
 8018144:	6023      	str	r3, [r4, #0]
 8018146:	bd38      	pop	{r3, r4, r5, pc}
 8018148:	2000a1b4 	.word	0x2000a1b4

0801814c <__errno>:
 801814c:	4b01      	ldr	r3, [pc, #4]	; (8018154 <__errno+0x8>)
 801814e:	6818      	ldr	r0, [r3, #0]
 8018150:	4770      	bx	lr
 8018152:	bf00      	nop
 8018154:	200000dc 	.word	0x200000dc

08018158 <__libc_init_array>:
 8018158:	b570      	push	{r4, r5, r6, lr}
 801815a:	4d0d      	ldr	r5, [pc, #52]	; (8018190 <__libc_init_array+0x38>)
 801815c:	4c0d      	ldr	r4, [pc, #52]	; (8018194 <__libc_init_array+0x3c>)
 801815e:	1b64      	subs	r4, r4, r5
 8018160:	10a4      	asrs	r4, r4, #2
 8018162:	2600      	movs	r6, #0
 8018164:	42a6      	cmp	r6, r4
 8018166:	d109      	bne.n	801817c <__libc_init_array+0x24>
 8018168:	4d0b      	ldr	r5, [pc, #44]	; (8018198 <__libc_init_array+0x40>)
 801816a:	4c0c      	ldr	r4, [pc, #48]	; (801819c <__libc_init_array+0x44>)
 801816c:	f000 fe88 	bl	8018e80 <_init>
 8018170:	1b64      	subs	r4, r4, r5
 8018172:	10a4      	asrs	r4, r4, #2
 8018174:	2600      	movs	r6, #0
 8018176:	42a6      	cmp	r6, r4
 8018178:	d105      	bne.n	8018186 <__libc_init_array+0x2e>
 801817a:	bd70      	pop	{r4, r5, r6, pc}
 801817c:	f855 3b04 	ldr.w	r3, [r5], #4
 8018180:	4798      	blx	r3
 8018182:	3601      	adds	r6, #1
 8018184:	e7ee      	b.n	8018164 <__libc_init_array+0xc>
 8018186:	f855 3b04 	ldr.w	r3, [r5], #4
 801818a:	4798      	blx	r3
 801818c:	3601      	adds	r6, #1
 801818e:	e7f2      	b.n	8018176 <__libc_init_array+0x1e>
 8018190:	08019aec 	.word	0x08019aec
 8018194:	08019aec 	.word	0x08019aec
 8018198:	08019aec 	.word	0x08019aec
 801819c:	08019af0 	.word	0x08019af0

080181a0 <__retarget_lock_init_recursive>:
 80181a0:	4770      	bx	lr

080181a2 <__retarget_lock_acquire_recursive>:
 80181a2:	4770      	bx	lr

080181a4 <__retarget_lock_release_recursive>:
 80181a4:	4770      	bx	lr

080181a6 <strcpy>:
 80181a6:	4603      	mov	r3, r0
 80181a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80181ac:	f803 2b01 	strb.w	r2, [r3], #1
 80181b0:	2a00      	cmp	r2, #0
 80181b2:	d1f9      	bne.n	80181a8 <strcpy+0x2>
 80181b4:	4770      	bx	lr

080181b6 <memcpy>:
 80181b6:	440a      	add	r2, r1
 80181b8:	4291      	cmp	r1, r2
 80181ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80181be:	d100      	bne.n	80181c2 <memcpy+0xc>
 80181c0:	4770      	bx	lr
 80181c2:	b510      	push	{r4, lr}
 80181c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80181c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80181cc:	4291      	cmp	r1, r2
 80181ce:	d1f9      	bne.n	80181c4 <memcpy+0xe>
 80181d0:	bd10      	pop	{r4, pc}
	...

080181d4 <__assert_func>:
 80181d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80181d6:	4614      	mov	r4, r2
 80181d8:	461a      	mov	r2, r3
 80181da:	4b09      	ldr	r3, [pc, #36]	; (8018200 <__assert_func+0x2c>)
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	4605      	mov	r5, r0
 80181e0:	68d8      	ldr	r0, [r3, #12]
 80181e2:	b14c      	cbz	r4, 80181f8 <__assert_func+0x24>
 80181e4:	4b07      	ldr	r3, [pc, #28]	; (8018204 <__assert_func+0x30>)
 80181e6:	9100      	str	r1, [sp, #0]
 80181e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80181ec:	4906      	ldr	r1, [pc, #24]	; (8018208 <__assert_func+0x34>)
 80181ee:	462b      	mov	r3, r5
 80181f0:	f000 fd48 	bl	8018c84 <fiprintf>
 80181f4:	f000 fdf6 	bl	8018de4 <abort>
 80181f8:	4b04      	ldr	r3, [pc, #16]	; (801820c <__assert_func+0x38>)
 80181fa:	461c      	mov	r4, r3
 80181fc:	e7f3      	b.n	80181e6 <__assert_func+0x12>
 80181fe:	bf00      	nop
 8018200:	200000dc 	.word	0x200000dc
 8018204:	08019a74 	.word	0x08019a74
 8018208:	08019a81 	.word	0x08019a81
 801820c:	08019aaf 	.word	0x08019aaf

08018210 <__env_lock>:
 8018210:	4801      	ldr	r0, [pc, #4]	; (8018218 <__env_lock+0x8>)
 8018212:	f7ff bfc6 	b.w	80181a2 <__retarget_lock_acquire_recursive>
 8018216:	bf00      	nop
 8018218:	2000a1b8 	.word	0x2000a1b8

0801821c <__env_unlock>:
 801821c:	4801      	ldr	r0, [pc, #4]	; (8018224 <__env_unlock+0x8>)
 801821e:	f7ff bfc1 	b.w	80181a4 <__retarget_lock_release_recursive>
 8018222:	bf00      	nop
 8018224:	2000a1b8 	.word	0x2000a1b8

08018228 <_free_r>:
 8018228:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801822a:	2900      	cmp	r1, #0
 801822c:	d044      	beq.n	80182b8 <_free_r+0x90>
 801822e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018232:	9001      	str	r0, [sp, #4]
 8018234:	2b00      	cmp	r3, #0
 8018236:	f1a1 0404 	sub.w	r4, r1, #4
 801823a:	bfb8      	it	lt
 801823c:	18e4      	addlt	r4, r4, r3
 801823e:	f7ff fa87 	bl	8017750 <__malloc_lock>
 8018242:	4a1e      	ldr	r2, [pc, #120]	; (80182bc <_free_r+0x94>)
 8018244:	9801      	ldr	r0, [sp, #4]
 8018246:	6813      	ldr	r3, [r2, #0]
 8018248:	b933      	cbnz	r3, 8018258 <_free_r+0x30>
 801824a:	6063      	str	r3, [r4, #4]
 801824c:	6014      	str	r4, [r2, #0]
 801824e:	b003      	add	sp, #12
 8018250:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018254:	f7ff ba82 	b.w	801775c <__malloc_unlock>
 8018258:	42a3      	cmp	r3, r4
 801825a:	d908      	bls.n	801826e <_free_r+0x46>
 801825c:	6825      	ldr	r5, [r4, #0]
 801825e:	1961      	adds	r1, r4, r5
 8018260:	428b      	cmp	r3, r1
 8018262:	bf01      	itttt	eq
 8018264:	6819      	ldreq	r1, [r3, #0]
 8018266:	685b      	ldreq	r3, [r3, #4]
 8018268:	1949      	addeq	r1, r1, r5
 801826a:	6021      	streq	r1, [r4, #0]
 801826c:	e7ed      	b.n	801824a <_free_r+0x22>
 801826e:	461a      	mov	r2, r3
 8018270:	685b      	ldr	r3, [r3, #4]
 8018272:	b10b      	cbz	r3, 8018278 <_free_r+0x50>
 8018274:	42a3      	cmp	r3, r4
 8018276:	d9fa      	bls.n	801826e <_free_r+0x46>
 8018278:	6811      	ldr	r1, [r2, #0]
 801827a:	1855      	adds	r5, r2, r1
 801827c:	42a5      	cmp	r5, r4
 801827e:	d10b      	bne.n	8018298 <_free_r+0x70>
 8018280:	6824      	ldr	r4, [r4, #0]
 8018282:	4421      	add	r1, r4
 8018284:	1854      	adds	r4, r2, r1
 8018286:	42a3      	cmp	r3, r4
 8018288:	6011      	str	r1, [r2, #0]
 801828a:	d1e0      	bne.n	801824e <_free_r+0x26>
 801828c:	681c      	ldr	r4, [r3, #0]
 801828e:	685b      	ldr	r3, [r3, #4]
 8018290:	6053      	str	r3, [r2, #4]
 8018292:	440c      	add	r4, r1
 8018294:	6014      	str	r4, [r2, #0]
 8018296:	e7da      	b.n	801824e <_free_r+0x26>
 8018298:	d902      	bls.n	80182a0 <_free_r+0x78>
 801829a:	230c      	movs	r3, #12
 801829c:	6003      	str	r3, [r0, #0]
 801829e:	e7d6      	b.n	801824e <_free_r+0x26>
 80182a0:	6825      	ldr	r5, [r4, #0]
 80182a2:	1961      	adds	r1, r4, r5
 80182a4:	428b      	cmp	r3, r1
 80182a6:	bf04      	itt	eq
 80182a8:	6819      	ldreq	r1, [r3, #0]
 80182aa:	685b      	ldreq	r3, [r3, #4]
 80182ac:	6063      	str	r3, [r4, #4]
 80182ae:	bf04      	itt	eq
 80182b0:	1949      	addeq	r1, r1, r5
 80182b2:	6021      	streq	r1, [r4, #0]
 80182b4:	6054      	str	r4, [r2, #4]
 80182b6:	e7ca      	b.n	801824e <_free_r+0x26>
 80182b8:	b003      	add	sp, #12
 80182ba:	bd30      	pop	{r4, r5, pc}
 80182bc:	2000a070 	.word	0x2000a070

080182c0 <_malloc_usable_size_r>:
 80182c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80182c4:	1f18      	subs	r0, r3, #4
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	bfbc      	itt	lt
 80182ca:	580b      	ldrlt	r3, [r1, r0]
 80182cc:	18c0      	addlt	r0, r0, r3
 80182ce:	4770      	bx	lr

080182d0 <__ssputs_r>:
 80182d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80182d4:	688e      	ldr	r6, [r1, #8]
 80182d6:	461f      	mov	r7, r3
 80182d8:	42be      	cmp	r6, r7
 80182da:	680b      	ldr	r3, [r1, #0]
 80182dc:	4682      	mov	sl, r0
 80182de:	460c      	mov	r4, r1
 80182e0:	4690      	mov	r8, r2
 80182e2:	d82c      	bhi.n	801833e <__ssputs_r+0x6e>
 80182e4:	898a      	ldrh	r2, [r1, #12]
 80182e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80182ea:	d026      	beq.n	801833a <__ssputs_r+0x6a>
 80182ec:	6965      	ldr	r5, [r4, #20]
 80182ee:	6909      	ldr	r1, [r1, #16]
 80182f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80182f4:	eba3 0901 	sub.w	r9, r3, r1
 80182f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80182fc:	1c7b      	adds	r3, r7, #1
 80182fe:	444b      	add	r3, r9
 8018300:	106d      	asrs	r5, r5, #1
 8018302:	429d      	cmp	r5, r3
 8018304:	bf38      	it	cc
 8018306:	461d      	movcc	r5, r3
 8018308:	0553      	lsls	r3, r2, #21
 801830a:	d527      	bpl.n	801835c <__ssputs_r+0x8c>
 801830c:	4629      	mov	r1, r5
 801830e:	f7ff f99f 	bl	8017650 <_malloc_r>
 8018312:	4606      	mov	r6, r0
 8018314:	b360      	cbz	r0, 8018370 <__ssputs_r+0xa0>
 8018316:	6921      	ldr	r1, [r4, #16]
 8018318:	464a      	mov	r2, r9
 801831a:	f7ff ff4c 	bl	80181b6 <memcpy>
 801831e:	89a3      	ldrh	r3, [r4, #12]
 8018320:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018328:	81a3      	strh	r3, [r4, #12]
 801832a:	6126      	str	r6, [r4, #16]
 801832c:	6165      	str	r5, [r4, #20]
 801832e:	444e      	add	r6, r9
 8018330:	eba5 0509 	sub.w	r5, r5, r9
 8018334:	6026      	str	r6, [r4, #0]
 8018336:	60a5      	str	r5, [r4, #8]
 8018338:	463e      	mov	r6, r7
 801833a:	42be      	cmp	r6, r7
 801833c:	d900      	bls.n	8018340 <__ssputs_r+0x70>
 801833e:	463e      	mov	r6, r7
 8018340:	6820      	ldr	r0, [r4, #0]
 8018342:	4632      	mov	r2, r6
 8018344:	4641      	mov	r1, r8
 8018346:	f000 fd11 	bl	8018d6c <memmove>
 801834a:	68a3      	ldr	r3, [r4, #8]
 801834c:	1b9b      	subs	r3, r3, r6
 801834e:	60a3      	str	r3, [r4, #8]
 8018350:	6823      	ldr	r3, [r4, #0]
 8018352:	4433      	add	r3, r6
 8018354:	6023      	str	r3, [r4, #0]
 8018356:	2000      	movs	r0, #0
 8018358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801835c:	462a      	mov	r2, r5
 801835e:	f7ff fa77 	bl	8017850 <_realloc_r>
 8018362:	4606      	mov	r6, r0
 8018364:	2800      	cmp	r0, #0
 8018366:	d1e0      	bne.n	801832a <__ssputs_r+0x5a>
 8018368:	6921      	ldr	r1, [r4, #16]
 801836a:	4650      	mov	r0, sl
 801836c:	f7ff ff5c 	bl	8018228 <_free_r>
 8018370:	230c      	movs	r3, #12
 8018372:	f8ca 3000 	str.w	r3, [sl]
 8018376:	89a3      	ldrh	r3, [r4, #12]
 8018378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801837c:	81a3      	strh	r3, [r4, #12]
 801837e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018382:	e7e9      	b.n	8018358 <__ssputs_r+0x88>

08018384 <_svfiprintf_r>:
 8018384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018388:	4698      	mov	r8, r3
 801838a:	898b      	ldrh	r3, [r1, #12]
 801838c:	061b      	lsls	r3, r3, #24
 801838e:	b09d      	sub	sp, #116	; 0x74
 8018390:	4607      	mov	r7, r0
 8018392:	460d      	mov	r5, r1
 8018394:	4614      	mov	r4, r2
 8018396:	d50e      	bpl.n	80183b6 <_svfiprintf_r+0x32>
 8018398:	690b      	ldr	r3, [r1, #16]
 801839a:	b963      	cbnz	r3, 80183b6 <_svfiprintf_r+0x32>
 801839c:	2140      	movs	r1, #64	; 0x40
 801839e:	f7ff f957 	bl	8017650 <_malloc_r>
 80183a2:	6028      	str	r0, [r5, #0]
 80183a4:	6128      	str	r0, [r5, #16]
 80183a6:	b920      	cbnz	r0, 80183b2 <_svfiprintf_r+0x2e>
 80183a8:	230c      	movs	r3, #12
 80183aa:	603b      	str	r3, [r7, #0]
 80183ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80183b0:	e0d0      	b.n	8018554 <_svfiprintf_r+0x1d0>
 80183b2:	2340      	movs	r3, #64	; 0x40
 80183b4:	616b      	str	r3, [r5, #20]
 80183b6:	2300      	movs	r3, #0
 80183b8:	9309      	str	r3, [sp, #36]	; 0x24
 80183ba:	2320      	movs	r3, #32
 80183bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80183c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80183c4:	2330      	movs	r3, #48	; 0x30
 80183c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801856c <_svfiprintf_r+0x1e8>
 80183ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80183ce:	f04f 0901 	mov.w	r9, #1
 80183d2:	4623      	mov	r3, r4
 80183d4:	469a      	mov	sl, r3
 80183d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80183da:	b10a      	cbz	r2, 80183e0 <_svfiprintf_r+0x5c>
 80183dc:	2a25      	cmp	r2, #37	; 0x25
 80183de:	d1f9      	bne.n	80183d4 <_svfiprintf_r+0x50>
 80183e0:	ebba 0b04 	subs.w	fp, sl, r4
 80183e4:	d00b      	beq.n	80183fe <_svfiprintf_r+0x7a>
 80183e6:	465b      	mov	r3, fp
 80183e8:	4622      	mov	r2, r4
 80183ea:	4629      	mov	r1, r5
 80183ec:	4638      	mov	r0, r7
 80183ee:	f7ff ff6f 	bl	80182d0 <__ssputs_r>
 80183f2:	3001      	adds	r0, #1
 80183f4:	f000 80a9 	beq.w	801854a <_svfiprintf_r+0x1c6>
 80183f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80183fa:	445a      	add	r2, fp
 80183fc:	9209      	str	r2, [sp, #36]	; 0x24
 80183fe:	f89a 3000 	ldrb.w	r3, [sl]
 8018402:	2b00      	cmp	r3, #0
 8018404:	f000 80a1 	beq.w	801854a <_svfiprintf_r+0x1c6>
 8018408:	2300      	movs	r3, #0
 801840a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801840e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018412:	f10a 0a01 	add.w	sl, sl, #1
 8018416:	9304      	str	r3, [sp, #16]
 8018418:	9307      	str	r3, [sp, #28]
 801841a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801841e:	931a      	str	r3, [sp, #104]	; 0x68
 8018420:	4654      	mov	r4, sl
 8018422:	2205      	movs	r2, #5
 8018424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018428:	4850      	ldr	r0, [pc, #320]	; (801856c <_svfiprintf_r+0x1e8>)
 801842a:	f7e7 fef1 	bl	8000210 <memchr>
 801842e:	9a04      	ldr	r2, [sp, #16]
 8018430:	b9d8      	cbnz	r0, 801846a <_svfiprintf_r+0xe6>
 8018432:	06d0      	lsls	r0, r2, #27
 8018434:	bf44      	itt	mi
 8018436:	2320      	movmi	r3, #32
 8018438:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801843c:	0711      	lsls	r1, r2, #28
 801843e:	bf44      	itt	mi
 8018440:	232b      	movmi	r3, #43	; 0x2b
 8018442:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018446:	f89a 3000 	ldrb.w	r3, [sl]
 801844a:	2b2a      	cmp	r3, #42	; 0x2a
 801844c:	d015      	beq.n	801847a <_svfiprintf_r+0xf6>
 801844e:	9a07      	ldr	r2, [sp, #28]
 8018450:	4654      	mov	r4, sl
 8018452:	2000      	movs	r0, #0
 8018454:	f04f 0c0a 	mov.w	ip, #10
 8018458:	4621      	mov	r1, r4
 801845a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801845e:	3b30      	subs	r3, #48	; 0x30
 8018460:	2b09      	cmp	r3, #9
 8018462:	d94d      	bls.n	8018500 <_svfiprintf_r+0x17c>
 8018464:	b1b0      	cbz	r0, 8018494 <_svfiprintf_r+0x110>
 8018466:	9207      	str	r2, [sp, #28]
 8018468:	e014      	b.n	8018494 <_svfiprintf_r+0x110>
 801846a:	eba0 0308 	sub.w	r3, r0, r8
 801846e:	fa09 f303 	lsl.w	r3, r9, r3
 8018472:	4313      	orrs	r3, r2
 8018474:	9304      	str	r3, [sp, #16]
 8018476:	46a2      	mov	sl, r4
 8018478:	e7d2      	b.n	8018420 <_svfiprintf_r+0x9c>
 801847a:	9b03      	ldr	r3, [sp, #12]
 801847c:	1d19      	adds	r1, r3, #4
 801847e:	681b      	ldr	r3, [r3, #0]
 8018480:	9103      	str	r1, [sp, #12]
 8018482:	2b00      	cmp	r3, #0
 8018484:	bfbb      	ittet	lt
 8018486:	425b      	neglt	r3, r3
 8018488:	f042 0202 	orrlt.w	r2, r2, #2
 801848c:	9307      	strge	r3, [sp, #28]
 801848e:	9307      	strlt	r3, [sp, #28]
 8018490:	bfb8      	it	lt
 8018492:	9204      	strlt	r2, [sp, #16]
 8018494:	7823      	ldrb	r3, [r4, #0]
 8018496:	2b2e      	cmp	r3, #46	; 0x2e
 8018498:	d10c      	bne.n	80184b4 <_svfiprintf_r+0x130>
 801849a:	7863      	ldrb	r3, [r4, #1]
 801849c:	2b2a      	cmp	r3, #42	; 0x2a
 801849e:	d134      	bne.n	801850a <_svfiprintf_r+0x186>
 80184a0:	9b03      	ldr	r3, [sp, #12]
 80184a2:	1d1a      	adds	r2, r3, #4
 80184a4:	681b      	ldr	r3, [r3, #0]
 80184a6:	9203      	str	r2, [sp, #12]
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	bfb8      	it	lt
 80184ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80184b0:	3402      	adds	r4, #2
 80184b2:	9305      	str	r3, [sp, #20]
 80184b4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801857c <_svfiprintf_r+0x1f8>
 80184b8:	7821      	ldrb	r1, [r4, #0]
 80184ba:	2203      	movs	r2, #3
 80184bc:	4650      	mov	r0, sl
 80184be:	f7e7 fea7 	bl	8000210 <memchr>
 80184c2:	b138      	cbz	r0, 80184d4 <_svfiprintf_r+0x150>
 80184c4:	9b04      	ldr	r3, [sp, #16]
 80184c6:	eba0 000a 	sub.w	r0, r0, sl
 80184ca:	2240      	movs	r2, #64	; 0x40
 80184cc:	4082      	lsls	r2, r0
 80184ce:	4313      	orrs	r3, r2
 80184d0:	3401      	adds	r4, #1
 80184d2:	9304      	str	r3, [sp, #16]
 80184d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80184d8:	4825      	ldr	r0, [pc, #148]	; (8018570 <_svfiprintf_r+0x1ec>)
 80184da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80184de:	2206      	movs	r2, #6
 80184e0:	f7e7 fe96 	bl	8000210 <memchr>
 80184e4:	2800      	cmp	r0, #0
 80184e6:	d038      	beq.n	801855a <_svfiprintf_r+0x1d6>
 80184e8:	4b22      	ldr	r3, [pc, #136]	; (8018574 <_svfiprintf_r+0x1f0>)
 80184ea:	bb1b      	cbnz	r3, 8018534 <_svfiprintf_r+0x1b0>
 80184ec:	9b03      	ldr	r3, [sp, #12]
 80184ee:	3307      	adds	r3, #7
 80184f0:	f023 0307 	bic.w	r3, r3, #7
 80184f4:	3308      	adds	r3, #8
 80184f6:	9303      	str	r3, [sp, #12]
 80184f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184fa:	4433      	add	r3, r6
 80184fc:	9309      	str	r3, [sp, #36]	; 0x24
 80184fe:	e768      	b.n	80183d2 <_svfiprintf_r+0x4e>
 8018500:	fb0c 3202 	mla	r2, ip, r2, r3
 8018504:	460c      	mov	r4, r1
 8018506:	2001      	movs	r0, #1
 8018508:	e7a6      	b.n	8018458 <_svfiprintf_r+0xd4>
 801850a:	2300      	movs	r3, #0
 801850c:	3401      	adds	r4, #1
 801850e:	9305      	str	r3, [sp, #20]
 8018510:	4619      	mov	r1, r3
 8018512:	f04f 0c0a 	mov.w	ip, #10
 8018516:	4620      	mov	r0, r4
 8018518:	f810 2b01 	ldrb.w	r2, [r0], #1
 801851c:	3a30      	subs	r2, #48	; 0x30
 801851e:	2a09      	cmp	r2, #9
 8018520:	d903      	bls.n	801852a <_svfiprintf_r+0x1a6>
 8018522:	2b00      	cmp	r3, #0
 8018524:	d0c6      	beq.n	80184b4 <_svfiprintf_r+0x130>
 8018526:	9105      	str	r1, [sp, #20]
 8018528:	e7c4      	b.n	80184b4 <_svfiprintf_r+0x130>
 801852a:	fb0c 2101 	mla	r1, ip, r1, r2
 801852e:	4604      	mov	r4, r0
 8018530:	2301      	movs	r3, #1
 8018532:	e7f0      	b.n	8018516 <_svfiprintf_r+0x192>
 8018534:	ab03      	add	r3, sp, #12
 8018536:	9300      	str	r3, [sp, #0]
 8018538:	462a      	mov	r2, r5
 801853a:	4b0f      	ldr	r3, [pc, #60]	; (8018578 <_svfiprintf_r+0x1f4>)
 801853c:	a904      	add	r1, sp, #16
 801853e:	4638      	mov	r0, r7
 8018540:	f3af 8000 	nop.w
 8018544:	1c42      	adds	r2, r0, #1
 8018546:	4606      	mov	r6, r0
 8018548:	d1d6      	bne.n	80184f8 <_svfiprintf_r+0x174>
 801854a:	89ab      	ldrh	r3, [r5, #12]
 801854c:	065b      	lsls	r3, r3, #25
 801854e:	f53f af2d 	bmi.w	80183ac <_svfiprintf_r+0x28>
 8018552:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018554:	b01d      	add	sp, #116	; 0x74
 8018556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801855a:	ab03      	add	r3, sp, #12
 801855c:	9300      	str	r3, [sp, #0]
 801855e:	462a      	mov	r2, r5
 8018560:	4b05      	ldr	r3, [pc, #20]	; (8018578 <_svfiprintf_r+0x1f4>)
 8018562:	a904      	add	r1, sp, #16
 8018564:	4638      	mov	r0, r7
 8018566:	f000 f9bd 	bl	80188e4 <_printf_i>
 801856a:	e7eb      	b.n	8018544 <_svfiprintf_r+0x1c0>
 801856c:	08019ab0 	.word	0x08019ab0
 8018570:	08019aba 	.word	0x08019aba
 8018574:	00000000 	.word	0x00000000
 8018578:	080182d1 	.word	0x080182d1
 801857c:	08019ab6 	.word	0x08019ab6

08018580 <__sfputc_r>:
 8018580:	6893      	ldr	r3, [r2, #8]
 8018582:	3b01      	subs	r3, #1
 8018584:	2b00      	cmp	r3, #0
 8018586:	b410      	push	{r4}
 8018588:	6093      	str	r3, [r2, #8]
 801858a:	da08      	bge.n	801859e <__sfputc_r+0x1e>
 801858c:	6994      	ldr	r4, [r2, #24]
 801858e:	42a3      	cmp	r3, r4
 8018590:	db01      	blt.n	8018596 <__sfputc_r+0x16>
 8018592:	290a      	cmp	r1, #10
 8018594:	d103      	bne.n	801859e <__sfputc_r+0x1e>
 8018596:	f85d 4b04 	ldr.w	r4, [sp], #4
 801859a:	f7ff bc57 	b.w	8017e4c <__swbuf_r>
 801859e:	6813      	ldr	r3, [r2, #0]
 80185a0:	1c58      	adds	r0, r3, #1
 80185a2:	6010      	str	r0, [r2, #0]
 80185a4:	7019      	strb	r1, [r3, #0]
 80185a6:	4608      	mov	r0, r1
 80185a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80185ac:	4770      	bx	lr

080185ae <__sfputs_r>:
 80185ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185b0:	4606      	mov	r6, r0
 80185b2:	460f      	mov	r7, r1
 80185b4:	4614      	mov	r4, r2
 80185b6:	18d5      	adds	r5, r2, r3
 80185b8:	42ac      	cmp	r4, r5
 80185ba:	d101      	bne.n	80185c0 <__sfputs_r+0x12>
 80185bc:	2000      	movs	r0, #0
 80185be:	e007      	b.n	80185d0 <__sfputs_r+0x22>
 80185c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80185c4:	463a      	mov	r2, r7
 80185c6:	4630      	mov	r0, r6
 80185c8:	f7ff ffda 	bl	8018580 <__sfputc_r>
 80185cc:	1c43      	adds	r3, r0, #1
 80185ce:	d1f3      	bne.n	80185b8 <__sfputs_r+0xa>
 80185d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080185d4 <_vfiprintf_r>:
 80185d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185d8:	460d      	mov	r5, r1
 80185da:	b09d      	sub	sp, #116	; 0x74
 80185dc:	4614      	mov	r4, r2
 80185de:	4698      	mov	r8, r3
 80185e0:	4606      	mov	r6, r0
 80185e2:	b118      	cbz	r0, 80185ec <_vfiprintf_r+0x18>
 80185e4:	6a03      	ldr	r3, [r0, #32]
 80185e6:	b90b      	cbnz	r3, 80185ec <_vfiprintf_r+0x18>
 80185e8:	f7ff fa6a 	bl	8017ac0 <__sinit>
 80185ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80185ee:	07d9      	lsls	r1, r3, #31
 80185f0:	d405      	bmi.n	80185fe <_vfiprintf_r+0x2a>
 80185f2:	89ab      	ldrh	r3, [r5, #12]
 80185f4:	059a      	lsls	r2, r3, #22
 80185f6:	d402      	bmi.n	80185fe <_vfiprintf_r+0x2a>
 80185f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80185fa:	f7ff fdd2 	bl	80181a2 <__retarget_lock_acquire_recursive>
 80185fe:	89ab      	ldrh	r3, [r5, #12]
 8018600:	071b      	lsls	r3, r3, #28
 8018602:	d501      	bpl.n	8018608 <_vfiprintf_r+0x34>
 8018604:	692b      	ldr	r3, [r5, #16]
 8018606:	b99b      	cbnz	r3, 8018630 <_vfiprintf_r+0x5c>
 8018608:	4629      	mov	r1, r5
 801860a:	4630      	mov	r0, r6
 801860c:	f7ff fc5c 	bl	8017ec8 <__swsetup_r>
 8018610:	b170      	cbz	r0, 8018630 <_vfiprintf_r+0x5c>
 8018612:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018614:	07dc      	lsls	r4, r3, #31
 8018616:	d504      	bpl.n	8018622 <_vfiprintf_r+0x4e>
 8018618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801861c:	b01d      	add	sp, #116	; 0x74
 801861e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018622:	89ab      	ldrh	r3, [r5, #12]
 8018624:	0598      	lsls	r0, r3, #22
 8018626:	d4f7      	bmi.n	8018618 <_vfiprintf_r+0x44>
 8018628:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801862a:	f7ff fdbb 	bl	80181a4 <__retarget_lock_release_recursive>
 801862e:	e7f3      	b.n	8018618 <_vfiprintf_r+0x44>
 8018630:	2300      	movs	r3, #0
 8018632:	9309      	str	r3, [sp, #36]	; 0x24
 8018634:	2320      	movs	r3, #32
 8018636:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801863a:	f8cd 800c 	str.w	r8, [sp, #12]
 801863e:	2330      	movs	r3, #48	; 0x30
 8018640:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80187f4 <_vfiprintf_r+0x220>
 8018644:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018648:	f04f 0901 	mov.w	r9, #1
 801864c:	4623      	mov	r3, r4
 801864e:	469a      	mov	sl, r3
 8018650:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018654:	b10a      	cbz	r2, 801865a <_vfiprintf_r+0x86>
 8018656:	2a25      	cmp	r2, #37	; 0x25
 8018658:	d1f9      	bne.n	801864e <_vfiprintf_r+0x7a>
 801865a:	ebba 0b04 	subs.w	fp, sl, r4
 801865e:	d00b      	beq.n	8018678 <_vfiprintf_r+0xa4>
 8018660:	465b      	mov	r3, fp
 8018662:	4622      	mov	r2, r4
 8018664:	4629      	mov	r1, r5
 8018666:	4630      	mov	r0, r6
 8018668:	f7ff ffa1 	bl	80185ae <__sfputs_r>
 801866c:	3001      	adds	r0, #1
 801866e:	f000 80a9 	beq.w	80187c4 <_vfiprintf_r+0x1f0>
 8018672:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018674:	445a      	add	r2, fp
 8018676:	9209      	str	r2, [sp, #36]	; 0x24
 8018678:	f89a 3000 	ldrb.w	r3, [sl]
 801867c:	2b00      	cmp	r3, #0
 801867e:	f000 80a1 	beq.w	80187c4 <_vfiprintf_r+0x1f0>
 8018682:	2300      	movs	r3, #0
 8018684:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018688:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801868c:	f10a 0a01 	add.w	sl, sl, #1
 8018690:	9304      	str	r3, [sp, #16]
 8018692:	9307      	str	r3, [sp, #28]
 8018694:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018698:	931a      	str	r3, [sp, #104]	; 0x68
 801869a:	4654      	mov	r4, sl
 801869c:	2205      	movs	r2, #5
 801869e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80186a2:	4854      	ldr	r0, [pc, #336]	; (80187f4 <_vfiprintf_r+0x220>)
 80186a4:	f7e7 fdb4 	bl	8000210 <memchr>
 80186a8:	9a04      	ldr	r2, [sp, #16]
 80186aa:	b9d8      	cbnz	r0, 80186e4 <_vfiprintf_r+0x110>
 80186ac:	06d1      	lsls	r1, r2, #27
 80186ae:	bf44      	itt	mi
 80186b0:	2320      	movmi	r3, #32
 80186b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80186b6:	0713      	lsls	r3, r2, #28
 80186b8:	bf44      	itt	mi
 80186ba:	232b      	movmi	r3, #43	; 0x2b
 80186bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80186c0:	f89a 3000 	ldrb.w	r3, [sl]
 80186c4:	2b2a      	cmp	r3, #42	; 0x2a
 80186c6:	d015      	beq.n	80186f4 <_vfiprintf_r+0x120>
 80186c8:	9a07      	ldr	r2, [sp, #28]
 80186ca:	4654      	mov	r4, sl
 80186cc:	2000      	movs	r0, #0
 80186ce:	f04f 0c0a 	mov.w	ip, #10
 80186d2:	4621      	mov	r1, r4
 80186d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80186d8:	3b30      	subs	r3, #48	; 0x30
 80186da:	2b09      	cmp	r3, #9
 80186dc:	d94d      	bls.n	801877a <_vfiprintf_r+0x1a6>
 80186de:	b1b0      	cbz	r0, 801870e <_vfiprintf_r+0x13a>
 80186e0:	9207      	str	r2, [sp, #28]
 80186e2:	e014      	b.n	801870e <_vfiprintf_r+0x13a>
 80186e4:	eba0 0308 	sub.w	r3, r0, r8
 80186e8:	fa09 f303 	lsl.w	r3, r9, r3
 80186ec:	4313      	orrs	r3, r2
 80186ee:	9304      	str	r3, [sp, #16]
 80186f0:	46a2      	mov	sl, r4
 80186f2:	e7d2      	b.n	801869a <_vfiprintf_r+0xc6>
 80186f4:	9b03      	ldr	r3, [sp, #12]
 80186f6:	1d19      	adds	r1, r3, #4
 80186f8:	681b      	ldr	r3, [r3, #0]
 80186fa:	9103      	str	r1, [sp, #12]
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	bfbb      	ittet	lt
 8018700:	425b      	neglt	r3, r3
 8018702:	f042 0202 	orrlt.w	r2, r2, #2
 8018706:	9307      	strge	r3, [sp, #28]
 8018708:	9307      	strlt	r3, [sp, #28]
 801870a:	bfb8      	it	lt
 801870c:	9204      	strlt	r2, [sp, #16]
 801870e:	7823      	ldrb	r3, [r4, #0]
 8018710:	2b2e      	cmp	r3, #46	; 0x2e
 8018712:	d10c      	bne.n	801872e <_vfiprintf_r+0x15a>
 8018714:	7863      	ldrb	r3, [r4, #1]
 8018716:	2b2a      	cmp	r3, #42	; 0x2a
 8018718:	d134      	bne.n	8018784 <_vfiprintf_r+0x1b0>
 801871a:	9b03      	ldr	r3, [sp, #12]
 801871c:	1d1a      	adds	r2, r3, #4
 801871e:	681b      	ldr	r3, [r3, #0]
 8018720:	9203      	str	r2, [sp, #12]
 8018722:	2b00      	cmp	r3, #0
 8018724:	bfb8      	it	lt
 8018726:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801872a:	3402      	adds	r4, #2
 801872c:	9305      	str	r3, [sp, #20]
 801872e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8018804 <_vfiprintf_r+0x230>
 8018732:	7821      	ldrb	r1, [r4, #0]
 8018734:	2203      	movs	r2, #3
 8018736:	4650      	mov	r0, sl
 8018738:	f7e7 fd6a 	bl	8000210 <memchr>
 801873c:	b138      	cbz	r0, 801874e <_vfiprintf_r+0x17a>
 801873e:	9b04      	ldr	r3, [sp, #16]
 8018740:	eba0 000a 	sub.w	r0, r0, sl
 8018744:	2240      	movs	r2, #64	; 0x40
 8018746:	4082      	lsls	r2, r0
 8018748:	4313      	orrs	r3, r2
 801874a:	3401      	adds	r4, #1
 801874c:	9304      	str	r3, [sp, #16]
 801874e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018752:	4829      	ldr	r0, [pc, #164]	; (80187f8 <_vfiprintf_r+0x224>)
 8018754:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018758:	2206      	movs	r2, #6
 801875a:	f7e7 fd59 	bl	8000210 <memchr>
 801875e:	2800      	cmp	r0, #0
 8018760:	d03f      	beq.n	80187e2 <_vfiprintf_r+0x20e>
 8018762:	4b26      	ldr	r3, [pc, #152]	; (80187fc <_vfiprintf_r+0x228>)
 8018764:	bb1b      	cbnz	r3, 80187ae <_vfiprintf_r+0x1da>
 8018766:	9b03      	ldr	r3, [sp, #12]
 8018768:	3307      	adds	r3, #7
 801876a:	f023 0307 	bic.w	r3, r3, #7
 801876e:	3308      	adds	r3, #8
 8018770:	9303      	str	r3, [sp, #12]
 8018772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018774:	443b      	add	r3, r7
 8018776:	9309      	str	r3, [sp, #36]	; 0x24
 8018778:	e768      	b.n	801864c <_vfiprintf_r+0x78>
 801877a:	fb0c 3202 	mla	r2, ip, r2, r3
 801877e:	460c      	mov	r4, r1
 8018780:	2001      	movs	r0, #1
 8018782:	e7a6      	b.n	80186d2 <_vfiprintf_r+0xfe>
 8018784:	2300      	movs	r3, #0
 8018786:	3401      	adds	r4, #1
 8018788:	9305      	str	r3, [sp, #20]
 801878a:	4619      	mov	r1, r3
 801878c:	f04f 0c0a 	mov.w	ip, #10
 8018790:	4620      	mov	r0, r4
 8018792:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018796:	3a30      	subs	r2, #48	; 0x30
 8018798:	2a09      	cmp	r2, #9
 801879a:	d903      	bls.n	80187a4 <_vfiprintf_r+0x1d0>
 801879c:	2b00      	cmp	r3, #0
 801879e:	d0c6      	beq.n	801872e <_vfiprintf_r+0x15a>
 80187a0:	9105      	str	r1, [sp, #20]
 80187a2:	e7c4      	b.n	801872e <_vfiprintf_r+0x15a>
 80187a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80187a8:	4604      	mov	r4, r0
 80187aa:	2301      	movs	r3, #1
 80187ac:	e7f0      	b.n	8018790 <_vfiprintf_r+0x1bc>
 80187ae:	ab03      	add	r3, sp, #12
 80187b0:	9300      	str	r3, [sp, #0]
 80187b2:	462a      	mov	r2, r5
 80187b4:	4b12      	ldr	r3, [pc, #72]	; (8018800 <_vfiprintf_r+0x22c>)
 80187b6:	a904      	add	r1, sp, #16
 80187b8:	4630      	mov	r0, r6
 80187ba:	f3af 8000 	nop.w
 80187be:	4607      	mov	r7, r0
 80187c0:	1c78      	adds	r0, r7, #1
 80187c2:	d1d6      	bne.n	8018772 <_vfiprintf_r+0x19e>
 80187c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80187c6:	07d9      	lsls	r1, r3, #31
 80187c8:	d405      	bmi.n	80187d6 <_vfiprintf_r+0x202>
 80187ca:	89ab      	ldrh	r3, [r5, #12]
 80187cc:	059a      	lsls	r2, r3, #22
 80187ce:	d402      	bmi.n	80187d6 <_vfiprintf_r+0x202>
 80187d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80187d2:	f7ff fce7 	bl	80181a4 <__retarget_lock_release_recursive>
 80187d6:	89ab      	ldrh	r3, [r5, #12]
 80187d8:	065b      	lsls	r3, r3, #25
 80187da:	f53f af1d 	bmi.w	8018618 <_vfiprintf_r+0x44>
 80187de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80187e0:	e71c      	b.n	801861c <_vfiprintf_r+0x48>
 80187e2:	ab03      	add	r3, sp, #12
 80187e4:	9300      	str	r3, [sp, #0]
 80187e6:	462a      	mov	r2, r5
 80187e8:	4b05      	ldr	r3, [pc, #20]	; (8018800 <_vfiprintf_r+0x22c>)
 80187ea:	a904      	add	r1, sp, #16
 80187ec:	4630      	mov	r0, r6
 80187ee:	f000 f879 	bl	80188e4 <_printf_i>
 80187f2:	e7e4      	b.n	80187be <_vfiprintf_r+0x1ea>
 80187f4:	08019ab0 	.word	0x08019ab0
 80187f8:	08019aba 	.word	0x08019aba
 80187fc:	00000000 	.word	0x00000000
 8018800:	080185af 	.word	0x080185af
 8018804:	08019ab6 	.word	0x08019ab6

08018808 <_printf_common>:
 8018808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801880c:	4616      	mov	r6, r2
 801880e:	4699      	mov	r9, r3
 8018810:	688a      	ldr	r2, [r1, #8]
 8018812:	690b      	ldr	r3, [r1, #16]
 8018814:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018818:	4293      	cmp	r3, r2
 801881a:	bfb8      	it	lt
 801881c:	4613      	movlt	r3, r2
 801881e:	6033      	str	r3, [r6, #0]
 8018820:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018824:	4607      	mov	r7, r0
 8018826:	460c      	mov	r4, r1
 8018828:	b10a      	cbz	r2, 801882e <_printf_common+0x26>
 801882a:	3301      	adds	r3, #1
 801882c:	6033      	str	r3, [r6, #0]
 801882e:	6823      	ldr	r3, [r4, #0]
 8018830:	0699      	lsls	r1, r3, #26
 8018832:	bf42      	ittt	mi
 8018834:	6833      	ldrmi	r3, [r6, #0]
 8018836:	3302      	addmi	r3, #2
 8018838:	6033      	strmi	r3, [r6, #0]
 801883a:	6825      	ldr	r5, [r4, #0]
 801883c:	f015 0506 	ands.w	r5, r5, #6
 8018840:	d106      	bne.n	8018850 <_printf_common+0x48>
 8018842:	f104 0a19 	add.w	sl, r4, #25
 8018846:	68e3      	ldr	r3, [r4, #12]
 8018848:	6832      	ldr	r2, [r6, #0]
 801884a:	1a9b      	subs	r3, r3, r2
 801884c:	42ab      	cmp	r3, r5
 801884e:	dc26      	bgt.n	801889e <_printf_common+0x96>
 8018850:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018854:	1e13      	subs	r3, r2, #0
 8018856:	6822      	ldr	r2, [r4, #0]
 8018858:	bf18      	it	ne
 801885a:	2301      	movne	r3, #1
 801885c:	0692      	lsls	r2, r2, #26
 801885e:	d42b      	bmi.n	80188b8 <_printf_common+0xb0>
 8018860:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018864:	4649      	mov	r1, r9
 8018866:	4638      	mov	r0, r7
 8018868:	47c0      	blx	r8
 801886a:	3001      	adds	r0, #1
 801886c:	d01e      	beq.n	80188ac <_printf_common+0xa4>
 801886e:	6823      	ldr	r3, [r4, #0]
 8018870:	6922      	ldr	r2, [r4, #16]
 8018872:	f003 0306 	and.w	r3, r3, #6
 8018876:	2b04      	cmp	r3, #4
 8018878:	bf02      	ittt	eq
 801887a:	68e5      	ldreq	r5, [r4, #12]
 801887c:	6833      	ldreq	r3, [r6, #0]
 801887e:	1aed      	subeq	r5, r5, r3
 8018880:	68a3      	ldr	r3, [r4, #8]
 8018882:	bf0c      	ite	eq
 8018884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018888:	2500      	movne	r5, #0
 801888a:	4293      	cmp	r3, r2
 801888c:	bfc4      	itt	gt
 801888e:	1a9b      	subgt	r3, r3, r2
 8018890:	18ed      	addgt	r5, r5, r3
 8018892:	2600      	movs	r6, #0
 8018894:	341a      	adds	r4, #26
 8018896:	42b5      	cmp	r5, r6
 8018898:	d11a      	bne.n	80188d0 <_printf_common+0xc8>
 801889a:	2000      	movs	r0, #0
 801889c:	e008      	b.n	80188b0 <_printf_common+0xa8>
 801889e:	2301      	movs	r3, #1
 80188a0:	4652      	mov	r2, sl
 80188a2:	4649      	mov	r1, r9
 80188a4:	4638      	mov	r0, r7
 80188a6:	47c0      	blx	r8
 80188a8:	3001      	adds	r0, #1
 80188aa:	d103      	bne.n	80188b4 <_printf_common+0xac>
 80188ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80188b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188b4:	3501      	adds	r5, #1
 80188b6:	e7c6      	b.n	8018846 <_printf_common+0x3e>
 80188b8:	18e1      	adds	r1, r4, r3
 80188ba:	1c5a      	adds	r2, r3, #1
 80188bc:	2030      	movs	r0, #48	; 0x30
 80188be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80188c2:	4422      	add	r2, r4
 80188c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80188c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80188cc:	3302      	adds	r3, #2
 80188ce:	e7c7      	b.n	8018860 <_printf_common+0x58>
 80188d0:	2301      	movs	r3, #1
 80188d2:	4622      	mov	r2, r4
 80188d4:	4649      	mov	r1, r9
 80188d6:	4638      	mov	r0, r7
 80188d8:	47c0      	blx	r8
 80188da:	3001      	adds	r0, #1
 80188dc:	d0e6      	beq.n	80188ac <_printf_common+0xa4>
 80188de:	3601      	adds	r6, #1
 80188e0:	e7d9      	b.n	8018896 <_printf_common+0x8e>
	...

080188e4 <_printf_i>:
 80188e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80188e8:	7e0f      	ldrb	r7, [r1, #24]
 80188ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80188ec:	2f78      	cmp	r7, #120	; 0x78
 80188ee:	4691      	mov	r9, r2
 80188f0:	4680      	mov	r8, r0
 80188f2:	460c      	mov	r4, r1
 80188f4:	469a      	mov	sl, r3
 80188f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80188fa:	d807      	bhi.n	801890c <_printf_i+0x28>
 80188fc:	2f62      	cmp	r7, #98	; 0x62
 80188fe:	d80a      	bhi.n	8018916 <_printf_i+0x32>
 8018900:	2f00      	cmp	r7, #0
 8018902:	f000 80d4 	beq.w	8018aae <_printf_i+0x1ca>
 8018906:	2f58      	cmp	r7, #88	; 0x58
 8018908:	f000 80c0 	beq.w	8018a8c <_printf_i+0x1a8>
 801890c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018910:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018914:	e03a      	b.n	801898c <_printf_i+0xa8>
 8018916:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801891a:	2b15      	cmp	r3, #21
 801891c:	d8f6      	bhi.n	801890c <_printf_i+0x28>
 801891e:	a101      	add	r1, pc, #4	; (adr r1, 8018924 <_printf_i+0x40>)
 8018920:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018924:	0801897d 	.word	0x0801897d
 8018928:	08018991 	.word	0x08018991
 801892c:	0801890d 	.word	0x0801890d
 8018930:	0801890d 	.word	0x0801890d
 8018934:	0801890d 	.word	0x0801890d
 8018938:	0801890d 	.word	0x0801890d
 801893c:	08018991 	.word	0x08018991
 8018940:	0801890d 	.word	0x0801890d
 8018944:	0801890d 	.word	0x0801890d
 8018948:	0801890d 	.word	0x0801890d
 801894c:	0801890d 	.word	0x0801890d
 8018950:	08018a95 	.word	0x08018a95
 8018954:	080189bd 	.word	0x080189bd
 8018958:	08018a4f 	.word	0x08018a4f
 801895c:	0801890d 	.word	0x0801890d
 8018960:	0801890d 	.word	0x0801890d
 8018964:	08018ab7 	.word	0x08018ab7
 8018968:	0801890d 	.word	0x0801890d
 801896c:	080189bd 	.word	0x080189bd
 8018970:	0801890d 	.word	0x0801890d
 8018974:	0801890d 	.word	0x0801890d
 8018978:	08018a57 	.word	0x08018a57
 801897c:	682b      	ldr	r3, [r5, #0]
 801897e:	1d1a      	adds	r2, r3, #4
 8018980:	681b      	ldr	r3, [r3, #0]
 8018982:	602a      	str	r2, [r5, #0]
 8018984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018988:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801898c:	2301      	movs	r3, #1
 801898e:	e09f      	b.n	8018ad0 <_printf_i+0x1ec>
 8018990:	6820      	ldr	r0, [r4, #0]
 8018992:	682b      	ldr	r3, [r5, #0]
 8018994:	0607      	lsls	r7, r0, #24
 8018996:	f103 0104 	add.w	r1, r3, #4
 801899a:	6029      	str	r1, [r5, #0]
 801899c:	d501      	bpl.n	80189a2 <_printf_i+0xbe>
 801899e:	681e      	ldr	r6, [r3, #0]
 80189a0:	e003      	b.n	80189aa <_printf_i+0xc6>
 80189a2:	0646      	lsls	r6, r0, #25
 80189a4:	d5fb      	bpl.n	801899e <_printf_i+0xba>
 80189a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80189aa:	2e00      	cmp	r6, #0
 80189ac:	da03      	bge.n	80189b6 <_printf_i+0xd2>
 80189ae:	232d      	movs	r3, #45	; 0x2d
 80189b0:	4276      	negs	r6, r6
 80189b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80189b6:	485a      	ldr	r0, [pc, #360]	; (8018b20 <_printf_i+0x23c>)
 80189b8:	230a      	movs	r3, #10
 80189ba:	e012      	b.n	80189e2 <_printf_i+0xfe>
 80189bc:	682b      	ldr	r3, [r5, #0]
 80189be:	6820      	ldr	r0, [r4, #0]
 80189c0:	1d19      	adds	r1, r3, #4
 80189c2:	6029      	str	r1, [r5, #0]
 80189c4:	0605      	lsls	r5, r0, #24
 80189c6:	d501      	bpl.n	80189cc <_printf_i+0xe8>
 80189c8:	681e      	ldr	r6, [r3, #0]
 80189ca:	e002      	b.n	80189d2 <_printf_i+0xee>
 80189cc:	0641      	lsls	r1, r0, #25
 80189ce:	d5fb      	bpl.n	80189c8 <_printf_i+0xe4>
 80189d0:	881e      	ldrh	r6, [r3, #0]
 80189d2:	4853      	ldr	r0, [pc, #332]	; (8018b20 <_printf_i+0x23c>)
 80189d4:	2f6f      	cmp	r7, #111	; 0x6f
 80189d6:	bf0c      	ite	eq
 80189d8:	2308      	moveq	r3, #8
 80189da:	230a      	movne	r3, #10
 80189dc:	2100      	movs	r1, #0
 80189de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80189e2:	6865      	ldr	r5, [r4, #4]
 80189e4:	60a5      	str	r5, [r4, #8]
 80189e6:	2d00      	cmp	r5, #0
 80189e8:	bfa2      	ittt	ge
 80189ea:	6821      	ldrge	r1, [r4, #0]
 80189ec:	f021 0104 	bicge.w	r1, r1, #4
 80189f0:	6021      	strge	r1, [r4, #0]
 80189f2:	b90e      	cbnz	r6, 80189f8 <_printf_i+0x114>
 80189f4:	2d00      	cmp	r5, #0
 80189f6:	d04b      	beq.n	8018a90 <_printf_i+0x1ac>
 80189f8:	4615      	mov	r5, r2
 80189fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80189fe:	fb03 6711 	mls	r7, r3, r1, r6
 8018a02:	5dc7      	ldrb	r7, [r0, r7]
 8018a04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018a08:	4637      	mov	r7, r6
 8018a0a:	42bb      	cmp	r3, r7
 8018a0c:	460e      	mov	r6, r1
 8018a0e:	d9f4      	bls.n	80189fa <_printf_i+0x116>
 8018a10:	2b08      	cmp	r3, #8
 8018a12:	d10b      	bne.n	8018a2c <_printf_i+0x148>
 8018a14:	6823      	ldr	r3, [r4, #0]
 8018a16:	07de      	lsls	r6, r3, #31
 8018a18:	d508      	bpl.n	8018a2c <_printf_i+0x148>
 8018a1a:	6923      	ldr	r3, [r4, #16]
 8018a1c:	6861      	ldr	r1, [r4, #4]
 8018a1e:	4299      	cmp	r1, r3
 8018a20:	bfde      	ittt	le
 8018a22:	2330      	movle	r3, #48	; 0x30
 8018a24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018a28:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8018a2c:	1b52      	subs	r2, r2, r5
 8018a2e:	6122      	str	r2, [r4, #16]
 8018a30:	f8cd a000 	str.w	sl, [sp]
 8018a34:	464b      	mov	r3, r9
 8018a36:	aa03      	add	r2, sp, #12
 8018a38:	4621      	mov	r1, r4
 8018a3a:	4640      	mov	r0, r8
 8018a3c:	f7ff fee4 	bl	8018808 <_printf_common>
 8018a40:	3001      	adds	r0, #1
 8018a42:	d14a      	bne.n	8018ada <_printf_i+0x1f6>
 8018a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018a48:	b004      	add	sp, #16
 8018a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a4e:	6823      	ldr	r3, [r4, #0]
 8018a50:	f043 0320 	orr.w	r3, r3, #32
 8018a54:	6023      	str	r3, [r4, #0]
 8018a56:	4833      	ldr	r0, [pc, #204]	; (8018b24 <_printf_i+0x240>)
 8018a58:	2778      	movs	r7, #120	; 0x78
 8018a5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018a5e:	6823      	ldr	r3, [r4, #0]
 8018a60:	6829      	ldr	r1, [r5, #0]
 8018a62:	061f      	lsls	r7, r3, #24
 8018a64:	f851 6b04 	ldr.w	r6, [r1], #4
 8018a68:	d402      	bmi.n	8018a70 <_printf_i+0x18c>
 8018a6a:	065f      	lsls	r7, r3, #25
 8018a6c:	bf48      	it	mi
 8018a6e:	b2b6      	uxthmi	r6, r6
 8018a70:	07df      	lsls	r7, r3, #31
 8018a72:	bf48      	it	mi
 8018a74:	f043 0320 	orrmi.w	r3, r3, #32
 8018a78:	6029      	str	r1, [r5, #0]
 8018a7a:	bf48      	it	mi
 8018a7c:	6023      	strmi	r3, [r4, #0]
 8018a7e:	b91e      	cbnz	r6, 8018a88 <_printf_i+0x1a4>
 8018a80:	6823      	ldr	r3, [r4, #0]
 8018a82:	f023 0320 	bic.w	r3, r3, #32
 8018a86:	6023      	str	r3, [r4, #0]
 8018a88:	2310      	movs	r3, #16
 8018a8a:	e7a7      	b.n	80189dc <_printf_i+0xf8>
 8018a8c:	4824      	ldr	r0, [pc, #144]	; (8018b20 <_printf_i+0x23c>)
 8018a8e:	e7e4      	b.n	8018a5a <_printf_i+0x176>
 8018a90:	4615      	mov	r5, r2
 8018a92:	e7bd      	b.n	8018a10 <_printf_i+0x12c>
 8018a94:	682b      	ldr	r3, [r5, #0]
 8018a96:	6826      	ldr	r6, [r4, #0]
 8018a98:	6961      	ldr	r1, [r4, #20]
 8018a9a:	1d18      	adds	r0, r3, #4
 8018a9c:	6028      	str	r0, [r5, #0]
 8018a9e:	0635      	lsls	r5, r6, #24
 8018aa0:	681b      	ldr	r3, [r3, #0]
 8018aa2:	d501      	bpl.n	8018aa8 <_printf_i+0x1c4>
 8018aa4:	6019      	str	r1, [r3, #0]
 8018aa6:	e002      	b.n	8018aae <_printf_i+0x1ca>
 8018aa8:	0670      	lsls	r0, r6, #25
 8018aaa:	d5fb      	bpl.n	8018aa4 <_printf_i+0x1c0>
 8018aac:	8019      	strh	r1, [r3, #0]
 8018aae:	2300      	movs	r3, #0
 8018ab0:	6123      	str	r3, [r4, #16]
 8018ab2:	4615      	mov	r5, r2
 8018ab4:	e7bc      	b.n	8018a30 <_printf_i+0x14c>
 8018ab6:	682b      	ldr	r3, [r5, #0]
 8018ab8:	1d1a      	adds	r2, r3, #4
 8018aba:	602a      	str	r2, [r5, #0]
 8018abc:	681d      	ldr	r5, [r3, #0]
 8018abe:	6862      	ldr	r2, [r4, #4]
 8018ac0:	2100      	movs	r1, #0
 8018ac2:	4628      	mov	r0, r5
 8018ac4:	f7e7 fba4 	bl	8000210 <memchr>
 8018ac8:	b108      	cbz	r0, 8018ace <_printf_i+0x1ea>
 8018aca:	1b40      	subs	r0, r0, r5
 8018acc:	6060      	str	r0, [r4, #4]
 8018ace:	6863      	ldr	r3, [r4, #4]
 8018ad0:	6123      	str	r3, [r4, #16]
 8018ad2:	2300      	movs	r3, #0
 8018ad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018ad8:	e7aa      	b.n	8018a30 <_printf_i+0x14c>
 8018ada:	6923      	ldr	r3, [r4, #16]
 8018adc:	462a      	mov	r2, r5
 8018ade:	4649      	mov	r1, r9
 8018ae0:	4640      	mov	r0, r8
 8018ae2:	47d0      	blx	sl
 8018ae4:	3001      	adds	r0, #1
 8018ae6:	d0ad      	beq.n	8018a44 <_printf_i+0x160>
 8018ae8:	6823      	ldr	r3, [r4, #0]
 8018aea:	079b      	lsls	r3, r3, #30
 8018aec:	d413      	bmi.n	8018b16 <_printf_i+0x232>
 8018aee:	68e0      	ldr	r0, [r4, #12]
 8018af0:	9b03      	ldr	r3, [sp, #12]
 8018af2:	4298      	cmp	r0, r3
 8018af4:	bfb8      	it	lt
 8018af6:	4618      	movlt	r0, r3
 8018af8:	e7a6      	b.n	8018a48 <_printf_i+0x164>
 8018afa:	2301      	movs	r3, #1
 8018afc:	4632      	mov	r2, r6
 8018afe:	4649      	mov	r1, r9
 8018b00:	4640      	mov	r0, r8
 8018b02:	47d0      	blx	sl
 8018b04:	3001      	adds	r0, #1
 8018b06:	d09d      	beq.n	8018a44 <_printf_i+0x160>
 8018b08:	3501      	adds	r5, #1
 8018b0a:	68e3      	ldr	r3, [r4, #12]
 8018b0c:	9903      	ldr	r1, [sp, #12]
 8018b0e:	1a5b      	subs	r3, r3, r1
 8018b10:	42ab      	cmp	r3, r5
 8018b12:	dcf2      	bgt.n	8018afa <_printf_i+0x216>
 8018b14:	e7eb      	b.n	8018aee <_printf_i+0x20a>
 8018b16:	2500      	movs	r5, #0
 8018b18:	f104 0619 	add.w	r6, r4, #25
 8018b1c:	e7f5      	b.n	8018b0a <_printf_i+0x226>
 8018b1e:	bf00      	nop
 8018b20:	08019ac1 	.word	0x08019ac1
 8018b24:	08019ad2 	.word	0x08019ad2

08018b28 <__sflush_r>:
 8018b28:	898a      	ldrh	r2, [r1, #12]
 8018b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b2e:	4605      	mov	r5, r0
 8018b30:	0710      	lsls	r0, r2, #28
 8018b32:	460c      	mov	r4, r1
 8018b34:	d458      	bmi.n	8018be8 <__sflush_r+0xc0>
 8018b36:	684b      	ldr	r3, [r1, #4]
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	dc05      	bgt.n	8018b48 <__sflush_r+0x20>
 8018b3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	dc02      	bgt.n	8018b48 <__sflush_r+0x20>
 8018b42:	2000      	movs	r0, #0
 8018b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018b4a:	2e00      	cmp	r6, #0
 8018b4c:	d0f9      	beq.n	8018b42 <__sflush_r+0x1a>
 8018b4e:	2300      	movs	r3, #0
 8018b50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018b54:	682f      	ldr	r7, [r5, #0]
 8018b56:	6a21      	ldr	r1, [r4, #32]
 8018b58:	602b      	str	r3, [r5, #0]
 8018b5a:	d032      	beq.n	8018bc2 <__sflush_r+0x9a>
 8018b5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018b5e:	89a3      	ldrh	r3, [r4, #12]
 8018b60:	075a      	lsls	r2, r3, #29
 8018b62:	d505      	bpl.n	8018b70 <__sflush_r+0x48>
 8018b64:	6863      	ldr	r3, [r4, #4]
 8018b66:	1ac0      	subs	r0, r0, r3
 8018b68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018b6a:	b10b      	cbz	r3, 8018b70 <__sflush_r+0x48>
 8018b6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018b6e:	1ac0      	subs	r0, r0, r3
 8018b70:	2300      	movs	r3, #0
 8018b72:	4602      	mov	r2, r0
 8018b74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018b76:	6a21      	ldr	r1, [r4, #32]
 8018b78:	4628      	mov	r0, r5
 8018b7a:	47b0      	blx	r6
 8018b7c:	1c43      	adds	r3, r0, #1
 8018b7e:	89a3      	ldrh	r3, [r4, #12]
 8018b80:	d106      	bne.n	8018b90 <__sflush_r+0x68>
 8018b82:	6829      	ldr	r1, [r5, #0]
 8018b84:	291d      	cmp	r1, #29
 8018b86:	d82b      	bhi.n	8018be0 <__sflush_r+0xb8>
 8018b88:	4a29      	ldr	r2, [pc, #164]	; (8018c30 <__sflush_r+0x108>)
 8018b8a:	410a      	asrs	r2, r1
 8018b8c:	07d6      	lsls	r6, r2, #31
 8018b8e:	d427      	bmi.n	8018be0 <__sflush_r+0xb8>
 8018b90:	2200      	movs	r2, #0
 8018b92:	6062      	str	r2, [r4, #4]
 8018b94:	04d9      	lsls	r1, r3, #19
 8018b96:	6922      	ldr	r2, [r4, #16]
 8018b98:	6022      	str	r2, [r4, #0]
 8018b9a:	d504      	bpl.n	8018ba6 <__sflush_r+0x7e>
 8018b9c:	1c42      	adds	r2, r0, #1
 8018b9e:	d101      	bne.n	8018ba4 <__sflush_r+0x7c>
 8018ba0:	682b      	ldr	r3, [r5, #0]
 8018ba2:	b903      	cbnz	r3, 8018ba6 <__sflush_r+0x7e>
 8018ba4:	6560      	str	r0, [r4, #84]	; 0x54
 8018ba6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018ba8:	602f      	str	r7, [r5, #0]
 8018baa:	2900      	cmp	r1, #0
 8018bac:	d0c9      	beq.n	8018b42 <__sflush_r+0x1a>
 8018bae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018bb2:	4299      	cmp	r1, r3
 8018bb4:	d002      	beq.n	8018bbc <__sflush_r+0x94>
 8018bb6:	4628      	mov	r0, r5
 8018bb8:	f7ff fb36 	bl	8018228 <_free_r>
 8018bbc:	2000      	movs	r0, #0
 8018bbe:	6360      	str	r0, [r4, #52]	; 0x34
 8018bc0:	e7c0      	b.n	8018b44 <__sflush_r+0x1c>
 8018bc2:	2301      	movs	r3, #1
 8018bc4:	4628      	mov	r0, r5
 8018bc6:	47b0      	blx	r6
 8018bc8:	1c41      	adds	r1, r0, #1
 8018bca:	d1c8      	bne.n	8018b5e <__sflush_r+0x36>
 8018bcc:	682b      	ldr	r3, [r5, #0]
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	d0c5      	beq.n	8018b5e <__sflush_r+0x36>
 8018bd2:	2b1d      	cmp	r3, #29
 8018bd4:	d001      	beq.n	8018bda <__sflush_r+0xb2>
 8018bd6:	2b16      	cmp	r3, #22
 8018bd8:	d101      	bne.n	8018bde <__sflush_r+0xb6>
 8018bda:	602f      	str	r7, [r5, #0]
 8018bdc:	e7b1      	b.n	8018b42 <__sflush_r+0x1a>
 8018bde:	89a3      	ldrh	r3, [r4, #12]
 8018be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018be4:	81a3      	strh	r3, [r4, #12]
 8018be6:	e7ad      	b.n	8018b44 <__sflush_r+0x1c>
 8018be8:	690f      	ldr	r7, [r1, #16]
 8018bea:	2f00      	cmp	r7, #0
 8018bec:	d0a9      	beq.n	8018b42 <__sflush_r+0x1a>
 8018bee:	0793      	lsls	r3, r2, #30
 8018bf0:	680e      	ldr	r6, [r1, #0]
 8018bf2:	bf08      	it	eq
 8018bf4:	694b      	ldreq	r3, [r1, #20]
 8018bf6:	600f      	str	r7, [r1, #0]
 8018bf8:	bf18      	it	ne
 8018bfa:	2300      	movne	r3, #0
 8018bfc:	eba6 0807 	sub.w	r8, r6, r7
 8018c00:	608b      	str	r3, [r1, #8]
 8018c02:	f1b8 0f00 	cmp.w	r8, #0
 8018c06:	dd9c      	ble.n	8018b42 <__sflush_r+0x1a>
 8018c08:	6a21      	ldr	r1, [r4, #32]
 8018c0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018c0c:	4643      	mov	r3, r8
 8018c0e:	463a      	mov	r2, r7
 8018c10:	4628      	mov	r0, r5
 8018c12:	47b0      	blx	r6
 8018c14:	2800      	cmp	r0, #0
 8018c16:	dc06      	bgt.n	8018c26 <__sflush_r+0xfe>
 8018c18:	89a3      	ldrh	r3, [r4, #12]
 8018c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018c1e:	81a3      	strh	r3, [r4, #12]
 8018c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018c24:	e78e      	b.n	8018b44 <__sflush_r+0x1c>
 8018c26:	4407      	add	r7, r0
 8018c28:	eba8 0800 	sub.w	r8, r8, r0
 8018c2c:	e7e9      	b.n	8018c02 <__sflush_r+0xda>
 8018c2e:	bf00      	nop
 8018c30:	dfbffffe 	.word	0xdfbffffe

08018c34 <_fflush_r>:
 8018c34:	b538      	push	{r3, r4, r5, lr}
 8018c36:	690b      	ldr	r3, [r1, #16]
 8018c38:	4605      	mov	r5, r0
 8018c3a:	460c      	mov	r4, r1
 8018c3c:	b913      	cbnz	r3, 8018c44 <_fflush_r+0x10>
 8018c3e:	2500      	movs	r5, #0
 8018c40:	4628      	mov	r0, r5
 8018c42:	bd38      	pop	{r3, r4, r5, pc}
 8018c44:	b118      	cbz	r0, 8018c4e <_fflush_r+0x1a>
 8018c46:	6a03      	ldr	r3, [r0, #32]
 8018c48:	b90b      	cbnz	r3, 8018c4e <_fflush_r+0x1a>
 8018c4a:	f7fe ff39 	bl	8017ac0 <__sinit>
 8018c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c52:	2b00      	cmp	r3, #0
 8018c54:	d0f3      	beq.n	8018c3e <_fflush_r+0xa>
 8018c56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018c58:	07d0      	lsls	r0, r2, #31
 8018c5a:	d404      	bmi.n	8018c66 <_fflush_r+0x32>
 8018c5c:	0599      	lsls	r1, r3, #22
 8018c5e:	d402      	bmi.n	8018c66 <_fflush_r+0x32>
 8018c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018c62:	f7ff fa9e 	bl	80181a2 <__retarget_lock_acquire_recursive>
 8018c66:	4628      	mov	r0, r5
 8018c68:	4621      	mov	r1, r4
 8018c6a:	f7ff ff5d 	bl	8018b28 <__sflush_r>
 8018c6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018c70:	07da      	lsls	r2, r3, #31
 8018c72:	4605      	mov	r5, r0
 8018c74:	d4e4      	bmi.n	8018c40 <_fflush_r+0xc>
 8018c76:	89a3      	ldrh	r3, [r4, #12]
 8018c78:	059b      	lsls	r3, r3, #22
 8018c7a:	d4e1      	bmi.n	8018c40 <_fflush_r+0xc>
 8018c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018c7e:	f7ff fa91 	bl	80181a4 <__retarget_lock_release_recursive>
 8018c82:	e7dd      	b.n	8018c40 <_fflush_r+0xc>

08018c84 <fiprintf>:
 8018c84:	b40e      	push	{r1, r2, r3}
 8018c86:	b503      	push	{r0, r1, lr}
 8018c88:	4601      	mov	r1, r0
 8018c8a:	ab03      	add	r3, sp, #12
 8018c8c:	4805      	ldr	r0, [pc, #20]	; (8018ca4 <fiprintf+0x20>)
 8018c8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c92:	6800      	ldr	r0, [r0, #0]
 8018c94:	9301      	str	r3, [sp, #4]
 8018c96:	f7ff fc9d 	bl	80185d4 <_vfiprintf_r>
 8018c9a:	b002      	add	sp, #8
 8018c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018ca0:	b003      	add	sp, #12
 8018ca2:	4770      	bx	lr
 8018ca4:	200000dc 	.word	0x200000dc

08018ca8 <__swhatbuf_r>:
 8018ca8:	b570      	push	{r4, r5, r6, lr}
 8018caa:	460c      	mov	r4, r1
 8018cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018cb0:	2900      	cmp	r1, #0
 8018cb2:	b096      	sub	sp, #88	; 0x58
 8018cb4:	4615      	mov	r5, r2
 8018cb6:	461e      	mov	r6, r3
 8018cb8:	da0d      	bge.n	8018cd6 <__swhatbuf_r+0x2e>
 8018cba:	89a3      	ldrh	r3, [r4, #12]
 8018cbc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8018cc0:	f04f 0100 	mov.w	r1, #0
 8018cc4:	bf0c      	ite	eq
 8018cc6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8018cca:	2340      	movne	r3, #64	; 0x40
 8018ccc:	2000      	movs	r0, #0
 8018cce:	6031      	str	r1, [r6, #0]
 8018cd0:	602b      	str	r3, [r5, #0]
 8018cd2:	b016      	add	sp, #88	; 0x58
 8018cd4:	bd70      	pop	{r4, r5, r6, pc}
 8018cd6:	466a      	mov	r2, sp
 8018cd8:	f000 f862 	bl	8018da0 <_fstat_r>
 8018cdc:	2800      	cmp	r0, #0
 8018cde:	dbec      	blt.n	8018cba <__swhatbuf_r+0x12>
 8018ce0:	9901      	ldr	r1, [sp, #4]
 8018ce2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8018ce6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8018cea:	4259      	negs	r1, r3
 8018cec:	4159      	adcs	r1, r3
 8018cee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018cf2:	e7eb      	b.n	8018ccc <__swhatbuf_r+0x24>

08018cf4 <__smakebuf_r>:
 8018cf4:	898b      	ldrh	r3, [r1, #12]
 8018cf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018cf8:	079d      	lsls	r5, r3, #30
 8018cfa:	4606      	mov	r6, r0
 8018cfc:	460c      	mov	r4, r1
 8018cfe:	d507      	bpl.n	8018d10 <__smakebuf_r+0x1c>
 8018d00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018d04:	6023      	str	r3, [r4, #0]
 8018d06:	6123      	str	r3, [r4, #16]
 8018d08:	2301      	movs	r3, #1
 8018d0a:	6163      	str	r3, [r4, #20]
 8018d0c:	b002      	add	sp, #8
 8018d0e:	bd70      	pop	{r4, r5, r6, pc}
 8018d10:	ab01      	add	r3, sp, #4
 8018d12:	466a      	mov	r2, sp
 8018d14:	f7ff ffc8 	bl	8018ca8 <__swhatbuf_r>
 8018d18:	9900      	ldr	r1, [sp, #0]
 8018d1a:	4605      	mov	r5, r0
 8018d1c:	4630      	mov	r0, r6
 8018d1e:	f7fe fc97 	bl	8017650 <_malloc_r>
 8018d22:	b948      	cbnz	r0, 8018d38 <__smakebuf_r+0x44>
 8018d24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018d28:	059a      	lsls	r2, r3, #22
 8018d2a:	d4ef      	bmi.n	8018d0c <__smakebuf_r+0x18>
 8018d2c:	f023 0303 	bic.w	r3, r3, #3
 8018d30:	f043 0302 	orr.w	r3, r3, #2
 8018d34:	81a3      	strh	r3, [r4, #12]
 8018d36:	e7e3      	b.n	8018d00 <__smakebuf_r+0xc>
 8018d38:	89a3      	ldrh	r3, [r4, #12]
 8018d3a:	6020      	str	r0, [r4, #0]
 8018d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018d40:	81a3      	strh	r3, [r4, #12]
 8018d42:	9b00      	ldr	r3, [sp, #0]
 8018d44:	6163      	str	r3, [r4, #20]
 8018d46:	9b01      	ldr	r3, [sp, #4]
 8018d48:	6120      	str	r0, [r4, #16]
 8018d4a:	b15b      	cbz	r3, 8018d64 <__smakebuf_r+0x70>
 8018d4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018d50:	4630      	mov	r0, r6
 8018d52:	f000 f837 	bl	8018dc4 <_isatty_r>
 8018d56:	b128      	cbz	r0, 8018d64 <__smakebuf_r+0x70>
 8018d58:	89a3      	ldrh	r3, [r4, #12]
 8018d5a:	f023 0303 	bic.w	r3, r3, #3
 8018d5e:	f043 0301 	orr.w	r3, r3, #1
 8018d62:	81a3      	strh	r3, [r4, #12]
 8018d64:	89a3      	ldrh	r3, [r4, #12]
 8018d66:	431d      	orrs	r5, r3
 8018d68:	81a5      	strh	r5, [r4, #12]
 8018d6a:	e7cf      	b.n	8018d0c <__smakebuf_r+0x18>

08018d6c <memmove>:
 8018d6c:	4288      	cmp	r0, r1
 8018d6e:	b510      	push	{r4, lr}
 8018d70:	eb01 0402 	add.w	r4, r1, r2
 8018d74:	d902      	bls.n	8018d7c <memmove+0x10>
 8018d76:	4284      	cmp	r4, r0
 8018d78:	4623      	mov	r3, r4
 8018d7a:	d807      	bhi.n	8018d8c <memmove+0x20>
 8018d7c:	1e43      	subs	r3, r0, #1
 8018d7e:	42a1      	cmp	r1, r4
 8018d80:	d008      	beq.n	8018d94 <memmove+0x28>
 8018d82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018d86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018d8a:	e7f8      	b.n	8018d7e <memmove+0x12>
 8018d8c:	4402      	add	r2, r0
 8018d8e:	4601      	mov	r1, r0
 8018d90:	428a      	cmp	r2, r1
 8018d92:	d100      	bne.n	8018d96 <memmove+0x2a>
 8018d94:	bd10      	pop	{r4, pc}
 8018d96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018d9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018d9e:	e7f7      	b.n	8018d90 <memmove+0x24>

08018da0 <_fstat_r>:
 8018da0:	b538      	push	{r3, r4, r5, lr}
 8018da2:	4d07      	ldr	r5, [pc, #28]	; (8018dc0 <_fstat_r+0x20>)
 8018da4:	2300      	movs	r3, #0
 8018da6:	4604      	mov	r4, r0
 8018da8:	4608      	mov	r0, r1
 8018daa:	4611      	mov	r1, r2
 8018dac:	602b      	str	r3, [r5, #0]
 8018dae:	f7ea fe2f 	bl	8003a10 <_fstat>
 8018db2:	1c43      	adds	r3, r0, #1
 8018db4:	d102      	bne.n	8018dbc <_fstat_r+0x1c>
 8018db6:	682b      	ldr	r3, [r5, #0]
 8018db8:	b103      	cbz	r3, 8018dbc <_fstat_r+0x1c>
 8018dba:	6023      	str	r3, [r4, #0]
 8018dbc:	bd38      	pop	{r3, r4, r5, pc}
 8018dbe:	bf00      	nop
 8018dc0:	2000a1b4 	.word	0x2000a1b4

08018dc4 <_isatty_r>:
 8018dc4:	b538      	push	{r3, r4, r5, lr}
 8018dc6:	4d06      	ldr	r5, [pc, #24]	; (8018de0 <_isatty_r+0x1c>)
 8018dc8:	2300      	movs	r3, #0
 8018dca:	4604      	mov	r4, r0
 8018dcc:	4608      	mov	r0, r1
 8018dce:	602b      	str	r3, [r5, #0]
 8018dd0:	f7ea fd8c 	bl	80038ec <_isatty>
 8018dd4:	1c43      	adds	r3, r0, #1
 8018dd6:	d102      	bne.n	8018dde <_isatty_r+0x1a>
 8018dd8:	682b      	ldr	r3, [r5, #0]
 8018dda:	b103      	cbz	r3, 8018dde <_isatty_r+0x1a>
 8018ddc:	6023      	str	r3, [r4, #0]
 8018dde:	bd38      	pop	{r3, r4, r5, pc}
 8018de0:	2000a1b4 	.word	0x2000a1b4

08018de4 <abort>:
 8018de4:	b508      	push	{r3, lr}
 8018de6:	2006      	movs	r0, #6
 8018de8:	f000 f82c 	bl	8018e44 <raise>
 8018dec:	2001      	movs	r0, #1
 8018dee:	f000 f845 	bl	8018e7c <_exit>

08018df2 <_raise_r>:
 8018df2:	291f      	cmp	r1, #31
 8018df4:	b538      	push	{r3, r4, r5, lr}
 8018df6:	4604      	mov	r4, r0
 8018df8:	460d      	mov	r5, r1
 8018dfa:	d904      	bls.n	8018e06 <_raise_r+0x14>
 8018dfc:	2316      	movs	r3, #22
 8018dfe:	6003      	str	r3, [r0, #0]
 8018e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018e04:	bd38      	pop	{r3, r4, r5, pc}
 8018e06:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8018e08:	b112      	cbz	r2, 8018e10 <_raise_r+0x1e>
 8018e0a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018e0e:	b94b      	cbnz	r3, 8018e24 <_raise_r+0x32>
 8018e10:	4620      	mov	r0, r4
 8018e12:	f000 f831 	bl	8018e78 <_getpid_r>
 8018e16:	462a      	mov	r2, r5
 8018e18:	4601      	mov	r1, r0
 8018e1a:	4620      	mov	r0, r4
 8018e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018e20:	f000 b818 	b.w	8018e54 <_kill_r>
 8018e24:	2b01      	cmp	r3, #1
 8018e26:	d00a      	beq.n	8018e3e <_raise_r+0x4c>
 8018e28:	1c59      	adds	r1, r3, #1
 8018e2a:	d103      	bne.n	8018e34 <_raise_r+0x42>
 8018e2c:	2316      	movs	r3, #22
 8018e2e:	6003      	str	r3, [r0, #0]
 8018e30:	2001      	movs	r0, #1
 8018e32:	e7e7      	b.n	8018e04 <_raise_r+0x12>
 8018e34:	2400      	movs	r4, #0
 8018e36:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018e3a:	4628      	mov	r0, r5
 8018e3c:	4798      	blx	r3
 8018e3e:	2000      	movs	r0, #0
 8018e40:	e7e0      	b.n	8018e04 <_raise_r+0x12>
	...

08018e44 <raise>:
 8018e44:	4b02      	ldr	r3, [pc, #8]	; (8018e50 <raise+0xc>)
 8018e46:	4601      	mov	r1, r0
 8018e48:	6818      	ldr	r0, [r3, #0]
 8018e4a:	f7ff bfd2 	b.w	8018df2 <_raise_r>
 8018e4e:	bf00      	nop
 8018e50:	200000dc 	.word	0x200000dc

08018e54 <_kill_r>:
 8018e54:	b538      	push	{r3, r4, r5, lr}
 8018e56:	4d07      	ldr	r5, [pc, #28]	; (8018e74 <_kill_r+0x20>)
 8018e58:	2300      	movs	r3, #0
 8018e5a:	4604      	mov	r4, r0
 8018e5c:	4608      	mov	r0, r1
 8018e5e:	4611      	mov	r1, r2
 8018e60:	602b      	str	r3, [r5, #0]
 8018e62:	f7ea fdf8 	bl	8003a56 <_kill>
 8018e66:	1c43      	adds	r3, r0, #1
 8018e68:	d102      	bne.n	8018e70 <_kill_r+0x1c>
 8018e6a:	682b      	ldr	r3, [r5, #0]
 8018e6c:	b103      	cbz	r3, 8018e70 <_kill_r+0x1c>
 8018e6e:	6023      	str	r3, [r4, #0]
 8018e70:	bd38      	pop	{r3, r4, r5, pc}
 8018e72:	bf00      	nop
 8018e74:	2000a1b4 	.word	0x2000a1b4

08018e78 <_getpid_r>:
 8018e78:	f7ea bde5 	b.w	8003a46 <_getpid>

08018e7c <_exit>:
 8018e7c:	e7fe      	b.n	8018e7c <_exit>
	...

08018e80 <_init>:
 8018e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e82:	bf00      	nop
 8018e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018e86:	bc08      	pop	{r3}
 8018e88:	469e      	mov	lr, r3
 8018e8a:	4770      	bx	lr

08018e8c <_fini>:
 8018e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e8e:	bf00      	nop
 8018e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018e92:	bc08      	pop	{r3}
 8018e94:	469e      	mov	lr, r3
 8018e96:	4770      	bx	lr
