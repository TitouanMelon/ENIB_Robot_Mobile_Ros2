
base_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000191b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ed0  08019358  08019358  00029358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a228  0801a228  000300d8  2**0
                  CONTENTS
  4 .ARM          00000008  0801a228  0801a228  0002a228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a230  0801a230  000300d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a230  0801a230  0002a230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a234  0801a234  0002a234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  0801a238  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e778  200000d8  0801a310  000300d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000e850  0801a310  0003e850  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY
 12 .comment      0000009c  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 13 .debug_info   000e45b1  00000000  00000000  000301a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00017c0a  00000000  00000000  00114755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004160  00000000  00000000  0012c360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000157d  00000000  00000000  001304c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000c3ba  00000000  00000000  00131a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0006aa9d  00000000  00000000  0013ddf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b81b3  00000000  00000000  001a8894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00010318  00000000  00000000  00260a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00270d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00057b45  00000000  00000000  00270dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00009b50  00000000  00000000  002c890d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d8 	.word	0x200000d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801933c 	.word	0x0801933c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000dc 	.word	0x200000dc
 80001dc:	0801933c 	.word	0x0801933c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_ldivmod>:
 8000aec:	b97b      	cbnz	r3, 8000b0e <__aeabi_ldivmod+0x22>
 8000aee:	b972      	cbnz	r2, 8000b0e <__aeabi_ldivmod+0x22>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bfbe      	ittt	lt
 8000af4:	2000      	movlt	r0, #0
 8000af6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000afa:	e006      	blt.n	8000b0a <__aeabi_ldivmod+0x1e>
 8000afc:	bf08      	it	eq
 8000afe:	2800      	cmpeq	r0, #0
 8000b00:	bf1c      	itt	ne
 8000b02:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b06:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b0a:	f000 b9bb 	b.w	8000e84 <__aeabi_idiv0>
 8000b0e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b12:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b16:	2900      	cmp	r1, #0
 8000b18:	db09      	blt.n	8000b2e <__aeabi_ldivmod+0x42>
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	db1a      	blt.n	8000b54 <__aeabi_ldivmod+0x68>
 8000b1e:	f000 f84d 	bl	8000bbc <__udivmoddi4>
 8000b22:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2a:	b004      	add	sp, #16
 8000b2c:	4770      	bx	lr
 8000b2e:	4240      	negs	r0, r0
 8000b30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db1b      	blt.n	8000b70 <__aeabi_ldivmod+0x84>
 8000b38:	f000 f840 	bl	8000bbc <__udivmoddi4>
 8000b3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b44:	b004      	add	sp, #16
 8000b46:	4240      	negs	r0, r0
 8000b48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b4c:	4252      	negs	r2, r2
 8000b4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b52:	4770      	bx	lr
 8000b54:	4252      	negs	r2, r2
 8000b56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b5a:	f000 f82f 	bl	8000bbc <__udivmoddi4>
 8000b5e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b66:	b004      	add	sp, #16
 8000b68:	4240      	negs	r0, r0
 8000b6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b6e:	4770      	bx	lr
 8000b70:	4252      	negs	r2, r2
 8000b72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b76:	f000 f821 	bl	8000bbc <__udivmoddi4>
 8000b7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b82:	b004      	add	sp, #16
 8000b84:	4252      	negs	r2, r2
 8000b86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ba0:	f000 b970 	b.w	8000e84 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9e08      	ldr	r6, [sp, #32]
 8000bc2:	460d      	mov	r5, r1
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	460f      	mov	r7, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14a      	bne.n	8000c62 <__udivmoddi4+0xa6>
 8000bcc:	428a      	cmp	r2, r1
 8000bce:	4694      	mov	ip, r2
 8000bd0:	d965      	bls.n	8000c9e <__udivmoddi4+0xe2>
 8000bd2:	fab2 f382 	clz	r3, r2
 8000bd6:	b143      	cbz	r3, 8000bea <__udivmoddi4+0x2e>
 8000bd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bdc:	f1c3 0220 	rsb	r2, r3, #32
 8000be0:	409f      	lsls	r7, r3
 8000be2:	fa20 f202 	lsr.w	r2, r0, r2
 8000be6:	4317      	orrs	r7, r2
 8000be8:	409c      	lsls	r4, r3
 8000bea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bee:	fa1f f58c 	uxth.w	r5, ip
 8000bf2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bf6:	0c22      	lsrs	r2, r4, #16
 8000bf8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c00:	fb01 f005 	mul.w	r0, r1, r5
 8000c04:	4290      	cmp	r0, r2
 8000c06:	d90a      	bls.n	8000c1e <__udivmoddi4+0x62>
 8000c08:	eb1c 0202 	adds.w	r2, ip, r2
 8000c0c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c10:	f080 811c 	bcs.w	8000e4c <__udivmoddi4+0x290>
 8000c14:	4290      	cmp	r0, r2
 8000c16:	f240 8119 	bls.w	8000e4c <__udivmoddi4+0x290>
 8000c1a:	3902      	subs	r1, #2
 8000c1c:	4462      	add	r2, ip
 8000c1e:	1a12      	subs	r2, r2, r0
 8000c20:	b2a4      	uxth	r4, r4
 8000c22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c2e:	fb00 f505 	mul.w	r5, r0, r5
 8000c32:	42a5      	cmp	r5, r4
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x90>
 8000c36:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c3e:	f080 8107 	bcs.w	8000e50 <__udivmoddi4+0x294>
 8000c42:	42a5      	cmp	r5, r4
 8000c44:	f240 8104 	bls.w	8000e50 <__udivmoddi4+0x294>
 8000c48:	4464      	add	r4, ip
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c50:	1b64      	subs	r4, r4, r5
 8000c52:	2100      	movs	r1, #0
 8000c54:	b11e      	cbz	r6, 8000c5e <__udivmoddi4+0xa2>
 8000c56:	40dc      	lsrs	r4, r3
 8000c58:	2300      	movs	r3, #0
 8000c5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0xbc>
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	f000 80ed 	beq.w	8000e46 <__udivmoddi4+0x28a>
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c72:	4608      	mov	r0, r1
 8000c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c78:	fab3 f183 	clz	r1, r3
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	d149      	bne.n	8000d14 <__udivmoddi4+0x158>
 8000c80:	42ab      	cmp	r3, r5
 8000c82:	d302      	bcc.n	8000c8a <__udivmoddi4+0xce>
 8000c84:	4282      	cmp	r2, r0
 8000c86:	f200 80f8 	bhi.w	8000e7a <__udivmoddi4+0x2be>
 8000c8a:	1a84      	subs	r4, r0, r2
 8000c8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c90:	2001      	movs	r0, #1
 8000c92:	4617      	mov	r7, r2
 8000c94:	2e00      	cmp	r6, #0
 8000c96:	d0e2      	beq.n	8000c5e <__udivmoddi4+0xa2>
 8000c98:	e9c6 4700 	strd	r4, r7, [r6]
 8000c9c:	e7df      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xe6>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f382 	clz	r3, r2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8090 	bne.w	8000dcc <__udivmoddi4+0x210>
 8000cac:	1a8a      	subs	r2, r1, r2
 8000cae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb2:	fa1f fe8c 	uxth.w	lr, ip
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cbc:	fb07 2015 	mls	r0, r7, r5, r2
 8000cc0:	0c22      	lsrs	r2, r4, #16
 8000cc2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cc6:	fb0e f005 	mul.w	r0, lr, r5
 8000cca:	4290      	cmp	r0, r2
 8000ccc:	d908      	bls.n	8000ce0 <__udivmoddi4+0x124>
 8000cce:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x122>
 8000cd8:	4290      	cmp	r0, r2
 8000cda:	f200 80cb 	bhi.w	8000e74 <__udivmoddi4+0x2b8>
 8000cde:	4645      	mov	r5, r8
 8000ce0:	1a12      	subs	r2, r2, r0
 8000ce2:	b2a4      	uxth	r4, r4
 8000ce4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ce8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cf0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf4:	45a6      	cmp	lr, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x14e>
 8000cf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d00:	d202      	bcs.n	8000d08 <__udivmoddi4+0x14c>
 8000d02:	45a6      	cmp	lr, r4
 8000d04:	f200 80bb 	bhi.w	8000e7e <__udivmoddi4+0x2c2>
 8000d08:	4610      	mov	r0, r2
 8000d0a:	eba4 040e 	sub.w	r4, r4, lr
 8000d0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d12:	e79f      	b.n	8000c54 <__udivmoddi4+0x98>
 8000d14:	f1c1 0720 	rsb	r7, r1, #32
 8000d18:	408b      	lsls	r3, r1
 8000d1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d22:	fa05 f401 	lsl.w	r4, r5, r1
 8000d26:	fa20 f307 	lsr.w	r3, r0, r7
 8000d2a:	40fd      	lsrs	r5, r7
 8000d2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d30:	4323      	orrs	r3, r4
 8000d32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d3e:	0c1c      	lsrs	r4, r3, #16
 8000d40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d44:	fb08 f50e 	mul.w	r5, r8, lr
 8000d48:	42a5      	cmp	r5, r4
 8000d4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d52:	d90b      	bls.n	8000d6c <__udivmoddi4+0x1b0>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d5c:	f080 8088 	bcs.w	8000e70 <__udivmoddi4+0x2b4>
 8000d60:	42a5      	cmp	r5, r4
 8000d62:	f240 8085 	bls.w	8000e70 <__udivmoddi4+0x2b4>
 8000d66:	f1a8 0802 	sub.w	r8, r8, #2
 8000d6a:	4464      	add	r4, ip
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	b29d      	uxth	r5, r3
 8000d70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d74:	fb09 4413 	mls	r4, r9, r3, r4
 8000d78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x1da>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d8c:	d26c      	bcs.n	8000e68 <__udivmoddi4+0x2ac>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	d96a      	bls.n	8000e68 <__udivmoddi4+0x2ac>
 8000d92:	3b02      	subs	r3, #2
 8000d94:	4464      	add	r4, ip
 8000d96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	42ac      	cmp	r4, r5
 8000da4:	46c8      	mov	r8, r9
 8000da6:	46ae      	mov	lr, r5
 8000da8:	d356      	bcc.n	8000e58 <__udivmoddi4+0x29c>
 8000daa:	d053      	beq.n	8000e54 <__udivmoddi4+0x298>
 8000dac:	b156      	cbz	r6, 8000dc4 <__udivmoddi4+0x208>
 8000dae:	ebb0 0208 	subs.w	r2, r0, r8
 8000db2:	eb64 040e 	sbc.w	r4, r4, lr
 8000db6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dba:	40ca      	lsrs	r2, r1
 8000dbc:	40cc      	lsrs	r4, r1
 8000dbe:	4317      	orrs	r7, r2
 8000dc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dcc:	f1c3 0120 	rsb	r1, r3, #32
 8000dd0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dd4:	fa20 f201 	lsr.w	r2, r0, r1
 8000dd8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ddc:	409d      	lsls	r5, r3
 8000dde:	432a      	orrs	r2, r5
 8000de0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de4:	fa1f fe8c 	uxth.w	lr, ip
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1510 	mls	r5, r7, r0, r1
 8000df0:	0c11      	lsrs	r1, r2, #16
 8000df2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000df6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dfa:	428d      	cmp	r5, r1
 8000dfc:	fa04 f403 	lsl.w	r4, r4, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x258>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e0a:	d22f      	bcs.n	8000e6c <__udivmoddi4+0x2b0>
 8000e0c:	428d      	cmp	r5, r1
 8000e0e:	d92d      	bls.n	8000e6c <__udivmoddi4+0x2b0>
 8000e10:	3802      	subs	r0, #2
 8000e12:	4461      	add	r1, ip
 8000e14:	1b49      	subs	r1, r1, r5
 8000e16:	b292      	uxth	r2, r2
 8000e18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e24:	fb05 f10e 	mul.w	r1, r5, lr
 8000e28:	4291      	cmp	r1, r2
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x282>
 8000e2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e30:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e34:	d216      	bcs.n	8000e64 <__udivmoddi4+0x2a8>
 8000e36:	4291      	cmp	r1, r2
 8000e38:	d914      	bls.n	8000e64 <__udivmoddi4+0x2a8>
 8000e3a:	3d02      	subs	r5, #2
 8000e3c:	4462      	add	r2, ip
 8000e3e:	1a52      	subs	r2, r2, r1
 8000e40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e44:	e738      	b.n	8000cb8 <__udivmoddi4+0xfc>
 8000e46:	4631      	mov	r1, r6
 8000e48:	4630      	mov	r0, r6
 8000e4a:	e708      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000e4c:	4639      	mov	r1, r7
 8000e4e:	e6e6      	b.n	8000c1e <__udivmoddi4+0x62>
 8000e50:	4610      	mov	r0, r2
 8000e52:	e6fb      	b.n	8000c4c <__udivmoddi4+0x90>
 8000e54:	4548      	cmp	r0, r9
 8000e56:	d2a9      	bcs.n	8000dac <__udivmoddi4+0x1f0>
 8000e58:	ebb9 0802 	subs.w	r8, r9, r2
 8000e5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e60:	3b01      	subs	r3, #1
 8000e62:	e7a3      	b.n	8000dac <__udivmoddi4+0x1f0>
 8000e64:	4645      	mov	r5, r8
 8000e66:	e7ea      	b.n	8000e3e <__udivmoddi4+0x282>
 8000e68:	462b      	mov	r3, r5
 8000e6a:	e794      	b.n	8000d96 <__udivmoddi4+0x1da>
 8000e6c:	4640      	mov	r0, r8
 8000e6e:	e7d1      	b.n	8000e14 <__udivmoddi4+0x258>
 8000e70:	46d0      	mov	r8, sl
 8000e72:	e77b      	b.n	8000d6c <__udivmoddi4+0x1b0>
 8000e74:	3d02      	subs	r5, #2
 8000e76:	4462      	add	r2, ip
 8000e78:	e732      	b.n	8000ce0 <__udivmoddi4+0x124>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e70a      	b.n	8000c94 <__udivmoddi4+0xd8>
 8000e7e:	4464      	add	r4, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e742      	b.n	8000d0a <__udivmoddi4+0x14e>

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <captDistIR_Init>:
//=================================================================
//			ADC INIT FOR IR SENSOR SHARP GP2D12
//=================================================================

void  captDistIR_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	adcHandle.Instance		= ADC1;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000e8e:	4a16      	ldr	r2, [pc, #88]	; (8000ee8 <captDistIR_Init+0x60>)
 8000e90:	601a      	str	r2, [r3, #0]

	adcHandle.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV2;
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	605a      	str	r2, [r3, #4]
	adcHandle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
	adcHandle.Init.Resolution = ADC_RESOLUTION12b;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
	// Don't do continuous conversions - do them on demand
	adcHandle.Init.ContinuousConvMode    = DISABLE;  // Continuous mode disabled to have only 1 conversion at each conversion trig
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
	// Disable the scan conversion so we do one at a time */
	adcHandle.Init.ScanConvMode = DISABLE;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
	//Say how many channels would be used by the sequencer
	adcHandle.Init.NbrOfConversion = 2;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	621a      	str	r2, [r3, #32]
	adcHandle.Init.DiscontinuousConvMode = DISABLE;  // Parameter discarded because sequencer is disabled
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	625a      	str	r2, [r3, #36]	; 0x24
	adcHandle.Init.NbrOfDiscConversion = 2;
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	629a      	str	r2, [r3, #40]	; 0x28
	adcHandle.Init.ExternalTrigConvEdge =  ADC_EXTERNALTRIGCONVEDGE_NONE ;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	62da      	str	r2, [r3, #44]	; 0x2c
	//Start conversion by software, not an external trigger
	adcHandle.Init.ExternalTrigConv = 0;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	631a      	str	r2, [r3, #48]	; 0x30
	adcHandle.Init.DMAContinuousRequests = DISABLE;
 8000ece:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	61da      	str	r2, [r3, #28]
	adcHandle.Init.EOCSelection = DISABLE;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&adcHandle);
 8000eda:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000edc:	f002 fd90 	bl	8003a00 <HAL_ADC_Init>
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200000f4 	.word	0x200000f4
 8000ee8:	40012000 	.word	0x40012000

08000eec <captDistIR_Get>:
//=================================================================
//			IR GET (POLL METHOD)
//=================================================================

int  captDistIR_Get(int* tab)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	sConfig.Channel      = ADC_CHANNEL_4;
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <captDistIR_Get+0x80>)
 8000ef6:	2204      	movs	r2, #4
 8000ef8:	601a      	str	r2, [r3, #0]
	sConfig.Rank         = 1;
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <captDistIR_Get+0x80>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000f00:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <captDistIR_Get+0x80>)
 8000f02:	2203      	movs	r2, #3
 8000f04:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 8000f06:	4919      	ldr	r1, [pc, #100]	; (8000f6c <captDistIR_Get+0x80>)
 8000f08:	4819      	ldr	r0, [pc, #100]	; (8000f70 <captDistIR_Get+0x84>)
 8000f0a:	f002 fe65 	bl	8003bd8 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&adcHandle);					//Start the conversion
 8000f0e:	4818      	ldr	r0, [pc, #96]	; (8000f70 <captDistIR_Get+0x84>)
 8000f10:	f002 fdaa 	bl	8003a68 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&adcHandle,10);	//Processing the conversion
 8000f14:	210a      	movs	r1, #10
 8000f16:	4816      	ldr	r0, [pc, #88]	; (8000f70 <captDistIR_Get+0x84>)
 8000f18:	f002 fe12 	bl	8003b40 <HAL_ADC_PollForConversion>
	tab[0]=HAL_ADC_GetValue(&adcHandle); 		//Return the converted data
 8000f1c:	4814      	ldr	r0, [pc, #80]	; (8000f70 <captDistIR_Get+0x84>)
 8000f1e:	f002 fe4e 	bl	8003bbe <HAL_ADC_GetValue>
 8000f22:	4603      	mov	r3, r0
 8000f24:	461a      	mov	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	601a      	str	r2, [r3, #0]

	sConfig.Channel      = ADC_CHANNEL_8;
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <captDistIR_Get+0x80>)
 8000f2c:	2208      	movs	r2, #8
 8000f2e:	601a      	str	r2, [r3, #0]
	sConfig.Rank         = 1;
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <captDistIR_Get+0x80>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000f36:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <captDistIR_Get+0x80>)
 8000f38:	2203      	movs	r2, #3
 8000f3a:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 8000f3c:	490b      	ldr	r1, [pc, #44]	; (8000f6c <captDistIR_Get+0x80>)
 8000f3e:	480c      	ldr	r0, [pc, #48]	; (8000f70 <captDistIR_Get+0x84>)
 8000f40:	f002 fe4a 	bl	8003bd8 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&adcHandle);						//Start the conversion
 8000f44:	480a      	ldr	r0, [pc, #40]	; (8000f70 <captDistIR_Get+0x84>)
 8000f46:	f002 fd8f 	bl	8003a68 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&adcHandle,10);		//Processing the conversion
 8000f4a:	210a      	movs	r1, #10
 8000f4c:	4808      	ldr	r0, [pc, #32]	; (8000f70 <captDistIR_Get+0x84>)
 8000f4e:	f002 fdf7 	bl	8003b40 <HAL_ADC_PollForConversion>
	tab[1]=HAL_ADC_GetValue(&adcHandle); 			//Return the converted data
 8000f52:	4807      	ldr	r0, [pc, #28]	; (8000f70 <captDistIR_Get+0x84>)
 8000f54:	f002 fe33 	bl	8003bbe <HAL_ADC_GetValue>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	601a      	str	r2, [r3, #0]

	return 0;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000138 	.word	0x20000138
 8000f70:	200000f4 	.word	0x200000f4

08000f74 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000f80:	f009 fec0 	bl	800ad04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000f84:	4b58      	ldr	r3, [pc, #352]	; (80010e8 <pvPortMallocMicroROS+0x174>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d101      	bne.n	8000f90 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000f8c:	f000 f98c 	bl	80012a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000f90:	4b56      	ldr	r3, [pc, #344]	; (80010ec <pvPortMallocMicroROS+0x178>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4013      	ands	r3, r2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f040 808e 	bne.w	80010ba <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d01d      	beq.n	8000fe0 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8000fa4:	2208      	movs	r2, #8
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d014      	beq.n	8000fe0 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f023 0307 	bic.w	r3, r3, #7
 8000fbc:	3308      	adds	r3, #8
 8000fbe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00a      	beq.n	8000fe0 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fce:	f383 8811 	msr	BASEPRI, r3
 8000fd2:	f3bf 8f6f 	isb	sy
 8000fd6:	f3bf 8f4f 	dsb	sy
 8000fda:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000fdc:	bf00      	nop
 8000fde:	e7fe      	b.n	8000fde <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d069      	beq.n	80010ba <pvPortMallocMicroROS+0x146>
 8000fe6:	4b42      	ldr	r3, [pc, #264]	; (80010f0 <pvPortMallocMicroROS+0x17c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d864      	bhi.n	80010ba <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000ff0:	4b40      	ldr	r3, [pc, #256]	; (80010f4 <pvPortMallocMicroROS+0x180>)
 8000ff2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000ff4:	4b3f      	ldr	r3, [pc, #252]	; (80010f4 <pvPortMallocMicroROS+0x180>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000ffa:	e004      	b.n	8001006 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffe:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	429a      	cmp	r2, r3
 800100e:	d903      	bls.n	8001018 <pvPortMallocMicroROS+0xa4>
 8001010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1f1      	bne.n	8000ffc <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001018:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <pvPortMallocMicroROS+0x174>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800101e:	429a      	cmp	r2, r3
 8001020:	d04b      	beq.n	80010ba <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001022:	6a3b      	ldr	r3, [r7, #32]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2208      	movs	r2, #8
 8001028:	4413      	add	r3, r2
 800102a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	6a3b      	ldr	r3, [r7, #32]
 8001032:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	1ad2      	subs	r2, r2, r3
 800103c:	2308      	movs	r3, #8
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	429a      	cmp	r2, r3
 8001042:	d91f      	bls.n	8001084 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00a      	beq.n	800106c <pvPortMallocMicroROS+0xf8>
	__asm volatile
 8001056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800105a:	f383 8811 	msr	BASEPRI, r3
 800105e:	f3bf 8f6f 	isb	sy
 8001062:	f3bf 8f4f 	dsb	sy
 8001066:	613b      	str	r3, [r7, #16]
}
 8001068:	bf00      	nop
 800106a:	e7fe      	b.n	800106a <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	1ad2      	subs	r2, r2, r3
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800107e:	69b8      	ldr	r0, [r7, #24]
 8001080:	f000 f974 	bl	800136c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <pvPortMallocMicroROS+0x17c>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	4a18      	ldr	r2, [pc, #96]	; (80010f0 <pvPortMallocMicroROS+0x17c>)
 8001090:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <pvPortMallocMicroROS+0x17c>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <pvPortMallocMicroROS+0x184>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	429a      	cmp	r2, r3
 800109c:	d203      	bcs.n	80010a6 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <pvPortMallocMicroROS+0x17c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a15      	ldr	r2, [pc, #84]	; (80010f8 <pvPortMallocMicroROS+0x184>)
 80010a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80010a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <pvPortMallocMicroROS+0x178>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	431a      	orrs	r2, r3
 80010b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80010ba:	f009 fe31 	bl	800ad20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00a      	beq.n	80010de <pvPortMallocMicroROS+0x16a>
	__asm volatile
 80010c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010cc:	f383 8811 	msr	BASEPRI, r3
 80010d0:	f3bf 8f6f 	isb	sy
 80010d4:	f3bf 8f4f 	dsb	sy
 80010d8:	60fb      	str	r3, [r7, #12]
}
 80010da:	bf00      	nop
 80010dc:	e7fe      	b.n	80010dc <pvPortMallocMicroROS+0x168>
	return pvReturn;
 80010de:	69fb      	ldr	r3, [r7, #28]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3728      	adds	r7, #40	; 0x28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20004150 	.word	0x20004150
 80010ec:	2000415c 	.word	0x2000415c
 80010f0:	20004154 	.word	0x20004154
 80010f4:	20004148 	.word	0x20004148
 80010f8:	20004158 	.word	0x20004158

080010fc <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d048      	beq.n	80011a0 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800110e:	2308      	movs	r3, #8
 8001110:	425b      	negs	r3, r3
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	4413      	add	r3, r2
 8001116:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <vPortFreeMicroROS+0xac>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4013      	ands	r3, r2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10a      	bne.n	8001140 <vPortFreeMicroROS+0x44>
	__asm volatile
 800112a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800112e:	f383 8811 	msr	BASEPRI, r3
 8001132:	f3bf 8f6f 	isb	sy
 8001136:	f3bf 8f4f 	dsb	sy
 800113a:	60fb      	str	r3, [r7, #12]
}
 800113c:	bf00      	nop
 800113e:	e7fe      	b.n	800113e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00a      	beq.n	800115e <vPortFreeMicroROS+0x62>
	__asm volatile
 8001148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800114c:	f383 8811 	msr	BASEPRI, r3
 8001150:	f3bf 8f6f 	isb	sy
 8001154:	f3bf 8f4f 	dsb	sy
 8001158:	60bb      	str	r3, [r7, #8]
}
 800115a:	bf00      	nop
 800115c:	e7fe      	b.n	800115c <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <vPortFreeMicroROS+0xac>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4013      	ands	r3, r2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d019      	beq.n	80011a0 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d115      	bne.n	80011a0 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <vPortFreeMicroROS+0xac>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	43db      	mvns	r3, r3
 800117e:	401a      	ands	r2, r3
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001184:	f009 fdbe 	bl	800ad04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	4b07      	ldr	r3, [pc, #28]	; (80011ac <vPortFreeMicroROS+0xb0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4413      	add	r3, r2
 8001192:	4a06      	ldr	r2, [pc, #24]	; (80011ac <vPortFreeMicroROS+0xb0>)
 8001194:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001196:	6938      	ldr	r0, [r7, #16]
 8001198:	f000 f8e8 	bl	800136c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800119c:	f009 fdc0 	bl	800ad20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80011a0:	bf00      	nop
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	2000415c 	.word	0x2000415c
 80011ac:	20004154 	.word	0x20004154

080011b0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80011b0:	b480      	push	{r7}
 80011b2:	b087      	sub	sp, #28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80011bc:	2308      	movs	r3, #8
 80011be:	425b      	negs	r3, r3
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	4413      	add	r3, r2
 80011c4:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <getBlockSize+0x38>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	4013      	ands	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]

	return count;
 80011d8:	68fb      	ldr	r3, [r7, #12]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	371c      	adds	r7, #28
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	2000415c 	.word	0x2000415c

080011ec <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80011f6:	f009 fd85 	bl	800ad04 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80011fa:	6838      	ldr	r0, [r7, #0]
 80011fc:	f7ff feba 	bl	8000f74 <pvPortMallocMicroROS>
 8001200:	6138      	str	r0, [r7, #16]

	uint8_t *puc = ( uint8_t * ) pv;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	60fb      	str	r3, [r7, #12]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001206:	2308      	movs	r3, #8
 8001208:	425b      	negs	r3, r3
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	4413      	add	r3, r2
 800120e:	60fb      	str	r3, [r7, #12]
	pxLink = ( void * ) puc;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	60bb      	str	r3, [r7, #8]


	char *in_src = (char*)pv;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	61fb      	str	r3, [r7, #28]
  	char *in_dest = (char*)newmem;
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	61bb      	str	r3, [r7, #24]
	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <pvPortReallocMicroROS+0x70>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	43db      	mvns	r3, r3
 8001226:	4013      	ands	r3, r2
 8001228:	617b      	str	r3, [r7, #20]

  	while(count--)
 800122a:	e007      	b.n	800123c <pvPortReallocMicroROS+0x50>
    	*in_dest++ = *in_src++;
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	1c53      	adds	r3, r2, #1
 8001230:	61fb      	str	r3, [r7, #28]
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	1c59      	adds	r1, r3, #1
 8001236:	61b9      	str	r1, [r7, #24]
 8001238:	7812      	ldrb	r2, [r2, #0]
 800123a:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	1e5a      	subs	r2, r3, #1
 8001240:	617a      	str	r2, [r7, #20]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f2      	bne.n	800122c <pvPortReallocMicroROS+0x40>

	vPortFreeMicroROS(pv);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ff58 	bl	80010fc <vPortFreeMicroROS>

	( void ) xTaskResumeAll();
 800124c:	f009 fd68 	bl	800ad20 <xTaskResumeAll>

	return newmem;
 8001250:	693b      	ldr	r3, [r7, #16]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3720      	adds	r7, #32
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2000415c 	.word	0x2000415c

08001260 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800126a:	f009 fd4b 	bl	800ad04 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	fb02 f303 	mul.w	r3, r2, r3
 8001276:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001278:	6978      	ldr	r0, [r7, #20]
 800127a:	f7ff fe7b 	bl	8000f74 <pvPortMallocMicroROS>
 800127e:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001284:	e004      	b.n	8001290 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1c5a      	adds	r2, r3, #1
 800128a:	613a      	str	r2, [r7, #16]
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	1e5a      	subs	r2, r3, #1
 8001294:	617a      	str	r2, [r7, #20]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f5      	bne.n	8001286 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 800129a:	f009 fd41 	bl	800ad20 <xTaskResumeAll>
  	return mem;
 800129e:	68fb      	ldr	r3, [r7, #12]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80012ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80012b4:	4b27      	ldr	r3, [pc, #156]	; (8001354 <prvHeapInit+0xac>)
 80012b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00c      	beq.n	80012dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	3307      	adds	r3, #7
 80012c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f023 0307 	bic.w	r3, r3, #7
 80012ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80012d0:	68ba      	ldr	r2, [r7, #8]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	4a1f      	ldr	r2, [pc, #124]	; (8001354 <prvHeapInit+0xac>)
 80012d8:	4413      	add	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80012e0:	4a1d      	ldr	r2, [pc, #116]	; (8001358 <prvHeapInit+0xb0>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80012e6:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <prvHeapInit+0xb0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	4413      	add	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80012f4:	2208      	movs	r2, #8
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	1a9b      	subs	r3, r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f023 0307 	bic.w	r3, r3, #7
 8001302:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4a15      	ldr	r2, [pc, #84]	; (800135c <prvHeapInit+0xb4>)
 8001308:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800130a:	4b14      	ldr	r3, [pc, #80]	; (800135c <prvHeapInit+0xb4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2200      	movs	r2, #0
 8001310:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <prvHeapInit+0xb4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	1ad2      	subs	r2, r2, r3
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <prvHeapInit+0xb4>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <prvHeapInit+0xb8>)
 8001336:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	4a09      	ldr	r2, [pc, #36]	; (8001364 <prvHeapInit+0xbc>)
 800133e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <prvHeapInit+0xc0>)
 8001342:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001346:	601a      	str	r2, [r3, #0]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	20000148 	.word	0x20000148
 8001358:	20004148 	.word	0x20004148
 800135c:	20004150 	.word	0x20004150
 8001360:	20004158 	.word	0x20004158
 8001364:	20004154 	.word	0x20004154
 8001368:	2000415c 	.word	0x2000415c

0800136c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001374:	4b28      	ldr	r3, [pc, #160]	; (8001418 <prvInsertBlockIntoFreeList+0xac>)
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	e002      	b.n	8001380 <prvInsertBlockIntoFreeList+0x14>
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	429a      	cmp	r2, r3
 8001388:	d8f7      	bhi.n	800137a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	4413      	add	r3, r2
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	429a      	cmp	r2, r3
 800139a:	d108      	bne.n	80013ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	441a      	add	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	441a      	add	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d118      	bne.n	80013f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <prvInsertBlockIntoFreeList+0xb0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d00d      	beq.n	80013ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	441a      	add	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	e008      	b.n	80013fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <prvInsertBlockIntoFreeList+0xb0>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	e003      	b.n	80013fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	429a      	cmp	r2, r3
 8001402:	d002      	beq.n	800140a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20004148 	.word	0x20004148
 800141c:	20004150 	.word	0x20004150

08001420 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800142e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001430:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001434:	4904      	ldr	r1, [pc, #16]	; (8001448 <cubemx_transport_open+0x28>)
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f006 fffc 	bl	8008434 <HAL_UART_Receive_DMA>
    return true;
 800143c:	2301      	movs	r3, #1
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20004160 	.word	0x20004160

0800144c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800145a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	f007 f819 	bl	8008494 <HAL_UART_DMAStop>
    return true;
 8001462:	2301      	movs	r3, #1
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
 8001478:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001480:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b20      	cmp	r3, #32
 800148c:	d11c      	bne.n	80014c8 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	b29b      	uxth	r3, r3
 8001492:	461a      	mov	r2, r3
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	6978      	ldr	r0, [r7, #20]
 8001498:	f006 ff4e 	bl	8008338 <HAL_UART_Transmit_DMA>
 800149c:	4603      	mov	r3, r0
 800149e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80014a0:	e002      	b.n	80014a8 <cubemx_transport_write+0x3c>
            osDelay(1);
 80014a2:	2001      	movs	r0, #1
 80014a4:	f008 fa66 	bl	8009974 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80014a8:	7cfb      	ldrb	r3, [r7, #19]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d105      	bne.n	80014ba <cubemx_transport_write+0x4e>
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b20      	cmp	r3, #32
 80014b8:	d1f3      	bne.n	80014a2 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 80014ba:	7cfb      	ldrb	r3, [r7, #19]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <cubemx_transport_write+0x58>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	e002      	b.n	80014ca <cubemx_transport_write+0x5e>
 80014c4:	2300      	movs	r3, #0
 80014c6:	e000      	b.n	80014ca <cubemx_transport_write+0x5e>
    }else{
        return 0;
 80014c8:	2300      	movs	r3, #0
    }
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80014e8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ee:	b672      	cpsid	i
}
 80014f0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80014fe:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <cubemx_transport_read+0x9c>)
 8001500:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001502:	b662      	cpsie	i
}
 8001504:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 800150c:	2001      	movs	r0, #1
 800150e:	f008 fa31 	bl	8009974 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001512:	4b18      	ldr	r3, [pc, #96]	; (8001574 <cubemx_transport_read+0xa0>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <cubemx_transport_read+0x9c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	429a      	cmp	r2, r3
 800151c:	d103      	bne.n	8001526 <cubemx_transport_read+0x52>
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	dbe3      	blt.n	80014ee <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800152a:	e011      	b.n	8001550 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <cubemx_transport_read+0xa0>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	440b      	add	r3, r1
 8001536:	4910      	ldr	r1, [pc, #64]	; (8001578 <cubemx_transport_read+0xa4>)
 8001538:	5c8a      	ldrb	r2, [r1, r2]
 800153a:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 800153c:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <cubemx_transport_read+0xa0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	3301      	adds	r3, #1
 8001542:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001546:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <cubemx_transport_read+0xa0>)
 8001548:	6013      	str	r3, [r2, #0]
        wrote++;
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	3301      	adds	r3, #1
 800154e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <cubemx_transport_read+0xa0>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <cubemx_transport_read+0x9c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	d003      	beq.n	8001564 <cubemx_transport_read+0x90>
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	429a      	cmp	r2, r3
 8001562:	d3e3      	bcc.n	800152c <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001564:	69bb      	ldr	r3, [r7, #24]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20004964 	.word	0x20004964
 8001574:	20004960 	.word	0x20004960
 8001578:	20004160 	.word	0x20004160

0800157c <MX_GPIO_Init>:
#include "main.h"
#include "drv_gpio.h"

void MX_GPIO_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	4b2d      	ldr	r3, [pc, #180]	; (800164c <MX_GPIO_Init+0xd0>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a2c      	ldr	r2, [pc, #176]	; (800164c <MX_GPIO_Init+0xd0>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b2a      	ldr	r3, [pc, #168]	; (800164c <MX_GPIO_Init+0xd0>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b26      	ldr	r3, [pc, #152]	; (800164c <MX_GPIO_Init+0xd0>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a25      	ldr	r2, [pc, #148]	; (800164c <MX_GPIO_Init+0xd0>)
 80015b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b23      	ldr	r3, [pc, #140]	; (800164c <MX_GPIO_Init+0xd0>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	4b1f      	ldr	r3, [pc, #124]	; (800164c <MX_GPIO_Init+0xd0>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a1e      	ldr	r2, [pc, #120]	; (800164c <MX_GPIO_Init+0xd0>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b1c      	ldr	r3, [pc, #112]	; (800164c <MX_GPIO_Init+0xd0>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <MX_GPIO_Init+0xd0>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a17      	ldr	r2, [pc, #92]	; (800164c <MX_GPIO_Init+0xd0>)
 80015f0:	f043 0302 	orr.w	r3, r3, #2
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <MX_GPIO_Init+0xd0>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	2120      	movs	r1, #32
 8001606:	4812      	ldr	r0, [pc, #72]	; (8001650 <MX_GPIO_Init+0xd4>)
 8001608:	f003 fb40 	bl	8004c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800160c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001612:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	480c      	ldr	r0, [pc, #48]	; (8001654 <MX_GPIO_Init+0xd8>)
 8001624:	f003 f9ae 	bl	8004984 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001628:	2320      	movs	r3, #32
 800162a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	4804      	ldr	r0, [pc, #16]	; (8001650 <MX_GPIO_Init+0xd4>)
 8001640:	f003 f9a0 	bl	8004984 <HAL_GPIO_Init>

}
 8001644:	bf00      	nop
 8001646:	3728      	adds	r7, #40	; 0x28
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40023800 	.word	0x40023800
 8001650:	40020000 	.word	0x40020000
 8001654:	40020800 	.word	0x40020800

08001658 <HAL_GPIO_EXTI_Callback>:

extern void quadEncoder_CallbackIndexL(void);
extern void quadEncoder_CallbackIndexR(void);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001668:	d017      	beq.n	800169a <HAL_GPIO_EXTI_Callback+0x42>
 800166a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800166e:	dc16      	bgt.n	800169e <HAL_GPIO_EXTI_Callback+0x46>
 8001670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001674:	d00e      	beq.n	8001694 <HAL_GPIO_EXTI_Callback+0x3c>
 8001676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800167a:	dc10      	bgt.n	800169e <HAL_GPIO_EXTI_Callback+0x46>
 800167c:	2b08      	cmp	r3, #8
 800167e:	d010      	beq.n	80016a2 <HAL_GPIO_EXTI_Callback+0x4a>
 8001680:	2b08      	cmp	r3, #8
 8001682:	dc0c      	bgt.n	800169e <HAL_GPIO_EXTI_Callback+0x46>
 8001684:	2b01      	cmp	r3, #1
 8001686:	d002      	beq.n	800168e <HAL_GPIO_EXTI_Callback+0x36>
 8001688:	2b02      	cmp	r3, #2
 800168a:	d00c      	beq.n	80016a6 <HAL_GPIO_EXTI_Callback+0x4e>
					break;

	case GPIO_PIN_13 :		// USER BUTTON
					break;

	default : 		break;
 800168c:	e007      	b.n	800169e <HAL_GPIO_EXTI_Callback+0x46>
		quadEncoder_CallbackIndexR();
 800168e:	f001 fb33 	bl	8002cf8 <quadEncoder_CallbackIndexR>
					break;
 8001692:	e009      	b.n	80016a8 <HAL_GPIO_EXTI_Callback+0x50>
		quadEncoder_CallbackIndexL();
 8001694:	f001 fb0a 	bl	8002cac <quadEncoder_CallbackIndexL>
					break;
 8001698:	e006      	b.n	80016a8 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 800169a:	bf00      	nop
 800169c:	e004      	b.n	80016a8 <HAL_GPIO_EXTI_Callback+0x50>
	default : 		break;
 800169e:	bf00      	nop
 80016a0:	e002      	b.n	80016a8 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 80016a2:	bf00      	nop
 80016a4:	e000      	b.n	80016a8 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 80016a6:	bf00      	nop


	}
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <MX_I2C1_Init>:


I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_I2C1_Init+0x50>)
 80016b6:	4a13      	ldr	r2, [pc, #76]	; (8001704 <MX_I2C1_Init+0x54>)
 80016b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_I2C1_Init+0x50>)
 80016bc:	4a12      	ldr	r2, [pc, #72]	; (8001708 <MX_I2C1_Init+0x58>)
 80016be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_I2C1_Init+0x50>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_I2C1_Init+0x50>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_I2C1_Init+0x50>)
 80016ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <MX_I2C1_Init+0x50>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_I2C1_Init+0x50>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <MX_I2C1_Init+0x50>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_I2C1_Init+0x50>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ec:	4804      	ldr	r0, [pc, #16]	; (8001700 <MX_I2C1_Init+0x50>)
 80016ee:	f003 faff 	bl	8004cf0 <HAL_I2C_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016f8:	f000 ff56 	bl	80025a8 <Error_Handler>
  }

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20004968 	.word	0x20004968
 8001704:	40005400 	.word	0x40005400
 8001708:	000186a0 	.word	0x000186a0

0800170c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;


void MX_USART1_UART_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001712:	4a12      	ldr	r2, [pc, #72]	; (800175c <MX_USART1_UART_Init+0x50>)
 8001714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800171c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001732:	220c      	movs	r2, #12
 8001734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001744:	f006 fc77 	bl	8008036 <HAL_UART_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800174e:	f000 ff2b 	bl	80025a8 <Error_Handler>
  }
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200049bc 	.word	0x200049bc
 800175c:	40011000 	.word	0x40011000

08001760 <MX_USART2_UART_Init>:


void MX_USART2_UART_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001766:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <MX_USART2_UART_Init+0x50>)
 8001768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800176c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001798:	f006 fc4d 	bl	8008036 <HAL_UART_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017a2:	f000 ff01 	bl	80025a8 <Error_Handler>
  }
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20004a00 	.word	0x20004a00
 80017b0:	40004400 	.word	0x40004400

080017b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	4b1f      	ldr	r3, [pc, #124]	; (800183c <MX_DMA_Init+0x88>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a1e      	ldr	r2, [pc, #120]	; (800183c <MX_DMA_Init+0x88>)
 80017c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b1c      	ldr	r3, [pc, #112]	; (800183c <MX_DMA_Init+0x88>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	603b      	str	r3, [r7, #0]
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <MX_DMA_Init+0x88>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a17      	ldr	r2, [pc, #92]	; (800183c <MX_DMA_Init+0x88>)
 80017e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <MX_DMA_Init+0x88>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2105      	movs	r1, #5
 80017f6:	2010      	movs	r0, #16
 80017f8:	f002 fc8a 	bl	8004110 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80017fc:	2010      	movs	r0, #16
 80017fe:	f002 fca3 	bl	8004148 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2105      	movs	r1, #5
 8001806:	2011      	movs	r0, #17
 8001808:	f002 fc82 	bl	8004110 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800180c:	2011      	movs	r0, #17
 800180e:	f002 fc9b 	bl	8004148 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2105      	movs	r1, #5
 8001816:	203a      	movs	r0, #58	; 0x3a
 8001818:	f002 fc7a 	bl	8004110 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800181c:	203a      	movs	r0, #58	; 0x3a
 800181e:	f002 fc93 	bl	8004148 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2105      	movs	r1, #5
 8001826:	2046      	movs	r0, #70	; 0x46
 8001828:	f002 fc72 	bl	8004110 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800182c:	2046      	movs	r0, #70	; 0x46
 800182e:	f002 fc8b 	bl	8004148 <HAL_NVIC_EnableIRQ>

}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800

08001840 <CHECKMRRET>:
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);


void CHECKMRRET(rcl_ret_t ret, char* msg){
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
	if (ret != RCL_RET_OK){ printf("Error : %d\r\nMsg : %s\r\n", (int)ret, msg); }
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d004      	beq.n	800185a <CHECKMRRET+0x1a>
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4803      	ldr	r0, [pc, #12]	; (8001864 <CHECKMRRET+0x24>)
 8001856:	f016 fbe7 	bl	8018028 <iprintf>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	08019364 	.word	0x08019364

08001868 <SubscriberCallbackFunction>:

void SubscriberCallbackFunction(const void *msgin){
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
#if SYNCHRO_EX == EXTEST_MICROROS
	std_msgs__msg__String * msg = (std_msgs__msg__String * )msgin;
	printf("\r\nMessage recue : %s\r\n", msg->data->data);
#elif SYNCHRO_EX == EXFINAL
	std_msgs__msg__Int32 * msg = (std_msgs__msg__Int32 * )msgin;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	60fb      	str	r3, [r7, #12]
	printf("\r\nMessage recue : %ld\r\n", msg->data);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	4803      	ldr	r0, [pc, #12]	; (8001888 <SubscriberCallbackFunction+0x20>)
 800187c:	f016 fbd4 	bl	8018028 <iprintf>
#endif //SYNCHRO_EX
}
 8001880:	bf00      	nop
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	0801937c 	.word	0x0801937c

0800188c <microros_task>:



void microros_task(void *argument)
{
 800188c:	b5b0      	push	{r4, r5, r7, lr}
 800188e:	b0ec      	sub	sp, #432	; 0x1b0
 8001890:	af02      	add	r7, sp, #8
 8001892:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001896:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800189a:	6018      	str	r0, [r3, #0]
	rcl_node_t node;
	rcl_node_options_t node_opt;
	rclc_executor_t executor;

	// micro-ROS configuration
	rmw_uros_set_custom_transport(
 800189c:	4bd5      	ldr	r3, [pc, #852]	; (8001bf4 <microros_task+0x368>)
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	4bd5      	ldr	r3, [pc, #852]	; (8001bf8 <microros_task+0x36c>)
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	4bd5      	ldr	r3, [pc, #852]	; (8001bfc <microros_task+0x370>)
 80018a6:	4ad6      	ldr	r2, [pc, #856]	; (8001c00 <microros_task+0x374>)
 80018a8:	49d6      	ldr	r1, [pc, #856]	; (8001c04 <microros_task+0x378>)
 80018aa:	2001      	movs	r0, #1
 80018ac:	f00c f968 	bl	800db80 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80018b0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80018b4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80018b8:	4618      	mov	r0, r3
 80018ba:	f00b fecb 	bl	800d654 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 80018be:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80018c2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80018c6:	4ad0      	ldr	r2, [pc, #832]	; (8001c08 <microros_task+0x37c>)
 80018c8:	601a      	str	r2, [r3, #0]
	freeRTOS_allocator.deallocate = microros_deallocate;
 80018ca:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80018ce:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80018d2:	4ace      	ldr	r2, [pc, #824]	; (8001c0c <microros_task+0x380>)
 80018d4:	605a      	str	r2, [r3, #4]
	freeRTOS_allocator.reallocate = microros_reallocate;
 80018d6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80018da:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80018de:	4acc      	ldr	r2, [pc, #816]	; (8001c10 <microros_task+0x384>)
 80018e0:	609a      	str	r2, [r3, #8]
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80018e2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80018e6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80018ea:	4aca      	ldr	r2, [pc, #808]	; (8001c14 <microros_task+0x388>)
 80018ec:	60da      	str	r2, [r3, #12]

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80018ee:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80018f2:	4618      	mov	r0, r3
 80018f4:	f00b febc 	bl	800d670 <rcutils_set_default_allocator>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f083 0301 	eor.w	r3, r3, #1
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <microros_task+0x80>
		printf("Error on default allocators (line %d)\r\n", __LINE__);
 8001904:	21b5      	movs	r1, #181	; 0xb5
 8001906:	48c4      	ldr	r0, [pc, #784]	; (8001c18 <microros_task+0x38c>)
 8001908:	f016 fb8e 	bl	8018028 <iprintf>
	}

	allocator = rcl_get_default_allocator();
 800190c:	463b      	mov	r3, r7
 800190e:	4618      	mov	r0, r3
 8001910:	f00b fece 	bl	800d6b0 <rcutils_get_default_allocator>
 8001914:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001918:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800191c:	f507 749e 	add.w	r4, r7, #316	; 0x13c
 8001920:	461d      	mov	r5, r3
 8001922:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001926:	682b      	ldr	r3, [r5, #0]
 8001928:	6023      	str	r3, [r4, #0]
	//create init_options
	CHECKMRRET(rclc_support_init(&support, 0, NULL, &allocator), "error on init support");
 800192a:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800192e:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	f00b fda1 	bl	800d47c <rclc_support_init>
 800193a:	4603      	mov	r3, r0
 800193c:	49b7      	ldr	r1, [pc, #732]	; (8001c1c <microros_task+0x390>)
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff ff7e 	bl	8001840 <CHECKMRRET>
	// create node
	//CHECKMRRET(rclc_node_init_default(&node, "STM32_node", "", &support), "error on init node");
	node_opt = rcl_node_get_default_options();
 8001944:	463b      	mov	r3, r7
 8001946:	4618      	mov	r0, r3
 8001948:	f00a ff50 	bl	800c7ec <rcl_node_get_default_options>
 800194c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001950:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001954:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8001958:	461d      	mov	r5, r3
 800195a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800195c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800195e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001962:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	node_opt.domain_id = ROS_DOMAIN_ID;
 8001966:	2300      	movs	r3, #0
 8001968:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	CHECKMRRET(rclc_node_init_with_options(&node, "STM32_node", "", &support, &node_opt), "error on init node");
 800196c:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8001970:	f507 709a 	add.w	r0, r7, #308	; 0x134
 8001974:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	4613      	mov	r3, r2
 800197c:	4aa8      	ldr	r2, [pc, #672]	; (8001c20 <microros_task+0x394>)
 800197e:	49a9      	ldr	r1, [pc, #676]	; (8001c24 <microros_task+0x398>)
 8001980:	f00b fdca 	bl	800d518 <rclc_node_init_with_options>
 8001984:	4603      	mov	r3, r0
 8001986:	49a8      	ldr	r1, [pc, #672]	; (8001c28 <microros_task+0x39c>)
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff59 	bl	8001840 <CHECKMRRET>
	{
		ret = rclc_executor_spin_some(&executor, 100*1000*1000);
		vTaskDelay(SAMPLING_PERIOD_ms);
	}
#elif SYNCHRO_EX == EXFINAL
	MicroRosPubMsg MsgToPub = {'N', 0, 0};
 800198e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001992:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001996:	224e      	movs	r2, #78	; 0x4e
 8001998:	701a      	strb	r2, [r3, #0]
 800199a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800199e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80019a2:	2200      	movs	r2, #0
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80019aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
	MicroRosSubMsg SubToMsg = {DEFAULT_DIR, 0, 0, DEFAULT_MODE, DEFAULT_SPEED};
 80019b2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80019b6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80019ba:	4a9c      	ldr	r2, [pc, #624]	; (8001c2c <microros_task+0x3a0>)
 80019bc:	461c      	mov	r4, r3
 80019be:	4615      	mov	r5, r2
 80019c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019c4:	682b      	ldr	r3, [r5, #0]
 80019c6:	6023      	str	r3, [r4, #0]
	/* PUBLISHER */
	//Use to publish the direction of robot in sensor mode
	rcl_publisher_t capteur_dir_pub;
	char* capteur_dir_topic = CAPTEUR_DIR_TOPIC;
 80019c8:	4b99      	ldr	r3, [pc, #612]	; (8001c30 <microros_task+0x3a4>)
 80019ca:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	std_msgs__msg__Int32 capteur_dir_msg;
	//Use to publish the actual mode of the robot
	rcl_publisher_t etat_mode_pub;
	char* etat_mode_topic = ETAT_MODE_TOPIC;
 80019ce:	4b99      	ldr	r3, [pc, #612]	; (8001c34 <microros_task+0x3a8>)
 80019d0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	std_msgs__msg__Int32 etat_mode_msg;
	//Use to publish the actual speed of the robot
	rcl_publisher_t etat_speed_pub;
	char* etat_speed_topic = ETAT_SPEED_TOPIC;
 80019d4:	4b98      	ldr	r3, [pc, #608]	; (8001c38 <microros_task+0x3ac>)
 80019d6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	std_msgs__msg__Int32 etat_speed_msg;
	/* SUBSCRIBER */
	//Use to receive the x position of object see by the camera
	rcl_subscription_t camera_x_sub;
	char* camera_x_topic = CAMERA_X_TOPIC;
 80019da:	4b98      	ldr	r3, [pc, #608]	; (8001c3c <microros_task+0x3b0>)
 80019dc:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	std_msgs__msg__Int32 camera_x_msg;
	//Use to receive the y position of object see by the camera
	rcl_subscription_t camera_y_sub;
	char* camera_y_topic = CAMERA_Y_TOPIC;
 80019e0:	4b97      	ldr	r3, [pc, #604]	; (8001c40 <microros_task+0x3b4>)
 80019e2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	std_msgs__msg__Int32 camera_y_msg;
	//Use to receive the remote control in remote mode
	rcl_subscription_t telecommande_dir_sub;
	char* telecommande_dir_topic = TELECOMMANDE_DIR_TOPIC;
 80019e6:	4b97      	ldr	r3, [pc, #604]	; (8001c44 <microros_task+0x3b8>)
 80019e8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	std_msgs__msg__Int32 telecommande_dir_msg;
	//Use to receive the mode config
	rcl_subscription_t config_mode_sub;
	char* config_mode_topic = CONFIG_MODE_TOPIC;
 80019ec:	4b96      	ldr	r3, [pc, #600]	; (8001c48 <microros_task+0x3bc>)
 80019ee:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	std_msgs__msg__Int32 config_mode_msg;
	//Use to receive the speed config
	rcl_subscription_t config_speed_sub;
	char* config_speed_topic = CONFIG_SPEED_TOPIC;
 80019f2:	4b96      	ldr	r3, [pc, #600]	; (8001c4c <microros_task+0x3c0>)
 80019f4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	std_msgs__msg__Int32 config_speed_msg;

	// create publisher
	createPublisher(&capteur_dir_pub, &node,
 80019f8:	f00c ff34 	bl	800e864 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80019fc:	4602      	mov	r2, r0
 80019fe:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8001a02:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001a06:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001a10:	f000 fdd0 	bl	80025b4 <createPublisher>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		capteur_dir_topic, &capteur_dir_msg);

	createPublisher(&etat_mode_pub, &node,
 8001a14:	f00c ff26 	bl	800e864 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8001a1e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001a22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001a2c:	f000 fdc2 	bl	80025b4 <createPublisher>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		etat_mode_topic, &etat_mode_msg);

	createPublisher(&etat_speed_pub, &node,
 8001a30:	f00c ff18 	bl	800e864 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001a34:	4602      	mov	r2, r0
 8001a36:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8001a3a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001a3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001a48:	f000 fdb4 	bl	80025b4 <createPublisher>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		etat_speed_topic, &etat_speed_msg);

	//create subscriber
	createSubscriber(&camera_x_sub,&node,
 8001a4c:	f00c ff0a 	bl	800e864 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001a50:	4602      	mov	r2, r0
 8001a52:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8001a56:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001a5a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001a64:	f000 fdc2 	bl	80025ec <createSubscriber>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		camera_x_topic, &camera_x_msg);

	createSubscriber(&camera_y_sub,&node,
 8001a68:	f00c fefc 	bl	800e864 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8001a72:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001a76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001a80:	f000 fdb4 	bl	80025ec <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			camera_y_topic, &camera_y_msg);

	createSubscriber(&telecommande_dir_sub,&node,
 8001a84:	f00c feee 	bl	800e864 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8001a8e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001a92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a9c:	f000 fda6 	bl	80025ec <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			telecommande_dir_topic, &telecommande_dir_msg);

	createSubscriber(&config_mode_sub,&node,
 8001aa0:	f00c fee0 	bl	800e864 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8001aaa:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001aae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001ab8:	f000 fd98 	bl	80025ec <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			config_mode_topic, &config_mode_msg);

	createSubscriber(&config_speed_sub,&node,
 8001abc:	f00c fed2 	bl	800e864 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8001ac6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001ad4:	f000 fd8a 	bl	80025ec <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			config_speed_topic, &config_speed_msg);

	CHECKMRRET(rclc_executor_init(&executor, &support.context, 5, &allocator), "Error on init executor");
 8001ad8:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8001adc:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001ae0:	1d19      	adds	r1, r3, #4
 8001ae2:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	2205      	movs	r2, #5
 8001aea:	f00b fa69 	bl	800cfc0 <rclc_executor_init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4957      	ldr	r1, [pc, #348]	; (8001c50 <microros_task+0x3c4>)
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fea4 	bl	8001840 <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &camera_x_sub, &camera_x_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add camera_x_sub");
 8001af8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001afc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001b00:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001b04:	2300      	movs	r3, #0
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	4b52      	ldr	r3, [pc, #328]	; (8001c54 <microros_task+0x3c8>)
 8001b0a:	f00b facd 	bl	800d0a8 <rclc_executor_add_subscription>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4951      	ldr	r1, [pc, #324]	; (8001c58 <microros_task+0x3cc>)
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fe94 	bl	8001840 <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &camera_y_sub, &camera_y_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add camera_y_sub");
 8001b18:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001b1c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001b20:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001b24:	2300      	movs	r3, #0
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	4b4a      	ldr	r3, [pc, #296]	; (8001c54 <microros_task+0x3c8>)
 8001b2a:	f00b fabd 	bl	800d0a8 <rclc_executor_add_subscription>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	494a      	ldr	r1, [pc, #296]	; (8001c5c <microros_task+0x3d0>)
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fe84 	bl	8001840 <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &telecommande_dir_sub, &telecommande_dir_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add telecommande_dir_sub");
 8001b38:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001b3c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001b40:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001b44:	2300      	movs	r3, #0
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	4b42      	ldr	r3, [pc, #264]	; (8001c54 <microros_task+0x3c8>)
 8001b4a:	f00b faad 	bl	800d0a8 <rclc_executor_add_subscription>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4943      	ldr	r1, [pc, #268]	; (8001c60 <microros_task+0x3d4>)
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fe74 	bl	8001840 <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &config_mode_sub, &config_mode_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add config_mode_sub");
 8001b58:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001b5c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001b60:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001b64:	2300      	movs	r3, #0
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	4b3a      	ldr	r3, [pc, #232]	; (8001c54 <microros_task+0x3c8>)
 8001b6a:	f00b fa9d 	bl	800d0a8 <rclc_executor_add_subscription>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	493c      	ldr	r1, [pc, #240]	; (8001c64 <microros_task+0x3d8>)
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fe64 	bl	8001840 <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &config_speed_sub, &config_speed_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add config_speed_sub");
 8001b78:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001b7c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001b80:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001b84:	2300      	movs	r3, #0
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <microros_task+0x3c8>)
 8001b8a:	f00b fa8d 	bl	800d0a8 <rclc_executor_add_subscription>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	4935      	ldr	r1, [pc, #212]	; (8001c68 <microros_task+0x3dc>)
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fe54 	bl	8001840 <CHECKMRRET>

	for(;;)
	{
		if (!uxQueueMessagesWaiting(qhMR_sub))
 8001b98:	4b34      	ldr	r3, [pc, #208]	; (8001c6c <microros_task+0x3e0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f008 fcb1 	bl	800a504 <uxQueueMessagesWaiting>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d108      	bne.n	8001bba <microros_task+0x32e>
			xQueueSend(qhMR_sub, ( void * ) &SubToMsg, portMAX_DELAY);
 8001ba8:	4b30      	ldr	r3, [pc, #192]	; (8001c6c <microros_task+0x3e0>)
 8001baa:	6818      	ldr	r0, [r3, #0]
 8001bac:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bb6:	f008 f91f 	bl	8009df8 <xQueueGenericSend>
		rclc_executor_spin_some(&executor, 1*1000*1000);
 8001bba:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001bbe:	4a2c      	ldr	r2, [pc, #176]	; (8001c70 <microros_task+0x3e4>)
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	4608      	mov	r0, r1
 8001bc6:	f00b fc23 	bl	800d410 <rclc_executor_spin_some>
		SubToMsg.dir = telecommande_dir_msg.data;
 8001bca:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001bce:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001bd8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001bdc:	601a      	str	r2, [r3, #0]
		SubToMsg.x = camera_x_msg.data;
 8001bde:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001be2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001bec:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	e03f      	b.n	8001c74 <microros_task+0x3e8>
 8001bf4:	080014d5 	.word	0x080014d5
 8001bf8:	0800146d 	.word	0x0800146d
 8001bfc:	0800144d 	.word	0x0800144d
 8001c00:	08001421 	.word	0x08001421
 8001c04:	200049bc 	.word	0x200049bc
 8001c08:	08002631 	.word	0x08002631
 8001c0c:	08002675 	.word	0x08002675
 8001c10:	080026ad 	.word	0x080026ad
 8001c14:	08002719 	.word	0x08002719
 8001c18:	08019394 	.word	0x08019394
 8001c1c:	080193bc 	.word	0x080193bc
 8001c20:	080193d4 	.word	0x080193d4
 8001c24:	080193d8 	.word	0x080193d8
 8001c28:	080193e4 	.word	0x080193e4
 8001c2c:	08019550 	.word	0x08019550
 8001c30:	080193f8 	.word	0x080193f8
 8001c34:	08019404 	.word	0x08019404
 8001c38:	08019410 	.word	0x08019410
 8001c3c:	0801941c 	.word	0x0801941c
 8001c40:	08019428 	.word	0x08019428
 8001c44:	08019434 	.word	0x08019434
 8001c48:	08019440 	.word	0x08019440
 8001c4c:	08019448 	.word	0x08019448
 8001c50:	08019450 	.word	0x08019450
 8001c54:	08001869 	.word	0x08001869
 8001c58:	08019468 	.word	0x08019468
 8001c5c:	08019480 	.word	0x08019480
 8001c60:	08019498 	.word	0x08019498
 8001c64:	080194b8 	.word	0x080194b8
 8001c68:	080194d4 	.word	0x080194d4
 8001c6c:	20004bd0 	.word	0x20004bd0
 8001c70:	000f4240 	.word	0x000f4240
		SubToMsg.y = camera_y_msg.data;
 8001c74:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001c78:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001c82:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001c86:	609a      	str	r2, [r3, #8]
		SubToMsg.mode = config_mode_msg.data;
 8001c88:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001c8c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001c96:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001c9a:	60da      	str	r2, [r3, #12]
		SubToMsg.speed = config_speed_msg.data;
 8001c9c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001ca0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001caa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001cae:	611a      	str	r2, [r3, #16]

		if (uxQueueMessagesWaiting(qhMR_pub))
 8001cb0:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <microros_task+0x4dc>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f008 fc25 	bl	800a504 <uxQueueMessagesWaiting>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d04e      	beq.n	8001d5e <microros_task+0x4d2>
		{
			xQueueReceive(qhMR_pub, &MsgToPub, portMAX_DELAY);
 8001cc0:	4b29      	ldr	r3, [pc, #164]	; (8001d68 <microros_task+0x4dc>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001cc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f008 fa2d 	bl	800a12c <xQueueReceive>
			capteur_dir_msg.data = (int)MsgToPub.dir;
 8001cd2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001cd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001ce2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ce6:	601a      	str	r2, [r3, #0]
			etat_mode_msg.data = MsgToPub.mode;
 8001ce8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001cec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001cf6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001cfa:	601a      	str	r2, [r3, #0]
			etat_speed_msg.data = MsgToPub.speed;
 8001cfc:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001d00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001d0a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001d0e:	601a      	str	r2, [r3, #0]
			CHECKMRRET(rcl_publish(&capteur_dir_pub, &capteur_dir_msg, NULL), "erreur publish capteur_dir_pub");
 8001d10:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001d14:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001d18:	2200      	movs	r2, #0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f00a febe 	bl	800ca9c <rcl_publish>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4912      	ldr	r1, [pc, #72]	; (8001d6c <microros_task+0x4e0>)
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fd8b 	bl	8001840 <CHECKMRRET>
			CHECKMRRET(rcl_publish(&etat_mode_pub, &etat_mode_msg, NULL), "erreur publish etat_mode_pub");
 8001d2a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001d2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d32:	2200      	movs	r2, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f00a feb1 	bl	800ca9c <rcl_publish>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	490c      	ldr	r1, [pc, #48]	; (8001d70 <microros_task+0x4e4>)
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fd7e 	bl	8001840 <CHECKMRRET>
			CHECKMRRET(rcl_publish(&etat_speed_pub, &etat_speed_msg, NULL), "erreur publish etat_speed_pub");
 8001d44:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001d48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f00a fea4 	bl	800ca9c <rcl_publish>
 8001d54:	4603      	mov	r3, r0
 8001d56:	4907      	ldr	r1, [pc, #28]	; (8001d74 <microros_task+0x4e8>)
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fd71 	bl	8001840 <CHECKMRRET>
			#if DEBUG_PRINTF
			printf("\r\nReceive from decision :\r\nDirection : %d\r\nMode : %d\r\nSpeed : %d\r\n", capteur_dir_msg.data, etat_mode_msg.data, etat_speed_msg.data);
			#endif //DEBUG_PRINTF
		}
		vTaskDelay(SAMPLING_PERIOD_ms);
 8001d5e:	2005      	movs	r0, #5
 8001d60:	f008 ff2c 	bl	800abbc <vTaskDelay>
		if (!uxQueueMessagesWaiting(qhMR_sub))
 8001d64:	e718      	b.n	8001b98 <microros_task+0x30c>
 8001d66:	bf00      	nop
 8001d68:	20004bd4 	.word	0x20004bd4
 8001d6c:	080194f0 	.word	0x080194f0
 8001d70:	08019510 	.word	0x08019510
 8001d74:	08019530 	.word	0x08019530

08001d78 <task_Motor_Left>:
	}
#endif //SYNCHRO_EX
}
//========================================================================
static void task_Motor_Left(void *pvParameters)
{
 8001d78:	b5b0      	push	{r4, r5, r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	int16_t consigne = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	81fb      	strh	r3, [r7, #14]

	float ui = 0.0;
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
	float up = 0.0;
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	61bb      	str	r3, [r7, #24]
	int err = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
	int speed = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	613b      	str	r3, [r7, #16]

	for (;;)
	{
		xQueueReceive(q_mot_L, &consigne, portMAX_DELAY);
 8001d98:	4b35      	ldr	r3, [pc, #212]	; (8001e70 <task_Motor_Left+0xf8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f107 010e 	add.w	r1, r7, #14
 8001da0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001da4:	4618      	mov	r0, r3
 8001da6:	f008 f9c1 	bl	800a12c <xQueueReceive>

		speed = quadEncoder_GetSpeedL();
 8001daa:	f000 fedb 	bl	8002b64 <quadEncoder_GetSpeedL>
 8001dae:	4603      	mov	r3, r0
 8001db0:	613b      	str	r3, [r7, #16]
		err=consigne-speed;
 8001db2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001db6:	461a      	mov	r2, r3
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	617b      	str	r3, [r7, #20]
		up=LKp*(float)err;
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	ee07 3a90 	vmov	s15, r3
 8001dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc8:	ee17 0a90 	vmov	r0, s15
 8001dcc:	f7fe fbd4 	bl	8000578 <__aeabi_f2d>
 8001dd0:	a323      	add	r3, pc, #140	; (adr r3, 8001e60 <task_Motor_Left+0xe8>)
 8001dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd6:	f7fe fc27 	bl	8000628 <__aeabi_dmul>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	f7fe fe33 	bl	8000a4c <__aeabi_d2f>
 8001de6:	4603      	mov	r3, r0
 8001de8:	61bb      	str	r3, [r7, #24]
		ui=ui+LKp*LKi*(float)err;
 8001dea:	69f8      	ldr	r0, [r7, #28]
 8001dec:	f7fe fbc4 	bl	8000578 <__aeabi_f2d>
 8001df0:	4604      	mov	r4, r0
 8001df2:	460d      	mov	r5, r1
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	ee07 3a90 	vmov	s15, r3
 8001dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dfe:	ee17 0a90 	vmov	r0, s15
 8001e02:	f7fe fbb9 	bl	8000578 <__aeabi_f2d>
 8001e06:	a318      	add	r3, pc, #96	; (adr r3, 8001e68 <task_Motor_Left+0xf0>)
 8001e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0c:	f7fe fc0c 	bl	8000628 <__aeabi_dmul>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4620      	mov	r0, r4
 8001e16:	4629      	mov	r1, r5
 8001e18:	f7fe fa50 	bl	80002bc <__adddf3>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4610      	mov	r0, r2
 8001e22:	4619      	mov	r1, r3
 8001e24:	f7fe fe12 	bl	8000a4c <__aeabi_d2f>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	61fb      	str	r3, [r7, #28]

		motorLeft_SetDuty(100+(int)(up+ui));
 8001e2c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001e30:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e3c:	ee17 3a90 	vmov	r3, s15
 8001e40:	3364      	adds	r3, #100	; 0x64
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 fdb2 	bl	80029ac <motorLeft_SetDuty>

		xSemaphoreGive(xSem_Supervision);
 8001e48:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <task_Motor_Left+0xfc>)
 8001e4a:	6818      	ldr	r0, [r3, #0]
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	f007 ffd1 	bl	8009df8 <xQueueGenericSend>
		vTaskDelay(SAMPLING_PERIOD_ms);
 8001e56:	2005      	movs	r0, #5
 8001e58:	f008 feb0 	bl	800abbc <vTaskDelay>
		xQueueReceive(q_mot_L, &consigne, portMAX_DELAY);
 8001e5c:	e79c      	b.n	8001d98 <task_Motor_Left+0x20>
 8001e5e:	bf00      	nop
 8001e60:	d2f1a9fc 	.word	0xd2f1a9fc
 8001e64:	3f50624d 	.word	0x3f50624d
 8001e68:	47ae147b 	.word	0x47ae147b
 8001e6c:	3f547ae1 	.word	0x3f547ae1
 8001e70:	20004bc8 	.word	0x20004bc8
 8001e74:	20004bc4 	.word	0x20004bc4

08001e78 <task_Motor_Right>:
	}
}

//=========================================================================
static void task_Motor_Right(void *pvParameters)
{
 8001e78:	b5b0      	push	{r4, r5, r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	int16_t consigne = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	81fb      	strh	r3, [r7, #14]

	float ui= 0.0;
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
	float up = 0.0;
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	61bb      	str	r3, [r7, #24]
	int err = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
	int speed = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	613b      	str	r3, [r7, #16]

	for (;;)
	{
		xQueueReceive(q_mot_R, &consigne, portMAX_DELAY);
 8001e98:	4b35      	ldr	r3, [pc, #212]	; (8001f70 <task_Motor_Right+0xf8>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f107 010e 	add.w	r1, r7, #14
 8001ea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f008 f941 	bl	800a12c <xQueueReceive>

		speed = quadEncoder_GetSpeedR();
 8001eaa:	f000 fead 	bl	8002c08 <quadEncoder_GetSpeedR>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	613b      	str	r3, [r7, #16]
		err=consigne-speed;
 8001eb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	617b      	str	r3, [r7, #20]
		up=RKp*(float)err;
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	ee07 3a90 	vmov	s15, r3
 8001ec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec8:	ee17 0a90 	vmov	r0, s15
 8001ecc:	f7fe fb54 	bl	8000578 <__aeabi_f2d>
 8001ed0:	a323      	add	r3, pc, #140	; (adr r3, 8001f60 <task_Motor_Right+0xe8>)
 8001ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed6:	f7fe fba7 	bl	8000628 <__aeabi_dmul>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4610      	mov	r0, r2
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f7fe fdb3 	bl	8000a4c <__aeabi_d2f>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	61bb      	str	r3, [r7, #24]
		ui=ui+RKp*RKi*(float)err;
 8001eea:	69f8      	ldr	r0, [r7, #28]
 8001eec:	f7fe fb44 	bl	8000578 <__aeabi_f2d>
 8001ef0:	4604      	mov	r4, r0
 8001ef2:	460d      	mov	r5, r1
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	ee07 3a90 	vmov	s15, r3
 8001efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001efe:	ee17 0a90 	vmov	r0, s15
 8001f02:	f7fe fb39 	bl	8000578 <__aeabi_f2d>
 8001f06:	a318      	add	r3, pc, #96	; (adr r3, 8001f68 <task_Motor_Right+0xf0>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe fb8c 	bl	8000628 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4620      	mov	r0, r4
 8001f16:	4629      	mov	r1, r5
 8001f18:	f7fe f9d0 	bl	80002bc <__adddf3>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	f7fe fd92 	bl	8000a4c <__aeabi_d2f>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	61fb      	str	r3, [r7, #28]

		motorRight_SetDuty(100+(int)(up+ui));
 8001f2c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f30:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f3c:	ee17 3a90 	vmov	r3, s15
 8001f40:	3364      	adds	r3, #100	; 0x64
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 fd42 	bl	80029cc <motorRight_SetDuty>

		xSemaphoreGive(xSem_Supervision);
 8001f48:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <task_Motor_Right+0xfc>)
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2100      	movs	r1, #0
 8001f52:	f007 ff51 	bl	8009df8 <xQueueGenericSend>
		vTaskDelay(SAMPLING_PERIOD_ms);
 8001f56:	2005      	movs	r0, #5
 8001f58:	f008 fe30 	bl	800abbc <vTaskDelay>
		xQueueReceive(q_mot_R, &consigne, portMAX_DELAY);
 8001f5c:	e79c      	b.n	8001e98 <task_Motor_Right+0x20>
 8001f5e:	bf00      	nop
 8001f60:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f64:	3f50624d 	.word	0x3f50624d
 8001f68:	47ae147b 	.word	0x47ae147b
 8001f6c:	3f547ae1 	.word	0x3f547ae1
 8001f70:	20004bcc 	.word	0x20004bcc
 8001f74:	20004bc4 	.word	0x20004bc4

08001f78 <task_Supervision>:
}
#endif

//=========================================================================
static void task_Supervision(void *pvParameters)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08e      	sub	sp, #56	; 0x38
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
#elif SYNCHRO_EX == EXFINAL
	int16_t speedLeft;
	int16_t speedRight;

	int table[2];
	int vl53 = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	637b      	str	r3, [r7, #52]	; 0x34
#endif //MICROROS

	for (;;)
	{
		#if MICROROS
		if (uxQueueMessagesWaiting(qhMR_sub))
 8001f84:	4b9c      	ldr	r3, [pc, #624]	; (80021f8 <task_Supervision+0x280>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f008 fabb 	bl	800a504 <uxQueueMessagesWaiting>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d029      	beq.n	8001fe8 <task_Supervision+0x70>
		{
			xQueueReceive(qhMR_sub, &SubToMsg, portMAX_DELAY);
 8001f94:	4b98      	ldr	r3, [pc, #608]	; (80021f8 <task_Supervision+0x280>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f107 0114 	add.w	r1, r7, #20
 8001f9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f008 f8c3 	bl	800a12c <xQueueReceive>
			if (SubToMsg.mode >= 0 && SubToMsg.mode < LAST_MODE)
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	db05      	blt.n	8001fb8 <task_Supervision+0x40>
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	dc02      	bgt.n	8001fb8 <task_Supervision+0x40>
				mode = SubToMsg.mode;
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	4a91      	ldr	r2, [pc, #580]	; (80021fc <task_Supervision+0x284>)
 8001fb6:	6013      	str	r3, [r2, #0]
			if (SubToMsg.dir >= 0 && SubToMsg.dir < LAST_DIR)
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	db05      	blt.n	8001fca <task_Supervision+0x52>
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	dc02      	bgt.n	8001fca <task_Supervision+0x52>
				direction = SubToMsg.dir;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	4a8e      	ldr	r2, [pc, #568]	; (8002200 <task_Supervision+0x288>)
 8001fc8:	6013      	str	r3, [r2, #0]
			if (SubToMsg.speed > 0 && SubToMsg.speed < LAST_SPEED)
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	dd05      	ble.n	8001fdc <task_Supervision+0x64>
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	dc02      	bgt.n	8001fdc <task_Supervision+0x64>
				speed = SubToMsg.speed;
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	4a8a      	ldr	r2, [pc, #552]	; (8002204 <task_Supervision+0x28c>)
 8001fda:	6013      	str	r3, [r2, #0]
			x = SubToMsg.x;
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	4a8a      	ldr	r2, [pc, #552]	; (8002208 <task_Supervision+0x290>)
 8001fe0:	6013      	str	r3, [r2, #0]
			y = SubToMsg.y;
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	4a89      	ldr	r2, [pc, #548]	; (800220c <task_Supervision+0x294>)
 8001fe6:	6013      	str	r3, [r2, #0]
			printf("%cc%c[2J%c[0;0HVariable to make decision : \n\rDirection : %d\r\nMode: %d\r\nSpeed : %d\r\nX: %d\r\nY : %d\r\n", 0x1b, 0x1b, 0x1b, direction, mode, speed, x, y);
			#endif //DEBUG_PRINTF
		}
		#endif //MICROROS

		if (mode == MODE_ZIG)
 8001fe8:	4b84      	ldr	r3, [pc, #528]	; (80021fc <task_Supervision+0x284>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	f040 8113 	bne.w	8002218 <task_Supervision+0x2a0>
		{
			dir = 'N';
 8001ff2:	4b87      	ldr	r3, [pc, #540]	; (8002210 <task_Supervision+0x298>)
 8001ff4:	224e      	movs	r2, #78	; 0x4e
 8001ff6:	701a      	strb	r2, [r3, #0]
			obs = 0;
 8001ff8:	4b86      	ldr	r3, [pc, #536]	; (8002214 <task_Supervision+0x29c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
			switch(direction)
 8001ffe:	4b80      	ldr	r3, [pc, #512]	; (8002200 <task_Supervision+0x288>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b08      	cmp	r3, #8
 8002004:	f200 80f3 	bhi.w	80021ee <task_Supervision+0x276>
 8002008:	a201      	add	r2, pc, #4	; (adr r2, 8002010 <task_Supervision+0x98>)
 800200a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800200e:	bf00      	nop
 8002010:	0800203f 	.word	0x0800203f
 8002014:	080020e1 	.word	0x080020e1
 8002018:	08002071 	.word	0x08002071
 800201c:	080020ab 	.word	0x080020ab
 8002020:	08002035 	.word	0x08002035
 8002024:	08002117 	.word	0x08002117
 8002028:	08002149 	.word	0x08002149
 800202c:	0800217b 	.word	0x0800217b
 8002030:	080021b5 	.word	0x080021b5
			{
				case STOP:
					speedLeft = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 800203c:	e191      	b.n	8002362 <task_Supervision+0x3ea>
				case AVANT:
					speedLeft = VITESSE_KART*speed;
 800203e:	4b71      	ldr	r3, [pc, #452]	; (8002204 <task_Supervision+0x28c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	b29b      	uxth	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	0152      	lsls	r2, r2, #5
 8002048:	1ad2      	subs	r2, r2, r3
 800204a:	0092      	lsls	r2, r2, #2
 800204c:	4413      	add	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	b29b      	uxth	r3, r3
 8002052:	b21b      	sxth	r3, r3
 8002054:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = VITESSE_KART*speed;
 8002056:	4b6b      	ldr	r3, [pc, #428]	; (8002204 <task_Supervision+0x28c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	b29b      	uxth	r3, r3
 800205c:	461a      	mov	r2, r3
 800205e:	0152      	lsls	r2, r2, #5
 8002060:	1ad2      	subs	r2, r2, r3
 8002062:	0092      	lsls	r2, r2, #2
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	b29b      	uxth	r3, r3
 800206a:	b21b      	sxth	r3, r3
 800206c:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 800206e:	e178      	b.n	8002362 <task_Supervision+0x3ea>
				case RECULE:
					speedLeft = -VITESSE_KART*speed;
 8002070:	4b64      	ldr	r3, [pc, #400]	; (8002204 <task_Supervision+0x28c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	b29b      	uxth	r3, r3
 8002076:	461a      	mov	r2, r3
 8002078:	01d2      	lsls	r2, r2, #7
 800207a:	1ad2      	subs	r2, r2, r3
 800207c:	0192      	lsls	r2, r2, #6
 800207e:	441a      	add	r2, r3
 8002080:	0052      	lsls	r2, r2, #1
 8002082:	4413      	add	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	b29b      	uxth	r3, r3
 8002088:	b21b      	sxth	r3, r3
 800208a:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = -VITESSE_KART*speed;
 800208c:	4b5d      	ldr	r3, [pc, #372]	; (8002204 <task_Supervision+0x28c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	b29b      	uxth	r3, r3
 8002092:	461a      	mov	r2, r3
 8002094:	01d2      	lsls	r2, r2, #7
 8002096:	1ad2      	subs	r2, r2, r3
 8002098:	0192      	lsls	r2, r2, #6
 800209a:	441a      	add	r2, r3
 800209c:	0052      	lsls	r2, r2, #1
 800209e:	4413      	add	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	b21b      	sxth	r3, r3
 80020a6:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 80020a8:	e15b      	b.n	8002362 <task_Supervision+0x3ea>
				case DROITE:
					speedLeft = VITESSE_KART*speed;
 80020aa:	4b56      	ldr	r3, [pc, #344]	; (8002204 <task_Supervision+0x28c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	461a      	mov	r2, r3
 80020b2:	0152      	lsls	r2, r2, #5
 80020b4:	1ad2      	subs	r2, r2, r3
 80020b6:	0092      	lsls	r2, r2, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	b29b      	uxth	r3, r3
 80020be:	b21b      	sxth	r3, r3
 80020c0:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = -VITESSE_KART*speed;
 80020c2:	4b50      	ldr	r3, [pc, #320]	; (8002204 <task_Supervision+0x28c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	01d2      	lsls	r2, r2, #7
 80020cc:	1ad2      	subs	r2, r2, r3
 80020ce:	0192      	lsls	r2, r2, #6
 80020d0:	441a      	add	r2, r3
 80020d2:	0052      	lsls	r2, r2, #1
 80020d4:	4413      	add	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	b29b      	uxth	r3, r3
 80020da:	b21b      	sxth	r3, r3
 80020dc:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 80020de:	e140      	b.n	8002362 <task_Supervision+0x3ea>
				case GAUCHE:
					speedLeft = -VITESSE_KART*speed;
 80020e0:	4b48      	ldr	r3, [pc, #288]	; (8002204 <task_Supervision+0x28c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	01d2      	lsls	r2, r2, #7
 80020ea:	1ad2      	subs	r2, r2, r3
 80020ec:	0192      	lsls	r2, r2, #6
 80020ee:	441a      	add	r2, r3
 80020f0:	0052      	lsls	r2, r2, #1
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	b21b      	sxth	r3, r3
 80020fa:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = VITESSE_KART*speed;
 80020fc:	4b41      	ldr	r3, [pc, #260]	; (8002204 <task_Supervision+0x28c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	b29b      	uxth	r3, r3
 8002102:	461a      	mov	r2, r3
 8002104:	0152      	lsls	r2, r2, #5
 8002106:	1ad2      	subs	r2, r2, r3
 8002108:	0092      	lsls	r2, r2, #2
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	b29b      	uxth	r3, r3
 8002110:	b21b      	sxth	r3, r3
 8002112:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 8002114:	e125      	b.n	8002362 <task_Supervision+0x3ea>
				case AVANT_GAUCHE:
					speedLeft = (VITESSE_KART/2)*speed;
 8002116:	4b3b      	ldr	r3, [pc, #236]	; (8002204 <task_Supervision+0x28c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	b29b      	uxth	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	0152      	lsls	r2, r2, #5
 8002120:	1ad2      	subs	r2, r2, r3
 8002122:	0092      	lsls	r2, r2, #2
 8002124:	4413      	add	r3, r2
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	b29b      	uxth	r3, r3
 800212a:	b21b      	sxth	r3, r3
 800212c:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = VITESSE_KART*speed;
 800212e:	4b35      	ldr	r3, [pc, #212]	; (8002204 <task_Supervision+0x28c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	b29b      	uxth	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	0152      	lsls	r2, r2, #5
 8002138:	1ad2      	subs	r2, r2, r3
 800213a:	0092      	lsls	r2, r2, #2
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	b29b      	uxth	r3, r3
 8002142:	b21b      	sxth	r3, r3
 8002144:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 8002146:	e10c      	b.n	8002362 <task_Supervision+0x3ea>
				case AVANT_DROITE:
					speedLeft = VITESSE_KART*speed;
 8002148:	4b2e      	ldr	r3, [pc, #184]	; (8002204 <task_Supervision+0x28c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	b29b      	uxth	r3, r3
 800214e:	461a      	mov	r2, r3
 8002150:	0152      	lsls	r2, r2, #5
 8002152:	1ad2      	subs	r2, r2, r3
 8002154:	0092      	lsls	r2, r2, #2
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	b29b      	uxth	r3, r3
 800215c:	b21b      	sxth	r3, r3
 800215e:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = (VITESSE_KART/2)*speed;
 8002160:	4b28      	ldr	r3, [pc, #160]	; (8002204 <task_Supervision+0x28c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	b29b      	uxth	r3, r3
 8002166:	461a      	mov	r2, r3
 8002168:	0152      	lsls	r2, r2, #5
 800216a:	1ad2      	subs	r2, r2, r3
 800216c:	0092      	lsls	r2, r2, #2
 800216e:	4413      	add	r3, r2
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	b29b      	uxth	r3, r3
 8002174:	b21b      	sxth	r3, r3
 8002176:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 8002178:	e0f3      	b.n	8002362 <task_Supervision+0x3ea>
				case RECULE_GAUCHE:
					speedLeft = -VITESSE_KART*speed;
 800217a:	4b22      	ldr	r3, [pc, #136]	; (8002204 <task_Supervision+0x28c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	b29b      	uxth	r3, r3
 8002180:	461a      	mov	r2, r3
 8002182:	01d2      	lsls	r2, r2, #7
 8002184:	1ad2      	subs	r2, r2, r3
 8002186:	0192      	lsls	r2, r2, #6
 8002188:	441a      	add	r2, r3
 800218a:	0052      	lsls	r2, r2, #1
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	b29b      	uxth	r3, r3
 8002192:	b21b      	sxth	r3, r3
 8002194:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = (-VITESSE_KART/2)*speed;
 8002196:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <task_Supervision+0x28c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	b29b      	uxth	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	0212      	lsls	r2, r2, #8
 80021a0:	1ad2      	subs	r2, r2, r3
 80021a2:	0192      	lsls	r2, r2, #6
 80021a4:	441a      	add	r2, r3
 80021a6:	0052      	lsls	r2, r2, #1
 80021a8:	4413      	add	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	b21b      	sxth	r3, r3
 80021b0:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 80021b2:	e0d6      	b.n	8002362 <task_Supervision+0x3ea>
				case RECULE_DROITE:
					speedLeft = (-VITESSE_KART/2)*speed;
 80021b4:	4b13      	ldr	r3, [pc, #76]	; (8002204 <task_Supervision+0x28c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	461a      	mov	r2, r3
 80021bc:	0212      	lsls	r2, r2, #8
 80021be:	1ad2      	subs	r2, r2, r3
 80021c0:	0192      	lsls	r2, r2, #6
 80021c2:	441a      	add	r2, r3
 80021c4:	0052      	lsls	r2, r2, #1
 80021c6:	4413      	add	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	b21b      	sxth	r3, r3
 80021ce:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = -VITESSE_KART*speed;
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <task_Supervision+0x28c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	461a      	mov	r2, r3
 80021d8:	01d2      	lsls	r2, r2, #7
 80021da:	1ad2      	subs	r2, r2, r3
 80021dc:	0192      	lsls	r2, r2, #6
 80021de:	441a      	add	r2, r3
 80021e0:	0052      	lsls	r2, r2, #1
 80021e2:	4413      	add	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	b21b      	sxth	r3, r3
 80021ea:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 80021ec:	e0b9      	b.n	8002362 <task_Supervision+0x3ea>
				default:
					speedLeft = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 80021f6:	e0b4      	b.n	8002362 <task_Supervision+0x3ea>
 80021f8:	20004bd0 	.word	0x20004bd0
 80021fc:	20000000 	.word	0x20000000
 8002200:	20000004 	.word	0x20000004
 8002204:	20000008 	.word	0x20000008
 8002208:	20004be0 	.word	0x20004be0
 800220c:	20004be4 	.word	0x20004be4
 8002210:	2000000c 	.word	0x2000000c
 8002214:	20004be8 	.word	0x20004be8
			}
		}
		else if (mode == MODE_OBS)
 8002218:	4b71      	ldr	r3, [pc, #452]	; (80023e0 <task_Supervision+0x468>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d169      	bne.n	80022f4 <task_Supervision+0x37c>
		{
			captDistIR_Get(table);
 8002220:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe fe61 	bl	8000eec <captDistIR_Get>
				dir = 'S';
				obs = 1;
			}
			else
			#endif //VL53
			if (table[0] > 1000 || table[1] > 1000)
 800222a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002230:	dc03      	bgt.n	800223a <task_Supervision+0x2c2>
 8002232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002234:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002238:	dd4f      	ble.n	80022da <task_Supervision+0x362>
			{
				if (obs > 10)
 800223a:	4b6a      	ldr	r3, [pc, #424]	; (80023e4 <task_Supervision+0x46c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2b0a      	cmp	r3, #10
 8002240:	dd09      	ble.n	8002256 <task_Supervision+0x2de>
				{
					speedLeft = VITESSE_OBS;
 8002242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002246:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = -VITESSE_OBS/2;
 8002248:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 800224c:	863b      	strh	r3, [r7, #48]	; 0x30
					dir = 'G';
 800224e:	4b66      	ldr	r3, [pc, #408]	; (80023e8 <task_Supervision+0x470>)
 8002250:	2247      	movs	r2, #71	; 0x47
 8002252:	701a      	strb	r2, [r3, #0]
				if (obs > 10)
 8002254:	e084      	b.n	8002360 <task_Supervision+0x3e8>
				}
				else
				{
					speedLeft = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	863b      	strh	r3, [r7, #48]	; 0x30

					if (table[0] > table[1] && table[0] > 1000)
 800225e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002262:	429a      	cmp	r2, r3
 8002264:	dd18      	ble.n	8002298 <task_Supervision+0x320>
 8002266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002268:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800226c:	dd14      	ble.n	8002298 <task_Supervision+0x320>
					{
						dir = 'G';
 800226e:	4b5e      	ldr	r3, [pc, #376]	; (80023e8 <task_Supervision+0x470>)
 8002270:	2247      	movs	r2, #71	; 0x47
 8002272:	701a      	strb	r2, [r3, #0]
						speedLeft = VITESSE_OBS/2;
 8002274:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002278:	867b      	strh	r3, [r7, #50]	; 0x32
						speedRight = -VITESSE_OBS/2;
 800227a:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 800227e:	863b      	strh	r3, [r7, #48]	; 0x30
						if (obs%2 == 0)
 8002280:	4b58      	ldr	r3, [pc, #352]	; (80023e4 <task_Supervision+0x46c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b00      	cmp	r3, #0
 800228a:	d125      	bne.n	80022d8 <task_Supervision+0x360>
							obs++;
 800228c:	4b55      	ldr	r3, [pc, #340]	; (80023e4 <task_Supervision+0x46c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	3301      	adds	r3, #1
 8002292:	4a54      	ldr	r2, [pc, #336]	; (80023e4 <task_Supervision+0x46c>)
 8002294:	6013      	str	r3, [r2, #0]
						if (obs%2 == 0)
 8002296:	e01f      	b.n	80022d8 <task_Supervision+0x360>
					}
					else if (table[0] < table[1] && table[1] > 1000)
 8002298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800229a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229c:	429a      	cmp	r2, r3
 800229e:	da5f      	bge.n	8002360 <task_Supervision+0x3e8>
 80022a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022a6:	dd5b      	ble.n	8002360 <task_Supervision+0x3e8>
					{
						dir = 'D';
 80022a8:	4b4f      	ldr	r3, [pc, #316]	; (80023e8 <task_Supervision+0x470>)
 80022aa:	2244      	movs	r2, #68	; 0x44
 80022ac:	701a      	strb	r2, [r3, #0]
						speedLeft = -VITESSE_OBS/2;
 80022ae:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 80022b2:	867b      	strh	r3, [r7, #50]	; 0x32
						speedRight = VITESSE_OBS/2;
 80022b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80022b8:	863b      	strh	r3, [r7, #48]	; 0x30
						if (obs%2 == 1)
 80022ba:	4b4a      	ldr	r3, [pc, #296]	; (80023e4 <task_Supervision+0x46c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	bfb8      	it	lt
 80022c6:	425b      	neglt	r3, r3
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d149      	bne.n	8002360 <task_Supervision+0x3e8>
							obs++;
 80022cc:	4b45      	ldr	r3, [pc, #276]	; (80023e4 <task_Supervision+0x46c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	3301      	adds	r3, #1
 80022d2:	4a44      	ldr	r2, [pc, #272]	; (80023e4 <task_Supervision+0x46c>)
 80022d4:	6013      	str	r3, [r2, #0]
				if (obs > 10)
 80022d6:	e043      	b.n	8002360 <task_Supervision+0x3e8>
 80022d8:	e042      	b.n	8002360 <task_Supervision+0x3e8>
					}
				}
			}
			else
			{
				speedLeft = VITESSE_OBS;
 80022da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022de:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = VITESSE_OBS;
 80022e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e4:	863b      	strh	r3, [r7, #48]	; 0x30
				dir = 'F';
 80022e6:	4b40      	ldr	r3, [pc, #256]	; (80023e8 <task_Supervision+0x470>)
 80022e8:	2246      	movs	r2, #70	; 0x46
 80022ea:	701a      	strb	r2, [r3, #0]
				obs = 0;
 80022ec:	4b3d      	ldr	r3, [pc, #244]	; (80023e4 <task_Supervision+0x46c>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	e036      	b.n	8002362 <task_Supervision+0x3ea>
			}
		}
		else if (mode == MODE_CAM)
 80022f4:	4b3a      	ldr	r3, [pc, #232]	; (80023e0 <task_Supervision+0x468>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d132      	bne.n	8002362 <task_Supervision+0x3ea>
		{
			dir = 'N';
 80022fc:	4b3a      	ldr	r3, [pc, #232]	; (80023e8 <task_Supervision+0x470>)
 80022fe:	224e      	movs	r2, #78	; 0x4e
 8002300:	701a      	strb	r2, [r3, #0]
			obs = 0;
 8002302:	4b38      	ldr	r3, [pc, #224]	; (80023e4 <task_Supervision+0x46c>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

			if(x < 0 || y < 0){
 8002308:	4b38      	ldr	r3, [pc, #224]	; (80023ec <task_Supervision+0x474>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	db03      	blt.n	8002318 <task_Supervision+0x3a0>
 8002310:	4b37      	ldr	r3, [pc, #220]	; (80023f0 <task_Supervision+0x478>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	da04      	bge.n	8002322 <task_Supervision+0x3aa>
				speedLeft = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	863b      	strh	r3, [r7, #48]	; 0x30
 8002320:	e01f      	b.n	8002362 <task_Supervision+0x3ea>
			}
			else {
				speedLeft = VITESSE_CAM - ((CAMERA_X_MAX/2 - x))/3; // (int) (((float) ((x-CAMERA_X_MAX/2)/CAMERA_X_MAX))*500);
 8002322:	4b32      	ldr	r3, [pc, #200]	; (80023ec <task_Supervision+0x474>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800232a:	4a32      	ldr	r2, [pc, #200]	; (80023f4 <task_Supervision+0x47c>)
 800232c:	fb82 1203 	smull	r1, r2, r2, r3
 8002330:	17db      	asrs	r3, r3, #31
 8002332:	1a9b      	subs	r3, r3, r2
 8002334:	b29b      	uxth	r3, r3
 8002336:	f203 134d 	addw	r3, r3, #333	; 0x14d
 800233a:	b29b      	uxth	r3, r3
 800233c:	b21b      	sxth	r3, r3
 800233e:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = VITESSE_CAM + ((CAMERA_X_MAX/2 - x))/3; // (int) (((float) (x/CAMERA_X_MAX))*500);
 8002340:	4b2a      	ldr	r3, [pc, #168]	; (80023ec <task_Supervision+0x474>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8002348:	4a2a      	ldr	r2, [pc, #168]	; (80023f4 <task_Supervision+0x47c>)
 800234a:	fb82 1203 	smull	r1, r2, r2, r3
 800234e:	17db      	asrs	r3, r3, #31
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	b29b      	uxth	r3, r3
 8002354:	f203 134d 	addw	r3, r3, #333	; 0x14d
 8002358:	b29b      	uxth	r3, r3
 800235a:	b21b      	sxth	r3, r3
 800235c:	863b      	strh	r3, [r7, #48]	; 0x30
 800235e:	e000      	b.n	8002362 <task_Supervision+0x3ea>
				if (obs > 10)
 8002360:	bf00      	nop

		#if DEBUG_MOTOR
		printf("Motor L : %d || R : %d\r\n", speedLeft, speedRight);
		#endif

		xQueueSend( q_mot_L, ( void * ) &speedLeft,  portMAX_DELAY );
 8002362:	4b25      	ldr	r3, [pc, #148]	; (80023f8 <task_Supervision+0x480>)
 8002364:	6818      	ldr	r0, [r3, #0]
 8002366:	f107 0132 	add.w	r1, r7, #50	; 0x32
 800236a:	2300      	movs	r3, #0
 800236c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002370:	f007 fd42 	bl	8009df8 <xQueueGenericSend>
		xSemaphoreTake( xSem_Supervision, portMAX_DELAY );
 8002374:	4b21      	ldr	r3, [pc, #132]	; (80023fc <task_Supervision+0x484>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800237c:	4618      	mov	r0, r3
 800237e:	f007 ffb5 	bl	800a2ec <xQueueSemaphoreTake>

		xQueueSend( q_mot_R, ( void * ) &speedRight,  portMAX_DELAY );
 8002382:	4b1f      	ldr	r3, [pc, #124]	; (8002400 <task_Supervision+0x488>)
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800238a:	2300      	movs	r3, #0
 800238c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002390:	f007 fd32 	bl	8009df8 <xQueueGenericSend>
		xSemaphoreTake( xSem_Supervision, portMAX_DELAY );
 8002394:	4b19      	ldr	r3, [pc, #100]	; (80023fc <task_Supervision+0x484>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800239c:	4618      	mov	r0, r3
 800239e:	f007 ffa5 	bl	800a2ec <xQueueSemaphoreTake>

	#if MICROROS
		MsgToPub.dir = dir;
 80023a2:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <task_Supervision+0x470>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	723b      	strb	r3, [r7, #8]
		MsgToPub.mode = speedLeft; //mode;
 80023a8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80023ac:	60fb      	str	r3, [r7, #12]
		MsgToPub.speed = speedRight; //speed;
 80023ae:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80023b2:	613b      	str	r3, [r7, #16]
		if (!uxQueueMessagesWaiting(qhMR_pub))
 80023b4:	4b13      	ldr	r3, [pc, #76]	; (8002404 <task_Supervision+0x48c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f008 f8a3 	bl	800a504 <uxQueueMessagesWaiting>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d108      	bne.n	80023d6 <task_Supervision+0x45e>
			xQueueSend(qhMR_pub, ( void * ) &MsgToPub, portMAX_DELAY);
 80023c4:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <task_Supervision+0x48c>)
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	f107 0108 	add.w	r1, r7, #8
 80023cc:	2300      	movs	r3, #0
 80023ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023d2:	f007 fd11 	bl	8009df8 <xQueueGenericSend>
			pxMessage.command=dir;
			xQueueSend( qhLCD, ( void * ) &pxMessage, portMAX_DELAY);
		}
	#endif //LCD

		vTaskDelay(SAMPLING_PERIOD_ms);
 80023d6:	2005      	movs	r0, #5
 80023d8:	f008 fbf0 	bl	800abbc <vTaskDelay>
		if (uxQueueMessagesWaiting(qhMR_sub))
 80023dc:	e5d2      	b.n	8001f84 <task_Supervision+0xc>
 80023de:	bf00      	nop
 80023e0:	20000000 	.word	0x20000000
 80023e4:	20004be8 	.word	0x20004be8
 80023e8:	2000000c 	.word	0x2000000c
 80023ec:	20004be0 	.word	0x20004be0
 80023f0:	20004be4 	.word	0x20004be4
 80023f4:	55555556 	.word	0x55555556
 80023f8:	20004bc8 	.word	0x20004bc8
 80023fc:	20004bc4 	.word	0x20004bc4
 8002400:	20004bcc 	.word	0x20004bcc
 8002404:	20004bd4 	.word	0x20004bd4

08002408 <main>:
#endif //SYNCHRO_EX
}

//=========================================================================
int main(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af02      	add	r7, sp, #8
  HAL_Init();
 800240e:	f001 fa91 	bl	8003934 <HAL_Init>
  SystemClock_Config();
 8002412:	f001 f9fb 	bl	800380c <SystemClock_Config>
  MX_GPIO_Init();
 8002416:	f7ff f8b1 	bl	800157c <MX_GPIO_Init>
  MX_DMA_Init();
 800241a:	f7ff f9cb 	bl	80017b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800241e:	f7ff f99f 	bl	8001760 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002422:	f7ff f945 	bl	80016b0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002426:	f7ff f971 	bl	800170c <MX_USART1_UART_Init>

  RetargetInit(&huart2); //make printf and scanf work with uart2
 800242a:	4845      	ldr	r0, [pc, #276]	; (8002540 <main+0x138>)
 800242c:	f000 fc8a 	bl	8002d44 <RetargetInit>
  printf("%cc%c[2J%c[0;0HTitouan//Jeremy//Louanne\r\n", 0x1b, 0x1b, 0x1b);
 8002430:	231b      	movs	r3, #27
 8002432:	221b      	movs	r2, #27
 8002434:	211b      	movs	r1, #27
 8002436:	4843      	ldr	r0, [pc, #268]	; (8002544 <main+0x13c>)
 8002438:	f015 fdf6 	bl	8018028 <iprintf>

  motorCommand_Init();
 800243c:	f000 fa5c 	bl	80028f8 <motorCommand_Init>
  quadEncoder_Init();
 8002440:	f000 fad4 	bl	80029ec <quadEncoder_Init>
  captDistIR_Init();
 8002444:	f7fe fd20 	bl	8000e88 <captDistIR_Init>

  HAL_Delay(500);
 8002448:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800244c:	f001 fab4 	bl	80039b8 <HAL_Delay>
  groveLCD_setColor(1);
  groveLCD_term_printf("Titouan//Jeremy//Louanne");
  HAL_Delay(1000);
#endif

  osKernelInitialize();
 8002450:	f007 fa46 	bl	80098e0 <osKernelInitialize>
	xTaskCreate(test_vl53, ( const portCHAR * ) "test_vl53", 128 /* stack size */, NULL, tskIDLE_PRIORITY, NULL);
#elif SYNCHRO_EX == EXTEST_MICROROS
    xTaskCreate(microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL, tskIDLE_PRIORITY, NULL);
#elif SYNCHRO_EX == EXFINAL
	#if MICROROS
    xTaskCreate(microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL, 24, NULL);
 8002454:	2300      	movs	r3, #0
 8002456:	9301      	str	r3, [sp, #4]
 8002458:	2318      	movs	r3, #24
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	2300      	movs	r3, #0
 800245e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002462:	4939      	ldr	r1, [pc, #228]	; (8002548 <main+0x140>)
 8002464:	4839      	ldr	r0, [pc, #228]	; (800254c <main+0x144>)
 8002466:	f008 fa4e 	bl	800a906 <xTaskCreate>
	#endif //MICROROS
    xTaskCreate(task_Supervision, ( const portCHAR * ) "task Supervision", 128 /* stack size */, NULL, 27, NULL);
 800246a:	2300      	movs	r3, #0
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	231b      	movs	r3, #27
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	2300      	movs	r3, #0
 8002474:	2280      	movs	r2, #128	; 0x80
 8002476:	4936      	ldr	r1, [pc, #216]	; (8002550 <main+0x148>)
 8002478:	4836      	ldr	r0, [pc, #216]	; (8002554 <main+0x14c>)
 800247a:	f008 fa44 	bl	800a906 <xTaskCreate>
	xTaskCreate(task_Motor_Left, ( const portCHAR * ) "task Motor Left", 128 /* stack size */, NULL, 25, NULL);
 800247e:	2300      	movs	r3, #0
 8002480:	9301      	str	r3, [sp, #4]
 8002482:	2319      	movs	r3, #25
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	2300      	movs	r3, #0
 8002488:	2280      	movs	r2, #128	; 0x80
 800248a:	4933      	ldr	r1, [pc, #204]	; (8002558 <main+0x150>)
 800248c:	4833      	ldr	r0, [pc, #204]	; (800255c <main+0x154>)
 800248e:	f008 fa3a 	bl	800a906 <xTaskCreate>
	xTaskCreate(task_Motor_Right, ( const portCHAR * ) "task Motor Right", 128 /* stack size */, NULL, 26, NULL);
 8002492:	2300      	movs	r3, #0
 8002494:	9301      	str	r3, [sp, #4]
 8002496:	231a      	movs	r3, #26
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	2300      	movs	r3, #0
 800249c:	2280      	movs	r2, #128	; 0x80
 800249e:	4930      	ldr	r1, [pc, #192]	; (8002560 <main+0x158>)
 80024a0:	4830      	ldr	r0, [pc, #192]	; (8002564 <main+0x15c>)
 80024a2:	f008 fa30 	bl	800a906 <xTaskCreate>
	#if LCD
	xTaskCreate(task_Grove_LCD, ( const portCHAR * ) "task LCD", 128 /* stack size */, NULL, 23, NULL);
	#endif
#endif

    vSemaphoreCreateBinary(xSem_Supervision);
 80024a6:	2203      	movs	r2, #3
 80024a8:	2100      	movs	r1, #0
 80024aa:	2001      	movs	r0, #1
 80024ac:	f007 fc46 	bl	8009d3c <xQueueGenericCreate>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4a2d      	ldr	r2, [pc, #180]	; (8002568 <main+0x160>)
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	4b2c      	ldr	r3, [pc, #176]	; (8002568 <main+0x160>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d006      	beq.n	80024cc <main+0xc4>
 80024be:	4b2a      	ldr	r3, [pc, #168]	; (8002568 <main+0x160>)
 80024c0:	6818      	ldr	r0, [r3, #0]
 80024c2:	2300      	movs	r3, #0
 80024c4:	2200      	movs	r2, #0
 80024c6:	2100      	movs	r1, #0
 80024c8:	f007 fc96 	bl	8009df8 <xQueueGenericSend>
    xSemaphoreTake( xSem_Supervision, portMAX_DELAY );
 80024cc:	4b26      	ldr	r3, [pc, #152]	; (8002568 <main+0x160>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024d4:	4618      	mov	r0, r3
 80024d6:	f007 ff09 	bl	800a2ec <xQueueSemaphoreTake>

    q_mot_L = xQueueCreate(1, sizeof(int16_t));
 80024da:	2200      	movs	r2, #0
 80024dc:	2102      	movs	r1, #2
 80024de:	2001      	movs	r0, #1
 80024e0:	f007 fc2c 	bl	8009d3c <xQueueGenericCreate>
 80024e4:	4603      	mov	r3, r0
 80024e6:	4a21      	ldr	r2, [pc, #132]	; (800256c <main+0x164>)
 80024e8:	6013      	str	r3, [r2, #0]
    q_mot_R = xQueueCreate(1, sizeof(int16_t));
 80024ea:	2200      	movs	r2, #0
 80024ec:	2102      	movs	r1, #2
 80024ee:	2001      	movs	r0, #1
 80024f0:	f007 fc24 	bl	8009d3c <xQueueGenericCreate>
 80024f4:	4603      	mov	r3, r0
 80024f6:	4a1e      	ldr	r2, [pc, #120]	; (8002570 <main+0x168>)
 80024f8:	6013      	str	r3, [r2, #0]
    qhVl53 = xQueueCreate(1, sizeof(int));
 80024fa:	2200      	movs	r2, #0
 80024fc:	2104      	movs	r1, #4
 80024fe:	2001      	movs	r0, #1
 8002500:	f007 fc1c 	bl	8009d3c <xQueueGenericCreate>
 8002504:	4603      	mov	r3, r0
 8002506:	4a1b      	ldr	r2, [pc, #108]	; (8002574 <main+0x16c>)
 8002508:	6013      	str	r3, [r2, #0]

    qhMR_sub = xQueueCreate(1, sizeof(MicroRosSubMsg));
 800250a:	2200      	movs	r2, #0
 800250c:	2114      	movs	r1, #20
 800250e:	2001      	movs	r0, #1
 8002510:	f007 fc14 	bl	8009d3c <xQueueGenericCreate>
 8002514:	4603      	mov	r3, r0
 8002516:	4a18      	ldr	r2, [pc, #96]	; (8002578 <main+0x170>)
 8002518:	6013      	str	r3, [r2, #0]
    qhMR_pub = xQueueCreate(1, sizeof(MicroRosPubMsg));
 800251a:	2200      	movs	r2, #0
 800251c:	210c      	movs	r1, #12
 800251e:	2001      	movs	r0, #1
 8002520:	f007 fc0c 	bl	8009d3c <xQueueGenericCreate>
 8002524:	4603      	mov	r3, r0
 8002526:	4a15      	ldr	r2, [pc, #84]	; (800257c <main+0x174>)
 8002528:	6013      	str	r3, [r2, #0]
    qhLCD = xQueueCreate(1, sizeof(AMessage));
 800252a:	2200      	movs	r2, #0
 800252c:	2108      	movs	r1, #8
 800252e:	2001      	movs	r0, #1
 8002530:	f007 fc04 	bl	8009d3c <xQueueGenericCreate>
 8002534:	4603      	mov	r3, r0
 8002536:	4a12      	ldr	r2, [pc, #72]	; (8002580 <main+0x178>)
 8002538:	6013      	str	r3, [r2, #0]

  osKernelStart();
 800253a:	f007 f9f5 	bl	8009928 <osKernelStart>
  while(1)
 800253e:	e7fe      	b.n	800253e <main+0x136>
 8002540:	20004a00 	.word	0x20004a00
 8002544:	08019564 	.word	0x08019564
 8002548:	08019590 	.word	0x08019590
 800254c:	0800188d 	.word	0x0800188d
 8002550:	080195a0 	.word	0x080195a0
 8002554:	08001f79 	.word	0x08001f79
 8002558:	080195b4 	.word	0x080195b4
 800255c:	08001d79 	.word	0x08001d79
 8002560:	080195c4 	.word	0x080195c4
 8002564:	08001e79 	.word	0x08001e79
 8002568:	20004bc4 	.word	0x20004bc4
 800256c:	20004bc8 	.word	0x20004bc8
 8002570:	20004bcc 	.word	0x20004bcc
 8002574:	20004bdc 	.word	0x20004bdc
 8002578:	20004bd0 	.word	0x20004bd0
 800257c:	20004bd4 	.word	0x20004bd4
 8002580:	20004bd8 	.word	0x20004bd8

08002584 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a04      	ldr	r2, [pc, #16]	; (80025a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d101      	bne.n	800259a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002596:	f001 f9ef 	bl	8003978 <HAL_IncTick>
  }
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40000800 	.word	0x40000800

080025a8 <Error_Handler>:
//=========================================================================
void Error_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80025ac:	b672      	cpsid	i
}
 80025ae:	bf00      	nop
  __disable_irq();
  while (1)
 80025b0:	e7fe      	b.n	80025b0 <Error_Handler+0x8>
	...

080025b4 <createPublisher>:
void createPublisher(rcl_publisher_t* publisher,
	const rcl_node_t* node,
	const rosidl_message_type_support_t* type_support,
	const char* topic_name,
	std_msgs__msg__Int32* msg)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
 80025c0:	603b      	str	r3, [r7, #0]
	rcl_ret_t ret = rclc_publisher_init_default(publisher, node, type_support, topic_name);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	68b9      	ldr	r1, [r7, #8]
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f00a ffd3 	bl	800d574 <rclc_publisher_init_default>
 80025ce:	6178      	str	r0, [r7, #20]
	printf("Publisher %s is created with result %d\r\n", topic_name, (int)ret);
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	6839      	ldr	r1, [r7, #0]
 80025d4:	4804      	ldr	r0, [pc, #16]	; (80025e8 <createPublisher+0x34>)
 80025d6:	f015 fd27 	bl	8018028 <iprintf>
#if STRING == 1
	(*msg).data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
	(*msg).data.size = 0;
	(*msg).data.capacity = ARRAY_LEN;
#else
	(*msg).data = 0;
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
#endif

}
 80025e0:	bf00      	nop
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	08019640 	.word	0x08019640

080025ec <createSubscriber>:
void createSubscriber(rcl_subscription_t* subscription,
	const rcl_node_t* node,
	const rosidl_message_type_support_t* type_support,
	const char* topic_name,
	std_msgs__msg__Int32* msg)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	603b      	str	r3, [r7, #0]
	*subscription = rcl_get_zero_initialized_subscription();
 80025fa:	f00a fa73 	bl	800cae4 <rcl_get_zero_initialized_subscription>
 80025fe:	4602      	mov	r2, r0
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	601a      	str	r2, [r3, #0]

	rcl_ret_t ret = rclc_subscription_init_default(subscription, node,
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	68b9      	ldr	r1, [r7, #8]
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f00a ffe6 	bl	800d5dc <rclc_subscription_init_default>
 8002610:	6178      	str	r0, [r7, #20]
		type_support, topic_name);
	printf("Subscription %s is created with result %d\r\n", topic_name, (int)ret);
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	6839      	ldr	r1, [r7, #0]
 8002616:	4805      	ldr	r0, [pc, #20]	; (800262c <createSubscriber+0x40>)
 8002618:	f015 fd06 	bl	8018028 <iprintf>
#if STRING == 1
	(*msg).data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
	(*msg).data.size = 0;
	(*msg).data.capacity = ARRAY_LEN;
#else
	(*msg).data = 0;
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
#endif
}
 8002622:	bf00      	nop
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	0801966c 	.word	0x0801966c

08002630 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800263a:	4b0c      	ldr	r3, [pc, #48]	; (800266c <microros_allocate+0x3c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4413      	add	r3, r2
 8002644:	461a      	mov	r2, r3
 8002646:	4b09      	ldr	r3, [pc, #36]	; (800266c <microros_allocate+0x3c>)
 8002648:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800264a:	4b09      	ldr	r3, [pc, #36]	; (8002670 <microros_allocate+0x40>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4413      	add	r3, r2
 8002654:	461a      	mov	r2, r3
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <microros_allocate+0x40>)
 8002658:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7fe fc8a 	bl	8000f74 <pvPortMallocMicroROS>
 8002660:	4603      	mov	r3, r0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20004bec 	.word	0x20004bec
 8002670:	20004bf0 	.word	0x20004bf0

08002674 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00c      	beq.n	800269e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7fe fd93 	bl	80011b0 <getBlockSize>
 800268a:	4603      	mov	r3, r0
 800268c:	4a06      	ldr	r2, [pc, #24]	; (80026a8 <microros_deallocate+0x34>)
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	461a      	mov	r2, r3
 8002694:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <microros_deallocate+0x34>)
 8002696:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7fe fd2f 	bl	80010fc <vPortFreeMicroROS>
  }
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20004bf0 	.word	0x20004bf0

080026ac <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80026b8:	4b15      	ldr	r3, [pc, #84]	; (8002710 <microros_reallocate+0x64>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	4413      	add	r3, r2
 80026c2:	461a      	mov	r2, r3
 80026c4:	4b12      	ldr	r3, [pc, #72]	; (8002710 <microros_reallocate+0x64>)
 80026c6:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <microros_reallocate+0x68>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	4413      	add	r3, r2
 80026d2:	461a      	mov	r2, r3
 80026d4:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <microros_reallocate+0x68>)
 80026d6:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d104      	bne.n	80026e8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80026de:	68b8      	ldr	r0, [r7, #8]
 80026e0:	f7fe fc48 	bl	8000f74 <pvPortMallocMicroROS>
 80026e4:	4603      	mov	r3, r0
 80026e6:	e00e      	b.n	8002706 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f7fe fd61 	bl	80011b0 <getBlockSize>
 80026ee:	4603      	mov	r3, r0
 80026f0:	4a08      	ldr	r2, [pc, #32]	; (8002714 <microros_reallocate+0x68>)
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	461a      	mov	r2, r3
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <microros_reallocate+0x68>)
 80026fa:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f7fe fd74 	bl	80011ec <pvPortReallocMicroROS>
 8002704:	4603      	mov	r3, r0
  }
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20004bec 	.word	0x20004bec
 8002714:	20004bf0 	.word	0x20004bf0

08002718 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	fb02 f303 	mul.w	r3, r2, r3
 800272c:	4a0c      	ldr	r2, [pc, #48]	; (8002760 <microros_zero_allocate+0x48>)
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	4413      	add	r3, r2
 8002732:	461a      	mov	r2, r3
 8002734:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <microros_zero_allocate+0x48>)
 8002736:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	fb02 f303 	mul.w	r3, r2, r3
 8002740:	4a08      	ldr	r2, [pc, #32]	; (8002764 <microros_zero_allocate+0x4c>)
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	4413      	add	r3, r2
 8002746:	461a      	mov	r2, r3
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <microros_zero_allocate+0x4c>)
 800274a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f7fe fd86 	bl	8001260 <pvPortCallocMicroROS>
 8002754:	4603      	mov	r3, r0
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20004bec 	.word	0x20004bec
 8002764:	20004bf0 	.word	0x20004bf0

08002768 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002768:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800276c:	b086      	sub	sp, #24
 800276e:	af00      	add	r7, sp, #0
 8002770:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800277a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800277e:	a320      	add	r3, pc, #128	; (adr r3, 8002800 <UTILS_NanosecondsToTimespec+0x98>)
 8002780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002784:	f7fe f9b2 	bl	8000aec <__aeabi_ldivmod>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002792:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002796:	a31a      	add	r3, pc, #104	; (adr r3, 8002800 <UTILS_NanosecondsToTimespec+0x98>)
 8002798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279c:	f7fe f9a6 	bl	8000aec <__aeabi_ldivmod>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	da20      	bge.n	80027ee <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	4a11      	ldr	r2, [pc, #68]	; (80027f8 <UTILS_NanosecondsToTimespec+0x90>)
 80027b2:	fb82 1203 	smull	r1, r2, r2, r3
 80027b6:	1712      	asrs	r2, r2, #28
 80027b8:	17db      	asrs	r3, r3, #31
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	3301      	adds	r3, #1
 80027be:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c6:	6979      	ldr	r1, [r7, #20]
 80027c8:	17c8      	asrs	r0, r1, #31
 80027ca:	460c      	mov	r4, r1
 80027cc:	4605      	mov	r5, r0
 80027ce:	ebb2 0804 	subs.w	r8, r2, r4
 80027d2:	eb63 0905 	sbc.w	r9, r3, r5
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	4906      	ldr	r1, [pc, #24]	; (80027fc <UTILS_NanosecondsToTimespec+0x94>)
 80027e4:	fb01 f303 	mul.w	r3, r1, r3
 80027e8:	441a      	add	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	609a      	str	r2, [r3, #8]
    }
}
 80027ee:	bf00      	nop
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80027f8:	44b82fa1 	.word	0x44b82fa1
 80027fc:	3b9aca00 	.word	0x3b9aca00
 8002800:	3b9aca00 	.word	0x3b9aca00
 8002804:	00000000 	.word	0x00000000

08002808 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800280c:	b08e      	sub	sp, #56	; 0x38
 800280e:	af00      	add	r7, sp, #0
 8002810:	6278      	str	r0, [r7, #36]	; 0x24
 8002812:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002814:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002818:	2300      	movs	r3, #0
 800281a:	6013      	str	r3, [r2, #0]
 800281c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	f04f 0300 	mov.w	r3, #0
 8002826:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800282a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800282e:	4618      	mov	r0, r3
 8002830:	f008 fcf6 	bl	800b220 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002836:	17da      	asrs	r2, r3, #31
 8002838:	61bb      	str	r3, [r7, #24]
 800283a:	61fa      	str	r2, [r7, #28]
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	69b9      	ldr	r1, [r7, #24]
 8002846:	000b      	movs	r3, r1
 8002848:	2200      	movs	r2, #0
 800284a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800284e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002850:	2200      	movs	r2, #0
 8002852:	461c      	mov	r4, r3
 8002854:	4615      	mov	r5, r2
 8002856:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800285a:	1911      	adds	r1, r2, r4
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	416b      	adcs	r3, r5
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002866:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800286a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	f04f 0400 	mov.w	r4, #0
 8002876:	f04f 0500 	mov.w	r5, #0
 800287a:	015d      	lsls	r5, r3, #5
 800287c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002880:	0154      	lsls	r4, r2, #5
 8002882:	4622      	mov	r2, r4
 8002884:	462b      	mov	r3, r5
 8002886:	ebb2 0800 	subs.w	r8, r2, r0
 800288a:	eb63 0901 	sbc.w	r9, r3, r1
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	f04f 0300 	mov.w	r3, #0
 8002896:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800289a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800289e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80028a2:	4690      	mov	r8, r2
 80028a4:	4699      	mov	r9, r3
 80028a6:	eb18 0a00 	adds.w	sl, r8, r0
 80028aa:	eb49 0b01 	adc.w	fp, r9, r1
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028ba:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028be:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028c2:	ebb2 040a 	subs.w	r4, r2, sl
 80028c6:	603c      	str	r4, [r7, #0]
 80028c8:	eb63 030b 	sbc.w	r3, r3, fp
 80028cc:	607b      	str	r3, [r7, #4]
 80028ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028d2:	4623      	mov	r3, r4
 80028d4:	181b      	adds	r3, r3, r0
 80028d6:	613b      	str	r3, [r7, #16]
 80028d8:	462b      	mov	r3, r5
 80028da:	eb41 0303 	adc.w	r3, r1, r3
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	6a3a      	ldr	r2, [r7, #32]
 80028e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028e6:	f7ff ff3f 	bl	8002768 <UTILS_NanosecondsToTimespec>

    return 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	4618      	mov	r0, r3
 80028ee:	3738      	adds	r7, #56	; 0x38
 80028f0:	46bd      	mov	sp, r7
 80028f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080028f8 <motorCommand_Init>:
// TIMER 3 (PWM)  : CH1 et CH2
// ENABLE : Sortie Logique (GPIO) PA7
//=================================================================

void motorCommand_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
	unsigned int uwPrescalerValue = 0;
 80028fe:	2300      	movs	r3, #0
 8002900:	607b      	str	r3, [r7, #4]

	/* Compute the prescaler value to have TIM4 counter clock equal to 10MHz */
	  uwPrescalerValue = (unsigned int) ((SystemCoreClock / 10000000) - 1);
 8002902:	4b24      	ldr	r3, [pc, #144]	; (8002994 <motorCommand_Init+0x9c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a24      	ldr	r2, [pc, #144]	; (8002998 <motorCommand_Init+0xa0>)
 8002908:	fba2 2303 	umull	r2, r3, r2, r3
 800290c:	0d9b      	lsrs	r3, r3, #22
 800290e:	3b01      	subs	r3, #1
 8002910:	607b      	str	r3, [r7, #4]
	  TimHandle.Instance = TIM3;
 8002912:	4b22      	ldr	r3, [pc, #136]	; (800299c <motorCommand_Init+0xa4>)
 8002914:	4a22      	ldr	r2, [pc, #136]	; (80029a0 <motorCommand_Init+0xa8>)
 8002916:	601a      	str	r2, [r3, #0]
	  TimHandle.Init.Period = 200 - 1; // 100MHz/200=50kHz
 8002918:	4b20      	ldr	r3, [pc, #128]	; (800299c <motorCommand_Init+0xa4>)
 800291a:	22c7      	movs	r2, #199	; 0xc7
 800291c:	60da      	str	r2, [r3, #12]
	  TimHandle.Init.Prescaler = uwPrescalerValue;
 800291e:	4a1f      	ldr	r2, [pc, #124]	; (800299c <motorCommand_Init+0xa4>)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6053      	str	r3, [r2, #4]
	  TimHandle.Init.ClockDivision = 0;
 8002924:	4b1d      	ldr	r3, [pc, #116]	; (800299c <motorCommand_Init+0xa4>)
 8002926:	2200      	movs	r2, #0
 8002928:	611a      	str	r2, [r3, #16]
	  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800292a:	4b1c      	ldr	r3, [pc, #112]	; (800299c <motorCommand_Init+0xa4>)
 800292c:	2200      	movs	r2, #0
 800292e:	609a      	str	r2, [r3, #8]

	  HAL_TIM_Base_Init(&TimHandle);
 8002930:	481a      	ldr	r0, [pc, #104]	; (800299c <motorCommand_Init+0xa4>)
 8002932:	f004 fc9f 	bl	8007274 <HAL_TIM_Base_Init>

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002936:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <motorCommand_Init+0xac>)
 8002938:	2260      	movs	r2, #96	; 0x60
 800293a:	601a      	str	r2, [r3, #0]
	  sConfigOC.Pulse = 0x5;// Specifies the pulse value to be loaded into the Capture Compare Register. This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF */
 800293c:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <motorCommand_Init+0xac>)
 800293e:	2205      	movs	r2, #5
 8002940:	605a      	str	r2, [r3, #4]

	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002942:	4b18      	ldr	r3, [pc, #96]	; (80029a4 <motorCommand_Init+0xac>)
 8002944:	2200      	movs	r2, #0
 8002946:	609a      	str	r2, [r3, #8]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002948:	4b16      	ldr	r3, [pc, #88]	; (80029a4 <motorCommand_Init+0xac>)
 800294a:	2200      	movs	r2, #0
 800294c:	611a      	str	r2, [r3, #16]

	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_1);
 800294e:	2200      	movs	r2, #0
 8002950:	4914      	ldr	r1, [pc, #80]	; (80029a4 <motorCommand_Init+0xac>)
 8002952:	4812      	ldr	r0, [pc, #72]	; (800299c <motorCommand_Init+0xa4>)
 8002954:	f005 f840 	bl	80079d8 <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_2);
 8002958:	2204      	movs	r2, #4
 800295a:	4912      	ldr	r1, [pc, #72]	; (80029a4 <motorCommand_Init+0xac>)
 800295c:	480f      	ldr	r0, [pc, #60]	; (800299c <motorCommand_Init+0xa4>)
 800295e:	f005 f83b 	bl	80079d8 <HAL_TIM_PWM_ConfigChannel>

	 // CHANGEMENT DU RAPPORT CYCLIQUE
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, 100);	// 100 : moteurs au repos
 8002962:	4b0e      	ldr	r3, [pc, #56]	; (800299c <motorCommand_Init+0xa4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2264      	movs	r2, #100	; 0x64
 8002968:	635a      	str	r2, [r3, #52]	; 0x34
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, 100);
 800296a:	4b0c      	ldr	r3, [pc, #48]	; (800299c <motorCommand_Init+0xa4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2264      	movs	r2, #100	; 0x64
 8002970:	639a      	str	r2, [r3, #56]	; 0x38

	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_1);	// MOTOR RIGHT
 8002972:	2100      	movs	r1, #0
 8002974:	4809      	ldr	r0, [pc, #36]	; (800299c <motorCommand_Init+0xa4>)
 8002976:	f004 fd39 	bl	80073ec <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_2); // MOTOR LEFT
 800297a:	2104      	movs	r1, #4
 800297c:	4807      	ldr	r0, [pc, #28]	; (800299c <motorCommand_Init+0xa4>)
 800297e:	f004 fd35 	bl	80073ec <HAL_TIM_PWM_Start>

	  // ENABLE MOTEUR (SI INVERSEUR)
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8002982:	2200      	movs	r2, #0
 8002984:	2108      	movs	r1, #8
 8002986:	4808      	ldr	r0, [pc, #32]	; (80029a8 <motorCommand_Init+0xb0>)
 8002988:	f002 f980 	bl	8004c8c <HAL_GPIO_WritePin>
}
 800298c:	bf00      	nop
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20000010 	.word	0x20000010
 8002998:	6b5fca6b 	.word	0x6b5fca6b
 800299c:	20004bf4 	.word	0x20004bf4
 80029a0:	40000400 	.word	0x40000400
 80029a4:	20004c3c 	.word	0x20004c3c
 80029a8:	40020400 	.word	0x40020400

080029ac <motorLeft_SetDuty>:

//=================================================================
//			SET DUTY CYCLE LEFT
//=================================================================
void motorLeft_SetDuty(int duty)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, duty);
 80029b4:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <motorLeft_SetDuty+0x1c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	635a      	str	r2, [r3, #52]	; 0x34
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	20004bf4 	.word	0x20004bf4

080029cc <motorRight_SetDuty>:
//=================================================================
//			SET DUTY CYCLE RIGHT
//=================================================================
void motorRight_SetDuty(int duty)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, duty);
 80029d4:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <motorRight_SetDuty+0x1c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	639a      	str	r2, [r3, #56]	; 0x38
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	20004bf4 	.word	0x20004bf4

080029ec <quadEncoder_Init>:
//================================================================
//		TIMER INIT
//================================================================

void quadEncoder_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08a      	sub	sp, #40	; 0x28
 80029f0:	af00      	add	r7, sp, #0
	TIM_Encoder_InitTypeDef sConfig;
	//--------------------------------------------------
	// TIMER 1
	//--------------------------------------------------
	TimEncoderHandleLeft.Instance = TIM1;
 80029f2:	4b35      	ldr	r3, [pc, #212]	; (8002ac8 <quadEncoder_Init+0xdc>)
 80029f4:	4a35      	ldr	r2, [pc, #212]	; (8002acc <quadEncoder_Init+0xe0>)
 80029f6:	601a      	str	r2, [r3, #0]
	TimEncoderHandleLeft.Init.Prescaler = 0;
 80029f8:	4b33      	ldr	r3, [pc, #204]	; (8002ac8 <quadEncoder_Init+0xdc>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	605a      	str	r2, [r3, #4]
	TimEncoderHandleLeft.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029fe:	4b32      	ldr	r3, [pc, #200]	; (8002ac8 <quadEncoder_Init+0xdc>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	609a      	str	r2, [r3, #8]
	TimEncoderHandleLeft.Init.Period = COUNT_PER_ROUND*4;
 8002a04:	4b30      	ldr	r3, [pc, #192]	; (8002ac8 <quadEncoder_Init+0xdc>)
 8002a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0a:	60da      	str	r2, [r3, #12]
	TimEncoderHandleLeft.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a0c:	4b2e      	ldr	r3, [pc, #184]	; (8002ac8 <quadEncoder_Init+0xdc>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a12:	2303      	movs	r3, #3
 8002a14:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002a16:	2300      	movs	r3, #0
 8002a18:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8002a1e:	2308      	movs	r3, #8
 8002a20:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 8002a22:	230f      	movs	r3, #15
 8002a24:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8002a2e:	2308      	movs	r3, #8
 8002a30:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 8002a32:	230f      	movs	r3, #15
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleLeft, &sConfig);
 8002a36:	1d3b      	adds	r3, r7, #4
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4823      	ldr	r0, [pc, #140]	; (8002ac8 <quadEncoder_Init+0xdc>)
 8002a3c:	f004 fd86 	bl	800754c <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);
 8002a40:	4b21      	ldr	r3, [pc, #132]	; (8002ac8 <quadEncoder_Init+0xdc>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2200      	movs	r2, #0
 8002a46:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 8002a48:	2100      	movs	r1, #0
 8002a4a:	481f      	ldr	r0, [pc, #124]	; (8002ac8 <quadEncoder_Init+0xdc>)
 8002a4c:	f004 fe2e 	bl	80076ac <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 8002a50:	2104      	movs	r1, #4
 8002a52:	481d      	ldr	r0, [pc, #116]	; (8002ac8 <quadEncoder_Init+0xdc>)
 8002a54:	f004 fe2a 	bl	80076ac <HAL_TIM_Encoder_Start>

	//--------------------------------------------------
	// TIMER 2
	//--------------------------------------------------
	TimEncoderHandleRight.Instance = TIM2;
 8002a58:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <quadEncoder_Init+0xe4>)
 8002a5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a5e:	601a      	str	r2, [r3, #0]
	TimEncoderHandleRight.Init.Prescaler = 0;
 8002a60:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <quadEncoder_Init+0xe4>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	605a      	str	r2, [r3, #4]
	TimEncoderHandleRight.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a66:	4b1a      	ldr	r3, [pc, #104]	; (8002ad0 <quadEncoder_Init+0xe4>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	609a      	str	r2, [r3, #8]
	TimEncoderHandleRight.Init.Period = COUNT_PER_ROUND*4;
 8002a6c:	4b18      	ldr	r3, [pc, #96]	; (8002ad0 <quadEncoder_Init+0xe4>)
 8002a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a72:	60da      	str	r2, [r3, #12]
	TimEncoderHandleRight.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a74:	4b16      	ldr	r3, [pc, #88]	; (8002ad0 <quadEncoder_Init+0xe4>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a82:	2301      	movs	r3, #1
 8002a84:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8002a86:	2308      	movs	r3, #8
 8002a88:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 8002a8a:	230f      	movs	r3, #15
 8002a8c:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 8002a92:	2301      	movs	r3, #1
 8002a94:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8002a96:	2308      	movs	r3, #8
 8002a98:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 8002a9a:	230f      	movs	r3, #15
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleRight, &sConfig);
 8002a9e:	1d3b      	adds	r3, r7, #4
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	480b      	ldr	r0, [pc, #44]	; (8002ad0 <quadEncoder_Init+0xe4>)
 8002aa4:	f004 fd52 	bl	800754c <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);
 8002aa8:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <quadEncoder_Init+0xe4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2200      	movs	r2, #0
 8002aae:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4807      	ldr	r0, [pc, #28]	; (8002ad0 <quadEncoder_Init+0xe4>)
 8002ab4:	f004 fdfa 	bl	80076ac <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 8002ab8:	2104      	movs	r1, #4
 8002aba:	4805      	ldr	r0, [pc, #20]	; (8002ad0 <quadEncoder_Init+0xe4>)
 8002abc:	f004 fdf6 	bl	80076ac <HAL_TIM_Encoder_Start>
}
 8002ac0:	bf00      	nop
 8002ac2:	3728      	adds	r7, #40	; 0x28
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	20004c58 	.word	0x20004c58
 8002acc:	40010000 	.word	0x40010000
 8002ad0:	20004ca0 	.word	0x20004ca0

08002ad4 <quadEncoder_PosCalcL>:
//================================================================
//		POSITION LEFT CALC
//================================================================

void quadEncoder_PosCalcL(int* AngPos)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]

int POSCNTcopy = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]
POSCNTcopy = (int)TIM1->CNT;
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <quadEncoder_PosCalcL+0x40>)
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	60fb      	str	r3, [r7, #12]
AngPos[1] = AngPos[0];
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	601a      	str	r2, [r3, #0]
AngPos[0] = (unsigned int)(((unsigned long)POSCNTcopy * COEFF)/1000); // 0 <= POSCNT <= 4999 to 0 <= AngPos <= 32767
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f641 129b 	movw	r2, #6555	; 0x199b
 8002af6:	fb02 f303 	mul.w	r3, r2, r3
 8002afa:	4a07      	ldr	r2, [pc, #28]	; (8002b18 <quadEncoder_PosCalcL+0x44>)
 8002afc:	fba2 2303 	umull	r2, r3, r2, r3
 8002b00:	099b      	lsrs	r3, r3, #6
 8002b02:	461a      	mov	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	601a      	str	r2, [r3, #0]
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	40010000 	.word	0x40010000
 8002b18:	10624dd3 	.word	0x10624dd3

08002b1c <quadEncoder_PosCalcR>:
//================================================================
//		POSITION RIGHT CALC
//================================================================

void quadEncoder_PosCalcR(int* AngPos)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]

int POSCNTcopy = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]
POSCNTcopy = (int)TIM2->CNT;
 8002b28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	60fb      	str	r3, [r7, #12]
AngPos[1] = AngPos[0];
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3304      	adds	r3, #4
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	601a      	str	r2, [r3, #0]
AngPos[0] = (unsigned int)(((unsigned long)POSCNTcopy * COEFF)/1000); // 0 <= POSCNT <= 4999 to 0 <= AngPos <= 32767
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f641 129b 	movw	r2, #6555	; 0x199b
 8002b40:	fb02 f303 	mul.w	r3, r2, r3
 8002b44:	4a06      	ldr	r2, [pc, #24]	; (8002b60 <quadEncoder_PosCalcR+0x44>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	099b      	lsrs	r3, r3, #6
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	601a      	str	r2, [r3, #0]
}
 8002b52:	bf00      	nop
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	10624dd3 	.word	0x10624dd3

08002b64 <quadEncoder_GetSpeedL>:
//		SPEED LEFT
//--> must be called every Te
//================================================================

int16_t quadEncoder_GetSpeedL(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
	static int AngPos[2] = {0,0};
	static int16_t SpeedL=0;

	quadEncoder_PosCalcL(AngPos);
 8002b68:	4824      	ldr	r0, [pc, #144]	; (8002bfc <quadEncoder_GetSpeedL+0x98>)
 8002b6a:	f7ff ffb3 	bl	8002ad4 <quadEncoder_PosCalcL>
	SpeedL = AngPos[0] - AngPos[1];
 8002b6e:	4b23      	ldr	r3, [pc, #140]	; (8002bfc <quadEncoder_GetSpeedL+0x98>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	4b21      	ldr	r3, [pc, #132]	; (8002bfc <quadEncoder_GetSpeedL+0x98>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	b21a      	sxth	r2, r3
 8002b80:	4b1f      	ldr	r3, [pc, #124]	; (8002c00 <quadEncoder_GetSpeedL+0x9c>)
 8002b82:	801a      	strh	r2, [r3, #0]
	if (SpeedL >= 0)
 8002b84:	4b1e      	ldr	r3, [pc, #120]	; (8002c00 <quadEncoder_GetSpeedL+0x9c>)
 8002b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	db10      	blt.n	8002bb0 <quadEncoder_GetSpeedL+0x4c>
	{
		if (SpeedL >= HALF_MAX_COUNT)
 8002b8e:	4b1c      	ldr	r3, [pc, #112]	; (8002c00 <quadEncoder_GetSpeedL+0x9c>)
 8002b90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b98:	db1a      	blt.n	8002bd0 <quadEncoder_GetSpeedL+0x6c>
			{
			SpeedL = SpeedL - MAX_COUNT;
 8002b9a:	4b19      	ldr	r3, [pc, #100]	; (8002c00 <quadEncoder_GetSpeedL+0x9c>)
 8002b9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	b21a      	sxth	r2, r3
 8002baa:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <quadEncoder_GetSpeedL+0x9c>)
 8002bac:	801a      	strh	r2, [r3, #0]
 8002bae:	e00f      	b.n	8002bd0 <quadEncoder_GetSpeedL+0x6c>
			}
	}
	else
	{
		if (SpeedL < -HALF_MAX_COUNT)
 8002bb0:	4b13      	ldr	r3, [pc, #76]	; (8002c00 <quadEncoder_GetSpeedL+0x9c>)
 8002bb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bb6:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8002bba:	da09      	bge.n	8002bd0 <quadEncoder_GetSpeedL+0x6c>
			{
			SpeedL = SpeedL + MAX_COUNT;
 8002bbc:	4b10      	ldr	r3, [pc, #64]	; (8002c00 <quadEncoder_GetSpeedL+0x9c>)
 8002bbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	b21a      	sxth	r2, r3
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <quadEncoder_GetSpeedL+0x9c>)
 8002bce:	801a      	strh	r2, [r3, #0]
	// 1 tour = 32767
	// Nbre de Tours pendant Te: DELTA_pos/32767
	// Nbre de Tours pendant 1s (Te en ms) : (DELTA_pos/32767)*(1000/Te)
	// Nbre de Tours par minute : : (DELTA_pos/32767)*((60*1000)/Te)

	SpeedL=(SpeedL*60*1000)/(32767*TE_ms);
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <quadEncoder_GetSpeedL+0x9c>)
 8002bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002bdc:	fb02 f303 	mul.w	r3, r2, r3
 8002be0:	4a08      	ldr	r2, [pc, #32]	; (8002c04 <quadEncoder_GetSpeedL+0xa0>)
 8002be2:	fb82 1203 	smull	r1, r2, r2, r3
 8002be6:	1412      	asrs	r2, r2, #16
 8002be8:	17db      	asrs	r3, r3, #31
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	b21a      	sxth	r2, r3
 8002bee:	4b04      	ldr	r3, [pc, #16]	; (8002c00 <quadEncoder_GetSpeedL+0x9c>)
 8002bf0:	801a      	strh	r2, [r3, #0]
	return SpeedL;
 8002bf2:	4b03      	ldr	r3, [pc, #12]	; (8002c00 <quadEncoder_GetSpeedL+0x9c>)
 8002bf4:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20004cf0 	.word	0x20004cf0
 8002c00:	20004cf8 	.word	0x20004cf8
 8002c04:	66673335 	.word	0x66673335

08002c08 <quadEncoder_GetSpeedR>:
//		SPEED RIGHT
//-->  must be called every Te
//================================================================

int16_t quadEncoder_GetSpeedR(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
	static int AngPos[2] = {0,0};
	static int16_t SpeedR=0;


	quadEncoder_PosCalcR(AngPos);
 8002c0c:	4824      	ldr	r0, [pc, #144]	; (8002ca0 <quadEncoder_GetSpeedR+0x98>)
 8002c0e:	f7ff ff85 	bl	8002b1c <quadEncoder_PosCalcR>
	SpeedR = AngPos[0] - AngPos[1];
 8002c12:	4b23      	ldr	r3, [pc, #140]	; (8002ca0 <quadEncoder_GetSpeedR+0x98>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <quadEncoder_GetSpeedR+0x98>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	b21a      	sxth	r2, r3
 8002c24:	4b1f      	ldr	r3, [pc, #124]	; (8002ca4 <quadEncoder_GetSpeedR+0x9c>)
 8002c26:	801a      	strh	r2, [r3, #0]
	if (SpeedR >= 0)
 8002c28:	4b1e      	ldr	r3, [pc, #120]	; (8002ca4 <quadEncoder_GetSpeedR+0x9c>)
 8002c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	db10      	blt.n	8002c54 <quadEncoder_GetSpeedR+0x4c>
	{
		if (SpeedR >= HALF_MAX_COUNT)
 8002c32:	4b1c      	ldr	r3, [pc, #112]	; (8002ca4 <quadEncoder_GetSpeedR+0x9c>)
 8002c34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c3c:	db1a      	blt.n	8002c74 <quadEncoder_GetSpeedR+0x6c>
			{
			SpeedR = SpeedR - MAX_COUNT;
 8002c3e:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <quadEncoder_GetSpeedR+0x9c>)
 8002c40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	b21a      	sxth	r2, r3
 8002c4e:	4b15      	ldr	r3, [pc, #84]	; (8002ca4 <quadEncoder_GetSpeedR+0x9c>)
 8002c50:	801a      	strh	r2, [r3, #0]
 8002c52:	e00f      	b.n	8002c74 <quadEncoder_GetSpeedR+0x6c>
			}
	}
	else
	{
		if (SpeedR < -HALF_MAX_COUNT)
 8002c54:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <quadEncoder_GetSpeedR+0x9c>)
 8002c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c5a:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8002c5e:	da09      	bge.n	8002c74 <quadEncoder_GetSpeedR+0x6c>
			{
			SpeedR = SpeedR + MAX_COUNT;
 8002c60:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <quadEncoder_GetSpeedR+0x9c>)
 8002c62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	b21a      	sxth	r2, r3
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <quadEncoder_GetSpeedR+0x9c>)
 8002c72:	801a      	strh	r2, [r3, #0]
	// 1 tour = 32767
	// Nbre de Tours pendant Te: DELTA_pos/32767
	// Nbre de Tours pendant 1s (Te en ms) : (DELTA_pos/32767)*(1000/Te)
	// Nbre de Tours par minute : : (DELTA_pos/32767)*((60*1000)/Te)

	SpeedR=(SpeedR*60*1000)/(32767*TE_ms);
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <quadEncoder_GetSpeedR+0x9c>)
 8002c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002c80:	fb02 f303 	mul.w	r3, r2, r3
 8002c84:	4a08      	ldr	r2, [pc, #32]	; (8002ca8 <quadEncoder_GetSpeedR+0xa0>)
 8002c86:	fb82 1203 	smull	r1, r2, r2, r3
 8002c8a:	1412      	asrs	r2, r2, #16
 8002c8c:	17db      	asrs	r3, r3, #31
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	b21a      	sxth	r2, r3
 8002c92:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <quadEncoder_GetSpeedR+0x9c>)
 8002c94:	801a      	strh	r2, [r3, #0]
	return SpeedR;
 8002c96:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <quadEncoder_GetSpeedR+0x9c>)
 8002c98:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20004cfc 	.word	0x20004cfc
 8002ca4:	20004d04 	.word	0x20004d04
 8002ca8:	66673335 	.word	0x66673335

08002cac <quadEncoder_CallbackIndexL>:
//================================================================
//		MAJ index Left
//================================================================

void quadEncoder_CallbackIndexL()
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleLeft)==1)
 8002cb0:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <quadEncoder_CallbackIndexL+0x44>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0310 	and.w	r3, r3, #16
 8002cba:	2b10      	cmp	r3, #16
 8002cbc:	d105      	bne.n	8002cca <quadEncoder_CallbackIndexL+0x1e>
				{
					indexL--;
 8002cbe:	4b0d      	ldr	r3, [pc, #52]	; (8002cf4 <quadEncoder_CallbackIndexL+0x48>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	4a0b      	ldr	r2, [pc, #44]	; (8002cf4 <quadEncoder_CallbackIndexL+0x48>)
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	e004      	b.n	8002cd4 <quadEncoder_CallbackIndexL+0x28>
				}
				else
				{
					indexL++;
 8002cca:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <quadEncoder_CallbackIndexL+0x48>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	4a08      	ldr	r2, [pc, #32]	; (8002cf4 <quadEncoder_CallbackIndexL+0x48>)
 8002cd2:	6013      	str	r3, [r2, #0]
				}


				__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);		// RAZ Counter
 8002cd4:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <quadEncoder_CallbackIndexL+0x44>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 8002cdc:	2100      	movs	r1, #0
 8002cde:	4804      	ldr	r0, [pc, #16]	; (8002cf0 <quadEncoder_CallbackIndexL+0x44>)
 8002ce0:	f004 fce4 	bl	80076ac <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 8002ce4:	2104      	movs	r1, #4
 8002ce6:	4802      	ldr	r0, [pc, #8]	; (8002cf0 <quadEncoder_CallbackIndexL+0x44>)
 8002ce8:	f004 fce0 	bl	80076ac <HAL_TIM_Encoder_Start>

}
 8002cec:	bf00      	nop
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20004c58 	.word	0x20004c58
 8002cf4:	20004ce8 	.word	0x20004ce8

08002cf8 <quadEncoder_CallbackIndexR>:
//================================================================
//		MAJ index Right
//================================================================

void quadEncoder_CallbackIndexR()
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleRight)==1)
 8002cfc:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <quadEncoder_CallbackIndexR+0x44>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b10      	cmp	r3, #16
 8002d08:	d105      	bne.n	8002d16 <quadEncoder_CallbackIndexR+0x1e>
				{
					indexR--;
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	; (8002d40 <quadEncoder_CallbackIndexR+0x48>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	4a0b      	ldr	r2, [pc, #44]	; (8002d40 <quadEncoder_CallbackIndexR+0x48>)
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	e004      	b.n	8002d20 <quadEncoder_CallbackIndexR+0x28>

				}
				else
				{
					indexR++;
 8002d16:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <quadEncoder_CallbackIndexR+0x48>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	4a08      	ldr	r2, [pc, #32]	; (8002d40 <quadEncoder_CallbackIndexR+0x48>)
 8002d1e:	6013      	str	r3, [r2, #0]
				}

				__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);			// RAZ Counter
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <quadEncoder_CallbackIndexR+0x44>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2200      	movs	r2, #0
 8002d26:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4804      	ldr	r0, [pc, #16]	; (8002d3c <quadEncoder_CallbackIndexR+0x44>)
 8002d2c:	f004 fcbe 	bl	80076ac <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 8002d30:	2104      	movs	r1, #4
 8002d32:	4802      	ldr	r0, [pc, #8]	; (8002d3c <quadEncoder_CallbackIndexR+0x44>)
 8002d34:	f004 fcba 	bl	80076ac <HAL_TIM_Encoder_Start>

}
 8002d38:	bf00      	nop
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20004ca0 	.word	0x20004ca0
 8002d40:	20004cec 	.word	0x20004cec

08002d44 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002d4c:	4a07      	ldr	r2, [pc, #28]	; (8002d6c <RetargetInit+0x28>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002d52:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <RetargetInit+0x2c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6898      	ldr	r0, [r3, #8]
 8002d58:	2300      	movs	r3, #0
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	f015 f975 	bl	801804c <setvbuf>
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20004d08 	.word	0x20004d08
 8002d70:	200000d0 	.word	0x200000d0

08002d74 <_isatty>:

int _isatty(int fd) {
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	db04      	blt.n	8002d8c <_isatty+0x18>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	dc01      	bgt.n	8002d8c <_isatty+0x18>
    return 1;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e005      	b.n	8002d98 <_isatty+0x24>

  errno = EBADF;
 8002d8c:	f015 fc56 	bl	801863c <__errno>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2209      	movs	r2, #9
 8002d94:	601a      	str	r2, [r3, #0]
  return 0;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <_write>:

int _write(int fd, char* ptr, int len) {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d002      	beq.n	8002db8 <_write+0x18>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d111      	bne.n	8002ddc <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002db8:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <_write+0x54>)
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dc4:	68b9      	ldr	r1, [r7, #8]
 8002dc6:	f005 f983 	bl	80080d0 <HAL_UART_Transmit>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002dce:	7dfb      	ldrb	r3, [r7, #23]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <_write+0x38>
      return len;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	e008      	b.n	8002dea <_write+0x4a>
    else
      return EIO;
 8002dd8:	2305      	movs	r3, #5
 8002dda:	e006      	b.n	8002dea <_write+0x4a>
  }
  errno = EBADF;
 8002ddc:	f015 fc2e 	bl	801863c <__errno>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2209      	movs	r2, #9
 8002de4:	601a      	str	r2, [r3, #0]
  return -1;
 8002de6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20004d08 	.word	0x20004d08

08002df8 <_close>:

int _close(int fd) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	db04      	blt.n	8002e10 <_close+0x18>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	dc01      	bgt.n	8002e10 <_close+0x18>
    return 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	e006      	b.n	8002e1e <_close+0x26>

  errno = EBADF;
 8002e10:	f015 fc14 	bl	801863c <__errno>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2209      	movs	r2, #9
 8002e18:	601a      	str	r2, [r3, #0]
  return -1;
 8002e1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	60f8      	str	r0, [r7, #12]
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8002e32:	f015 fc03 	bl	801863c <__errno>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2209      	movs	r2, #9
 8002e3a:	601a      	str	r2, [r3, #0]
  return -1;
 8002e3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <_read>:

int _read(int fd, char* ptr, int len) {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d110      	bne.n	8002e7c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002e5a:	4b0e      	ldr	r3, [pc, #56]	; (8002e94 <_read+0x4c>)
 8002e5c:	6818      	ldr	r0, [r3, #0]
 8002e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e62:	2201      	movs	r2, #1
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	f005 f9c5 	bl	80081f4 <HAL_UART_Receive>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <_read+0x30>
      return 1;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e008      	b.n	8002e8a <_read+0x42>
    else
      return EIO;
 8002e78:	2305      	movs	r3, #5
 8002e7a:	e006      	b.n	8002e8a <_read+0x42>
  }
  errno = EBADF;
 8002e7c:	f015 fbde 	bl	801863c <__errno>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2209      	movs	r2, #9
 8002e84:	601a      	str	r2, [r3, #0]
  return -1;
 8002e86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20004d08 	.word	0x20004d08

08002e98 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	db08      	blt.n	8002eba <_fstat+0x22>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	dc05      	bgt.n	8002eba <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eb4:	605a      	str	r2, [r3, #4]
    return 0;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	e005      	b.n	8002ec6 <_fstat+0x2e>
  }

  errno = EBADF;
 8002eba:	f015 fbbf 	bl	801863c <__errno>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2209      	movs	r2, #9
 8002ec2:	601a      	str	r2, [r3, #0]
  return 0;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <_getpid>:

int _getpid(void)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	af00      	add	r7, sp, #0
	return 1;
 8002ed2:	2301      	movs	r3, #1
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <_kill>:

int _kill(int pid, int sig)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ee8:	f015 fba8 	bl	801863c <__errno>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2216      	movs	r2, #22
 8002ef0:	601a      	str	r2, [r3, #0]
	return -1;
 8002ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <HAL_MspInit>:
void HAL_Encoder_Timer1_MspInit(void);
void HAL_Encoder_Timer2_MspInit(void);
void HAL_adcir_MspInit(void);

void HAL_MspInit(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	4b33      	ldr	r3, [pc, #204]	; (8002fd8 <HAL_MspInit+0xd8>)
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0e:	4a32      	ldr	r2, [pc, #200]	; (8002fd8 <HAL_MspInit+0xd8>)
 8002f10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f14:	6453      	str	r3, [r2, #68]	; 0x44
 8002f16:	4b30      	ldr	r3, [pc, #192]	; (8002fd8 <HAL_MspInit+0xd8>)
 8002f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f22:	2300      	movs	r3, #0
 8002f24:	613b      	str	r3, [r7, #16]
 8002f26:	4b2c      	ldr	r3, [pc, #176]	; (8002fd8 <HAL_MspInit+0xd8>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	4a2b      	ldr	r2, [pc, #172]	; (8002fd8 <HAL_MspInit+0xd8>)
 8002f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f30:	6413      	str	r3, [r2, #64]	; 0x40
 8002f32:	4b29      	ldr	r3, [pc, #164]	; (8002fd8 <HAL_MspInit+0xd8>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	613b      	str	r3, [r7, #16]
 8002f3c:	693b      	ldr	r3, [r7, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	4b25      	ldr	r3, [pc, #148]	; (8002fd8 <HAL_MspInit+0xd8>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	4a24      	ldr	r2, [pc, #144]	; (8002fd8 <HAL_MspInit+0xd8>)
 8002f48:	f043 0304 	orr.w	r3, r3, #4
 8002f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f4e:	4b22      	ldr	r3, [pc, #136]	; (8002fd8 <HAL_MspInit+0xd8>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	f003 0304 	and.w	r3, r3, #4
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <HAL_MspInit+0xd8>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	4a1d      	ldr	r2, [pc, #116]	; (8002fd8 <HAL_MspInit+0xd8>)
 8002f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f68:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6a:	4b1b      	ldr	r3, [pc, #108]	; (8002fd8 <HAL_MspInit+0xd8>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f72:	60bb      	str	r3, [r7, #8]
 8002f74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	607b      	str	r3, [r7, #4]
 8002f7a:	4b17      	ldr	r3, [pc, #92]	; (8002fd8 <HAL_MspInit+0xd8>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	4a16      	ldr	r2, [pc, #88]	; (8002fd8 <HAL_MspInit+0xd8>)
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	6313      	str	r3, [r2, #48]	; 0x30
 8002f86:	4b14      	ldr	r3, [pc, #80]	; (8002fd8 <HAL_MspInit+0xd8>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	607b      	str	r3, [r7, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	603b      	str	r3, [r7, #0]
 8002f96:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <HAL_MspInit+0xd8>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	4a0f      	ldr	r2, [pc, #60]	; (8002fd8 <HAL_MspInit+0xd8>)
 8002f9c:	f043 0302 	orr.w	r3, r3, #2
 8002fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa2:	4b0d      	ldr	r3, [pc, #52]	; (8002fd8 <HAL_MspInit+0xd8>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	603b      	str	r3, [r7, #0]
 8002fac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002fae:	2200      	movs	r2, #0
 8002fb0:	210f      	movs	r1, #15
 8002fb2:	f06f 0001 	mvn.w	r0, #1
 8002fb6:	f001 f8ab 	bl	8004110 <HAL_NVIC_SetPriority>

  HAL_PWM_Timer3_MspInit();
 8002fba:	f000 f895 	bl	80030e8 <HAL_PWM_Timer3_MspInit>
  HAL_Encoder_Timer1_MspInit();
 8002fbe:	f000 f815 	bl	8002fec <HAL_Encoder_Timer1_MspInit>
  HAL_Encoder_Timer2_MspInit();
 8002fc2:	f000 f853 	bl	800306c <HAL_Encoder_Timer2_MspInit>
  HAL_adcir_MspInit();
 8002fc6:	f000 f8ed 	bl	80031a4 <HAL_adcir_MspInit>
  HAL_GPIO_MspInit();
 8002fca:	f000 f807 	bl	8002fdc <HAL_GPIO_MspInit>

}
 8002fce:	bf00      	nop
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40023800 	.word	0x40023800

08002fdc <HAL_GPIO_MspInit>:
/******************************************************************
			GPIO : contrôle période d'échantillonage
GPIO OUTPUT	-->	PB4
******************************************************************/
void HAL_GPIO_MspInit(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
	  //GPIO_InitStruct.Pull = GPIO_NOPULL;
	  //GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;

	  //HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}
 8002fe0:	bf00      	nop
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <HAL_Encoder_Timer1_MspInit>:
PWM1/1	-->	PA8		-- Encodeur Voie A
PWM1/2	--> PA9		-- Encodeur Voie B
EXTI1	--> PB10		-- Index encodeur
******************************************************************/
void HAL_Encoder_Timer1_MspInit(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM1_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	603b      	str	r3, [r7, #0]
 8002ff6:	4b1a      	ldr	r3, [pc, #104]	; (8003060 <HAL_Encoder_Timer1_MspInit+0x74>)
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffa:	4a19      	ldr	r2, [pc, #100]	; (8003060 <HAL_Encoder_Timer1_MspInit+0x74>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	6453      	str	r3, [r2, #68]	; 0x44
 8003002:	4b17      	ldr	r3, [pc, #92]	; (8003060 <HAL_Encoder_Timer1_MspInit+0x74>)
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800300e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003012:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 8003014:	2302      	movs	r3, #2
 8003016:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003018:	2301      	movs	r3, #1
 800301a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800301c:	2301      	movs	r3, #1
 800301e:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM1 ; // hal_gpio_ex.h
 8003020:	2301      	movs	r3, #1
 8003022:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003024:	1d3b      	adds	r3, r7, #4
 8003026:	4619      	mov	r1, r3
 8003028:	480e      	ldr	r0, [pc, #56]	; (8003064 <HAL_Encoder_Timer1_MspInit+0x78>)
 800302a:	f001 fcab 	bl	8004984 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800302e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003032:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003034:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003038:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800303e:	1d3b      	adds	r3, r7, #4
 8003040:	4619      	mov	r1, r3
 8003042:	4809      	ldr	r0, [pc, #36]	; (8003068 <HAL_Encoder_Timer1_MspInit+0x7c>)
 8003044:	f001 fc9e 	bl	8004984 <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, EXTI15_10_IRQ_PRIO, 0);
 8003048:	2200      	movs	r2, #0
 800304a:	2107      	movs	r1, #7
 800304c:	2028      	movs	r0, #40	; 0x28
 800304e:	f001 f85f 	bl	8004110 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003052:	2028      	movs	r0, #40	; 0x28
 8003054:	f001 f878 	bl	8004148 <HAL_NVIC_EnableIRQ>
}
 8003058:	bf00      	nop
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40023800 	.word	0x40023800
 8003064:	40020000 	.word	0x40020000
 8003068:	40020400 	.word	0x40020400

0800306c <HAL_Encoder_Timer2_MspInit>:
PWM2/1	-->	PA0		-- Encodeur Voie A
PWM2/2	--> PA1		-- Encodeur Voie B
EXTI 	--> PC0		-- Index Moteur
******************************************************************/
void HAL_Encoder_Timer2_MspInit(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM2_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	603b      	str	r3, [r7, #0]
 8003076:	4b19      	ldr	r3, [pc, #100]	; (80030dc <HAL_Encoder_Timer2_MspInit+0x70>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	4a18      	ldr	r2, [pc, #96]	; (80030dc <HAL_Encoder_Timer2_MspInit+0x70>)
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	6413      	str	r3, [r2, #64]	; 0x40
 8003082:	4b16      	ldr	r3, [pc, #88]	; (80030dc <HAL_Encoder_Timer2_MspInit+0x70>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	603b      	str	r3, [r7, #0]
 800308c:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800308e:	2303      	movs	r3, #3
 8003090:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 8003092:	2302      	movs	r3, #2
 8003094:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003096:	2301      	movs	r3, #1
 8003098:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800309a:	2301      	movs	r3, #1
 800309c:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM2 ; // hal_gpio_ex.h
 800309e:	2301      	movs	r3, #1
 80030a0:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a2:	1d3b      	adds	r3, r7, #4
 80030a4:	4619      	mov	r1, r3
 80030a6:	480e      	ldr	r0, [pc, #56]	; (80030e0 <HAL_Encoder_Timer2_MspInit+0x74>)
 80030a8:	f001 fc6c 	bl	8004984 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80030ac:	2301      	movs	r3, #1
 80030ae:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80030b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80030b4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030ba:	1d3b      	adds	r3, r7, #4
 80030bc:	4619      	mov	r1, r3
 80030be:	4809      	ldr	r0, [pc, #36]	; (80030e4 <HAL_Encoder_Timer2_MspInit+0x78>)
 80030c0:	f001 fc60 	bl	8004984 <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI0_IRQn, EXTI0_IRQ_PRIO, 0);
 80030c4:	2200      	movs	r2, #0
 80030c6:	2106      	movs	r1, #6
 80030c8:	2006      	movs	r0, #6
 80030ca:	f001 f821 	bl	8004110 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80030ce:	2006      	movs	r0, #6
 80030d0:	f001 f83a 	bl	8004148 <HAL_NVIC_EnableIRQ>
}
 80030d4:	bf00      	nop
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40023800 	.word	0x40023800
 80030e0:	40020000 	.word	0x40020000
 80030e4:	40020800 	.word	0x40020800

080030e8 <HAL_PWM_Timer3_MspInit>:
PA6 --> PWM3/1
PC7 --> PWM3/2
PB3 --> ENABLE MOTEUR (actif état Bas)
******************************************************************/
void HAL_PWM_Timer3_MspInit(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM3_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	603b      	str	r3, [r7, #0]
 80030f2:	4b28      	ldr	r3, [pc, #160]	; (8003194 <HAL_PWM_Timer3_MspInit+0xac>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	4a27      	ldr	r2, [pc, #156]	; (8003194 <HAL_PWM_Timer3_MspInit+0xac>)
 80030f8:	f043 0302 	orr.w	r3, r3, #2
 80030fc:	6413      	str	r3, [r2, #64]	; 0x40
 80030fe:	4b25      	ldr	r3, [pc, #148]	; (8003194 <HAL_PWM_Timer3_MspInit+0xac>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800310a:	2340      	movs	r3, #64	; 0x40
 800310c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310e:	2302      	movs	r3, #2
 8003110:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003112:	2301      	movs	r3, #1
 8003114:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003116:	2301      	movs	r3, #1
 8003118:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 800311a:	2302      	movs	r3, #2
 800311c:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800311e:	1d3b      	adds	r3, r7, #4
 8003120:	4619      	mov	r1, r3
 8003122:	481d      	ldr	r0, [pc, #116]	; (8003198 <HAL_PWM_Timer3_MspInit+0xb0>)
 8003124:	f001 fc2e 	bl	8004984 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003128:	2380      	movs	r3, #128	; 0x80
 800312a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312c:	2302      	movs	r3, #2
 800312e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003130:	2301      	movs	r3, #1
 8003132:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003134:	2301      	movs	r3, #1
 8003136:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 8003138:	2302      	movs	r3, #2
 800313a:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800313c:	1d3b      	adds	r3, r7, #4
 800313e:	4619      	mov	r1, r3
 8003140:	4816      	ldr	r0, [pc, #88]	; (800319c <HAL_PWM_Timer3_MspInit+0xb4>)
 8003142:	f001 fc1f 	bl	8004984 <HAL_GPIO_Init>

	  // ENABLE MOTEUR : SORTIE LOGIQUE PB3
	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003146:	2380      	movs	r3, #128	; 0x80
 8003148:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800314a:	2300      	movs	r3, #0
 800314c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003152:	1d3b      	adds	r3, r7, #4
 8003154:	4619      	mov	r1, r3
 8003156:	4810      	ldr	r0, [pc, #64]	; (8003198 <HAL_PWM_Timer3_MspInit+0xb0>)
 8003158:	f001 fc14 	bl	8004984 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 800315c:	2201      	movs	r2, #1
 800315e:	2180      	movs	r1, #128	; 0x80
 8003160:	480d      	ldr	r0, [pc, #52]	; (8003198 <HAL_PWM_Timer3_MspInit+0xb0>)
 8003162:	f001 fd93 	bl	8004c8c <HAL_GPIO_WritePin>

	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003166:	2308      	movs	r3, #8
 8003168:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800316a:	2301      	movs	r3, #1
 800316c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800316e:	2301      	movs	r3, #1
 8003170:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8003172:	2302      	movs	r3, #2
 8003174:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003176:	1d3b      	adds	r3, r7, #4
 8003178:	4619      	mov	r1, r3
 800317a:	4809      	ldr	r0, [pc, #36]	; (80031a0 <HAL_PWM_Timer3_MspInit+0xb8>)
 800317c:	f001 fc02 	bl	8004984 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8003180:	2201      	movs	r2, #1
 8003182:	2108      	movs	r1, #8
 8003184:	4806      	ldr	r0, [pc, #24]	; (80031a0 <HAL_PWM_Timer3_MspInit+0xb8>)
 8003186:	f001 fd81 	bl	8004c8c <HAL_GPIO_WritePin>




}
 800318a:	bf00      	nop
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40023800 	.word	0x40023800
 8003198:	40020000 	.word	0x40020000
 800319c:	40020800 	.word	0x40020800
 80031a0:	40020400 	.word	0x40020400

080031a4 <HAL_adcir_MspInit>:
ADC1_4	--> PA4
ADC1_8	--> PB0
http://stm32f4-discovery.com/2014/04/library-06-ad-converter-on-stm32f4xx/
******************************************************************/
void HAL_adcir_MspInit(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;
	  /* Peripheral clock enable */
	  __ADC1_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	603b      	str	r3, [r7, #0]
 80031ae:	4b13      	ldr	r3, [pc, #76]	; (80031fc <HAL_adcir_MspInit+0x58>)
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	4a12      	ldr	r2, [pc, #72]	; (80031fc <HAL_adcir_MspInit+0x58>)
 80031b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b8:	6453      	str	r3, [r2, #68]	; 0x44
 80031ba:	4b10      	ldr	r3, [pc, #64]	; (80031fc <HAL_adcir_MspInit+0x58>)
 80031bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c2:	603b      	str	r3, [r7, #0]
 80031c4:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_4 ;
 80031c6:	2310      	movs	r3, #16
 80031c8:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031ca:	2303      	movs	r3, #3
 80031cc:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d2:	1d3b      	adds	r3, r7, #4
 80031d4:	4619      	mov	r1, r3
 80031d6:	480a      	ldr	r0, [pc, #40]	; (8003200 <HAL_adcir_MspInit+0x5c>)
 80031d8:	f001 fbd4 	bl	8004984 <HAL_GPIO_Init>


	  GPIO_InitStruct.Pin = GPIO_PIN_0 ;
 80031dc:	2301      	movs	r3, #1
 80031de:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031e0:	2303      	movs	r3, #3
 80031e2:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031e8:	1d3b      	adds	r3, r7, #4
 80031ea:	4619      	mov	r1, r3
 80031ec:	4805      	ldr	r0, [pc, #20]	; (8003204 <HAL_adcir_MspInit+0x60>)
 80031ee:	f001 fbc9 	bl	8004984 <HAL_GPIO_Init>

}
 80031f2:	bf00      	nop
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40023800 	.word	0x40023800
 8003200:	40020000 	.word	0x40020000
 8003204:	40020400 	.word	0x40020400

08003208 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
******************************************************************/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08a      	sub	sp, #40	; 0x28
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003210:	f107 0314 	add.w	r3, r7, #20
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	605a      	str	r2, [r3, #4]
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a21      	ldr	r2, [pc, #132]	; (80032ac <HAL_I2C_MspInit+0xa4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d13c      	bne.n	80032a4 <HAL_I2C_MspInit+0x9c>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	613b      	str	r3, [r7, #16]
 800322e:	4b20      	ldr	r3, [pc, #128]	; (80032b0 <HAL_I2C_MspInit+0xa8>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4a1f      	ldr	r2, [pc, #124]	; (80032b0 <HAL_I2C_MspInit+0xa8>)
 8003234:	f043 0302 	orr.w	r3, r3, #2
 8003238:	6313      	str	r3, [r2, #48]	; 0x30
 800323a:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <HAL_I2C_MspInit+0xa8>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003246:	f44f 7340 	mov.w	r3, #768	; 0x300
 800324a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800324c:	2312      	movs	r3, #18
 800324e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003250:	2300      	movs	r3, #0
 8003252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003254:	2303      	movs	r3, #3
 8003256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003258:	2304      	movs	r3, #4
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800325c:	f107 0314 	add.w	r3, r7, #20
 8003260:	4619      	mov	r1, r3
 8003262:	4814      	ldr	r0, [pc, #80]	; (80032b4 <HAL_I2C_MspInit+0xac>)
 8003264:	f001 fb8e 	bl	8004984 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003268:	2300      	movs	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	4b10      	ldr	r3, [pc, #64]	; (80032b0 <HAL_I2C_MspInit+0xa8>)
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	4a0f      	ldr	r2, [pc, #60]	; (80032b0 <HAL_I2C_MspInit+0xa8>)
 8003272:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003276:	6413      	str	r3, [r2, #64]	; 0x40
 8003278:	4b0d      	ldr	r3, [pc, #52]	; (80032b0 <HAL_I2C_MspInit+0xa8>)
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	68fb      	ldr	r3, [r7, #12]

	  HAL_NVIC_SetPriority(I2C1_ER_IRQn, I2C1_ER_IRQ_PRIO, 0);
 8003284:	2200      	movs	r2, #0
 8003286:	2102      	movs	r1, #2
 8003288:	2020      	movs	r0, #32
 800328a:	f000 ff41 	bl	8004110 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800328e:	2020      	movs	r0, #32
 8003290:	f000 ff5a 	bl	8004148 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(I2C1_EV_IRQn, I2C1_EV_IRQ_PRIO, 0);
 8003294:	2200      	movs	r2, #0
 8003296:	210b      	movs	r1, #11
 8003298:	201f      	movs	r0, #31
 800329a:	f000 ff39 	bl	8004110 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800329e:	201f      	movs	r0, #31
 80032a0:	f000 ff52 	bl	8004148 <HAL_NVIC_EnableIRQ>



  }

}
 80032a4:	bf00      	nop
 80032a6:	3728      	adds	r7, #40	; 0x28
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40005400 	.word	0x40005400
 80032b0:	40023800 	.word	0x40023800
 80032b4:	40020400 	.word	0x40020400

080032b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
******************************************************************/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08c      	sub	sp, #48	; 0x30
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c0:	f107 031c 	add.w	r3, r7, #28
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	60da      	str	r2, [r3, #12]
 80032ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4aa2      	ldr	r2, [pc, #648]	; (8003560 <HAL_UART_MspInit+0x2a8>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	f040 80a5 	bne.w	8003426 <HAL_UART_MspInit+0x16e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032dc:	2300      	movs	r3, #0
 80032de:	61bb      	str	r3, [r7, #24]
 80032e0:	4ba0      	ldr	r3, [pc, #640]	; (8003564 <HAL_UART_MspInit+0x2ac>)
 80032e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e4:	4a9f      	ldr	r2, [pc, #636]	; (8003564 <HAL_UART_MspInit+0x2ac>)
 80032e6:	f043 0310 	orr.w	r3, r3, #16
 80032ea:	6453      	str	r3, [r2, #68]	; 0x44
 80032ec:	4b9d      	ldr	r3, [pc, #628]	; (8003564 <HAL_UART_MspInit+0x2ac>)
 80032ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f0:	f003 0310 	and.w	r3, r3, #16
 80032f4:	61bb      	str	r3, [r7, #24]
 80032f6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f8:	2300      	movs	r3, #0
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	4b99      	ldr	r3, [pc, #612]	; (8003564 <HAL_UART_MspInit+0x2ac>)
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	4a98      	ldr	r2, [pc, #608]	; (8003564 <HAL_UART_MspInit+0x2ac>)
 8003302:	f043 0301 	orr.w	r3, r3, #1
 8003306:	6313      	str	r3, [r2, #48]	; 0x30
 8003308:	4b96      	ldr	r3, [pc, #600]	; (8003564 <HAL_UART_MspInit+0x2ac>)
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331a:	2302      	movs	r3, #2
 800331c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331e:	2300      	movs	r3, #0
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003322:	2303      	movs	r3, #3
 8003324:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003326:	2307      	movs	r3, #7
 8003328:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800332a:	f107 031c 	add.w	r3, r7, #28
 800332e:	4619      	mov	r1, r3
 8003330:	488d      	ldr	r0, [pc, #564]	; (8003568 <HAL_UART_MspInit+0x2b0>)
 8003332:	f001 fb27 	bl	8004984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003336:	2340      	movs	r3, #64	; 0x40
 8003338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333a:	2302      	movs	r3, #2
 800333c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333e:	2300      	movs	r3, #0
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003342:	2303      	movs	r3, #3
 8003344:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003346:	2307      	movs	r3, #7
 8003348:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800334a:	f107 031c 	add.w	r3, r7, #28
 800334e:	4619      	mov	r1, r3
 8003350:	4886      	ldr	r0, [pc, #536]	; (800356c <HAL_UART_MspInit+0x2b4>)
 8003352:	f001 fb17 	bl	8004984 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003356:	4b86      	ldr	r3, [pc, #536]	; (8003570 <HAL_UART_MspInit+0x2b8>)
 8003358:	4a86      	ldr	r2, [pc, #536]	; (8003574 <HAL_UART_MspInit+0x2bc>)
 800335a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800335c:	4b84      	ldr	r3, [pc, #528]	; (8003570 <HAL_UART_MspInit+0x2b8>)
 800335e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003362:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003364:	4b82      	ldr	r3, [pc, #520]	; (8003570 <HAL_UART_MspInit+0x2b8>)
 8003366:	2200      	movs	r2, #0
 8003368:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800336a:	4b81      	ldr	r3, [pc, #516]	; (8003570 <HAL_UART_MspInit+0x2b8>)
 800336c:	2200      	movs	r2, #0
 800336e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003370:	4b7f      	ldr	r3, [pc, #508]	; (8003570 <HAL_UART_MspInit+0x2b8>)
 8003372:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003376:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003378:	4b7d      	ldr	r3, [pc, #500]	; (8003570 <HAL_UART_MspInit+0x2b8>)
 800337a:	2200      	movs	r2, #0
 800337c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800337e:	4b7c      	ldr	r3, [pc, #496]	; (8003570 <HAL_UART_MspInit+0x2b8>)
 8003380:	2200      	movs	r2, #0
 8003382:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003384:	4b7a      	ldr	r3, [pc, #488]	; (8003570 <HAL_UART_MspInit+0x2b8>)
 8003386:	f44f 7280 	mov.w	r2, #256	; 0x100
 800338a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800338c:	4b78      	ldr	r3, [pc, #480]	; (8003570 <HAL_UART_MspInit+0x2b8>)
 800338e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003392:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003394:	4b76      	ldr	r3, [pc, #472]	; (8003570 <HAL_UART_MspInit+0x2b8>)
 8003396:	2200      	movs	r2, #0
 8003398:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800339a:	4875      	ldr	r0, [pc, #468]	; (8003570 <HAL_UART_MspInit+0x2b8>)
 800339c:	f000 fee2 	bl	8004164 <HAL_DMA_Init>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 80033a6:	f7ff f8ff 	bl	80025a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a70      	ldr	r2, [pc, #448]	; (8003570 <HAL_UART_MspInit+0x2b8>)
 80033ae:	639a      	str	r2, [r3, #56]	; 0x38
 80033b0:	4a6f      	ldr	r2, [pc, #444]	; (8003570 <HAL_UART_MspInit+0x2b8>)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80033b6:	4b70      	ldr	r3, [pc, #448]	; (8003578 <HAL_UART_MspInit+0x2c0>)
 80033b8:	4a70      	ldr	r2, [pc, #448]	; (800357c <HAL_UART_MspInit+0x2c4>)
 80033ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80033bc:	4b6e      	ldr	r3, [pc, #440]	; (8003578 <HAL_UART_MspInit+0x2c0>)
 80033be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033c2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033c4:	4b6c      	ldr	r3, [pc, #432]	; (8003578 <HAL_UART_MspInit+0x2c0>)
 80033c6:	2240      	movs	r2, #64	; 0x40
 80033c8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033ca:	4b6b      	ldr	r3, [pc, #428]	; (8003578 <HAL_UART_MspInit+0x2c0>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033d0:	4b69      	ldr	r3, [pc, #420]	; (8003578 <HAL_UART_MspInit+0x2c0>)
 80033d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033d6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033d8:	4b67      	ldr	r3, [pc, #412]	; (8003578 <HAL_UART_MspInit+0x2c0>)
 80033da:	2200      	movs	r2, #0
 80033dc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033de:	4b66      	ldr	r3, [pc, #408]	; (8003578 <HAL_UART_MspInit+0x2c0>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80033e4:	4b64      	ldr	r3, [pc, #400]	; (8003578 <HAL_UART_MspInit+0x2c0>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80033ea:	4b63      	ldr	r3, [pc, #396]	; (8003578 <HAL_UART_MspInit+0x2c0>)
 80033ec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80033f0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033f2:	4b61      	ldr	r3, [pc, #388]	; (8003578 <HAL_UART_MspInit+0x2c0>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80033f8:	485f      	ldr	r0, [pc, #380]	; (8003578 <HAL_UART_MspInit+0x2c0>)
 80033fa:	f000 feb3 	bl	8004164 <HAL_DMA_Init>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_UART_MspInit+0x150>
    {
      Error_Handler();
 8003404:	f7ff f8d0 	bl	80025a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a5b      	ldr	r2, [pc, #364]	; (8003578 <HAL_UART_MspInit+0x2c0>)
 800340c:	635a      	str	r2, [r3, #52]	; 0x34
 800340e:	4a5a      	ldr	r2, [pc, #360]	; (8003578 <HAL_UART_MspInit+0x2c0>)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003414:	2200      	movs	r2, #0
 8003416:	2105      	movs	r1, #5
 8003418:	2025      	movs	r0, #37	; 0x25
 800341a:	f000 fe79 	bl	8004110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800341e:	2025      	movs	r0, #37	; 0x25
 8003420:	f000 fe92 	bl	8004148 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003424:	e098      	b.n	8003558 <HAL_UART_MspInit+0x2a0>
  else if(huart->Instance==USART2)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a55      	ldr	r2, [pc, #340]	; (8003580 <HAL_UART_MspInit+0x2c8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	f040 8093 	bne.w	8003558 <HAL_UART_MspInit+0x2a0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	4b4b      	ldr	r3, [pc, #300]	; (8003564 <HAL_UART_MspInit+0x2ac>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	4a4a      	ldr	r2, [pc, #296]	; (8003564 <HAL_UART_MspInit+0x2ac>)
 800343c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003440:	6413      	str	r3, [r2, #64]	; 0x40
 8003442:	4b48      	ldr	r3, [pc, #288]	; (8003564 <HAL_UART_MspInit+0x2ac>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	4b44      	ldr	r3, [pc, #272]	; (8003564 <HAL_UART_MspInit+0x2ac>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	4a43      	ldr	r2, [pc, #268]	; (8003564 <HAL_UART_MspInit+0x2ac>)
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	6313      	str	r3, [r2, #48]	; 0x30
 800345e:	4b41      	ldr	r3, [pc, #260]	; (8003564 <HAL_UART_MspInit+0x2ac>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800346a:	230c      	movs	r3, #12
 800346c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346e:	2302      	movs	r3, #2
 8003470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003476:	2303      	movs	r3, #3
 8003478:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800347a:	2307      	movs	r3, #7
 800347c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800347e:	f107 031c 	add.w	r3, r7, #28
 8003482:	4619      	mov	r1, r3
 8003484:	4838      	ldr	r0, [pc, #224]	; (8003568 <HAL_UART_MspInit+0x2b0>)
 8003486:	f001 fa7d 	bl	8004984 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800348a:	4b3e      	ldr	r3, [pc, #248]	; (8003584 <HAL_UART_MspInit+0x2cc>)
 800348c:	4a3e      	ldr	r2, [pc, #248]	; (8003588 <HAL_UART_MspInit+0x2d0>)
 800348e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003490:	4b3c      	ldr	r3, [pc, #240]	; (8003584 <HAL_UART_MspInit+0x2cc>)
 8003492:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003496:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003498:	4b3a      	ldr	r3, [pc, #232]	; (8003584 <HAL_UART_MspInit+0x2cc>)
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800349e:	4b39      	ldr	r3, [pc, #228]	; (8003584 <HAL_UART_MspInit+0x2cc>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034a4:	4b37      	ldr	r3, [pc, #220]	; (8003584 <HAL_UART_MspInit+0x2cc>)
 80034a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034aa:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034ac:	4b35      	ldr	r3, [pc, #212]	; (8003584 <HAL_UART_MspInit+0x2cc>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034b2:	4b34      	ldr	r3, [pc, #208]	; (8003584 <HAL_UART_MspInit+0x2cc>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80034b8:	4b32      	ldr	r3, [pc, #200]	; (8003584 <HAL_UART_MspInit+0x2cc>)
 80034ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034be:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80034c0:	4b30      	ldr	r3, [pc, #192]	; (8003584 <HAL_UART_MspInit+0x2cc>)
 80034c2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80034c6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034c8:	4b2e      	ldr	r3, [pc, #184]	; (8003584 <HAL_UART_MspInit+0x2cc>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80034ce:	482d      	ldr	r0, [pc, #180]	; (8003584 <HAL_UART_MspInit+0x2cc>)
 80034d0:	f000 fe48 	bl	8004164 <HAL_DMA_Init>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <HAL_UART_MspInit+0x226>
      Error_Handler();
 80034da:	f7ff f865 	bl	80025a8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a28      	ldr	r2, [pc, #160]	; (8003584 <HAL_UART_MspInit+0x2cc>)
 80034e2:	639a      	str	r2, [r3, #56]	; 0x38
 80034e4:	4a27      	ldr	r2, [pc, #156]	; (8003584 <HAL_UART_MspInit+0x2cc>)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80034ea:	4b28      	ldr	r3, [pc, #160]	; (800358c <HAL_UART_MspInit+0x2d4>)
 80034ec:	4a28      	ldr	r2, [pc, #160]	; (8003590 <HAL_UART_MspInit+0x2d8>)
 80034ee:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80034f0:	4b26      	ldr	r3, [pc, #152]	; (800358c <HAL_UART_MspInit+0x2d4>)
 80034f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034f6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034f8:	4b24      	ldr	r3, [pc, #144]	; (800358c <HAL_UART_MspInit+0x2d4>)
 80034fa:	2240      	movs	r2, #64	; 0x40
 80034fc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034fe:	4b23      	ldr	r3, [pc, #140]	; (800358c <HAL_UART_MspInit+0x2d4>)
 8003500:	2200      	movs	r2, #0
 8003502:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003504:	4b21      	ldr	r3, [pc, #132]	; (800358c <HAL_UART_MspInit+0x2d4>)
 8003506:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800350a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800350c:	4b1f      	ldr	r3, [pc, #124]	; (800358c <HAL_UART_MspInit+0x2d4>)
 800350e:	2200      	movs	r2, #0
 8003510:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003512:	4b1e      	ldr	r3, [pc, #120]	; (800358c <HAL_UART_MspInit+0x2d4>)
 8003514:	2200      	movs	r2, #0
 8003516:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003518:	4b1c      	ldr	r3, [pc, #112]	; (800358c <HAL_UART_MspInit+0x2d4>)
 800351a:	2200      	movs	r2, #0
 800351c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800351e:	4b1b      	ldr	r3, [pc, #108]	; (800358c <HAL_UART_MspInit+0x2d4>)
 8003520:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003524:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003526:	4b19      	ldr	r3, [pc, #100]	; (800358c <HAL_UART_MspInit+0x2d4>)
 8003528:	2200      	movs	r2, #0
 800352a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800352c:	4817      	ldr	r0, [pc, #92]	; (800358c <HAL_UART_MspInit+0x2d4>)
 800352e:	f000 fe19 	bl	8004164 <HAL_DMA_Init>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <HAL_UART_MspInit+0x284>
      Error_Handler();
 8003538:	f7ff f836 	bl	80025a8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a13      	ldr	r2, [pc, #76]	; (800358c <HAL_UART_MspInit+0x2d4>)
 8003540:	635a      	str	r2, [r3, #52]	; 0x34
 8003542:	4a12      	ldr	r2, [pc, #72]	; (800358c <HAL_UART_MspInit+0x2d4>)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003548:	2200      	movs	r2, #0
 800354a:	2105      	movs	r1, #5
 800354c:	2026      	movs	r0, #38	; 0x26
 800354e:	f000 fddf 	bl	8004110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003552:	2026      	movs	r0, #38	; 0x26
 8003554:	f000 fdf8 	bl	8004148 <HAL_NVIC_EnableIRQ>
}
 8003558:	bf00      	nop
 800355a:	3730      	adds	r7, #48	; 0x30
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40011000 	.word	0x40011000
 8003564:	40023800 	.word	0x40023800
 8003568:	40020000 	.word	0x40020000
 800356c:	40020400 	.word	0x40020400
 8003570:	20004a44 	.word	0x20004a44
 8003574:	40026440 	.word	0x40026440
 8003578:	20004aa4 	.word	0x20004aa4
 800357c:	400264b8 	.word	0x400264b8
 8003580:	40004400 	.word	0x40004400
 8003584:	20004b04 	.word	0x20004b04
 8003588:	40026088 	.word	0x40026088
 800358c:	20004b64 	.word	0x20004b64
 8003590:	400260a0 	.word	0x400260a0

08003594 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08c      	sub	sp, #48	; 0x30
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80035a4:	2300      	movs	r3, #0
 80035a6:	60bb      	str	r3, [r7, #8]
 80035a8:	4b2f      	ldr	r3, [pc, #188]	; (8003668 <HAL_InitTick+0xd4>)
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	4a2e      	ldr	r2, [pc, #184]	; (8003668 <HAL_InitTick+0xd4>)
 80035ae:	f043 0304 	orr.w	r3, r3, #4
 80035b2:	6413      	str	r3, [r2, #64]	; 0x40
 80035b4:	4b2c      	ldr	r3, [pc, #176]	; (8003668 <HAL_InitTick+0xd4>)
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80035c0:	f107 020c 	add.w	r2, r7, #12
 80035c4:	f107 0310 	add.w	r3, r7, #16
 80035c8:	4611      	mov	r1, r2
 80035ca:	4618      	mov	r0, r3
 80035cc:	f003 fe20 	bl	8007210 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80035d0:	f003 fe0a 	bl	80071e8 <HAL_RCC_GetPCLK2Freq>
 80035d4:	4603      	mov	r3, r0
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80035da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035dc:	4a23      	ldr	r2, [pc, #140]	; (800366c <HAL_InitTick+0xd8>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	0c9b      	lsrs	r3, r3, #18
 80035e4:	3b01      	subs	r3, #1
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim4.Instance = TIM4;
 80035e8:	4b21      	ldr	r3, [pc, #132]	; (8003670 <HAL_InitTick+0xdc>)
 80035ea:	4a22      	ldr	r2, [pc, #136]	; (8003674 <HAL_InitTick+0xe0>)
 80035ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80035ee:	4b20      	ldr	r3, [pc, #128]	; (8003670 <HAL_InitTick+0xdc>)
 80035f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035f4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80035f6:	4a1e      	ldr	r2, [pc, #120]	; (8003670 <HAL_InitTick+0xdc>)
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80035fc:	4b1c      	ldr	r3, [pc, #112]	; (8003670 <HAL_InitTick+0xdc>)
 80035fe:	2200      	movs	r2, #0
 8003600:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003602:	4b1b      	ldr	r3, [pc, #108]	; (8003670 <HAL_InitTick+0xdc>)
 8003604:	2200      	movs	r2, #0
 8003606:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003608:	4b19      	ldr	r3, [pc, #100]	; (8003670 <HAL_InitTick+0xdc>)
 800360a:	2200      	movs	r2, #0
 800360c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800360e:	4818      	ldr	r0, [pc, #96]	; (8003670 <HAL_InitTick+0xdc>)
 8003610:	f003 fe30 	bl	8007274 <HAL_TIM_Base_Init>
 8003614:	4603      	mov	r3, r0
 8003616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800361a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800361e:	2b00      	cmp	r3, #0
 8003620:	d11b      	bne.n	800365a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8003622:	4813      	ldr	r0, [pc, #76]	; (8003670 <HAL_InitTick+0xdc>)
 8003624:	f003 fe80 	bl	8007328 <HAL_TIM_Base_Start_IT>
 8003628:	4603      	mov	r3, r0
 800362a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800362e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003632:	2b00      	cmp	r3, #0
 8003634:	d111      	bne.n	800365a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003636:	201e      	movs	r0, #30
 8003638:	f000 fd86 	bl	8004148 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b0f      	cmp	r3, #15
 8003640:	d808      	bhi.n	8003654 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8003642:	2200      	movs	r2, #0
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	201e      	movs	r0, #30
 8003648:	f000 fd62 	bl	8004110 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800364c:	4a0a      	ldr	r2, [pc, #40]	; (8003678 <HAL_InitTick+0xe4>)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	e002      	b.n	800365a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800365a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800365e:	4618      	mov	r0, r3
 8003660:	3730      	adds	r7, #48	; 0x30
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40023800 	.word	0x40023800
 800366c:	431bde83 	.word	0x431bde83
 8003670:	20004d0c 	.word	0x20004d0c
 8003674:	40000800 	.word	0x40000800
 8003678:	20000014 	.word	0x20000014

0800367c <NMI_Handler>:
extern TIM_HandleTypeDef htim4;
extern I2C_HandleTypeDef hi2c1;


void NMI_Handler(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  while (1)
 8003680:	e7fe      	b.n	8003680 <NMI_Handler+0x4>

08003682 <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 8003682:	b480      	push	{r7}
 8003684:	af00      	add	r7, sp, #0

  while (1)
 8003686:	e7fe      	b.n	8003686 <HardFault_Handler+0x4>

08003688 <MemManage_Handler>:
  {
  }
}

void MemManage_Handler(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  while (1)
 800368c:	e7fe      	b.n	800368c <MemManage_Handler+0x4>

0800368e <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 800368e:	b480      	push	{r7}
 8003690:	af00      	add	r7, sp, #0
  while (1)
 8003692:	e7fe      	b.n	8003692 <BusFault_Handler+0x4>

08003694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  while (1)
 8003698:	e7fe      	b.n	8003698 <UsageFault_Handler+0x4>

0800369a <DebugMon_Handler>:
  {
  }
}

void DebugMon_Handler(void)
{
 800369a:	b480      	push	{r7}
 800369c:	af00      	add	r7, sp, #0
}
 800369e:	bf00      	nop
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <DMA1_Stream5_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void DMA1_Stream5_IRQHandler(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80036ac:	4802      	ldr	r0, [pc, #8]	; (80036b8 <DMA1_Stream5_IRQHandler+0x10>)
 80036ae:	f000 fef1 	bl	8004494 <HAL_DMA_IRQHandler>
}
 80036b2:	bf00      	nop
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	20004b04 	.word	0x20004b04

080036bc <DMA1_Stream6_IRQHandler>:


void DMA1_Stream6_IRQHandler(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80036c0:	4802      	ldr	r0, [pc, #8]	; (80036cc <DMA1_Stream6_IRQHandler+0x10>)
 80036c2:	f000 fee7 	bl	8004494 <HAL_DMA_IRQHandler>
}
 80036c6:	bf00      	nop
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	20004b64 	.word	0x20004b64

080036d0 <TIM4_IRQHandler>:
{
  HAL_TIM_IRQHandler(&htim1);
}*/

void TIM4_IRQHandler(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 80036d4:	4802      	ldr	r0, [pc, #8]	; (80036e0 <TIM4_IRQHandler+0x10>)
 80036d6:	f004 f877 	bl	80077c8 <HAL_TIM_IRQHandler>
}
 80036da:	bf00      	nop
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	20004d0c 	.word	0x20004d0c

080036e4 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 80036e8:	4802      	ldr	r0, [pc, #8]	; (80036f4 <USART1_IRQHandler+0x10>)
 80036ea:	f004 ff53 	bl	8008594 <HAL_UART_IRQHandler>
}
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	200049bc 	.word	0x200049bc

080036f8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 80036fc:	4802      	ldr	r0, [pc, #8]	; (8003708 <USART2_IRQHandler+0x10>)
 80036fe:	f004 ff49 	bl	8008594 <HAL_UART_IRQHandler>
}
 8003702:	bf00      	nop
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20004a00 	.word	0x20004a00

0800370c <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003710:	4802      	ldr	r0, [pc, #8]	; (800371c <DMA2_Stream2_IRQHandler+0x10>)
 8003712:	f000 febf 	bl	8004494 <HAL_DMA_IRQHandler>
}
 8003716:	bf00      	nop
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20004a44 	.word	0x20004a44

08003720 <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003724:	4802      	ldr	r0, [pc, #8]	; (8003730 <DMA2_Stream7_IRQHandler+0x10>)
 8003726:	f000 feb5 	bl	8004494 <HAL_DMA_IRQHandler>
}
 800372a:	bf00      	nop
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20004aa4 	.word	0x20004aa4

08003734 <EXTI15_10_IRQHandler>:

//=======================================================
//		ENCODER INDEX LEFT
//=======================================================
void EXTI15_10_IRQHandler(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003738:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800373c:	f001 fac0 	bl	8004cc0 <HAL_GPIO_EXTI_IRQHandler>
}
 8003740:	bf00      	nop
 8003742:	bd80      	pop	{r7, pc}

08003744 <EXTI0_IRQHandler>:
//=======================================================
//		ENCODER INDEX RIGHT
//=======================================================

void EXTI0_IRQHandler(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003748:	2001      	movs	r0, #1
 800374a:	f001 fab9 	bl	8004cc0 <HAL_GPIO_EXTI_IRQHandler>
}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
	  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003758:	4802      	ldr	r0, [pc, #8]	; (8003764 <I2C1_EV_IRQHandler+0x10>)
 800375a:	f001 fc0d 	bl	8004f78 <HAL_I2C_EV_IRQHandler>
}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	20004968 	.word	0x20004968

08003768 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
	  HAL_I2C_ER_IRQHandler(&hi2c1);
 800376c:	4802      	ldr	r0, [pc, #8]	; (8003778 <I2C1_ER_IRQHandler+0x10>)
 800376e:	f001 fd56 	bl	800521e <HAL_I2C_ER_IRQHandler>
}
 8003772:	bf00      	nop
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20004968 	.word	0x20004968

0800377c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003784:	4a14      	ldr	r2, [pc, #80]	; (80037d8 <_sbrk+0x5c>)
 8003786:	4b15      	ldr	r3, [pc, #84]	; (80037dc <_sbrk+0x60>)
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003790:	4b13      	ldr	r3, [pc, #76]	; (80037e0 <_sbrk+0x64>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d102      	bne.n	800379e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003798:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <_sbrk+0x64>)
 800379a:	4a12      	ldr	r2, [pc, #72]	; (80037e4 <_sbrk+0x68>)
 800379c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800379e:	4b10      	ldr	r3, [pc, #64]	; (80037e0 <_sbrk+0x64>)
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4413      	add	r3, r2
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d207      	bcs.n	80037bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037ac:	f014 ff46 	bl	801863c <__errno>
 80037b0:	4603      	mov	r3, r0
 80037b2:	220c      	movs	r2, #12
 80037b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037ba:	e009      	b.n	80037d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037bc:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <_sbrk+0x64>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037c2:	4b07      	ldr	r3, [pc, #28]	; (80037e0 <_sbrk+0x64>)
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4413      	add	r3, r2
 80037ca:	4a05      	ldr	r2, [pc, #20]	; (80037e0 <_sbrk+0x64>)
 80037cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037ce:	68fb      	ldr	r3, [r7, #12]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	20020000 	.word	0x20020000
 80037dc:	00000400 	.word	0x00000400
 80037e0:	20004d54 	.word	0x20004d54
 80037e4:	2000e850 	.word	0x2000e850

080037e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037ec:	4b06      	ldr	r3, [pc, #24]	; (8003808 <SystemInit+0x20>)
 80037ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f2:	4a05      	ldr	r2, [pc, #20]	; (8003808 <SystemInit+0x20>)
 80037f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037fc:	bf00      	nop
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <SystemClock_Config>:


#include "main.h"

void SystemClock_Config(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b094      	sub	sp, #80	; 0x50
 8003810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003812:	f107 0320 	add.w	r3, r7, #32
 8003816:	2230      	movs	r2, #48	; 0x30
 8003818:	2100      	movs	r1, #0
 800381a:	4618      	mov	r0, r3
 800381c:	f014 fe24 	bl	8018468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003820:	f107 030c 	add.w	r3, r7, #12
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	605a      	str	r2, [r3, #4]
 800382a:	609a      	str	r2, [r3, #8]
 800382c:	60da      	str	r2, [r3, #12]
 800382e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003830:	2300      	movs	r3, #0
 8003832:	60bb      	str	r3, [r7, #8]
 8003834:	4b28      	ldr	r3, [pc, #160]	; (80038d8 <SystemClock_Config+0xcc>)
 8003836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003838:	4a27      	ldr	r2, [pc, #156]	; (80038d8 <SystemClock_Config+0xcc>)
 800383a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800383e:	6413      	str	r3, [r2, #64]	; 0x40
 8003840:	4b25      	ldr	r3, [pc, #148]	; (80038d8 <SystemClock_Config+0xcc>)
 8003842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800384c:	2300      	movs	r3, #0
 800384e:	607b      	str	r3, [r7, #4]
 8003850:	4b22      	ldr	r3, [pc, #136]	; (80038dc <SystemClock_Config+0xd0>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a21      	ldr	r2, [pc, #132]	; (80038dc <SystemClock_Config+0xd0>)
 8003856:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800385a:	6013      	str	r3, [r2, #0]
 800385c:	4b1f      	ldr	r3, [pc, #124]	; (80038dc <SystemClock_Config+0xd0>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003864:	607b      	str	r3, [r7, #4]
 8003866:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003868:	2301      	movs	r3, #1
 800386a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800386c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003872:	2302      	movs	r3, #2
 8003874:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003876:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800387a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800387c:	2308      	movs	r3, #8
 800387e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8003880:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8003884:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8003886:	2306      	movs	r3, #6
 8003888:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800388a:	2304      	movs	r3, #4
 800388c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800388e:	f107 0320 	add.w	r3, r7, #32
 8003892:	4618      	mov	r0, r3
 8003894:	f003 f824 	bl	80068e0 <HAL_RCC_OscConfig>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800389e:	f7fe fe83 	bl	80025a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038a2:	230f      	movs	r3, #15
 80038a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038a6:	2302      	movs	r3, #2
 80038a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80038ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80038b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80038b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80038b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80038ba:	f107 030c 	add.w	r3, r7, #12
 80038be:	2102      	movs	r1, #2
 80038c0:	4618      	mov	r0, r3
 80038c2:	f003 fa85 	bl	8006dd0 <HAL_RCC_ClockConfig>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80038cc:	f7fe fe6c 	bl	80025a8 <Error_Handler>
  }
}
 80038d0:	bf00      	nop
 80038d2:	3750      	adds	r7, #80	; 0x50
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40023800 	.word	0x40023800
 80038dc:	40007000 	.word	0x40007000

080038e0 <Reset_Handler>:
 80038e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003918 <LoopFillZerobss+0x12>
 80038e4:	480d      	ldr	r0, [pc, #52]	; (800391c <LoopFillZerobss+0x16>)
 80038e6:	490e      	ldr	r1, [pc, #56]	; (8003920 <LoopFillZerobss+0x1a>)
 80038e8:	4a0e      	ldr	r2, [pc, #56]	; (8003924 <LoopFillZerobss+0x1e>)
 80038ea:	2300      	movs	r3, #0
 80038ec:	e002      	b.n	80038f4 <LoopCopyDataInit>

080038ee <CopyDataInit>:
 80038ee:	58d4      	ldr	r4, [r2, r3]
 80038f0:	50c4      	str	r4, [r0, r3]
 80038f2:	3304      	adds	r3, #4

080038f4 <LoopCopyDataInit>:
 80038f4:	18c4      	adds	r4, r0, r3
 80038f6:	428c      	cmp	r4, r1
 80038f8:	d3f9      	bcc.n	80038ee <CopyDataInit>
 80038fa:	4a0b      	ldr	r2, [pc, #44]	; (8003928 <LoopFillZerobss+0x22>)
 80038fc:	4c0b      	ldr	r4, [pc, #44]	; (800392c <LoopFillZerobss+0x26>)
 80038fe:	2300      	movs	r3, #0
 8003900:	e001      	b.n	8003906 <LoopFillZerobss>

08003902 <FillZerobss>:
 8003902:	6013      	str	r3, [r2, #0]
 8003904:	3204      	adds	r2, #4

08003906 <LoopFillZerobss>:
 8003906:	42a2      	cmp	r2, r4
 8003908:	d3fb      	bcc.n	8003902 <FillZerobss>
 800390a:	f7ff ff6d 	bl	80037e8 <SystemInit>
 800390e:	f014 fe9b 	bl	8018648 <__libc_init_array>
 8003912:	f7fe fd79 	bl	8002408 <main>
 8003916:	4770      	bx	lr
 8003918:	20020000 	.word	0x20020000
 800391c:	20000000 	.word	0x20000000
 8003920:	200000d8 	.word	0x200000d8
 8003924:	0801a238 	.word	0x0801a238
 8003928:	200000d8 	.word	0x200000d8
 800392c:	2000e850 	.word	0x2000e850

08003930 <ADC_IRQHandler>:
 8003930:	e7fe      	b.n	8003930 <ADC_IRQHandler>
	...

08003934 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003938:	4b0e      	ldr	r3, [pc, #56]	; (8003974 <HAL_Init+0x40>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a0d      	ldr	r2, [pc, #52]	; (8003974 <HAL_Init+0x40>)
 800393e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003942:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003944:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <HAL_Init+0x40>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a0a      	ldr	r2, [pc, #40]	; (8003974 <HAL_Init+0x40>)
 800394a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800394e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003950:	4b08      	ldr	r3, [pc, #32]	; (8003974 <HAL_Init+0x40>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a07      	ldr	r2, [pc, #28]	; (8003974 <HAL_Init+0x40>)
 8003956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800395a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800395c:	2003      	movs	r0, #3
 800395e:	f000 fbcc 	bl	80040fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003962:	200f      	movs	r0, #15
 8003964:	f7ff fe16 	bl	8003594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003968:	f7ff faca 	bl	8002f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40023c00 	.word	0x40023c00

08003978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800397c:	4b06      	ldr	r3, [pc, #24]	; (8003998 <HAL_IncTick+0x20>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	461a      	mov	r2, r3
 8003982:	4b06      	ldr	r3, [pc, #24]	; (800399c <HAL_IncTick+0x24>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4413      	add	r3, r2
 8003988:	4a04      	ldr	r2, [pc, #16]	; (800399c <HAL_IncTick+0x24>)
 800398a:	6013      	str	r3, [r2, #0]
}
 800398c:	bf00      	nop
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	20000018 	.word	0x20000018
 800399c:	20004d58 	.word	0x20004d58

080039a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  return uwTick;
 80039a4:	4b03      	ldr	r3, [pc, #12]	; (80039b4 <HAL_GetTick+0x14>)
 80039a6:	681b      	ldr	r3, [r3, #0]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	20004d58 	.word	0x20004d58

080039b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039c0:	f7ff ffee 	bl	80039a0 <HAL_GetTick>
 80039c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039d0:	d005      	beq.n	80039de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039d2:	4b0a      	ldr	r3, [pc, #40]	; (80039fc <HAL_Delay+0x44>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4413      	add	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039de:	bf00      	nop
 80039e0:	f7ff ffde 	bl	80039a0 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d8f7      	bhi.n	80039e0 <HAL_Delay+0x28>
  {
  }
}
 80039f0:	bf00      	nop
 80039f2:	bf00      	nop
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20000018 	.word	0x20000018

08003a00 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check ADC handle */
  if(hadc == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_ADC_Init+0x12>
  {
     return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e01b      	b.n	8003a4a <HAL_ADC_Init+0x4a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d102      	bne.n	8003a24 <HAL_ADC_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f817 	bl	8003a52 <HAL_ADC_MspInit>
  }
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set ADC parameters */
  ADC_Init(hadc);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f9d7 	bl	8003de0 <ADC_Init>
  
  /* Set ADC error code to none */
  hadc->ErrorCode = HAL_ADC_ERROR_NONE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_ADC_MspInit>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
	...

08003a68 <HAL_ADC_Start>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint16_t i = 0;
 8003a70:	2300      	movs	r3, #0
 8003a72:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d101      	bne.n	8003a82 <HAL_ADC_Start+0x1a>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	e053      	b.n	8003b2a <HAL_ADC_Start+0xc2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Check if an injected conversion is ongoing */
  if(hadc->State == HAL_ADC_STATE_BUSY_INJ)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b22      	cmp	r3, #34	; 0x22
 8003a94:	d104      	bne.n	8003aa0 <HAL_ADC_Start+0x38>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_BUSY_INJ_REG;  
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2232      	movs	r2, #50	; 0x32
 8003a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003a9e:	e003      	b.n	8003aa8 <HAL_ADC_Start+0x40>
  }
  else
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_BUSY_REG;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2212      	movs	r2, #18
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  } 
    
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d010      	beq.n	8003ad8 <HAL_ADC_Start+0x70>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0201 	orr.w	r2, r2, #1
 8003ac4:	609a      	str	r2, [r3, #8]
    
    /* Delay inserted to wait during Tstab time the ADC's stabilization */
    for(; i <= 540; i++)
 8003ac6:	e003      	b.n	8003ad0 <HAL_ADC_Start+0x68>
    {
      __NOP();
 8003ac8:	bf00      	nop
    for(; i <= 540; i++)
 8003aca:	89fb      	ldrh	r3, [r7, #14]
 8003acc:	3301      	adds	r3, #1
 8003ace:	81fb      	strh	r3, [r7, #14]
 8003ad0:	89fb      	ldrh	r3, [r7, #14]
 8003ad2:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 8003ad6:	d9f7      	bls.n	8003ac8 <HAL_ADC_Start+0x60>
    }
  }

  /* Check if Multimode enabled */
  if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003ad8:	4b17      	ldr	r3, [pc, #92]	; (8003b38 <HAL_ADC_Start+0xd0>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f003 031f 	and.w	r3, r3, #31
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10c      	bne.n	8003afe <HAL_ADC_Start+0x96>
  {
    /* if no external trigger present enable software conversion of regular channels */
    if(hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d119      	bne.n	8003b20 <HAL_ADC_Start+0xb8>
    {
      /* Enable the selected ADC software conversion for regular group */
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	e010      	b.n	8003b20 <HAL_ADC_Start+0xb8>
    }
  }
  else
  {
    /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
    if((hadc->Instance == ADC1) && (hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a0e      	ldr	r2, [pc, #56]	; (8003b3c <HAL_ADC_Start+0xd4>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d10b      	bne.n	8003b20 <HAL_ADC_Start+0xb8>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d107      	bne.n	8003b20 <HAL_ADC_Start+0xb8>
    {
      /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b1e:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40012300 	.word	0x40012300
 8003b3c:	40012000 	.word	0x40012000

08003b40 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout: Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60fb      	str	r3, [r7, #12]
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003b4e:	f7ff ff27 	bl	80039a0 <HAL_GetTick>
 8003b52:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003b54:	e018      	b.n	8003b88 <HAL_ADC_PollForConversion+0x48>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b5c:	d014      	beq.n	8003b88 <HAL_ADC_PollForConversion+0x48>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d007      	beq.n	8003b74 <HAL_ADC_PollForConversion+0x34>
 8003b64:	f7ff ff1c 	bl	80039a0 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d209      	bcs.n	8003b88 <HAL_ADC_PollForConversion+0x48>
      {
        hadc->State= HAL_ADC_STATE_TIMEOUT;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2203      	movs	r2, #3
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e016      	b.n	8003bb6 <HAL_ADC_PollForConversion+0x76>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d1df      	bne.n	8003b56 <HAL_ADC_PollForConversion+0x16>
      }
    }
  }
  
  /* Check if an injected conversion is ready */
  if(hadc->State == HAL_ADC_STATE_EOC_INJ)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b25      	cmp	r3, #37	; 0x25
 8003ba0:	d104      	bne.n	8003bac <HAL_ADC_PollForConversion+0x6c>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_EOC_INJ_REG;  
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2235      	movs	r2, #53	; 0x35
 8003ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003baa:	e003      	b.n	8003bb4 <HAL_ADC_PollForConversion+0x74>
  }
  else
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_EOC_REG;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2215      	movs	r2, #21
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <HAL_ADC_GetValue>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x18>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e0ed      	b.n	8003dcc <HAL_ADC_ConfigChannel+0x1f4>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b09      	cmp	r3, #9
 8003bfe:	d925      	bls.n	8003c4c <HAL_ADC_ConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68d9      	ldr	r1, [r3, #12]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4613      	mov	r3, r2
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	4413      	add	r3, r2
 8003c14:	3b1e      	subs	r3, #30
 8003c16:	2207      	movs	r2, #7
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	43da      	mvns	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	400a      	ands	r2, r1
 8003c24:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68d9      	ldr	r1, [r3, #12]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	4618      	mov	r0, r3
 8003c38:	4603      	mov	r3, r0
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	4403      	add	r3, r0
 8003c3e:	3b1e      	subs	r3, #30
 8003c40:	409a      	lsls	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	60da      	str	r2, [r3, #12]
 8003c4a:	e022      	b.n	8003c92 <HAL_ADC_ConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6919      	ldr	r1, [r3, #16]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	461a      	mov	r2, r3
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	4413      	add	r3, r2
 8003c60:	2207      	movs	r2, #7
 8003c62:	fa02 f303 	lsl.w	r3, r2, r3
 8003c66:	43da      	mvns	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	400a      	ands	r2, r1
 8003c6e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6919      	ldr	r1, [r3, #16]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	4618      	mov	r0, r3
 8003c82:	4603      	mov	r3, r0
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	4403      	add	r3, r0
 8003c88:	409a      	lsls	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b06      	cmp	r3, #6
 8003c98:	d824      	bhi.n	8003ce4 <HAL_ADC_ConfigChannel+0x10c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	3b05      	subs	r3, #5
 8003cac:	221f      	movs	r2, #31
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	43da      	mvns	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	400a      	ands	r2, r1
 8003cba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	4618      	mov	r0, r3
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	3b05      	subs	r3, #5
 8003cd6:	fa00 f203 	lsl.w	r2, r0, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	635a      	str	r2, [r3, #52]	; 0x34
 8003ce2:	e04c      	b.n	8003d7e <HAL_ADC_ConfigChannel+0x1a6>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2b0c      	cmp	r3, #12
 8003cea:	d824      	bhi.n	8003d36 <HAL_ADC_ConfigChannel+0x15e>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3b23      	subs	r3, #35	; 0x23
 8003cfe:	221f      	movs	r2, #31
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	43da      	mvns	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	400a      	ands	r2, r1
 8003d0c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	3b23      	subs	r3, #35	; 0x23
 8003d28:	fa00 f203 	lsl.w	r2, r0, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	631a      	str	r2, [r3, #48]	; 0x30
 8003d34:	e023      	b.n	8003d7e <HAL_ADC_ConfigChannel+0x1a6>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	3b41      	subs	r3, #65	; 0x41
 8003d48:	221f      	movs	r2, #31
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43da      	mvns	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	400a      	ands	r2, r1
 8003d56:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	4618      	mov	r0, r3
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	3b41      	subs	r3, #65	; 0x41
 8003d72:	fa00 f203 	lsl.w	r2, r0, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a15      	ldr	r2, [pc, #84]	; (8003dd8 <HAL_ADC_ConfigChannel+0x200>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d109      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x1c4>
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b12      	cmp	r3, #18
 8003d8e:	d105      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x1c4>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003d90:	4b12      	ldr	r3, [pc, #72]	; (8003ddc <HAL_ADC_ConfigChannel+0x204>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	4a11      	ldr	r2, [pc, #68]	; (8003ddc <HAL_ADC_ConfigChannel+0x204>)
 8003d96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d9a:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a0d      	ldr	r2, [pc, #52]	; (8003dd8 <HAL_ADC_ConfigChannel+0x200>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d10d      	bne.n	8003dc2 <HAL_ADC_ConfigChannel+0x1ea>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2b10      	cmp	r3, #16
 8003dac:	d003      	beq.n	8003db6 <HAL_ADC_ConfigChannel+0x1de>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b11      	cmp	r3, #17
 8003db4:	d105      	bne.n	8003dc2 <HAL_ADC_ConfigChannel+0x1ea>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003db6:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <HAL_ADC_ConfigChannel+0x204>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	4a08      	ldr	r2, [pc, #32]	; (8003ddc <HAL_ADC_ConfigChannel+0x204>)
 8003dbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003dc0:	6053      	str	r3, [r2, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	40012000 	.word	0x40012000
 8003ddc:	40012300 	.word	0x40012300

08003de0 <ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003de8:	4b6c      	ldr	r3, [pc, #432]	; (8003f9c <ADC_Init+0x1bc>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	4a6b      	ldr	r2, [pc, #428]	; (8003f9c <ADC_Init+0x1bc>)
 8003dee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003df2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003df4:	4b69      	ldr	r3, [pc, #420]	; (8003f9c <ADC_Init+0x1bc>)
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	4967      	ldr	r1, [pc, #412]	; (8003f9c <ADC_Init+0x1bc>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6859      	ldr	r1, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	021a      	lsls	r2, r3, #8
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003e34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6859      	ldr	r1, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6899      	ldr	r1, [r3, #8]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	609a      	str	r2, [r3, #8]
  
  /* Select external trigger to start conversion */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6899      	ldr	r1, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	609a      	str	r2, [r3, #8]

  /* Select external trigger polarity */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6899      	ldr	r1, [r3, #8]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0202 	bic.w	r2, r2, #2
 8003ebc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6899      	ldr	r1, [r3, #8]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	005a      	lsls	r2, r3, #1
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	609a      	str	r2, [r3, #8]
  
  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d01b      	beq.n	8003f12 <ADC_Init+0x132>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ee8:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003ef8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6859      	ldr	r1, [r3, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f04:	3b01      	subs	r3, #1
 8003f06:	035a      	lsls	r2, r3, #13
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	605a      	str	r2, [r3, #4]
 8003f10:	e007      	b.n	8003f22 <ADC_Init+0x142>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f20:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003f30:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	051a      	lsls	r2, r3, #20
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6899      	ldr	r1, [r3, #8]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	025a      	lsls	r2, r3, #9
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6899      	ldr	r1, [r3, #8]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	029a      	lsls	r2, r3, #10
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	609a      	str	r2, [r3, #8]
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	40012300 	.word	0x40012300

08003fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fb0:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fd2:	4a04      	ldr	r2, [pc, #16]	; (8003fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	60d3      	str	r3, [r2, #12]
}
 8003fd8:	bf00      	nop
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	e000ed00 	.word	0xe000ed00

08003fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fec:	4b04      	ldr	r3, [pc, #16]	; (8004000 <__NVIC_GetPriorityGrouping+0x18>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	0a1b      	lsrs	r3, r3, #8
 8003ff2:	f003 0307 	and.w	r3, r3, #7
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	e000ed00 	.word	0xe000ed00

08004004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	4603      	mov	r3, r0
 800400c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800400e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004012:	2b00      	cmp	r3, #0
 8004014:	db0b      	blt.n	800402e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004016:	79fb      	ldrb	r3, [r7, #7]
 8004018:	f003 021f 	and.w	r2, r3, #31
 800401c:	4907      	ldr	r1, [pc, #28]	; (800403c <__NVIC_EnableIRQ+0x38>)
 800401e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004022:	095b      	lsrs	r3, r3, #5
 8004024:	2001      	movs	r0, #1
 8004026:	fa00 f202 	lsl.w	r2, r0, r2
 800402a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	e000e100 	.word	0xe000e100

08004040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	4603      	mov	r3, r0
 8004048:	6039      	str	r1, [r7, #0]
 800404a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800404c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004050:	2b00      	cmp	r3, #0
 8004052:	db0a      	blt.n	800406a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	b2da      	uxtb	r2, r3
 8004058:	490c      	ldr	r1, [pc, #48]	; (800408c <__NVIC_SetPriority+0x4c>)
 800405a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800405e:	0112      	lsls	r2, r2, #4
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	440b      	add	r3, r1
 8004064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004068:	e00a      	b.n	8004080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	b2da      	uxtb	r2, r3
 800406e:	4908      	ldr	r1, [pc, #32]	; (8004090 <__NVIC_SetPriority+0x50>)
 8004070:	79fb      	ldrb	r3, [r7, #7]
 8004072:	f003 030f 	and.w	r3, r3, #15
 8004076:	3b04      	subs	r3, #4
 8004078:	0112      	lsls	r2, r2, #4
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	440b      	add	r3, r1
 800407e:	761a      	strb	r2, [r3, #24]
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	e000e100 	.word	0xe000e100
 8004090:	e000ed00 	.word	0xe000ed00

08004094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004094:	b480      	push	{r7}
 8004096:	b089      	sub	sp, #36	; 0x24
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	f1c3 0307 	rsb	r3, r3, #7
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	bf28      	it	cs
 80040b2:	2304      	movcs	r3, #4
 80040b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	3304      	adds	r3, #4
 80040ba:	2b06      	cmp	r3, #6
 80040bc:	d902      	bls.n	80040c4 <NVIC_EncodePriority+0x30>
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	3b03      	subs	r3, #3
 80040c2:	e000      	b.n	80040c6 <NVIC_EncodePriority+0x32>
 80040c4:	2300      	movs	r3, #0
 80040c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	fa02 f303 	lsl.w	r3, r2, r3
 80040d2:	43da      	mvns	r2, r3
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	401a      	ands	r2, r3
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	fa01 f303 	lsl.w	r3, r1, r3
 80040e6:	43d9      	mvns	r1, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040ec:	4313      	orrs	r3, r2
         );
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3724      	adds	r7, #36	; 0x24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b082      	sub	sp, #8
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff ff4c 	bl	8003fa0 <__NVIC_SetPriorityGrouping>
}
 8004108:	bf00      	nop
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	4603      	mov	r3, r0
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800411e:	2300      	movs	r3, #0
 8004120:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004122:	f7ff ff61 	bl	8003fe8 <__NVIC_GetPriorityGrouping>
 8004126:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	68b9      	ldr	r1, [r7, #8]
 800412c:	6978      	ldr	r0, [r7, #20]
 800412e:	f7ff ffb1 	bl	8004094 <NVIC_EncodePriority>
 8004132:	4602      	mov	r2, r0
 8004134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004138:	4611      	mov	r1, r2
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff ff80 	bl	8004040 <__NVIC_SetPriority>
}
 8004140:	bf00      	nop
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	4603      	mov	r3, r0
 8004150:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff ff54 	bl	8004004 <__NVIC_EnableIRQ>
}
 800415c:	bf00      	nop
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004170:	f7ff fc16 	bl	80039a0 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e099      	b.n	80042b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 0201 	bic.w	r2, r2, #1
 800419e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041a0:	e00f      	b.n	80041c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041a2:	f7ff fbfd 	bl	80039a0 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b05      	cmp	r3, #5
 80041ae:	d908      	bls.n	80041c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2220      	movs	r2, #32
 80041b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2203      	movs	r2, #3
 80041ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e078      	b.n	80042b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1e8      	bne.n	80041a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	4b38      	ldr	r3, [pc, #224]	; (80042bc <HAL_DMA_Init+0x158>)
 80041dc:	4013      	ands	r3, r2
 80041de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004206:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4313      	orrs	r3, r2
 8004212:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	2b04      	cmp	r3, #4
 800421a:	d107      	bne.n	800422c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004224:	4313      	orrs	r3, r2
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f023 0307 	bic.w	r3, r3, #7
 8004242:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	2b04      	cmp	r3, #4
 8004254:	d117      	bne.n	8004286 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	4313      	orrs	r3, r2
 800425e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00e      	beq.n	8004286 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 fb0f 	bl	800488c <DMA_CheckFifoParam>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d008      	beq.n	8004286 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2240      	movs	r2, #64	; 0x40
 8004278:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004282:	2301      	movs	r3, #1
 8004284:	e016      	b.n	80042b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 fac6 	bl	8004820 <DMA_CalcBaseAndBitshift>
 8004294:	4603      	mov	r3, r0
 8004296:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429c:	223f      	movs	r2, #63	; 0x3f
 800429e:	409a      	lsls	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	f010803f 	.word	0xf010803f

080042c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
 80042cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ce:	2300      	movs	r3, #0
 80042d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d101      	bne.n	80042e6 <HAL_DMA_Start_IT+0x26>
 80042e2:	2302      	movs	r3, #2
 80042e4:	e040      	b.n	8004368 <HAL_DMA_Start_IT+0xa8>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d12f      	bne.n	800435a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2202      	movs	r2, #2
 80042fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	68b9      	ldr	r1, [r7, #8]
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 fa58 	bl	80047c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004318:	223f      	movs	r2, #63	; 0x3f
 800431a:	409a      	lsls	r2, r3
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0216 	orr.w	r2, r2, #22
 800432e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004334:	2b00      	cmp	r3, #0
 8004336:	d007      	beq.n	8004348 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0208 	orr.w	r2, r2, #8
 8004346:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0201 	orr.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	e005      	b.n	8004366 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004362:	2302      	movs	r3, #2
 8004364:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004366:	7dfb      	ldrb	r3, [r7, #23]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800437e:	f7ff fb0f 	bl	80039a0 <HAL_GetTick>
 8004382:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d008      	beq.n	80043a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2280      	movs	r2, #128	; 0x80
 8004394:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e052      	b.n	8004448 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0216 	bic.w	r2, r2, #22
 80043b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695a      	ldr	r2, [r3, #20]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d103      	bne.n	80043d2 <HAL_DMA_Abort+0x62>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d007      	beq.n	80043e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0208 	bic.w	r2, r2, #8
 80043e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0201 	bic.w	r2, r2, #1
 80043f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043f2:	e013      	b.n	800441c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043f4:	f7ff fad4 	bl	80039a0 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b05      	cmp	r3, #5
 8004400:	d90c      	bls.n	800441c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2220      	movs	r2, #32
 8004406:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2203      	movs	r2, #3
 800440c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e015      	b.n	8004448 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e4      	bne.n	80043f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442e:	223f      	movs	r2, #63	; 0x3f
 8004430:	409a      	lsls	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d004      	beq.n	800446e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2280      	movs	r2, #128	; 0x80
 8004468:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e00c      	b.n	8004488 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2205      	movs	r2, #5
 8004472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0201 	bic.w	r2, r2, #1
 8004484:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80044a0:	4b8e      	ldr	r3, [pc, #568]	; (80046dc <HAL_DMA_IRQHandler+0x248>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a8e      	ldr	r2, [pc, #568]	; (80046e0 <HAL_DMA_IRQHandler+0x24c>)
 80044a6:	fba2 2303 	umull	r2, r3, r2, r3
 80044aa:	0a9b      	lsrs	r3, r3, #10
 80044ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044be:	2208      	movs	r2, #8
 80044c0:	409a      	lsls	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4013      	ands	r3, r2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d01a      	beq.n	8004500 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d013      	beq.n	8004500 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0204 	bic.w	r2, r2, #4
 80044e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ec:	2208      	movs	r2, #8
 80044ee:	409a      	lsls	r2, r3
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f8:	f043 0201 	orr.w	r2, r3, #1
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004504:	2201      	movs	r2, #1
 8004506:	409a      	lsls	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4013      	ands	r3, r2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d012      	beq.n	8004536 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00b      	beq.n	8004536 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004522:	2201      	movs	r2, #1
 8004524:	409a      	lsls	r2, r3
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452e:	f043 0202 	orr.w	r2, r3, #2
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453a:	2204      	movs	r2, #4
 800453c:	409a      	lsls	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4013      	ands	r3, r2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d012      	beq.n	800456c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00b      	beq.n	800456c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004558:	2204      	movs	r2, #4
 800455a:	409a      	lsls	r2, r3
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004564:	f043 0204 	orr.w	r2, r3, #4
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004570:	2210      	movs	r2, #16
 8004572:	409a      	lsls	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4013      	ands	r3, r2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d043      	beq.n	8004604 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	2b00      	cmp	r3, #0
 8004588:	d03c      	beq.n	8004604 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800458e:	2210      	movs	r2, #16
 8004590:	409a      	lsls	r2, r3
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d018      	beq.n	80045d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d108      	bne.n	80045c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d024      	beq.n	8004604 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	4798      	blx	r3
 80045c2:	e01f      	b.n	8004604 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d01b      	beq.n	8004604 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	4798      	blx	r3
 80045d4:	e016      	b.n	8004604 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d107      	bne.n	80045f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0208 	bic.w	r2, r2, #8
 80045f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004608:	2220      	movs	r2, #32
 800460a:	409a      	lsls	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4013      	ands	r3, r2
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 808f 	beq.w	8004734 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 8087 	beq.w	8004734 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800462a:	2220      	movs	r2, #32
 800462c:	409a      	lsls	r2, r3
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b05      	cmp	r3, #5
 800463c:	d136      	bne.n	80046ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0216 	bic.w	r2, r2, #22
 800464c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	695a      	ldr	r2, [r3, #20]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800465c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	d103      	bne.n	800466e <HAL_DMA_IRQHandler+0x1da>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800466a:	2b00      	cmp	r3, #0
 800466c:	d007      	beq.n	800467e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0208 	bic.w	r2, r2, #8
 800467c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004682:	223f      	movs	r2, #63	; 0x3f
 8004684:	409a      	lsls	r2, r3
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d07e      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	4798      	blx	r3
        }
        return;
 80046aa:	e079      	b.n	80047a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d01d      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10d      	bne.n	80046e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d031      	beq.n	8004734 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	4798      	blx	r3
 80046d8:	e02c      	b.n	8004734 <HAL_DMA_IRQHandler+0x2a0>
 80046da:	bf00      	nop
 80046dc:	20000010 	.word	0x20000010
 80046e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d023      	beq.n	8004734 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	4798      	blx	r3
 80046f4:	e01e      	b.n	8004734 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10f      	bne.n	8004724 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0210 	bic.w	r2, r2, #16
 8004712:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004738:	2b00      	cmp	r3, #0
 800473a:	d032      	beq.n	80047a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d022      	beq.n	800478e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2205      	movs	r2, #5
 800474c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0201 	bic.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	3301      	adds	r3, #1
 8004764:	60bb      	str	r3, [r7, #8]
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	429a      	cmp	r2, r3
 800476a:	d307      	bcc.n	800477c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1f2      	bne.n	8004760 <HAL_DMA_IRQHandler+0x2cc>
 800477a:	e000      	b.n	800477e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800477c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004792:	2b00      	cmp	r3, #0
 8004794:	d005      	beq.n	80047a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	4798      	blx	r3
 800479e:	e000      	b.n	80047a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80047a0:	bf00      	nop
    }
  }
}
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047b6:	b2db      	uxtb	r3, r3
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
 80047d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	2b40      	cmp	r3, #64	; 0x40
 80047f0:	d108      	bne.n	8004804 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004802:	e007      	b.n	8004814 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	60da      	str	r2, [r3, #12]
}
 8004814:	bf00      	nop
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	b2db      	uxtb	r3, r3
 800482e:	3b10      	subs	r3, #16
 8004830:	4a14      	ldr	r2, [pc, #80]	; (8004884 <DMA_CalcBaseAndBitshift+0x64>)
 8004832:	fba2 2303 	umull	r2, r3, r2, r3
 8004836:	091b      	lsrs	r3, r3, #4
 8004838:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800483a:	4a13      	ldr	r2, [pc, #76]	; (8004888 <DMA_CalcBaseAndBitshift+0x68>)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4413      	add	r3, r2
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	461a      	mov	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b03      	cmp	r3, #3
 800484c:	d909      	bls.n	8004862 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004856:	f023 0303 	bic.w	r3, r3, #3
 800485a:	1d1a      	adds	r2, r3, #4
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	659a      	str	r2, [r3, #88]	; 0x58
 8004860:	e007      	b.n	8004872 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800486a:	f023 0303 	bic.w	r3, r3, #3
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	aaaaaaab 	.word	0xaaaaaaab
 8004888:	08019704 	.word	0x08019704

0800488c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004894:	2300      	movs	r3, #0
 8004896:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d11f      	bne.n	80048e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	d856      	bhi.n	800495a <DMA_CheckFifoParam+0xce>
 80048ac:	a201      	add	r2, pc, #4	; (adr r2, 80048b4 <DMA_CheckFifoParam+0x28>)
 80048ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b2:	bf00      	nop
 80048b4:	080048c5 	.word	0x080048c5
 80048b8:	080048d7 	.word	0x080048d7
 80048bc:	080048c5 	.word	0x080048c5
 80048c0:	0800495b 	.word	0x0800495b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d046      	beq.n	800495e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048d4:	e043      	b.n	800495e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048de:	d140      	bne.n	8004962 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048e4:	e03d      	b.n	8004962 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ee:	d121      	bne.n	8004934 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d837      	bhi.n	8004966 <DMA_CheckFifoParam+0xda>
 80048f6:	a201      	add	r2, pc, #4	; (adr r2, 80048fc <DMA_CheckFifoParam+0x70>)
 80048f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fc:	0800490d 	.word	0x0800490d
 8004900:	08004913 	.word	0x08004913
 8004904:	0800490d 	.word	0x0800490d
 8004908:	08004925 	.word	0x08004925
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	73fb      	strb	r3, [r7, #15]
      break;
 8004910:	e030      	b.n	8004974 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004916:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d025      	beq.n	800496a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004922:	e022      	b.n	800496a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004928:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800492c:	d11f      	bne.n	800496e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004932:	e01c      	b.n	800496e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2b02      	cmp	r3, #2
 8004938:	d903      	bls.n	8004942 <DMA_CheckFifoParam+0xb6>
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2b03      	cmp	r3, #3
 800493e:	d003      	beq.n	8004948 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004940:	e018      	b.n	8004974 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	73fb      	strb	r3, [r7, #15]
      break;
 8004946:	e015      	b.n	8004974 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00e      	beq.n	8004972 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	73fb      	strb	r3, [r7, #15]
      break;
 8004958:	e00b      	b.n	8004972 <DMA_CheckFifoParam+0xe6>
      break;
 800495a:	bf00      	nop
 800495c:	e00a      	b.n	8004974 <DMA_CheckFifoParam+0xe8>
      break;
 800495e:	bf00      	nop
 8004960:	e008      	b.n	8004974 <DMA_CheckFifoParam+0xe8>
      break;
 8004962:	bf00      	nop
 8004964:	e006      	b.n	8004974 <DMA_CheckFifoParam+0xe8>
      break;
 8004966:	bf00      	nop
 8004968:	e004      	b.n	8004974 <DMA_CheckFifoParam+0xe8>
      break;
 800496a:	bf00      	nop
 800496c:	e002      	b.n	8004974 <DMA_CheckFifoParam+0xe8>
      break;   
 800496e:	bf00      	nop
 8004970:	e000      	b.n	8004974 <DMA_CheckFifoParam+0xe8>
      break;
 8004972:	bf00      	nop
    }
  } 
  
  return status; 
 8004974:	7bfb      	ldrb	r3, [r7, #15]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop

08004984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004984:	b480      	push	{r7}
 8004986:	b089      	sub	sp, #36	; 0x24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004992:	2300      	movs	r3, #0
 8004994:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004996:	2300      	movs	r3, #0
 8004998:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800499a:	2300      	movs	r3, #0
 800499c:	61fb      	str	r3, [r7, #28]
 800499e:	e159      	b.n	8004c54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80049a0:	2201      	movs	r2, #1
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	4013      	ands	r3, r2
 80049b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	f040 8148 	bne.w	8004c4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d005      	beq.n	80049d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d130      	bne.n	8004a38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	2203      	movs	r2, #3
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	43db      	mvns	r3, r3
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	4013      	ands	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	fa02 f303 	lsl.w	r3, r2, r3
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	43db      	mvns	r3, r3
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	091b      	lsrs	r3, r3, #4
 8004a22:	f003 0201 	and.w	r2, r3, #1
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f003 0303 	and.w	r3, r3, #3
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d017      	beq.n	8004a74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	2203      	movs	r2, #3
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	43db      	mvns	r3, r3
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	fa02 f303 	lsl.w	r3, r2, r3
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f003 0303 	and.w	r3, r3, #3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d123      	bne.n	8004ac8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	08da      	lsrs	r2, r3, #3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3208      	adds	r2, #8
 8004a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	220f      	movs	r2, #15
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	08da      	lsrs	r2, r3, #3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	3208      	adds	r2, #8
 8004ac2:	69b9      	ldr	r1, [r7, #24]
 8004ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	2203      	movs	r2, #3
 8004ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad8:	43db      	mvns	r3, r3
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	4013      	ands	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f003 0203 	and.w	r2, r3, #3
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	fa02 f303 	lsl.w	r3, r2, r3
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 80a2 	beq.w	8004c4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	4b57      	ldr	r3, [pc, #348]	; (8004c6c <HAL_GPIO_Init+0x2e8>)
 8004b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b12:	4a56      	ldr	r2, [pc, #344]	; (8004c6c <HAL_GPIO_Init+0x2e8>)
 8004b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b18:	6453      	str	r3, [r2, #68]	; 0x44
 8004b1a:	4b54      	ldr	r3, [pc, #336]	; (8004c6c <HAL_GPIO_Init+0x2e8>)
 8004b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b26:	4a52      	ldr	r2, [pc, #328]	; (8004c70 <HAL_GPIO_Init+0x2ec>)
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	089b      	lsrs	r3, r3, #2
 8004b2c:	3302      	adds	r3, #2
 8004b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	220f      	movs	r2, #15
 8004b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b42:	43db      	mvns	r3, r3
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	4013      	ands	r3, r2
 8004b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a49      	ldr	r2, [pc, #292]	; (8004c74 <HAL_GPIO_Init+0x2f0>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d019      	beq.n	8004b86 <HAL_GPIO_Init+0x202>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a48      	ldr	r2, [pc, #288]	; (8004c78 <HAL_GPIO_Init+0x2f4>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d013      	beq.n	8004b82 <HAL_GPIO_Init+0x1fe>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a47      	ldr	r2, [pc, #284]	; (8004c7c <HAL_GPIO_Init+0x2f8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d00d      	beq.n	8004b7e <HAL_GPIO_Init+0x1fa>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a46      	ldr	r2, [pc, #280]	; (8004c80 <HAL_GPIO_Init+0x2fc>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d007      	beq.n	8004b7a <HAL_GPIO_Init+0x1f6>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a45      	ldr	r2, [pc, #276]	; (8004c84 <HAL_GPIO_Init+0x300>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d101      	bne.n	8004b76 <HAL_GPIO_Init+0x1f2>
 8004b72:	2304      	movs	r3, #4
 8004b74:	e008      	b.n	8004b88 <HAL_GPIO_Init+0x204>
 8004b76:	2307      	movs	r3, #7
 8004b78:	e006      	b.n	8004b88 <HAL_GPIO_Init+0x204>
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e004      	b.n	8004b88 <HAL_GPIO_Init+0x204>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e002      	b.n	8004b88 <HAL_GPIO_Init+0x204>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e000      	b.n	8004b88 <HAL_GPIO_Init+0x204>
 8004b86:	2300      	movs	r3, #0
 8004b88:	69fa      	ldr	r2, [r7, #28]
 8004b8a:	f002 0203 	and.w	r2, r2, #3
 8004b8e:	0092      	lsls	r2, r2, #2
 8004b90:	4093      	lsls	r3, r2
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b98:	4935      	ldr	r1, [pc, #212]	; (8004c70 <HAL_GPIO_Init+0x2ec>)
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	089b      	lsrs	r3, r3, #2
 8004b9e:	3302      	adds	r3, #2
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ba6:	4b38      	ldr	r3, [pc, #224]	; (8004c88 <HAL_GPIO_Init+0x304>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	43db      	mvns	r3, r3
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bca:	4a2f      	ldr	r2, [pc, #188]	; (8004c88 <HAL_GPIO_Init+0x304>)
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004bd0:	4b2d      	ldr	r3, [pc, #180]	; (8004c88 <HAL_GPIO_Init+0x304>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004bf4:	4a24      	ldr	r2, [pc, #144]	; (8004c88 <HAL_GPIO_Init+0x304>)
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004bfa:	4b23      	ldr	r3, [pc, #140]	; (8004c88 <HAL_GPIO_Init+0x304>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	43db      	mvns	r3, r3
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	4013      	ands	r3, r2
 8004c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c1e:	4a1a      	ldr	r2, [pc, #104]	; (8004c88 <HAL_GPIO_Init+0x304>)
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c24:	4b18      	ldr	r3, [pc, #96]	; (8004c88 <HAL_GPIO_Init+0x304>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	4013      	ands	r3, r2
 8004c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c48:	4a0f      	ldr	r2, [pc, #60]	; (8004c88 <HAL_GPIO_Init+0x304>)
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	3301      	adds	r3, #1
 8004c52:	61fb      	str	r3, [r7, #28]
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	2b0f      	cmp	r3, #15
 8004c58:	f67f aea2 	bls.w	80049a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c5c:	bf00      	nop
 8004c5e:	bf00      	nop
 8004c60:	3724      	adds	r7, #36	; 0x24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	40013800 	.word	0x40013800
 8004c74:	40020000 	.word	0x40020000
 8004c78:	40020400 	.word	0x40020400
 8004c7c:	40020800 	.word	0x40020800
 8004c80:	40020c00 	.word	0x40020c00
 8004c84:	40021000 	.word	0x40021000
 8004c88:	40013c00 	.word	0x40013c00

08004c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	460b      	mov	r3, r1
 8004c96:	807b      	strh	r3, [r7, #2]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c9c:	787b      	ldrb	r3, [r7, #1]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ca2:	887a      	ldrh	r2, [r7, #2]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ca8:	e003      	b.n	8004cb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004caa:	887b      	ldrh	r3, [r7, #2]
 8004cac:	041a      	lsls	r2, r3, #16
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	619a      	str	r2, [r3, #24]
}
 8004cb2:	bf00      	nop
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
	...

08004cc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004cca:	4b08      	ldr	r3, [pc, #32]	; (8004cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ccc:	695a      	ldr	r2, [r3, #20]
 8004cce:	88fb      	ldrh	r3, [r7, #6]
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d006      	beq.n	8004ce4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004cd6:	4a05      	ldr	r2, [pc, #20]	; (8004cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cd8:	88fb      	ldrh	r3, [r7, #6]
 8004cda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004cdc:	88fb      	ldrh	r3, [r7, #6]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fc fcba 	bl	8001658 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ce4:	bf00      	nop
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	40013c00 	.word	0x40013c00

08004cf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e12b      	b.n	8004f5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d106      	bne.n	8004d1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7fe fa76 	bl	8003208 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2224      	movs	r2, #36	; 0x24
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0201 	bic.w	r2, r2, #1
 8004d32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d54:	f002 fa34 	bl	80071c0 <HAL_RCC_GetPCLK1Freq>
 8004d58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	4a81      	ldr	r2, [pc, #516]	; (8004f64 <HAL_I2C_Init+0x274>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d807      	bhi.n	8004d74 <HAL_I2C_Init+0x84>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4a80      	ldr	r2, [pc, #512]	; (8004f68 <HAL_I2C_Init+0x278>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	bf94      	ite	ls
 8004d6c:	2301      	movls	r3, #1
 8004d6e:	2300      	movhi	r3, #0
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	e006      	b.n	8004d82 <HAL_I2C_Init+0x92>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4a7d      	ldr	r2, [pc, #500]	; (8004f6c <HAL_I2C_Init+0x27c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	bf94      	ite	ls
 8004d7c:	2301      	movls	r3, #1
 8004d7e:	2300      	movhi	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e0e7      	b.n	8004f5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	4a78      	ldr	r2, [pc, #480]	; (8004f70 <HAL_I2C_Init+0x280>)
 8004d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d92:	0c9b      	lsrs	r3, r3, #18
 8004d94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	4a6a      	ldr	r2, [pc, #424]	; (8004f64 <HAL_I2C_Init+0x274>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d802      	bhi.n	8004dc4 <HAL_I2C_Init+0xd4>
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	e009      	b.n	8004dd8 <HAL_I2C_Init+0xe8>
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004dca:	fb02 f303 	mul.w	r3, r2, r3
 8004dce:	4a69      	ldr	r2, [pc, #420]	; (8004f74 <HAL_I2C_Init+0x284>)
 8004dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd4:	099b      	lsrs	r3, r3, #6
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6812      	ldr	r2, [r2, #0]
 8004ddc:	430b      	orrs	r3, r1
 8004dde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004dea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	495c      	ldr	r1, [pc, #368]	; (8004f64 <HAL_I2C_Init+0x274>)
 8004df4:	428b      	cmp	r3, r1
 8004df6:	d819      	bhi.n	8004e2c <HAL_I2C_Init+0x13c>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	1e59      	subs	r1, r3, #1
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e06:	1c59      	adds	r1, r3, #1
 8004e08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004e0c:	400b      	ands	r3, r1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00a      	beq.n	8004e28 <HAL_I2C_Init+0x138>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	1e59      	subs	r1, r3, #1
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e20:	3301      	adds	r3, #1
 8004e22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e26:	e051      	b.n	8004ecc <HAL_I2C_Init+0x1dc>
 8004e28:	2304      	movs	r3, #4
 8004e2a:	e04f      	b.n	8004ecc <HAL_I2C_Init+0x1dc>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d111      	bne.n	8004e58 <HAL_I2C_Init+0x168>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	1e58      	subs	r0, r3, #1
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6859      	ldr	r1, [r3, #4]
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	440b      	add	r3, r1
 8004e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e46:	3301      	adds	r3, #1
 8004e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	bf0c      	ite	eq
 8004e50:	2301      	moveq	r3, #1
 8004e52:	2300      	movne	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	e012      	b.n	8004e7e <HAL_I2C_Init+0x18e>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	1e58      	subs	r0, r3, #1
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6859      	ldr	r1, [r3, #4]
 8004e60:	460b      	mov	r3, r1
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	440b      	add	r3, r1
 8004e66:	0099      	lsls	r1, r3, #2
 8004e68:	440b      	add	r3, r1
 8004e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e6e:	3301      	adds	r3, #1
 8004e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	bf0c      	ite	eq
 8004e78:	2301      	moveq	r3, #1
 8004e7a:	2300      	movne	r3, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <HAL_I2C_Init+0x196>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e022      	b.n	8004ecc <HAL_I2C_Init+0x1dc>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10e      	bne.n	8004eac <HAL_I2C_Init+0x1bc>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	1e58      	subs	r0, r3, #1
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6859      	ldr	r1, [r3, #4]
 8004e96:	460b      	mov	r3, r1
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	440b      	add	r3, r1
 8004e9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eaa:	e00f      	b.n	8004ecc <HAL_I2C_Init+0x1dc>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	1e58      	subs	r0, r3, #1
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6859      	ldr	r1, [r3, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	440b      	add	r3, r1
 8004eba:	0099      	lsls	r1, r3, #2
 8004ebc:	440b      	add	r3, r1
 8004ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ec8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	6809      	ldr	r1, [r1, #0]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69da      	ldr	r2, [r3, #28]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004efa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	6911      	ldr	r1, [r2, #16]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	68d2      	ldr	r2, [r2, #12]
 8004f06:	4311      	orrs	r1, r2
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	6812      	ldr	r2, [r2, #0]
 8004f0c:	430b      	orrs	r3, r1
 8004f0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	695a      	ldr	r2, [r3, #20]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	431a      	orrs	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0201 	orr.w	r2, r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	000186a0 	.word	0x000186a0
 8004f68:	001e847f 	.word	0x001e847f
 8004f6c:	003d08ff 	.word	0x003d08ff
 8004f70:	431bde83 	.word	0x431bde83
 8004f74:	10624dd3 	.word	0x10624dd3

08004f78 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f98:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004fa2:	7bfb      	ldrb	r3, [r7, #15]
 8004fa4:	2b10      	cmp	r3, #16
 8004fa6:	d003      	beq.n	8004fb0 <HAL_I2C_EV_IRQHandler+0x38>
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
 8004faa:	2b40      	cmp	r3, #64	; 0x40
 8004fac:	f040 80b1 	bne.w	8005112 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10d      	bne.n	8004fe6 <HAL_I2C_EV_IRQHandler+0x6e>
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004fd0:	d003      	beq.n	8004fda <HAL_I2C_EV_IRQHandler+0x62>
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004fd8:	d101      	bne.n	8004fde <HAL_I2C_EV_IRQHandler+0x66>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <HAL_I2C_EV_IRQHandler+0x68>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	f000 8114 	beq.w	800520e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00b      	beq.n	8005008 <HAL_I2C_EV_IRQHandler+0x90>
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d006      	beq.n	8005008 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f001 fc54 	bl	80068a8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 fd5e 	bl	8005ac2 <I2C_Master_SB>
 8005006:	e083      	b.n	8005110 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	f003 0308 	and.w	r3, r3, #8
 800500e:	2b00      	cmp	r3, #0
 8005010:	d008      	beq.n	8005024 <HAL_I2C_EV_IRQHandler+0xac>
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 fdd6 	bl	8005bce <I2C_Master_ADD10>
 8005022:	e075      	b.n	8005110 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d008      	beq.n	8005040 <HAL_I2C_EV_IRQHandler+0xc8>
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 fdf2 	bl	8005c22 <I2C_Master_ADDR>
 800503e:	e067      	b.n	8005110 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	f003 0304 	and.w	r3, r3, #4
 8005046:	2b00      	cmp	r3, #0
 8005048:	d036      	beq.n	80050b8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005058:	f000 80db 	beq.w	8005212 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00d      	beq.n	8005082 <HAL_I2C_EV_IRQHandler+0x10a>
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800506c:	2b00      	cmp	r3, #0
 800506e:	d008      	beq.n	8005082 <HAL_I2C_EV_IRQHandler+0x10a>
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	f003 0304 	and.w	r3, r3, #4
 8005076:	2b00      	cmp	r3, #0
 8005078:	d103      	bne.n	8005082 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f9d6 	bl	800542c <I2C_MasterTransmit_TXE>
 8005080:	e046      	b.n	8005110 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 80c2 	beq.w	8005212 <HAL_I2C_EV_IRQHandler+0x29a>
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 80bc 	beq.w	8005212 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800509a:	7bbb      	ldrb	r3, [r7, #14]
 800509c:	2b21      	cmp	r3, #33	; 0x21
 800509e:	d103      	bne.n	80050a8 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 fa5f 	bl	8005564 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050a6:	e0b4      	b.n	8005212 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80050a8:	7bfb      	ldrb	r3, [r7, #15]
 80050aa:	2b40      	cmp	r3, #64	; 0x40
 80050ac:	f040 80b1 	bne.w	8005212 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 facd 	bl	8005650 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050b6:	e0ac      	b.n	8005212 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050c6:	f000 80a4 	beq.w	8005212 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00d      	beq.n	80050f0 <HAL_I2C_EV_IRQHandler+0x178>
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d008      	beq.n	80050f0 <HAL_I2C_EV_IRQHandler+0x178>
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d103      	bne.n	80050f0 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 fb45 	bl	8005778 <I2C_MasterReceive_RXNE>
 80050ee:	e00f      	b.n	8005110 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	f003 0304 	and.w	r3, r3, #4
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 808b 	beq.w	8005212 <HAL_I2C_EV_IRQHandler+0x29a>
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005102:	2b00      	cmp	r3, #0
 8005104:	f000 8085 	beq.w	8005212 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 fbf0 	bl	80058ee <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800510e:	e080      	b.n	8005212 <HAL_I2C_EV_IRQHandler+0x29a>
 8005110:	e07f      	b.n	8005212 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	2b00      	cmp	r3, #0
 8005118:	d004      	beq.n	8005124 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	61fb      	str	r3, [r7, #28]
 8005122:	e007      	b.n	8005134 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d011      	beq.n	8005162 <HAL_I2C_EV_IRQHandler+0x1ea>
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00c      	beq.n	8005162 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005158:	69b9      	ldr	r1, [r7, #24]
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 ffb0 	bl	80060c0 <I2C_Slave_ADDR>
 8005160:	e05a      	b.n	8005218 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	f003 0310 	and.w	r3, r3, #16
 8005168:	2b00      	cmp	r3, #0
 800516a:	d008      	beq.n	800517e <HAL_I2C_EV_IRQHandler+0x206>
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 ffea 	bl	8006150 <I2C_Slave_STOPF>
 800517c:	e04c      	b.n	8005218 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800517e:	7bbb      	ldrb	r3, [r7, #14]
 8005180:	2b21      	cmp	r3, #33	; 0x21
 8005182:	d002      	beq.n	800518a <HAL_I2C_EV_IRQHandler+0x212>
 8005184:	7bbb      	ldrb	r3, [r7, #14]
 8005186:	2b29      	cmp	r3, #41	; 0x29
 8005188:	d120      	bne.n	80051cc <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00d      	beq.n	80051b0 <HAL_I2C_EV_IRQHandler+0x238>
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800519a:	2b00      	cmp	r3, #0
 800519c:	d008      	beq.n	80051b0 <HAL_I2C_EV_IRQHandler+0x238>
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d103      	bne.n	80051b0 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 fecb 	bl	8005f44 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051ae:	e032      	b.n	8005216 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	f003 0304 	and.w	r3, r3, #4
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d02d      	beq.n	8005216 <HAL_I2C_EV_IRQHandler+0x29e>
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d028      	beq.n	8005216 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 fefa 	bl	8005fbe <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051ca:	e024      	b.n	8005216 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00d      	beq.n	80051f2 <HAL_I2C_EV_IRQHandler+0x27a>
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d008      	beq.n	80051f2 <HAL_I2C_EV_IRQHandler+0x27a>
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	f003 0304 	and.w	r3, r3, #4
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d103      	bne.n	80051f2 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 ff08 	bl	8006000 <I2C_SlaveReceive_RXNE>
 80051f0:	e012      	b.n	8005218 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	f003 0304 	and.w	r3, r3, #4
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00d      	beq.n	8005218 <HAL_I2C_EV_IRQHandler+0x2a0>
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005202:	2b00      	cmp	r3, #0
 8005204:	d008      	beq.n	8005218 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 ff38 	bl	800607c <I2C_SlaveReceive_BTF>
 800520c:	e004      	b.n	8005218 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800520e:	bf00      	nop
 8005210:	e002      	b.n	8005218 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005212:	bf00      	nop
 8005214:	e000      	b.n	8005218 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005216:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005218:	3720      	adds	r7, #32
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b08a      	sub	sp, #40	; 0x28
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005236:	2300      	movs	r3, #0
 8005238:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005240:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00d      	beq.n	8005268 <HAL_I2C_ER_IRQHandler+0x4a>
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005252:	2b00      	cmp	r3, #0
 8005254:	d008      	beq.n	8005268 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	f043 0301 	orr.w	r3, r3, #1
 800525c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005266:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00d      	beq.n	800528e <HAL_I2C_ER_IRQHandler+0x70>
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005278:	2b00      	cmp	r3, #0
 800527a:	d008      	beq.n	800528e <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	f043 0302 	orr.w	r3, r3, #2
 8005282:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800528c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005294:	2b00      	cmp	r3, #0
 8005296:	d03e      	beq.n	8005316 <HAL_I2C_ER_IRQHandler+0xf8>
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d039      	beq.n	8005316 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80052a2:	7efb      	ldrb	r3, [r7, #27]
 80052a4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ba:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80052bc:	7ebb      	ldrb	r3, [r7, #26]
 80052be:	2b20      	cmp	r3, #32
 80052c0:	d112      	bne.n	80052e8 <HAL_I2C_ER_IRQHandler+0xca>
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10f      	bne.n	80052e8 <HAL_I2C_ER_IRQHandler+0xca>
 80052c8:	7cfb      	ldrb	r3, [r7, #19]
 80052ca:	2b21      	cmp	r3, #33	; 0x21
 80052cc:	d008      	beq.n	80052e0 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80052ce:	7cfb      	ldrb	r3, [r7, #19]
 80052d0:	2b29      	cmp	r3, #41	; 0x29
 80052d2:	d005      	beq.n	80052e0 <HAL_I2C_ER_IRQHandler+0xc2>
 80052d4:	7cfb      	ldrb	r3, [r7, #19]
 80052d6:	2b28      	cmp	r3, #40	; 0x28
 80052d8:	d106      	bne.n	80052e8 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2b21      	cmp	r3, #33	; 0x21
 80052de:	d103      	bne.n	80052e8 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f001 f865 	bl	80063b0 <I2C_Slave_AF>
 80052e6:	e016      	b.n	8005316 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052f0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	f043 0304 	orr.w	r3, r3, #4
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80052fa:	7efb      	ldrb	r3, [r7, #27]
 80052fc:	2b10      	cmp	r3, #16
 80052fe:	d002      	beq.n	8005306 <HAL_I2C_ER_IRQHandler+0xe8>
 8005300:	7efb      	ldrb	r3, [r7, #27]
 8005302:	2b40      	cmp	r3, #64	; 0x40
 8005304:	d107      	bne.n	8005316 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005314:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00d      	beq.n	800533c <HAL_I2C_ER_IRQHandler+0x11e>
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005326:	2b00      	cmp	r3, #0
 8005328:	d008      	beq.n	800533c <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	f043 0308 	orr.w	r3, r3, #8
 8005330:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800533a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800533c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533e:	2b00      	cmp	r3, #0
 8005340:	d008      	beq.n	8005354 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	431a      	orrs	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f001 f89e 	bl	8006490 <I2C_ITError>
  }
}
 8005354:	bf00      	nop
 8005356:	3728      	adds	r7, #40	; 0x28
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	460b      	mov	r3, r1
 80053b6:	70fb      	strb	r3, [r7, #3]
 80053b8:	4613      	mov	r3, r2
 80053ba:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800543a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005442:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005448:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800544e:	2b00      	cmp	r3, #0
 8005450:	d150      	bne.n	80054f4 <I2C_MasterTransmit_TXE+0xc8>
 8005452:	7bfb      	ldrb	r3, [r7, #15]
 8005454:	2b21      	cmp	r3, #33	; 0x21
 8005456:	d14d      	bne.n	80054f4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2b08      	cmp	r3, #8
 800545c:	d01d      	beq.n	800549a <I2C_MasterTransmit_TXE+0x6e>
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	2b20      	cmp	r3, #32
 8005462:	d01a      	beq.n	800549a <I2C_MasterTransmit_TXE+0x6e>
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800546a:	d016      	beq.n	800549a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800547a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2211      	movs	r2, #17
 8005480:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2220      	movs	r2, #32
 800548e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7ff ff62 	bl	800535c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005498:	e060      	b.n	800555c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054a8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054b8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2220      	movs	r2, #32
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b40      	cmp	r3, #64	; 0x40
 80054d2:	d107      	bne.n	80054e4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7ff ff7d 	bl	80053dc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054e2:	e03b      	b.n	800555c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f7ff ff35 	bl	800535c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054f2:	e033      	b.n	800555c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
 80054f6:	2b21      	cmp	r3, #33	; 0x21
 80054f8:	d005      	beq.n	8005506 <I2C_MasterTransmit_TXE+0xda>
 80054fa:	7bbb      	ldrb	r3, [r7, #14]
 80054fc:	2b40      	cmp	r3, #64	; 0x40
 80054fe:	d12d      	bne.n	800555c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005500:	7bfb      	ldrb	r3, [r7, #15]
 8005502:	2b22      	cmp	r3, #34	; 0x22
 8005504:	d12a      	bne.n	800555c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800550a:	b29b      	uxth	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d108      	bne.n	8005522 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800551e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005520:	e01c      	b.n	800555c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b40      	cmp	r3, #64	; 0x40
 800552c:	d103      	bne.n	8005536 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f88e 	bl	8005650 <I2C_MemoryTransmit_TXE_BTF>
}
 8005534:	e012      	b.n	800555c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	781a      	ldrb	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	1c5a      	adds	r2, r3, #1
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005550:	b29b      	uxth	r3, r3
 8005552:	3b01      	subs	r3, #1
 8005554:	b29a      	uxth	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800555a:	e7ff      	b.n	800555c <I2C_MasterTransmit_TXE+0x130>
 800555c:	bf00      	nop
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005570:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b21      	cmp	r3, #33	; 0x21
 800557c:	d164      	bne.n	8005648 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005582:	b29b      	uxth	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d012      	beq.n	80055ae <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	781a      	ldrb	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	1c5a      	adds	r2, r3, #1
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	3b01      	subs	r3, #1
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80055ac:	e04c      	b.n	8005648 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d01d      	beq.n	80055f0 <I2C_MasterTransmit_BTF+0x8c>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2b20      	cmp	r3, #32
 80055b8:	d01a      	beq.n	80055f0 <I2C_MasterTransmit_BTF+0x8c>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055c0:	d016      	beq.n	80055f0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055d0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2211      	movs	r2, #17
 80055d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2220      	movs	r2, #32
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7ff feb7 	bl	800535c <HAL_I2C_MasterTxCpltCallback>
}
 80055ee:	e02b      	b.n	8005648 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055fe:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800560e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2220      	movs	r2, #32
 800561a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b40      	cmp	r3, #64	; 0x40
 8005628:	d107      	bne.n	800563a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7ff fed2 	bl	80053dc <HAL_I2C_MemTxCpltCallback>
}
 8005638:	e006      	b.n	8005648 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7ff fe8a 	bl	800535c <HAL_I2C_MasterTxCpltCallback>
}
 8005648:	bf00      	nop
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800565e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005664:	2b00      	cmp	r3, #0
 8005666:	d11d      	bne.n	80056a4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800566c:	2b01      	cmp	r3, #1
 800566e:	d10b      	bne.n	8005688 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005674:	b2da      	uxtb	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005680:	1c9a      	adds	r2, r3, #2
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005686:	e073      	b.n	8005770 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800568c:	b29b      	uxth	r3, r3
 800568e:	121b      	asrs	r3, r3, #8
 8005690:	b2da      	uxtb	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800569c:	1c5a      	adds	r2, r3, #1
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80056a2:	e065      	b.n	8005770 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d10b      	bne.n	80056c4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056bc:	1c5a      	adds	r2, r3, #1
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80056c2:	e055      	b.n	8005770 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d151      	bne.n	8005770 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80056cc:	7bfb      	ldrb	r3, [r7, #15]
 80056ce:	2b22      	cmp	r3, #34	; 0x22
 80056d0:	d10d      	bne.n	80056ee <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056e0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	651a      	str	r2, [r3, #80]	; 0x50
}
 80056ec:	e040      	b.n	8005770 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d015      	beq.n	8005724 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
 80056fa:	2b21      	cmp	r3, #33	; 0x21
 80056fc:	d112      	bne.n	8005724 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005702:	781a      	ldrb	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	1c5a      	adds	r2, r3, #1
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005718:	b29b      	uxth	r3, r3
 800571a:	3b01      	subs	r3, #1
 800571c:	b29a      	uxth	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005722:	e025      	b.n	8005770 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005728:	b29b      	uxth	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d120      	bne.n	8005770 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800572e:	7bfb      	ldrb	r3, [r7, #15]
 8005730:	2b21      	cmp	r3, #33	; 0x21
 8005732:	d11d      	bne.n	8005770 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005742:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005752:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2220      	movs	r2, #32
 800575e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7ff fe36 	bl	80053dc <HAL_I2C_MemTxCpltCallback>
}
 8005770:	bf00      	nop
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b22      	cmp	r3, #34	; 0x22
 800578a:	f040 80ac 	bne.w	80058e6 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005792:	b29b      	uxth	r3, r3
 8005794:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2b03      	cmp	r3, #3
 800579a:	d921      	bls.n	80057e0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691a      	ldr	r2, [r3, #16]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	1c5a      	adds	r2, r3, #1
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	3b01      	subs	r3, #1
 80057bc:	b29a      	uxth	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	2b03      	cmp	r3, #3
 80057ca:	f040 808c 	bne.w	80058e6 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057dc:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80057de:	e082      	b.n	80058e6 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d075      	beq.n	80058d4 <I2C_MasterReceive_RXNE+0x15c>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d002      	beq.n	80057f4 <I2C_MasterReceive_RXNE+0x7c>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d16f      	bne.n	80058d4 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f001 f825 	bl	8006844 <I2C_WaitOnSTOPRequestThroughIT>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d142      	bne.n	8005886 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800580e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800581e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	691a      	ldr	r2, [r3, #16]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	b2d2      	uxtb	r2, r2
 800582c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583c:	b29b      	uxth	r3, r3
 800583e:	3b01      	subs	r3, #1
 8005840:	b29a      	uxth	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2220      	movs	r2, #32
 800584a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b40      	cmp	r3, #64	; 0x40
 8005858:	d10a      	bne.n	8005870 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7ff fdc1 	bl	80053f0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800586e:	e03a      	b.n	80058e6 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2212      	movs	r2, #18
 800587c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7ff fd76 	bl	8005370 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005884:	e02f      	b.n	80058e6 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005894:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	691a      	ldr	r2, [r3, #16]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	3b01      	subs	r3, #1
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2220      	movs	r2, #32
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7ff fd99 	bl	8005404 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80058d2:	e008      	b.n	80058e6 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058e2:	605a      	str	r2, [r3, #4]
}
 80058e4:	e7ff      	b.n	80058e6 <I2C_MasterReceive_RXNE+0x16e>
 80058e6:	bf00      	nop
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b084      	sub	sp, #16
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fa:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b04      	cmp	r3, #4
 8005904:	d11b      	bne.n	800593e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005914:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	691a      	ldr	r2, [r3, #16]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005920:	b2d2      	uxtb	r2, r2
 8005922:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	1c5a      	adds	r2, r3, #1
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005932:	b29b      	uxth	r3, r3
 8005934:	3b01      	subs	r3, #1
 8005936:	b29a      	uxth	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800593c:	e0bd      	b.n	8005aba <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005942:	b29b      	uxth	r3, r3
 8005944:	2b03      	cmp	r3, #3
 8005946:	d129      	bne.n	800599c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005956:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2b04      	cmp	r3, #4
 800595c:	d00a      	beq.n	8005974 <I2C_MasterReceive_BTF+0x86>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2b02      	cmp	r3, #2
 8005962:	d007      	beq.n	8005974 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005972:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	691a      	ldr	r2, [r3, #16]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	1c5a      	adds	r2, r3, #1
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005990:	b29b      	uxth	r3, r3
 8005992:	3b01      	subs	r3, #1
 8005994:	b29a      	uxth	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800599a:	e08e      	b.n	8005aba <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d176      	bne.n	8005a94 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d002      	beq.n	80059b2 <I2C_MasterReceive_BTF+0xc4>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2b10      	cmp	r3, #16
 80059b0:	d108      	bne.n	80059c4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	e019      	b.n	80059f8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	d002      	beq.n	80059d0 <I2C_MasterReceive_BTF+0xe2>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d108      	bne.n	80059e2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	e00a      	b.n	80059f8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b10      	cmp	r3, #16
 80059e6:	d007      	beq.n	80059f8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059f6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691a      	ldr	r2, [r3, #16]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	b2d2      	uxtb	r2, r2
 8005a04:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	1c5a      	adds	r2, r3, #1
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	3b01      	subs	r3, #1
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	691a      	ldr	r2, [r3, #16]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	1c5a      	adds	r2, r3, #1
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005a52:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b40      	cmp	r3, #64	; 0x40
 8005a66:	d10a      	bne.n	8005a7e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7ff fcba 	bl	80053f0 <HAL_I2C_MemRxCpltCallback>
}
 8005a7c:	e01d      	b.n	8005aba <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2212      	movs	r2, #18
 8005a8a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f7ff fc6f 	bl	8005370 <HAL_I2C_MasterRxCpltCallback>
}
 8005a92:	e012      	b.n	8005aba <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	691a      	ldr	r2, [r3, #16]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005aba:	bf00      	nop
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b083      	sub	sp, #12
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b40      	cmp	r3, #64	; 0x40
 8005ad4:	d117      	bne.n	8005b06 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d109      	bne.n	8005af2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005aee:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005af0:	e067      	b.n	8005bc2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	f043 0301 	orr.w	r3, r3, #1
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	611a      	str	r2, [r3, #16]
}
 8005b04:	e05d      	b.n	8005bc2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b0e:	d133      	bne.n	8005b78 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b21      	cmp	r3, #33	; 0x21
 8005b1a:	d109      	bne.n	8005b30 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	461a      	mov	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b2c:	611a      	str	r2, [r3, #16]
 8005b2e:	e008      	b.n	8005b42 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	f043 0301 	orr.w	r3, r3, #1
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d004      	beq.n	8005b54 <I2C_Master_SB+0x92>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d108      	bne.n	8005b66 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d032      	beq.n	8005bc2 <I2C_Master_SB+0x100>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d02d      	beq.n	8005bc2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b74:	605a      	str	r2, [r3, #4]
}
 8005b76:	e024      	b.n	8005bc2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10e      	bne.n	8005b9e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	11db      	asrs	r3, r3, #7
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	f003 0306 	and.w	r3, r3, #6
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	f063 030f 	orn	r3, r3, #15
 8005b94:	b2da      	uxtb	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	611a      	str	r2, [r3, #16]
}
 8005b9c:	e011      	b.n	8005bc2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d10d      	bne.n	8005bc2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	11db      	asrs	r3, r3, #7
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	f003 0306 	and.w	r3, r3, #6
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	f063 030e 	orn	r3, r3, #14
 8005bba:	b2da      	uxtb	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	611a      	str	r2, [r3, #16]
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b083      	sub	sp, #12
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d004      	beq.n	8005bf4 <I2C_Master_ADD10+0x26>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d108      	bne.n	8005c06 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00c      	beq.n	8005c16 <I2C_Master_ADD10+0x48>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d007      	beq.n	8005c16 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c14:	605a      	str	r2, [r3, #4]
  }
}
 8005c16:	bf00      	nop
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b091      	sub	sp, #68	; 0x44
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c38:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b22      	cmp	r3, #34	; 0x22
 8005c4a:	f040 8169 	bne.w	8005f20 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10f      	bne.n	8005c76 <I2C_Master_ADDR+0x54>
 8005c56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005c5a:	2b40      	cmp	r3, #64	; 0x40
 8005c5c:	d10b      	bne.n	8005c76 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c5e:	2300      	movs	r3, #0
 8005c60:	633b      	str	r3, [r7, #48]	; 0x30
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	633b      	str	r3, [r7, #48]	; 0x30
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	633b      	str	r3, [r7, #48]	; 0x30
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c74:	e160      	b.n	8005f38 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d11d      	bne.n	8005cba <I2C_Master_ADDR+0x98>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c86:	d118      	bne.n	8005cba <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c88:	2300      	movs	r3, #0
 8005c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cac:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	651a      	str	r2, [r3, #80]	; 0x50
 8005cb8:	e13e      	b.n	8005f38 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d113      	bne.n	8005cec <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	e115      	b.n	8005f18 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	f040 808a 	bne.w	8005e0c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005cfe:	d137      	bne.n	8005d70 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d0e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d1e:	d113      	bne.n	8005d48 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d2e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d30:	2300      	movs	r3, #0
 8005d32:	627b      	str	r3, [r7, #36]	; 0x24
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	627b      	str	r3, [r7, #36]	; 0x24
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	e0e7      	b.n	8005f18 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d48:	2300      	movs	r3, #0
 8005d4a:	623b      	str	r3, [r7, #32]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	623b      	str	r3, [r7, #32]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	623b      	str	r3, [r7, #32]
 8005d5c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	e0d3      	b.n	8005f18 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d72:	2b08      	cmp	r3, #8
 8005d74:	d02e      	beq.n	8005dd4 <I2C_Master_ADDR+0x1b2>
 8005d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d78:	2b20      	cmp	r3, #32
 8005d7a:	d02b      	beq.n	8005dd4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d7e:	2b12      	cmp	r3, #18
 8005d80:	d102      	bne.n	8005d88 <I2C_Master_ADDR+0x166>
 8005d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d125      	bne.n	8005dd4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	d00e      	beq.n	8005dac <I2C_Master_ADDR+0x18a>
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d00b      	beq.n	8005dac <I2C_Master_ADDR+0x18a>
 8005d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d96:	2b10      	cmp	r3, #16
 8005d98:	d008      	beq.n	8005dac <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	e007      	b.n	8005dbc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dba:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	61fb      	str	r3, [r7, #28]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	61fb      	str	r3, [r7, #28]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	61fb      	str	r3, [r7, #28]
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	e0a1      	b.n	8005f18 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005de2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005de4:	2300      	movs	r3, #0
 8005de6:	61bb      	str	r3, [r7, #24]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	61bb      	str	r3, [r7, #24]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	61bb      	str	r3, [r7, #24]
 8005df8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e08:	601a      	str	r2, [r3, #0]
 8005e0a:	e085      	b.n	8005f18 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d14d      	bne.n	8005eb2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e18:	2b04      	cmp	r3, #4
 8005e1a:	d016      	beq.n	8005e4a <I2C_Master_ADDR+0x228>
 8005e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d013      	beq.n	8005e4a <I2C_Master_ADDR+0x228>
 8005e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e24:	2b10      	cmp	r3, #16
 8005e26:	d010      	beq.n	8005e4a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e36:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e46:	601a      	str	r2, [r3, #0]
 8005e48:	e007      	b.n	8005e5a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e58:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e68:	d117      	bne.n	8005e9a <I2C_Master_ADDR+0x278>
 8005e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e70:	d00b      	beq.n	8005e8a <I2C_Master_ADDR+0x268>
 8005e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d008      	beq.n	8005e8a <I2C_Master_ADDR+0x268>
 8005e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7a:	2b08      	cmp	r3, #8
 8005e7c:	d005      	beq.n	8005e8a <I2C_Master_ADDR+0x268>
 8005e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e80:	2b10      	cmp	r3, #16
 8005e82:	d002      	beq.n	8005e8a <I2C_Master_ADDR+0x268>
 8005e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e86:	2b20      	cmp	r3, #32
 8005e88:	d107      	bne.n	8005e9a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e98:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	617b      	str	r3, [r7, #20]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	617b      	str	r3, [r7, #20]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	617b      	str	r3, [r7, #20]
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	e032      	b.n	8005f18 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ec0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ecc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ed0:	d117      	bne.n	8005f02 <I2C_Master_ADDR+0x2e0>
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ed8:	d00b      	beq.n	8005ef2 <I2C_Master_ADDR+0x2d0>
 8005eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d008      	beq.n	8005ef2 <I2C_Master_ADDR+0x2d0>
 8005ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee2:	2b08      	cmp	r3, #8
 8005ee4:	d005      	beq.n	8005ef2 <I2C_Master_ADDR+0x2d0>
 8005ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee8:	2b10      	cmp	r3, #16
 8005eea:	d002      	beq.n	8005ef2 <I2C_Master_ADDR+0x2d0>
 8005eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eee:	2b20      	cmp	r3, #32
 8005ef0:	d107      	bne.n	8005f02 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f00:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f02:	2300      	movs	r3, #0
 8005f04:	613b      	str	r3, [r7, #16]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	613b      	str	r3, [r7, #16]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	613b      	str	r3, [r7, #16]
 8005f16:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005f1e:	e00b      	b.n	8005f38 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f20:	2300      	movs	r3, #0
 8005f22:	60fb      	str	r3, [r7, #12]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	60fb      	str	r3, [r7, #12]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	68fb      	ldr	r3, [r7, #12]
}
 8005f36:	e7ff      	b.n	8005f38 <I2C_Master_ADDR+0x316>
 8005f38:	bf00      	nop
 8005f3a:	3744      	adds	r7, #68	; 0x44
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f52:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d02b      	beq.n	8005fb6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	781a      	ldrb	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d114      	bne.n	8005fb6 <I2C_SlaveTransmit_TXE+0x72>
 8005f8c:	7bfb      	ldrb	r3, [r7, #15]
 8005f8e:	2b29      	cmp	r3, #41	; 0x29
 8005f90:	d111      	bne.n	8005fb6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fa0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2221      	movs	r2, #33	; 0x21
 8005fa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2228      	movs	r2, #40	; 0x28
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7ff f9e7 	bl	8005384 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005fb6:	bf00      	nop
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b083      	sub	sp, #12
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d011      	beq.n	8005ff4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd4:	781a      	ldrb	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800600e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006014:	b29b      	uxth	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d02c      	beq.n	8006074 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	691a      	ldr	r2, [r3, #16]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006024:	b2d2      	uxtb	r2, r2
 8006026:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602c:	1c5a      	adds	r2, r3, #1
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006036:	b29b      	uxth	r3, r3
 8006038:	3b01      	subs	r3, #1
 800603a:	b29a      	uxth	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006044:	b29b      	uxth	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d114      	bne.n	8006074 <I2C_SlaveReceive_RXNE+0x74>
 800604a:	7bfb      	ldrb	r3, [r7, #15]
 800604c:	2b2a      	cmp	r3, #42	; 0x2a
 800604e:	d111      	bne.n	8006074 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800605e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2222      	movs	r2, #34	; 0x22
 8006064:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2228      	movs	r2, #40	; 0x28
 800606a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7ff f992 	bl	8005398 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006074:	bf00      	nop
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006088:	b29b      	uxth	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d012      	beq.n	80060b4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	691a      	ldr	r2, [r3, #16]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80060ca:	2300      	movs	r3, #0
 80060cc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80060da:	2b28      	cmp	r3, #40	; 0x28
 80060dc:	d125      	bne.n	800612a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ec:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	f003 0304 	and.w	r3, r3, #4
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d101      	bne.n	80060fc <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80060f8:	2301      	movs	r3, #1
 80060fa:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006102:	2b00      	cmp	r3, #0
 8006104:	d103      	bne.n	800610e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	81bb      	strh	r3, [r7, #12]
 800610c:	e002      	b.n	8006114 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800611c:	89ba      	ldrh	r2, [r7, #12]
 800611e:	7bfb      	ldrb	r3, [r7, #15]
 8006120:	4619      	mov	r1, r3
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7ff f942 	bl	80053ac <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006128:	e00e      	b.n	8006148 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800612a:	2300      	movs	r3, #0
 800612c:	60bb      	str	r3, [r7, #8]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	60bb      	str	r3, [r7, #8]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	60bb      	str	r3, [r7, #8]
 800613e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006148:	bf00      	nop
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800615e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800616e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006170:	2300      	movs	r3, #0
 8006172:	60bb      	str	r3, [r7, #8]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	60bb      	str	r3, [r7, #8]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f042 0201 	orr.w	r2, r2, #1
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800619c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061ac:	d172      	bne.n	8006294 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
 80061b0:	2b22      	cmp	r3, #34	; 0x22
 80061b2:	d002      	beq.n	80061ba <I2C_Slave_STOPF+0x6a>
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
 80061b6:	2b2a      	cmp	r3, #42	; 0x2a
 80061b8:	d135      	bne.n	8006226 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d005      	beq.n	80061de <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	f043 0204 	orr.w	r2, r3, #4
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fe fad8 	bl	80047a8 <HAL_DMA_GetState>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d049      	beq.n	8006292 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006202:	4a69      	ldr	r2, [pc, #420]	; (80063a8 <I2C_Slave_STOPF+0x258>)
 8006204:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620a:	4618      	mov	r0, r3
 800620c:	f7fe f920 	bl	8004450 <HAL_DMA_Abort_IT>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d03d      	beq.n	8006292 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006220:	4610      	mov	r0, r2
 8006222:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006224:	e035      	b.n	8006292 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	b29a      	uxth	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006238:	b29b      	uxth	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d005      	beq.n	800624a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006242:	f043 0204 	orr.w	r2, r3, #4
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006258:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800625e:	4618      	mov	r0, r3
 8006260:	f7fe faa2 	bl	80047a8 <HAL_DMA_GetState>
 8006264:	4603      	mov	r3, r0
 8006266:	2b01      	cmp	r3, #1
 8006268:	d014      	beq.n	8006294 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626e:	4a4e      	ldr	r2, [pc, #312]	; (80063a8 <I2C_Slave_STOPF+0x258>)
 8006270:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006276:	4618      	mov	r0, r3
 8006278:	f7fe f8ea 	bl	8004450 <HAL_DMA_Abort_IT>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d008      	beq.n	8006294 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800628c:	4610      	mov	r0, r2
 800628e:	4798      	blx	r3
 8006290:	e000      	b.n	8006294 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006292:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006298:	b29b      	uxth	r3, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	d03e      	beq.n	800631c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	f003 0304 	and.w	r3, r3, #4
 80062a8:	2b04      	cmp	r3, #4
 80062aa:	d112      	bne.n	80062d2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	691a      	ldr	r2, [r3, #16]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b6:	b2d2      	uxtb	r2, r2
 80062b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062be:	1c5a      	adds	r2, r3, #1
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	3b01      	subs	r3, #1
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	695b      	ldr	r3, [r3, #20]
 80062d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062dc:	2b40      	cmp	r3, #64	; 0x40
 80062de:	d112      	bne.n	8006306 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	691a      	ldr	r2, [r3, #16]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ea:	b2d2      	uxtb	r2, r2
 80062ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f2:	1c5a      	adds	r2, r3, #1
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	3b01      	subs	r3, #1
 8006300:	b29a      	uxth	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800630a:	b29b      	uxth	r3, r3
 800630c:	2b00      	cmp	r3, #0
 800630e:	d005      	beq.n	800631c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006314:	f043 0204 	orr.w	r2, r3, #4
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006320:	2b00      	cmp	r3, #0
 8006322:	d003      	beq.n	800632c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f8b3 	bl	8006490 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800632a:	e039      	b.n	80063a0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800632c:	7bfb      	ldrb	r3, [r7, #15]
 800632e:	2b2a      	cmp	r3, #42	; 0x2a
 8006330:	d109      	bne.n	8006346 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2228      	movs	r2, #40	; 0x28
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f7ff f829 	bl	8005398 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b28      	cmp	r3, #40	; 0x28
 8006350:	d111      	bne.n	8006376 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a15      	ldr	r2, [pc, #84]	; (80063ac <I2C_Slave_STOPF+0x25c>)
 8006356:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2220      	movs	r2, #32
 8006362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7ff f82a 	bl	80053c8 <HAL_I2C_ListenCpltCallback>
}
 8006374:	e014      	b.n	80063a0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637a:	2b22      	cmp	r3, #34	; 0x22
 800637c:	d002      	beq.n	8006384 <I2C_Slave_STOPF+0x234>
 800637e:	7bfb      	ldrb	r3, [r7, #15]
 8006380:	2b22      	cmp	r3, #34	; 0x22
 8006382:	d10d      	bne.n	80063a0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2220      	movs	r2, #32
 800638e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7fe fffc 	bl	8005398 <HAL_I2C_SlaveRxCpltCallback>
}
 80063a0:	bf00      	nop
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	080066f5 	.word	0x080066f5
 80063ac:	ffff0000 	.word	0xffff0000

080063b0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063be:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	2b08      	cmp	r3, #8
 80063ca:	d002      	beq.n	80063d2 <I2C_Slave_AF+0x22>
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2b20      	cmp	r3, #32
 80063d0:	d129      	bne.n	8006426 <I2C_Slave_AF+0x76>
 80063d2:	7bfb      	ldrb	r3, [r7, #15]
 80063d4:	2b28      	cmp	r3, #40	; 0x28
 80063d6:	d126      	bne.n	8006426 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a2c      	ldr	r2, [pc, #176]	; (800648c <I2C_Slave_AF+0xdc>)
 80063dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80063ec:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063f6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006406:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2220      	movs	r2, #32
 8006412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7fe ffd2 	bl	80053c8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006424:	e02e      	b.n	8006484 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006426:	7bfb      	ldrb	r3, [r7, #15]
 8006428:	2b21      	cmp	r3, #33	; 0x21
 800642a:	d126      	bne.n	800647a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a17      	ldr	r2, [pc, #92]	; (800648c <I2C_Slave_AF+0xdc>)
 8006430:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2221      	movs	r2, #33	; 0x21
 8006436:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2220      	movs	r2, #32
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006456:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006460:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006470:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7fe ff86 	bl	8005384 <HAL_I2C_SlaveTxCpltCallback>
}
 8006478:	e004      	b.n	8006484 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006482:	615a      	str	r2, [r3, #20]
}
 8006484:	bf00      	nop
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	ffff0000 	.word	0xffff0000

08006490 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800649e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064a6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80064a8:	7bbb      	ldrb	r3, [r7, #14]
 80064aa:	2b10      	cmp	r3, #16
 80064ac:	d002      	beq.n	80064b4 <I2C_ITError+0x24>
 80064ae:	7bbb      	ldrb	r3, [r7, #14]
 80064b0:	2b40      	cmp	r3, #64	; 0x40
 80064b2:	d10a      	bne.n	80064ca <I2C_ITError+0x3a>
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
 80064b6:	2b22      	cmp	r3, #34	; 0x22
 80064b8:	d107      	bne.n	80064ca <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064c8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80064ca:	7bfb      	ldrb	r3, [r7, #15]
 80064cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80064d0:	2b28      	cmp	r3, #40	; 0x28
 80064d2:	d107      	bne.n	80064e4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2228      	movs	r2, #40	; 0x28
 80064de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80064e2:	e015      	b.n	8006510 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064f2:	d00a      	beq.n	800650a <I2C_ITError+0x7a>
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
 80064f6:	2b60      	cmp	r3, #96	; 0x60
 80064f8:	d007      	beq.n	800650a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2220      	movs	r2, #32
 80064fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800651a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800651e:	d162      	bne.n	80065e6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800652e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006534:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b01      	cmp	r3, #1
 800653c:	d020      	beq.n	8006580 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006542:	4a6a      	ldr	r2, [pc, #424]	; (80066ec <I2C_ITError+0x25c>)
 8006544:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800654a:	4618      	mov	r0, r3
 800654c:	f7fd ff80 	bl	8004450 <HAL_DMA_Abort_IT>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 8089 	beq.w	800666a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 0201 	bic.w	r2, r2, #1
 8006566:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2220      	movs	r2, #32
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800657a:	4610      	mov	r0, r2
 800657c:	4798      	blx	r3
 800657e:	e074      	b.n	800666a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006584:	4a59      	ldr	r2, [pc, #356]	; (80066ec <I2C_ITError+0x25c>)
 8006586:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658c:	4618      	mov	r0, r3
 800658e:	f7fd ff5f 	bl	8004450 <HAL_DMA_Abort_IT>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d068      	beq.n	800666a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a2:	2b40      	cmp	r3, #64	; 0x40
 80065a4:	d10b      	bne.n	80065be <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	691a      	ldr	r2, [r3, #16]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b0:	b2d2      	uxtb	r2, r2
 80065b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	1c5a      	adds	r2, r3, #1
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f022 0201 	bic.w	r2, r2, #1
 80065cc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2220      	movs	r2, #32
 80065d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80065e0:	4610      	mov	r0, r2
 80065e2:	4798      	blx	r3
 80065e4:	e041      	b.n	800666a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b60      	cmp	r3, #96	; 0x60
 80065f0:	d125      	bne.n	800663e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660a:	2b40      	cmp	r3, #64	; 0x40
 800660c:	d10b      	bne.n	8006626 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	691a      	ldr	r2, [r3, #16]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006618:	b2d2      	uxtb	r2, r2
 800661a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 0201 	bic.w	r2, r2, #1
 8006634:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f7fe feee 	bl	8005418 <HAL_I2C_AbortCpltCallback>
 800663c:	e015      	b.n	800666a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	695b      	ldr	r3, [r3, #20]
 8006644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006648:	2b40      	cmp	r3, #64	; 0x40
 800664a:	d10b      	bne.n	8006664 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	691a      	ldr	r2, [r3, #16]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006656:	b2d2      	uxtb	r2, r2
 8006658:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	1c5a      	adds	r2, r3, #1
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f7fe fecd 	bl	8005404 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10e      	bne.n	8006698 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006680:	2b00      	cmp	r3, #0
 8006682:	d109      	bne.n	8006698 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800668a:	2b00      	cmp	r3, #0
 800668c:	d104      	bne.n	8006698 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006694:	2b00      	cmp	r3, #0
 8006696:	d007      	beq.n	80066a8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80066a6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ae:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b4:	f003 0304 	and.w	r3, r3, #4
 80066b8:	2b04      	cmp	r3, #4
 80066ba:	d113      	bne.n	80066e4 <I2C_ITError+0x254>
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	2b28      	cmp	r3, #40	; 0x28
 80066c0:	d110      	bne.n	80066e4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a0a      	ldr	r2, [pc, #40]	; (80066f0 <I2C_ITError+0x260>)
 80066c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2220      	movs	r2, #32
 80066d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7fe fe72 	bl	80053c8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80066e4:	bf00      	nop
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	080066f5 	.word	0x080066f5
 80066f0:	ffff0000 	.word	0xffff0000

080066f4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066fc:	2300      	movs	r3, #0
 80066fe:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006704:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800670c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800670e:	4b4b      	ldr	r3, [pc, #300]	; (800683c <I2C_DMAAbort+0x148>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	08db      	lsrs	r3, r3, #3
 8006714:	4a4a      	ldr	r2, [pc, #296]	; (8006840 <I2C_DMAAbort+0x14c>)
 8006716:	fba2 2303 	umull	r2, r3, r2, r3
 800671a:	0a1a      	lsrs	r2, r3, #8
 800671c:	4613      	mov	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	00da      	lsls	r2, r3, #3
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d106      	bne.n	800673c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006732:	f043 0220 	orr.w	r2, r3, #32
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800673a:	e00a      	b.n	8006752 <I2C_DMAAbort+0x5e>
    }
    count--;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	3b01      	subs	r3, #1
 8006740:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800674c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006750:	d0ea      	beq.n	8006728 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800675e:	2200      	movs	r2, #0
 8006760:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676e:	2200      	movs	r2, #0
 8006770:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006780:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	2200      	movs	r2, #0
 8006786:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800678c:	2b00      	cmp	r3, #0
 800678e:	d003      	beq.n	8006798 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006794:	2200      	movs	r2, #0
 8006796:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679c:	2b00      	cmp	r3, #0
 800679e:	d003      	beq.n	80067a8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a4:	2200      	movs	r2, #0
 80067a6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f022 0201 	bic.w	r2, r2, #1
 80067b6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b60      	cmp	r3, #96	; 0x60
 80067c2:	d10e      	bne.n	80067e2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	2220      	movs	r2, #32
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	2200      	movs	r2, #0
 80067d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80067da:	6978      	ldr	r0, [r7, #20]
 80067dc:	f7fe fe1c 	bl	8005418 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80067e0:	e027      	b.n	8006832 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80067e2:	7cfb      	ldrb	r3, [r7, #19]
 80067e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80067e8:	2b28      	cmp	r3, #40	; 0x28
 80067ea:	d117      	bne.n	800681c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f042 0201 	orr.w	r2, r2, #1
 80067fa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800680a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	2200      	movs	r2, #0
 8006810:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	2228      	movs	r2, #40	; 0x28
 8006816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800681a:	e007      	b.n	800682c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	2220      	movs	r2, #32
 8006820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800682c:	6978      	ldr	r0, [r7, #20]
 800682e:	f7fe fde9 	bl	8005404 <HAL_I2C_ErrorCallback>
}
 8006832:	bf00      	nop
 8006834:	3718      	adds	r7, #24
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	20000010 	.word	0x20000010
 8006840:	14f8b589 	.word	0x14f8b589

08006844 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006850:	4b13      	ldr	r3, [pc, #76]	; (80068a0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	08db      	lsrs	r3, r3, #3
 8006856:	4a13      	ldr	r2, [pc, #76]	; (80068a4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006858:	fba2 2303 	umull	r2, r3, r2, r3
 800685c:	0a1a      	lsrs	r2, r3, #8
 800685e:	4613      	mov	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	3b01      	subs	r3, #1
 800686a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d107      	bne.n	8006882 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006876:	f043 0220 	orr.w	r2, r3, #32
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e008      	b.n	8006894 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800688c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006890:	d0e9      	beq.n	8006866 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr
 80068a0:	20000010 	.word	0x20000010
 80068a4:	14f8b589 	.word	0x14f8b589

080068a8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80068b8:	d103      	bne.n	80068c2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80068c0:	e007      	b.n	80068d2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80068ca:	d102      	bne.n	80068d2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2208      	movs	r2, #8
 80068d0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80068d2:	bf00      	nop
 80068d4:	370c      	adds	r7, #12
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
	...

080068e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e267      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d075      	beq.n	80069ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068fe:	4b88      	ldr	r3, [pc, #544]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f003 030c 	and.w	r3, r3, #12
 8006906:	2b04      	cmp	r3, #4
 8006908:	d00c      	beq.n	8006924 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800690a:	4b85      	ldr	r3, [pc, #532]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006912:	2b08      	cmp	r3, #8
 8006914:	d112      	bne.n	800693c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006916:	4b82      	ldr	r3, [pc, #520]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800691e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006922:	d10b      	bne.n	800693c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006924:	4b7e      	ldr	r3, [pc, #504]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d05b      	beq.n	80069e8 <HAL_RCC_OscConfig+0x108>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d157      	bne.n	80069e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e242      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006944:	d106      	bne.n	8006954 <HAL_RCC_OscConfig+0x74>
 8006946:	4b76      	ldr	r3, [pc, #472]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a75      	ldr	r2, [pc, #468]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 800694c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006950:	6013      	str	r3, [r2, #0]
 8006952:	e01d      	b.n	8006990 <HAL_RCC_OscConfig+0xb0>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800695c:	d10c      	bne.n	8006978 <HAL_RCC_OscConfig+0x98>
 800695e:	4b70      	ldr	r3, [pc, #448]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a6f      	ldr	r2, [pc, #444]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006968:	6013      	str	r3, [r2, #0]
 800696a:	4b6d      	ldr	r3, [pc, #436]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a6c      	ldr	r2, [pc, #432]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006974:	6013      	str	r3, [r2, #0]
 8006976:	e00b      	b.n	8006990 <HAL_RCC_OscConfig+0xb0>
 8006978:	4b69      	ldr	r3, [pc, #420]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a68      	ldr	r2, [pc, #416]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 800697e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006982:	6013      	str	r3, [r2, #0]
 8006984:	4b66      	ldr	r3, [pc, #408]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a65      	ldr	r2, [pc, #404]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 800698a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800698e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d013      	beq.n	80069c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006998:	f7fd f802 	bl	80039a0 <HAL_GetTick>
 800699c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800699e:	e008      	b.n	80069b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069a0:	f7fc fffe 	bl	80039a0 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b64      	cmp	r3, #100	; 0x64
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e207      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069b2:	4b5b      	ldr	r3, [pc, #364]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d0f0      	beq.n	80069a0 <HAL_RCC_OscConfig+0xc0>
 80069be:	e014      	b.n	80069ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069c0:	f7fc ffee 	bl	80039a0 <HAL_GetTick>
 80069c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069c6:	e008      	b.n	80069da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069c8:	f7fc ffea 	bl	80039a0 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b64      	cmp	r3, #100	; 0x64
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e1f3      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069da:	4b51      	ldr	r3, [pc, #324]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1f0      	bne.n	80069c8 <HAL_RCC_OscConfig+0xe8>
 80069e6:	e000      	b.n	80069ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d063      	beq.n	8006abe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069f6:	4b4a      	ldr	r3, [pc, #296]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f003 030c 	and.w	r3, r3, #12
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00b      	beq.n	8006a1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a02:	4b47      	ldr	r3, [pc, #284]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a0a:	2b08      	cmp	r3, #8
 8006a0c:	d11c      	bne.n	8006a48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a0e:	4b44      	ldr	r3, [pc, #272]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d116      	bne.n	8006a48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a1a:	4b41      	ldr	r3, [pc, #260]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d005      	beq.n	8006a32 <HAL_RCC_OscConfig+0x152>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d001      	beq.n	8006a32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e1c7      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a32:	4b3b      	ldr	r3, [pc, #236]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	00db      	lsls	r3, r3, #3
 8006a40:	4937      	ldr	r1, [pc, #220]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a46:	e03a      	b.n	8006abe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d020      	beq.n	8006a92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a50:	4b34      	ldr	r3, [pc, #208]	; (8006b24 <HAL_RCC_OscConfig+0x244>)
 8006a52:	2201      	movs	r2, #1
 8006a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a56:	f7fc ffa3 	bl	80039a0 <HAL_GetTick>
 8006a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a5c:	e008      	b.n	8006a70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a5e:	f7fc ff9f 	bl	80039a0 <HAL_GetTick>
 8006a62:	4602      	mov	r2, r0
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d901      	bls.n	8006a70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e1a8      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a70:	4b2b      	ldr	r3, [pc, #172]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0302 	and.w	r3, r3, #2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d0f0      	beq.n	8006a5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a7c:	4b28      	ldr	r3, [pc, #160]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	00db      	lsls	r3, r3, #3
 8006a8a:	4925      	ldr	r1, [pc, #148]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	600b      	str	r3, [r1, #0]
 8006a90:	e015      	b.n	8006abe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a92:	4b24      	ldr	r3, [pc, #144]	; (8006b24 <HAL_RCC_OscConfig+0x244>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a98:	f7fc ff82 	bl	80039a0 <HAL_GetTick>
 8006a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a9e:	e008      	b.n	8006ab2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006aa0:	f7fc ff7e 	bl	80039a0 <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e187      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ab2:	4b1b      	ldr	r3, [pc, #108]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0302 	and.w	r3, r3, #2
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1f0      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0308 	and.w	r3, r3, #8
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d036      	beq.n	8006b38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d016      	beq.n	8006b00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ad2:	4b15      	ldr	r3, [pc, #84]	; (8006b28 <HAL_RCC_OscConfig+0x248>)
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ad8:	f7fc ff62 	bl	80039a0 <HAL_GetTick>
 8006adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ade:	e008      	b.n	8006af2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ae0:	f7fc ff5e 	bl	80039a0 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d901      	bls.n	8006af2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e167      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006af2:	4b0b      	ldr	r3, [pc, #44]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006af6:	f003 0302 	and.w	r3, r3, #2
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d0f0      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x200>
 8006afe:	e01b      	b.n	8006b38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b00:	4b09      	ldr	r3, [pc, #36]	; (8006b28 <HAL_RCC_OscConfig+0x248>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b06:	f7fc ff4b 	bl	80039a0 <HAL_GetTick>
 8006b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b0c:	e00e      	b.n	8006b2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b0e:	f7fc ff47 	bl	80039a0 <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d907      	bls.n	8006b2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e150      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
 8006b20:	40023800 	.word	0x40023800
 8006b24:	42470000 	.word	0x42470000
 8006b28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b2c:	4b88      	ldr	r3, [pc, #544]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1ea      	bne.n	8006b0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0304 	and.w	r3, r3, #4
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 8097 	beq.w	8006c74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b46:	2300      	movs	r3, #0
 8006b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b4a:	4b81      	ldr	r3, [pc, #516]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10f      	bne.n	8006b76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b56:	2300      	movs	r3, #0
 8006b58:	60bb      	str	r3, [r7, #8]
 8006b5a:	4b7d      	ldr	r3, [pc, #500]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5e:	4a7c      	ldr	r2, [pc, #496]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b64:	6413      	str	r3, [r2, #64]	; 0x40
 8006b66:	4b7a      	ldr	r3, [pc, #488]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b6e:	60bb      	str	r3, [r7, #8]
 8006b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b72:	2301      	movs	r3, #1
 8006b74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b76:	4b77      	ldr	r3, [pc, #476]	; (8006d54 <HAL_RCC_OscConfig+0x474>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d118      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b82:	4b74      	ldr	r3, [pc, #464]	; (8006d54 <HAL_RCC_OscConfig+0x474>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a73      	ldr	r2, [pc, #460]	; (8006d54 <HAL_RCC_OscConfig+0x474>)
 8006b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b8e:	f7fc ff07 	bl	80039a0 <HAL_GetTick>
 8006b92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b94:	e008      	b.n	8006ba8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b96:	f7fc ff03 	bl	80039a0 <HAL_GetTick>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d901      	bls.n	8006ba8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e10c      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ba8:	4b6a      	ldr	r3, [pc, #424]	; (8006d54 <HAL_RCC_OscConfig+0x474>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d0f0      	beq.n	8006b96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d106      	bne.n	8006bca <HAL_RCC_OscConfig+0x2ea>
 8006bbc:	4b64      	ldr	r3, [pc, #400]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc0:	4a63      	ldr	r2, [pc, #396]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006bc2:	f043 0301 	orr.w	r3, r3, #1
 8006bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8006bc8:	e01c      	b.n	8006c04 <HAL_RCC_OscConfig+0x324>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	2b05      	cmp	r3, #5
 8006bd0:	d10c      	bne.n	8006bec <HAL_RCC_OscConfig+0x30c>
 8006bd2:	4b5f      	ldr	r3, [pc, #380]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd6:	4a5e      	ldr	r2, [pc, #376]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006bd8:	f043 0304 	orr.w	r3, r3, #4
 8006bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8006bde:	4b5c      	ldr	r3, [pc, #368]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be2:	4a5b      	ldr	r2, [pc, #364]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006be4:	f043 0301 	orr.w	r3, r3, #1
 8006be8:	6713      	str	r3, [r2, #112]	; 0x70
 8006bea:	e00b      	b.n	8006c04 <HAL_RCC_OscConfig+0x324>
 8006bec:	4b58      	ldr	r3, [pc, #352]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf0:	4a57      	ldr	r2, [pc, #348]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006bf2:	f023 0301 	bic.w	r3, r3, #1
 8006bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8006bf8:	4b55      	ldr	r3, [pc, #340]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bfc:	4a54      	ldr	r2, [pc, #336]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006bfe:	f023 0304 	bic.w	r3, r3, #4
 8006c02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d015      	beq.n	8006c38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c0c:	f7fc fec8 	bl	80039a0 <HAL_GetTick>
 8006c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c12:	e00a      	b.n	8006c2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c14:	f7fc fec4 	bl	80039a0 <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d901      	bls.n	8006c2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e0cb      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c2a:	4b49      	ldr	r3, [pc, #292]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d0ee      	beq.n	8006c14 <HAL_RCC_OscConfig+0x334>
 8006c36:	e014      	b.n	8006c62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c38:	f7fc feb2 	bl	80039a0 <HAL_GetTick>
 8006c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c3e:	e00a      	b.n	8006c56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c40:	f7fc feae 	bl	80039a0 <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e0b5      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c56:	4b3e      	ldr	r3, [pc, #248]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5a:	f003 0302 	and.w	r3, r3, #2
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1ee      	bne.n	8006c40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c62:	7dfb      	ldrb	r3, [r7, #23]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d105      	bne.n	8006c74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c68:	4b39      	ldr	r3, [pc, #228]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6c:	4a38      	ldr	r2, [pc, #224]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 80a1 	beq.w	8006dc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c7e:	4b34      	ldr	r3, [pc, #208]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f003 030c 	and.w	r3, r3, #12
 8006c86:	2b08      	cmp	r3, #8
 8006c88:	d05c      	beq.n	8006d44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d141      	bne.n	8006d16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c92:	4b31      	ldr	r3, [pc, #196]	; (8006d58 <HAL_RCC_OscConfig+0x478>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c98:	f7fc fe82 	bl	80039a0 <HAL_GetTick>
 8006c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c9e:	e008      	b.n	8006cb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ca0:	f7fc fe7e 	bl	80039a0 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d901      	bls.n	8006cb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e087      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cb2:	4b27      	ldr	r3, [pc, #156]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1f0      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	69da      	ldr	r2, [r3, #28]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ccc:	019b      	lsls	r3, r3, #6
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd4:	085b      	lsrs	r3, r3, #1
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	041b      	lsls	r3, r3, #16
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce0:	061b      	lsls	r3, r3, #24
 8006ce2:	491b      	ldr	r1, [pc, #108]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ce8:	4b1b      	ldr	r3, [pc, #108]	; (8006d58 <HAL_RCC_OscConfig+0x478>)
 8006cea:	2201      	movs	r2, #1
 8006cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cee:	f7fc fe57 	bl	80039a0 <HAL_GetTick>
 8006cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cf4:	e008      	b.n	8006d08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cf6:	f7fc fe53 	bl	80039a0 <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d901      	bls.n	8006d08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e05c      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d08:	4b11      	ldr	r3, [pc, #68]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d0f0      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x416>
 8006d14:	e054      	b.n	8006dc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d16:	4b10      	ldr	r3, [pc, #64]	; (8006d58 <HAL_RCC_OscConfig+0x478>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d1c:	f7fc fe40 	bl	80039a0 <HAL_GetTick>
 8006d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d22:	e008      	b.n	8006d36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d24:	f7fc fe3c 	bl	80039a0 <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d901      	bls.n	8006d36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e045      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d36:	4b06      	ldr	r3, [pc, #24]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1f0      	bne.n	8006d24 <HAL_RCC_OscConfig+0x444>
 8006d42:	e03d      	b.n	8006dc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d107      	bne.n	8006d5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e038      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
 8006d50:	40023800 	.word	0x40023800
 8006d54:	40007000 	.word	0x40007000
 8006d58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d5c:	4b1b      	ldr	r3, [pc, #108]	; (8006dcc <HAL_RCC_OscConfig+0x4ec>)
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d028      	beq.n	8006dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d121      	bne.n	8006dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d11a      	bne.n	8006dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d111      	bne.n	8006dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da2:	085b      	lsrs	r3, r3, #1
 8006da4:	3b01      	subs	r3, #1
 8006da6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d107      	bne.n	8006dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d001      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e000      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	40023800 	.word	0x40023800

08006dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e0cc      	b.n	8006f7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006de4:	4b68      	ldr	r3, [pc, #416]	; (8006f88 <HAL_RCC_ClockConfig+0x1b8>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0307 	and.w	r3, r3, #7
 8006dec:	683a      	ldr	r2, [r7, #0]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d90c      	bls.n	8006e0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006df2:	4b65      	ldr	r3, [pc, #404]	; (8006f88 <HAL_RCC_ClockConfig+0x1b8>)
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	b2d2      	uxtb	r2, r2
 8006df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dfa:	4b63      	ldr	r3, [pc, #396]	; (8006f88 <HAL_RCC_ClockConfig+0x1b8>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0307 	and.w	r3, r3, #7
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d001      	beq.n	8006e0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e0b8      	b.n	8006f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d020      	beq.n	8006e5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0304 	and.w	r3, r3, #4
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d005      	beq.n	8006e30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e24:	4b59      	ldr	r3, [pc, #356]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	4a58      	ldr	r2, [pc, #352]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0308 	and.w	r3, r3, #8
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d005      	beq.n	8006e48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e3c:	4b53      	ldr	r3, [pc, #332]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	4a52      	ldr	r2, [pc, #328]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e48:	4b50      	ldr	r3, [pc, #320]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	494d      	ldr	r1, [pc, #308]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0301 	and.w	r3, r3, #1
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d044      	beq.n	8006ef0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d107      	bne.n	8006e7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e6e:	4b47      	ldr	r3, [pc, #284]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d119      	bne.n	8006eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e07f      	b.n	8006f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d003      	beq.n	8006e8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d107      	bne.n	8006e9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e8e:	4b3f      	ldr	r3, [pc, #252]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d109      	bne.n	8006eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e06f      	b.n	8006f7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e9e:	4b3b      	ldr	r3, [pc, #236]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0302 	and.w	r3, r3, #2
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e067      	b.n	8006f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006eae:	4b37      	ldr	r3, [pc, #220]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f023 0203 	bic.w	r2, r3, #3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	4934      	ldr	r1, [pc, #208]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ec0:	f7fc fd6e 	bl	80039a0 <HAL_GetTick>
 8006ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ec6:	e00a      	b.n	8006ede <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ec8:	f7fc fd6a 	bl	80039a0 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d901      	bls.n	8006ede <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e04f      	b.n	8006f7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ede:	4b2b      	ldr	r3, [pc, #172]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f003 020c 	and.w	r2, r3, #12
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d1eb      	bne.n	8006ec8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ef0:	4b25      	ldr	r3, [pc, #148]	; (8006f88 <HAL_RCC_ClockConfig+0x1b8>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0307 	and.w	r3, r3, #7
 8006ef8:	683a      	ldr	r2, [r7, #0]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d20c      	bcs.n	8006f18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006efe:	4b22      	ldr	r3, [pc, #136]	; (8006f88 <HAL_RCC_ClockConfig+0x1b8>)
 8006f00:	683a      	ldr	r2, [r7, #0]
 8006f02:	b2d2      	uxtb	r2, r2
 8006f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f06:	4b20      	ldr	r3, [pc, #128]	; (8006f88 <HAL_RCC_ClockConfig+0x1b8>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0307 	and.w	r3, r3, #7
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d001      	beq.n	8006f18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e032      	b.n	8006f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0304 	and.w	r3, r3, #4
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d008      	beq.n	8006f36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f24:	4b19      	ldr	r3, [pc, #100]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	4916      	ldr	r1, [pc, #88]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0308 	and.w	r3, r3, #8
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d009      	beq.n	8006f56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f42:	4b12      	ldr	r3, [pc, #72]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	00db      	lsls	r3, r3, #3
 8006f50:	490e      	ldr	r1, [pc, #56]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f56:	f000 f821 	bl	8006f9c <HAL_RCC_GetSysClockFreq>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	4b0b      	ldr	r3, [pc, #44]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	091b      	lsrs	r3, r3, #4
 8006f62:	f003 030f 	and.w	r3, r3, #15
 8006f66:	490a      	ldr	r1, [pc, #40]	; (8006f90 <HAL_RCC_ClockConfig+0x1c0>)
 8006f68:	5ccb      	ldrb	r3, [r1, r3]
 8006f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f6e:	4a09      	ldr	r2, [pc, #36]	; (8006f94 <HAL_RCC_ClockConfig+0x1c4>)
 8006f70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f72:	4b09      	ldr	r3, [pc, #36]	; (8006f98 <HAL_RCC_ClockConfig+0x1c8>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fc fb0c 	bl	8003594 <HAL_InitTick>

  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	40023c00 	.word	0x40023c00
 8006f8c:	40023800 	.word	0x40023800
 8006f90:	080196ec 	.word	0x080196ec
 8006f94:	20000010 	.word	0x20000010
 8006f98:	20000014 	.word	0x20000014

08006f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fa0:	b094      	sub	sp, #80	; 0x50
 8006fa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	647b      	str	r3, [r7, #68]	; 0x44
 8006fa8:	2300      	movs	r3, #0
 8006faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fac:	2300      	movs	r3, #0
 8006fae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fb4:	4b79      	ldr	r3, [pc, #484]	; (800719c <HAL_RCC_GetSysClockFreq+0x200>)
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f003 030c 	and.w	r3, r3, #12
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d00d      	beq.n	8006fdc <HAL_RCC_GetSysClockFreq+0x40>
 8006fc0:	2b08      	cmp	r3, #8
 8006fc2:	f200 80e1 	bhi.w	8007188 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d002      	beq.n	8006fd0 <HAL_RCC_GetSysClockFreq+0x34>
 8006fca:	2b04      	cmp	r3, #4
 8006fcc:	d003      	beq.n	8006fd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8006fce:	e0db      	b.n	8007188 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006fd0:	4b73      	ldr	r3, [pc, #460]	; (80071a0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006fd2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006fd4:	e0db      	b.n	800718e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006fd6:	4b73      	ldr	r3, [pc, #460]	; (80071a4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006fd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006fda:	e0d8      	b.n	800718e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fdc:	4b6f      	ldr	r3, [pc, #444]	; (800719c <HAL_RCC_GetSysClockFreq+0x200>)
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fe4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006fe6:	4b6d      	ldr	r3, [pc, #436]	; (800719c <HAL_RCC_GetSysClockFreq+0x200>)
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d063      	beq.n	80070ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ff2:	4b6a      	ldr	r3, [pc, #424]	; (800719c <HAL_RCC_GetSysClockFreq+0x200>)
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	099b      	lsrs	r3, r3, #6
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ffc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007004:	633b      	str	r3, [r7, #48]	; 0x30
 8007006:	2300      	movs	r3, #0
 8007008:	637b      	str	r3, [r7, #52]	; 0x34
 800700a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800700e:	4622      	mov	r2, r4
 8007010:	462b      	mov	r3, r5
 8007012:	f04f 0000 	mov.w	r0, #0
 8007016:	f04f 0100 	mov.w	r1, #0
 800701a:	0159      	lsls	r1, r3, #5
 800701c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007020:	0150      	lsls	r0, r2, #5
 8007022:	4602      	mov	r2, r0
 8007024:	460b      	mov	r3, r1
 8007026:	4621      	mov	r1, r4
 8007028:	1a51      	subs	r1, r2, r1
 800702a:	6139      	str	r1, [r7, #16]
 800702c:	4629      	mov	r1, r5
 800702e:	eb63 0301 	sbc.w	r3, r3, r1
 8007032:	617b      	str	r3, [r7, #20]
 8007034:	f04f 0200 	mov.w	r2, #0
 8007038:	f04f 0300 	mov.w	r3, #0
 800703c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007040:	4659      	mov	r1, fp
 8007042:	018b      	lsls	r3, r1, #6
 8007044:	4651      	mov	r1, sl
 8007046:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800704a:	4651      	mov	r1, sl
 800704c:	018a      	lsls	r2, r1, #6
 800704e:	4651      	mov	r1, sl
 8007050:	ebb2 0801 	subs.w	r8, r2, r1
 8007054:	4659      	mov	r1, fp
 8007056:	eb63 0901 	sbc.w	r9, r3, r1
 800705a:	f04f 0200 	mov.w	r2, #0
 800705e:	f04f 0300 	mov.w	r3, #0
 8007062:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007066:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800706a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800706e:	4690      	mov	r8, r2
 8007070:	4699      	mov	r9, r3
 8007072:	4623      	mov	r3, r4
 8007074:	eb18 0303 	adds.w	r3, r8, r3
 8007078:	60bb      	str	r3, [r7, #8]
 800707a:	462b      	mov	r3, r5
 800707c:	eb49 0303 	adc.w	r3, r9, r3
 8007080:	60fb      	str	r3, [r7, #12]
 8007082:	f04f 0200 	mov.w	r2, #0
 8007086:	f04f 0300 	mov.w	r3, #0
 800708a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800708e:	4629      	mov	r1, r5
 8007090:	024b      	lsls	r3, r1, #9
 8007092:	4621      	mov	r1, r4
 8007094:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007098:	4621      	mov	r1, r4
 800709a:	024a      	lsls	r2, r1, #9
 800709c:	4610      	mov	r0, r2
 800709e:	4619      	mov	r1, r3
 80070a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070a2:	2200      	movs	r2, #0
 80070a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80070a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80070ac:	f7f9 fd6e 	bl	8000b8c <__aeabi_uldivmod>
 80070b0:	4602      	mov	r2, r0
 80070b2:	460b      	mov	r3, r1
 80070b4:	4613      	mov	r3, r2
 80070b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070b8:	e058      	b.n	800716c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070ba:	4b38      	ldr	r3, [pc, #224]	; (800719c <HAL_RCC_GetSysClockFreq+0x200>)
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	099b      	lsrs	r3, r3, #6
 80070c0:	2200      	movs	r2, #0
 80070c2:	4618      	mov	r0, r3
 80070c4:	4611      	mov	r1, r2
 80070c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80070ca:	623b      	str	r3, [r7, #32]
 80070cc:	2300      	movs	r3, #0
 80070ce:	627b      	str	r3, [r7, #36]	; 0x24
 80070d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80070d4:	4642      	mov	r2, r8
 80070d6:	464b      	mov	r3, r9
 80070d8:	f04f 0000 	mov.w	r0, #0
 80070dc:	f04f 0100 	mov.w	r1, #0
 80070e0:	0159      	lsls	r1, r3, #5
 80070e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070e6:	0150      	lsls	r0, r2, #5
 80070e8:	4602      	mov	r2, r0
 80070ea:	460b      	mov	r3, r1
 80070ec:	4641      	mov	r1, r8
 80070ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80070f2:	4649      	mov	r1, r9
 80070f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80070f8:	f04f 0200 	mov.w	r2, #0
 80070fc:	f04f 0300 	mov.w	r3, #0
 8007100:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007104:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007108:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800710c:	ebb2 040a 	subs.w	r4, r2, sl
 8007110:	eb63 050b 	sbc.w	r5, r3, fp
 8007114:	f04f 0200 	mov.w	r2, #0
 8007118:	f04f 0300 	mov.w	r3, #0
 800711c:	00eb      	lsls	r3, r5, #3
 800711e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007122:	00e2      	lsls	r2, r4, #3
 8007124:	4614      	mov	r4, r2
 8007126:	461d      	mov	r5, r3
 8007128:	4643      	mov	r3, r8
 800712a:	18e3      	adds	r3, r4, r3
 800712c:	603b      	str	r3, [r7, #0]
 800712e:	464b      	mov	r3, r9
 8007130:	eb45 0303 	adc.w	r3, r5, r3
 8007134:	607b      	str	r3, [r7, #4]
 8007136:	f04f 0200 	mov.w	r2, #0
 800713a:	f04f 0300 	mov.w	r3, #0
 800713e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007142:	4629      	mov	r1, r5
 8007144:	028b      	lsls	r3, r1, #10
 8007146:	4621      	mov	r1, r4
 8007148:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800714c:	4621      	mov	r1, r4
 800714e:	028a      	lsls	r2, r1, #10
 8007150:	4610      	mov	r0, r2
 8007152:	4619      	mov	r1, r3
 8007154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007156:	2200      	movs	r2, #0
 8007158:	61bb      	str	r3, [r7, #24]
 800715a:	61fa      	str	r2, [r7, #28]
 800715c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007160:	f7f9 fd14 	bl	8000b8c <__aeabi_uldivmod>
 8007164:	4602      	mov	r2, r0
 8007166:	460b      	mov	r3, r1
 8007168:	4613      	mov	r3, r2
 800716a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800716c:	4b0b      	ldr	r3, [pc, #44]	; (800719c <HAL_RCC_GetSysClockFreq+0x200>)
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	0c1b      	lsrs	r3, r3, #16
 8007172:	f003 0303 	and.w	r3, r3, #3
 8007176:	3301      	adds	r3, #1
 8007178:	005b      	lsls	r3, r3, #1
 800717a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800717c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800717e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007180:	fbb2 f3f3 	udiv	r3, r2, r3
 8007184:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007186:	e002      	b.n	800718e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007188:	4b05      	ldr	r3, [pc, #20]	; (80071a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800718a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800718c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800718e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007190:	4618      	mov	r0, r3
 8007192:	3750      	adds	r7, #80	; 0x50
 8007194:	46bd      	mov	sp, r7
 8007196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800719a:	bf00      	nop
 800719c:	40023800 	.word	0x40023800
 80071a0:	00f42400 	.word	0x00f42400
 80071a4:	007a1200 	.word	0x007a1200

080071a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071a8:	b480      	push	{r7}
 80071aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071ac:	4b03      	ldr	r3, [pc, #12]	; (80071bc <HAL_RCC_GetHCLKFreq+0x14>)
 80071ae:	681b      	ldr	r3, [r3, #0]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	20000010 	.word	0x20000010

080071c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80071c4:	f7ff fff0 	bl	80071a8 <HAL_RCC_GetHCLKFreq>
 80071c8:	4602      	mov	r2, r0
 80071ca:	4b05      	ldr	r3, [pc, #20]	; (80071e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	0a9b      	lsrs	r3, r3, #10
 80071d0:	f003 0307 	and.w	r3, r3, #7
 80071d4:	4903      	ldr	r1, [pc, #12]	; (80071e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071d6:	5ccb      	ldrb	r3, [r1, r3]
 80071d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071dc:	4618      	mov	r0, r3
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	40023800 	.word	0x40023800
 80071e4:	080196fc 	.word	0x080196fc

080071e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80071ec:	f7ff ffdc 	bl	80071a8 <HAL_RCC_GetHCLKFreq>
 80071f0:	4602      	mov	r2, r0
 80071f2:	4b05      	ldr	r3, [pc, #20]	; (8007208 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	0b5b      	lsrs	r3, r3, #13
 80071f8:	f003 0307 	and.w	r3, r3, #7
 80071fc:	4903      	ldr	r1, [pc, #12]	; (800720c <HAL_RCC_GetPCLK2Freq+0x24>)
 80071fe:	5ccb      	ldrb	r3, [r1, r3]
 8007200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007204:	4618      	mov	r0, r3
 8007206:	bd80      	pop	{r7, pc}
 8007208:	40023800 	.word	0x40023800
 800720c:	080196fc 	.word	0x080196fc

08007210 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	220f      	movs	r2, #15
 800721e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007220:	4b12      	ldr	r3, [pc, #72]	; (800726c <HAL_RCC_GetClockConfig+0x5c>)
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	f003 0203 	and.w	r2, r3, #3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800722c:	4b0f      	ldr	r3, [pc, #60]	; (800726c <HAL_RCC_GetClockConfig+0x5c>)
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007238:	4b0c      	ldr	r3, [pc, #48]	; (800726c <HAL_RCC_GetClockConfig+0x5c>)
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007244:	4b09      	ldr	r3, [pc, #36]	; (800726c <HAL_RCC_GetClockConfig+0x5c>)
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	08db      	lsrs	r3, r3, #3
 800724a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007252:	4b07      	ldr	r3, [pc, #28]	; (8007270 <HAL_RCC_GetClockConfig+0x60>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0207 	and.w	r2, r3, #7
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	601a      	str	r2, [r3, #0]
}
 800725e:	bf00      	nop
 8007260:	370c      	adds	r7, #12
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	40023800 	.word	0x40023800
 8007270:	40023c00 	.word	0x40023c00

08007274 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e041      	b.n	800730a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	d106      	bne.n	80072a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f839 	bl	8007312 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2202      	movs	r2, #2
 80072a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	3304      	adds	r3, #4
 80072b0:	4619      	mov	r1, r3
 80072b2:	4610      	mov	r0, r2
 80072b4:	f000 fc7a 	bl	8007bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007312:	b480      	push	{r7}
 8007314:	b083      	sub	sp, #12
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800731a:	bf00      	nop
 800731c:	370c      	adds	r7, #12
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
	...

08007328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007336:	b2db      	uxtb	r3, r3
 8007338:	2b01      	cmp	r3, #1
 800733a:	d001      	beq.n	8007340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e044      	b.n	80073ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2202      	movs	r2, #2
 8007344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68da      	ldr	r2, [r3, #12]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f042 0201 	orr.w	r2, r2, #1
 8007356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a1e      	ldr	r2, [pc, #120]	; (80073d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d018      	beq.n	8007394 <HAL_TIM_Base_Start_IT+0x6c>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800736a:	d013      	beq.n	8007394 <HAL_TIM_Base_Start_IT+0x6c>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a1a      	ldr	r2, [pc, #104]	; (80073dc <HAL_TIM_Base_Start_IT+0xb4>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d00e      	beq.n	8007394 <HAL_TIM_Base_Start_IT+0x6c>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a19      	ldr	r2, [pc, #100]	; (80073e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d009      	beq.n	8007394 <HAL_TIM_Base_Start_IT+0x6c>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a17      	ldr	r2, [pc, #92]	; (80073e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d004      	beq.n	8007394 <HAL_TIM_Base_Start_IT+0x6c>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a16      	ldr	r2, [pc, #88]	; (80073e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d111      	bne.n	80073b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	f003 0307 	and.w	r3, r3, #7
 800739e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b06      	cmp	r3, #6
 80073a4:	d010      	beq.n	80073c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f042 0201 	orr.w	r2, r2, #1
 80073b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b6:	e007      	b.n	80073c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f042 0201 	orr.w	r2, r2, #1
 80073c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3714      	adds	r7, #20
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	40010000 	.word	0x40010000
 80073dc:	40000400 	.word	0x40000400
 80073e0:	40000800 	.word	0x40000800
 80073e4:	40000c00 	.word	0x40000c00
 80073e8:	40014000 	.word	0x40014000

080073ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d109      	bne.n	8007410 <HAL_TIM_PWM_Start+0x24>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b01      	cmp	r3, #1
 8007406:	bf14      	ite	ne
 8007408:	2301      	movne	r3, #1
 800740a:	2300      	moveq	r3, #0
 800740c:	b2db      	uxtb	r3, r3
 800740e:	e022      	b.n	8007456 <HAL_TIM_PWM_Start+0x6a>
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	2b04      	cmp	r3, #4
 8007414:	d109      	bne.n	800742a <HAL_TIM_PWM_Start+0x3e>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b01      	cmp	r3, #1
 8007420:	bf14      	ite	ne
 8007422:	2301      	movne	r3, #1
 8007424:	2300      	moveq	r3, #0
 8007426:	b2db      	uxtb	r3, r3
 8007428:	e015      	b.n	8007456 <HAL_TIM_PWM_Start+0x6a>
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b08      	cmp	r3, #8
 800742e:	d109      	bne.n	8007444 <HAL_TIM_PWM_Start+0x58>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007436:	b2db      	uxtb	r3, r3
 8007438:	2b01      	cmp	r3, #1
 800743a:	bf14      	ite	ne
 800743c:	2301      	movne	r3, #1
 800743e:	2300      	moveq	r3, #0
 8007440:	b2db      	uxtb	r3, r3
 8007442:	e008      	b.n	8007456 <HAL_TIM_PWM_Start+0x6a>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800744a:	b2db      	uxtb	r3, r3
 800744c:	2b01      	cmp	r3, #1
 800744e:	bf14      	ite	ne
 8007450:	2301      	movne	r3, #1
 8007452:	2300      	moveq	r3, #0
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e068      	b.n	8007530 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d104      	bne.n	800746e <HAL_TIM_PWM_Start+0x82>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2202      	movs	r2, #2
 8007468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800746c:	e013      	b.n	8007496 <HAL_TIM_PWM_Start+0xaa>
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	2b04      	cmp	r3, #4
 8007472:	d104      	bne.n	800747e <HAL_TIM_PWM_Start+0x92>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2202      	movs	r2, #2
 8007478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800747c:	e00b      	b.n	8007496 <HAL_TIM_PWM_Start+0xaa>
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	2b08      	cmp	r3, #8
 8007482:	d104      	bne.n	800748e <HAL_TIM_PWM_Start+0xa2>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2202      	movs	r2, #2
 8007488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800748c:	e003      	b.n	8007496 <HAL_TIM_PWM_Start+0xaa>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2202      	movs	r2, #2
 8007492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2201      	movs	r2, #1
 800749c:	6839      	ldr	r1, [r7, #0]
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 fd90 	bl	8007fc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a23      	ldr	r2, [pc, #140]	; (8007538 <HAL_TIM_PWM_Start+0x14c>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d107      	bne.n	80074be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a1d      	ldr	r2, [pc, #116]	; (8007538 <HAL_TIM_PWM_Start+0x14c>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d018      	beq.n	80074fa <HAL_TIM_PWM_Start+0x10e>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074d0:	d013      	beq.n	80074fa <HAL_TIM_PWM_Start+0x10e>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a19      	ldr	r2, [pc, #100]	; (800753c <HAL_TIM_PWM_Start+0x150>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d00e      	beq.n	80074fa <HAL_TIM_PWM_Start+0x10e>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a17      	ldr	r2, [pc, #92]	; (8007540 <HAL_TIM_PWM_Start+0x154>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d009      	beq.n	80074fa <HAL_TIM_PWM_Start+0x10e>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a16      	ldr	r2, [pc, #88]	; (8007544 <HAL_TIM_PWM_Start+0x158>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d004      	beq.n	80074fa <HAL_TIM_PWM_Start+0x10e>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a14      	ldr	r2, [pc, #80]	; (8007548 <HAL_TIM_PWM_Start+0x15c>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d111      	bne.n	800751e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f003 0307 	and.w	r3, r3, #7
 8007504:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b06      	cmp	r3, #6
 800750a:	d010      	beq.n	800752e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f042 0201 	orr.w	r2, r2, #1
 800751a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800751c:	e007      	b.n	800752e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f042 0201 	orr.w	r2, r2, #1
 800752c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	40010000 	.word	0x40010000
 800753c:	40000400 	.word	0x40000400
 8007540:	40000800 	.word	0x40000800
 8007544:	40000c00 	.word	0x40000c00
 8007548:	40014000 	.word	0x40014000

0800754c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b086      	sub	sp, #24
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d101      	bne.n	8007560 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e097      	b.n	8007690 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b00      	cmp	r3, #0
 800756a:	d106      	bne.n	800757a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 f88f 	bl	8007698 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2202      	movs	r2, #2
 800757e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	6812      	ldr	r2, [r2, #0]
 800758c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007590:	f023 0307 	bic.w	r3, r3, #7
 8007594:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	3304      	adds	r3, #4
 800759e:	4619      	mov	r1, r3
 80075a0:	4610      	mov	r0, r2
 80075a2:	f000 fb03 	bl	8007bac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	699b      	ldr	r3, [r3, #24]
 80075b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	6a1b      	ldr	r3, [r3, #32]
 80075bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075ce:	f023 0303 	bic.w	r3, r3, #3
 80075d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	689a      	ldr	r2, [r3, #8]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	021b      	lsls	r3, r3, #8
 80075de:	4313      	orrs	r3, r2
 80075e0:	693a      	ldr	r2, [r7, #16]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80075ec:	f023 030c 	bic.w	r3, r3, #12
 80075f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	68da      	ldr	r2, [r3, #12]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	69db      	ldr	r3, [r3, #28]
 8007606:	021b      	lsls	r3, r3, #8
 8007608:	4313      	orrs	r3, r2
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	4313      	orrs	r3, r2
 800760e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	011a      	lsls	r2, r3, #4
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	031b      	lsls	r3, r3, #12
 800761c:	4313      	orrs	r3, r2
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	4313      	orrs	r3, r2
 8007622:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800762a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007632:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	685a      	ldr	r2, [r3, #4]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	695b      	ldr	r3, [r3, #20]
 800763c:	011b      	lsls	r3, r3, #4
 800763e:	4313      	orrs	r3, r2
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	4313      	orrs	r3, r2
 8007644:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	697a      	ldr	r2, [r7, #20]
 800764c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	693a      	ldr	r2, [r7, #16]
 8007654:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2201      	movs	r2, #1
 800767a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3718      	adds	r7, #24
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076bc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80076c4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80076cc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80076d4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d110      	bne.n	80076fe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d102      	bne.n	80076e8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80076e2:	7b7b      	ldrb	r3, [r7, #13]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d001      	beq.n	80076ec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e069      	b.n	80077c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2202      	movs	r2, #2
 80076f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2202      	movs	r2, #2
 80076f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076fc:	e031      	b.n	8007762 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2b04      	cmp	r3, #4
 8007702:	d110      	bne.n	8007726 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007704:	7bbb      	ldrb	r3, [r7, #14]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d102      	bne.n	8007710 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800770a:	7b3b      	ldrb	r3, [r7, #12]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d001      	beq.n	8007714 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e055      	b.n	80077c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2202      	movs	r2, #2
 8007718:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2202      	movs	r2, #2
 8007720:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007724:	e01d      	b.n	8007762 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007726:	7bfb      	ldrb	r3, [r7, #15]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d108      	bne.n	800773e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800772c:	7bbb      	ldrb	r3, [r7, #14]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d105      	bne.n	800773e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007732:	7b7b      	ldrb	r3, [r7, #13]
 8007734:	2b01      	cmp	r3, #1
 8007736:	d102      	bne.n	800773e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007738:	7b3b      	ldrb	r3, [r7, #12]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d001      	beq.n	8007742 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e03e      	b.n	80077c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2202      	movs	r2, #2
 8007746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2202      	movs	r2, #2
 800774e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2202      	movs	r2, #2
 8007756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2202      	movs	r2, #2
 800775e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d003      	beq.n	8007770 <HAL_TIM_Encoder_Start+0xc4>
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	2b04      	cmp	r3, #4
 800776c:	d008      	beq.n	8007780 <HAL_TIM_Encoder_Start+0xd4>
 800776e:	e00f      	b.n	8007790 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2201      	movs	r2, #1
 8007776:	2100      	movs	r1, #0
 8007778:	4618      	mov	r0, r3
 800777a:	f000 fc23 	bl	8007fc4 <TIM_CCxChannelCmd>
      break;
 800777e:	e016      	b.n	80077ae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2201      	movs	r2, #1
 8007786:	2104      	movs	r1, #4
 8007788:	4618      	mov	r0, r3
 800778a:	f000 fc1b 	bl	8007fc4 <TIM_CCxChannelCmd>
      break;
 800778e:	e00e      	b.n	80077ae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2201      	movs	r2, #1
 8007796:	2100      	movs	r1, #0
 8007798:	4618      	mov	r0, r3
 800779a:	f000 fc13 	bl	8007fc4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2201      	movs	r2, #1
 80077a4:	2104      	movs	r1, #4
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 fc0c 	bl	8007fc4 <TIM_CCxChannelCmd>
      break;
 80077ac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f042 0201 	orr.w	r2, r2, #1
 80077bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d122      	bne.n	8007824 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	f003 0302 	and.w	r3, r3, #2
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d11b      	bne.n	8007824 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f06f 0202 	mvn.w	r2, #2
 80077f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	f003 0303 	and.w	r3, r3, #3
 8007806:	2b00      	cmp	r3, #0
 8007808:	d003      	beq.n	8007812 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f9b0 	bl	8007b70 <HAL_TIM_IC_CaptureCallback>
 8007810:	e005      	b.n	800781e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f9a2 	bl	8007b5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f9b3 	bl	8007b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	f003 0304 	and.w	r3, r3, #4
 800782e:	2b04      	cmp	r3, #4
 8007830:	d122      	bne.n	8007878 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	f003 0304 	and.w	r3, r3, #4
 800783c:	2b04      	cmp	r3, #4
 800783e:	d11b      	bne.n	8007878 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f06f 0204 	mvn.w	r2, #4
 8007848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2202      	movs	r2, #2
 800784e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	699b      	ldr	r3, [r3, #24]
 8007856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800785a:	2b00      	cmp	r3, #0
 800785c:	d003      	beq.n	8007866 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f986 	bl	8007b70 <HAL_TIM_IC_CaptureCallback>
 8007864:	e005      	b.n	8007872 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f978 	bl	8007b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f989 	bl	8007b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	f003 0308 	and.w	r3, r3, #8
 8007882:	2b08      	cmp	r3, #8
 8007884:	d122      	bne.n	80078cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	f003 0308 	and.w	r3, r3, #8
 8007890:	2b08      	cmp	r3, #8
 8007892:	d11b      	bne.n	80078cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f06f 0208 	mvn.w	r2, #8
 800789c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2204      	movs	r2, #4
 80078a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	69db      	ldr	r3, [r3, #28]
 80078aa:	f003 0303 	and.w	r3, r3, #3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d003      	beq.n	80078ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f95c 	bl	8007b70 <HAL_TIM_IC_CaptureCallback>
 80078b8:	e005      	b.n	80078c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f94e 	bl	8007b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f95f 	bl	8007b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	f003 0310 	and.w	r3, r3, #16
 80078d6:	2b10      	cmp	r3, #16
 80078d8:	d122      	bne.n	8007920 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	f003 0310 	and.w	r3, r3, #16
 80078e4:	2b10      	cmp	r3, #16
 80078e6:	d11b      	bne.n	8007920 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f06f 0210 	mvn.w	r2, #16
 80078f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2208      	movs	r2, #8
 80078f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007902:	2b00      	cmp	r3, #0
 8007904:	d003      	beq.n	800790e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f932 	bl	8007b70 <HAL_TIM_IC_CaptureCallback>
 800790c:	e005      	b.n	800791a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f924 	bl	8007b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f935 	bl	8007b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	2b01      	cmp	r3, #1
 800792c:	d10e      	bne.n	800794c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	f003 0301 	and.w	r3, r3, #1
 8007938:	2b01      	cmp	r3, #1
 800793a:	d107      	bne.n	800794c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f06f 0201 	mvn.w	r2, #1
 8007944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7fa fe1c 	bl	8002584 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007956:	2b80      	cmp	r3, #128	; 0x80
 8007958:	d10e      	bne.n	8007978 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007964:	2b80      	cmp	r3, #128	; 0x80
 8007966:	d107      	bne.n	8007978 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 fb55 	bl	8008022 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007982:	2b40      	cmp	r3, #64	; 0x40
 8007984:	d10e      	bne.n	80079a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007990:	2b40      	cmp	r3, #64	; 0x40
 8007992:	d107      	bne.n	80079a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800799c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f8fa 	bl	8007b98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	f003 0320 	and.w	r3, r3, #32
 80079ae:	2b20      	cmp	r3, #32
 80079b0:	d10e      	bne.n	80079d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	f003 0320 	and.w	r3, r3, #32
 80079bc:	2b20      	cmp	r3, #32
 80079be:	d107      	bne.n	80079d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f06f 0220 	mvn.w	r2, #32
 80079c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fb1f 	bl	800800e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079d0:	bf00      	nop
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079e4:	2300      	movs	r3, #0
 80079e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d101      	bne.n	80079f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80079f2:	2302      	movs	r3, #2
 80079f4:	e0ae      	b.n	8007b54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2b0c      	cmp	r3, #12
 8007a02:	f200 809f 	bhi.w	8007b44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007a06:	a201      	add	r2, pc, #4	; (adr r2, 8007a0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0c:	08007a41 	.word	0x08007a41
 8007a10:	08007b45 	.word	0x08007b45
 8007a14:	08007b45 	.word	0x08007b45
 8007a18:	08007b45 	.word	0x08007b45
 8007a1c:	08007a81 	.word	0x08007a81
 8007a20:	08007b45 	.word	0x08007b45
 8007a24:	08007b45 	.word	0x08007b45
 8007a28:	08007b45 	.word	0x08007b45
 8007a2c:	08007ac3 	.word	0x08007ac3
 8007a30:	08007b45 	.word	0x08007b45
 8007a34:	08007b45 	.word	0x08007b45
 8007a38:	08007b45 	.word	0x08007b45
 8007a3c:	08007b03 	.word	0x08007b03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68b9      	ldr	r1, [r7, #8]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 f930 	bl	8007cac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	699a      	ldr	r2, [r3, #24]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f042 0208 	orr.w	r2, r2, #8
 8007a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	699a      	ldr	r2, [r3, #24]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f022 0204 	bic.w	r2, r2, #4
 8007a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6999      	ldr	r1, [r3, #24]
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	691a      	ldr	r2, [r3, #16]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	430a      	orrs	r2, r1
 8007a7c:	619a      	str	r2, [r3, #24]
      break;
 8007a7e:	e064      	b.n	8007b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68b9      	ldr	r1, [r7, #8]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 f976 	bl	8007d78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	699a      	ldr	r2, [r3, #24]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	699a      	ldr	r2, [r3, #24]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6999      	ldr	r1, [r3, #24]
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	021a      	lsls	r2, r3, #8
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	430a      	orrs	r2, r1
 8007abe:	619a      	str	r2, [r3, #24]
      break;
 8007ac0:	e043      	b.n	8007b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68b9      	ldr	r1, [r7, #8]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f000 f9c1 	bl	8007e50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	69da      	ldr	r2, [r3, #28]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f042 0208 	orr.w	r2, r2, #8
 8007adc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	69da      	ldr	r2, [r3, #28]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f022 0204 	bic.w	r2, r2, #4
 8007aec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	69d9      	ldr	r1, [r3, #28]
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	691a      	ldr	r2, [r3, #16]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	430a      	orrs	r2, r1
 8007afe:	61da      	str	r2, [r3, #28]
      break;
 8007b00:	e023      	b.n	8007b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68b9      	ldr	r1, [r7, #8]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f000 fa0b 	bl	8007f24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	69da      	ldr	r2, [r3, #28]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	69da      	ldr	r2, [r3, #28]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	69d9      	ldr	r1, [r3, #28]
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	021a      	lsls	r2, r3, #8
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	61da      	str	r2, [r3, #28]
      break;
 8007b42:	e002      	b.n	8007b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	75fb      	strb	r3, [r7, #23]
      break;
 8007b48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3718      	adds	r7, #24
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b8c:	bf00      	nop
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a34      	ldr	r2, [pc, #208]	; (8007c90 <TIM_Base_SetConfig+0xe4>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d00f      	beq.n	8007be4 <TIM_Base_SetConfig+0x38>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bca:	d00b      	beq.n	8007be4 <TIM_Base_SetConfig+0x38>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a31      	ldr	r2, [pc, #196]	; (8007c94 <TIM_Base_SetConfig+0xe8>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d007      	beq.n	8007be4 <TIM_Base_SetConfig+0x38>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a30      	ldr	r2, [pc, #192]	; (8007c98 <TIM_Base_SetConfig+0xec>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d003      	beq.n	8007be4 <TIM_Base_SetConfig+0x38>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a2f      	ldr	r2, [pc, #188]	; (8007c9c <TIM_Base_SetConfig+0xf0>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d108      	bne.n	8007bf6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a25      	ldr	r2, [pc, #148]	; (8007c90 <TIM_Base_SetConfig+0xe4>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d01b      	beq.n	8007c36 <TIM_Base_SetConfig+0x8a>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c04:	d017      	beq.n	8007c36 <TIM_Base_SetConfig+0x8a>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a22      	ldr	r2, [pc, #136]	; (8007c94 <TIM_Base_SetConfig+0xe8>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d013      	beq.n	8007c36 <TIM_Base_SetConfig+0x8a>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a21      	ldr	r2, [pc, #132]	; (8007c98 <TIM_Base_SetConfig+0xec>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d00f      	beq.n	8007c36 <TIM_Base_SetConfig+0x8a>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a20      	ldr	r2, [pc, #128]	; (8007c9c <TIM_Base_SetConfig+0xf0>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d00b      	beq.n	8007c36 <TIM_Base_SetConfig+0x8a>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a1f      	ldr	r2, [pc, #124]	; (8007ca0 <TIM_Base_SetConfig+0xf4>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d007      	beq.n	8007c36 <TIM_Base_SetConfig+0x8a>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a1e      	ldr	r2, [pc, #120]	; (8007ca4 <TIM_Base_SetConfig+0xf8>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d003      	beq.n	8007c36 <TIM_Base_SetConfig+0x8a>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a1d      	ldr	r2, [pc, #116]	; (8007ca8 <TIM_Base_SetConfig+0xfc>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d108      	bne.n	8007c48 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	695b      	ldr	r3, [r3, #20]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	689a      	ldr	r2, [r3, #8]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a08      	ldr	r2, [pc, #32]	; (8007c90 <TIM_Base_SetConfig+0xe4>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d103      	bne.n	8007c7c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	691a      	ldr	r2, [r3, #16]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	615a      	str	r2, [r3, #20]
}
 8007c82:	bf00      	nop
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	40010000 	.word	0x40010000
 8007c94:	40000400 	.word	0x40000400
 8007c98:	40000800 	.word	0x40000800
 8007c9c:	40000c00 	.word	0x40000c00
 8007ca0:	40014000 	.word	0x40014000
 8007ca4:	40014400 	.word	0x40014400
 8007ca8:	40014800 	.word	0x40014800

08007cac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b087      	sub	sp, #28
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	f023 0201 	bic.w	r2, r3, #1
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a1b      	ldr	r3, [r3, #32]
 8007cc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	699b      	ldr	r3, [r3, #24]
 8007cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f023 0303 	bic.w	r3, r3, #3
 8007ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	f023 0302 	bic.w	r3, r3, #2
 8007cf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a1c      	ldr	r2, [pc, #112]	; (8007d74 <TIM_OC1_SetConfig+0xc8>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d10c      	bne.n	8007d22 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	f023 0308 	bic.w	r3, r3, #8
 8007d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	f023 0304 	bic.w	r3, r3, #4
 8007d20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a13      	ldr	r2, [pc, #76]	; (8007d74 <TIM_OC1_SetConfig+0xc8>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d111      	bne.n	8007d4e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	693a      	ldr	r2, [r7, #16]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	693a      	ldr	r2, [r7, #16]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	693a      	ldr	r2, [r7, #16]
 8007d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	685a      	ldr	r2, [r3, #4]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	621a      	str	r2, [r3, #32]
}
 8007d68:	bf00      	nop
 8007d6a:	371c      	adds	r7, #28
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr
 8007d74:	40010000 	.word	0x40010000

08007d78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b087      	sub	sp, #28
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a1b      	ldr	r3, [r3, #32]
 8007d86:	f023 0210 	bic.w	r2, r3, #16
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a1b      	ldr	r3, [r3, #32]
 8007d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	021b      	lsls	r3, r3, #8
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	f023 0320 	bic.w	r3, r3, #32
 8007dc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	011b      	lsls	r3, r3, #4
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a1e      	ldr	r2, [pc, #120]	; (8007e4c <TIM_OC2_SetConfig+0xd4>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d10d      	bne.n	8007df4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	011b      	lsls	r3, r3, #4
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007df2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a15      	ldr	r2, [pc, #84]	; (8007e4c <TIM_OC2_SetConfig+0xd4>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d113      	bne.n	8007e24 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	695b      	ldr	r3, [r3, #20]
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	693a      	ldr	r2, [r7, #16]
 8007e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	685a      	ldr	r2, [r3, #4]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	621a      	str	r2, [r3, #32]
}
 8007e3e:	bf00      	nop
 8007e40:	371c      	adds	r7, #28
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	40010000 	.word	0x40010000

08007e50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b087      	sub	sp, #28
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a1b      	ldr	r3, [r3, #32]
 8007e5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a1b      	ldr	r3, [r3, #32]
 8007e6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	69db      	ldr	r3, [r3, #28]
 8007e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f023 0303 	bic.w	r3, r3, #3
 8007e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	021b      	lsls	r3, r3, #8
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a1d      	ldr	r2, [pc, #116]	; (8007f20 <TIM_OC3_SetConfig+0xd0>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d10d      	bne.n	8007eca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007eb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	021b      	lsls	r3, r3, #8
 8007ebc:	697a      	ldr	r2, [r7, #20]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ec8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a14      	ldr	r2, [pc, #80]	; (8007f20 <TIM_OC3_SetConfig+0xd0>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d113      	bne.n	8007efa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ed8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	011b      	lsls	r3, r3, #4
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	011b      	lsls	r3, r3, #4
 8007ef4:	693a      	ldr	r2, [r7, #16]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	693a      	ldr	r2, [r7, #16]
 8007efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	685a      	ldr	r2, [r3, #4]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	697a      	ldr	r2, [r7, #20]
 8007f12:	621a      	str	r2, [r3, #32]
}
 8007f14:	bf00      	nop
 8007f16:	371c      	adds	r7, #28
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr
 8007f20:	40010000 	.word	0x40010000

08007f24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b087      	sub	sp, #28
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a1b      	ldr	r3, [r3, #32]
 8007f32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	69db      	ldr	r3, [r3, #28]
 8007f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	021b      	lsls	r3, r3, #8
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	031b      	lsls	r3, r3, #12
 8007f76:	693a      	ldr	r2, [r7, #16]
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a10      	ldr	r2, [pc, #64]	; (8007fc0 <TIM_OC4_SetConfig+0x9c>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d109      	bne.n	8007f98 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	019b      	lsls	r3, r3, #6
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	697a      	ldr	r2, [r7, #20]
 8007f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	685a      	ldr	r2, [r3, #4]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	693a      	ldr	r2, [r7, #16]
 8007fb0:	621a      	str	r2, [r3, #32]
}
 8007fb2:	bf00      	nop
 8007fb4:	371c      	adds	r7, #28
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	40010000 	.word	0x40010000

08007fc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b087      	sub	sp, #28
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	f003 031f 	and.w	r3, r3, #31
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6a1a      	ldr	r2, [r3, #32]
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	43db      	mvns	r3, r3
 8007fe6:	401a      	ands	r2, r3
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6a1a      	ldr	r2, [r3, #32]
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	f003 031f 	and.w	r3, r3, #31
 8007ff6:	6879      	ldr	r1, [r7, #4]
 8007ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8007ffc:	431a      	orrs	r2, r3
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	621a      	str	r2, [r3, #32]
}
 8008002:	bf00      	nop
 8008004:	371c      	adds	r7, #28
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800800e:	b480      	push	{r7}
 8008010:	b083      	sub	sp, #12
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008016:	bf00      	nop
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr

08008022 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008022:	b480      	push	{r7}
 8008024:	b083      	sub	sp, #12
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800802a:	bf00      	nop
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b082      	sub	sp, #8
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d101      	bne.n	8008048 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e03f      	b.n	80080c8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800804e:	b2db      	uxtb	r3, r3
 8008050:	2b00      	cmp	r3, #0
 8008052:	d106      	bne.n	8008062 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f7fb f92b 	bl	80032b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2224      	movs	r2, #36	; 0x24
 8008066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68da      	ldr	r2, [r3, #12]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008078:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f001 f978 	bl	8009370 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	691a      	ldr	r2, [r3, #16]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800808e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	695a      	ldr	r2, [r3, #20]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800809e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68da      	ldr	r2, [r3, #12]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080ae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2220      	movs	r2, #32
 80080ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2220      	movs	r2, #32
 80080c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b08a      	sub	sp, #40	; 0x28
 80080d4:	af02      	add	r7, sp, #8
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	603b      	str	r3, [r7, #0]
 80080dc:	4613      	mov	r3, r2
 80080de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80080e0:	2300      	movs	r3, #0
 80080e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	2b20      	cmp	r3, #32
 80080ee:	d17c      	bne.n	80081ea <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d002      	beq.n	80080fc <HAL_UART_Transmit+0x2c>
 80080f6:	88fb      	ldrh	r3, [r7, #6]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e075      	b.n	80081ec <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008106:	2b01      	cmp	r3, #1
 8008108:	d101      	bne.n	800810e <HAL_UART_Transmit+0x3e>
 800810a:	2302      	movs	r3, #2
 800810c:	e06e      	b.n	80081ec <HAL_UART_Transmit+0x11c>
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2200      	movs	r2, #0
 800811a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2221      	movs	r2, #33	; 0x21
 8008120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008124:	f7fb fc3c 	bl	80039a0 <HAL_GetTick>
 8008128:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	88fa      	ldrh	r2, [r7, #6]
 800812e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	88fa      	ldrh	r2, [r7, #6]
 8008134:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800813e:	d108      	bne.n	8008152 <HAL_UART_Transmit+0x82>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d104      	bne.n	8008152 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008148:	2300      	movs	r3, #0
 800814a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	61bb      	str	r3, [r7, #24]
 8008150:	e003      	b.n	800815a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008156:	2300      	movs	r3, #0
 8008158:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008162:	e02a      	b.n	80081ba <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	2200      	movs	r2, #0
 800816c:	2180      	movs	r1, #128	; 0x80
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f000 fe2f 	bl	8008dd2 <UART_WaitOnFlagUntilTimeout>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d001      	beq.n	800817e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	e036      	b.n	80081ec <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10b      	bne.n	800819c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	881b      	ldrh	r3, [r3, #0]
 8008188:	461a      	mov	r2, r3
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008192:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	3302      	adds	r3, #2
 8008198:	61bb      	str	r3, [r7, #24]
 800819a:	e007      	b.n	80081ac <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	781a      	ldrb	r2, [r3, #0]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	3301      	adds	r3, #1
 80081aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	3b01      	subs	r3, #1
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081be:	b29b      	uxth	r3, r3
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1cf      	bne.n	8008164 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	2200      	movs	r2, #0
 80081cc:	2140      	movs	r1, #64	; 0x40
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f000 fdff 	bl	8008dd2 <UART_WaitOnFlagUntilTimeout>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d001      	beq.n	80081de <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80081da:	2303      	movs	r3, #3
 80081dc:	e006      	b.n	80081ec <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2220      	movs	r2, #32
 80081e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80081e6:	2300      	movs	r3, #0
 80081e8:	e000      	b.n	80081ec <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80081ea:	2302      	movs	r3, #2
  }
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3720      	adds	r7, #32
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b08a      	sub	sp, #40	; 0x28
 80081f8:	af02      	add	r7, sp, #8
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	603b      	str	r3, [r7, #0]
 8008200:	4613      	mov	r3, r2
 8008202:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008204:	2300      	movs	r3, #0
 8008206:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800820e:	b2db      	uxtb	r3, r3
 8008210:	2b20      	cmp	r3, #32
 8008212:	f040 808c 	bne.w	800832e <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d002      	beq.n	8008222 <HAL_UART_Receive+0x2e>
 800821c:	88fb      	ldrh	r3, [r7, #6]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	e084      	b.n	8008330 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800822c:	2b01      	cmp	r3, #1
 800822e:	d101      	bne.n	8008234 <HAL_UART_Receive+0x40>
 8008230:	2302      	movs	r3, #2
 8008232:	e07d      	b.n	8008330 <HAL_UART_Receive+0x13c>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2200      	movs	r2, #0
 8008240:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2222      	movs	r2, #34	; 0x22
 8008246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2200      	movs	r2, #0
 800824e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008250:	f7fb fba6 	bl	80039a0 <HAL_GetTick>
 8008254:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	88fa      	ldrh	r2, [r7, #6]
 800825a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	88fa      	ldrh	r2, [r7, #6]
 8008260:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800826a:	d108      	bne.n	800827e <HAL_UART_Receive+0x8a>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d104      	bne.n	800827e <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8008274:	2300      	movs	r3, #0
 8008276:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	61bb      	str	r3, [r7, #24]
 800827c:	e003      	b.n	8008286 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008282:	2300      	movs	r3, #0
 8008284:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800828e:	e043      	b.n	8008318 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	2200      	movs	r2, #0
 8008298:	2120      	movs	r1, #32
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f000 fd99 	bl	8008dd2 <UART_WaitOnFlagUntilTimeout>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d001      	beq.n	80082aa <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80082a6:	2303      	movs	r3, #3
 80082a8:	e042      	b.n	8008330 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d10c      	bne.n	80082ca <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082bc:	b29a      	uxth	r2, r3
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	3302      	adds	r3, #2
 80082c6:	61bb      	str	r3, [r7, #24]
 80082c8:	e01f      	b.n	800830a <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082d2:	d007      	beq.n	80082e4 <HAL_UART_Receive+0xf0>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d10a      	bne.n	80082f2 <HAL_UART_Receive+0xfe>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d106      	bne.n	80082f2 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	b2da      	uxtb	r2, r3
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	701a      	strb	r2, [r3, #0]
 80082f0:	e008      	b.n	8008304 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082fe:	b2da      	uxtb	r2, r3
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	3301      	adds	r3, #1
 8008308:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800830e:	b29b      	uxth	r3, r3
 8008310:	3b01      	subs	r3, #1
 8008312:	b29a      	uxth	r2, r3
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800831c:	b29b      	uxth	r3, r3
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1b6      	bne.n	8008290 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2220      	movs	r2, #32
 8008326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800832a:	2300      	movs	r3, #0
 800832c:	e000      	b.n	8008330 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800832e:	2302      	movs	r3, #2
  }
}
 8008330:	4618      	mov	r0, r3
 8008332:	3720      	adds	r7, #32
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b08c      	sub	sp, #48	; 0x30
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	4613      	mov	r3, r2
 8008344:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b20      	cmp	r3, #32
 8008350:	d165      	bne.n	800841e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d002      	beq.n	800835e <HAL_UART_Transmit_DMA+0x26>
 8008358:	88fb      	ldrh	r3, [r7, #6]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d101      	bne.n	8008362 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e05e      	b.n	8008420 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008368:	2b01      	cmp	r3, #1
 800836a:	d101      	bne.n	8008370 <HAL_UART_Transmit_DMA+0x38>
 800836c:	2302      	movs	r3, #2
 800836e:	e057      	b.n	8008420 <HAL_UART_Transmit_DMA+0xe8>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	88fa      	ldrh	r2, [r7, #6]
 8008382:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	88fa      	ldrh	r2, [r7, #6]
 8008388:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2200      	movs	r2, #0
 800838e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2221      	movs	r2, #33	; 0x21
 8008394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800839c:	4a22      	ldr	r2, [pc, #136]	; (8008428 <HAL_UART_Transmit_DMA+0xf0>)
 800839e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a4:	4a21      	ldr	r2, [pc, #132]	; (800842c <HAL_UART_Transmit_DMA+0xf4>)
 80083a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ac:	4a20      	ldr	r2, [pc, #128]	; (8008430 <HAL_UART_Transmit_DMA+0xf8>)
 80083ae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b4:	2200      	movs	r2, #0
 80083b6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80083b8:	f107 0308 	add.w	r3, r7, #8
 80083bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80083c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c4:	6819      	ldr	r1, [r3, #0]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	3304      	adds	r3, #4
 80083cc:	461a      	mov	r2, r3
 80083ce:	88fb      	ldrh	r3, [r7, #6]
 80083d0:	f7fb ff76 	bl	80042c0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80083dc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	3314      	adds	r3, #20
 80083ec:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	e853 3f00 	ldrex	r3, [r3]
 80083f4:	617b      	str	r3, [r7, #20]
   return(result);
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	3314      	adds	r3, #20
 8008404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008406:	627a      	str	r2, [r7, #36]	; 0x24
 8008408:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840a:	6a39      	ldr	r1, [r7, #32]
 800840c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800840e:	e841 2300 	strex	r3, r2, [r1]
 8008412:	61fb      	str	r3, [r7, #28]
   return(result);
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1e5      	bne.n	80083e6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800841a:	2300      	movs	r3, #0
 800841c:	e000      	b.n	8008420 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800841e:	2302      	movs	r3, #2
  }
}
 8008420:	4618      	mov	r0, r3
 8008422:	3730      	adds	r7, #48	; 0x30
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	08008b2d 	.word	0x08008b2d
 800842c:	08008bc7 	.word	0x08008bc7
 8008430:	08008d3f 	.word	0x08008d3f

08008434 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	4613      	mov	r3, r2
 8008440:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008448:	b2db      	uxtb	r3, r3
 800844a:	2b20      	cmp	r3, #32
 800844c:	d11d      	bne.n	800848a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d002      	beq.n	800845a <HAL_UART_Receive_DMA+0x26>
 8008454:	88fb      	ldrh	r3, [r7, #6]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d101      	bne.n	800845e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	e016      	b.n	800848c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008464:	2b01      	cmp	r3, #1
 8008466:	d101      	bne.n	800846c <HAL_UART_Receive_DMA+0x38>
 8008468:	2302      	movs	r3, #2
 800846a:	e00f      	b.n	800848c <HAL_UART_Receive_DMA+0x58>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2201      	movs	r2, #1
 8008470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800847a:	88fb      	ldrh	r3, [r7, #6]
 800847c:	461a      	mov	r2, r3
 800847e:	68b9      	ldr	r1, [r7, #8]
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f000 fd15 	bl	8008eb0 <UART_Start_Receive_DMA>
 8008486:	4603      	mov	r3, r0
 8008488:	e000      	b.n	800848c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800848a:	2302      	movs	r3, #2
  }
}
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b090      	sub	sp, #64	; 0x40
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800849c:	2300      	movs	r3, #0
 800849e:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	695b      	ldr	r3, [r3, #20]
 80084a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084aa:	2b80      	cmp	r3, #128	; 0x80
 80084ac:	bf0c      	ite	eq
 80084ae:	2301      	moveq	r3, #1
 80084b0:	2300      	movne	r3, #0
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	2b21      	cmp	r3, #33	; 0x21
 80084c0:	d128      	bne.n	8008514 <HAL_UART_DMAStop+0x80>
 80084c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d025      	beq.n	8008514 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	3314      	adds	r3, #20
 80084ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d2:	e853 3f00 	ldrex	r3, [r3]
 80084d6:	623b      	str	r3, [r7, #32]
   return(result);
 80084d8:	6a3b      	ldr	r3, [r7, #32]
 80084da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084de:	63bb      	str	r3, [r7, #56]	; 0x38
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	3314      	adds	r3, #20
 80084e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084e8:	633a      	str	r2, [r7, #48]	; 0x30
 80084ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084f0:	e841 2300 	strex	r3, r2, [r1]
 80084f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1e5      	bne.n	80084c8 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008500:	2b00      	cmp	r3, #0
 8008502:	d004      	beq.n	800850e <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008508:	4618      	mov	r0, r3
 800850a:	f7fb ff31 	bl	8004370 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fd6c 	bl	8008fec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	695b      	ldr	r3, [r3, #20]
 800851a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800851e:	2b40      	cmp	r3, #64	; 0x40
 8008520:	bf0c      	ite	eq
 8008522:	2301      	moveq	r3, #1
 8008524:	2300      	movne	r3, #0
 8008526:	b2db      	uxtb	r3, r3
 8008528:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b22      	cmp	r3, #34	; 0x22
 8008534:	d128      	bne.n	8008588 <HAL_UART_DMAStop+0xf4>
 8008536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008538:	2b00      	cmp	r3, #0
 800853a:	d025      	beq.n	8008588 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	3314      	adds	r3, #20
 8008542:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	e853 3f00 	ldrex	r3, [r3]
 800854a:	60fb      	str	r3, [r7, #12]
   return(result);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008552:	637b      	str	r3, [r7, #52]	; 0x34
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	3314      	adds	r3, #20
 800855a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800855c:	61fa      	str	r2, [r7, #28]
 800855e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008560:	69b9      	ldr	r1, [r7, #24]
 8008562:	69fa      	ldr	r2, [r7, #28]
 8008564:	e841 2300 	strex	r3, r2, [r1]
 8008568:	617b      	str	r3, [r7, #20]
   return(result);
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d1e5      	bne.n	800853c <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008574:	2b00      	cmp	r3, #0
 8008576:	d004      	beq.n	8008582 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857c:	4618      	mov	r0, r3
 800857e:	f7fb fef7 	bl	8004370 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 fd5a 	bl	800903c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3740      	adds	r7, #64	; 0x40
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
	...

08008594 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b0ba      	sub	sp, #232	; 0xe8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80085ba:	2300      	movs	r3, #0
 80085bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80085c0:	2300      	movs	r3, #0
 80085c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80085c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ca:	f003 030f 	and.w	r3, r3, #15
 80085ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80085d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d10f      	bne.n	80085fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085de:	f003 0320 	and.w	r3, r3, #32
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d009      	beq.n	80085fa <HAL_UART_IRQHandler+0x66>
 80085e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085ea:	f003 0320 	and.w	r3, r3, #32
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d003      	beq.n	80085fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fe01 	bl	80091fa <UART_Receive_IT>
      return;
 80085f8:	e256      	b.n	8008aa8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80085fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085fe:	2b00      	cmp	r3, #0
 8008600:	f000 80de 	beq.w	80087c0 <HAL_UART_IRQHandler+0x22c>
 8008604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008608:	f003 0301 	and.w	r3, r3, #1
 800860c:	2b00      	cmp	r3, #0
 800860e:	d106      	bne.n	800861e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008614:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008618:	2b00      	cmp	r3, #0
 800861a:	f000 80d1 	beq.w	80087c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800861e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00b      	beq.n	8008642 <HAL_UART_IRQHandler+0xae>
 800862a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800862e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008632:	2b00      	cmp	r3, #0
 8008634:	d005      	beq.n	8008642 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863a:	f043 0201 	orr.w	r2, r3, #1
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008646:	f003 0304 	and.w	r3, r3, #4
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00b      	beq.n	8008666 <HAL_UART_IRQHandler+0xd2>
 800864e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008652:	f003 0301 	and.w	r3, r3, #1
 8008656:	2b00      	cmp	r3, #0
 8008658:	d005      	beq.n	8008666 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865e:	f043 0202 	orr.w	r2, r3, #2
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800866a:	f003 0302 	and.w	r3, r3, #2
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00b      	beq.n	800868a <HAL_UART_IRQHandler+0xf6>
 8008672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008676:	f003 0301 	and.w	r3, r3, #1
 800867a:	2b00      	cmp	r3, #0
 800867c:	d005      	beq.n	800868a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008682:	f043 0204 	orr.w	r2, r3, #4
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800868a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800868e:	f003 0308 	and.w	r3, r3, #8
 8008692:	2b00      	cmp	r3, #0
 8008694:	d011      	beq.n	80086ba <HAL_UART_IRQHandler+0x126>
 8008696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800869a:	f003 0320 	and.w	r3, r3, #32
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d105      	bne.n	80086ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80086a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d005      	beq.n	80086ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b2:	f043 0208 	orr.w	r2, r3, #8
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f000 81ed 	beq.w	8008a9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086c8:	f003 0320 	and.w	r3, r3, #32
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d008      	beq.n	80086e2 <HAL_UART_IRQHandler+0x14e>
 80086d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086d4:	f003 0320 	and.w	r3, r3, #32
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d002      	beq.n	80086e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 fd8c 	bl	80091fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	695b      	ldr	r3, [r3, #20]
 80086e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ec:	2b40      	cmp	r3, #64	; 0x40
 80086ee:	bf0c      	ite	eq
 80086f0:	2301      	moveq	r3, #1
 80086f2:	2300      	movne	r3, #0
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fe:	f003 0308 	and.w	r3, r3, #8
 8008702:	2b00      	cmp	r3, #0
 8008704:	d103      	bne.n	800870e <HAL_UART_IRQHandler+0x17a>
 8008706:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800870a:	2b00      	cmp	r3, #0
 800870c:	d04f      	beq.n	80087ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fc94 	bl	800903c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	695b      	ldr	r3, [r3, #20]
 800871a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800871e:	2b40      	cmp	r3, #64	; 0x40
 8008720:	d141      	bne.n	80087a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	3314      	adds	r3, #20
 8008728:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008730:	e853 3f00 	ldrex	r3, [r3]
 8008734:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008738:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800873c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008740:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	3314      	adds	r3, #20
 800874a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800874e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008752:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008756:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800875a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800875e:	e841 2300 	strex	r3, r2, [r1]
 8008762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008766:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1d9      	bne.n	8008722 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008772:	2b00      	cmp	r3, #0
 8008774:	d013      	beq.n	800879e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800877a:	4a7d      	ldr	r2, [pc, #500]	; (8008970 <HAL_UART_IRQHandler+0x3dc>)
 800877c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008782:	4618      	mov	r0, r3
 8008784:	f7fb fe64 	bl	8004450 <HAL_DMA_Abort_IT>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d016      	beq.n	80087bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008798:	4610      	mov	r0, r2
 800879a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800879c:	e00e      	b.n	80087bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 f9ae 	bl	8008b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a4:	e00a      	b.n	80087bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f9aa 	bl	8008b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087ac:	e006      	b.n	80087bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f9a6 	bl	8008b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80087ba:	e170      	b.n	8008a9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087bc:	bf00      	nop
    return;
 80087be:	e16e      	b.n	8008a9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	f040 814a 	bne.w	8008a5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80087ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ce:	f003 0310 	and.w	r3, r3, #16
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f000 8143 	beq.w	8008a5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80087d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087dc:	f003 0310 	and.w	r3, r3, #16
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f000 813c 	beq.w	8008a5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80087e6:	2300      	movs	r3, #0
 80087e8:	60bb      	str	r3, [r7, #8]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	60bb      	str	r3, [r7, #8]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	60bb      	str	r3, [r7, #8]
 80087fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	695b      	ldr	r3, [r3, #20]
 8008802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008806:	2b40      	cmp	r3, #64	; 0x40
 8008808:	f040 80b4 	bne.w	8008974 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008818:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800881c:	2b00      	cmp	r3, #0
 800881e:	f000 8140 	beq.w	8008aa2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008826:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800882a:	429a      	cmp	r2, r3
 800882c:	f080 8139 	bcs.w	8008aa2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008836:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883c:	69db      	ldr	r3, [r3, #28]
 800883e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008842:	f000 8088 	beq.w	8008956 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	330c      	adds	r3, #12
 800884c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008850:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008854:	e853 3f00 	ldrex	r3, [r3]
 8008858:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800885c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008864:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	330c      	adds	r3, #12
 800886e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008872:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008876:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800887e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008882:	e841 2300 	strex	r3, r2, [r1]
 8008886:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800888a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1d9      	bne.n	8008846 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	3314      	adds	r3, #20
 8008898:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800889c:	e853 3f00 	ldrex	r3, [r3]
 80088a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80088a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088a4:	f023 0301 	bic.w	r3, r3, #1
 80088a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	3314      	adds	r3, #20
 80088b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80088b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80088ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80088be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80088c2:	e841 2300 	strex	r3, r2, [r1]
 80088c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80088c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1e1      	bne.n	8008892 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	3314      	adds	r3, #20
 80088d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088d8:	e853 3f00 	ldrex	r3, [r3]
 80088dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80088de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	3314      	adds	r3, #20
 80088ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80088f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80088f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80088f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80088fa:	e841 2300 	strex	r3, r2, [r1]
 80088fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1e3      	bne.n	80088ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2220      	movs	r2, #32
 800890a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	330c      	adds	r3, #12
 800891a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800891e:	e853 3f00 	ldrex	r3, [r3]
 8008922:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008926:	f023 0310 	bic.w	r3, r3, #16
 800892a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	330c      	adds	r3, #12
 8008934:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008938:	65ba      	str	r2, [r7, #88]	; 0x58
 800893a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800893e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008940:	e841 2300 	strex	r3, r2, [r1]
 8008944:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1e3      	bne.n	8008914 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008950:	4618      	mov	r0, r3
 8008952:	f7fb fd0d 	bl	8004370 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800895e:	b29b      	uxth	r3, r3
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	b29b      	uxth	r3, r3
 8008964:	4619      	mov	r1, r3
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f8d4 	bl	8008b14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800896c:	e099      	b.n	8008aa2 <HAL_UART_IRQHandler+0x50e>
 800896e:	bf00      	nop
 8008970:	08009103 	.word	0x08009103
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800897c:	b29b      	uxth	r3, r3
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008988:	b29b      	uxth	r3, r3
 800898a:	2b00      	cmp	r3, #0
 800898c:	f000 808b 	beq.w	8008aa6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008990:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008994:	2b00      	cmp	r3, #0
 8008996:	f000 8086 	beq.w	8008aa6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	330c      	adds	r3, #12
 80089a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a4:	e853 3f00 	ldrex	r3, [r3]
 80089a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	330c      	adds	r3, #12
 80089ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80089be:	647a      	str	r2, [r7, #68]	; 0x44
 80089c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089c6:	e841 2300 	strex	r3, r2, [r1]
 80089ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80089cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1e3      	bne.n	800899a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	3314      	adds	r3, #20
 80089d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089dc:	e853 3f00 	ldrex	r3, [r3]
 80089e0:	623b      	str	r3, [r7, #32]
   return(result);
 80089e2:	6a3b      	ldr	r3, [r7, #32]
 80089e4:	f023 0301 	bic.w	r3, r3, #1
 80089e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	3314      	adds	r3, #20
 80089f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80089f6:	633a      	str	r2, [r7, #48]	; 0x30
 80089f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089fe:	e841 2300 	strex	r3, r2, [r1]
 8008a02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1e3      	bne.n	80089d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2220      	movs	r2, #32
 8008a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	330c      	adds	r3, #12
 8008a1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	e853 3f00 	ldrex	r3, [r3]
 8008a26:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f023 0310 	bic.w	r3, r3, #16
 8008a2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	330c      	adds	r3, #12
 8008a38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008a3c:	61fa      	str	r2, [r7, #28]
 8008a3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a40:	69b9      	ldr	r1, [r7, #24]
 8008a42:	69fa      	ldr	r2, [r7, #28]
 8008a44:	e841 2300 	strex	r3, r2, [r1]
 8008a48:	617b      	str	r3, [r7, #20]
   return(result);
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d1e3      	bne.n	8008a18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a54:	4619      	mov	r1, r3
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f85c 	bl	8008b14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a5c:	e023      	b.n	8008aa6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d009      	beq.n	8008a7e <HAL_UART_IRQHandler+0x4ea>
 8008a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d003      	beq.n	8008a7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fb57 	bl	800912a <UART_Transmit_IT>
    return;
 8008a7c:	e014      	b.n	8008aa8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00e      	beq.n	8008aa8 <HAL_UART_IRQHandler+0x514>
 8008a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d008      	beq.n	8008aa8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 fb97 	bl	80091ca <UART_EndTransmit_IT>
    return;
 8008a9c:	e004      	b.n	8008aa8 <HAL_UART_IRQHandler+0x514>
    return;
 8008a9e:	bf00      	nop
 8008aa0:	e002      	b.n	8008aa8 <HAL_UART_IRQHandler+0x514>
      return;
 8008aa2:	bf00      	nop
 8008aa4:	e000      	b.n	8008aa8 <HAL_UART_IRQHandler+0x514>
      return;
 8008aa6:	bf00      	nop
  }
}
 8008aa8:	37e8      	adds	r7, #232	; 0xe8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop

08008ab0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008ab8:	bf00      	nop
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008acc:	bf00      	nop
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008ae0:	bf00      	nop
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008af4:	bf00      	nop
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b20:	bf00      	nop
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b090      	sub	sp, #64	; 0x40
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b38:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d137      	bne.n	8008bb8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	3314      	adds	r3, #20
 8008b54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b58:	e853 3f00 	ldrex	r3, [r3]
 8008b5c:	623b      	str	r3, [r7, #32]
   return(result);
 8008b5e:	6a3b      	ldr	r3, [r7, #32]
 8008b60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b64:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	3314      	adds	r3, #20
 8008b6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b6e:	633a      	str	r2, [r7, #48]	; 0x30
 8008b70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b76:	e841 2300 	strex	r3, r2, [r1]
 8008b7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1e5      	bne.n	8008b4e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	330c      	adds	r3, #12
 8008b88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	e853 3f00 	ldrex	r3, [r3]
 8008b90:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b98:	637b      	str	r3, [r7, #52]	; 0x34
 8008b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	330c      	adds	r3, #12
 8008ba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ba2:	61fa      	str	r2, [r7, #28]
 8008ba4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba6:	69b9      	ldr	r1, [r7, #24]
 8008ba8:	69fa      	ldr	r2, [r7, #28]
 8008baa:	e841 2300 	strex	r3, r2, [r1]
 8008bae:	617b      	str	r3, [r7, #20]
   return(result);
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1e5      	bne.n	8008b82 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008bb6:	e002      	b.n	8008bbe <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008bb8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008bba:	f7ff ff79 	bl	8008ab0 <HAL_UART_TxCpltCallback>
}
 8008bbe:	bf00      	nop
 8008bc0:	3740      	adds	r7, #64	; 0x40
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b084      	sub	sp, #16
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f7ff ff75 	bl	8008ac4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bda:	bf00      	nop
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b09c      	sub	sp, #112	; 0x70
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bee:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d172      	bne.n	8008ce4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c00:	2200      	movs	r2, #0
 8008c02:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	330c      	adds	r3, #12
 8008c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c0e:	e853 3f00 	ldrex	r3, [r3]
 8008c12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	330c      	adds	r3, #12
 8008c22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c24:	65ba      	str	r2, [r7, #88]	; 0x58
 8008c26:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c2c:	e841 2300 	strex	r3, r2, [r1]
 8008c30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1e5      	bne.n	8008c04 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	3314      	adds	r3, #20
 8008c3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c42:	e853 3f00 	ldrex	r3, [r3]
 8008c46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c4a:	f023 0301 	bic.w	r3, r3, #1
 8008c4e:	667b      	str	r3, [r7, #100]	; 0x64
 8008c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	3314      	adds	r3, #20
 8008c56:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008c58:	647a      	str	r2, [r7, #68]	; 0x44
 8008c5a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c60:	e841 2300 	strex	r3, r2, [r1]
 8008c64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d1e5      	bne.n	8008c38 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	3314      	adds	r3, #20
 8008c72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c76:	e853 3f00 	ldrex	r3, [r3]
 8008c7a:	623b      	str	r3, [r7, #32]
   return(result);
 8008c7c:	6a3b      	ldr	r3, [r7, #32]
 8008c7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c82:	663b      	str	r3, [r7, #96]	; 0x60
 8008c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	3314      	adds	r3, #20
 8008c8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008c8c:	633a      	str	r2, [r7, #48]	; 0x30
 8008c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c94:	e841 2300 	strex	r3, r2, [r1]
 8008c98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d1e5      	bne.n	8008c6c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ca2:	2220      	movs	r2, #32
 8008ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d119      	bne.n	8008ce4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	330c      	adds	r3, #12
 8008cb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	e853 3f00 	ldrex	r3, [r3]
 8008cbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f023 0310 	bic.w	r3, r3, #16
 8008cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	330c      	adds	r3, #12
 8008cce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008cd0:	61fa      	str	r2, [r7, #28]
 8008cd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd4:	69b9      	ldr	r1, [r7, #24]
 8008cd6:	69fa      	ldr	r2, [r7, #28]
 8008cd8:	e841 2300 	strex	r3, r2, [r1]
 8008cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d1e5      	bne.n	8008cb0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d106      	bne.n	8008cfa <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008cf4:	f7ff ff0e 	bl	8008b14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008cf8:	e002      	b.n	8008d00 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008cfa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008cfc:	f7ff feec 	bl	8008ad8 <HAL_UART_RxCpltCallback>
}
 8008d00:	bf00      	nop
 8008d02:	3770      	adds	r7, #112	; 0x70
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d14:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d108      	bne.n	8008d30 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d22:	085b      	lsrs	r3, r3, #1
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	4619      	mov	r1, r3
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f7ff fef3 	bl	8008b14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d2e:	e002      	b.n	8008d36 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f7ff fedb 	bl	8008aec <HAL_UART_RxHalfCpltCallback>
}
 8008d36:	bf00      	nop
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b084      	sub	sp, #16
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008d46:	2300      	movs	r3, #0
 8008d48:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	695b      	ldr	r3, [r3, #20]
 8008d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d5a:	2b80      	cmp	r3, #128	; 0x80
 8008d5c:	bf0c      	ite	eq
 8008d5e:	2301      	moveq	r3, #1
 8008d60:	2300      	movne	r3, #0
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	2b21      	cmp	r3, #33	; 0x21
 8008d70:	d108      	bne.n	8008d84 <UART_DMAError+0x46>
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d005      	beq.n	8008d84 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008d7e:	68b8      	ldr	r0, [r7, #8]
 8008d80:	f000 f934 	bl	8008fec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	695b      	ldr	r3, [r3, #20]
 8008d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d8e:	2b40      	cmp	r3, #64	; 0x40
 8008d90:	bf0c      	ite	eq
 8008d92:	2301      	moveq	r3, #1
 8008d94:	2300      	movne	r3, #0
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	2b22      	cmp	r3, #34	; 0x22
 8008da4:	d108      	bne.n	8008db8 <UART_DMAError+0x7a>
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d005      	beq.n	8008db8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	2200      	movs	r2, #0
 8008db0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008db2:	68b8      	ldr	r0, [r7, #8]
 8008db4:	f000 f942 	bl	800903c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dbc:	f043 0210 	orr.w	r2, r3, #16
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008dc4:	68b8      	ldr	r0, [r7, #8]
 8008dc6:	f7ff fe9b 	bl	8008b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dca:	bf00      	nop
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b090      	sub	sp, #64	; 0x40
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	60f8      	str	r0, [r7, #12]
 8008dda:	60b9      	str	r1, [r7, #8]
 8008ddc:	603b      	str	r3, [r7, #0]
 8008dde:	4613      	mov	r3, r2
 8008de0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008de2:	e050      	b.n	8008e86 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dea:	d04c      	beq.n	8008e86 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d007      	beq.n	8008e02 <UART_WaitOnFlagUntilTimeout+0x30>
 8008df2:	f7fa fdd5 	bl	80039a0 <HAL_GetTick>
 8008df6:	4602      	mov	r2, r0
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d241      	bcs.n	8008e86 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	330c      	adds	r3, #12
 8008e08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0c:	e853 3f00 	ldrex	r3, [r3]
 8008e10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	330c      	adds	r3, #12
 8008e20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e22:	637a      	str	r2, [r7, #52]	; 0x34
 8008e24:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e2a:	e841 2300 	strex	r3, r2, [r1]
 8008e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d1e5      	bne.n	8008e02 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	3314      	adds	r3, #20
 8008e3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	e853 3f00 	ldrex	r3, [r3]
 8008e44:	613b      	str	r3, [r7, #16]
   return(result);
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	f023 0301 	bic.w	r3, r3, #1
 8008e4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	3314      	adds	r3, #20
 8008e54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e56:	623a      	str	r2, [r7, #32]
 8008e58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5a:	69f9      	ldr	r1, [r7, #28]
 8008e5c:	6a3a      	ldr	r2, [r7, #32]
 8008e5e:	e841 2300 	strex	r3, r2, [r1]
 8008e62:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1e5      	bne.n	8008e36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2220      	movs	r2, #32
 8008e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2220      	movs	r2, #32
 8008e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008e82:	2303      	movs	r3, #3
 8008e84:	e00f      	b.n	8008ea6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	4013      	ands	r3, r2
 8008e90:	68ba      	ldr	r2, [r7, #8]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	bf0c      	ite	eq
 8008e96:	2301      	moveq	r3, #1
 8008e98:	2300      	movne	r3, #0
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	79fb      	ldrb	r3, [r7, #7]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d09f      	beq.n	8008de4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3740      	adds	r7, #64	; 0x40
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
	...

08008eb0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b098      	sub	sp, #96	; 0x60
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	4613      	mov	r3, r2
 8008ebc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008ebe:	68ba      	ldr	r2, [r7, #8]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	88fa      	ldrh	r2, [r7, #6]
 8008ec8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2222      	movs	r2, #34	; 0x22
 8008ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008edc:	4a40      	ldr	r2, [pc, #256]	; (8008fe0 <UART_Start_Receive_DMA+0x130>)
 8008ede:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee4:	4a3f      	ldr	r2, [pc, #252]	; (8008fe4 <UART_Start_Receive_DMA+0x134>)
 8008ee6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eec:	4a3e      	ldr	r2, [pc, #248]	; (8008fe8 <UART_Start_Receive_DMA+0x138>)
 8008eee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008ef8:	f107 0308 	add.w	r3, r7, #8
 8008efc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	3304      	adds	r3, #4
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	88fb      	ldrh	r3, [r7, #6]
 8008f10:	f7fb f9d6 	bl	80042c0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008f14:	2300      	movs	r3, #0
 8008f16:	613b      	str	r3, [r7, #16]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	613b      	str	r3, [r7, #16]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	613b      	str	r3, [r7, #16]
 8008f28:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d019      	beq.n	8008f6e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	330c      	adds	r3, #12
 8008f40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f44:	e853 3f00 	ldrex	r3, [r3]
 8008f48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f50:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	330c      	adds	r3, #12
 8008f58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f5a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008f5c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008f60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f62:	e841 2300 	strex	r3, r2, [r1]
 8008f66:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1e5      	bne.n	8008f3a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3314      	adds	r3, #20
 8008f74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f78:	e853 3f00 	ldrex	r3, [r3]
 8008f7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f80:	f043 0301 	orr.w	r3, r3, #1
 8008f84:	657b      	str	r3, [r7, #84]	; 0x54
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	3314      	adds	r3, #20
 8008f8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f8e:	63ba      	str	r2, [r7, #56]	; 0x38
 8008f90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008f94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f96:	e841 2300 	strex	r3, r2, [r1]
 8008f9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1e5      	bne.n	8008f6e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	3314      	adds	r3, #20
 8008fa8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	e853 3f00 	ldrex	r3, [r3]
 8008fb0:	617b      	str	r3, [r7, #20]
   return(result);
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fb8:	653b      	str	r3, [r7, #80]	; 0x50
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	3314      	adds	r3, #20
 8008fc0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008fc2:	627a      	str	r2, [r7, #36]	; 0x24
 8008fc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc6:	6a39      	ldr	r1, [r7, #32]
 8008fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fca:	e841 2300 	strex	r3, r2, [r1]
 8008fce:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1e5      	bne.n	8008fa2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3760      	adds	r7, #96	; 0x60
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	08008be3 	.word	0x08008be3
 8008fe4:	08008d09 	.word	0x08008d09
 8008fe8:	08008d3f 	.word	0x08008d3f

08008fec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b089      	sub	sp, #36	; 0x24
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	330c      	adds	r3, #12
 8008ffa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	e853 3f00 	ldrex	r3, [r3]
 8009002:	60bb      	str	r3, [r7, #8]
   return(result);
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800900a:	61fb      	str	r3, [r7, #28]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	330c      	adds	r3, #12
 8009012:	69fa      	ldr	r2, [r7, #28]
 8009014:	61ba      	str	r2, [r7, #24]
 8009016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009018:	6979      	ldr	r1, [r7, #20]
 800901a:	69ba      	ldr	r2, [r7, #24]
 800901c:	e841 2300 	strex	r3, r2, [r1]
 8009020:	613b      	str	r3, [r7, #16]
   return(result);
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1e5      	bne.n	8008ff4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2220      	movs	r2, #32
 800902c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009030:	bf00      	nop
 8009032:	3724      	adds	r7, #36	; 0x24
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800903c:	b480      	push	{r7}
 800903e:	b095      	sub	sp, #84	; 0x54
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	330c      	adds	r3, #12
 800904a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800904e:	e853 3f00 	ldrex	r3, [r3]
 8009052:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009056:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800905a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	330c      	adds	r3, #12
 8009062:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009064:	643a      	str	r2, [r7, #64]	; 0x40
 8009066:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009068:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800906a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800906c:	e841 2300 	strex	r3, r2, [r1]
 8009070:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009074:	2b00      	cmp	r3, #0
 8009076:	d1e5      	bne.n	8009044 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	3314      	adds	r3, #20
 800907e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009080:	6a3b      	ldr	r3, [r7, #32]
 8009082:	e853 3f00 	ldrex	r3, [r3]
 8009086:	61fb      	str	r3, [r7, #28]
   return(result);
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	f023 0301 	bic.w	r3, r3, #1
 800908e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	3314      	adds	r3, #20
 8009096:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009098:	62fa      	str	r2, [r7, #44]	; 0x2c
 800909a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800909e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090a0:	e841 2300 	strex	r3, r2, [r1]
 80090a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d1e5      	bne.n	8009078 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d119      	bne.n	80090e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	330c      	adds	r3, #12
 80090ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	e853 3f00 	ldrex	r3, [r3]
 80090c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	f023 0310 	bic.w	r3, r3, #16
 80090ca:	647b      	str	r3, [r7, #68]	; 0x44
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	330c      	adds	r3, #12
 80090d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090d4:	61ba      	str	r2, [r7, #24]
 80090d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d8:	6979      	ldr	r1, [r7, #20]
 80090da:	69ba      	ldr	r2, [r7, #24]
 80090dc:	e841 2300 	strex	r3, r2, [r1]
 80090e0:	613b      	str	r3, [r7, #16]
   return(result);
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d1e5      	bne.n	80090b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2220      	movs	r2, #32
 80090ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80090f6:	bf00      	nop
 80090f8:	3754      	adds	r7, #84	; 0x54
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr

08009102 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b084      	sub	sp, #16
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800910e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2200      	movs	r2, #0
 800911a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f7ff fcef 	bl	8008b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009122:	bf00      	nop
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800912a:	b480      	push	{r7}
 800912c:	b085      	sub	sp, #20
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009138:	b2db      	uxtb	r3, r3
 800913a:	2b21      	cmp	r3, #33	; 0x21
 800913c:	d13e      	bne.n	80091bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009146:	d114      	bne.n	8009172 <UART_Transmit_IT+0x48>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d110      	bne.n	8009172 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a1b      	ldr	r3, [r3, #32]
 8009154:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	881b      	ldrh	r3, [r3, #0]
 800915a:	461a      	mov	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009164:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a1b      	ldr	r3, [r3, #32]
 800916a:	1c9a      	adds	r2, r3, #2
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	621a      	str	r2, [r3, #32]
 8009170:	e008      	b.n	8009184 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a1b      	ldr	r3, [r3, #32]
 8009176:	1c59      	adds	r1, r3, #1
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	6211      	str	r1, [r2, #32]
 800917c:	781a      	ldrb	r2, [r3, #0]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009188:	b29b      	uxth	r3, r3
 800918a:	3b01      	subs	r3, #1
 800918c:	b29b      	uxth	r3, r3
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	4619      	mov	r1, r3
 8009192:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009194:	2b00      	cmp	r3, #0
 8009196:	d10f      	bne.n	80091b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68da      	ldr	r2, [r3, #12]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68da      	ldr	r2, [r3, #12]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80091b8:	2300      	movs	r3, #0
 80091ba:	e000      	b.n	80091be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80091bc:	2302      	movs	r3, #2
  }
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3714      	adds	r7, #20
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr

080091ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b082      	sub	sp, #8
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68da      	ldr	r2, [r3, #12]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2220      	movs	r2, #32
 80091e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f7ff fc60 	bl	8008ab0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b08c      	sub	sp, #48	; 0x30
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009208:	b2db      	uxtb	r3, r3
 800920a:	2b22      	cmp	r3, #34	; 0x22
 800920c:	f040 80ab 	bne.w	8009366 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009218:	d117      	bne.n	800924a <UART_Receive_IT+0x50>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d113      	bne.n	800924a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009222:	2300      	movs	r3, #0
 8009224:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	b29b      	uxth	r3, r3
 8009234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009238:	b29a      	uxth	r2, r3
 800923a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009242:	1c9a      	adds	r2, r3, #2
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	629a      	str	r2, [r3, #40]	; 0x28
 8009248:	e026      	b.n	8009298 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800924e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009250:	2300      	movs	r3, #0
 8009252:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800925c:	d007      	beq.n	800926e <UART_Receive_IT+0x74>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d10a      	bne.n	800927c <UART_Receive_IT+0x82>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	691b      	ldr	r3, [r3, #16]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d106      	bne.n	800927c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	b2da      	uxtb	r2, r3
 8009276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009278:	701a      	strb	r2, [r3, #0]
 800927a:	e008      	b.n	800928e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	b2db      	uxtb	r3, r3
 8009284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009288:	b2da      	uxtb	r2, r3
 800928a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009292:	1c5a      	adds	r2, r3, #1
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800929c:	b29b      	uxth	r3, r3
 800929e:	3b01      	subs	r3, #1
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	4619      	mov	r1, r3
 80092a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d15a      	bne.n	8009362 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	68da      	ldr	r2, [r3, #12]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f022 0220 	bic.w	r2, r2, #32
 80092ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	68da      	ldr	r2, [r3, #12]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	695a      	ldr	r2, [r3, #20]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f022 0201 	bic.w	r2, r2, #1
 80092da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2220      	movs	r2, #32
 80092e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d135      	bne.n	8009358 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	330c      	adds	r3, #12
 80092f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	e853 3f00 	ldrex	r3, [r3]
 8009300:	613b      	str	r3, [r7, #16]
   return(result);
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	f023 0310 	bic.w	r3, r3, #16
 8009308:	627b      	str	r3, [r7, #36]	; 0x24
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	330c      	adds	r3, #12
 8009310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009312:	623a      	str	r2, [r7, #32]
 8009314:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009316:	69f9      	ldr	r1, [r7, #28]
 8009318:	6a3a      	ldr	r2, [r7, #32]
 800931a:	e841 2300 	strex	r3, r2, [r1]
 800931e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1e5      	bne.n	80092f2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 0310 	and.w	r3, r3, #16
 8009330:	2b10      	cmp	r3, #16
 8009332:	d10a      	bne.n	800934a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009334:	2300      	movs	r3, #0
 8009336:	60fb      	str	r3, [r7, #12]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	60fb      	str	r3, [r7, #12]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	60fb      	str	r3, [r7, #12]
 8009348:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800934e:	4619      	mov	r1, r3
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f7ff fbdf 	bl	8008b14 <HAL_UARTEx_RxEventCallback>
 8009356:	e002      	b.n	800935e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f7ff fbbd 	bl	8008ad8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800935e:	2300      	movs	r3, #0
 8009360:	e002      	b.n	8009368 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009362:	2300      	movs	r3, #0
 8009364:	e000      	b.n	8009368 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009366:	2302      	movs	r3, #2
  }
}
 8009368:	4618      	mov	r0, r3
 800936a:	3730      	adds	r7, #48	; 0x30
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009374:	b0c0      	sub	sp, #256	; 0x100
 8009376:	af00      	add	r7, sp, #0
 8009378:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800937c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800938c:	68d9      	ldr	r1, [r3, #12]
 800938e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	ea40 0301 	orr.w	r3, r0, r1
 8009398:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800939a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800939e:	689a      	ldr	r2, [r3, #8]
 80093a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	431a      	orrs	r2, r3
 80093a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093ac:	695b      	ldr	r3, [r3, #20]
 80093ae:	431a      	orrs	r2, r3
 80093b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093b4:	69db      	ldr	r3, [r3, #28]
 80093b6:	4313      	orrs	r3, r2
 80093b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80093bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80093c8:	f021 010c 	bic.w	r1, r1, #12
 80093cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80093d6:	430b      	orrs	r3, r1
 80093d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80093da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	695b      	ldr	r3, [r3, #20]
 80093e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80093e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093ea:	6999      	ldr	r1, [r3, #24]
 80093ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	ea40 0301 	orr.w	r3, r0, r1
 80093f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80093f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	4b8f      	ldr	r3, [pc, #572]	; (800963c <UART_SetConfig+0x2cc>)
 8009400:	429a      	cmp	r2, r3
 8009402:	d005      	beq.n	8009410 <UART_SetConfig+0xa0>
 8009404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	4b8d      	ldr	r3, [pc, #564]	; (8009640 <UART_SetConfig+0x2d0>)
 800940c:	429a      	cmp	r2, r3
 800940e:	d104      	bne.n	800941a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009410:	f7fd feea 	bl	80071e8 <HAL_RCC_GetPCLK2Freq>
 8009414:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009418:	e003      	b.n	8009422 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800941a:	f7fd fed1 	bl	80071c0 <HAL_RCC_GetPCLK1Freq>
 800941e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009426:	69db      	ldr	r3, [r3, #28]
 8009428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800942c:	f040 810c 	bne.w	8009648 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009434:	2200      	movs	r2, #0
 8009436:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800943a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800943e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009442:	4622      	mov	r2, r4
 8009444:	462b      	mov	r3, r5
 8009446:	1891      	adds	r1, r2, r2
 8009448:	65b9      	str	r1, [r7, #88]	; 0x58
 800944a:	415b      	adcs	r3, r3
 800944c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800944e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009452:	4621      	mov	r1, r4
 8009454:	eb12 0801 	adds.w	r8, r2, r1
 8009458:	4629      	mov	r1, r5
 800945a:	eb43 0901 	adc.w	r9, r3, r1
 800945e:	f04f 0200 	mov.w	r2, #0
 8009462:	f04f 0300 	mov.w	r3, #0
 8009466:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800946a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800946e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009472:	4690      	mov	r8, r2
 8009474:	4699      	mov	r9, r3
 8009476:	4623      	mov	r3, r4
 8009478:	eb18 0303 	adds.w	r3, r8, r3
 800947c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009480:	462b      	mov	r3, r5
 8009482:	eb49 0303 	adc.w	r3, r9, r3
 8009486:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800948a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009496:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800949a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800949e:	460b      	mov	r3, r1
 80094a0:	18db      	adds	r3, r3, r3
 80094a2:	653b      	str	r3, [r7, #80]	; 0x50
 80094a4:	4613      	mov	r3, r2
 80094a6:	eb42 0303 	adc.w	r3, r2, r3
 80094aa:	657b      	str	r3, [r7, #84]	; 0x54
 80094ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80094b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80094b4:	f7f7 fb6a 	bl	8000b8c <__aeabi_uldivmod>
 80094b8:	4602      	mov	r2, r0
 80094ba:	460b      	mov	r3, r1
 80094bc:	4b61      	ldr	r3, [pc, #388]	; (8009644 <UART_SetConfig+0x2d4>)
 80094be:	fba3 2302 	umull	r2, r3, r3, r2
 80094c2:	095b      	lsrs	r3, r3, #5
 80094c4:	011c      	lsls	r4, r3, #4
 80094c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094ca:	2200      	movs	r2, #0
 80094cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80094d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80094d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80094d8:	4642      	mov	r2, r8
 80094da:	464b      	mov	r3, r9
 80094dc:	1891      	adds	r1, r2, r2
 80094de:	64b9      	str	r1, [r7, #72]	; 0x48
 80094e0:	415b      	adcs	r3, r3
 80094e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80094e8:	4641      	mov	r1, r8
 80094ea:	eb12 0a01 	adds.w	sl, r2, r1
 80094ee:	4649      	mov	r1, r9
 80094f0:	eb43 0b01 	adc.w	fp, r3, r1
 80094f4:	f04f 0200 	mov.w	r2, #0
 80094f8:	f04f 0300 	mov.w	r3, #0
 80094fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009500:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009504:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009508:	4692      	mov	sl, r2
 800950a:	469b      	mov	fp, r3
 800950c:	4643      	mov	r3, r8
 800950e:	eb1a 0303 	adds.w	r3, sl, r3
 8009512:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009516:	464b      	mov	r3, r9
 8009518:	eb4b 0303 	adc.w	r3, fp, r3
 800951c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800952c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009530:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009534:	460b      	mov	r3, r1
 8009536:	18db      	adds	r3, r3, r3
 8009538:	643b      	str	r3, [r7, #64]	; 0x40
 800953a:	4613      	mov	r3, r2
 800953c:	eb42 0303 	adc.w	r3, r2, r3
 8009540:	647b      	str	r3, [r7, #68]	; 0x44
 8009542:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009546:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800954a:	f7f7 fb1f 	bl	8000b8c <__aeabi_uldivmod>
 800954e:	4602      	mov	r2, r0
 8009550:	460b      	mov	r3, r1
 8009552:	4611      	mov	r1, r2
 8009554:	4b3b      	ldr	r3, [pc, #236]	; (8009644 <UART_SetConfig+0x2d4>)
 8009556:	fba3 2301 	umull	r2, r3, r3, r1
 800955a:	095b      	lsrs	r3, r3, #5
 800955c:	2264      	movs	r2, #100	; 0x64
 800955e:	fb02 f303 	mul.w	r3, r2, r3
 8009562:	1acb      	subs	r3, r1, r3
 8009564:	00db      	lsls	r3, r3, #3
 8009566:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800956a:	4b36      	ldr	r3, [pc, #216]	; (8009644 <UART_SetConfig+0x2d4>)
 800956c:	fba3 2302 	umull	r2, r3, r3, r2
 8009570:	095b      	lsrs	r3, r3, #5
 8009572:	005b      	lsls	r3, r3, #1
 8009574:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009578:	441c      	add	r4, r3
 800957a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800957e:	2200      	movs	r2, #0
 8009580:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009584:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009588:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800958c:	4642      	mov	r2, r8
 800958e:	464b      	mov	r3, r9
 8009590:	1891      	adds	r1, r2, r2
 8009592:	63b9      	str	r1, [r7, #56]	; 0x38
 8009594:	415b      	adcs	r3, r3
 8009596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009598:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800959c:	4641      	mov	r1, r8
 800959e:	1851      	adds	r1, r2, r1
 80095a0:	6339      	str	r1, [r7, #48]	; 0x30
 80095a2:	4649      	mov	r1, r9
 80095a4:	414b      	adcs	r3, r1
 80095a6:	637b      	str	r3, [r7, #52]	; 0x34
 80095a8:	f04f 0200 	mov.w	r2, #0
 80095ac:	f04f 0300 	mov.w	r3, #0
 80095b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80095b4:	4659      	mov	r1, fp
 80095b6:	00cb      	lsls	r3, r1, #3
 80095b8:	4651      	mov	r1, sl
 80095ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095be:	4651      	mov	r1, sl
 80095c0:	00ca      	lsls	r2, r1, #3
 80095c2:	4610      	mov	r0, r2
 80095c4:	4619      	mov	r1, r3
 80095c6:	4603      	mov	r3, r0
 80095c8:	4642      	mov	r2, r8
 80095ca:	189b      	adds	r3, r3, r2
 80095cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80095d0:	464b      	mov	r3, r9
 80095d2:	460a      	mov	r2, r1
 80095d4:	eb42 0303 	adc.w	r3, r2, r3
 80095d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80095dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80095e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80095ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80095f0:	460b      	mov	r3, r1
 80095f2:	18db      	adds	r3, r3, r3
 80095f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80095f6:	4613      	mov	r3, r2
 80095f8:	eb42 0303 	adc.w	r3, r2, r3
 80095fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009602:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009606:	f7f7 fac1 	bl	8000b8c <__aeabi_uldivmod>
 800960a:	4602      	mov	r2, r0
 800960c:	460b      	mov	r3, r1
 800960e:	4b0d      	ldr	r3, [pc, #52]	; (8009644 <UART_SetConfig+0x2d4>)
 8009610:	fba3 1302 	umull	r1, r3, r3, r2
 8009614:	095b      	lsrs	r3, r3, #5
 8009616:	2164      	movs	r1, #100	; 0x64
 8009618:	fb01 f303 	mul.w	r3, r1, r3
 800961c:	1ad3      	subs	r3, r2, r3
 800961e:	00db      	lsls	r3, r3, #3
 8009620:	3332      	adds	r3, #50	; 0x32
 8009622:	4a08      	ldr	r2, [pc, #32]	; (8009644 <UART_SetConfig+0x2d4>)
 8009624:	fba2 2303 	umull	r2, r3, r2, r3
 8009628:	095b      	lsrs	r3, r3, #5
 800962a:	f003 0207 	and.w	r2, r3, #7
 800962e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4422      	add	r2, r4
 8009636:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009638:	e106      	b.n	8009848 <UART_SetConfig+0x4d8>
 800963a:	bf00      	nop
 800963c:	40011000 	.word	0x40011000
 8009640:	40011400 	.word	0x40011400
 8009644:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800964c:	2200      	movs	r2, #0
 800964e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009652:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009656:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800965a:	4642      	mov	r2, r8
 800965c:	464b      	mov	r3, r9
 800965e:	1891      	adds	r1, r2, r2
 8009660:	6239      	str	r1, [r7, #32]
 8009662:	415b      	adcs	r3, r3
 8009664:	627b      	str	r3, [r7, #36]	; 0x24
 8009666:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800966a:	4641      	mov	r1, r8
 800966c:	1854      	adds	r4, r2, r1
 800966e:	4649      	mov	r1, r9
 8009670:	eb43 0501 	adc.w	r5, r3, r1
 8009674:	f04f 0200 	mov.w	r2, #0
 8009678:	f04f 0300 	mov.w	r3, #0
 800967c:	00eb      	lsls	r3, r5, #3
 800967e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009682:	00e2      	lsls	r2, r4, #3
 8009684:	4614      	mov	r4, r2
 8009686:	461d      	mov	r5, r3
 8009688:	4643      	mov	r3, r8
 800968a:	18e3      	adds	r3, r4, r3
 800968c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009690:	464b      	mov	r3, r9
 8009692:	eb45 0303 	adc.w	r3, r5, r3
 8009696:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800969a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80096a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80096aa:	f04f 0200 	mov.w	r2, #0
 80096ae:	f04f 0300 	mov.w	r3, #0
 80096b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80096b6:	4629      	mov	r1, r5
 80096b8:	008b      	lsls	r3, r1, #2
 80096ba:	4621      	mov	r1, r4
 80096bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096c0:	4621      	mov	r1, r4
 80096c2:	008a      	lsls	r2, r1, #2
 80096c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80096c8:	f7f7 fa60 	bl	8000b8c <__aeabi_uldivmod>
 80096cc:	4602      	mov	r2, r0
 80096ce:	460b      	mov	r3, r1
 80096d0:	4b60      	ldr	r3, [pc, #384]	; (8009854 <UART_SetConfig+0x4e4>)
 80096d2:	fba3 2302 	umull	r2, r3, r3, r2
 80096d6:	095b      	lsrs	r3, r3, #5
 80096d8:	011c      	lsls	r4, r3, #4
 80096da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096de:	2200      	movs	r2, #0
 80096e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80096e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80096e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80096ec:	4642      	mov	r2, r8
 80096ee:	464b      	mov	r3, r9
 80096f0:	1891      	adds	r1, r2, r2
 80096f2:	61b9      	str	r1, [r7, #24]
 80096f4:	415b      	adcs	r3, r3
 80096f6:	61fb      	str	r3, [r7, #28]
 80096f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80096fc:	4641      	mov	r1, r8
 80096fe:	1851      	adds	r1, r2, r1
 8009700:	6139      	str	r1, [r7, #16]
 8009702:	4649      	mov	r1, r9
 8009704:	414b      	adcs	r3, r1
 8009706:	617b      	str	r3, [r7, #20]
 8009708:	f04f 0200 	mov.w	r2, #0
 800970c:	f04f 0300 	mov.w	r3, #0
 8009710:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009714:	4659      	mov	r1, fp
 8009716:	00cb      	lsls	r3, r1, #3
 8009718:	4651      	mov	r1, sl
 800971a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800971e:	4651      	mov	r1, sl
 8009720:	00ca      	lsls	r2, r1, #3
 8009722:	4610      	mov	r0, r2
 8009724:	4619      	mov	r1, r3
 8009726:	4603      	mov	r3, r0
 8009728:	4642      	mov	r2, r8
 800972a:	189b      	adds	r3, r3, r2
 800972c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009730:	464b      	mov	r3, r9
 8009732:	460a      	mov	r2, r1
 8009734:	eb42 0303 	adc.w	r3, r2, r3
 8009738:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800973c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	67bb      	str	r3, [r7, #120]	; 0x78
 8009746:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009748:	f04f 0200 	mov.w	r2, #0
 800974c:	f04f 0300 	mov.w	r3, #0
 8009750:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009754:	4649      	mov	r1, r9
 8009756:	008b      	lsls	r3, r1, #2
 8009758:	4641      	mov	r1, r8
 800975a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800975e:	4641      	mov	r1, r8
 8009760:	008a      	lsls	r2, r1, #2
 8009762:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009766:	f7f7 fa11 	bl	8000b8c <__aeabi_uldivmod>
 800976a:	4602      	mov	r2, r0
 800976c:	460b      	mov	r3, r1
 800976e:	4611      	mov	r1, r2
 8009770:	4b38      	ldr	r3, [pc, #224]	; (8009854 <UART_SetConfig+0x4e4>)
 8009772:	fba3 2301 	umull	r2, r3, r3, r1
 8009776:	095b      	lsrs	r3, r3, #5
 8009778:	2264      	movs	r2, #100	; 0x64
 800977a:	fb02 f303 	mul.w	r3, r2, r3
 800977e:	1acb      	subs	r3, r1, r3
 8009780:	011b      	lsls	r3, r3, #4
 8009782:	3332      	adds	r3, #50	; 0x32
 8009784:	4a33      	ldr	r2, [pc, #204]	; (8009854 <UART_SetConfig+0x4e4>)
 8009786:	fba2 2303 	umull	r2, r3, r2, r3
 800978a:	095b      	lsrs	r3, r3, #5
 800978c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009790:	441c      	add	r4, r3
 8009792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009796:	2200      	movs	r2, #0
 8009798:	673b      	str	r3, [r7, #112]	; 0x70
 800979a:	677a      	str	r2, [r7, #116]	; 0x74
 800979c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80097a0:	4642      	mov	r2, r8
 80097a2:	464b      	mov	r3, r9
 80097a4:	1891      	adds	r1, r2, r2
 80097a6:	60b9      	str	r1, [r7, #8]
 80097a8:	415b      	adcs	r3, r3
 80097aa:	60fb      	str	r3, [r7, #12]
 80097ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80097b0:	4641      	mov	r1, r8
 80097b2:	1851      	adds	r1, r2, r1
 80097b4:	6039      	str	r1, [r7, #0]
 80097b6:	4649      	mov	r1, r9
 80097b8:	414b      	adcs	r3, r1
 80097ba:	607b      	str	r3, [r7, #4]
 80097bc:	f04f 0200 	mov.w	r2, #0
 80097c0:	f04f 0300 	mov.w	r3, #0
 80097c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80097c8:	4659      	mov	r1, fp
 80097ca:	00cb      	lsls	r3, r1, #3
 80097cc:	4651      	mov	r1, sl
 80097ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097d2:	4651      	mov	r1, sl
 80097d4:	00ca      	lsls	r2, r1, #3
 80097d6:	4610      	mov	r0, r2
 80097d8:	4619      	mov	r1, r3
 80097da:	4603      	mov	r3, r0
 80097dc:	4642      	mov	r2, r8
 80097de:	189b      	adds	r3, r3, r2
 80097e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80097e2:	464b      	mov	r3, r9
 80097e4:	460a      	mov	r2, r1
 80097e6:	eb42 0303 	adc.w	r3, r2, r3
 80097ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80097ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	663b      	str	r3, [r7, #96]	; 0x60
 80097f6:	667a      	str	r2, [r7, #100]	; 0x64
 80097f8:	f04f 0200 	mov.w	r2, #0
 80097fc:	f04f 0300 	mov.w	r3, #0
 8009800:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009804:	4649      	mov	r1, r9
 8009806:	008b      	lsls	r3, r1, #2
 8009808:	4641      	mov	r1, r8
 800980a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800980e:	4641      	mov	r1, r8
 8009810:	008a      	lsls	r2, r1, #2
 8009812:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009816:	f7f7 f9b9 	bl	8000b8c <__aeabi_uldivmod>
 800981a:	4602      	mov	r2, r0
 800981c:	460b      	mov	r3, r1
 800981e:	4b0d      	ldr	r3, [pc, #52]	; (8009854 <UART_SetConfig+0x4e4>)
 8009820:	fba3 1302 	umull	r1, r3, r3, r2
 8009824:	095b      	lsrs	r3, r3, #5
 8009826:	2164      	movs	r1, #100	; 0x64
 8009828:	fb01 f303 	mul.w	r3, r1, r3
 800982c:	1ad3      	subs	r3, r2, r3
 800982e:	011b      	lsls	r3, r3, #4
 8009830:	3332      	adds	r3, #50	; 0x32
 8009832:	4a08      	ldr	r2, [pc, #32]	; (8009854 <UART_SetConfig+0x4e4>)
 8009834:	fba2 2303 	umull	r2, r3, r2, r3
 8009838:	095b      	lsrs	r3, r3, #5
 800983a:	f003 020f 	and.w	r2, r3, #15
 800983e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4422      	add	r2, r4
 8009846:	609a      	str	r2, [r3, #8]
}
 8009848:	bf00      	nop
 800984a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800984e:	46bd      	mov	sp, r7
 8009850:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009854:	51eb851f 	.word	0x51eb851f

08009858 <__NVIC_SetPriority>:
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	4603      	mov	r3, r0
 8009860:	6039      	str	r1, [r7, #0]
 8009862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009868:	2b00      	cmp	r3, #0
 800986a:	db0a      	blt.n	8009882 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	b2da      	uxtb	r2, r3
 8009870:	490c      	ldr	r1, [pc, #48]	; (80098a4 <__NVIC_SetPriority+0x4c>)
 8009872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009876:	0112      	lsls	r2, r2, #4
 8009878:	b2d2      	uxtb	r2, r2
 800987a:	440b      	add	r3, r1
 800987c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009880:	e00a      	b.n	8009898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	b2da      	uxtb	r2, r3
 8009886:	4908      	ldr	r1, [pc, #32]	; (80098a8 <__NVIC_SetPriority+0x50>)
 8009888:	79fb      	ldrb	r3, [r7, #7]
 800988a:	f003 030f 	and.w	r3, r3, #15
 800988e:	3b04      	subs	r3, #4
 8009890:	0112      	lsls	r2, r2, #4
 8009892:	b2d2      	uxtb	r2, r2
 8009894:	440b      	add	r3, r1
 8009896:	761a      	strb	r2, [r3, #24]
}
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr
 80098a4:	e000e100 	.word	0xe000e100
 80098a8:	e000ed00 	.word	0xe000ed00

080098ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80098ac:	b580      	push	{r7, lr}
 80098ae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80098b0:	4b05      	ldr	r3, [pc, #20]	; (80098c8 <SysTick_Handler+0x1c>)
 80098b2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80098b4:	f001 fe38 	bl	800b528 <xTaskGetSchedulerState>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d001      	beq.n	80098c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80098be:	f002 fd1b 	bl	800c2f8 <xPortSysTickHandler>
  }
}
 80098c2:	bf00      	nop
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	e000e010 	.word	0xe000e010

080098cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80098cc:	b580      	push	{r7, lr}
 80098ce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80098d0:	2100      	movs	r1, #0
 80098d2:	f06f 0004 	mvn.w	r0, #4
 80098d6:	f7ff ffbf 	bl	8009858 <__NVIC_SetPriority>
#endif
}
 80098da:	bf00      	nop
 80098dc:	bd80      	pop	{r7, pc}
	...

080098e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098e6:	f3ef 8305 	mrs	r3, IPSR
 80098ea:	603b      	str	r3, [r7, #0]
  return(result);
 80098ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d003      	beq.n	80098fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80098f2:	f06f 0305 	mvn.w	r3, #5
 80098f6:	607b      	str	r3, [r7, #4]
 80098f8:	e00c      	b.n	8009914 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80098fa:	4b0a      	ldr	r3, [pc, #40]	; (8009924 <osKernelInitialize+0x44>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d105      	bne.n	800990e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009902:	4b08      	ldr	r3, [pc, #32]	; (8009924 <osKernelInitialize+0x44>)
 8009904:	2201      	movs	r2, #1
 8009906:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009908:	2300      	movs	r3, #0
 800990a:	607b      	str	r3, [r7, #4]
 800990c:	e002      	b.n	8009914 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800990e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009912:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009914:	687b      	ldr	r3, [r7, #4]
}
 8009916:	4618      	mov	r0, r3
 8009918:	370c      	adds	r7, #12
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	20004d5c 	.word	0x20004d5c

08009928 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800992e:	f3ef 8305 	mrs	r3, IPSR
 8009932:	603b      	str	r3, [r7, #0]
  return(result);
 8009934:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009936:	2b00      	cmp	r3, #0
 8009938:	d003      	beq.n	8009942 <osKernelStart+0x1a>
    stat = osErrorISR;
 800993a:	f06f 0305 	mvn.w	r3, #5
 800993e:	607b      	str	r3, [r7, #4]
 8009940:	e010      	b.n	8009964 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009942:	4b0b      	ldr	r3, [pc, #44]	; (8009970 <osKernelStart+0x48>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b01      	cmp	r3, #1
 8009948:	d109      	bne.n	800995e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800994a:	f7ff ffbf 	bl	80098cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800994e:	4b08      	ldr	r3, [pc, #32]	; (8009970 <osKernelStart+0x48>)
 8009950:	2202      	movs	r2, #2
 8009952:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009954:	f001 f966 	bl	800ac24 <vTaskStartScheduler>
      stat = osOK;
 8009958:	2300      	movs	r3, #0
 800995a:	607b      	str	r3, [r7, #4]
 800995c:	e002      	b.n	8009964 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800995e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009962:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009964:	687b      	ldr	r3, [r7, #4]
}
 8009966:	4618      	mov	r0, r3
 8009968:	3708      	adds	r7, #8
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	20004d5c 	.word	0x20004d5c

08009974 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800997c:	f3ef 8305 	mrs	r3, IPSR
 8009980:	60bb      	str	r3, [r7, #8]
  return(result);
 8009982:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009984:	2b00      	cmp	r3, #0
 8009986:	d003      	beq.n	8009990 <osDelay+0x1c>
    stat = osErrorISR;
 8009988:	f06f 0305 	mvn.w	r3, #5
 800998c:	60fb      	str	r3, [r7, #12]
 800998e:	e007      	b.n	80099a0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009990:	2300      	movs	r3, #0
 8009992:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d002      	beq.n	80099a0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f001 f90e 	bl	800abbc <vTaskDelay>
    }
  }

  return (stat);
 80099a0:	68fb      	ldr	r3, [r7, #12]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
	...

080099ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80099ac:	b480      	push	{r7}
 80099ae:	b085      	sub	sp, #20
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	4a07      	ldr	r2, [pc, #28]	; (80099d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80099bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	4a06      	ldr	r2, [pc, #24]	; (80099dc <vApplicationGetIdleTaskMemory+0x30>)
 80099c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2280      	movs	r2, #128	; 0x80
 80099c8:	601a      	str	r2, [r3, #0]
}
 80099ca:	bf00      	nop
 80099cc:	3714      	adds	r7, #20
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr
 80099d6:	bf00      	nop
 80099d8:	20004d60 	.word	0x20004d60
 80099dc:	20004e08 	.word	0x20004e08

080099e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80099e0:	b480      	push	{r7}
 80099e2:	b085      	sub	sp, #20
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	4a07      	ldr	r2, [pc, #28]	; (8009a0c <vApplicationGetTimerTaskMemory+0x2c>)
 80099f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	4a06      	ldr	r2, [pc, #24]	; (8009a10 <vApplicationGetTimerTaskMemory+0x30>)
 80099f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80099fe:	601a      	str	r2, [r3, #0]
}
 8009a00:	bf00      	nop
 8009a02:	3714      	adds	r7, #20
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr
 8009a0c:	20005008 	.word	0x20005008
 8009a10:	200050b0 	.word	0x200050b0

08009a14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f103 0208 	add.w	r2, r3, #8
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f103 0208 	add.w	r2, r3, #8
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f103 0208 	add.w	r2, r3, #8
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009a48:	bf00      	nop
 8009a4a:	370c      	adds	r7, #12
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009a62:	bf00      	nop
 8009a64:	370c      	adds	r7, #12
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr

08009a6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a6e:	b480      	push	{r7}
 8009a70:	b085      	sub	sp, #20
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
 8009a76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	689a      	ldr	r2, [r3, #8]
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	683a      	ldr	r2, [r7, #0]
 8009a92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	683a      	ldr	r2, [r7, #0]
 8009a98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	1c5a      	adds	r2, r3, #1
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	601a      	str	r2, [r3, #0]
}
 8009aaa:	bf00      	nop
 8009aac:	3714      	adds	r7, #20
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr

08009ab6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ab6:	b480      	push	{r7}
 8009ab8:	b085      	sub	sp, #20
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
 8009abe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009acc:	d103      	bne.n	8009ad6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	691b      	ldr	r3, [r3, #16]
 8009ad2:	60fb      	str	r3, [r7, #12]
 8009ad4:	e00c      	b.n	8009af0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	3308      	adds	r3, #8
 8009ada:	60fb      	str	r3, [r7, #12]
 8009adc:	e002      	b.n	8009ae4 <vListInsert+0x2e>
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	60fb      	str	r3, [r7, #12]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d2f6      	bcs.n	8009ade <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	685a      	ldr	r2, [r3, #4]
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	683a      	ldr	r2, [r7, #0]
 8009afe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	683a      	ldr	r2, [r7, #0]
 8009b0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	1c5a      	adds	r2, r3, #1
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	601a      	str	r2, [r3, #0]
}
 8009b1c:	bf00      	nop
 8009b1e:	3714      	adds	r7, #20
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	6892      	ldr	r2, [r2, #8]
 8009b3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	6852      	ldr	r2, [r2, #4]
 8009b48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d103      	bne.n	8009b5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	689a      	ldr	r2, [r3, #8]
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	1e5a      	subs	r2, r3, #1
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3714      	adds	r7, #20
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d10a      	bne.n	8009ba6 <xQueueGenericReset+0x2a>
	__asm volatile
 8009b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b94:	f383 8811 	msr	BASEPRI, r3
 8009b98:	f3bf 8f6f 	isb	sy
 8009b9c:	f3bf 8f4f 	dsb	sy
 8009ba0:	60bb      	str	r3, [r7, #8]
}
 8009ba2:	bf00      	nop
 8009ba4:	e7fe      	b.n	8009ba4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009ba6:	f002 fb15 	bl	800c1d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bb2:	68f9      	ldr	r1, [r7, #12]
 8009bb4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009bb6:	fb01 f303 	mul.w	r3, r1, r3
 8009bba:	441a      	add	r2, r3
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	68f9      	ldr	r1, [r7, #12]
 8009bda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009bdc:	fb01 f303 	mul.w	r3, r1, r3
 8009be0:	441a      	add	r2, r3
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	22ff      	movs	r2, #255	; 0xff
 8009bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	22ff      	movs	r2, #255	; 0xff
 8009bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d114      	bne.n	8009c26 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	691b      	ldr	r3, [r3, #16]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d01a      	beq.n	8009c3a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	3310      	adds	r3, #16
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f001 faa5 	bl	800b158 <xTaskRemoveFromEventList>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d012      	beq.n	8009c3a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009c14:	4b0c      	ldr	r3, [pc, #48]	; (8009c48 <xQueueGenericReset+0xcc>)
 8009c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c1a:	601a      	str	r2, [r3, #0]
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	f3bf 8f6f 	isb	sy
 8009c24:	e009      	b.n	8009c3a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	3310      	adds	r3, #16
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7ff fef2 	bl	8009a14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	3324      	adds	r3, #36	; 0x24
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7ff feed 	bl	8009a14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009c3a:	f002 fafb 	bl	800c234 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009c3e:	2301      	movs	r3, #1
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	e000ed04 	.word	0xe000ed04

08009c4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b08e      	sub	sp, #56	; 0x38
 8009c50:	af02      	add	r7, sp, #8
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]
 8009c58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d10a      	bne.n	8009c76 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c64:	f383 8811 	msr	BASEPRI, r3
 8009c68:	f3bf 8f6f 	isb	sy
 8009c6c:	f3bf 8f4f 	dsb	sy
 8009c70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009c72:	bf00      	nop
 8009c74:	e7fe      	b.n	8009c74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d10a      	bne.n	8009c92 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c80:	f383 8811 	msr	BASEPRI, r3
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c8e:	bf00      	nop
 8009c90:	e7fe      	b.n	8009c90 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d002      	beq.n	8009c9e <xQueueGenericCreateStatic+0x52>
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d001      	beq.n	8009ca2 <xQueueGenericCreateStatic+0x56>
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e000      	b.n	8009ca4 <xQueueGenericCreateStatic+0x58>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d10a      	bne.n	8009cbe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cac:	f383 8811 	msr	BASEPRI, r3
 8009cb0:	f3bf 8f6f 	isb	sy
 8009cb4:	f3bf 8f4f 	dsb	sy
 8009cb8:	623b      	str	r3, [r7, #32]
}
 8009cba:	bf00      	nop
 8009cbc:	e7fe      	b.n	8009cbc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d102      	bne.n	8009cca <xQueueGenericCreateStatic+0x7e>
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d101      	bne.n	8009cce <xQueueGenericCreateStatic+0x82>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e000      	b.n	8009cd0 <xQueueGenericCreateStatic+0x84>
 8009cce:	2300      	movs	r3, #0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d10a      	bne.n	8009cea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd8:	f383 8811 	msr	BASEPRI, r3
 8009cdc:	f3bf 8f6f 	isb	sy
 8009ce0:	f3bf 8f4f 	dsb	sy
 8009ce4:	61fb      	str	r3, [r7, #28]
}
 8009ce6:	bf00      	nop
 8009ce8:	e7fe      	b.n	8009ce8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009cea:	2350      	movs	r3, #80	; 0x50
 8009cec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	2b50      	cmp	r3, #80	; 0x50
 8009cf2:	d00a      	beq.n	8009d0a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf8:	f383 8811 	msr	BASEPRI, r3
 8009cfc:	f3bf 8f6f 	isb	sy
 8009d00:	f3bf 8f4f 	dsb	sy
 8009d04:	61bb      	str	r3, [r7, #24]
}
 8009d06:	bf00      	nop
 8009d08:	e7fe      	b.n	8009d08 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009d0a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00d      	beq.n	8009d32 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d18:	2201      	movs	r2, #1
 8009d1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d1e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d24:	9300      	str	r3, [sp, #0]
 8009d26:	4613      	mov	r3, r2
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	68b9      	ldr	r1, [r7, #8]
 8009d2c:	68f8      	ldr	r0, [r7, #12]
 8009d2e:	f000 f83f 	bl	8009db0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3730      	adds	r7, #48	; 0x30
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b08a      	sub	sp, #40	; 0x28
 8009d40:	af02      	add	r7, sp, #8
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	4613      	mov	r3, r2
 8009d48:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d10a      	bne.n	8009d66 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d54:	f383 8811 	msr	BASEPRI, r3
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	613b      	str	r3, [r7, #16]
}
 8009d62:	bf00      	nop
 8009d64:	e7fe      	b.n	8009d64 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	68ba      	ldr	r2, [r7, #8]
 8009d6a:	fb02 f303 	mul.w	r3, r2, r3
 8009d6e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	3350      	adds	r3, #80	; 0x50
 8009d74:	4618      	mov	r0, r3
 8009d76:	f002 fb4f 	bl	800c418 <pvPortMalloc>
 8009d7a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d011      	beq.n	8009da6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009d82:	69bb      	ldr	r3, [r7, #24]
 8009d84:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	3350      	adds	r3, #80	; 0x50
 8009d8a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009d8c:	69bb      	ldr	r3, [r7, #24]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d94:	79fa      	ldrb	r2, [r7, #7]
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	9300      	str	r3, [sp, #0]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	697a      	ldr	r2, [r7, #20]
 8009d9e:	68b9      	ldr	r1, [r7, #8]
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f000 f805 	bl	8009db0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009da6:	69bb      	ldr	r3, [r7, #24]
	}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3720      	adds	r7, #32
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	607a      	str	r2, [r7, #4]
 8009dbc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d103      	bne.n	8009dcc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009dc4:	69bb      	ldr	r3, [r7, #24]
 8009dc6:	69ba      	ldr	r2, [r7, #24]
 8009dc8:	601a      	str	r2, [r3, #0]
 8009dca:	e002      	b.n	8009dd2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	68fa      	ldr	r2, [r7, #12]
 8009dd6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	68ba      	ldr	r2, [r7, #8]
 8009ddc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009dde:	2101      	movs	r1, #1
 8009de0:	69b8      	ldr	r0, [r7, #24]
 8009de2:	f7ff fecb 	bl	8009b7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	78fa      	ldrb	r2, [r7, #3]
 8009dea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009dee:	bf00      	nop
 8009df0:	3710      	adds	r7, #16
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
	...

08009df8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b08e      	sub	sp, #56	; 0x38
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	607a      	str	r2, [r7, #4]
 8009e04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009e06:	2300      	movs	r3, #0
 8009e08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d10a      	bne.n	8009e2a <xQueueGenericSend+0x32>
	__asm volatile
 8009e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e18:	f383 8811 	msr	BASEPRI, r3
 8009e1c:	f3bf 8f6f 	isb	sy
 8009e20:	f3bf 8f4f 	dsb	sy
 8009e24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e26:	bf00      	nop
 8009e28:	e7fe      	b.n	8009e28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d103      	bne.n	8009e38 <xQueueGenericSend+0x40>
 8009e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d101      	bne.n	8009e3c <xQueueGenericSend+0x44>
 8009e38:	2301      	movs	r3, #1
 8009e3a:	e000      	b.n	8009e3e <xQueueGenericSend+0x46>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d10a      	bne.n	8009e58 <xQueueGenericSend+0x60>
	__asm volatile
 8009e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e46:	f383 8811 	msr	BASEPRI, r3
 8009e4a:	f3bf 8f6f 	isb	sy
 8009e4e:	f3bf 8f4f 	dsb	sy
 8009e52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e54:	bf00      	nop
 8009e56:	e7fe      	b.n	8009e56 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	2b02      	cmp	r3, #2
 8009e5c:	d103      	bne.n	8009e66 <xQueueGenericSend+0x6e>
 8009e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d101      	bne.n	8009e6a <xQueueGenericSend+0x72>
 8009e66:	2301      	movs	r3, #1
 8009e68:	e000      	b.n	8009e6c <xQueueGenericSend+0x74>
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d10a      	bne.n	8009e86 <xQueueGenericSend+0x8e>
	__asm volatile
 8009e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e74:	f383 8811 	msr	BASEPRI, r3
 8009e78:	f3bf 8f6f 	isb	sy
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	623b      	str	r3, [r7, #32]
}
 8009e82:	bf00      	nop
 8009e84:	e7fe      	b.n	8009e84 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e86:	f001 fb4f 	bl	800b528 <xTaskGetSchedulerState>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d102      	bne.n	8009e96 <xQueueGenericSend+0x9e>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d101      	bne.n	8009e9a <xQueueGenericSend+0xa2>
 8009e96:	2301      	movs	r3, #1
 8009e98:	e000      	b.n	8009e9c <xQueueGenericSend+0xa4>
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d10a      	bne.n	8009eb6 <xQueueGenericSend+0xbe>
	__asm volatile
 8009ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea4:	f383 8811 	msr	BASEPRI, r3
 8009ea8:	f3bf 8f6f 	isb	sy
 8009eac:	f3bf 8f4f 	dsb	sy
 8009eb0:	61fb      	str	r3, [r7, #28]
}
 8009eb2:	bf00      	nop
 8009eb4:	e7fe      	b.n	8009eb4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009eb6:	f002 f98d 	bl	800c1d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d302      	bcc.n	8009ecc <xQueueGenericSend+0xd4>
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d129      	bne.n	8009f20 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ecc:	683a      	ldr	r2, [r7, #0]
 8009ece:	68b9      	ldr	r1, [r7, #8]
 8009ed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ed2:	f000 fb4d 	bl	800a570 <prvCopyDataToQueue>
 8009ed6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d010      	beq.n	8009f02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee2:	3324      	adds	r3, #36	; 0x24
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f001 f937 	bl	800b158 <xTaskRemoveFromEventList>
 8009eea:	4603      	mov	r3, r0
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d013      	beq.n	8009f18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009ef0:	4b3f      	ldr	r3, [pc, #252]	; (8009ff0 <xQueueGenericSend+0x1f8>)
 8009ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ef6:	601a      	str	r2, [r3, #0]
 8009ef8:	f3bf 8f4f 	dsb	sy
 8009efc:	f3bf 8f6f 	isb	sy
 8009f00:	e00a      	b.n	8009f18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d007      	beq.n	8009f18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009f08:	4b39      	ldr	r3, [pc, #228]	; (8009ff0 <xQueueGenericSend+0x1f8>)
 8009f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f0e:	601a      	str	r2, [r3, #0]
 8009f10:	f3bf 8f4f 	dsb	sy
 8009f14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009f18:	f002 f98c 	bl	800c234 <vPortExitCritical>
				return pdPASS;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	e063      	b.n	8009fe8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d103      	bne.n	8009f2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f26:	f002 f985 	bl	800c234 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	e05c      	b.n	8009fe8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d106      	bne.n	8009f42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f34:	f107 0314 	add.w	r3, r7, #20
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f001 f997 	bl	800b26c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f42:	f002 f977 	bl	800c234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f46:	f000 fedd 	bl	800ad04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f4a:	f002 f943 	bl	800c1d4 <vPortEnterCritical>
 8009f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f54:	b25b      	sxtb	r3, r3
 8009f56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f5a:	d103      	bne.n	8009f64 <xQueueGenericSend+0x16c>
 8009f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f6a:	b25b      	sxtb	r3, r3
 8009f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f70:	d103      	bne.n	8009f7a <xQueueGenericSend+0x182>
 8009f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f74:	2200      	movs	r2, #0
 8009f76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f7a:	f002 f95b 	bl	800c234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f7e:	1d3a      	adds	r2, r7, #4
 8009f80:	f107 0314 	add.w	r3, r7, #20
 8009f84:	4611      	mov	r1, r2
 8009f86:	4618      	mov	r0, r3
 8009f88:	f001 f986 	bl	800b298 <xTaskCheckForTimeOut>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d124      	bne.n	8009fdc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009f92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f94:	f000 fbe4 	bl	800a760 <prvIsQueueFull>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d018      	beq.n	8009fd0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa0:	3310      	adds	r3, #16
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	4611      	mov	r1, r2
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f001 f886 	bl	800b0b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009fac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fae:	f000 fb6f 	bl	800a690 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009fb2:	f000 feb5 	bl	800ad20 <xTaskResumeAll>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	f47f af7c 	bne.w	8009eb6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009fbe:	4b0c      	ldr	r3, [pc, #48]	; (8009ff0 <xQueueGenericSend+0x1f8>)
 8009fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fc4:	601a      	str	r2, [r3, #0]
 8009fc6:	f3bf 8f4f 	dsb	sy
 8009fca:	f3bf 8f6f 	isb	sy
 8009fce:	e772      	b.n	8009eb6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009fd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fd2:	f000 fb5d 	bl	800a690 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009fd6:	f000 fea3 	bl	800ad20 <xTaskResumeAll>
 8009fda:	e76c      	b.n	8009eb6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009fdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fde:	f000 fb57 	bl	800a690 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fe2:	f000 fe9d 	bl	800ad20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009fe6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3738      	adds	r7, #56	; 0x38
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	e000ed04 	.word	0xe000ed04

08009ff4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b090      	sub	sp, #64	; 0x40
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	607a      	str	r2, [r7, #4]
 800a000:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d10a      	bne.n	800a022 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a010:	f383 8811 	msr	BASEPRI, r3
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a01e:	bf00      	nop
 800a020:	e7fe      	b.n	800a020 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d103      	bne.n	800a030 <xQueueGenericSendFromISR+0x3c>
 800a028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a02a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d101      	bne.n	800a034 <xQueueGenericSendFromISR+0x40>
 800a030:	2301      	movs	r3, #1
 800a032:	e000      	b.n	800a036 <xQueueGenericSendFromISR+0x42>
 800a034:	2300      	movs	r3, #0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d10a      	bne.n	800a050 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03e:	f383 8811 	msr	BASEPRI, r3
 800a042:	f3bf 8f6f 	isb	sy
 800a046:	f3bf 8f4f 	dsb	sy
 800a04a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a04c:	bf00      	nop
 800a04e:	e7fe      	b.n	800a04e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	2b02      	cmp	r3, #2
 800a054:	d103      	bne.n	800a05e <xQueueGenericSendFromISR+0x6a>
 800a056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d101      	bne.n	800a062 <xQueueGenericSendFromISR+0x6e>
 800a05e:	2301      	movs	r3, #1
 800a060:	e000      	b.n	800a064 <xQueueGenericSendFromISR+0x70>
 800a062:	2300      	movs	r3, #0
 800a064:	2b00      	cmp	r3, #0
 800a066:	d10a      	bne.n	800a07e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06c:	f383 8811 	msr	BASEPRI, r3
 800a070:	f3bf 8f6f 	isb	sy
 800a074:	f3bf 8f4f 	dsb	sy
 800a078:	623b      	str	r3, [r7, #32]
}
 800a07a:	bf00      	nop
 800a07c:	e7fe      	b.n	800a07c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a07e:	f002 f98b 	bl	800c398 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a082:	f3ef 8211 	mrs	r2, BASEPRI
 800a086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08a:	f383 8811 	msr	BASEPRI, r3
 800a08e:	f3bf 8f6f 	isb	sy
 800a092:	f3bf 8f4f 	dsb	sy
 800a096:	61fa      	str	r2, [r7, #28]
 800a098:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a09a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a09c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d302      	bcc.n	800a0b0 <xQueueGenericSendFromISR+0xbc>
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	2b02      	cmp	r3, #2
 800a0ae:	d12f      	bne.n	800a110 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0be:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a0c0:	683a      	ldr	r2, [r7, #0]
 800a0c2:	68b9      	ldr	r1, [r7, #8]
 800a0c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a0c6:	f000 fa53 	bl	800a570 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a0ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a0ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0d2:	d112      	bne.n	800a0fa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d016      	beq.n	800a10a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0de:	3324      	adds	r3, #36	; 0x24
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f001 f839 	bl	800b158 <xTaskRemoveFromEventList>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d00e      	beq.n	800a10a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d00b      	beq.n	800a10a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	601a      	str	r2, [r3, #0]
 800a0f8:	e007      	b.n	800a10a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a0fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a0fe:	3301      	adds	r3, #1
 800a100:	b2db      	uxtb	r3, r3
 800a102:	b25a      	sxtb	r2, r3
 800a104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a106:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a10a:	2301      	movs	r3, #1
 800a10c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a10e:	e001      	b.n	800a114 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a110:	2300      	movs	r3, #0
 800a112:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a116:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a11e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a122:	4618      	mov	r0, r3
 800a124:	3740      	adds	r7, #64	; 0x40
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
	...

0800a12c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b08c      	sub	sp, #48	; 0x30
 800a130:	af00      	add	r7, sp, #0
 800a132:	60f8      	str	r0, [r7, #12]
 800a134:	60b9      	str	r1, [r7, #8]
 800a136:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a138:	2300      	movs	r3, #0
 800a13a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a142:	2b00      	cmp	r3, #0
 800a144:	d10a      	bne.n	800a15c <xQueueReceive+0x30>
	__asm volatile
 800a146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14a:	f383 8811 	msr	BASEPRI, r3
 800a14e:	f3bf 8f6f 	isb	sy
 800a152:	f3bf 8f4f 	dsb	sy
 800a156:	623b      	str	r3, [r7, #32]
}
 800a158:	bf00      	nop
 800a15a:	e7fe      	b.n	800a15a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d103      	bne.n	800a16a <xQueueReceive+0x3e>
 800a162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a166:	2b00      	cmp	r3, #0
 800a168:	d101      	bne.n	800a16e <xQueueReceive+0x42>
 800a16a:	2301      	movs	r3, #1
 800a16c:	e000      	b.n	800a170 <xQueueReceive+0x44>
 800a16e:	2300      	movs	r3, #0
 800a170:	2b00      	cmp	r3, #0
 800a172:	d10a      	bne.n	800a18a <xQueueReceive+0x5e>
	__asm volatile
 800a174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a178:	f383 8811 	msr	BASEPRI, r3
 800a17c:	f3bf 8f6f 	isb	sy
 800a180:	f3bf 8f4f 	dsb	sy
 800a184:	61fb      	str	r3, [r7, #28]
}
 800a186:	bf00      	nop
 800a188:	e7fe      	b.n	800a188 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a18a:	f001 f9cd 	bl	800b528 <xTaskGetSchedulerState>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d102      	bne.n	800a19a <xQueueReceive+0x6e>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d101      	bne.n	800a19e <xQueueReceive+0x72>
 800a19a:	2301      	movs	r3, #1
 800a19c:	e000      	b.n	800a1a0 <xQueueReceive+0x74>
 800a19e:	2300      	movs	r3, #0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d10a      	bne.n	800a1ba <xQueueReceive+0x8e>
	__asm volatile
 800a1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a8:	f383 8811 	msr	BASEPRI, r3
 800a1ac:	f3bf 8f6f 	isb	sy
 800a1b0:	f3bf 8f4f 	dsb	sy
 800a1b4:	61bb      	str	r3, [r7, #24]
}
 800a1b6:	bf00      	nop
 800a1b8:	e7fe      	b.n	800a1b8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1ba:	f002 f80b 	bl	800c1d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d01f      	beq.n	800a20a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a1ca:	68b9      	ldr	r1, [r7, #8]
 800a1cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1ce:	f000 fa39 	bl	800a644 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d4:	1e5a      	subs	r2, r3, #1
 800a1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1dc:	691b      	ldr	r3, [r3, #16]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d00f      	beq.n	800a202 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e4:	3310      	adds	r3, #16
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f000 ffb6 	bl	800b158 <xTaskRemoveFromEventList>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d007      	beq.n	800a202 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a1f2:	4b3d      	ldr	r3, [pc, #244]	; (800a2e8 <xQueueReceive+0x1bc>)
 800a1f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1f8:	601a      	str	r2, [r3, #0]
 800a1fa:	f3bf 8f4f 	dsb	sy
 800a1fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a202:	f002 f817 	bl	800c234 <vPortExitCritical>
				return pdPASS;
 800a206:	2301      	movs	r3, #1
 800a208:	e069      	b.n	800a2de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d103      	bne.n	800a218 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a210:	f002 f810 	bl	800c234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a214:	2300      	movs	r3, #0
 800a216:	e062      	b.n	800a2de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d106      	bne.n	800a22c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a21e:	f107 0310 	add.w	r3, r7, #16
 800a222:	4618      	mov	r0, r3
 800a224:	f001 f822 	bl	800b26c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a228:	2301      	movs	r3, #1
 800a22a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a22c:	f002 f802 	bl	800c234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a230:	f000 fd68 	bl	800ad04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a234:	f001 ffce 	bl	800c1d4 <vPortEnterCritical>
 800a238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a23e:	b25b      	sxtb	r3, r3
 800a240:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a244:	d103      	bne.n	800a24e <xQueueReceive+0x122>
 800a246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a248:	2200      	movs	r2, #0
 800a24a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a250:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a254:	b25b      	sxtb	r3, r3
 800a256:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a25a:	d103      	bne.n	800a264 <xQueueReceive+0x138>
 800a25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25e:	2200      	movs	r2, #0
 800a260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a264:	f001 ffe6 	bl	800c234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a268:	1d3a      	adds	r2, r7, #4
 800a26a:	f107 0310 	add.w	r3, r7, #16
 800a26e:	4611      	mov	r1, r2
 800a270:	4618      	mov	r0, r3
 800a272:	f001 f811 	bl	800b298 <xTaskCheckForTimeOut>
 800a276:	4603      	mov	r3, r0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d123      	bne.n	800a2c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a27c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a27e:	f000 fa59 	bl	800a734 <prvIsQueueEmpty>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d017      	beq.n	800a2b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28a:	3324      	adds	r3, #36	; 0x24
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	4611      	mov	r1, r2
 800a290:	4618      	mov	r0, r3
 800a292:	f000 ff11 	bl	800b0b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a296:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a298:	f000 f9fa 	bl	800a690 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a29c:	f000 fd40 	bl	800ad20 <xTaskResumeAll>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d189      	bne.n	800a1ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a2a6:	4b10      	ldr	r3, [pc, #64]	; (800a2e8 <xQueueReceive+0x1bc>)
 800a2a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2ac:	601a      	str	r2, [r3, #0]
 800a2ae:	f3bf 8f4f 	dsb	sy
 800a2b2:	f3bf 8f6f 	isb	sy
 800a2b6:	e780      	b.n	800a1ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a2b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2ba:	f000 f9e9 	bl	800a690 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2be:	f000 fd2f 	bl	800ad20 <xTaskResumeAll>
 800a2c2:	e77a      	b.n	800a1ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a2c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2c6:	f000 f9e3 	bl	800a690 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2ca:	f000 fd29 	bl	800ad20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a2ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2d0:	f000 fa30 	bl	800a734 <prvIsQueueEmpty>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	f43f af6f 	beq.w	800a1ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a2dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3730      	adds	r7, #48	; 0x30
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	e000ed04 	.word	0xe000ed04

0800a2ec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b08e      	sub	sp, #56	; 0x38
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a2fe:	2300      	movs	r3, #0
 800a300:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a304:	2b00      	cmp	r3, #0
 800a306:	d10a      	bne.n	800a31e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30c:	f383 8811 	msr	BASEPRI, r3
 800a310:	f3bf 8f6f 	isb	sy
 800a314:	f3bf 8f4f 	dsb	sy
 800a318:	623b      	str	r3, [r7, #32]
}
 800a31a:	bf00      	nop
 800a31c:	e7fe      	b.n	800a31c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00a      	beq.n	800a33c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32a:	f383 8811 	msr	BASEPRI, r3
 800a32e:	f3bf 8f6f 	isb	sy
 800a332:	f3bf 8f4f 	dsb	sy
 800a336:	61fb      	str	r3, [r7, #28]
}
 800a338:	bf00      	nop
 800a33a:	e7fe      	b.n	800a33a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a33c:	f001 f8f4 	bl	800b528 <xTaskGetSchedulerState>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d102      	bne.n	800a34c <xQueueSemaphoreTake+0x60>
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d101      	bne.n	800a350 <xQueueSemaphoreTake+0x64>
 800a34c:	2301      	movs	r3, #1
 800a34e:	e000      	b.n	800a352 <xQueueSemaphoreTake+0x66>
 800a350:	2300      	movs	r3, #0
 800a352:	2b00      	cmp	r3, #0
 800a354:	d10a      	bne.n	800a36c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35a:	f383 8811 	msr	BASEPRI, r3
 800a35e:	f3bf 8f6f 	isb	sy
 800a362:	f3bf 8f4f 	dsb	sy
 800a366:	61bb      	str	r3, [r7, #24]
}
 800a368:	bf00      	nop
 800a36a:	e7fe      	b.n	800a36a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a36c:	f001 ff32 	bl	800c1d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a374:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d024      	beq.n	800a3c6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37e:	1e5a      	subs	r2, r3, #1
 800a380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a382:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d104      	bne.n	800a396 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a38c:	f001 fa42 	bl	800b814 <pvTaskIncrementMutexHeldCount>
 800a390:	4602      	mov	r2, r0
 800a392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a394:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a398:	691b      	ldr	r3, [r3, #16]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d00f      	beq.n	800a3be <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a0:	3310      	adds	r3, #16
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f000 fed8 	bl	800b158 <xTaskRemoveFromEventList>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d007      	beq.n	800a3be <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a3ae:	4b54      	ldr	r3, [pc, #336]	; (800a500 <xQueueSemaphoreTake+0x214>)
 800a3b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3b4:	601a      	str	r2, [r3, #0]
 800a3b6:	f3bf 8f4f 	dsb	sy
 800a3ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a3be:	f001 ff39 	bl	800c234 <vPortExitCritical>
				return pdPASS;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e097      	b.n	800a4f6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d111      	bne.n	800a3f0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d00a      	beq.n	800a3e8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d6:	f383 8811 	msr	BASEPRI, r3
 800a3da:	f3bf 8f6f 	isb	sy
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	617b      	str	r3, [r7, #20]
}
 800a3e4:	bf00      	nop
 800a3e6:	e7fe      	b.n	800a3e6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a3e8:	f001 ff24 	bl	800c234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	e082      	b.n	800a4f6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d106      	bne.n	800a404 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3f6:	f107 030c 	add.w	r3, r7, #12
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f000 ff36 	bl	800b26c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a400:	2301      	movs	r3, #1
 800a402:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a404:	f001 ff16 	bl	800c234 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a408:	f000 fc7c 	bl	800ad04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a40c:	f001 fee2 	bl	800c1d4 <vPortEnterCritical>
 800a410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a412:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a416:	b25b      	sxtb	r3, r3
 800a418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a41c:	d103      	bne.n	800a426 <xQueueSemaphoreTake+0x13a>
 800a41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a420:	2200      	movs	r2, #0
 800a422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a428:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a42c:	b25b      	sxtb	r3, r3
 800a42e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a432:	d103      	bne.n	800a43c <xQueueSemaphoreTake+0x150>
 800a434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a436:	2200      	movs	r2, #0
 800a438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a43c:	f001 fefa 	bl	800c234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a440:	463a      	mov	r2, r7
 800a442:	f107 030c 	add.w	r3, r7, #12
 800a446:	4611      	mov	r1, r2
 800a448:	4618      	mov	r0, r3
 800a44a:	f000 ff25 	bl	800b298 <xTaskCheckForTimeOut>
 800a44e:	4603      	mov	r3, r0
 800a450:	2b00      	cmp	r3, #0
 800a452:	d132      	bne.n	800a4ba <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a454:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a456:	f000 f96d 	bl	800a734 <prvIsQueueEmpty>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d026      	beq.n	800a4ae <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d109      	bne.n	800a47c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a468:	f001 feb4 	bl	800c1d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	4618      	mov	r0, r3
 800a472:	f001 f877 	bl	800b564 <xTaskPriorityInherit>
 800a476:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a478:	f001 fedc 	bl	800c234 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a47e:	3324      	adds	r3, #36	; 0x24
 800a480:	683a      	ldr	r2, [r7, #0]
 800a482:	4611      	mov	r1, r2
 800a484:	4618      	mov	r0, r3
 800a486:	f000 fe17 	bl	800b0b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a48a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a48c:	f000 f900 	bl	800a690 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a490:	f000 fc46 	bl	800ad20 <xTaskResumeAll>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	f47f af68 	bne.w	800a36c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a49c:	4b18      	ldr	r3, [pc, #96]	; (800a500 <xQueueSemaphoreTake+0x214>)
 800a49e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4a2:	601a      	str	r2, [r3, #0]
 800a4a4:	f3bf 8f4f 	dsb	sy
 800a4a8:	f3bf 8f6f 	isb	sy
 800a4ac:	e75e      	b.n	800a36c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a4ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4b0:	f000 f8ee 	bl	800a690 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4b4:	f000 fc34 	bl	800ad20 <xTaskResumeAll>
 800a4b8:	e758      	b.n	800a36c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a4ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4bc:	f000 f8e8 	bl	800a690 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4c0:	f000 fc2e 	bl	800ad20 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4c6:	f000 f935 	bl	800a734 <prvIsQueueEmpty>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f43f af4d 	beq.w	800a36c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d00d      	beq.n	800a4f4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a4d8:	f001 fe7c 	bl	800c1d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a4dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4de:	f000 f82f 	bl	800a540 <prvGetDisinheritPriorityAfterTimeout>
 800a4e2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f001 f910 	bl	800b710 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a4f0:	f001 fea0 	bl	800c234 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a4f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3738      	adds	r7, #56	; 0x38
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	e000ed04 	.word	0xe000ed04

0800a504 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d10a      	bne.n	800a528 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800a512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a516:	f383 8811 	msr	BASEPRI, r3
 800a51a:	f3bf 8f6f 	isb	sy
 800a51e:	f3bf 8f4f 	dsb	sy
 800a522:	60bb      	str	r3, [r7, #8]
}
 800a524:	bf00      	nop
 800a526:	e7fe      	b.n	800a526 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800a528:	f001 fe54 	bl	800c1d4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a530:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a532:	f001 fe7f 	bl	800c234 <vPortExitCritical>

	return uxReturn;
 800a536:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a538:	4618      	mov	r0, r3
 800a53a:	3710      	adds	r7, #16
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a540:	b480      	push	{r7}
 800a542:	b085      	sub	sp, #20
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d006      	beq.n	800a55e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a55a:	60fb      	str	r3, [r7, #12]
 800a55c:	e001      	b.n	800a562 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a55e:	2300      	movs	r3, #0
 800a560:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a562:	68fb      	ldr	r3, [r7, #12]
	}
 800a564:	4618      	mov	r0, r3
 800a566:	3714      	adds	r7, #20
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b086      	sub	sp, #24
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a57c:	2300      	movs	r3, #0
 800a57e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a584:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d10d      	bne.n	800a5aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d14d      	bne.n	800a632 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	4618      	mov	r0, r3
 800a59c:	f001 f84a 	bl	800b634 <xTaskPriorityDisinherit>
 800a5a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	609a      	str	r2, [r3, #8]
 800a5a8:	e043      	b.n	800a632 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d119      	bne.n	800a5e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6858      	ldr	r0, [r3, #4]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	68b9      	ldr	r1, [r7, #8]
 800a5bc:	f00e f873 	bl	80186a6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	685a      	ldr	r2, [r3, #4]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c8:	441a      	add	r2, r3
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	685a      	ldr	r2, [r3, #4]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d32b      	bcc.n	800a632 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	605a      	str	r2, [r3, #4]
 800a5e2:	e026      	b.n	800a632 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	68d8      	ldr	r0, [r3, #12]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	68b9      	ldr	r1, [r7, #8]
 800a5f0:	f00e f859 	bl	80186a6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	68da      	ldr	r2, [r3, #12]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5fc:	425b      	negs	r3, r3
 800a5fe:	441a      	add	r2, r3
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	68da      	ldr	r2, [r3, #12]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d207      	bcs.n	800a620 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	689a      	ldr	r2, [r3, #8]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a618:	425b      	negs	r3, r3
 800a61a:	441a      	add	r2, r3
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2b02      	cmp	r3, #2
 800a624:	d105      	bne.n	800a632 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d002      	beq.n	800a632 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	3b01      	subs	r3, #1
 800a630:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	1c5a      	adds	r2, r3, #1
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a63a:	697b      	ldr	r3, [r7, #20]
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3718      	adds	r7, #24
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a652:	2b00      	cmp	r3, #0
 800a654:	d018      	beq.n	800a688 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	68da      	ldr	r2, [r3, #12]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65e:	441a      	add	r2, r3
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	68da      	ldr	r2, [r3, #12]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d303      	bcc.n	800a678 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681a      	ldr	r2, [r3, #0]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	68d9      	ldr	r1, [r3, #12]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a680:	461a      	mov	r2, r3
 800a682:	6838      	ldr	r0, [r7, #0]
 800a684:	f00e f80f 	bl	80186a6 <memcpy>
	}
}
 800a688:	bf00      	nop
 800a68a:	3708      	adds	r7, #8
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b084      	sub	sp, #16
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a698:	f001 fd9c 	bl	800c1d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6a4:	e011      	b.n	800a6ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d012      	beq.n	800a6d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	3324      	adds	r3, #36	; 0x24
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f000 fd50 	bl	800b158 <xTaskRemoveFromEventList>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d001      	beq.n	800a6c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a6be:	f000 fe4d 	bl	800b35c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a6c2:	7bfb      	ldrb	r3, [r7, #15]
 800a6c4:	3b01      	subs	r3, #1
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	dce9      	bgt.n	800a6a6 <prvUnlockQueue+0x16>
 800a6d2:	e000      	b.n	800a6d6 <prvUnlockQueue+0x46>
					break;
 800a6d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	22ff      	movs	r2, #255	; 0xff
 800a6da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a6de:	f001 fda9 	bl	800c234 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a6e2:	f001 fd77 	bl	800c1d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6ee:	e011      	b.n	800a714 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	691b      	ldr	r3, [r3, #16]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d012      	beq.n	800a71e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	3310      	adds	r3, #16
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f000 fd2b 	bl	800b158 <xTaskRemoveFromEventList>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d001      	beq.n	800a70c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a708:	f000 fe28 	bl	800b35c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a70c:	7bbb      	ldrb	r3, [r7, #14]
 800a70e:	3b01      	subs	r3, #1
 800a710:	b2db      	uxtb	r3, r3
 800a712:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a714:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	dce9      	bgt.n	800a6f0 <prvUnlockQueue+0x60>
 800a71c:	e000      	b.n	800a720 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a71e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	22ff      	movs	r2, #255	; 0xff
 800a724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a728:	f001 fd84 	bl	800c234 <vPortExitCritical>
}
 800a72c:	bf00      	nop
 800a72e:	3710      	adds	r7, #16
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a73c:	f001 fd4a 	bl	800c1d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a744:	2b00      	cmp	r3, #0
 800a746:	d102      	bne.n	800a74e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a748:	2301      	movs	r3, #1
 800a74a:	60fb      	str	r3, [r7, #12]
 800a74c:	e001      	b.n	800a752 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a74e:	2300      	movs	r3, #0
 800a750:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a752:	f001 fd6f 	bl	800c234 <vPortExitCritical>

	return xReturn;
 800a756:	68fb      	ldr	r3, [r7, #12]
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3710      	adds	r7, #16
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a768:	f001 fd34 	bl	800c1d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a774:	429a      	cmp	r2, r3
 800a776:	d102      	bne.n	800a77e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a778:	2301      	movs	r3, #1
 800a77a:	60fb      	str	r3, [r7, #12]
 800a77c:	e001      	b.n	800a782 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a77e:	2300      	movs	r3, #0
 800a780:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a782:	f001 fd57 	bl	800c234 <vPortExitCritical>

	return xReturn;
 800a786:	68fb      	ldr	r3, [r7, #12]
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a790:	b480      	push	{r7}
 800a792:	b085      	sub	sp, #20
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a79a:	2300      	movs	r3, #0
 800a79c:	60fb      	str	r3, [r7, #12]
 800a79e:	e014      	b.n	800a7ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a7a0:	4a0f      	ldr	r2, [pc, #60]	; (800a7e0 <vQueueAddToRegistry+0x50>)
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d10b      	bne.n	800a7c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a7ac:	490c      	ldr	r1, [pc, #48]	; (800a7e0 <vQueueAddToRegistry+0x50>)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	683a      	ldr	r2, [r7, #0]
 800a7b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a7b6:	4a0a      	ldr	r2, [pc, #40]	; (800a7e0 <vQueueAddToRegistry+0x50>)
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	00db      	lsls	r3, r3, #3
 800a7bc:	4413      	add	r3, r2
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a7c2:	e006      	b.n	800a7d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	60fb      	str	r3, [r7, #12]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2b07      	cmp	r3, #7
 800a7ce:	d9e7      	bls.n	800a7a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a7d0:	bf00      	nop
 800a7d2:	bf00      	nop
 800a7d4:	3714      	adds	r7, #20
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr
 800a7de:	bf00      	nop
 800a7e0:	200054b0 	.word	0x200054b0

0800a7e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b086      	sub	sp, #24
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	60b9      	str	r1, [r7, #8]
 800a7ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a7f4:	f001 fcee 	bl	800c1d4 <vPortEnterCritical>
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7fe:	b25b      	sxtb	r3, r3
 800a800:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a804:	d103      	bne.n	800a80e <vQueueWaitForMessageRestricted+0x2a>
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	2200      	movs	r2, #0
 800a80a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a814:	b25b      	sxtb	r3, r3
 800a816:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a81a:	d103      	bne.n	800a824 <vQueueWaitForMessageRestricted+0x40>
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	2200      	movs	r2, #0
 800a820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a824:	f001 fd06 	bl	800c234 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d106      	bne.n	800a83e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	3324      	adds	r3, #36	; 0x24
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	68b9      	ldr	r1, [r7, #8]
 800a838:	4618      	mov	r0, r3
 800a83a:	f000 fc61 	bl	800b100 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a83e:	6978      	ldr	r0, [r7, #20]
 800a840:	f7ff ff26 	bl	800a690 <prvUnlockQueue>
	}
 800a844:	bf00      	nop
 800a846:	3718      	adds	r7, #24
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b08e      	sub	sp, #56	; 0x38
 800a850:	af04      	add	r7, sp, #16
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	607a      	str	r2, [r7, #4]
 800a858:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a85a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d10a      	bne.n	800a876 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a864:	f383 8811 	msr	BASEPRI, r3
 800a868:	f3bf 8f6f 	isb	sy
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	623b      	str	r3, [r7, #32]
}
 800a872:	bf00      	nop
 800a874:	e7fe      	b.n	800a874 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d10a      	bne.n	800a892 <xTaskCreateStatic+0x46>
	__asm volatile
 800a87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a880:	f383 8811 	msr	BASEPRI, r3
 800a884:	f3bf 8f6f 	isb	sy
 800a888:	f3bf 8f4f 	dsb	sy
 800a88c:	61fb      	str	r3, [r7, #28]
}
 800a88e:	bf00      	nop
 800a890:	e7fe      	b.n	800a890 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a892:	23a8      	movs	r3, #168	; 0xa8
 800a894:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	2ba8      	cmp	r3, #168	; 0xa8
 800a89a:	d00a      	beq.n	800a8b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800a89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a0:	f383 8811 	msr	BASEPRI, r3
 800a8a4:	f3bf 8f6f 	isb	sy
 800a8a8:	f3bf 8f4f 	dsb	sy
 800a8ac:	61bb      	str	r3, [r7, #24]
}
 800a8ae:	bf00      	nop
 800a8b0:	e7fe      	b.n	800a8b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a8b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d01e      	beq.n	800a8f8 <xTaskCreateStatic+0xac>
 800a8ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d01b      	beq.n	800a8f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8cc:	2202      	movs	r2, #2
 800a8ce:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	9303      	str	r3, [sp, #12]
 800a8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d8:	9302      	str	r3, [sp, #8]
 800a8da:	f107 0314 	add.w	r3, r7, #20
 800a8de:	9301      	str	r3, [sp, #4]
 800a8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e2:	9300      	str	r3, [sp, #0]
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	68b9      	ldr	r1, [r7, #8]
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	f000 f850 	bl	800a990 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a8f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8f2:	f000 f8f3 	bl	800aadc <prvAddNewTaskToReadyList>
 800a8f6:	e001      	b.n	800a8fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a8fc:	697b      	ldr	r3, [r7, #20]
	}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3728      	adds	r7, #40	; 0x28
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a906:	b580      	push	{r7, lr}
 800a908:	b08c      	sub	sp, #48	; 0x30
 800a90a:	af04      	add	r7, sp, #16
 800a90c:	60f8      	str	r0, [r7, #12]
 800a90e:	60b9      	str	r1, [r7, #8]
 800a910:	603b      	str	r3, [r7, #0]
 800a912:	4613      	mov	r3, r2
 800a914:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a916:	88fb      	ldrh	r3, [r7, #6]
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	4618      	mov	r0, r3
 800a91c:	f001 fd7c 	bl	800c418 <pvPortMalloc>
 800a920:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d00e      	beq.n	800a946 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a928:	20a8      	movs	r0, #168	; 0xa8
 800a92a:	f001 fd75 	bl	800c418 <pvPortMalloc>
 800a92e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d003      	beq.n	800a93e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a936:	69fb      	ldr	r3, [r7, #28]
 800a938:	697a      	ldr	r2, [r7, #20]
 800a93a:	631a      	str	r2, [r3, #48]	; 0x30
 800a93c:	e005      	b.n	800a94a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a93e:	6978      	ldr	r0, [r7, #20]
 800a940:	f001 fe36 	bl	800c5b0 <vPortFree>
 800a944:	e001      	b.n	800a94a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a946:	2300      	movs	r3, #0
 800a948:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d017      	beq.n	800a980 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a950:	69fb      	ldr	r3, [r7, #28]
 800a952:	2200      	movs	r2, #0
 800a954:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a958:	88fa      	ldrh	r2, [r7, #6]
 800a95a:	2300      	movs	r3, #0
 800a95c:	9303      	str	r3, [sp, #12]
 800a95e:	69fb      	ldr	r3, [r7, #28]
 800a960:	9302      	str	r3, [sp, #8]
 800a962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a964:	9301      	str	r3, [sp, #4]
 800a966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a968:	9300      	str	r3, [sp, #0]
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	68b9      	ldr	r1, [r7, #8]
 800a96e:	68f8      	ldr	r0, [r7, #12]
 800a970:	f000 f80e 	bl	800a990 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a974:	69f8      	ldr	r0, [r7, #28]
 800a976:	f000 f8b1 	bl	800aadc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a97a:	2301      	movs	r3, #1
 800a97c:	61bb      	str	r3, [r7, #24]
 800a97e:	e002      	b.n	800a986 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a980:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a984:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a986:	69bb      	ldr	r3, [r7, #24]
	}
 800a988:	4618      	mov	r0, r3
 800a98a:	3720      	adds	r7, #32
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b088      	sub	sp, #32
 800a994:	af00      	add	r7, sp, #0
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	60b9      	str	r1, [r7, #8]
 800a99a:	607a      	str	r2, [r7, #4]
 800a99c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	009b      	lsls	r3, r3, #2
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	21a5      	movs	r1, #165	; 0xa5
 800a9aa:	f00d fd5d 	bl	8018468 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a9b8:	3b01      	subs	r3, #1
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	4413      	add	r3, r2
 800a9be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a9c0:	69bb      	ldr	r3, [r7, #24]
 800a9c2:	f023 0307 	bic.w	r3, r3, #7
 800a9c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a9c8:	69bb      	ldr	r3, [r7, #24]
 800a9ca:	f003 0307 	and.w	r3, r3, #7
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d00a      	beq.n	800a9e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d6:	f383 8811 	msr	BASEPRI, r3
 800a9da:	f3bf 8f6f 	isb	sy
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	617b      	str	r3, [r7, #20]
}
 800a9e4:	bf00      	nop
 800a9e6:	e7fe      	b.n	800a9e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d01f      	beq.n	800aa2e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	61fb      	str	r3, [r7, #28]
 800a9f2:	e012      	b.n	800aa1a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a9f4:	68ba      	ldr	r2, [r7, #8]
 800a9f6:	69fb      	ldr	r3, [r7, #28]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	7819      	ldrb	r1, [r3, #0]
 800a9fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	4413      	add	r3, r2
 800aa02:	3334      	adds	r3, #52	; 0x34
 800aa04:	460a      	mov	r2, r1
 800aa06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aa08:	68ba      	ldr	r2, [r7, #8]
 800aa0a:	69fb      	ldr	r3, [r7, #28]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d006      	beq.n	800aa22 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	3301      	adds	r3, #1
 800aa18:	61fb      	str	r3, [r7, #28]
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	2b0f      	cmp	r3, #15
 800aa1e:	d9e9      	bls.n	800a9f4 <prvInitialiseNewTask+0x64>
 800aa20:	e000      	b.n	800aa24 <prvInitialiseNewTask+0x94>
			{
				break;
 800aa22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aa24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa26:	2200      	movs	r2, #0
 800aa28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa2c:	e003      	b.n	800aa36 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aa2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa30:	2200      	movs	r2, #0
 800aa32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aa36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa38:	2b37      	cmp	r3, #55	; 0x37
 800aa3a:	d901      	bls.n	800aa40 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aa3c:	2337      	movs	r3, #55	; 0x37
 800aa3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aa40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aa46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa4a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aa4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4e:	2200      	movs	r2, #0
 800aa50:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aa52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa54:	3304      	adds	r3, #4
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7fe fffc 	bl	8009a54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aa5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5e:	3318      	adds	r3, #24
 800aa60:	4618      	mov	r0, r3
 800aa62:	f7fe fff7 	bl	8009a54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aa66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aa72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aa76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aa7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aa84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa86:	2200      	movs	r2, #0
 800aa88:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aa8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8e:	3354      	adds	r3, #84	; 0x54
 800aa90:	224c      	movs	r2, #76	; 0x4c
 800aa92:	2100      	movs	r1, #0
 800aa94:	4618      	mov	r0, r3
 800aa96:	f00d fce7 	bl	8018468 <memset>
 800aa9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9c:	4a0c      	ldr	r2, [pc, #48]	; (800aad0 <prvInitialiseNewTask+0x140>)
 800aa9e:	659a      	str	r2, [r3, #88]	; 0x58
 800aaa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa2:	4a0c      	ldr	r2, [pc, #48]	; (800aad4 <prvInitialiseNewTask+0x144>)
 800aaa4:	65da      	str	r2, [r3, #92]	; 0x5c
 800aaa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa8:	4a0b      	ldr	r2, [pc, #44]	; (800aad8 <prvInitialiseNewTask+0x148>)
 800aaaa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aaac:	683a      	ldr	r2, [r7, #0]
 800aaae:	68f9      	ldr	r1, [r7, #12]
 800aab0:	69b8      	ldr	r0, [r7, #24]
 800aab2:	f001 fa65 	bl	800bf80 <pxPortInitialiseStack>
 800aab6:	4602      	mov	r2, r0
 800aab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d002      	beq.n	800aac8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aac6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aac8:	bf00      	nop
 800aaca:	3720      	adds	r7, #32
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	20009d40 	.word	0x20009d40
 800aad4:	20009da8 	.word	0x20009da8
 800aad8:	20009e10 	.word	0x20009e10

0800aadc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aae4:	f001 fb76 	bl	800c1d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aae8:	4b2d      	ldr	r3, [pc, #180]	; (800aba0 <prvAddNewTaskToReadyList+0xc4>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	3301      	adds	r3, #1
 800aaee:	4a2c      	ldr	r2, [pc, #176]	; (800aba0 <prvAddNewTaskToReadyList+0xc4>)
 800aaf0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aaf2:	4b2c      	ldr	r3, [pc, #176]	; (800aba4 <prvAddNewTaskToReadyList+0xc8>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d109      	bne.n	800ab0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aafa:	4a2a      	ldr	r2, [pc, #168]	; (800aba4 <prvAddNewTaskToReadyList+0xc8>)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ab00:	4b27      	ldr	r3, [pc, #156]	; (800aba0 <prvAddNewTaskToReadyList+0xc4>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d110      	bne.n	800ab2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ab08:	f000 fc4c 	bl	800b3a4 <prvInitialiseTaskLists>
 800ab0c:	e00d      	b.n	800ab2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ab0e:	4b26      	ldr	r3, [pc, #152]	; (800aba8 <prvAddNewTaskToReadyList+0xcc>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d109      	bne.n	800ab2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ab16:	4b23      	ldr	r3, [pc, #140]	; (800aba4 <prvAddNewTaskToReadyList+0xc8>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d802      	bhi.n	800ab2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ab24:	4a1f      	ldr	r2, [pc, #124]	; (800aba4 <prvAddNewTaskToReadyList+0xc8>)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ab2a:	4b20      	ldr	r3, [pc, #128]	; (800abac <prvAddNewTaskToReadyList+0xd0>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	3301      	adds	r3, #1
 800ab30:	4a1e      	ldr	r2, [pc, #120]	; (800abac <prvAddNewTaskToReadyList+0xd0>)
 800ab32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ab34:	4b1d      	ldr	r3, [pc, #116]	; (800abac <prvAddNewTaskToReadyList+0xd0>)
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab40:	4b1b      	ldr	r3, [pc, #108]	; (800abb0 <prvAddNewTaskToReadyList+0xd4>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d903      	bls.n	800ab50 <prvAddNewTaskToReadyList+0x74>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab4c:	4a18      	ldr	r2, [pc, #96]	; (800abb0 <prvAddNewTaskToReadyList+0xd4>)
 800ab4e:	6013      	str	r3, [r2, #0]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab54:	4613      	mov	r3, r2
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	4413      	add	r3, r2
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	4a15      	ldr	r2, [pc, #84]	; (800abb4 <prvAddNewTaskToReadyList+0xd8>)
 800ab5e:	441a      	add	r2, r3
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	3304      	adds	r3, #4
 800ab64:	4619      	mov	r1, r3
 800ab66:	4610      	mov	r0, r2
 800ab68:	f7fe ff81 	bl	8009a6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ab6c:	f001 fb62 	bl	800c234 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ab70:	4b0d      	ldr	r3, [pc, #52]	; (800aba8 <prvAddNewTaskToReadyList+0xcc>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d00e      	beq.n	800ab96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ab78:	4b0a      	ldr	r3, [pc, #40]	; (800aba4 <prvAddNewTaskToReadyList+0xc8>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d207      	bcs.n	800ab96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ab86:	4b0c      	ldr	r3, [pc, #48]	; (800abb8 <prvAddNewTaskToReadyList+0xdc>)
 800ab88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab8c:	601a      	str	r2, [r3, #0]
 800ab8e:	f3bf 8f4f 	dsb	sy
 800ab92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab96:	bf00      	nop
 800ab98:	3708      	adds	r7, #8
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	200059c4 	.word	0x200059c4
 800aba4:	200054f0 	.word	0x200054f0
 800aba8:	200059d0 	.word	0x200059d0
 800abac:	200059e0 	.word	0x200059e0
 800abb0:	200059cc 	.word	0x200059cc
 800abb4:	200054f4 	.word	0x200054f4
 800abb8:	e000ed04 	.word	0xe000ed04

0800abbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b084      	sub	sp, #16
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800abc4:	2300      	movs	r3, #0
 800abc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d017      	beq.n	800abfe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800abce:	4b13      	ldr	r3, [pc, #76]	; (800ac1c <vTaskDelay+0x60>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00a      	beq.n	800abec <vTaskDelay+0x30>
	__asm volatile
 800abd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abda:	f383 8811 	msr	BASEPRI, r3
 800abde:	f3bf 8f6f 	isb	sy
 800abe2:	f3bf 8f4f 	dsb	sy
 800abe6:	60bb      	str	r3, [r7, #8]
}
 800abe8:	bf00      	nop
 800abea:	e7fe      	b.n	800abea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800abec:	f000 f88a 	bl	800ad04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800abf0:	2100      	movs	r1, #0
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 fe22 	bl	800b83c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800abf8:	f000 f892 	bl	800ad20 <xTaskResumeAll>
 800abfc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d107      	bne.n	800ac14 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ac04:	4b06      	ldr	r3, [pc, #24]	; (800ac20 <vTaskDelay+0x64>)
 800ac06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac0a:	601a      	str	r2, [r3, #0]
 800ac0c:	f3bf 8f4f 	dsb	sy
 800ac10:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac14:	bf00      	nop
 800ac16:	3710      	adds	r7, #16
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}
 800ac1c:	200059ec 	.word	0x200059ec
 800ac20:	e000ed04 	.word	0xe000ed04

0800ac24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b08a      	sub	sp, #40	; 0x28
 800ac28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ac32:	463a      	mov	r2, r7
 800ac34:	1d39      	adds	r1, r7, #4
 800ac36:	f107 0308 	add.w	r3, r7, #8
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7fe feb6 	bl	80099ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ac40:	6839      	ldr	r1, [r7, #0]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	68ba      	ldr	r2, [r7, #8]
 800ac46:	9202      	str	r2, [sp, #8]
 800ac48:	9301      	str	r3, [sp, #4]
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	9300      	str	r3, [sp, #0]
 800ac4e:	2300      	movs	r3, #0
 800ac50:	460a      	mov	r2, r1
 800ac52:	4924      	ldr	r1, [pc, #144]	; (800ace4 <vTaskStartScheduler+0xc0>)
 800ac54:	4824      	ldr	r0, [pc, #144]	; (800ace8 <vTaskStartScheduler+0xc4>)
 800ac56:	f7ff fdf9 	bl	800a84c <xTaskCreateStatic>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	4a23      	ldr	r2, [pc, #140]	; (800acec <vTaskStartScheduler+0xc8>)
 800ac5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ac60:	4b22      	ldr	r3, [pc, #136]	; (800acec <vTaskStartScheduler+0xc8>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d002      	beq.n	800ac6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	617b      	str	r3, [r7, #20]
 800ac6c:	e001      	b.n	800ac72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d102      	bne.n	800ac7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ac78:	f000 fe34 	bl	800b8e4 <xTimerCreateTimerTask>
 800ac7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d11b      	bne.n	800acbc <vTaskStartScheduler+0x98>
	__asm volatile
 800ac84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac88:	f383 8811 	msr	BASEPRI, r3
 800ac8c:	f3bf 8f6f 	isb	sy
 800ac90:	f3bf 8f4f 	dsb	sy
 800ac94:	613b      	str	r3, [r7, #16]
}
 800ac96:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ac98:	4b15      	ldr	r3, [pc, #84]	; (800acf0 <vTaskStartScheduler+0xcc>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	3354      	adds	r3, #84	; 0x54
 800ac9e:	4a15      	ldr	r2, [pc, #84]	; (800acf4 <vTaskStartScheduler+0xd0>)
 800aca0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aca2:	4b15      	ldr	r3, [pc, #84]	; (800acf8 <vTaskStartScheduler+0xd4>)
 800aca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aca8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800acaa:	4b14      	ldr	r3, [pc, #80]	; (800acfc <vTaskStartScheduler+0xd8>)
 800acac:	2201      	movs	r2, #1
 800acae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800acb0:	4b13      	ldr	r3, [pc, #76]	; (800ad00 <vTaskStartScheduler+0xdc>)
 800acb2:	2200      	movs	r2, #0
 800acb4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800acb6:	f001 f9eb 	bl	800c090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800acba:	e00e      	b.n	800acda <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acc2:	d10a      	bne.n	800acda <vTaskStartScheduler+0xb6>
	__asm volatile
 800acc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc8:	f383 8811 	msr	BASEPRI, r3
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	f3bf 8f4f 	dsb	sy
 800acd4:	60fb      	str	r3, [r7, #12]
}
 800acd6:	bf00      	nop
 800acd8:	e7fe      	b.n	800acd8 <vTaskStartScheduler+0xb4>
}
 800acda:	bf00      	nop
 800acdc:	3718      	adds	r7, #24
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop
 800ace4:	08019698 	.word	0x08019698
 800ace8:	0800b375 	.word	0x0800b375
 800acec:	200059e8 	.word	0x200059e8
 800acf0:	200054f0 	.word	0x200054f0
 800acf4:	200000d0 	.word	0x200000d0
 800acf8:	200059e4 	.word	0x200059e4
 800acfc:	200059d0 	.word	0x200059d0
 800ad00:	200059c8 	.word	0x200059c8

0800ad04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ad04:	b480      	push	{r7}
 800ad06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ad08:	4b04      	ldr	r3, [pc, #16]	; (800ad1c <vTaskSuspendAll+0x18>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	4a03      	ldr	r2, [pc, #12]	; (800ad1c <vTaskSuspendAll+0x18>)
 800ad10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ad12:	bf00      	nop
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr
 800ad1c:	200059ec 	.word	0x200059ec

0800ad20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ad26:	2300      	movs	r3, #0
 800ad28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ad2e:	4b42      	ldr	r3, [pc, #264]	; (800ae38 <xTaskResumeAll+0x118>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d10a      	bne.n	800ad4c <xTaskResumeAll+0x2c>
	__asm volatile
 800ad36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3a:	f383 8811 	msr	BASEPRI, r3
 800ad3e:	f3bf 8f6f 	isb	sy
 800ad42:	f3bf 8f4f 	dsb	sy
 800ad46:	603b      	str	r3, [r7, #0]
}
 800ad48:	bf00      	nop
 800ad4a:	e7fe      	b.n	800ad4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ad4c:	f001 fa42 	bl	800c1d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ad50:	4b39      	ldr	r3, [pc, #228]	; (800ae38 <xTaskResumeAll+0x118>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	3b01      	subs	r3, #1
 800ad56:	4a38      	ldr	r2, [pc, #224]	; (800ae38 <xTaskResumeAll+0x118>)
 800ad58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad5a:	4b37      	ldr	r3, [pc, #220]	; (800ae38 <xTaskResumeAll+0x118>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d162      	bne.n	800ae28 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ad62:	4b36      	ldr	r3, [pc, #216]	; (800ae3c <xTaskResumeAll+0x11c>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d05e      	beq.n	800ae28 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad6a:	e02f      	b.n	800adcc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad6c:	4b34      	ldr	r3, [pc, #208]	; (800ae40 <xTaskResumeAll+0x120>)
 800ad6e:	68db      	ldr	r3, [r3, #12]
 800ad70:	68db      	ldr	r3, [r3, #12]
 800ad72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	3318      	adds	r3, #24
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f7fe fed5 	bl	8009b28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	3304      	adds	r3, #4
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7fe fed0 	bl	8009b28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad8c:	4b2d      	ldr	r3, [pc, #180]	; (800ae44 <xTaskResumeAll+0x124>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d903      	bls.n	800ad9c <xTaskResumeAll+0x7c>
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad98:	4a2a      	ldr	r2, [pc, #168]	; (800ae44 <xTaskResumeAll+0x124>)
 800ad9a:	6013      	str	r3, [r2, #0]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ada0:	4613      	mov	r3, r2
 800ada2:	009b      	lsls	r3, r3, #2
 800ada4:	4413      	add	r3, r2
 800ada6:	009b      	lsls	r3, r3, #2
 800ada8:	4a27      	ldr	r2, [pc, #156]	; (800ae48 <xTaskResumeAll+0x128>)
 800adaa:	441a      	add	r2, r3
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	3304      	adds	r3, #4
 800adb0:	4619      	mov	r1, r3
 800adb2:	4610      	mov	r0, r2
 800adb4:	f7fe fe5b 	bl	8009a6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adbc:	4b23      	ldr	r3, [pc, #140]	; (800ae4c <xTaskResumeAll+0x12c>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d302      	bcc.n	800adcc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800adc6:	4b22      	ldr	r3, [pc, #136]	; (800ae50 <xTaskResumeAll+0x130>)
 800adc8:	2201      	movs	r2, #1
 800adca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800adcc:	4b1c      	ldr	r3, [pc, #112]	; (800ae40 <xTaskResumeAll+0x120>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d1cb      	bne.n	800ad6c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d001      	beq.n	800adde <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800adda:	f000 fb85 	bl	800b4e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800adde:	4b1d      	ldr	r3, [pc, #116]	; (800ae54 <xTaskResumeAll+0x134>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d010      	beq.n	800ae0c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800adea:	f000 f847 	bl	800ae7c <xTaskIncrementTick>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d002      	beq.n	800adfa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800adf4:	4b16      	ldr	r3, [pc, #88]	; (800ae50 <xTaskResumeAll+0x130>)
 800adf6:	2201      	movs	r2, #1
 800adf8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	3b01      	subs	r3, #1
 800adfe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d1f1      	bne.n	800adea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ae06:	4b13      	ldr	r3, [pc, #76]	; (800ae54 <xTaskResumeAll+0x134>)
 800ae08:	2200      	movs	r2, #0
 800ae0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ae0c:	4b10      	ldr	r3, [pc, #64]	; (800ae50 <xTaskResumeAll+0x130>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d009      	beq.n	800ae28 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ae14:	2301      	movs	r3, #1
 800ae16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ae18:	4b0f      	ldr	r3, [pc, #60]	; (800ae58 <xTaskResumeAll+0x138>)
 800ae1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae1e:	601a      	str	r2, [r3, #0]
 800ae20:	f3bf 8f4f 	dsb	sy
 800ae24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae28:	f001 fa04 	bl	800c234 <vPortExitCritical>

	return xAlreadyYielded;
 800ae2c:	68bb      	ldr	r3, [r7, #8]
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3710      	adds	r7, #16
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	200059ec 	.word	0x200059ec
 800ae3c:	200059c4 	.word	0x200059c4
 800ae40:	20005984 	.word	0x20005984
 800ae44:	200059cc 	.word	0x200059cc
 800ae48:	200054f4 	.word	0x200054f4
 800ae4c:	200054f0 	.word	0x200054f0
 800ae50:	200059d8 	.word	0x200059d8
 800ae54:	200059d4 	.word	0x200059d4
 800ae58:	e000ed04 	.word	0xe000ed04

0800ae5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ae62:	4b05      	ldr	r3, [pc, #20]	; (800ae78 <xTaskGetTickCount+0x1c>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ae68:	687b      	ldr	r3, [r7, #4]
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	370c      	adds	r7, #12
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr
 800ae76:	bf00      	nop
 800ae78:	200059c8 	.word	0x200059c8

0800ae7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b086      	sub	sp, #24
 800ae80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ae82:	2300      	movs	r3, #0
 800ae84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae86:	4b4f      	ldr	r3, [pc, #316]	; (800afc4 <xTaskIncrementTick+0x148>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	f040 808f 	bne.w	800afae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ae90:	4b4d      	ldr	r3, [pc, #308]	; (800afc8 <xTaskIncrementTick+0x14c>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	3301      	adds	r3, #1
 800ae96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ae98:	4a4b      	ldr	r2, [pc, #300]	; (800afc8 <xTaskIncrementTick+0x14c>)
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d120      	bne.n	800aee6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aea4:	4b49      	ldr	r3, [pc, #292]	; (800afcc <xTaskIncrementTick+0x150>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d00a      	beq.n	800aec4 <xTaskIncrementTick+0x48>
	__asm volatile
 800aeae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb2:	f383 8811 	msr	BASEPRI, r3
 800aeb6:	f3bf 8f6f 	isb	sy
 800aeba:	f3bf 8f4f 	dsb	sy
 800aebe:	603b      	str	r3, [r7, #0]
}
 800aec0:	bf00      	nop
 800aec2:	e7fe      	b.n	800aec2 <xTaskIncrementTick+0x46>
 800aec4:	4b41      	ldr	r3, [pc, #260]	; (800afcc <xTaskIncrementTick+0x150>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	60fb      	str	r3, [r7, #12]
 800aeca:	4b41      	ldr	r3, [pc, #260]	; (800afd0 <xTaskIncrementTick+0x154>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a3f      	ldr	r2, [pc, #252]	; (800afcc <xTaskIncrementTick+0x150>)
 800aed0:	6013      	str	r3, [r2, #0]
 800aed2:	4a3f      	ldr	r2, [pc, #252]	; (800afd0 <xTaskIncrementTick+0x154>)
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	6013      	str	r3, [r2, #0]
 800aed8:	4b3e      	ldr	r3, [pc, #248]	; (800afd4 <xTaskIncrementTick+0x158>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	3301      	adds	r3, #1
 800aede:	4a3d      	ldr	r2, [pc, #244]	; (800afd4 <xTaskIncrementTick+0x158>)
 800aee0:	6013      	str	r3, [r2, #0]
 800aee2:	f000 fb01 	bl	800b4e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aee6:	4b3c      	ldr	r3, [pc, #240]	; (800afd8 <xTaskIncrementTick+0x15c>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	693a      	ldr	r2, [r7, #16]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d349      	bcc.n	800af84 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aef0:	4b36      	ldr	r3, [pc, #216]	; (800afcc <xTaskIncrementTick+0x150>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d104      	bne.n	800af04 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aefa:	4b37      	ldr	r3, [pc, #220]	; (800afd8 <xTaskIncrementTick+0x15c>)
 800aefc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af00:	601a      	str	r2, [r3, #0]
					break;
 800af02:	e03f      	b.n	800af84 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af04:	4b31      	ldr	r3, [pc, #196]	; (800afcc <xTaskIncrementTick+0x150>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	68db      	ldr	r3, [r3, #12]
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800af14:	693a      	ldr	r2, [r7, #16]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	429a      	cmp	r2, r3
 800af1a:	d203      	bcs.n	800af24 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800af1c:	4a2e      	ldr	r2, [pc, #184]	; (800afd8 <xTaskIncrementTick+0x15c>)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800af22:	e02f      	b.n	800af84 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	3304      	adds	r3, #4
 800af28:	4618      	mov	r0, r3
 800af2a:	f7fe fdfd 	bl	8009b28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af32:	2b00      	cmp	r3, #0
 800af34:	d004      	beq.n	800af40 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	3318      	adds	r3, #24
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7fe fdf4 	bl	8009b28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af44:	4b25      	ldr	r3, [pc, #148]	; (800afdc <xTaskIncrementTick+0x160>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d903      	bls.n	800af54 <xTaskIncrementTick+0xd8>
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af50:	4a22      	ldr	r2, [pc, #136]	; (800afdc <xTaskIncrementTick+0x160>)
 800af52:	6013      	str	r3, [r2, #0]
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af58:	4613      	mov	r3, r2
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	4413      	add	r3, r2
 800af5e:	009b      	lsls	r3, r3, #2
 800af60:	4a1f      	ldr	r2, [pc, #124]	; (800afe0 <xTaskIncrementTick+0x164>)
 800af62:	441a      	add	r2, r3
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	3304      	adds	r3, #4
 800af68:	4619      	mov	r1, r3
 800af6a:	4610      	mov	r0, r2
 800af6c:	f7fe fd7f 	bl	8009a6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af74:	4b1b      	ldr	r3, [pc, #108]	; (800afe4 <xTaskIncrementTick+0x168>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d3b8      	bcc.n	800aef0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800af7e:	2301      	movs	r3, #1
 800af80:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af82:	e7b5      	b.n	800aef0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800af84:	4b17      	ldr	r3, [pc, #92]	; (800afe4 <xTaskIncrementTick+0x168>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af8a:	4915      	ldr	r1, [pc, #84]	; (800afe0 <xTaskIncrementTick+0x164>)
 800af8c:	4613      	mov	r3, r2
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	4413      	add	r3, r2
 800af92:	009b      	lsls	r3, r3, #2
 800af94:	440b      	add	r3, r1
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d901      	bls.n	800afa0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800af9c:	2301      	movs	r3, #1
 800af9e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800afa0:	4b11      	ldr	r3, [pc, #68]	; (800afe8 <xTaskIncrementTick+0x16c>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d007      	beq.n	800afb8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800afa8:	2301      	movs	r3, #1
 800afaa:	617b      	str	r3, [r7, #20]
 800afac:	e004      	b.n	800afb8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800afae:	4b0f      	ldr	r3, [pc, #60]	; (800afec <xTaskIncrementTick+0x170>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	3301      	adds	r3, #1
 800afb4:	4a0d      	ldr	r2, [pc, #52]	; (800afec <xTaskIncrementTick+0x170>)
 800afb6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800afb8:	697b      	ldr	r3, [r7, #20]
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3718      	adds	r7, #24
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
 800afc2:	bf00      	nop
 800afc4:	200059ec 	.word	0x200059ec
 800afc8:	200059c8 	.word	0x200059c8
 800afcc:	2000597c 	.word	0x2000597c
 800afd0:	20005980 	.word	0x20005980
 800afd4:	200059dc 	.word	0x200059dc
 800afd8:	200059e4 	.word	0x200059e4
 800afdc:	200059cc 	.word	0x200059cc
 800afe0:	200054f4 	.word	0x200054f4
 800afe4:	200054f0 	.word	0x200054f0
 800afe8:	200059d8 	.word	0x200059d8
 800afec:	200059d4 	.word	0x200059d4

0800aff0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aff0:	b480      	push	{r7}
 800aff2:	b085      	sub	sp, #20
 800aff4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aff6:	4b2a      	ldr	r3, [pc, #168]	; (800b0a0 <vTaskSwitchContext+0xb0>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d003      	beq.n	800b006 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800affe:	4b29      	ldr	r3, [pc, #164]	; (800b0a4 <vTaskSwitchContext+0xb4>)
 800b000:	2201      	movs	r2, #1
 800b002:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b004:	e046      	b.n	800b094 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b006:	4b27      	ldr	r3, [pc, #156]	; (800b0a4 <vTaskSwitchContext+0xb4>)
 800b008:	2200      	movs	r2, #0
 800b00a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b00c:	4b26      	ldr	r3, [pc, #152]	; (800b0a8 <vTaskSwitchContext+0xb8>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	60fb      	str	r3, [r7, #12]
 800b012:	e010      	b.n	800b036 <vTaskSwitchContext+0x46>
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d10a      	bne.n	800b030 <vTaskSwitchContext+0x40>
	__asm volatile
 800b01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b01e:	f383 8811 	msr	BASEPRI, r3
 800b022:	f3bf 8f6f 	isb	sy
 800b026:	f3bf 8f4f 	dsb	sy
 800b02a:	607b      	str	r3, [r7, #4]
}
 800b02c:	bf00      	nop
 800b02e:	e7fe      	b.n	800b02e <vTaskSwitchContext+0x3e>
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	3b01      	subs	r3, #1
 800b034:	60fb      	str	r3, [r7, #12]
 800b036:	491d      	ldr	r1, [pc, #116]	; (800b0ac <vTaskSwitchContext+0xbc>)
 800b038:	68fa      	ldr	r2, [r7, #12]
 800b03a:	4613      	mov	r3, r2
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	4413      	add	r3, r2
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	440b      	add	r3, r1
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d0e4      	beq.n	800b014 <vTaskSwitchContext+0x24>
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	4613      	mov	r3, r2
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	4413      	add	r3, r2
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	4a15      	ldr	r2, [pc, #84]	; (800b0ac <vTaskSwitchContext+0xbc>)
 800b056:	4413      	add	r3, r2
 800b058:	60bb      	str	r3, [r7, #8]
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	685a      	ldr	r2, [r3, #4]
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	605a      	str	r2, [r3, #4]
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	685a      	ldr	r2, [r3, #4]
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	3308      	adds	r3, #8
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d104      	bne.n	800b07a <vTaskSwitchContext+0x8a>
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	685a      	ldr	r2, [r3, #4]
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	605a      	str	r2, [r3, #4]
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	68db      	ldr	r3, [r3, #12]
 800b080:	4a0b      	ldr	r2, [pc, #44]	; (800b0b0 <vTaskSwitchContext+0xc0>)
 800b082:	6013      	str	r3, [r2, #0]
 800b084:	4a08      	ldr	r2, [pc, #32]	; (800b0a8 <vTaskSwitchContext+0xb8>)
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b08a:	4b09      	ldr	r3, [pc, #36]	; (800b0b0 <vTaskSwitchContext+0xc0>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	3354      	adds	r3, #84	; 0x54
 800b090:	4a08      	ldr	r2, [pc, #32]	; (800b0b4 <vTaskSwitchContext+0xc4>)
 800b092:	6013      	str	r3, [r2, #0]
}
 800b094:	bf00      	nop
 800b096:	3714      	adds	r7, #20
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr
 800b0a0:	200059ec 	.word	0x200059ec
 800b0a4:	200059d8 	.word	0x200059d8
 800b0a8:	200059cc 	.word	0x200059cc
 800b0ac:	200054f4 	.word	0x200054f4
 800b0b0:	200054f0 	.word	0x200054f0
 800b0b4:	200000d0 	.word	0x200000d0

0800b0b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d10a      	bne.n	800b0de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0cc:	f383 8811 	msr	BASEPRI, r3
 800b0d0:	f3bf 8f6f 	isb	sy
 800b0d4:	f3bf 8f4f 	dsb	sy
 800b0d8:	60fb      	str	r3, [r7, #12]
}
 800b0da:	bf00      	nop
 800b0dc:	e7fe      	b.n	800b0dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b0de:	4b07      	ldr	r3, [pc, #28]	; (800b0fc <vTaskPlaceOnEventList+0x44>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	3318      	adds	r3, #24
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f7fe fce5 	bl	8009ab6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b0ec:	2101      	movs	r1, #1
 800b0ee:	6838      	ldr	r0, [r7, #0]
 800b0f0:	f000 fba4 	bl	800b83c <prvAddCurrentTaskToDelayedList>
}
 800b0f4:	bf00      	nop
 800b0f6:	3710      	adds	r7, #16
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	200054f0 	.word	0x200054f0

0800b100 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b100:	b580      	push	{r7, lr}
 800b102:	b086      	sub	sp, #24
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d10a      	bne.n	800b128 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b116:	f383 8811 	msr	BASEPRI, r3
 800b11a:	f3bf 8f6f 	isb	sy
 800b11e:	f3bf 8f4f 	dsb	sy
 800b122:	617b      	str	r3, [r7, #20]
}
 800b124:	bf00      	nop
 800b126:	e7fe      	b.n	800b126 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b128:	4b0a      	ldr	r3, [pc, #40]	; (800b154 <vTaskPlaceOnEventListRestricted+0x54>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	3318      	adds	r3, #24
 800b12e:	4619      	mov	r1, r3
 800b130:	68f8      	ldr	r0, [r7, #12]
 800b132:	f7fe fc9c 	bl	8009a6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d002      	beq.n	800b142 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b13c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b140:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b142:	6879      	ldr	r1, [r7, #4]
 800b144:	68b8      	ldr	r0, [r7, #8]
 800b146:	f000 fb79 	bl	800b83c <prvAddCurrentTaskToDelayedList>
	}
 800b14a:	bf00      	nop
 800b14c:	3718      	adds	r7, #24
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	200054f0 	.word	0x200054f0

0800b158 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b086      	sub	sp, #24
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	68db      	ldr	r3, [r3, #12]
 800b166:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d10a      	bne.n	800b184 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b172:	f383 8811 	msr	BASEPRI, r3
 800b176:	f3bf 8f6f 	isb	sy
 800b17a:	f3bf 8f4f 	dsb	sy
 800b17e:	60fb      	str	r3, [r7, #12]
}
 800b180:	bf00      	nop
 800b182:	e7fe      	b.n	800b182 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	3318      	adds	r3, #24
 800b188:	4618      	mov	r0, r3
 800b18a:	f7fe fccd 	bl	8009b28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b18e:	4b1e      	ldr	r3, [pc, #120]	; (800b208 <xTaskRemoveFromEventList+0xb0>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d11d      	bne.n	800b1d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	3304      	adds	r3, #4
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7fe fcc4 	bl	8009b28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1a4:	4b19      	ldr	r3, [pc, #100]	; (800b20c <xTaskRemoveFromEventList+0xb4>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d903      	bls.n	800b1b4 <xTaskRemoveFromEventList+0x5c>
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b0:	4a16      	ldr	r2, [pc, #88]	; (800b20c <xTaskRemoveFromEventList+0xb4>)
 800b1b2:	6013      	str	r3, [r2, #0]
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	4413      	add	r3, r2
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	4a13      	ldr	r2, [pc, #76]	; (800b210 <xTaskRemoveFromEventList+0xb8>)
 800b1c2:	441a      	add	r2, r3
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	3304      	adds	r3, #4
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	4610      	mov	r0, r2
 800b1cc:	f7fe fc4f 	bl	8009a6e <vListInsertEnd>
 800b1d0:	e005      	b.n	800b1de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	3318      	adds	r3, #24
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	480e      	ldr	r0, [pc, #56]	; (800b214 <xTaskRemoveFromEventList+0xbc>)
 800b1da:	f7fe fc48 	bl	8009a6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1e2:	4b0d      	ldr	r3, [pc, #52]	; (800b218 <xTaskRemoveFromEventList+0xc0>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d905      	bls.n	800b1f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b1f0:	4b0a      	ldr	r3, [pc, #40]	; (800b21c <xTaskRemoveFromEventList+0xc4>)
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	601a      	str	r2, [r3, #0]
 800b1f6:	e001      	b.n	800b1fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b1fc:	697b      	ldr	r3, [r7, #20]
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3718      	adds	r7, #24
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	200059ec 	.word	0x200059ec
 800b20c:	200059cc 	.word	0x200059cc
 800b210:	200054f4 	.word	0x200054f4
 800b214:	20005984 	.word	0x20005984
 800b218:	200054f0 	.word	0x200054f0
 800b21c:	200059d8 	.word	0x200059d8

0800b220 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d10a      	bne.n	800b244 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800b22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b232:	f383 8811 	msr	BASEPRI, r3
 800b236:	f3bf 8f6f 	isb	sy
 800b23a:	f3bf 8f4f 	dsb	sy
 800b23e:	60fb      	str	r3, [r7, #12]
}
 800b240:	bf00      	nop
 800b242:	e7fe      	b.n	800b242 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800b244:	f000 ffc6 	bl	800c1d4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b248:	4b06      	ldr	r3, [pc, #24]	; (800b264 <vTaskSetTimeOutState+0x44>)
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800b250:	4b05      	ldr	r3, [pc, #20]	; (800b268 <vTaskSetTimeOutState+0x48>)
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800b258:	f000 ffec 	bl	800c234 <vPortExitCritical>
}
 800b25c:	bf00      	nop
 800b25e:	3710      	adds	r7, #16
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}
 800b264:	200059dc 	.word	0x200059dc
 800b268:	200059c8 	.word	0x200059c8

0800b26c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b274:	4b06      	ldr	r3, [pc, #24]	; (800b290 <vTaskInternalSetTimeOutState+0x24>)
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b27c:	4b05      	ldr	r3, [pc, #20]	; (800b294 <vTaskInternalSetTimeOutState+0x28>)
 800b27e:	681a      	ldr	r2, [r3, #0]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	605a      	str	r2, [r3, #4]
}
 800b284:	bf00      	nop
 800b286:	370c      	adds	r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr
 800b290:	200059dc 	.word	0x200059dc
 800b294:	200059c8 	.word	0x200059c8

0800b298 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b088      	sub	sp, #32
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d10a      	bne.n	800b2be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ac:	f383 8811 	msr	BASEPRI, r3
 800b2b0:	f3bf 8f6f 	isb	sy
 800b2b4:	f3bf 8f4f 	dsb	sy
 800b2b8:	613b      	str	r3, [r7, #16]
}
 800b2ba:	bf00      	nop
 800b2bc:	e7fe      	b.n	800b2bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d10a      	bne.n	800b2da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c8:	f383 8811 	msr	BASEPRI, r3
 800b2cc:	f3bf 8f6f 	isb	sy
 800b2d0:	f3bf 8f4f 	dsb	sy
 800b2d4:	60fb      	str	r3, [r7, #12]
}
 800b2d6:	bf00      	nop
 800b2d8:	e7fe      	b.n	800b2d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b2da:	f000 ff7b 	bl	800c1d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b2de:	4b1d      	ldr	r3, [pc, #116]	; (800b354 <xTaskCheckForTimeOut+0xbc>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	69ba      	ldr	r2, [r7, #24]
 800b2ea:	1ad3      	subs	r3, r2, r3
 800b2ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2f6:	d102      	bne.n	800b2fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	61fb      	str	r3, [r7, #28]
 800b2fc:	e023      	b.n	800b346 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	4b15      	ldr	r3, [pc, #84]	; (800b358 <xTaskCheckForTimeOut+0xc0>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	429a      	cmp	r2, r3
 800b308:	d007      	beq.n	800b31a <xTaskCheckForTimeOut+0x82>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	69ba      	ldr	r2, [r7, #24]
 800b310:	429a      	cmp	r2, r3
 800b312:	d302      	bcc.n	800b31a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b314:	2301      	movs	r3, #1
 800b316:	61fb      	str	r3, [r7, #28]
 800b318:	e015      	b.n	800b346 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	697a      	ldr	r2, [r7, #20]
 800b320:	429a      	cmp	r2, r3
 800b322:	d20b      	bcs.n	800b33c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	1ad2      	subs	r2, r2, r3
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f7ff ff9b 	bl	800b26c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b336:	2300      	movs	r3, #0
 800b338:	61fb      	str	r3, [r7, #28]
 800b33a:	e004      	b.n	800b346 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	2200      	movs	r2, #0
 800b340:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b342:	2301      	movs	r3, #1
 800b344:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b346:	f000 ff75 	bl	800c234 <vPortExitCritical>

	return xReturn;
 800b34a:	69fb      	ldr	r3, [r7, #28]
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3720      	adds	r7, #32
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	200059c8 	.word	0x200059c8
 800b358:	200059dc 	.word	0x200059dc

0800b35c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b35c:	b480      	push	{r7}
 800b35e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b360:	4b03      	ldr	r3, [pc, #12]	; (800b370 <vTaskMissedYield+0x14>)
 800b362:	2201      	movs	r2, #1
 800b364:	601a      	str	r2, [r3, #0]
}
 800b366:	bf00      	nop
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr
 800b370:	200059d8 	.word	0x200059d8

0800b374 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b082      	sub	sp, #8
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b37c:	f000 f852 	bl	800b424 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b380:	4b06      	ldr	r3, [pc, #24]	; (800b39c <prvIdleTask+0x28>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	2b01      	cmp	r3, #1
 800b386:	d9f9      	bls.n	800b37c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b388:	4b05      	ldr	r3, [pc, #20]	; (800b3a0 <prvIdleTask+0x2c>)
 800b38a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b38e:	601a      	str	r2, [r3, #0]
 800b390:	f3bf 8f4f 	dsb	sy
 800b394:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b398:	e7f0      	b.n	800b37c <prvIdleTask+0x8>
 800b39a:	bf00      	nop
 800b39c:	200054f4 	.word	0x200054f4
 800b3a0:	e000ed04 	.word	0xe000ed04

0800b3a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	607b      	str	r3, [r7, #4]
 800b3ae:	e00c      	b.n	800b3ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	4413      	add	r3, r2
 800b3b8:	009b      	lsls	r3, r3, #2
 800b3ba:	4a12      	ldr	r2, [pc, #72]	; (800b404 <prvInitialiseTaskLists+0x60>)
 800b3bc:	4413      	add	r3, r2
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7fe fb28 	bl	8009a14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	607b      	str	r3, [r7, #4]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2b37      	cmp	r3, #55	; 0x37
 800b3ce:	d9ef      	bls.n	800b3b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b3d0:	480d      	ldr	r0, [pc, #52]	; (800b408 <prvInitialiseTaskLists+0x64>)
 800b3d2:	f7fe fb1f 	bl	8009a14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b3d6:	480d      	ldr	r0, [pc, #52]	; (800b40c <prvInitialiseTaskLists+0x68>)
 800b3d8:	f7fe fb1c 	bl	8009a14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b3dc:	480c      	ldr	r0, [pc, #48]	; (800b410 <prvInitialiseTaskLists+0x6c>)
 800b3de:	f7fe fb19 	bl	8009a14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b3e2:	480c      	ldr	r0, [pc, #48]	; (800b414 <prvInitialiseTaskLists+0x70>)
 800b3e4:	f7fe fb16 	bl	8009a14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b3e8:	480b      	ldr	r0, [pc, #44]	; (800b418 <prvInitialiseTaskLists+0x74>)
 800b3ea:	f7fe fb13 	bl	8009a14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b3ee:	4b0b      	ldr	r3, [pc, #44]	; (800b41c <prvInitialiseTaskLists+0x78>)
 800b3f0:	4a05      	ldr	r2, [pc, #20]	; (800b408 <prvInitialiseTaskLists+0x64>)
 800b3f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b3f4:	4b0a      	ldr	r3, [pc, #40]	; (800b420 <prvInitialiseTaskLists+0x7c>)
 800b3f6:	4a05      	ldr	r2, [pc, #20]	; (800b40c <prvInitialiseTaskLists+0x68>)
 800b3f8:	601a      	str	r2, [r3, #0]
}
 800b3fa:	bf00      	nop
 800b3fc:	3708      	adds	r7, #8
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	200054f4 	.word	0x200054f4
 800b408:	20005954 	.word	0x20005954
 800b40c:	20005968 	.word	0x20005968
 800b410:	20005984 	.word	0x20005984
 800b414:	20005998 	.word	0x20005998
 800b418:	200059b0 	.word	0x200059b0
 800b41c:	2000597c 	.word	0x2000597c
 800b420:	20005980 	.word	0x20005980

0800b424 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b082      	sub	sp, #8
 800b428:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b42a:	e019      	b.n	800b460 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b42c:	f000 fed2 	bl	800c1d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b430:	4b10      	ldr	r3, [pc, #64]	; (800b474 <prvCheckTasksWaitingTermination+0x50>)
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	68db      	ldr	r3, [r3, #12]
 800b436:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	3304      	adds	r3, #4
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7fe fb73 	bl	8009b28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b442:	4b0d      	ldr	r3, [pc, #52]	; (800b478 <prvCheckTasksWaitingTermination+0x54>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	3b01      	subs	r3, #1
 800b448:	4a0b      	ldr	r2, [pc, #44]	; (800b478 <prvCheckTasksWaitingTermination+0x54>)
 800b44a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b44c:	4b0b      	ldr	r3, [pc, #44]	; (800b47c <prvCheckTasksWaitingTermination+0x58>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	3b01      	subs	r3, #1
 800b452:	4a0a      	ldr	r2, [pc, #40]	; (800b47c <prvCheckTasksWaitingTermination+0x58>)
 800b454:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b456:	f000 feed 	bl	800c234 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 f810 	bl	800b480 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b460:	4b06      	ldr	r3, [pc, #24]	; (800b47c <prvCheckTasksWaitingTermination+0x58>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d1e1      	bne.n	800b42c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b468:	bf00      	nop
 800b46a:	bf00      	nop
 800b46c:	3708      	adds	r7, #8
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	20005998 	.word	0x20005998
 800b478:	200059c4 	.word	0x200059c4
 800b47c:	200059ac 	.word	0x200059ac

0800b480 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	3354      	adds	r3, #84	; 0x54
 800b48c:	4618      	mov	r0, r3
 800b48e:	f00d f839 	bl	8018504 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d108      	bne.n	800b4ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f001 f885 	bl	800c5b0 <vPortFree>
				vPortFree( pxTCB );
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f001 f882 	bl	800c5b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b4ac:	e018      	b.n	800b4e0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d103      	bne.n	800b4c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f001 f879 	bl	800c5b0 <vPortFree>
	}
 800b4be:	e00f      	b.n	800b4e0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b4c6:	2b02      	cmp	r3, #2
 800b4c8:	d00a      	beq.n	800b4e0 <prvDeleteTCB+0x60>
	__asm volatile
 800b4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ce:	f383 8811 	msr	BASEPRI, r3
 800b4d2:	f3bf 8f6f 	isb	sy
 800b4d6:	f3bf 8f4f 	dsb	sy
 800b4da:	60fb      	str	r3, [r7, #12]
}
 800b4dc:	bf00      	nop
 800b4de:	e7fe      	b.n	800b4de <prvDeleteTCB+0x5e>
	}
 800b4e0:	bf00      	nop
 800b4e2:	3710      	adds	r7, #16
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b083      	sub	sp, #12
 800b4ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4ee:	4b0c      	ldr	r3, [pc, #48]	; (800b520 <prvResetNextTaskUnblockTime+0x38>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d104      	bne.n	800b502 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b4f8:	4b0a      	ldr	r3, [pc, #40]	; (800b524 <prvResetNextTaskUnblockTime+0x3c>)
 800b4fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b500:	e008      	b.n	800b514 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b502:	4b07      	ldr	r3, [pc, #28]	; (800b520 <prvResetNextTaskUnblockTime+0x38>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	68db      	ldr	r3, [r3, #12]
 800b508:	68db      	ldr	r3, [r3, #12]
 800b50a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	4a04      	ldr	r2, [pc, #16]	; (800b524 <prvResetNextTaskUnblockTime+0x3c>)
 800b512:	6013      	str	r3, [r2, #0]
}
 800b514:	bf00      	nop
 800b516:	370c      	adds	r7, #12
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr
 800b520:	2000597c 	.word	0x2000597c
 800b524:	200059e4 	.word	0x200059e4

0800b528 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b528:	b480      	push	{r7}
 800b52a:	b083      	sub	sp, #12
 800b52c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b52e:	4b0b      	ldr	r3, [pc, #44]	; (800b55c <xTaskGetSchedulerState+0x34>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d102      	bne.n	800b53c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b536:	2301      	movs	r3, #1
 800b538:	607b      	str	r3, [r7, #4]
 800b53a:	e008      	b.n	800b54e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b53c:	4b08      	ldr	r3, [pc, #32]	; (800b560 <xTaskGetSchedulerState+0x38>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d102      	bne.n	800b54a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b544:	2302      	movs	r3, #2
 800b546:	607b      	str	r3, [r7, #4]
 800b548:	e001      	b.n	800b54e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b54a:	2300      	movs	r3, #0
 800b54c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b54e:	687b      	ldr	r3, [r7, #4]
	}
 800b550:	4618      	mov	r0, r3
 800b552:	370c      	adds	r7, #12
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr
 800b55c:	200059d0 	.word	0x200059d0
 800b560:	200059ec 	.word	0x200059ec

0800b564 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b570:	2300      	movs	r3, #0
 800b572:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d051      	beq.n	800b61e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b57e:	4b2a      	ldr	r3, [pc, #168]	; (800b628 <xTaskPriorityInherit+0xc4>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b584:	429a      	cmp	r2, r3
 800b586:	d241      	bcs.n	800b60c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	699b      	ldr	r3, [r3, #24]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	db06      	blt.n	800b59e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b590:	4b25      	ldr	r3, [pc, #148]	; (800b628 <xTaskPriorityInherit+0xc4>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b596:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	6959      	ldr	r1, [r3, #20]
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5a6:	4613      	mov	r3, r2
 800b5a8:	009b      	lsls	r3, r3, #2
 800b5aa:	4413      	add	r3, r2
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	4a1f      	ldr	r2, [pc, #124]	; (800b62c <xTaskPriorityInherit+0xc8>)
 800b5b0:	4413      	add	r3, r2
 800b5b2:	4299      	cmp	r1, r3
 800b5b4:	d122      	bne.n	800b5fc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	3304      	adds	r3, #4
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7fe fab4 	bl	8009b28 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b5c0:	4b19      	ldr	r3, [pc, #100]	; (800b628 <xTaskPriorityInherit+0xc4>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ce:	4b18      	ldr	r3, [pc, #96]	; (800b630 <xTaskPriorityInherit+0xcc>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d903      	bls.n	800b5de <xTaskPriorityInherit+0x7a>
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5da:	4a15      	ldr	r2, [pc, #84]	; (800b630 <xTaskPriorityInherit+0xcc>)
 800b5dc:	6013      	str	r3, [r2, #0]
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5e2:	4613      	mov	r3, r2
 800b5e4:	009b      	lsls	r3, r3, #2
 800b5e6:	4413      	add	r3, r2
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	4a10      	ldr	r2, [pc, #64]	; (800b62c <xTaskPriorityInherit+0xc8>)
 800b5ec:	441a      	add	r2, r3
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	3304      	adds	r3, #4
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	4610      	mov	r0, r2
 800b5f6:	f7fe fa3a 	bl	8009a6e <vListInsertEnd>
 800b5fa:	e004      	b.n	800b606 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b5fc:	4b0a      	ldr	r3, [pc, #40]	; (800b628 <xTaskPriorityInherit+0xc4>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b606:	2301      	movs	r3, #1
 800b608:	60fb      	str	r3, [r7, #12]
 800b60a:	e008      	b.n	800b61e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b610:	4b05      	ldr	r3, [pc, #20]	; (800b628 <xTaskPriorityInherit+0xc4>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b616:	429a      	cmp	r2, r3
 800b618:	d201      	bcs.n	800b61e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b61a:	2301      	movs	r3, #1
 800b61c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b61e:	68fb      	ldr	r3, [r7, #12]
	}
 800b620:	4618      	mov	r0, r3
 800b622:	3710      	adds	r7, #16
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}
 800b628:	200054f0 	.word	0x200054f0
 800b62c:	200054f4 	.word	0x200054f4
 800b630:	200059cc 	.word	0x200059cc

0800b634 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b634:	b580      	push	{r7, lr}
 800b636:	b086      	sub	sp, #24
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b640:	2300      	movs	r3, #0
 800b642:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d056      	beq.n	800b6f8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b64a:	4b2e      	ldr	r3, [pc, #184]	; (800b704 <xTaskPriorityDisinherit+0xd0>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	693a      	ldr	r2, [r7, #16]
 800b650:	429a      	cmp	r2, r3
 800b652:	d00a      	beq.n	800b66a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b658:	f383 8811 	msr	BASEPRI, r3
 800b65c:	f3bf 8f6f 	isb	sy
 800b660:	f3bf 8f4f 	dsb	sy
 800b664:	60fb      	str	r3, [r7, #12]
}
 800b666:	bf00      	nop
 800b668:	e7fe      	b.n	800b668 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d10a      	bne.n	800b688 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b676:	f383 8811 	msr	BASEPRI, r3
 800b67a:	f3bf 8f6f 	isb	sy
 800b67e:	f3bf 8f4f 	dsb	sy
 800b682:	60bb      	str	r3, [r7, #8]
}
 800b684:	bf00      	nop
 800b686:	e7fe      	b.n	800b686 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b68c:	1e5a      	subs	r2, r3, #1
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d02c      	beq.n	800b6f8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d128      	bne.n	800b6f8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	3304      	adds	r3, #4
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7fe fa3c 	bl	8009b28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6c8:	4b0f      	ldr	r3, [pc, #60]	; (800b708 <xTaskPriorityDisinherit+0xd4>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d903      	bls.n	800b6d8 <xTaskPriorityDisinherit+0xa4>
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d4:	4a0c      	ldr	r2, [pc, #48]	; (800b708 <xTaskPriorityDisinherit+0xd4>)
 800b6d6:	6013      	str	r3, [r2, #0]
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6dc:	4613      	mov	r3, r2
 800b6de:	009b      	lsls	r3, r3, #2
 800b6e0:	4413      	add	r3, r2
 800b6e2:	009b      	lsls	r3, r3, #2
 800b6e4:	4a09      	ldr	r2, [pc, #36]	; (800b70c <xTaskPriorityDisinherit+0xd8>)
 800b6e6:	441a      	add	r2, r3
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	3304      	adds	r3, #4
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	4610      	mov	r0, r2
 800b6f0:	f7fe f9bd 	bl	8009a6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b6f8:	697b      	ldr	r3, [r7, #20]
	}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3718      	adds	r7, #24
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	200054f0 	.word	0x200054f0
 800b708:	200059cc 	.word	0x200059cc
 800b70c:	200054f4 	.word	0x200054f4

0800b710 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b710:	b580      	push	{r7, lr}
 800b712:	b088      	sub	sp, #32
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b71e:	2301      	movs	r3, #1
 800b720:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d06a      	beq.n	800b7fe <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b728:	69bb      	ldr	r3, [r7, #24]
 800b72a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d10a      	bne.n	800b746 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b734:	f383 8811 	msr	BASEPRI, r3
 800b738:	f3bf 8f6f 	isb	sy
 800b73c:	f3bf 8f4f 	dsb	sy
 800b740:	60fb      	str	r3, [r7, #12]
}
 800b742:	bf00      	nop
 800b744:	e7fe      	b.n	800b744 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b746:	69bb      	ldr	r3, [r7, #24]
 800b748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b74a:	683a      	ldr	r2, [r7, #0]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d902      	bls.n	800b756 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	61fb      	str	r3, [r7, #28]
 800b754:	e002      	b.n	800b75c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b756:	69bb      	ldr	r3, [r7, #24]
 800b758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b75a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b75c:	69bb      	ldr	r3, [r7, #24]
 800b75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b760:	69fa      	ldr	r2, [r7, #28]
 800b762:	429a      	cmp	r2, r3
 800b764:	d04b      	beq.n	800b7fe <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b766:	69bb      	ldr	r3, [r7, #24]
 800b768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b76a:	697a      	ldr	r2, [r7, #20]
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d146      	bne.n	800b7fe <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b770:	4b25      	ldr	r3, [pc, #148]	; (800b808 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	69ba      	ldr	r2, [r7, #24]
 800b776:	429a      	cmp	r2, r3
 800b778:	d10a      	bne.n	800b790 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77e:	f383 8811 	msr	BASEPRI, r3
 800b782:	f3bf 8f6f 	isb	sy
 800b786:	f3bf 8f4f 	dsb	sy
 800b78a:	60bb      	str	r3, [r7, #8]
}
 800b78c:	bf00      	nop
 800b78e:	e7fe      	b.n	800b78e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b790:	69bb      	ldr	r3, [r7, #24]
 800b792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b794:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	69fa      	ldr	r2, [r7, #28]
 800b79a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b79c:	69bb      	ldr	r3, [r7, #24]
 800b79e:	699b      	ldr	r3, [r3, #24]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	db04      	blt.n	800b7ae <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b7aa:	69bb      	ldr	r3, [r7, #24]
 800b7ac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b7ae:	69bb      	ldr	r3, [r7, #24]
 800b7b0:	6959      	ldr	r1, [r3, #20]
 800b7b2:	693a      	ldr	r2, [r7, #16]
 800b7b4:	4613      	mov	r3, r2
 800b7b6:	009b      	lsls	r3, r3, #2
 800b7b8:	4413      	add	r3, r2
 800b7ba:	009b      	lsls	r3, r3, #2
 800b7bc:	4a13      	ldr	r2, [pc, #76]	; (800b80c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b7be:	4413      	add	r3, r2
 800b7c0:	4299      	cmp	r1, r3
 800b7c2:	d11c      	bne.n	800b7fe <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7c4:	69bb      	ldr	r3, [r7, #24]
 800b7c6:	3304      	adds	r3, #4
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7fe f9ad 	bl	8009b28 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b7ce:	69bb      	ldr	r3, [r7, #24]
 800b7d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7d2:	4b0f      	ldr	r3, [pc, #60]	; (800b810 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d903      	bls.n	800b7e2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b7da:	69bb      	ldr	r3, [r7, #24]
 800b7dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7de:	4a0c      	ldr	r2, [pc, #48]	; (800b810 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b7e0:	6013      	str	r3, [r2, #0]
 800b7e2:	69bb      	ldr	r3, [r7, #24]
 800b7e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7e6:	4613      	mov	r3, r2
 800b7e8:	009b      	lsls	r3, r3, #2
 800b7ea:	4413      	add	r3, r2
 800b7ec:	009b      	lsls	r3, r3, #2
 800b7ee:	4a07      	ldr	r2, [pc, #28]	; (800b80c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b7f0:	441a      	add	r2, r3
 800b7f2:	69bb      	ldr	r3, [r7, #24]
 800b7f4:	3304      	adds	r3, #4
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	4610      	mov	r0, r2
 800b7fa:	f7fe f938 	bl	8009a6e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b7fe:	bf00      	nop
 800b800:	3720      	adds	r7, #32
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
 800b806:	bf00      	nop
 800b808:	200054f0 	.word	0x200054f0
 800b80c:	200054f4 	.word	0x200054f4
 800b810:	200059cc 	.word	0x200059cc

0800b814 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b814:	b480      	push	{r7}
 800b816:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b818:	4b07      	ldr	r3, [pc, #28]	; (800b838 <pvTaskIncrementMutexHeldCount+0x24>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d004      	beq.n	800b82a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b820:	4b05      	ldr	r3, [pc, #20]	; (800b838 <pvTaskIncrementMutexHeldCount+0x24>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b826:	3201      	adds	r2, #1
 800b828:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b82a:	4b03      	ldr	r3, [pc, #12]	; (800b838 <pvTaskIncrementMutexHeldCount+0x24>)
 800b82c:	681b      	ldr	r3, [r3, #0]
	}
 800b82e:	4618      	mov	r0, r3
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr
 800b838:	200054f0 	.word	0x200054f0

0800b83c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b846:	4b21      	ldr	r3, [pc, #132]	; (800b8cc <prvAddCurrentTaskToDelayedList+0x90>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b84c:	4b20      	ldr	r3, [pc, #128]	; (800b8d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	3304      	adds	r3, #4
 800b852:	4618      	mov	r0, r3
 800b854:	f7fe f968 	bl	8009b28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b85e:	d10a      	bne.n	800b876 <prvAddCurrentTaskToDelayedList+0x3a>
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d007      	beq.n	800b876 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b866:	4b1a      	ldr	r3, [pc, #104]	; (800b8d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	3304      	adds	r3, #4
 800b86c:	4619      	mov	r1, r3
 800b86e:	4819      	ldr	r0, [pc, #100]	; (800b8d4 <prvAddCurrentTaskToDelayedList+0x98>)
 800b870:	f7fe f8fd 	bl	8009a6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b874:	e026      	b.n	800b8c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b876:	68fa      	ldr	r2, [r7, #12]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	4413      	add	r3, r2
 800b87c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b87e:	4b14      	ldr	r3, [pc, #80]	; (800b8d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	68ba      	ldr	r2, [r7, #8]
 800b884:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b886:	68ba      	ldr	r2, [r7, #8]
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d209      	bcs.n	800b8a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b88e:	4b12      	ldr	r3, [pc, #72]	; (800b8d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	4b0f      	ldr	r3, [pc, #60]	; (800b8d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	3304      	adds	r3, #4
 800b898:	4619      	mov	r1, r3
 800b89a:	4610      	mov	r0, r2
 800b89c:	f7fe f90b 	bl	8009ab6 <vListInsert>
}
 800b8a0:	e010      	b.n	800b8c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8a2:	4b0e      	ldr	r3, [pc, #56]	; (800b8dc <prvAddCurrentTaskToDelayedList+0xa0>)
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	4b0a      	ldr	r3, [pc, #40]	; (800b8d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	3304      	adds	r3, #4
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	4610      	mov	r0, r2
 800b8b0:	f7fe f901 	bl	8009ab6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b8b4:	4b0a      	ldr	r3, [pc, #40]	; (800b8e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	68ba      	ldr	r2, [r7, #8]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d202      	bcs.n	800b8c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b8be:	4a08      	ldr	r2, [pc, #32]	; (800b8e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	6013      	str	r3, [r2, #0]
}
 800b8c4:	bf00      	nop
 800b8c6:	3710      	adds	r7, #16
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}
 800b8cc:	200059c8 	.word	0x200059c8
 800b8d0:	200054f0 	.word	0x200054f0
 800b8d4:	200059b0 	.word	0x200059b0
 800b8d8:	20005980 	.word	0x20005980
 800b8dc:	2000597c 	.word	0x2000597c
 800b8e0:	200059e4 	.word	0x200059e4

0800b8e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b08a      	sub	sp, #40	; 0x28
 800b8e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b8ee:	f000 fb07 	bl	800bf00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b8f2:	4b1c      	ldr	r3, [pc, #112]	; (800b964 <xTimerCreateTimerTask+0x80>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d021      	beq.n	800b93e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b8fe:	2300      	movs	r3, #0
 800b900:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b902:	1d3a      	adds	r2, r7, #4
 800b904:	f107 0108 	add.w	r1, r7, #8
 800b908:	f107 030c 	add.w	r3, r7, #12
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7fe f867 	bl	80099e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b912:	6879      	ldr	r1, [r7, #4]
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	68fa      	ldr	r2, [r7, #12]
 800b918:	9202      	str	r2, [sp, #8]
 800b91a:	9301      	str	r3, [sp, #4]
 800b91c:	2302      	movs	r3, #2
 800b91e:	9300      	str	r3, [sp, #0]
 800b920:	2300      	movs	r3, #0
 800b922:	460a      	mov	r2, r1
 800b924:	4910      	ldr	r1, [pc, #64]	; (800b968 <xTimerCreateTimerTask+0x84>)
 800b926:	4811      	ldr	r0, [pc, #68]	; (800b96c <xTimerCreateTimerTask+0x88>)
 800b928:	f7fe ff90 	bl	800a84c <xTaskCreateStatic>
 800b92c:	4603      	mov	r3, r0
 800b92e:	4a10      	ldr	r2, [pc, #64]	; (800b970 <xTimerCreateTimerTask+0x8c>)
 800b930:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b932:	4b0f      	ldr	r3, [pc, #60]	; (800b970 <xTimerCreateTimerTask+0x8c>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d001      	beq.n	800b93e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b93a:	2301      	movs	r3, #1
 800b93c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d10a      	bne.n	800b95a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b948:	f383 8811 	msr	BASEPRI, r3
 800b94c:	f3bf 8f6f 	isb	sy
 800b950:	f3bf 8f4f 	dsb	sy
 800b954:	613b      	str	r3, [r7, #16]
}
 800b956:	bf00      	nop
 800b958:	e7fe      	b.n	800b958 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b95a:	697b      	ldr	r3, [r7, #20]
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3718      	adds	r7, #24
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}
 800b964:	20005a20 	.word	0x20005a20
 800b968:	080196a0 	.word	0x080196a0
 800b96c:	0800baa9 	.word	0x0800baa9
 800b970:	20005a24 	.word	0x20005a24

0800b974 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b08a      	sub	sp, #40	; 0x28
 800b978:	af00      	add	r7, sp, #0
 800b97a:	60f8      	str	r0, [r7, #12]
 800b97c:	60b9      	str	r1, [r7, #8]
 800b97e:	607a      	str	r2, [r7, #4]
 800b980:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b982:	2300      	movs	r3, #0
 800b984:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d10a      	bne.n	800b9a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b990:	f383 8811 	msr	BASEPRI, r3
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	623b      	str	r3, [r7, #32]
}
 800b99e:	bf00      	nop
 800b9a0:	e7fe      	b.n	800b9a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b9a2:	4b1a      	ldr	r3, [pc, #104]	; (800ba0c <xTimerGenericCommand+0x98>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d02a      	beq.n	800ba00 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	2b05      	cmp	r3, #5
 800b9ba:	dc18      	bgt.n	800b9ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b9bc:	f7ff fdb4 	bl	800b528 <xTaskGetSchedulerState>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b02      	cmp	r3, #2
 800b9c4:	d109      	bne.n	800b9da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b9c6:	4b11      	ldr	r3, [pc, #68]	; (800ba0c <xTimerGenericCommand+0x98>)
 800b9c8:	6818      	ldr	r0, [r3, #0]
 800b9ca:	f107 0110 	add.w	r1, r7, #16
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9d2:	f7fe fa11 	bl	8009df8 <xQueueGenericSend>
 800b9d6:	6278      	str	r0, [r7, #36]	; 0x24
 800b9d8:	e012      	b.n	800ba00 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b9da:	4b0c      	ldr	r3, [pc, #48]	; (800ba0c <xTimerGenericCommand+0x98>)
 800b9dc:	6818      	ldr	r0, [r3, #0]
 800b9de:	f107 0110 	add.w	r1, r7, #16
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	f7fe fa07 	bl	8009df8 <xQueueGenericSend>
 800b9ea:	6278      	str	r0, [r7, #36]	; 0x24
 800b9ec:	e008      	b.n	800ba00 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b9ee:	4b07      	ldr	r3, [pc, #28]	; (800ba0c <xTimerGenericCommand+0x98>)
 800b9f0:	6818      	ldr	r0, [r3, #0]
 800b9f2:	f107 0110 	add.w	r1, r7, #16
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	683a      	ldr	r2, [r7, #0]
 800b9fa:	f7fe fafb 	bl	8009ff4 <xQueueGenericSendFromISR>
 800b9fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ba00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3728      	adds	r7, #40	; 0x28
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	20005a20 	.word	0x20005a20

0800ba10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b088      	sub	sp, #32
 800ba14:	af02      	add	r7, sp, #8
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba1a:	4b22      	ldr	r3, [pc, #136]	; (800baa4 <prvProcessExpiredTimer+0x94>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	68db      	ldr	r3, [r3, #12]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	3304      	adds	r3, #4
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7fe f87d 	bl	8009b28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba34:	f003 0304 	and.w	r3, r3, #4
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d022      	beq.n	800ba82 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	699a      	ldr	r2, [r3, #24]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	18d1      	adds	r1, r2, r3
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	683a      	ldr	r2, [r7, #0]
 800ba48:	6978      	ldr	r0, [r7, #20]
 800ba4a:	f000 f8d1 	bl	800bbf0 <prvInsertTimerInActiveList>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d01f      	beq.n	800ba94 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba54:	2300      	movs	r3, #0
 800ba56:	9300      	str	r3, [sp, #0]
 800ba58:	2300      	movs	r3, #0
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	2100      	movs	r1, #0
 800ba5e:	6978      	ldr	r0, [r7, #20]
 800ba60:	f7ff ff88 	bl	800b974 <xTimerGenericCommand>
 800ba64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d113      	bne.n	800ba94 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ba6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba70:	f383 8811 	msr	BASEPRI, r3
 800ba74:	f3bf 8f6f 	isb	sy
 800ba78:	f3bf 8f4f 	dsb	sy
 800ba7c:	60fb      	str	r3, [r7, #12]
}
 800ba7e:	bf00      	nop
 800ba80:	e7fe      	b.n	800ba80 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba88:	f023 0301 	bic.w	r3, r3, #1
 800ba8c:	b2da      	uxtb	r2, r3
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	6a1b      	ldr	r3, [r3, #32]
 800ba98:	6978      	ldr	r0, [r7, #20]
 800ba9a:	4798      	blx	r3
}
 800ba9c:	bf00      	nop
 800ba9e:	3718      	adds	r7, #24
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}
 800baa4:	20005a18 	.word	0x20005a18

0800baa8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bab0:	f107 0308 	add.w	r3, r7, #8
 800bab4:	4618      	mov	r0, r3
 800bab6:	f000 f857 	bl	800bb68 <prvGetNextExpireTime>
 800baba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	4619      	mov	r1, r3
 800bac0:	68f8      	ldr	r0, [r7, #12]
 800bac2:	f000 f803 	bl	800bacc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bac6:	f000 f8d5 	bl	800bc74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800baca:	e7f1      	b.n	800bab0 <prvTimerTask+0x8>

0800bacc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b084      	sub	sp, #16
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bad6:	f7ff f915 	bl	800ad04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bada:	f107 0308 	add.w	r3, r7, #8
 800bade:	4618      	mov	r0, r3
 800bae0:	f000 f866 	bl	800bbb0 <prvSampleTimeNow>
 800bae4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d130      	bne.n	800bb4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d10a      	bne.n	800bb08 <prvProcessTimerOrBlockTask+0x3c>
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d806      	bhi.n	800bb08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bafa:	f7ff f911 	bl	800ad20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bafe:	68f9      	ldr	r1, [r7, #12]
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f7ff ff85 	bl	800ba10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bb06:	e024      	b.n	800bb52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d008      	beq.n	800bb20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bb0e:	4b13      	ldr	r3, [pc, #76]	; (800bb5c <prvProcessTimerOrBlockTask+0x90>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d101      	bne.n	800bb1c <prvProcessTimerOrBlockTask+0x50>
 800bb18:	2301      	movs	r3, #1
 800bb1a:	e000      	b.n	800bb1e <prvProcessTimerOrBlockTask+0x52>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bb20:	4b0f      	ldr	r3, [pc, #60]	; (800bb60 <prvProcessTimerOrBlockTask+0x94>)
 800bb22:	6818      	ldr	r0, [r3, #0]
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	1ad3      	subs	r3, r2, r3
 800bb2a:	683a      	ldr	r2, [r7, #0]
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	f7fe fe59 	bl	800a7e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bb32:	f7ff f8f5 	bl	800ad20 <xTaskResumeAll>
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d10a      	bne.n	800bb52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bb3c:	4b09      	ldr	r3, [pc, #36]	; (800bb64 <prvProcessTimerOrBlockTask+0x98>)
 800bb3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb42:	601a      	str	r2, [r3, #0]
 800bb44:	f3bf 8f4f 	dsb	sy
 800bb48:	f3bf 8f6f 	isb	sy
}
 800bb4c:	e001      	b.n	800bb52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bb4e:	f7ff f8e7 	bl	800ad20 <xTaskResumeAll>
}
 800bb52:	bf00      	nop
 800bb54:	3710      	adds	r7, #16
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	20005a1c 	.word	0x20005a1c
 800bb60:	20005a20 	.word	0x20005a20
 800bb64:	e000ed04 	.word	0xe000ed04

0800bb68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b085      	sub	sp, #20
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bb70:	4b0e      	ldr	r3, [pc, #56]	; (800bbac <prvGetNextExpireTime+0x44>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d101      	bne.n	800bb7e <prvGetNextExpireTime+0x16>
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	e000      	b.n	800bb80 <prvGetNextExpireTime+0x18>
 800bb7e:	2200      	movs	r2, #0
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d105      	bne.n	800bb98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb8c:	4b07      	ldr	r3, [pc, #28]	; (800bbac <prvGetNextExpireTime+0x44>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	60fb      	str	r3, [r7, #12]
 800bb96:	e001      	b.n	800bb9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3714      	adds	r7, #20
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop
 800bbac:	20005a18 	.word	0x20005a18

0800bbb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bbb8:	f7ff f950 	bl	800ae5c <xTaskGetTickCount>
 800bbbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bbbe:	4b0b      	ldr	r3, [pc, #44]	; (800bbec <prvSampleTimeNow+0x3c>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	68fa      	ldr	r2, [r7, #12]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d205      	bcs.n	800bbd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bbc8:	f000 f936 	bl	800be38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2201      	movs	r2, #1
 800bbd0:	601a      	str	r2, [r3, #0]
 800bbd2:	e002      	b.n	800bbda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bbda:	4a04      	ldr	r2, [pc, #16]	; (800bbec <prvSampleTimeNow+0x3c>)
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3710      	adds	r7, #16
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	bf00      	nop
 800bbec:	20005a28 	.word	0x20005a28

0800bbf0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b086      	sub	sp, #24
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	607a      	str	r2, [r7, #4]
 800bbfc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	68ba      	ldr	r2, [r7, #8]
 800bc06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	68fa      	ldr	r2, [r7, #12]
 800bc0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bc0e:	68ba      	ldr	r2, [r7, #8]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d812      	bhi.n	800bc3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc16:	687a      	ldr	r2, [r7, #4]
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	1ad2      	subs	r2, r2, r3
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	699b      	ldr	r3, [r3, #24]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d302      	bcc.n	800bc2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bc24:	2301      	movs	r3, #1
 800bc26:	617b      	str	r3, [r7, #20]
 800bc28:	e01b      	b.n	800bc62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bc2a:	4b10      	ldr	r3, [pc, #64]	; (800bc6c <prvInsertTimerInActiveList+0x7c>)
 800bc2c:	681a      	ldr	r2, [r3, #0]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	3304      	adds	r3, #4
 800bc32:	4619      	mov	r1, r3
 800bc34:	4610      	mov	r0, r2
 800bc36:	f7fd ff3e 	bl	8009ab6 <vListInsert>
 800bc3a:	e012      	b.n	800bc62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d206      	bcs.n	800bc52 <prvInsertTimerInActiveList+0x62>
 800bc44:	68ba      	ldr	r2, [r7, #8]
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d302      	bcc.n	800bc52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	617b      	str	r3, [r7, #20]
 800bc50:	e007      	b.n	800bc62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc52:	4b07      	ldr	r3, [pc, #28]	; (800bc70 <prvInsertTimerInActiveList+0x80>)
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	3304      	adds	r3, #4
 800bc5a:	4619      	mov	r1, r3
 800bc5c:	4610      	mov	r0, r2
 800bc5e:	f7fd ff2a 	bl	8009ab6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bc62:	697b      	ldr	r3, [r7, #20]
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3718      	adds	r7, #24
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	20005a1c 	.word	0x20005a1c
 800bc70:	20005a18 	.word	0x20005a18

0800bc74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b08e      	sub	sp, #56	; 0x38
 800bc78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc7a:	e0ca      	b.n	800be12 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	da18      	bge.n	800bcb4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bc82:	1d3b      	adds	r3, r7, #4
 800bc84:	3304      	adds	r3, #4
 800bc86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d10a      	bne.n	800bca4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc92:	f383 8811 	msr	BASEPRI, r3
 800bc96:	f3bf 8f6f 	isb	sy
 800bc9a:	f3bf 8f4f 	dsb	sy
 800bc9e:	61fb      	str	r3, [r7, #28]
}
 800bca0:	bf00      	nop
 800bca2:	e7fe      	b.n	800bca2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcaa:	6850      	ldr	r0, [r2, #4]
 800bcac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcae:	6892      	ldr	r2, [r2, #8]
 800bcb0:	4611      	mov	r1, r2
 800bcb2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	f2c0 80ab 	blt.w	800be12 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bcc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc2:	695b      	ldr	r3, [r3, #20]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d004      	beq.n	800bcd2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bcc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcca:	3304      	adds	r3, #4
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7fd ff2b 	bl	8009b28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bcd2:	463b      	mov	r3, r7
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f7ff ff6b 	bl	800bbb0 <prvSampleTimeNow>
 800bcda:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2b09      	cmp	r3, #9
 800bce0:	f200 8096 	bhi.w	800be10 <prvProcessReceivedCommands+0x19c>
 800bce4:	a201      	add	r2, pc, #4	; (adr r2, 800bcec <prvProcessReceivedCommands+0x78>)
 800bce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcea:	bf00      	nop
 800bcec:	0800bd15 	.word	0x0800bd15
 800bcf0:	0800bd15 	.word	0x0800bd15
 800bcf4:	0800bd15 	.word	0x0800bd15
 800bcf8:	0800bd89 	.word	0x0800bd89
 800bcfc:	0800bd9d 	.word	0x0800bd9d
 800bd00:	0800bde7 	.word	0x0800bde7
 800bd04:	0800bd15 	.word	0x0800bd15
 800bd08:	0800bd15 	.word	0x0800bd15
 800bd0c:	0800bd89 	.word	0x0800bd89
 800bd10:	0800bd9d 	.word	0x0800bd9d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd1a:	f043 0301 	orr.w	r3, r3, #1
 800bd1e:	b2da      	uxtb	r2, r3
 800bd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bd26:	68ba      	ldr	r2, [r7, #8]
 800bd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2a:	699b      	ldr	r3, [r3, #24]
 800bd2c:	18d1      	adds	r1, r2, r3
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd34:	f7ff ff5c 	bl	800bbf0 <prvInsertTimerInActiveList>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d069      	beq.n	800be12 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd40:	6a1b      	ldr	r3, [r3, #32]
 800bd42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd4c:	f003 0304 	and.w	r3, r3, #4
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d05e      	beq.n	800be12 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bd54:	68ba      	ldr	r2, [r7, #8]
 800bd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd58:	699b      	ldr	r3, [r3, #24]
 800bd5a:	441a      	add	r2, r3
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	9300      	str	r3, [sp, #0]
 800bd60:	2300      	movs	r3, #0
 800bd62:	2100      	movs	r1, #0
 800bd64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd66:	f7ff fe05 	bl	800b974 <xTimerGenericCommand>
 800bd6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bd6c:	6a3b      	ldr	r3, [r7, #32]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d14f      	bne.n	800be12 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd76:	f383 8811 	msr	BASEPRI, r3
 800bd7a:	f3bf 8f6f 	isb	sy
 800bd7e:	f3bf 8f4f 	dsb	sy
 800bd82:	61bb      	str	r3, [r7, #24]
}
 800bd84:	bf00      	nop
 800bd86:	e7fe      	b.n	800bd86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd8e:	f023 0301 	bic.w	r3, r3, #1
 800bd92:	b2da      	uxtb	r2, r3
 800bd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bd9a:	e03a      	b.n	800be12 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bda2:	f043 0301 	orr.w	r3, r3, #1
 800bda6:	b2da      	uxtb	r2, r3
 800bda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bdae:	68ba      	ldr	r2, [r7, #8]
 800bdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb6:	699b      	ldr	r3, [r3, #24]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d10a      	bne.n	800bdd2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bdbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc0:	f383 8811 	msr	BASEPRI, r3
 800bdc4:	f3bf 8f6f 	isb	sy
 800bdc8:	f3bf 8f4f 	dsb	sy
 800bdcc:	617b      	str	r3, [r7, #20]
}
 800bdce:	bf00      	nop
 800bdd0:	e7fe      	b.n	800bdd0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bdd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd4:	699a      	ldr	r2, [r3, #24]
 800bdd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd8:	18d1      	adds	r1, r2, r3
 800bdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bde0:	f7ff ff06 	bl	800bbf0 <prvInsertTimerInActiveList>
					break;
 800bde4:	e015      	b.n	800be12 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bde6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdec:	f003 0302 	and.w	r3, r3, #2
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d103      	bne.n	800bdfc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bdf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdf6:	f000 fbdb 	bl	800c5b0 <vPortFree>
 800bdfa:	e00a      	b.n	800be12 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be02:	f023 0301 	bic.w	r3, r3, #1
 800be06:	b2da      	uxtb	r2, r3
 800be08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800be0e:	e000      	b.n	800be12 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800be10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be12:	4b08      	ldr	r3, [pc, #32]	; (800be34 <prvProcessReceivedCommands+0x1c0>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	1d39      	adds	r1, r7, #4
 800be18:	2200      	movs	r2, #0
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7fe f986 	bl	800a12c <xQueueReceive>
 800be20:	4603      	mov	r3, r0
 800be22:	2b00      	cmp	r3, #0
 800be24:	f47f af2a 	bne.w	800bc7c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800be28:	bf00      	nop
 800be2a:	bf00      	nop
 800be2c:	3730      	adds	r7, #48	; 0x30
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	20005a20 	.word	0x20005a20

0800be38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b088      	sub	sp, #32
 800be3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be3e:	e048      	b.n	800bed2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be40:	4b2d      	ldr	r3, [pc, #180]	; (800bef8 <prvSwitchTimerLists+0xc0>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	68db      	ldr	r3, [r3, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be4a:	4b2b      	ldr	r3, [pc, #172]	; (800bef8 <prvSwitchTimerLists+0xc0>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	68db      	ldr	r3, [r3, #12]
 800be50:	68db      	ldr	r3, [r3, #12]
 800be52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	3304      	adds	r3, #4
 800be58:	4618      	mov	r0, r3
 800be5a:	f7fd fe65 	bl	8009b28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	6a1b      	ldr	r3, [r3, #32]
 800be62:	68f8      	ldr	r0, [r7, #12]
 800be64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be6c:	f003 0304 	and.w	r3, r3, #4
 800be70:	2b00      	cmp	r3, #0
 800be72:	d02e      	beq.n	800bed2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	699b      	ldr	r3, [r3, #24]
 800be78:	693a      	ldr	r2, [r7, #16]
 800be7a:	4413      	add	r3, r2
 800be7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800be7e:	68ba      	ldr	r2, [r7, #8]
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	429a      	cmp	r2, r3
 800be84:	d90e      	bls.n	800bea4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	68ba      	ldr	r2, [r7, #8]
 800be8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	68fa      	ldr	r2, [r7, #12]
 800be90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be92:	4b19      	ldr	r3, [pc, #100]	; (800bef8 <prvSwitchTimerLists+0xc0>)
 800be94:	681a      	ldr	r2, [r3, #0]
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	3304      	adds	r3, #4
 800be9a:	4619      	mov	r1, r3
 800be9c:	4610      	mov	r0, r2
 800be9e:	f7fd fe0a 	bl	8009ab6 <vListInsert>
 800bea2:	e016      	b.n	800bed2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bea4:	2300      	movs	r3, #0
 800bea6:	9300      	str	r3, [sp, #0]
 800bea8:	2300      	movs	r3, #0
 800beaa:	693a      	ldr	r2, [r7, #16]
 800beac:	2100      	movs	r1, #0
 800beae:	68f8      	ldr	r0, [r7, #12]
 800beb0:	f7ff fd60 	bl	800b974 <xTimerGenericCommand>
 800beb4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d10a      	bne.n	800bed2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec0:	f383 8811 	msr	BASEPRI, r3
 800bec4:	f3bf 8f6f 	isb	sy
 800bec8:	f3bf 8f4f 	dsb	sy
 800becc:	603b      	str	r3, [r7, #0]
}
 800bece:	bf00      	nop
 800bed0:	e7fe      	b.n	800bed0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bed2:	4b09      	ldr	r3, [pc, #36]	; (800bef8 <prvSwitchTimerLists+0xc0>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d1b1      	bne.n	800be40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bedc:	4b06      	ldr	r3, [pc, #24]	; (800bef8 <prvSwitchTimerLists+0xc0>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bee2:	4b06      	ldr	r3, [pc, #24]	; (800befc <prvSwitchTimerLists+0xc4>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4a04      	ldr	r2, [pc, #16]	; (800bef8 <prvSwitchTimerLists+0xc0>)
 800bee8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800beea:	4a04      	ldr	r2, [pc, #16]	; (800befc <prvSwitchTimerLists+0xc4>)
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	6013      	str	r3, [r2, #0]
}
 800bef0:	bf00      	nop
 800bef2:	3718      	adds	r7, #24
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}
 800bef8:	20005a18 	.word	0x20005a18
 800befc:	20005a1c 	.word	0x20005a1c

0800bf00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b082      	sub	sp, #8
 800bf04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bf06:	f000 f965 	bl	800c1d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bf0a:	4b15      	ldr	r3, [pc, #84]	; (800bf60 <prvCheckForValidListAndQueue+0x60>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d120      	bne.n	800bf54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bf12:	4814      	ldr	r0, [pc, #80]	; (800bf64 <prvCheckForValidListAndQueue+0x64>)
 800bf14:	f7fd fd7e 	bl	8009a14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bf18:	4813      	ldr	r0, [pc, #76]	; (800bf68 <prvCheckForValidListAndQueue+0x68>)
 800bf1a:	f7fd fd7b 	bl	8009a14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bf1e:	4b13      	ldr	r3, [pc, #76]	; (800bf6c <prvCheckForValidListAndQueue+0x6c>)
 800bf20:	4a10      	ldr	r2, [pc, #64]	; (800bf64 <prvCheckForValidListAndQueue+0x64>)
 800bf22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bf24:	4b12      	ldr	r3, [pc, #72]	; (800bf70 <prvCheckForValidListAndQueue+0x70>)
 800bf26:	4a10      	ldr	r2, [pc, #64]	; (800bf68 <prvCheckForValidListAndQueue+0x68>)
 800bf28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	9300      	str	r3, [sp, #0]
 800bf2e:	4b11      	ldr	r3, [pc, #68]	; (800bf74 <prvCheckForValidListAndQueue+0x74>)
 800bf30:	4a11      	ldr	r2, [pc, #68]	; (800bf78 <prvCheckForValidListAndQueue+0x78>)
 800bf32:	2110      	movs	r1, #16
 800bf34:	200a      	movs	r0, #10
 800bf36:	f7fd fe89 	bl	8009c4c <xQueueGenericCreateStatic>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	4a08      	ldr	r2, [pc, #32]	; (800bf60 <prvCheckForValidListAndQueue+0x60>)
 800bf3e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bf40:	4b07      	ldr	r3, [pc, #28]	; (800bf60 <prvCheckForValidListAndQueue+0x60>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d005      	beq.n	800bf54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bf48:	4b05      	ldr	r3, [pc, #20]	; (800bf60 <prvCheckForValidListAndQueue+0x60>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	490b      	ldr	r1, [pc, #44]	; (800bf7c <prvCheckForValidListAndQueue+0x7c>)
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7fe fc1e 	bl	800a790 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf54:	f000 f96e 	bl	800c234 <vPortExitCritical>
}
 800bf58:	bf00      	nop
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	20005a20 	.word	0x20005a20
 800bf64:	200059f0 	.word	0x200059f0
 800bf68:	20005a04 	.word	0x20005a04
 800bf6c:	20005a18 	.word	0x20005a18
 800bf70:	20005a1c 	.word	0x20005a1c
 800bf74:	20005acc 	.word	0x20005acc
 800bf78:	20005a2c 	.word	0x20005a2c
 800bf7c:	080196a8 	.word	0x080196a8

0800bf80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bf80:	b480      	push	{r7}
 800bf82:	b085      	sub	sp, #20
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	60f8      	str	r0, [r7, #12]
 800bf88:	60b9      	str	r1, [r7, #8]
 800bf8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	3b04      	subs	r3, #4
 800bf90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bf98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	3b04      	subs	r3, #4
 800bf9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	f023 0201 	bic.w	r2, r3, #1
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	3b04      	subs	r3, #4
 800bfae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bfb0:	4a0c      	ldr	r2, [pc, #48]	; (800bfe4 <pxPortInitialiseStack+0x64>)
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	3b14      	subs	r3, #20
 800bfba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bfbc:	687a      	ldr	r2, [r7, #4]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	3b04      	subs	r3, #4
 800bfc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	f06f 0202 	mvn.w	r2, #2
 800bfce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	3b20      	subs	r3, #32
 800bfd4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3714      	adds	r7, #20
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr
 800bfe4:	0800bfe9 	.word	0x0800bfe9

0800bfe8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b085      	sub	sp, #20
 800bfec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bfee:	2300      	movs	r3, #0
 800bff0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bff2:	4b12      	ldr	r3, [pc, #72]	; (800c03c <prvTaskExitError+0x54>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bffa:	d00a      	beq.n	800c012 <prvTaskExitError+0x2a>
	__asm volatile
 800bffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c000:	f383 8811 	msr	BASEPRI, r3
 800c004:	f3bf 8f6f 	isb	sy
 800c008:	f3bf 8f4f 	dsb	sy
 800c00c:	60fb      	str	r3, [r7, #12]
}
 800c00e:	bf00      	nop
 800c010:	e7fe      	b.n	800c010 <prvTaskExitError+0x28>
	__asm volatile
 800c012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c016:	f383 8811 	msr	BASEPRI, r3
 800c01a:	f3bf 8f6f 	isb	sy
 800c01e:	f3bf 8f4f 	dsb	sy
 800c022:	60bb      	str	r3, [r7, #8]
}
 800c024:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c026:	bf00      	nop
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d0fc      	beq.n	800c028 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c02e:	bf00      	nop
 800c030:	bf00      	nop
 800c032:	3714      	adds	r7, #20
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr
 800c03c:	2000001c 	.word	0x2000001c

0800c040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c040:	4b07      	ldr	r3, [pc, #28]	; (800c060 <pxCurrentTCBConst2>)
 800c042:	6819      	ldr	r1, [r3, #0]
 800c044:	6808      	ldr	r0, [r1, #0]
 800c046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c04a:	f380 8809 	msr	PSP, r0
 800c04e:	f3bf 8f6f 	isb	sy
 800c052:	f04f 0000 	mov.w	r0, #0
 800c056:	f380 8811 	msr	BASEPRI, r0
 800c05a:	4770      	bx	lr
 800c05c:	f3af 8000 	nop.w

0800c060 <pxCurrentTCBConst2>:
 800c060:	200054f0 	.word	0x200054f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c064:	bf00      	nop
 800c066:	bf00      	nop

0800c068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c068:	4808      	ldr	r0, [pc, #32]	; (800c08c <prvPortStartFirstTask+0x24>)
 800c06a:	6800      	ldr	r0, [r0, #0]
 800c06c:	6800      	ldr	r0, [r0, #0]
 800c06e:	f380 8808 	msr	MSP, r0
 800c072:	f04f 0000 	mov.w	r0, #0
 800c076:	f380 8814 	msr	CONTROL, r0
 800c07a:	b662      	cpsie	i
 800c07c:	b661      	cpsie	f
 800c07e:	f3bf 8f4f 	dsb	sy
 800c082:	f3bf 8f6f 	isb	sy
 800c086:	df00      	svc	0
 800c088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c08a:	bf00      	nop
 800c08c:	e000ed08 	.word	0xe000ed08

0800c090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b086      	sub	sp, #24
 800c094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c096:	4b46      	ldr	r3, [pc, #280]	; (800c1b0 <xPortStartScheduler+0x120>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4a46      	ldr	r2, [pc, #280]	; (800c1b4 <xPortStartScheduler+0x124>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d10a      	bne.n	800c0b6 <xPortStartScheduler+0x26>
	__asm volatile
 800c0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a4:	f383 8811 	msr	BASEPRI, r3
 800c0a8:	f3bf 8f6f 	isb	sy
 800c0ac:	f3bf 8f4f 	dsb	sy
 800c0b0:	613b      	str	r3, [r7, #16]
}
 800c0b2:	bf00      	nop
 800c0b4:	e7fe      	b.n	800c0b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c0b6:	4b3e      	ldr	r3, [pc, #248]	; (800c1b0 <xPortStartScheduler+0x120>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	4a3f      	ldr	r2, [pc, #252]	; (800c1b8 <xPortStartScheduler+0x128>)
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d10a      	bne.n	800c0d6 <xPortStartScheduler+0x46>
	__asm volatile
 800c0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c4:	f383 8811 	msr	BASEPRI, r3
 800c0c8:	f3bf 8f6f 	isb	sy
 800c0cc:	f3bf 8f4f 	dsb	sy
 800c0d0:	60fb      	str	r3, [r7, #12]
}
 800c0d2:	bf00      	nop
 800c0d4:	e7fe      	b.n	800c0d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c0d6:	4b39      	ldr	r3, [pc, #228]	; (800c1bc <xPortStartScheduler+0x12c>)
 800c0d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	781b      	ldrb	r3, [r3, #0]
 800c0de:	b2db      	uxtb	r3, r3
 800c0e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	22ff      	movs	r2, #255	; 0xff
 800c0e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	b2db      	uxtb	r3, r3
 800c0ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c0f0:	78fb      	ldrb	r3, [r7, #3]
 800c0f2:	b2db      	uxtb	r3, r3
 800c0f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c0f8:	b2da      	uxtb	r2, r3
 800c0fa:	4b31      	ldr	r3, [pc, #196]	; (800c1c0 <xPortStartScheduler+0x130>)
 800c0fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c0fe:	4b31      	ldr	r3, [pc, #196]	; (800c1c4 <xPortStartScheduler+0x134>)
 800c100:	2207      	movs	r2, #7
 800c102:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c104:	e009      	b.n	800c11a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c106:	4b2f      	ldr	r3, [pc, #188]	; (800c1c4 <xPortStartScheduler+0x134>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	3b01      	subs	r3, #1
 800c10c:	4a2d      	ldr	r2, [pc, #180]	; (800c1c4 <xPortStartScheduler+0x134>)
 800c10e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c110:	78fb      	ldrb	r3, [r7, #3]
 800c112:	b2db      	uxtb	r3, r3
 800c114:	005b      	lsls	r3, r3, #1
 800c116:	b2db      	uxtb	r3, r3
 800c118:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c11a:	78fb      	ldrb	r3, [r7, #3]
 800c11c:	b2db      	uxtb	r3, r3
 800c11e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c122:	2b80      	cmp	r3, #128	; 0x80
 800c124:	d0ef      	beq.n	800c106 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c126:	4b27      	ldr	r3, [pc, #156]	; (800c1c4 <xPortStartScheduler+0x134>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f1c3 0307 	rsb	r3, r3, #7
 800c12e:	2b04      	cmp	r3, #4
 800c130:	d00a      	beq.n	800c148 <xPortStartScheduler+0xb8>
	__asm volatile
 800c132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c136:	f383 8811 	msr	BASEPRI, r3
 800c13a:	f3bf 8f6f 	isb	sy
 800c13e:	f3bf 8f4f 	dsb	sy
 800c142:	60bb      	str	r3, [r7, #8]
}
 800c144:	bf00      	nop
 800c146:	e7fe      	b.n	800c146 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c148:	4b1e      	ldr	r3, [pc, #120]	; (800c1c4 <xPortStartScheduler+0x134>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	021b      	lsls	r3, r3, #8
 800c14e:	4a1d      	ldr	r2, [pc, #116]	; (800c1c4 <xPortStartScheduler+0x134>)
 800c150:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c152:	4b1c      	ldr	r3, [pc, #112]	; (800c1c4 <xPortStartScheduler+0x134>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c15a:	4a1a      	ldr	r2, [pc, #104]	; (800c1c4 <xPortStartScheduler+0x134>)
 800c15c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	b2da      	uxtb	r2, r3
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c166:	4b18      	ldr	r3, [pc, #96]	; (800c1c8 <xPortStartScheduler+0x138>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	4a17      	ldr	r2, [pc, #92]	; (800c1c8 <xPortStartScheduler+0x138>)
 800c16c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c170:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c172:	4b15      	ldr	r3, [pc, #84]	; (800c1c8 <xPortStartScheduler+0x138>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	4a14      	ldr	r2, [pc, #80]	; (800c1c8 <xPortStartScheduler+0x138>)
 800c178:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c17c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c17e:	f000 f8dd 	bl	800c33c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c182:	4b12      	ldr	r3, [pc, #72]	; (800c1cc <xPortStartScheduler+0x13c>)
 800c184:	2200      	movs	r2, #0
 800c186:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c188:	f000 f8fc 	bl	800c384 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c18c:	4b10      	ldr	r3, [pc, #64]	; (800c1d0 <xPortStartScheduler+0x140>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4a0f      	ldr	r2, [pc, #60]	; (800c1d0 <xPortStartScheduler+0x140>)
 800c192:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c196:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c198:	f7ff ff66 	bl	800c068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c19c:	f7fe ff28 	bl	800aff0 <vTaskSwitchContext>
	prvTaskExitError();
 800c1a0:	f7ff ff22 	bl	800bfe8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c1a4:	2300      	movs	r3, #0
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3718      	adds	r7, #24
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	e000ed00 	.word	0xe000ed00
 800c1b4:	410fc271 	.word	0x410fc271
 800c1b8:	410fc270 	.word	0x410fc270
 800c1bc:	e000e400 	.word	0xe000e400
 800c1c0:	20005b1c 	.word	0x20005b1c
 800c1c4:	20005b20 	.word	0x20005b20
 800c1c8:	e000ed20 	.word	0xe000ed20
 800c1cc:	2000001c 	.word	0x2000001c
 800c1d0:	e000ef34 	.word	0xe000ef34

0800c1d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
	__asm volatile
 800c1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1de:	f383 8811 	msr	BASEPRI, r3
 800c1e2:	f3bf 8f6f 	isb	sy
 800c1e6:	f3bf 8f4f 	dsb	sy
 800c1ea:	607b      	str	r3, [r7, #4]
}
 800c1ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c1ee:	4b0f      	ldr	r3, [pc, #60]	; (800c22c <vPortEnterCritical+0x58>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	4a0d      	ldr	r2, [pc, #52]	; (800c22c <vPortEnterCritical+0x58>)
 800c1f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c1f8:	4b0c      	ldr	r3, [pc, #48]	; (800c22c <vPortEnterCritical+0x58>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d10f      	bne.n	800c220 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c200:	4b0b      	ldr	r3, [pc, #44]	; (800c230 <vPortEnterCritical+0x5c>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	b2db      	uxtb	r3, r3
 800c206:	2b00      	cmp	r3, #0
 800c208:	d00a      	beq.n	800c220 <vPortEnterCritical+0x4c>
	__asm volatile
 800c20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c20e:	f383 8811 	msr	BASEPRI, r3
 800c212:	f3bf 8f6f 	isb	sy
 800c216:	f3bf 8f4f 	dsb	sy
 800c21a:	603b      	str	r3, [r7, #0]
}
 800c21c:	bf00      	nop
 800c21e:	e7fe      	b.n	800c21e <vPortEnterCritical+0x4a>
	}
}
 800c220:	bf00      	nop
 800c222:	370c      	adds	r7, #12
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr
 800c22c:	2000001c 	.word	0x2000001c
 800c230:	e000ed04 	.word	0xe000ed04

0800c234 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c23a:	4b12      	ldr	r3, [pc, #72]	; (800c284 <vPortExitCritical+0x50>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d10a      	bne.n	800c258 <vPortExitCritical+0x24>
	__asm volatile
 800c242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c246:	f383 8811 	msr	BASEPRI, r3
 800c24a:	f3bf 8f6f 	isb	sy
 800c24e:	f3bf 8f4f 	dsb	sy
 800c252:	607b      	str	r3, [r7, #4]
}
 800c254:	bf00      	nop
 800c256:	e7fe      	b.n	800c256 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c258:	4b0a      	ldr	r3, [pc, #40]	; (800c284 <vPortExitCritical+0x50>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	3b01      	subs	r3, #1
 800c25e:	4a09      	ldr	r2, [pc, #36]	; (800c284 <vPortExitCritical+0x50>)
 800c260:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c262:	4b08      	ldr	r3, [pc, #32]	; (800c284 <vPortExitCritical+0x50>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d105      	bne.n	800c276 <vPortExitCritical+0x42>
 800c26a:	2300      	movs	r3, #0
 800c26c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	f383 8811 	msr	BASEPRI, r3
}
 800c274:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c276:	bf00      	nop
 800c278:	370c      	adds	r7, #12
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr
 800c282:	bf00      	nop
 800c284:	2000001c 	.word	0x2000001c
	...

0800c290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c290:	f3ef 8009 	mrs	r0, PSP
 800c294:	f3bf 8f6f 	isb	sy
 800c298:	4b15      	ldr	r3, [pc, #84]	; (800c2f0 <pxCurrentTCBConst>)
 800c29a:	681a      	ldr	r2, [r3, #0]
 800c29c:	f01e 0f10 	tst.w	lr, #16
 800c2a0:	bf08      	it	eq
 800c2a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c2a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2aa:	6010      	str	r0, [r2, #0]
 800c2ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c2b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c2b4:	f380 8811 	msr	BASEPRI, r0
 800c2b8:	f3bf 8f4f 	dsb	sy
 800c2bc:	f3bf 8f6f 	isb	sy
 800c2c0:	f7fe fe96 	bl	800aff0 <vTaskSwitchContext>
 800c2c4:	f04f 0000 	mov.w	r0, #0
 800c2c8:	f380 8811 	msr	BASEPRI, r0
 800c2cc:	bc09      	pop	{r0, r3}
 800c2ce:	6819      	ldr	r1, [r3, #0]
 800c2d0:	6808      	ldr	r0, [r1, #0]
 800c2d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2d6:	f01e 0f10 	tst.w	lr, #16
 800c2da:	bf08      	it	eq
 800c2dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c2e0:	f380 8809 	msr	PSP, r0
 800c2e4:	f3bf 8f6f 	isb	sy
 800c2e8:	4770      	bx	lr
 800c2ea:	bf00      	nop
 800c2ec:	f3af 8000 	nop.w

0800c2f0 <pxCurrentTCBConst>:
 800c2f0:	200054f0 	.word	0x200054f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c2f4:	bf00      	nop
 800c2f6:	bf00      	nop

0800c2f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c302:	f383 8811 	msr	BASEPRI, r3
 800c306:	f3bf 8f6f 	isb	sy
 800c30a:	f3bf 8f4f 	dsb	sy
 800c30e:	607b      	str	r3, [r7, #4]
}
 800c310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c312:	f7fe fdb3 	bl	800ae7c <xTaskIncrementTick>
 800c316:	4603      	mov	r3, r0
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d003      	beq.n	800c324 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c31c:	4b06      	ldr	r3, [pc, #24]	; (800c338 <xPortSysTickHandler+0x40>)
 800c31e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c322:	601a      	str	r2, [r3, #0]
 800c324:	2300      	movs	r3, #0
 800c326:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	f383 8811 	msr	BASEPRI, r3
}
 800c32e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c330:	bf00      	nop
 800c332:	3708      	adds	r7, #8
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}
 800c338:	e000ed04 	.word	0xe000ed04

0800c33c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c33c:	b480      	push	{r7}
 800c33e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c340:	4b0b      	ldr	r3, [pc, #44]	; (800c370 <vPortSetupTimerInterrupt+0x34>)
 800c342:	2200      	movs	r2, #0
 800c344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c346:	4b0b      	ldr	r3, [pc, #44]	; (800c374 <vPortSetupTimerInterrupt+0x38>)
 800c348:	2200      	movs	r2, #0
 800c34a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c34c:	4b0a      	ldr	r3, [pc, #40]	; (800c378 <vPortSetupTimerInterrupt+0x3c>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a0a      	ldr	r2, [pc, #40]	; (800c37c <vPortSetupTimerInterrupt+0x40>)
 800c352:	fba2 2303 	umull	r2, r3, r2, r3
 800c356:	099b      	lsrs	r3, r3, #6
 800c358:	4a09      	ldr	r2, [pc, #36]	; (800c380 <vPortSetupTimerInterrupt+0x44>)
 800c35a:	3b01      	subs	r3, #1
 800c35c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c35e:	4b04      	ldr	r3, [pc, #16]	; (800c370 <vPortSetupTimerInterrupt+0x34>)
 800c360:	2207      	movs	r2, #7
 800c362:	601a      	str	r2, [r3, #0]
}
 800c364:	bf00      	nop
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop
 800c370:	e000e010 	.word	0xe000e010
 800c374:	e000e018 	.word	0xe000e018
 800c378:	20000010 	.word	0x20000010
 800c37c:	10624dd3 	.word	0x10624dd3
 800c380:	e000e014 	.word	0xe000e014

0800c384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c384:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c394 <vPortEnableVFP+0x10>
 800c388:	6801      	ldr	r1, [r0, #0]
 800c38a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c38e:	6001      	str	r1, [r0, #0]
 800c390:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c392:	bf00      	nop
 800c394:	e000ed88 	.word	0xe000ed88

0800c398 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c398:	b480      	push	{r7}
 800c39a:	b085      	sub	sp, #20
 800c39c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c39e:	f3ef 8305 	mrs	r3, IPSR
 800c3a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2b0f      	cmp	r3, #15
 800c3a8:	d914      	bls.n	800c3d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c3aa:	4a17      	ldr	r2, [pc, #92]	; (800c408 <vPortValidateInterruptPriority+0x70>)
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	4413      	add	r3, r2
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c3b4:	4b15      	ldr	r3, [pc, #84]	; (800c40c <vPortValidateInterruptPriority+0x74>)
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	7afa      	ldrb	r2, [r7, #11]
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d20a      	bcs.n	800c3d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c2:	f383 8811 	msr	BASEPRI, r3
 800c3c6:	f3bf 8f6f 	isb	sy
 800c3ca:	f3bf 8f4f 	dsb	sy
 800c3ce:	607b      	str	r3, [r7, #4]
}
 800c3d0:	bf00      	nop
 800c3d2:	e7fe      	b.n	800c3d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c3d4:	4b0e      	ldr	r3, [pc, #56]	; (800c410 <vPortValidateInterruptPriority+0x78>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c3dc:	4b0d      	ldr	r3, [pc, #52]	; (800c414 <vPortValidateInterruptPriority+0x7c>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d90a      	bls.n	800c3fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e8:	f383 8811 	msr	BASEPRI, r3
 800c3ec:	f3bf 8f6f 	isb	sy
 800c3f0:	f3bf 8f4f 	dsb	sy
 800c3f4:	603b      	str	r3, [r7, #0]
}
 800c3f6:	bf00      	nop
 800c3f8:	e7fe      	b.n	800c3f8 <vPortValidateInterruptPriority+0x60>
	}
 800c3fa:	bf00      	nop
 800c3fc:	3714      	adds	r7, #20
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop
 800c408:	e000e3f0 	.word	0xe000e3f0
 800c40c:	20005b1c 	.word	0x20005b1c
 800c410:	e000ed0c 	.word	0xe000ed0c
 800c414:	20005b20 	.word	0x20005b20

0800c418 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b08a      	sub	sp, #40	; 0x28
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c420:	2300      	movs	r3, #0
 800c422:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c424:	f7fe fc6e 	bl	800ad04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c428:	4b5b      	ldr	r3, [pc, #364]	; (800c598 <pvPortMalloc+0x180>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d101      	bne.n	800c434 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c430:	f000 f920 	bl	800c674 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c434:	4b59      	ldr	r3, [pc, #356]	; (800c59c <pvPortMalloc+0x184>)
 800c436:	681a      	ldr	r2, [r3, #0]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	4013      	ands	r3, r2
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	f040 8093 	bne.w	800c568 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d01d      	beq.n	800c484 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c448:	2208      	movs	r2, #8
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	4413      	add	r3, r2
 800c44e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f003 0307 	and.w	r3, r3, #7
 800c456:	2b00      	cmp	r3, #0
 800c458:	d014      	beq.n	800c484 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f023 0307 	bic.w	r3, r3, #7
 800c460:	3308      	adds	r3, #8
 800c462:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f003 0307 	and.w	r3, r3, #7
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d00a      	beq.n	800c484 <pvPortMalloc+0x6c>
	__asm volatile
 800c46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c472:	f383 8811 	msr	BASEPRI, r3
 800c476:	f3bf 8f6f 	isb	sy
 800c47a:	f3bf 8f4f 	dsb	sy
 800c47e:	617b      	str	r3, [r7, #20]
}
 800c480:	bf00      	nop
 800c482:	e7fe      	b.n	800c482 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d06e      	beq.n	800c568 <pvPortMalloc+0x150>
 800c48a:	4b45      	ldr	r3, [pc, #276]	; (800c5a0 <pvPortMalloc+0x188>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	687a      	ldr	r2, [r7, #4]
 800c490:	429a      	cmp	r2, r3
 800c492:	d869      	bhi.n	800c568 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c494:	4b43      	ldr	r3, [pc, #268]	; (800c5a4 <pvPortMalloc+0x18c>)
 800c496:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c498:	4b42      	ldr	r3, [pc, #264]	; (800c5a4 <pvPortMalloc+0x18c>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c49e:	e004      	b.n	800c4aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	687a      	ldr	r2, [r7, #4]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d903      	bls.n	800c4bc <pvPortMalloc+0xa4>
 800c4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d1f1      	bne.n	800c4a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c4bc:	4b36      	ldr	r3, [pc, #216]	; (800c598 <pvPortMalloc+0x180>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d050      	beq.n	800c568 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c4c6:	6a3b      	ldr	r3, [r7, #32]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	2208      	movs	r2, #8
 800c4cc:	4413      	add	r3, r2
 800c4ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d2:	681a      	ldr	r2, [r3, #0]
 800c4d4:	6a3b      	ldr	r3, [r7, #32]
 800c4d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4da:	685a      	ldr	r2, [r3, #4]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	1ad2      	subs	r2, r2, r3
 800c4e0:	2308      	movs	r3, #8
 800c4e2:	005b      	lsls	r3, r3, #1
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d91f      	bls.n	800c528 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c4e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	4413      	add	r3, r2
 800c4ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4f0:	69bb      	ldr	r3, [r7, #24]
 800c4f2:	f003 0307 	and.w	r3, r3, #7
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d00a      	beq.n	800c510 <pvPortMalloc+0xf8>
	__asm volatile
 800c4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4fe:	f383 8811 	msr	BASEPRI, r3
 800c502:	f3bf 8f6f 	isb	sy
 800c506:	f3bf 8f4f 	dsb	sy
 800c50a:	613b      	str	r3, [r7, #16]
}
 800c50c:	bf00      	nop
 800c50e:	e7fe      	b.n	800c50e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c512:	685a      	ldr	r2, [r3, #4]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	1ad2      	subs	r2, r2, r3
 800c518:	69bb      	ldr	r3, [r7, #24]
 800c51a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51e:	687a      	ldr	r2, [r7, #4]
 800c520:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c522:	69b8      	ldr	r0, [r7, #24]
 800c524:	f000 f908 	bl	800c738 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c528:	4b1d      	ldr	r3, [pc, #116]	; (800c5a0 <pvPortMalloc+0x188>)
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	1ad3      	subs	r3, r2, r3
 800c532:	4a1b      	ldr	r2, [pc, #108]	; (800c5a0 <pvPortMalloc+0x188>)
 800c534:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c536:	4b1a      	ldr	r3, [pc, #104]	; (800c5a0 <pvPortMalloc+0x188>)
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	4b1b      	ldr	r3, [pc, #108]	; (800c5a8 <pvPortMalloc+0x190>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	429a      	cmp	r2, r3
 800c540:	d203      	bcs.n	800c54a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c542:	4b17      	ldr	r3, [pc, #92]	; (800c5a0 <pvPortMalloc+0x188>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	4a18      	ldr	r2, [pc, #96]	; (800c5a8 <pvPortMalloc+0x190>)
 800c548:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c54c:	685a      	ldr	r2, [r3, #4]
 800c54e:	4b13      	ldr	r3, [pc, #76]	; (800c59c <pvPortMalloc+0x184>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	431a      	orrs	r2, r3
 800c554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c556:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55a:	2200      	movs	r2, #0
 800c55c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c55e:	4b13      	ldr	r3, [pc, #76]	; (800c5ac <pvPortMalloc+0x194>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	3301      	adds	r3, #1
 800c564:	4a11      	ldr	r2, [pc, #68]	; (800c5ac <pvPortMalloc+0x194>)
 800c566:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c568:	f7fe fbda 	bl	800ad20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c56c:	69fb      	ldr	r3, [r7, #28]
 800c56e:	f003 0307 	and.w	r3, r3, #7
 800c572:	2b00      	cmp	r3, #0
 800c574:	d00a      	beq.n	800c58c <pvPortMalloc+0x174>
	__asm volatile
 800c576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c57a:	f383 8811 	msr	BASEPRI, r3
 800c57e:	f3bf 8f6f 	isb	sy
 800c582:	f3bf 8f4f 	dsb	sy
 800c586:	60fb      	str	r3, [r7, #12]
}
 800c588:	bf00      	nop
 800c58a:	e7fe      	b.n	800c58a <pvPortMalloc+0x172>
	return pvReturn;
 800c58c:	69fb      	ldr	r3, [r7, #28]
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3728      	adds	r7, #40	; 0x28
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop
 800c598:	20009b2c 	.word	0x20009b2c
 800c59c:	20009b40 	.word	0x20009b40
 800c5a0:	20009b30 	.word	0x20009b30
 800c5a4:	20009b24 	.word	0x20009b24
 800c5a8:	20009b34 	.word	0x20009b34
 800c5ac:	20009b38 	.word	0x20009b38

0800c5b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b086      	sub	sp, #24
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d04d      	beq.n	800c65e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c5c2:	2308      	movs	r3, #8
 800c5c4:	425b      	negs	r3, r3
 800c5c6:	697a      	ldr	r2, [r7, #20]
 800c5c8:	4413      	add	r3, r2
 800c5ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	685a      	ldr	r2, [r3, #4]
 800c5d4:	4b24      	ldr	r3, [pc, #144]	; (800c668 <vPortFree+0xb8>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4013      	ands	r3, r2
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d10a      	bne.n	800c5f4 <vPortFree+0x44>
	__asm volatile
 800c5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e2:	f383 8811 	msr	BASEPRI, r3
 800c5e6:	f3bf 8f6f 	isb	sy
 800c5ea:	f3bf 8f4f 	dsb	sy
 800c5ee:	60fb      	str	r3, [r7, #12]
}
 800c5f0:	bf00      	nop
 800c5f2:	e7fe      	b.n	800c5f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d00a      	beq.n	800c612 <vPortFree+0x62>
	__asm volatile
 800c5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c600:	f383 8811 	msr	BASEPRI, r3
 800c604:	f3bf 8f6f 	isb	sy
 800c608:	f3bf 8f4f 	dsb	sy
 800c60c:	60bb      	str	r3, [r7, #8]
}
 800c60e:	bf00      	nop
 800c610:	e7fe      	b.n	800c610 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	685a      	ldr	r2, [r3, #4]
 800c616:	4b14      	ldr	r3, [pc, #80]	; (800c668 <vPortFree+0xb8>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	4013      	ands	r3, r2
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d01e      	beq.n	800c65e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d11a      	bne.n	800c65e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	685a      	ldr	r2, [r3, #4]
 800c62c:	4b0e      	ldr	r3, [pc, #56]	; (800c668 <vPortFree+0xb8>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	43db      	mvns	r3, r3
 800c632:	401a      	ands	r2, r3
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c638:	f7fe fb64 	bl	800ad04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	685a      	ldr	r2, [r3, #4]
 800c640:	4b0a      	ldr	r3, [pc, #40]	; (800c66c <vPortFree+0xbc>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4413      	add	r3, r2
 800c646:	4a09      	ldr	r2, [pc, #36]	; (800c66c <vPortFree+0xbc>)
 800c648:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c64a:	6938      	ldr	r0, [r7, #16]
 800c64c:	f000 f874 	bl	800c738 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c650:	4b07      	ldr	r3, [pc, #28]	; (800c670 <vPortFree+0xc0>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	3301      	adds	r3, #1
 800c656:	4a06      	ldr	r2, [pc, #24]	; (800c670 <vPortFree+0xc0>)
 800c658:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c65a:	f7fe fb61 	bl	800ad20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c65e:	bf00      	nop
 800c660:	3718      	adds	r7, #24
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	20009b40 	.word	0x20009b40
 800c66c:	20009b30 	.word	0x20009b30
 800c670:	20009b3c 	.word	0x20009b3c

0800c674 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c674:	b480      	push	{r7}
 800c676:	b085      	sub	sp, #20
 800c678:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c67a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c67e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c680:	4b27      	ldr	r3, [pc, #156]	; (800c720 <prvHeapInit+0xac>)
 800c682:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f003 0307 	and.w	r3, r3, #7
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d00c      	beq.n	800c6a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	3307      	adds	r3, #7
 800c692:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	f023 0307 	bic.w	r3, r3, #7
 800c69a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c69c:	68ba      	ldr	r2, [r7, #8]
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	1ad3      	subs	r3, r2, r3
 800c6a2:	4a1f      	ldr	r2, [pc, #124]	; (800c720 <prvHeapInit+0xac>)
 800c6a4:	4413      	add	r3, r2
 800c6a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c6ac:	4a1d      	ldr	r2, [pc, #116]	; (800c724 <prvHeapInit+0xb0>)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c6b2:	4b1c      	ldr	r3, [pc, #112]	; (800c724 <prvHeapInit+0xb0>)
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	68ba      	ldr	r2, [r7, #8]
 800c6bc:	4413      	add	r3, r2
 800c6be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c6c0:	2208      	movs	r2, #8
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	1a9b      	subs	r3, r3, r2
 800c6c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	f023 0307 	bic.w	r3, r3, #7
 800c6ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	4a15      	ldr	r2, [pc, #84]	; (800c728 <prvHeapInit+0xb4>)
 800c6d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c6d6:	4b14      	ldr	r3, [pc, #80]	; (800c728 <prvHeapInit+0xb4>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c6de:	4b12      	ldr	r3, [pc, #72]	; (800c728 <prvHeapInit+0xb4>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	68fa      	ldr	r2, [r7, #12]
 800c6ee:	1ad2      	subs	r2, r2, r3
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c6f4:	4b0c      	ldr	r3, [pc, #48]	; (800c728 <prvHeapInit+0xb4>)
 800c6f6:	681a      	ldr	r2, [r3, #0]
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	4a0a      	ldr	r2, [pc, #40]	; (800c72c <prvHeapInit+0xb8>)
 800c702:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	4a09      	ldr	r2, [pc, #36]	; (800c730 <prvHeapInit+0xbc>)
 800c70a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c70c:	4b09      	ldr	r3, [pc, #36]	; (800c734 <prvHeapInit+0xc0>)
 800c70e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c712:	601a      	str	r2, [r3, #0]
}
 800c714:	bf00      	nop
 800c716:	3714      	adds	r7, #20
 800c718:	46bd      	mov	sp, r7
 800c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71e:	4770      	bx	lr
 800c720:	20005b24 	.word	0x20005b24
 800c724:	20009b24 	.word	0x20009b24
 800c728:	20009b2c 	.word	0x20009b2c
 800c72c:	20009b34 	.word	0x20009b34
 800c730:	20009b30 	.word	0x20009b30
 800c734:	20009b40 	.word	0x20009b40

0800c738 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c738:	b480      	push	{r7}
 800c73a:	b085      	sub	sp, #20
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c740:	4b28      	ldr	r3, [pc, #160]	; (800c7e4 <prvInsertBlockIntoFreeList+0xac>)
 800c742:	60fb      	str	r3, [r7, #12]
 800c744:	e002      	b.n	800c74c <prvInsertBlockIntoFreeList+0x14>
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	60fb      	str	r3, [r7, #12]
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	429a      	cmp	r2, r3
 800c754:	d8f7      	bhi.n	800c746 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	685b      	ldr	r3, [r3, #4]
 800c75e:	68ba      	ldr	r2, [r7, #8]
 800c760:	4413      	add	r3, r2
 800c762:	687a      	ldr	r2, [r7, #4]
 800c764:	429a      	cmp	r2, r3
 800c766:	d108      	bne.n	800c77a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	685a      	ldr	r2, [r3, #4]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	441a      	add	r2, r3
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	685b      	ldr	r3, [r3, #4]
 800c782:	68ba      	ldr	r2, [r7, #8]
 800c784:	441a      	add	r2, r3
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	429a      	cmp	r2, r3
 800c78c:	d118      	bne.n	800c7c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681a      	ldr	r2, [r3, #0]
 800c792:	4b15      	ldr	r3, [pc, #84]	; (800c7e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	429a      	cmp	r2, r3
 800c798:	d00d      	beq.n	800c7b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	685a      	ldr	r2, [r3, #4]
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	441a      	add	r2, r3
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	601a      	str	r2, [r3, #0]
 800c7b4:	e008      	b.n	800c7c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c7b6:	4b0c      	ldr	r3, [pc, #48]	; (800c7e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c7b8:	681a      	ldr	r2, [r3, #0]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	601a      	str	r2, [r3, #0]
 800c7be:	e003      	b.n	800c7c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c7c8:	68fa      	ldr	r2, [r7, #12]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d002      	beq.n	800c7d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	687a      	ldr	r2, [r7, #4]
 800c7d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7d6:	bf00      	nop
 800c7d8:	3714      	adds	r7, #20
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e0:	4770      	bx	lr
 800c7e2:	bf00      	nop
 800c7e4:	20009b24 	.word	0x20009b24
 800c7e8:	20009b2c 	.word	0x20009b2c

0800c7ec <rcl_node_get_default_options>:
 800c7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7ee:	b087      	sub	sp, #28
 800c7f0:	4607      	mov	r7, r0
 800c7f2:	466d      	mov	r5, sp
 800c7f4:	4668      	mov	r0, sp
 800c7f6:	f000 ff5b 	bl	800d6b0 <rcutils_get_default_allocator>
 800c7fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c7fc:	4c08      	ldr	r4, [pc, #32]	; (800c820 <rcl_node_get_default_options+0x34>)
 800c7fe:	f8d5 c000 	ldr.w	ip, [r5]
 800c802:	1d26      	adds	r6, r4, #4
 800c804:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c808:	463d      	mov	r5, r7
 800c80a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c80c:	f8c6 c000 	str.w	ip, [r6]
 800c810:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c814:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800c818:	4638      	mov	r0, r7
 800c81a:	b007      	add	sp, #28
 800c81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c81e:	bf00      	nop
 800c820:	20000020 	.word	0x20000020

0800c824 <rcl_node_options_copy>:
 800c824:	b1c8      	cbz	r0, 800c85a <rcl_node_options_copy+0x36>
 800c826:	b4f0      	push	{r4, r5, r6, r7}
 800c828:	460f      	mov	r7, r1
 800c82a:	b199      	cbz	r1, 800c854 <rcl_node_options_copy+0x30>
 800c82c:	4288      	cmp	r0, r1
 800c82e:	4606      	mov	r6, r0
 800c830:	d010      	beq.n	800c854 <rcl_node_options_copy+0x30>
 800c832:	4605      	mov	r5, r0
 800c834:	460c      	mov	r4, r1
 800c836:	f855 3b04 	ldr.w	r3, [r5], #4
 800c83a:	f844 3b04 	str.w	r3, [r4], #4
 800c83e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c842:	7e32      	ldrb	r2, [r6, #24]
 800c844:	6829      	ldr	r1, [r5, #0]
 800c846:	7e73      	ldrb	r3, [r6, #25]
 800c848:	6021      	str	r1, [r4, #0]
 800c84a:	2000      	movs	r0, #0
 800c84c:	763a      	strb	r2, [r7, #24]
 800c84e:	767b      	strb	r3, [r7, #25]
 800c850:	bcf0      	pop	{r4, r5, r6, r7}
 800c852:	4770      	bx	lr
 800c854:	200b      	movs	r0, #11
 800c856:	bcf0      	pop	{r4, r5, r6, r7}
 800c858:	4770      	bx	lr
 800c85a:	200b      	movs	r0, #11
 800c85c:	4770      	bx	lr
 800c85e:	bf00      	nop

0800c860 <rcl_get_zero_initialized_publisher>:
 800c860:	4b01      	ldr	r3, [pc, #4]	; (800c868 <rcl_get_zero_initialized_publisher+0x8>)
 800c862:	6818      	ldr	r0, [r3, #0]
 800c864:	4770      	bx	lr
 800c866:	bf00      	nop
 800c868:	0801970c 	.word	0x0801970c

0800c86c <rcl_publisher_init>:
 800c86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c870:	b091      	sub	sp, #68	; 0x44
 800c872:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c874:	b3d7      	cbz	r7, 800c8ec <rcl_publisher_init+0x80>
 800c876:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800c87a:	4604      	mov	r4, r0
 800c87c:	4648      	mov	r0, r9
 800c87e:	4688      	mov	r8, r1
 800c880:	4616      	mov	r6, r2
 800c882:	461d      	mov	r5, r3
 800c884:	f000 ff22 	bl	800d6cc <rcutils_allocator_is_valid>
 800c888:	b380      	cbz	r0, 800c8ec <rcl_publisher_init+0x80>
 800c88a:	b37c      	cbz	r4, 800c8ec <rcl_publisher_init+0x80>
 800c88c:	f8d4 a000 	ldr.w	sl, [r4]
 800c890:	f1ba 0f00 	cmp.w	sl, #0
 800c894:	d004      	beq.n	800c8a0 <rcl_publisher_init+0x34>
 800c896:	2564      	movs	r5, #100	; 0x64
 800c898:	4628      	mov	r0, r5
 800c89a:	b011      	add	sp, #68	; 0x44
 800c89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8a0:	4640      	mov	r0, r8
 800c8a2:	f006 fdf9 	bl	8013498 <rcl_node_is_valid>
 800c8a6:	b330      	cbz	r0, 800c8f6 <rcl_publisher_init+0x8a>
 800c8a8:	b306      	cbz	r6, 800c8ec <rcl_publisher_init+0x80>
 800c8aa:	b1fd      	cbz	r5, 800c8ec <rcl_publisher_init+0x80>
 800c8ac:	46ce      	mov	lr, r9
 800c8ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c8b2:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800c8b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c8ba:	f8de 3000 	ldr.w	r3, [lr]
 800c8be:	f8cc 3000 	str.w	r3, [ip]
 800c8c2:	f000 ff3f 	bl	800d744 <rcutils_get_zero_initialized_string_map>
 800c8c6:	ab10      	add	r3, sp, #64	; 0x40
 800c8c8:	4684      	mov	ip, r0
 800c8ca:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800c8ce:	f8cd c020 	str.w	ip, [sp, #32]
 800c8d2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c8d6:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800c8da:	4651      	mov	r1, sl
 800c8dc:	a808      	add	r0, sp, #32
 800c8de:	f000 ffab 	bl	800d838 <rcutils_string_map_init>
 800c8e2:	b150      	cbz	r0, 800c8fa <rcl_publisher_init+0x8e>
 800c8e4:	280a      	cmp	r0, #10
 800c8e6:	d013      	beq.n	800c910 <rcl_publisher_init+0xa4>
 800c8e8:	2501      	movs	r5, #1
 800c8ea:	e7d5      	b.n	800c898 <rcl_publisher_init+0x2c>
 800c8ec:	250b      	movs	r5, #11
 800c8ee:	4628      	mov	r0, r5
 800c8f0:	b011      	add	sp, #68	; 0x44
 800c8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8f6:	25c8      	movs	r5, #200	; 0xc8
 800c8f8:	e7ce      	b.n	800c898 <rcl_publisher_init+0x2c>
 800c8fa:	a808      	add	r0, sp, #32
 800c8fc:	f006 fa02 	bl	8012d04 <rcl_get_default_topic_name_substitutions>
 800c900:	4682      	mov	sl, r0
 800c902:	b138      	cbz	r0, 800c914 <rcl_publisher_init+0xa8>
 800c904:	a808      	add	r0, sp, #32
 800c906:	f000 ffd7 	bl	800d8b8 <rcutils_string_map_fini>
 800c90a:	f1ba 0f0a 	cmp.w	sl, #10
 800c90e:	d1eb      	bne.n	800c8e8 <rcl_publisher_init+0x7c>
 800c910:	250a      	movs	r5, #10
 800c912:	e7c1      	b.n	800c898 <rcl_publisher_init+0x2c>
 800c914:	4640      	mov	r0, r8
 800c916:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c91a:	f006 fdc7 	bl	80134ac <rcl_node_get_name>
 800c91e:	4682      	mov	sl, r0
 800c920:	4640      	mov	r0, r8
 800c922:	f006 fdcb 	bl	80134bc <rcl_node_get_namespace>
 800c926:	4686      	mov	lr, r0
 800c928:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800c92c:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800c930:	46ec      	mov	ip, sp
 800c932:	f8cd b014 	str.w	fp, [sp, #20]
 800c936:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c93a:	f8d9 3000 	ldr.w	r3, [r9]
 800c93e:	f8cc 3000 	str.w	r3, [ip]
 800c942:	4628      	mov	r0, r5
 800c944:	4651      	mov	r1, sl
 800c946:	4672      	mov	r2, lr
 800c948:	ab08      	add	r3, sp, #32
 800c94a:	f006 f875 	bl	8012a38 <rcl_expand_topic_name>
 800c94e:	4605      	mov	r5, r0
 800c950:	a808      	add	r0, sp, #32
 800c952:	f000 ffb1 	bl	800d8b8 <rcutils_string_map_fini>
 800c956:	b920      	cbnz	r0, 800c962 <rcl_publisher_init+0xf6>
 800c958:	b15d      	cbz	r5, 800c972 <rcl_publisher_init+0x106>
 800c95a:	2d67      	cmp	r5, #103	; 0x67
 800c95c:	d002      	beq.n	800c964 <rcl_publisher_init+0xf8>
 800c95e:	2d69      	cmp	r5, #105	; 0x69
 800c960:	d05f      	beq.n	800ca22 <rcl_publisher_init+0x1b6>
 800c962:	2501      	movs	r5, #1
 800c964:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c966:	2800      	cmp	r0, #0
 800c968:	d096      	beq.n	800c898 <rcl_publisher_init+0x2c>
 800c96a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c96c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c96e:	4798      	blx	r3
 800c970:	e792      	b.n	800c898 <rcl_publisher_init+0x2c>
 800c972:	4640      	mov	r0, r8
 800c974:	f006 fdaa 	bl	80134cc <rcl_node_get_options>
 800c978:	2800      	cmp	r0, #0
 800c97a:	d0f2      	beq.n	800c962 <rcl_publisher_init+0xf6>
 800c97c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c97e:	f7f3 fc39 	bl	80001f4 <strlen>
 800c982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c984:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c986:	3001      	adds	r0, #1
 800c988:	4798      	blx	r3
 800c98a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c98c:	9107      	str	r1, [sp, #28]
 800c98e:	4681      	mov	r9, r0
 800c990:	4608      	mov	r0, r1
 800c992:	f7f3 fc2f 	bl	80001f4 <strlen>
 800c996:	9907      	ldr	r1, [sp, #28]
 800c998:	1c42      	adds	r2, r0, #1
 800c99a:	4648      	mov	r0, r9
 800c99c:	f00b fe83 	bl	80186a6 <memcpy>
 800c9a0:	462a      	mov	r2, r5
 800c9a2:	4648      	mov	r0, r9
 800c9a4:	a90a      	add	r1, sp, #40	; 0x28
 800c9a6:	f001 f865 	bl	800da74 <rmw_validate_full_topic_name>
 800c9aa:	2800      	cmp	r0, #0
 800c9ac:	d137      	bne.n	800ca1e <rcl_publisher_init+0x1b2>
 800c9ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d138      	bne.n	800ca26 <rcl_publisher_init+0x1ba>
 800c9b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9b6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c9b8:	20c0      	movs	r0, #192	; 0xc0
 800c9ba:	4798      	blx	r3
 800c9bc:	6020      	str	r0, [r4, #0]
 800c9be:	b3a0      	cbz	r0, 800ca2a <rcl_publisher_init+0x1be>
 800c9c0:	4640      	mov	r0, r8
 800c9c2:	f006 fd8b 	bl	80134dc <rcl_node_get_rmw_handle>
 800c9c6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800c9ca:	9300      	str	r3, [sp, #0]
 800c9cc:	4631      	mov	r1, r6
 800c9ce:	463b      	mov	r3, r7
 800c9d0:	464a      	mov	r2, r9
 800c9d2:	6825      	ldr	r5, [r4, #0]
 800c9d4:	f001 f94e 	bl	800dc74 <rmw_create_publisher>
 800c9d8:	6821      	ldr	r1, [r4, #0]
 800c9da:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 800c9de:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 800c9e2:	b388      	cbz	r0, 800ca48 <rcl_publisher_init+0x1dc>
 800c9e4:	3168      	adds	r1, #104	; 0x68
 800c9e6:	f001 fa23 	bl	800de30 <rmw_publisher_get_actual_qos>
 800c9ea:	6823      	ldr	r3, [r4, #0]
 800c9ec:	4605      	mov	r5, r0
 800c9ee:	b9f0      	cbnz	r0, 800ca2e <rcl_publisher_init+0x1c2>
 800c9f0:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800c9f4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	2268      	movs	r2, #104	; 0x68
 800c9fc:	4639      	mov	r1, r7
 800c9fe:	f00b fe52 	bl	80186a6 <memcpy>
 800ca02:	f8d8 2000 	ldr.w	r2, [r8]
 800ca06:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 800ca0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca0c:	b110      	cbz	r0, 800ca14 <rcl_publisher_init+0x1a8>
 800ca0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca10:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ca12:	4798      	blx	r3
 800ca14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca16:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ca18:	4648      	mov	r0, r9
 800ca1a:	4798      	blx	r3
 800ca1c:	e73c      	b.n	800c898 <rcl_publisher_init+0x2c>
 800ca1e:	2501      	movs	r5, #1
 800ca20:	e7f3      	b.n	800ca0a <rcl_publisher_init+0x19e>
 800ca22:	2567      	movs	r5, #103	; 0x67
 800ca24:	e79e      	b.n	800c964 <rcl_publisher_init+0xf8>
 800ca26:	2567      	movs	r5, #103	; 0x67
 800ca28:	e7ef      	b.n	800ca0a <rcl_publisher_init+0x19e>
 800ca2a:	250a      	movs	r5, #10
 800ca2c:	e7ed      	b.n	800ca0a <rcl_publisher_init+0x19e>
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d0f5      	beq.n	800ca1e <rcl_publisher_init+0x1b2>
 800ca32:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ca36:	b13b      	cbz	r3, 800ca48 <rcl_publisher_init+0x1dc>
 800ca38:	4640      	mov	r0, r8
 800ca3a:	f006 fd4f 	bl	80134dc <rcl_node_get_rmw_handle>
 800ca3e:	6823      	ldr	r3, [r4, #0]
 800ca40:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800ca44:	f001 f9f6 	bl	800de34 <rmw_destroy_publisher>
 800ca48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca4a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ca4c:	6820      	ldr	r0, [r4, #0]
 800ca4e:	4798      	blx	r3
 800ca50:	2300      	movs	r3, #0
 800ca52:	6023      	str	r3, [r4, #0]
 800ca54:	2501      	movs	r5, #1
 800ca56:	e7d8      	b.n	800ca0a <rcl_publisher_init+0x19e>

0800ca58 <rcl_publisher_get_default_options>:
 800ca58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca5a:	4f0e      	ldr	r7, [pc, #56]	; (800ca94 <rcl_publisher_get_default_options+0x3c>)
 800ca5c:	490e      	ldr	r1, [pc, #56]	; (800ca98 <rcl_publisher_get_default_options+0x40>)
 800ca5e:	b087      	sub	sp, #28
 800ca60:	4606      	mov	r6, r0
 800ca62:	2250      	movs	r2, #80	; 0x50
 800ca64:	4638      	mov	r0, r7
 800ca66:	f00b fe1e 	bl	80186a6 <memcpy>
 800ca6a:	466c      	mov	r4, sp
 800ca6c:	4668      	mov	r0, sp
 800ca6e:	f000 fe1f 	bl	800d6b0 <rcutils_get_default_allocator>
 800ca72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ca74:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800ca78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ca7a:	6823      	ldr	r3, [r4, #0]
 800ca7c:	602b      	str	r3, [r5, #0]
 800ca7e:	f000 ffe1 	bl	800da44 <rmw_get_default_publisher_options>
 800ca82:	4639      	mov	r1, r7
 800ca84:	6678      	str	r0, [r7, #100]	; 0x64
 800ca86:	2268      	movs	r2, #104	; 0x68
 800ca88:	4630      	mov	r0, r6
 800ca8a:	f00b fe0c 	bl	80186a6 <memcpy>
 800ca8e:	4630      	mov	r0, r6
 800ca90:	b007      	add	sp, #28
 800ca92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca94:	20009b48 	.word	0x20009b48
 800ca98:	08019710 	.word	0x08019710

0800ca9c <rcl_publish>:
 800ca9c:	b1f8      	cbz	r0, 800cade <rcl_publish+0x42>
 800ca9e:	6803      	ldr	r3, [r0, #0]
 800caa0:	b570      	push	{r4, r5, r6, lr}
 800caa2:	4604      	mov	r4, r0
 800caa4:	b1b3      	cbz	r3, 800cad4 <rcl_publish+0x38>
 800caa6:	4616      	mov	r6, r2
 800caa8:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800caac:	b192      	cbz	r2, 800cad4 <rcl_publish+0x38>
 800caae:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800cab2:	460d      	mov	r5, r1
 800cab4:	f005 ff56 	bl	8012964 <rcl_context_is_valid>
 800cab8:	b160      	cbz	r0, 800cad4 <rcl_publish+0x38>
 800caba:	6823      	ldr	r3, [r4, #0]
 800cabc:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 800cac0:	b140      	cbz	r0, 800cad4 <rcl_publish+0x38>
 800cac2:	b155      	cbz	r5, 800cada <rcl_publish+0x3e>
 800cac4:	4632      	mov	r2, r6
 800cac6:	4629      	mov	r1, r5
 800cac8:	f001 f874 	bl	800dbb4 <rmw_publish>
 800cacc:	3800      	subs	r0, #0
 800cace:	bf18      	it	ne
 800cad0:	2001      	movne	r0, #1
 800cad2:	bd70      	pop	{r4, r5, r6, pc}
 800cad4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800cad8:	bd70      	pop	{r4, r5, r6, pc}
 800cada:	200b      	movs	r0, #11
 800cadc:	bd70      	pop	{r4, r5, r6, pc}
 800cade:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800cae2:	4770      	bx	lr

0800cae4 <rcl_get_zero_initialized_subscription>:
 800cae4:	4b01      	ldr	r3, [pc, #4]	; (800caec <rcl_get_zero_initialized_subscription+0x8>)
 800cae6:	6818      	ldr	r0, [r3, #0]
 800cae8:	4770      	bx	lr
 800caea:	bf00      	nop
 800caec:	08019760 	.word	0x08019760

0800caf0 <rcl_subscription_init>:
 800caf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf4:	b091      	sub	sp, #68	; 0x44
 800caf6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800caf8:	b1d7      	cbz	r7, 800cb30 <rcl_subscription_init+0x40>
 800cafa:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800cafe:	4604      	mov	r4, r0
 800cb00:	4648      	mov	r0, r9
 800cb02:	4688      	mov	r8, r1
 800cb04:	4616      	mov	r6, r2
 800cb06:	461d      	mov	r5, r3
 800cb08:	f000 fde0 	bl	800d6cc <rcutils_allocator_is_valid>
 800cb0c:	b180      	cbz	r0, 800cb30 <rcl_subscription_init+0x40>
 800cb0e:	b17c      	cbz	r4, 800cb30 <rcl_subscription_init+0x40>
 800cb10:	4640      	mov	r0, r8
 800cb12:	f006 fcc1 	bl	8013498 <rcl_node_is_valid>
 800cb16:	b380      	cbz	r0, 800cb7a <rcl_subscription_init+0x8a>
 800cb18:	b156      	cbz	r6, 800cb30 <rcl_subscription_init+0x40>
 800cb1a:	b14d      	cbz	r5, 800cb30 <rcl_subscription_init+0x40>
 800cb1c:	f8d4 a000 	ldr.w	sl, [r4]
 800cb20:	f1ba 0f00 	cmp.w	sl, #0
 800cb24:	d009      	beq.n	800cb3a <rcl_subscription_init+0x4a>
 800cb26:	2564      	movs	r5, #100	; 0x64
 800cb28:	4628      	mov	r0, r5
 800cb2a:	b011      	add	sp, #68	; 0x44
 800cb2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb30:	250b      	movs	r5, #11
 800cb32:	4628      	mov	r0, r5
 800cb34:	b011      	add	sp, #68	; 0x44
 800cb36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb3a:	46ce      	mov	lr, r9
 800cb3c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cb40:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800cb44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cb48:	f8de 3000 	ldr.w	r3, [lr]
 800cb4c:	f8cc 3000 	str.w	r3, [ip]
 800cb50:	f000 fdf8 	bl	800d744 <rcutils_get_zero_initialized_string_map>
 800cb54:	ab10      	add	r3, sp, #64	; 0x40
 800cb56:	4684      	mov	ip, r0
 800cb58:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800cb5c:	f8cd c020 	str.w	ip, [sp, #32]
 800cb60:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800cb64:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800cb68:	4651      	mov	r1, sl
 800cb6a:	a808      	add	r0, sp, #32
 800cb6c:	f000 fe64 	bl	800d838 <rcutils_string_map_init>
 800cb70:	b140      	cbz	r0, 800cb84 <rcl_subscription_init+0x94>
 800cb72:	280a      	cmp	r0, #10
 800cb74:	d011      	beq.n	800cb9a <rcl_subscription_init+0xaa>
 800cb76:	2501      	movs	r5, #1
 800cb78:	e7db      	b.n	800cb32 <rcl_subscription_init+0x42>
 800cb7a:	25c8      	movs	r5, #200	; 0xc8
 800cb7c:	4628      	mov	r0, r5
 800cb7e:	b011      	add	sp, #68	; 0x44
 800cb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb84:	a808      	add	r0, sp, #32
 800cb86:	f006 f8bd 	bl	8012d04 <rcl_get_default_topic_name_substitutions>
 800cb8a:	4682      	mov	sl, r0
 800cb8c:	b138      	cbz	r0, 800cb9e <rcl_subscription_init+0xae>
 800cb8e:	a808      	add	r0, sp, #32
 800cb90:	f000 fe92 	bl	800d8b8 <rcutils_string_map_fini>
 800cb94:	f1ba 0f0a 	cmp.w	sl, #10
 800cb98:	d1ed      	bne.n	800cb76 <rcl_subscription_init+0x86>
 800cb9a:	250a      	movs	r5, #10
 800cb9c:	e7c9      	b.n	800cb32 <rcl_subscription_init+0x42>
 800cb9e:	4640      	mov	r0, r8
 800cba0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800cba4:	f006 fc82 	bl	80134ac <rcl_node_get_name>
 800cba8:	4682      	mov	sl, r0
 800cbaa:	4640      	mov	r0, r8
 800cbac:	f006 fc86 	bl	80134bc <rcl_node_get_namespace>
 800cbb0:	4686      	mov	lr, r0
 800cbb2:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800cbb6:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800cbba:	46ec      	mov	ip, sp
 800cbbc:	f8cd b014 	str.w	fp, [sp, #20]
 800cbc0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cbc4:	f8d9 3000 	ldr.w	r3, [r9]
 800cbc8:	f8cc 3000 	str.w	r3, [ip]
 800cbcc:	4628      	mov	r0, r5
 800cbce:	4651      	mov	r1, sl
 800cbd0:	4672      	mov	r2, lr
 800cbd2:	ab08      	add	r3, sp, #32
 800cbd4:	f005 ff30 	bl	8012a38 <rcl_expand_topic_name>
 800cbd8:	4605      	mov	r5, r0
 800cbda:	a808      	add	r0, sp, #32
 800cbdc:	f000 fe6c 	bl	800d8b8 <rcutils_string_map_fini>
 800cbe0:	b920      	cbnz	r0, 800cbec <rcl_subscription_init+0xfc>
 800cbe2:	b15d      	cbz	r5, 800cbfc <rcl_subscription_init+0x10c>
 800cbe4:	2d67      	cmp	r5, #103	; 0x67
 800cbe6:	d002      	beq.n	800cbee <rcl_subscription_init+0xfe>
 800cbe8:	2d69      	cmp	r5, #105	; 0x69
 800cbea:	d05a      	beq.n	800cca2 <rcl_subscription_init+0x1b2>
 800cbec:	2501      	movs	r5, #1
 800cbee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbf0:	2800      	cmp	r0, #0
 800cbf2:	d09e      	beq.n	800cb32 <rcl_subscription_init+0x42>
 800cbf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbf6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cbf8:	4798      	blx	r3
 800cbfa:	e79a      	b.n	800cb32 <rcl_subscription_init+0x42>
 800cbfc:	4640      	mov	r0, r8
 800cbfe:	f006 fc65 	bl	80134cc <rcl_node_get_options>
 800cc02:	2800      	cmp	r0, #0
 800cc04:	d0f2      	beq.n	800cbec <rcl_subscription_init+0xfc>
 800cc06:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc08:	f7f3 faf4 	bl	80001f4 <strlen>
 800cc0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc0e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cc10:	3001      	adds	r0, #1
 800cc12:	4798      	blx	r3
 800cc14:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc16:	9107      	str	r1, [sp, #28]
 800cc18:	4681      	mov	r9, r0
 800cc1a:	4608      	mov	r0, r1
 800cc1c:	f7f3 faea 	bl	80001f4 <strlen>
 800cc20:	9907      	ldr	r1, [sp, #28]
 800cc22:	1c42      	adds	r2, r0, #1
 800cc24:	4648      	mov	r0, r9
 800cc26:	f00b fd3e 	bl	80186a6 <memcpy>
 800cc2a:	462a      	mov	r2, r5
 800cc2c:	4648      	mov	r0, r9
 800cc2e:	a90a      	add	r1, sp, #40	; 0x28
 800cc30:	f000 ff20 	bl	800da74 <rmw_validate_full_topic_name>
 800cc34:	2800      	cmp	r0, #0
 800cc36:	d132      	bne.n	800cc9e <rcl_subscription_init+0x1ae>
 800cc38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d133      	bne.n	800cca6 <rcl_subscription_init+0x1b6>
 800cc3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc40:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cc42:	20c8      	movs	r0, #200	; 0xc8
 800cc44:	4798      	blx	r3
 800cc46:	6020      	str	r0, [r4, #0]
 800cc48:	b378      	cbz	r0, 800ccaa <rcl_subscription_init+0x1ba>
 800cc4a:	4640      	mov	r0, r8
 800cc4c:	f006 fc46 	bl	80134dc <rcl_node_get_rmw_handle>
 800cc50:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800cc54:	9300      	str	r3, [sp, #0]
 800cc56:	4631      	mov	r1, r6
 800cc58:	463b      	mov	r3, r7
 800cc5a:	464a      	mov	r2, r9
 800cc5c:	6825      	ldr	r5, [r4, #0]
 800cc5e:	f001 f939 	bl	800ded4 <rmw_create_subscription>
 800cc62:	6821      	ldr	r1, [r4, #0]
 800cc64:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
 800cc68:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 800cc6c:	b368      	cbz	r0, 800ccca <rcl_subscription_init+0x1da>
 800cc6e:	3170      	adds	r1, #112	; 0x70
 800cc70:	f001 fa10 	bl	800e094 <rmw_subscription_get_actual_qos>
 800cc74:	4605      	mov	r5, r0
 800cc76:	b9d0      	cbnz	r0, 800ccae <rcl_subscription_init+0x1be>
 800cc78:	6820      	ldr	r0, [r4, #0]
 800cc7a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800cc7e:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 800cc82:	2270      	movs	r2, #112	; 0x70
 800cc84:	4639      	mov	r1, r7
 800cc86:	f00b fd0e 	bl	80186a6 <memcpy>
 800cc8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc8c:	b110      	cbz	r0, 800cc94 <rcl_subscription_init+0x1a4>
 800cc8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc90:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cc92:	4798      	blx	r3
 800cc94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc96:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cc98:	4648      	mov	r0, r9
 800cc9a:	4798      	blx	r3
 800cc9c:	e749      	b.n	800cb32 <rcl_subscription_init+0x42>
 800cc9e:	2501      	movs	r5, #1
 800cca0:	e7f3      	b.n	800cc8a <rcl_subscription_init+0x19a>
 800cca2:	2567      	movs	r5, #103	; 0x67
 800cca4:	e7a3      	b.n	800cbee <rcl_subscription_init+0xfe>
 800cca6:	2567      	movs	r5, #103	; 0x67
 800cca8:	e7ef      	b.n	800cc8a <rcl_subscription_init+0x19a>
 800ccaa:	250a      	movs	r5, #10
 800ccac:	e7ed      	b.n	800cc8a <rcl_subscription_init+0x19a>
 800ccae:	6823      	ldr	r3, [r4, #0]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d0f4      	beq.n	800cc9e <rcl_subscription_init+0x1ae>
 800ccb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ccb8:	b13b      	cbz	r3, 800ccca <rcl_subscription_init+0x1da>
 800ccba:	4640      	mov	r0, r8
 800ccbc:	f006 fc0e 	bl	80134dc <rcl_node_get_rmw_handle>
 800ccc0:	6823      	ldr	r3, [r4, #0]
 800ccc2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800ccc6:	f001 f9e7 	bl	800e098 <rmw_destroy_subscription>
 800ccca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cccc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ccce:	6820      	ldr	r0, [r4, #0]
 800ccd0:	4798      	blx	r3
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	6023      	str	r3, [r4, #0]
 800ccd6:	2501      	movs	r5, #1
 800ccd8:	e7d7      	b.n	800cc8a <rcl_subscription_init+0x19a>
 800ccda:	bf00      	nop

0800ccdc <rcl_subscription_get_default_options>:
 800ccdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cce0:	4f12      	ldr	r7, [pc, #72]	; (800cd2c <rcl_subscription_get_default_options+0x50>)
 800cce2:	4913      	ldr	r1, [pc, #76]	; (800cd30 <rcl_subscription_get_default_options+0x54>)
 800cce4:	b088      	sub	sp, #32
 800cce6:	4606      	mov	r6, r0
 800cce8:	2250      	movs	r2, #80	; 0x50
 800ccea:	4638      	mov	r0, r7
 800ccec:	f00b fcdb 	bl	80186a6 <memcpy>
 800ccf0:	ac02      	add	r4, sp, #8
 800ccf2:	a802      	add	r0, sp, #8
 800ccf4:	f000 fcdc 	bl	800d6b0 <rcutils_get_default_allocator>
 800ccf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ccfa:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800ccfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cd00:	46e8      	mov	r8, sp
 800cd02:	6823      	ldr	r3, [r4, #0]
 800cd04:	602b      	str	r3, [r5, #0]
 800cd06:	4640      	mov	r0, r8
 800cd08:	f000 fe9e 	bl	800da48 <rmw_get_default_subscription_options>
 800cd0c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800cd10:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800cd14:	e883 0003 	stmia.w	r3, {r0, r1}
 800cd18:	2270      	movs	r2, #112	; 0x70
 800cd1a:	4639      	mov	r1, r7
 800cd1c:	4630      	mov	r0, r6
 800cd1e:	f00b fcc2 	bl	80186a6 <memcpy>
 800cd22:	4630      	mov	r0, r6
 800cd24:	b008      	add	sp, #32
 800cd26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd2a:	bf00      	nop
 800cd2c:	20009bb0 	.word	0x20009bb0
 800cd30:	08019768 	.word	0x08019768

0800cd34 <rcl_take>:
 800cd34:	2800      	cmp	r0, #0
 800cd36:	d03f      	beq.n	800cdb8 <rcl_take+0x84>
 800cd38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd3c:	4617      	mov	r7, r2
 800cd3e:	6802      	ldr	r2, [r0, #0]
 800cd40:	b09d      	sub	sp, #116	; 0x74
 800cd42:	4606      	mov	r6, r0
 800cd44:	b382      	cbz	r2, 800cda8 <rcl_take+0x74>
 800cd46:	4699      	mov	r9, r3
 800cd48:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800cd4c:	b363      	cbz	r3, 800cda8 <rcl_take+0x74>
 800cd4e:	4688      	mov	r8, r1
 800cd50:	b381      	cbz	r1, 800cdb4 <rcl_take+0x80>
 800cd52:	2f00      	cmp	r7, #0
 800cd54:	d034      	beq.n	800cdc0 <rcl_take+0x8c>
 800cd56:	a802      	add	r0, sp, #8
 800cd58:	ac02      	add	r4, sp, #8
 800cd5a:	f000 fe79 	bl	800da50 <rmw_get_zero_initialized_message_info>
 800cd5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cd60:	463d      	mov	r5, r7
 800cd62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cd64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cd66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cd68:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800cd6c:	6834      	ldr	r4, [r6, #0]
 800cd6e:	f8d4 60c0 	ldr.w	r6, [r4, #192]	; 0xc0
 800cd72:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800cd76:	2400      	movs	r4, #0
 800cd78:	463b      	mov	r3, r7
 800cd7a:	4630      	mov	r0, r6
 800cd7c:	f8cd 9000 	str.w	r9, [sp]
 800cd80:	4641      	mov	r1, r8
 800cd82:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 800cd86:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
 800cd8a:	f001 f9e3 	bl	800e154 <rmw_take_with_info>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	b9c0      	cbnz	r0, 800cdc4 <rcl_take+0x90>
 800cd92:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 800cd96:	f240 1291 	movw	r2, #401	; 0x191
 800cd9a:	2900      	cmp	r1, #0
 800cd9c:	bf08      	it	eq
 800cd9e:	4613      	moveq	r3, r2
 800cda0:	4618      	mov	r0, r3
 800cda2:	b01d      	add	sp, #116	; 0x74
 800cda4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cda8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800cdac:	4618      	mov	r0, r3
 800cdae:	b01d      	add	sp, #116	; 0x74
 800cdb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdb4:	230b      	movs	r3, #11
 800cdb6:	e7f3      	b.n	800cda0 <rcl_take+0x6c>
 800cdb8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	4770      	bx	lr
 800cdc0:	af10      	add	r7, sp, #64	; 0x40
 800cdc2:	e7c8      	b.n	800cd56 <rcl_take+0x22>
 800cdc4:	f005 fdb0 	bl	8012928 <rcl_convert_rmw_ret_to_rcl_ret>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	e7e9      	b.n	800cda0 <rcl_take+0x6c>

0800cdcc <rcl_subscription_get_rmw_handle>:
 800cdcc:	b118      	cbz	r0, 800cdd6 <rcl_subscription_get_rmw_handle+0xa>
 800cdce:	6800      	ldr	r0, [r0, #0]
 800cdd0:	b108      	cbz	r0, 800cdd6 <rcl_subscription_get_rmw_handle+0xa>
 800cdd2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800cdd6:	4770      	bx	lr

0800cdd8 <_rclc_check_for_new_data>:
 800cdd8:	b1e0      	cbz	r0, 800ce14 <_rclc_check_for_new_data+0x3c>
 800cdda:	7803      	ldrb	r3, [r0, #0]
 800cddc:	2b08      	cmp	r3, #8
 800cdde:	d81b      	bhi.n	800ce18 <_rclc_check_for_new_data+0x40>
 800cde0:	e8df f003 	tbb	[pc, r3]
 800cde4:	12161010 	.word	0x12161010
 800cde8:	05050512 	.word	0x05050512
 800cdec:	14          	.byte	0x14
 800cded:	00          	.byte	0x00
 800cdee:	6a0b      	ldr	r3, [r1, #32]
 800cdf0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800cdf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdf6:	3b00      	subs	r3, #0
 800cdf8:	bf18      	it	ne
 800cdfa:	2301      	movne	r3, #1
 800cdfc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800ce00:	2000      	movs	r0, #0
 800ce02:	4770      	bx	lr
 800ce04:	680b      	ldr	r3, [r1, #0]
 800ce06:	e7f3      	b.n	800cdf0 <_rclc_check_for_new_data+0x18>
 800ce08:	698b      	ldr	r3, [r1, #24]
 800ce0a:	e7f1      	b.n	800cdf0 <_rclc_check_for_new_data+0x18>
 800ce0c:	688b      	ldr	r3, [r1, #8]
 800ce0e:	e7ef      	b.n	800cdf0 <_rclc_check_for_new_data+0x18>
 800ce10:	690b      	ldr	r3, [r1, #16]
 800ce12:	e7ed      	b.n	800cdf0 <_rclc_check_for_new_data+0x18>
 800ce14:	200b      	movs	r0, #11
 800ce16:	4770      	bx	lr
 800ce18:	2300      	movs	r3, #0
 800ce1a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800ce1e:	2001      	movs	r0, #1
 800ce20:	4770      	bx	lr
 800ce22:	bf00      	nop

0800ce24 <_rclc_take_new_data>:
 800ce24:	2800      	cmp	r0, #0
 800ce26:	d049      	beq.n	800cebc <_rclc_take_new_data+0x98>
 800ce28:	b510      	push	{r4, lr}
 800ce2a:	7803      	ldrb	r3, [r0, #0]
 800ce2c:	b08e      	sub	sp, #56	; 0x38
 800ce2e:	4604      	mov	r4, r0
 800ce30:	2b08      	cmp	r3, #8
 800ce32:	d84a      	bhi.n	800ceca <_rclc_take_new_data+0xa6>
 800ce34:	e8df f003 	tbb	[pc, r3]
 800ce38:	2b121515 	.word	0x2b121515
 800ce3c:	0505052b 	.word	0x0505052b
 800ce40:	12          	.byte	0x12
 800ce41:	00          	.byte	0x00
 800ce42:	6a0b      	ldr	r3, [r1, #32]
 800ce44:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ce46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce4a:	b13b      	cbz	r3, 800ce5c <_rclc_take_new_data+0x38>
 800ce4c:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800ce50:	f104 0110 	add.w	r1, r4, #16
 800ce54:	f006 fc42 	bl	80136dc <rcl_take_request>
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	d131      	bne.n	800cec0 <_rclc_take_new_data+0x9c>
 800ce5c:	2000      	movs	r0, #0
 800ce5e:	b00e      	add	sp, #56	; 0x38
 800ce60:	bd10      	pop	{r4, pc}
 800ce62:	680b      	ldr	r3, [r1, #0]
 800ce64:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ce66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d0f6      	beq.n	800ce5c <_rclc_take_new_data+0x38>
 800ce6e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800ce72:	2300      	movs	r3, #0
 800ce74:	aa02      	add	r2, sp, #8
 800ce76:	f7ff ff5d 	bl	800cd34 <rcl_take>
 800ce7a:	2800      	cmp	r0, #0
 800ce7c:	d0ef      	beq.n	800ce5e <_rclc_take_new_data+0x3a>
 800ce7e:	f240 1391 	movw	r3, #401	; 0x191
 800ce82:	4298      	cmp	r0, r3
 800ce84:	d115      	bne.n	800ceb2 <_rclc_take_new_data+0x8e>
 800ce86:	2300      	movs	r3, #0
 800ce88:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800ce8c:	e7e7      	b.n	800ce5e <_rclc_take_new_data+0x3a>
 800ce8e:	698b      	ldr	r3, [r1, #24]
 800ce90:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ce92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d0e0      	beq.n	800ce5c <_rclc_take_new_data+0x38>
 800ce9a:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800ce9e:	f104 0110 	add.w	r1, r4, #16
 800cea2:	f005 fd05 	bl	80128b0 <rcl_take_response>
 800cea6:	2800      	cmp	r0, #0
 800cea8:	d0d8      	beq.n	800ce5c <_rclc_take_new_data+0x38>
 800ceaa:	f240 13f5 	movw	r3, #501	; 0x1f5
 800ceae:	4298      	cmp	r0, r3
 800ceb0:	d0d5      	beq.n	800ce5e <_rclc_take_new_data+0x3a>
 800ceb2:	9001      	str	r0, [sp, #4]
 800ceb4:	f000 fc2e 	bl	800d714 <rcutils_reset_error>
 800ceb8:	9801      	ldr	r0, [sp, #4]
 800ceba:	e7d0      	b.n	800ce5e <_rclc_take_new_data+0x3a>
 800cebc:	200b      	movs	r0, #11
 800cebe:	4770      	bx	lr
 800cec0:	f240 2359 	movw	r3, #601	; 0x259
 800cec4:	4298      	cmp	r0, r3
 800cec6:	d0de      	beq.n	800ce86 <_rclc_take_new_data+0x62>
 800cec8:	e7f3      	b.n	800ceb2 <_rclc_take_new_data+0x8e>
 800ceca:	2001      	movs	r0, #1
 800cecc:	e7c7      	b.n	800ce5e <_rclc_take_new_data+0x3a>
 800cece:	bf00      	nop

0800ced0 <rclc_executor_trigger_any>:
 800ced0:	b170      	cbz	r0, 800cef0 <rclc_executor_trigger_any+0x20>
 800ced2:	b179      	cbz	r1, 800cef4 <rclc_executor_trigger_any+0x24>
 800ced4:	4603      	mov	r3, r0
 800ced6:	2200      	movs	r2, #0
 800ced8:	e005      	b.n	800cee6 <rclc_executor_trigger_any+0x16>
 800ceda:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800cede:	3340      	adds	r3, #64	; 0x40
 800cee0:	b930      	cbnz	r0, 800cef0 <rclc_executor_trigger_any+0x20>
 800cee2:	4291      	cmp	r1, r2
 800cee4:	d005      	beq.n	800cef2 <rclc_executor_trigger_any+0x22>
 800cee6:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800ceea:	3201      	adds	r2, #1
 800ceec:	2800      	cmp	r0, #0
 800ceee:	d1f4      	bne.n	800ceda <rclc_executor_trigger_any+0xa>
 800cef0:	4770      	bx	lr
 800cef2:	4770      	bx	lr
 800cef4:	4608      	mov	r0, r1
 800cef6:	e7fb      	b.n	800cef0 <rclc_executor_trigger_any+0x20>

0800cef8 <_rclc_execute.part.0>:
 800cef8:	b530      	push	{r4, r5, lr}
 800cefa:	7803      	ldrb	r3, [r0, #0]
 800cefc:	b083      	sub	sp, #12
 800cefe:	4604      	mov	r4, r0
 800cf00:	2b08      	cmp	r3, #8
 800cf02:	d85b      	bhi.n	800cfbc <_rclc_execute.part.0+0xc4>
 800cf04:	e8df f003 	tbb	[pc, r3]
 800cf08:	3036271f 	.word	0x3036271f
 800cf0c:	0505053f 	.word	0x0505053f
 800cf10:	1a          	.byte	0x1a
 800cf11:	00          	.byte	0x00
 800cf12:	2b06      	cmp	r3, #6
 800cf14:	d049      	beq.n	800cfaa <_rclc_execute.part.0+0xb2>
 800cf16:	2b07      	cmp	r3, #7
 800cf18:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800cf1a:	d140      	bne.n	800cf9e <_rclc_execute.part.0+0xa6>
 800cf1c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800cf20:	6880      	ldr	r0, [r0, #8]
 800cf22:	4798      	blx	r3
 800cf24:	f104 0110 	add.w	r1, r4, #16
 800cf28:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800cf2a:	6860      	ldr	r0, [r4, #4]
 800cf2c:	f006 fc0e 	bl	801374c <rcl_send_response>
 800cf30:	b138      	cbz	r0, 800cf42 <_rclc_execute.part.0+0x4a>
 800cf32:	9001      	str	r0, [sp, #4]
 800cf34:	f000 fbee 	bl	800d714 <rcutils_reset_error>
 800cf38:	9801      	ldr	r0, [sp, #4]
 800cf3a:	e002      	b.n	800cf42 <_rclc_execute.part.0+0x4a>
 800cf3c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800cf3e:	4798      	blx	r3
 800cf40:	2000      	movs	r0, #0
 800cf42:	b003      	add	sp, #12
 800cf44:	bd30      	pop	{r4, r5, pc}
 800cf46:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800cf4a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800cf4c:	b96d      	cbnz	r5, 800cf6a <_rclc_execute.part.0+0x72>
 800cf4e:	4628      	mov	r0, r5
 800cf50:	4798      	blx	r3
 800cf52:	4628      	mov	r0, r5
 800cf54:	e7f5      	b.n	800cf42 <_rclc_execute.part.0+0x4a>
 800cf56:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800cf5a:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 800cf5e:	b1d5      	cbz	r5, 800cf96 <_rclc_execute.part.0+0x9e>
 800cf60:	6880      	ldr	r0, [r0, #8]
 800cf62:	4798      	blx	r3
 800cf64:	2000      	movs	r0, #0
 800cf66:	e7ec      	b.n	800cf42 <_rclc_execute.part.0+0x4a>
 800cf68:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800cf6a:	68a0      	ldr	r0, [r4, #8]
 800cf6c:	4798      	blx	r3
 800cf6e:	2000      	movs	r0, #0
 800cf70:	b003      	add	sp, #12
 800cf72:	bd30      	pop	{r4, r5, pc}
 800cf74:	6840      	ldr	r0, [r0, #4]
 800cf76:	f006 fca3 	bl	80138c0 <rcl_timer_call>
 800cf7a:	f240 3321 	movw	r3, #801	; 0x321
 800cf7e:	4298      	cmp	r0, r3
 800cf80:	d1d6      	bne.n	800cf30 <_rclc_execute.part.0+0x38>
 800cf82:	2000      	movs	r0, #0
 800cf84:	e7dd      	b.n	800cf42 <_rclc_execute.part.0+0x4a>
 800cf86:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800cf88:	6880      	ldr	r0, [r0, #8]
 800cf8a:	f104 0110 	add.w	r1, r4, #16
 800cf8e:	4798      	blx	r3
 800cf90:	2000      	movs	r0, #0
 800cf92:	b003      	add	sp, #12
 800cf94:	bd30      	pop	{r4, r5, pc}
 800cf96:	4628      	mov	r0, r5
 800cf98:	4798      	blx	r3
 800cf9a:	4628      	mov	r0, r5
 800cf9c:	e7d1      	b.n	800cf42 <_rclc_execute.part.0+0x4a>
 800cf9e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800cfa0:	6880      	ldr	r0, [r0, #8]
 800cfa2:	4798      	blx	r3
 800cfa4:	f104 0110 	add.w	r1, r4, #16
 800cfa8:	e7be      	b.n	800cf28 <_rclc_execute.part.0+0x30>
 800cfaa:	f100 0110 	add.w	r1, r0, #16
 800cfae:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800cfb0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800cfb2:	6880      	ldr	r0, [r0, #8]
 800cfb4:	9101      	str	r1, [sp, #4]
 800cfb6:	4798      	blx	r3
 800cfb8:	9901      	ldr	r1, [sp, #4]
 800cfba:	e7b5      	b.n	800cf28 <_rclc_execute.part.0+0x30>
 800cfbc:	2001      	movs	r0, #1
 800cfbe:	e7c0      	b.n	800cf42 <_rclc_execute.part.0+0x4a>

0800cfc0 <rclc_executor_init>:
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	d063      	beq.n	800d08c <rclc_executor_init+0xcc>
 800cfc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfc8:	460f      	mov	r7, r1
 800cfca:	b0ae      	sub	sp, #184	; 0xb8
 800cfcc:	2900      	cmp	r1, #0
 800cfce:	d055      	beq.n	800d07c <rclc_executor_init+0xbc>
 800cfd0:	4605      	mov	r5, r0
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	4616      	mov	r6, r2
 800cfd6:	4698      	mov	r8, r3
 800cfd8:	f000 fb78 	bl	800d6cc <rcutils_allocator_is_valid>
 800cfdc:	2800      	cmp	r0, #0
 800cfde:	d04d      	beq.n	800d07c <rclc_executor_init+0xbc>
 800cfe0:	2e00      	cmp	r6, #0
 800cfe2:	d04b      	beq.n	800d07c <rclc_executor_init+0xbc>
 800cfe4:	492e      	ldr	r1, [pc, #184]	; (800d0a0 <rclc_executor_init+0xe0>)
 800cfe6:	2280      	movs	r2, #128	; 0x80
 800cfe8:	a80e      	add	r0, sp, #56	; 0x38
 800cfea:	f00b fb5c 	bl	80186a6 <memcpy>
 800cfee:	2400      	movs	r4, #0
 800cff0:	a90e      	add	r1, sp, #56	; 0x38
 800cff2:	2280      	movs	r2, #128	; 0x80
 800cff4:	4628      	mov	r0, r5
 800cff6:	f00b fb56 	bl	80186a6 <memcpy>
 800cffa:	602f      	str	r7, [r5, #0]
 800cffc:	4668      	mov	r0, sp
 800cffe:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800d002:	466f      	mov	r7, sp
 800d004:	f006 feb6 	bl	8013d74 <rcl_get_zero_initialized_wait_set>
 800d008:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d00a:	f105 0c14 	add.w	ip, r5, #20
 800d00e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d012:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d014:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d018:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d01a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d01e:	a31e      	add	r3, pc, #120	; (adr r3, 800d098 <rclc_executor_init+0xd8>)
 800d020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d024:	6839      	ldr	r1, [r7, #0]
 800d026:	f8cc 1000 	str.w	r1, [ip]
 800d02a:	f8d8 7000 	ldr.w	r7, [r8]
 800d02e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d032:	f8c5 8010 	str.w	r8, [r5, #16]
 800d036:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
 800d03a:	01b0      	lsls	r0, r6, #6
 800d03c:	47b8      	blx	r7
 800d03e:	6068      	str	r0, [r5, #4]
 800d040:	b908      	cbnz	r0, 800d046 <rclc_executor_init+0x86>
 800d042:	e025      	b.n	800d090 <rclc_executor_init+0xd0>
 800d044:	6868      	ldr	r0, [r5, #4]
 800d046:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800d04a:	4631      	mov	r1, r6
 800d04c:	3401      	adds	r4, #1
 800d04e:	f000 fa01 	bl	800d454 <rclc_executor_handle_init>
 800d052:	42a6      	cmp	r6, r4
 800d054:	d1f6      	bne.n	800d044 <rclc_executor_init+0x84>
 800d056:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800d05a:	f000 f9ef 	bl	800d43c <rclc_executor_handle_counters_zero_init>
 800d05e:	686b      	ldr	r3, [r5, #4]
 800d060:	4a10      	ldr	r2, [pc, #64]	; (800d0a4 <rclc_executor_init+0xe4>)
 800d062:	672a      	str	r2, [r5, #112]	; 0x70
 800d064:	2000      	movs	r0, #0
 800d066:	6768      	str	r0, [r5, #116]	; 0x74
 800d068:	b163      	cbz	r3, 800d084 <rclc_executor_init+0xc4>
 800d06a:	692b      	ldr	r3, [r5, #16]
 800d06c:	b153      	cbz	r3, 800d084 <rclc_executor_init+0xc4>
 800d06e:	68ab      	ldr	r3, [r5, #8]
 800d070:	b143      	cbz	r3, 800d084 <rclc_executor_init+0xc4>
 800d072:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 800d076:	b02e      	add	sp, #184	; 0xb8
 800d078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d07c:	200b      	movs	r0, #11
 800d07e:	b02e      	add	sp, #184	; 0xb8
 800d080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d084:	4618      	mov	r0, r3
 800d086:	b02e      	add	sp, #184	; 0xb8
 800d088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d08c:	200b      	movs	r0, #11
 800d08e:	4770      	bx	lr
 800d090:	200a      	movs	r0, #10
 800d092:	e7f4      	b.n	800d07e <rclc_executor_init+0xbe>
 800d094:	f3af 8000 	nop.w
 800d098:	3b9aca00 	.word	0x3b9aca00
 800d09c:	00000000 	.word	0x00000000
 800d0a0:	080197b8 	.word	0x080197b8
 800d0a4:	0800ced1 	.word	0x0800ced1

0800d0a8 <rclc_executor_add_subscription>:
 800d0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ac:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800d0b0:	b358      	cbz	r0, 800d10a <rclc_executor_add_subscription+0x62>
 800d0b2:	b351      	cbz	r1, 800d10a <rclc_executor_add_subscription+0x62>
 800d0b4:	b34a      	cbz	r2, 800d10a <rclc_executor_add_subscription+0x62>
 800d0b6:	b343      	cbz	r3, 800d10a <rclc_executor_add_subscription+0x62>
 800d0b8:	4604      	mov	r4, r0
 800d0ba:	e9d0 0502 	ldrd	r0, r5, [r0, #8]
 800d0be:	4285      	cmp	r5, r0
 800d0c0:	d302      	bcc.n	800d0c8 <rclc_executor_add_subscription+0x20>
 800d0c2:	2001      	movs	r0, #1
 800d0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0c8:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800d0cc:	ea4f 1885 	mov.w	r8, r5, lsl #6
 800d0d0:	eb0e 1685 	add.w	r6, lr, r5, lsl #6
 800d0d4:	f04f 0c00 	mov.w	ip, #0
 800d0d8:	f80e c008 	strb.w	ip, [lr, r8]
 800d0dc:	2001      	movs	r0, #1
 800d0de:	3501      	adds	r5, #1
 800d0e0:	f104 0814 	add.w	r8, r4, #20
 800d0e4:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
 800d0e8:	e9c6 1201 	strd	r1, r2, [r6, #4]
 800d0ec:	6333      	str	r3, [r6, #48]	; 0x30
 800d0ee:	7077      	strb	r7, [r6, #1]
 800d0f0:	f8c6 c02c 	str.w	ip, [r6, #44]	; 0x2c
 800d0f4:	4640      	mov	r0, r8
 800d0f6:	60e5      	str	r5, [r4, #12]
 800d0f8:	f006 fe4e 	bl	8013d98 <rcl_wait_set_is_valid>
 800d0fc:	b940      	cbnz	r0, 800d110 <rclc_executor_add_subscription+0x68>
 800d0fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d100:	3301      	adds	r3, #1
 800d102:	64a3      	str	r3, [r4, #72]	; 0x48
 800d104:	2000      	movs	r0, #0
 800d106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d10a:	200b      	movs	r0, #11
 800d10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d110:	4640      	mov	r0, r8
 800d112:	f006 fe47 	bl	8013da4 <rcl_wait_set_fini>
 800d116:	2800      	cmp	r0, #0
 800d118:	d0f1      	beq.n	800d0fe <rclc_executor_add_subscription+0x56>
 800d11a:	e7d3      	b.n	800d0c4 <rclc_executor_add_subscription+0x1c>

0800d11c <rclc_executor_prepare>:
 800d11c:	2800      	cmp	r0, #0
 800d11e:	d03d      	beq.n	800d19c <rclc_executor_prepare+0x80>
 800d120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d124:	f100 0814 	add.w	r8, r0, #20
 800d128:	b09a      	sub	sp, #104	; 0x68
 800d12a:	4604      	mov	r4, r0
 800d12c:	4640      	mov	r0, r8
 800d12e:	f006 fe33 	bl	8013d98 <rcl_wait_set_is_valid>
 800d132:	b118      	cbz	r0, 800d13c <rclc_executor_prepare+0x20>
 800d134:	2000      	movs	r0, #0
 800d136:	b01a      	add	sp, #104	; 0x68
 800d138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d13c:	4640      	mov	r0, r8
 800d13e:	f006 fe31 	bl	8013da4 <rcl_wait_set_fini>
 800d142:	2800      	cmp	r0, #0
 800d144:	d127      	bne.n	800d196 <rclc_executor_prepare+0x7a>
 800d146:	a80c      	add	r0, sp, #48	; 0x30
 800d148:	ad0c      	add	r5, sp, #48	; 0x30
 800d14a:	f006 fe13 	bl	8013d74 <rcl_get_zero_initialized_wait_set>
 800d14e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d150:	4646      	mov	r6, r8
 800d152:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d156:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d15a:	6927      	ldr	r7, [r4, #16]
 800d15c:	682d      	ldr	r5, [r5, #0]
 800d15e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d160:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d162:	6035      	str	r5, [r6, #0]
 800d164:	ad04      	add	r5, sp, #16
 800d166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d168:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800d16c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d16e:	6826      	ldr	r6, [r4, #0]
 800d170:	6838      	ldr	r0, [r7, #0]
 800d172:	6028      	str	r0, [r5, #0]
 800d174:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800d178:	e9cd 3200 	strd	r3, r2, [sp]
 800d17c:	4640      	mov	r0, r8
 800d17e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d180:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800d182:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d184:	f007 f92c 	bl	80143e0 <rcl_wait_set_init>
 800d188:	2800      	cmp	r0, #0
 800d18a:	d0d4      	beq.n	800d136 <rclc_executor_prepare+0x1a>
 800d18c:	900b      	str	r0, [sp, #44]	; 0x2c
 800d18e:	f000 fac1 	bl	800d714 <rcutils_reset_error>
 800d192:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d194:	e7cf      	b.n	800d136 <rclc_executor_prepare+0x1a>
 800d196:	f000 fabd 	bl	800d714 <rcutils_reset_error>
 800d19a:	e7d4      	b.n	800d146 <rclc_executor_prepare+0x2a>
 800d19c:	200b      	movs	r0, #11
 800d19e:	4770      	bx	lr

0800d1a0 <rclc_executor_spin_some.part.0>:
 800d1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1a4:	f100 0814 	add.w	r8, r0, #20
 800d1a8:	b083      	sub	sp, #12
 800d1aa:	4692      	mov	sl, r2
 800d1ac:	4699      	mov	r9, r3
 800d1ae:	4605      	mov	r5, r0
 800d1b0:	f7ff ffb4 	bl	800d11c <rclc_executor_prepare>
 800d1b4:	4640      	mov	r0, r8
 800d1b6:	f006 fec1 	bl	8013f3c <rcl_wait_set_clear>
 800d1ba:	4607      	mov	r7, r0
 800d1bc:	2800      	cmp	r0, #0
 800d1be:	f040 80be 	bne.w	800d33e <rclc_executor_spin_some.part.0+0x19e>
 800d1c2:	68ab      	ldr	r3, [r5, #8]
 800d1c4:	4604      	mov	r4, r0
 800d1c6:	b1eb      	cbz	r3, 800d204 <rclc_executor_spin_some.part.0+0x64>
 800d1c8:	686e      	ldr	r6, [r5, #4]
 800d1ca:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800d1ce:	01a2      	lsls	r2, r4, #6
 800d1d0:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 800d1d4:	b1b3      	cbz	r3, 800d204 <rclc_executor_spin_some.part.0+0x64>
 800d1d6:	5cb3      	ldrb	r3, [r6, r2]
 800d1d8:	2b08      	cmp	r3, #8
 800d1da:	f200 80a9 	bhi.w	800d330 <rclc_executor_spin_some.part.0+0x190>
 800d1de:	e8df f003 	tbb	[pc, r3]
 800d1e2:	8989      	.short	0x8989
 800d1e4:	057b7b93 	.word	0x057b7b93
 800d1e8:	0505      	.short	0x0505
 800d1ea:	9d          	.byte	0x9d
 800d1eb:	00          	.byte	0x00
 800d1ec:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800d1f0:	4640      	mov	r0, r8
 800d1f2:	6849      	ldr	r1, [r1, #4]
 800d1f4:	f007 fa0a 	bl	801460c <rcl_wait_set_add_service>
 800d1f8:	2800      	cmp	r0, #0
 800d1fa:	d175      	bne.n	800d2e8 <rclc_executor_spin_some.part.0+0x148>
 800d1fc:	68ab      	ldr	r3, [r5, #8]
 800d1fe:	3401      	adds	r4, #1
 800d200:	429c      	cmp	r4, r3
 800d202:	d3e1      	bcc.n	800d1c8 <rclc_executor_spin_some.part.0+0x28>
 800d204:	464b      	mov	r3, r9
 800d206:	4652      	mov	r2, sl
 800d208:	4640      	mov	r0, r8
 800d20a:	f007 fa2d 	bl	8014668 <rcl_wait>
 800d20e:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 800d212:	2b00      	cmp	r3, #0
 800d214:	f000 809b 	beq.w	800d34e <rclc_executor_spin_some.part.0+0x1ae>
 800d218:	2b01      	cmp	r3, #1
 800d21a:	f040 8089 	bne.w	800d330 <rclc_executor_spin_some.part.0+0x190>
 800d21e:	68ab      	ldr	r3, [r5, #8]
 800d220:	2b00      	cmp	r3, #0
 800d222:	f000 80ef 	beq.w	800d404 <rclc_executor_spin_some.part.0+0x264>
 800d226:	2400      	movs	r4, #0
 800d228:	4626      	mov	r6, r4
 800d22a:	f240 1991 	movw	r9, #401	; 0x191
 800d22e:	e00a      	b.n	800d246 <rclc_executor_spin_some.part.0+0xa6>
 800d230:	f7ff fdd2 	bl	800cdd8 <_rclc_check_for_new_data>
 800d234:	4604      	mov	r4, r0
 800d236:	b110      	cbz	r0, 800d23e <rclc_executor_spin_some.part.0+0x9e>
 800d238:	4548      	cmp	r0, r9
 800d23a:	f040 8086 	bne.w	800d34a <rclc_executor_spin_some.part.0+0x1aa>
 800d23e:	68ab      	ldr	r3, [r5, #8]
 800d240:	429e      	cmp	r6, r3
 800d242:	f080 80db 	bcs.w	800d3fc <rclc_executor_spin_some.part.0+0x25c>
 800d246:	686a      	ldr	r2, [r5, #4]
 800d248:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800d24c:	4641      	mov	r1, r8
 800d24e:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800d252:	3601      	adds	r6, #1
 800d254:	f1bc 0f00 	cmp.w	ip, #0
 800d258:	d1ea      	bne.n	800d230 <rclc_executor_spin_some.part.0+0x90>
 800d25a:	4619      	mov	r1, r3
 800d25c:	4610      	mov	r0, r2
 800d25e:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800d262:	4798      	blx	r3
 800d264:	2800      	cmp	r0, #0
 800d266:	d070      	beq.n	800d34a <rclc_executor_spin_some.part.0+0x1aa>
 800d268:	68aa      	ldr	r2, [r5, #8]
 800d26a:	2a00      	cmp	r2, #0
 800d26c:	d06d      	beq.n	800d34a <rclc_executor_spin_some.part.0+0x1aa>
 800d26e:	2600      	movs	r6, #0
 800d270:	f240 1991 	movw	r9, #401	; 0x191
 800d274:	e008      	b.n	800d288 <rclc_executor_spin_some.part.0+0xe8>
 800d276:	f7ff fdd5 	bl	800ce24 <_rclc_take_new_data>
 800d27a:	4604      	mov	r4, r0
 800d27c:	b108      	cbz	r0, 800d282 <rclc_executor_spin_some.part.0+0xe2>
 800d27e:	4548      	cmp	r0, r9
 800d280:	d163      	bne.n	800d34a <rclc_executor_spin_some.part.0+0x1aa>
 800d282:	68aa      	ldr	r2, [r5, #8]
 800d284:	4296      	cmp	r6, r2
 800d286:	d208      	bcs.n	800d29a <rclc_executor_spin_some.part.0+0xfa>
 800d288:	6868      	ldr	r0, [r5, #4]
 800d28a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800d28e:	4641      	mov	r1, r8
 800d290:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800d294:	3601      	adds	r6, #1
 800d296:	2b00      	cmp	r3, #0
 800d298:	d1ed      	bne.n	800d276 <rclc_executor_spin_some.part.0+0xd6>
 800d29a:	2600      	movs	r6, #0
 800d29c:	b932      	cbnz	r2, 800d2ac <rclc_executor_spin_some.part.0+0x10c>
 800d29e:	e054      	b.n	800d34a <rclc_executor_spin_some.part.0+0x1aa>
 800d2a0:	2901      	cmp	r1, #1
 800d2a2:	d012      	beq.n	800d2ca <rclc_executor_spin_some.part.0+0x12a>
 800d2a4:	3601      	adds	r6, #1
 800d2a6:	4296      	cmp	r6, r2
 800d2a8:	d245      	bcs.n	800d336 <rclc_executor_spin_some.part.0+0x196>
 800d2aa:	2400      	movs	r4, #0
 800d2ac:	686b      	ldr	r3, [r5, #4]
 800d2ae:	eb03 1386 	add.w	r3, r3, r6, lsl #6
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 800d2b8:	2900      	cmp	r1, #0
 800d2ba:	d046      	beq.n	800d34a <rclc_executor_spin_some.part.0+0x1aa>
 800d2bc:	7859      	ldrb	r1, [r3, #1]
 800d2be:	2900      	cmp	r1, #0
 800d2c0:	d1ee      	bne.n	800d2a0 <rclc_executor_spin_some.part.0+0x100>
 800d2c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d0ec      	beq.n	800d2a4 <rclc_executor_spin_some.part.0+0x104>
 800d2ca:	f7ff fe15 	bl	800cef8 <_rclc_execute.part.0>
 800d2ce:	2800      	cmp	r0, #0
 800d2d0:	f040 8096 	bne.w	800d400 <rclc_executor_spin_some.part.0+0x260>
 800d2d4:	68aa      	ldr	r2, [r5, #8]
 800d2d6:	e7e5      	b.n	800d2a4 <rclc_executor_spin_some.part.0+0x104>
 800d2d8:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800d2dc:	4640      	mov	r0, r8
 800d2de:	6849      	ldr	r1, [r1, #4]
 800d2e0:	f007 f968 	bl	80145b4 <rcl_wait_set_add_client>
 800d2e4:	2800      	cmp	r0, #0
 800d2e6:	d089      	beq.n	800d1fc <rclc_executor_spin_some.part.0+0x5c>
 800d2e8:	9001      	str	r0, [sp, #4]
 800d2ea:	f000 fa13 	bl	800d714 <rcutils_reset_error>
 800d2ee:	9801      	ldr	r0, [sp, #4]
 800d2f0:	4607      	mov	r7, r0
 800d2f2:	e020      	b.n	800d336 <rclc_executor_spin_some.part.0+0x196>
 800d2f4:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800d2f8:	4640      	mov	r0, r8
 800d2fa:	6849      	ldr	r1, [r1, #4]
 800d2fc:	f006 fdf2 	bl	8013ee4 <rcl_wait_set_add_subscription>
 800d300:	2800      	cmp	r0, #0
 800d302:	f43f af7b 	beq.w	800d1fc <rclc_executor_spin_some.part.0+0x5c>
 800d306:	e7ef      	b.n	800d2e8 <rclc_executor_spin_some.part.0+0x148>
 800d308:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800d30c:	4640      	mov	r0, r8
 800d30e:	6849      	ldr	r1, [r1, #4]
 800d310:	f007 f920 	bl	8014554 <rcl_wait_set_add_timer>
 800d314:	2800      	cmp	r0, #0
 800d316:	f43f af71 	beq.w	800d1fc <rclc_executor_spin_some.part.0+0x5c>
 800d31a:	e7e5      	b.n	800d2e8 <rclc_executor_spin_some.part.0+0x148>
 800d31c:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800d320:	4640      	mov	r0, r8
 800d322:	6849      	ldr	r1, [r1, #4]
 800d324:	f007 f8ea 	bl	80144fc <rcl_wait_set_add_guard_condition>
 800d328:	2800      	cmp	r0, #0
 800d32a:	f43f af67 	beq.w	800d1fc <rclc_executor_spin_some.part.0+0x5c>
 800d32e:	e7db      	b.n	800d2e8 <rclc_executor_spin_some.part.0+0x148>
 800d330:	f000 f9f0 	bl	800d714 <rcutils_reset_error>
 800d334:	2701      	movs	r7, #1
 800d336:	4638      	mov	r0, r7
 800d338:	b003      	add	sp, #12
 800d33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d33e:	f000 f9e9 	bl	800d714 <rcutils_reset_error>
 800d342:	4638      	mov	r0, r7
 800d344:	b003      	add	sp, #12
 800d346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d34a:	4627      	mov	r7, r4
 800d34c:	e7f3      	b.n	800d336 <rclc_executor_spin_some.part.0+0x196>
 800d34e:	68ab      	ldr	r3, [r5, #8]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d05a      	beq.n	800d40a <rclc_executor_spin_some.part.0+0x26a>
 800d354:	2400      	movs	r4, #0
 800d356:	4626      	mov	r6, r4
 800d358:	f240 1991 	movw	r9, #401	; 0x191
 800d35c:	e008      	b.n	800d370 <rclc_executor_spin_some.part.0+0x1d0>
 800d35e:	f7ff fd3b 	bl	800cdd8 <_rclc_check_for_new_data>
 800d362:	4604      	mov	r4, r0
 800d364:	b108      	cbz	r0, 800d36a <rclc_executor_spin_some.part.0+0x1ca>
 800d366:	4548      	cmp	r0, r9
 800d368:	d1ef      	bne.n	800d34a <rclc_executor_spin_some.part.0+0x1aa>
 800d36a:	68ab      	ldr	r3, [r5, #8]
 800d36c:	429e      	cmp	r6, r3
 800d36e:	d243      	bcs.n	800d3f8 <rclc_executor_spin_some.part.0+0x258>
 800d370:	686a      	ldr	r2, [r5, #4]
 800d372:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800d376:	4641      	mov	r1, r8
 800d378:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800d37c:	3601      	adds	r6, #1
 800d37e:	f1bc 0f00 	cmp.w	ip, #0
 800d382:	d1ec      	bne.n	800d35e <rclc_executor_spin_some.part.0+0x1be>
 800d384:	4619      	mov	r1, r3
 800d386:	4610      	mov	r0, r2
 800d388:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800d38c:	4798      	blx	r3
 800d38e:	2800      	cmp	r0, #0
 800d390:	d0db      	beq.n	800d34a <rclc_executor_spin_some.part.0+0x1aa>
 800d392:	68ab      	ldr	r3, [r5, #8]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d0d8      	beq.n	800d34a <rclc_executor_spin_some.part.0+0x1aa>
 800d398:	f04f 0a00 	mov.w	sl, #0
 800d39c:	f240 1691 	movw	r6, #401	; 0x191
 800d3a0:	f240 2959 	movw	r9, #601	; 0x259
 800d3a4:	e00b      	b.n	800d3be <rclc_executor_spin_some.part.0+0x21e>
 800d3a6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800d3aa:	b113      	cbz	r3, 800d3b2 <rclc_executor_spin_some.part.0+0x212>
 800d3ac:	f7ff fda4 	bl	800cef8 <_rclc_execute.part.0>
 800d3b0:	bb30      	cbnz	r0, 800d400 <rclc_executor_spin_some.part.0+0x260>
 800d3b2:	68ab      	ldr	r3, [r5, #8]
 800d3b4:	f10a 0a01 	add.w	sl, sl, #1
 800d3b8:	459a      	cmp	sl, r3
 800d3ba:	d2bc      	bcs.n	800d336 <rclc_executor_spin_some.part.0+0x196>
 800d3bc:	2400      	movs	r4, #0
 800d3be:	6868      	ldr	r0, [r5, #4]
 800d3c0:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800d3c4:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800d3c8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d0bc      	beq.n	800d34a <rclc_executor_spin_some.part.0+0x1aa>
 800d3d0:	4641      	mov	r1, r8
 800d3d2:	f7ff fd27 	bl	800ce24 <_rclc_take_new_data>
 800d3d6:	b118      	cbz	r0, 800d3e0 <rclc_executor_spin_some.part.0+0x240>
 800d3d8:	42b0      	cmp	r0, r6
 800d3da:	d001      	beq.n	800d3e0 <rclc_executor_spin_some.part.0+0x240>
 800d3dc:	4548      	cmp	r0, r9
 800d3de:	d10f      	bne.n	800d400 <rclc_executor_spin_some.part.0+0x260>
 800d3e0:	6868      	ldr	r0, [r5, #4]
 800d3e2:	eb10 000b 	adds.w	r0, r0, fp
 800d3e6:	d005      	beq.n	800d3f4 <rclc_executor_spin_some.part.0+0x254>
 800d3e8:	7843      	ldrb	r3, [r0, #1]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d0db      	beq.n	800d3a6 <rclc_executor_spin_some.part.0+0x206>
 800d3ee:	2b01      	cmp	r3, #1
 800d3f0:	d1df      	bne.n	800d3b2 <rclc_executor_spin_some.part.0+0x212>
 800d3f2:	e7db      	b.n	800d3ac <rclc_executor_spin_some.part.0+0x20c>
 800d3f4:	270b      	movs	r7, #11
 800d3f6:	e79e      	b.n	800d336 <rclc_executor_spin_some.part.0+0x196>
 800d3f8:	686a      	ldr	r2, [r5, #4]
 800d3fa:	e7c3      	b.n	800d384 <rclc_executor_spin_some.part.0+0x1e4>
 800d3fc:	686a      	ldr	r2, [r5, #4]
 800d3fe:	e72c      	b.n	800d25a <rclc_executor_spin_some.part.0+0xba>
 800d400:	4607      	mov	r7, r0
 800d402:	e798      	b.n	800d336 <rclc_executor_spin_some.part.0+0x196>
 800d404:	686a      	ldr	r2, [r5, #4]
 800d406:	461c      	mov	r4, r3
 800d408:	e727      	b.n	800d25a <rclc_executor_spin_some.part.0+0xba>
 800d40a:	686a      	ldr	r2, [r5, #4]
 800d40c:	461c      	mov	r4, r3
 800d40e:	e7b9      	b.n	800d384 <rclc_executor_spin_some.part.0+0x1e4>

0800d410 <rclc_executor_spin_some>:
 800d410:	b190      	cbz	r0, 800d438 <rclc_executor_spin_some+0x28>
 800d412:	b570      	push	{r4, r5, r6, lr}
 800d414:	4604      	mov	r4, r0
 800d416:	6800      	ldr	r0, [r0, #0]
 800d418:	4616      	mov	r6, r2
 800d41a:	461d      	mov	r5, r3
 800d41c:	f005 faa2 	bl	8012964 <rcl_context_is_valid>
 800d420:	b130      	cbz	r0, 800d430 <rclc_executor_spin_some+0x20>
 800d422:	4632      	mov	r2, r6
 800d424:	462b      	mov	r3, r5
 800d426:	4620      	mov	r0, r4
 800d428:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d42c:	f7ff beb8 	b.w	800d1a0 <rclc_executor_spin_some.part.0>
 800d430:	f000 f970 	bl	800d714 <rcutils_reset_error>
 800d434:	2001      	movs	r0, #1
 800d436:	bd70      	pop	{r4, r5, r6, pc}
 800d438:	200b      	movs	r0, #11
 800d43a:	4770      	bx	lr

0800d43c <rclc_executor_handle_counters_zero_init>:
 800d43c:	b140      	cbz	r0, 800d450 <rclc_executor_handle_counters_zero_init+0x14>
 800d43e:	2300      	movs	r3, #0
 800d440:	6003      	str	r3, [r0, #0]
 800d442:	6043      	str	r3, [r0, #4]
 800d444:	6083      	str	r3, [r0, #8]
 800d446:	60c3      	str	r3, [r0, #12]
 800d448:	6103      	str	r3, [r0, #16]
 800d44a:	6143      	str	r3, [r0, #20]
 800d44c:	4618      	mov	r0, r3
 800d44e:	4770      	bx	lr
 800d450:	200b      	movs	r0, #11
 800d452:	4770      	bx	lr

0800d454 <rclc_executor_handle_init>:
 800d454:	b178      	cbz	r0, 800d476 <rclc_executor_handle_init+0x22>
 800d456:	b430      	push	{r4, r5}
 800d458:	4603      	mov	r3, r0
 800d45a:	2209      	movs	r2, #9
 800d45c:	2000      	movs	r0, #0
 800d45e:	2400      	movs	r4, #0
 800d460:	2500      	movs	r5, #0
 800d462:	801a      	strh	r2, [r3, #0]
 800d464:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 800d468:	bc30      	pop	{r4, r5}
 800d46a:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800d46e:	6359      	str	r1, [r3, #52]	; 0x34
 800d470:	6318      	str	r0, [r3, #48]	; 0x30
 800d472:	8718      	strh	r0, [r3, #56]	; 0x38
 800d474:	4770      	bx	lr
 800d476:	200b      	movs	r0, #11
 800d478:	4770      	bx	lr
 800d47a:	bf00      	nop

0800d47c <rclc_support_init>:
 800d47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d480:	b086      	sub	sp, #24
 800d482:	2800      	cmp	r0, #0
 800d484:	d042      	beq.n	800d50c <rclc_support_init+0x90>
 800d486:	461c      	mov	r4, r3
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d03f      	beq.n	800d50c <rclc_support_init+0x90>
 800d48c:	460f      	mov	r7, r1
 800d48e:	4690      	mov	r8, r2
 800d490:	4606      	mov	r6, r0
 800d492:	f005 fd47 	bl	8012f24 <rcl_get_zero_initialized_init_options>
 800d496:	4603      	mov	r3, r0
 800d498:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800d49c:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d4a0:	9305      	str	r3, [sp, #20]
 800d4a2:	a805      	add	r0, sp, #20
 800d4a4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d4a8:	f005 fd3e 	bl	8012f28 <rcl_init_options_init>
 800d4ac:	4605      	mov	r5, r0
 800d4ae:	bb38      	cbnz	r0, 800d500 <rclc_support_init+0x84>
 800d4b0:	f005 fd38 	bl	8012f24 <rcl_get_zero_initialized_init_options>
 800d4b4:	4631      	mov	r1, r6
 800d4b6:	6030      	str	r0, [r6, #0]
 800d4b8:	a805      	add	r0, sp, #20
 800d4ba:	f005 fdab 	bl	8013014 <rcl_init_options_copy>
 800d4be:	4605      	mov	r5, r0
 800d4c0:	b9c0      	cbnz	r0, 800d4f4 <rclc_support_init+0x78>
 800d4c2:	ad02      	add	r5, sp, #8
 800d4c4:	4628      	mov	r0, r5
 800d4c6:	f005 fa43 	bl	8012950 <rcl_get_zero_initialized_context>
 800d4ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d4ce:	1d33      	adds	r3, r6, #4
 800d4d0:	e883 0003 	stmia.w	r3, {r0, r1}
 800d4d4:	4632      	mov	r2, r6
 800d4d6:	4641      	mov	r1, r8
 800d4d8:	4638      	mov	r0, r7
 800d4da:	f005 fc19 	bl	8012d10 <rcl_init>
 800d4de:	4605      	mov	r5, r0
 800d4e0:	b940      	cbnz	r0, 800d4f4 <rclc_support_init+0x78>
 800d4e2:	60f4      	str	r4, [r6, #12]
 800d4e4:	4622      	mov	r2, r4
 800d4e6:	f106 0110 	add.w	r1, r6, #16
 800d4ea:	2003      	movs	r0, #3
 800d4ec:	f006 f95c 	bl	80137a8 <rcl_clock_init>
 800d4f0:	4605      	mov	r5, r0
 800d4f2:	b108      	cbz	r0, 800d4f8 <rclc_support_init+0x7c>
 800d4f4:	f000 f90e 	bl	800d714 <rcutils_reset_error>
 800d4f8:	a805      	add	r0, sp, #20
 800d4fa:	f005 fd67 	bl	8012fcc <rcl_init_options_fini>
 800d4fe:	b108      	cbz	r0, 800d504 <rclc_support_init+0x88>
 800d500:	f000 f908 	bl	800d714 <rcutils_reset_error>
 800d504:	4628      	mov	r0, r5
 800d506:	b006      	add	sp, #24
 800d508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d50c:	250b      	movs	r5, #11
 800d50e:	4628      	mov	r0, r5
 800d510:	b006      	add	sp, #24
 800d512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d516:	bf00      	nop

0800d518 <rclc_node_init_with_options>:
 800d518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d51c:	b087      	sub	sp, #28
 800d51e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800d520:	b1e0      	cbz	r0, 800d55c <rclc_node_init_with_options+0x44>
 800d522:	460d      	mov	r5, r1
 800d524:	b1d1      	cbz	r1, 800d55c <rclc_node_init_with_options+0x44>
 800d526:	4616      	mov	r6, r2
 800d528:	b1c2      	cbz	r2, 800d55c <rclc_node_init_with_options+0x44>
 800d52a:	4698      	mov	r8, r3
 800d52c:	b1b3      	cbz	r3, 800d55c <rclc_node_init_with_options+0x44>
 800d52e:	b1af      	cbz	r7, 800d55c <rclc_node_init_with_options+0x44>
 800d530:	f10d 0910 	add.w	r9, sp, #16
 800d534:	4604      	mov	r4, r0
 800d536:	4648      	mov	r0, r9
 800d538:	f005 fe34 	bl	80131a4 <rcl_get_zero_initialized_node>
 800d53c:	e899 0003 	ldmia.w	r9, {r0, r1}
 800d540:	f108 0304 	add.w	r3, r8, #4
 800d544:	9700      	str	r7, [sp, #0]
 800d546:	4632      	mov	r2, r6
 800d548:	e884 0003 	stmia.w	r4, {r0, r1}
 800d54c:	4629      	mov	r1, r5
 800d54e:	4620      	mov	r0, r4
 800d550:	f005 fe32 	bl	80131b8 <rcl_node_init>
 800d554:	b930      	cbnz	r0, 800d564 <rclc_node_init_with_options+0x4c>
 800d556:	b007      	add	sp, #28
 800d558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d55c:	200b      	movs	r0, #11
 800d55e:	b007      	add	sp, #28
 800d560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d564:	9003      	str	r0, [sp, #12]
 800d566:	f000 f8d5 	bl	800d714 <rcutils_reset_error>
 800d56a:	9803      	ldr	r0, [sp, #12]
 800d56c:	b007      	add	sp, #28
 800d56e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d572:	bf00      	nop

0800d574 <rclc_publisher_init_default>:
 800d574:	b368      	cbz	r0, 800d5d2 <rclc_publisher_init_default+0x5e>
 800d576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d57a:	460d      	mov	r5, r1
 800d57c:	b09e      	sub	sp, #120	; 0x78
 800d57e:	b321      	cbz	r1, 800d5ca <rclc_publisher_init_default+0x56>
 800d580:	4616      	mov	r6, r2
 800d582:	b312      	cbz	r2, 800d5ca <rclc_publisher_init_default+0x56>
 800d584:	461f      	mov	r7, r3
 800d586:	b303      	cbz	r3, 800d5ca <rclc_publisher_init_default+0x56>
 800d588:	4604      	mov	r4, r0
 800d58a:	f7ff f969 	bl	800c860 <rcl_get_zero_initialized_publisher>
 800d58e:	f10d 0810 	add.w	r8, sp, #16
 800d592:	6020      	str	r0, [r4, #0]
 800d594:	4640      	mov	r0, r8
 800d596:	f7ff fa5f 	bl	800ca58 <rcl_publisher_get_default_options>
 800d59a:	490f      	ldr	r1, [pc, #60]	; (800d5d8 <rclc_publisher_init_default+0x64>)
 800d59c:	2250      	movs	r2, #80	; 0x50
 800d59e:	4640      	mov	r0, r8
 800d5a0:	f00b f881 	bl	80186a6 <memcpy>
 800d5a4:	f8cd 8000 	str.w	r8, [sp]
 800d5a8:	463b      	mov	r3, r7
 800d5aa:	4632      	mov	r2, r6
 800d5ac:	4629      	mov	r1, r5
 800d5ae:	4620      	mov	r0, r4
 800d5b0:	f7ff f95c 	bl	800c86c <rcl_publisher_init>
 800d5b4:	b910      	cbnz	r0, 800d5bc <rclc_publisher_init_default+0x48>
 800d5b6:	b01e      	add	sp, #120	; 0x78
 800d5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5bc:	9003      	str	r0, [sp, #12]
 800d5be:	f000 f8a9 	bl	800d714 <rcutils_reset_error>
 800d5c2:	9803      	ldr	r0, [sp, #12]
 800d5c4:	b01e      	add	sp, #120	; 0x78
 800d5c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5ca:	200b      	movs	r0, #11
 800d5cc:	b01e      	add	sp, #120	; 0x78
 800d5ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5d2:	200b      	movs	r0, #11
 800d5d4:	4770      	bx	lr
 800d5d6:	bf00      	nop
 800d5d8:	08019838 	.word	0x08019838

0800d5dc <rclc_subscription_init_default>:
 800d5dc:	b368      	cbz	r0, 800d63a <rclc_subscription_init_default+0x5e>
 800d5de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5e2:	460d      	mov	r5, r1
 800d5e4:	b0a0      	sub	sp, #128	; 0x80
 800d5e6:	b321      	cbz	r1, 800d632 <rclc_subscription_init_default+0x56>
 800d5e8:	4616      	mov	r6, r2
 800d5ea:	b312      	cbz	r2, 800d632 <rclc_subscription_init_default+0x56>
 800d5ec:	461f      	mov	r7, r3
 800d5ee:	b303      	cbz	r3, 800d632 <rclc_subscription_init_default+0x56>
 800d5f0:	4604      	mov	r4, r0
 800d5f2:	f7ff fa77 	bl	800cae4 <rcl_get_zero_initialized_subscription>
 800d5f6:	f10d 0810 	add.w	r8, sp, #16
 800d5fa:	6020      	str	r0, [r4, #0]
 800d5fc:	4640      	mov	r0, r8
 800d5fe:	f7ff fb6d 	bl	800ccdc <rcl_subscription_get_default_options>
 800d602:	490f      	ldr	r1, [pc, #60]	; (800d640 <rclc_subscription_init_default+0x64>)
 800d604:	2250      	movs	r2, #80	; 0x50
 800d606:	4640      	mov	r0, r8
 800d608:	f00b f84d 	bl	80186a6 <memcpy>
 800d60c:	f8cd 8000 	str.w	r8, [sp]
 800d610:	463b      	mov	r3, r7
 800d612:	4632      	mov	r2, r6
 800d614:	4629      	mov	r1, r5
 800d616:	4620      	mov	r0, r4
 800d618:	f7ff fa6a 	bl	800caf0 <rcl_subscription_init>
 800d61c:	b910      	cbnz	r0, 800d624 <rclc_subscription_init_default+0x48>
 800d61e:	b020      	add	sp, #128	; 0x80
 800d620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d624:	9003      	str	r0, [sp, #12]
 800d626:	f000 f875 	bl	800d714 <rcutils_reset_error>
 800d62a:	9803      	ldr	r0, [sp, #12]
 800d62c:	b020      	add	sp, #128	; 0x80
 800d62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d632:	200b      	movs	r0, #11
 800d634:	b020      	add	sp, #128	; 0x80
 800d636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d63a:	200b      	movs	r0, #11
 800d63c:	4770      	bx	lr
 800d63e:	bf00      	nop
 800d640:	08019888 	.word	0x08019888

0800d644 <__default_zero_allocate>:
 800d644:	f00a b9ec 	b.w	8017a20 <calloc>

0800d648 <__default_reallocate>:
 800d648:	f00a bb78 	b.w	8017d3c <realloc>

0800d64c <__default_deallocate>:
 800d64c:	f00a ba56 	b.w	8017afc <free>

0800d650 <__default_allocate>:
 800d650:	f00a ba4c 	b.w	8017aec <malloc>

0800d654 <rcutils_get_zero_initialized_allocator>:
 800d654:	b470      	push	{r4, r5, r6}
 800d656:	4d05      	ldr	r5, [pc, #20]	; (800d66c <rcutils_get_zero_initialized_allocator+0x18>)
 800d658:	4606      	mov	r6, r0
 800d65a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d65c:	4634      	mov	r4, r6
 800d65e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d660:	682b      	ldr	r3, [r5, #0]
 800d662:	6023      	str	r3, [r4, #0]
 800d664:	4630      	mov	r0, r6
 800d666:	bc70      	pop	{r4, r5, r6}
 800d668:	4770      	bx	lr
 800d66a:	bf00      	nop
 800d66c:	080198d8 	.word	0x080198d8

0800d670 <rcutils_set_default_allocator>:
 800d670:	b1a0      	cbz	r0, 800d69c <rcutils_set_default_allocator+0x2c>
 800d672:	6801      	ldr	r1, [r0, #0]
 800d674:	b199      	cbz	r1, 800d69e <rcutils_set_default_allocator+0x2e>
 800d676:	b430      	push	{r4, r5}
 800d678:	6844      	ldr	r4, [r0, #4]
 800d67a:	b194      	cbz	r4, 800d6a2 <rcutils_set_default_allocator+0x32>
 800d67c:	68c5      	ldr	r5, [r0, #12]
 800d67e:	b15d      	cbz	r5, 800d698 <rcutils_set_default_allocator+0x28>
 800d680:	6883      	ldr	r3, [r0, #8]
 800d682:	b18b      	cbz	r3, 800d6a8 <rcutils_set_default_allocator+0x38>
 800d684:	4a09      	ldr	r2, [pc, #36]	; (800d6ac <rcutils_set_default_allocator+0x3c>)
 800d686:	e9c2 1400 	strd	r1, r4, [r2]
 800d68a:	e9c2 3502 	strd	r3, r5, [r2, #8]
 800d68e:	2000      	movs	r0, #0
 800d690:	6110      	str	r0, [r2, #16]
 800d692:	2001      	movs	r0, #1
 800d694:	bc30      	pop	{r4, r5}
 800d696:	4770      	bx	lr
 800d698:	4628      	mov	r0, r5
 800d69a:	e7fb      	b.n	800d694 <rcutils_set_default_allocator+0x24>
 800d69c:	4770      	bx	lr
 800d69e:	4608      	mov	r0, r1
 800d6a0:	4770      	bx	lr
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	bc30      	pop	{r4, r5}
 800d6a6:	4770      	bx	lr
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	e7f3      	b.n	800d694 <rcutils_set_default_allocator+0x24>
 800d6ac:	2000003c 	.word	0x2000003c

0800d6b0 <rcutils_get_default_allocator>:
 800d6b0:	b470      	push	{r4, r5, r6}
 800d6b2:	4d05      	ldr	r5, [pc, #20]	; (800d6c8 <rcutils_get_default_allocator+0x18>)
 800d6b4:	4606      	mov	r6, r0
 800d6b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d6b8:	4634      	mov	r4, r6
 800d6ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d6bc:	682b      	ldr	r3, [r5, #0]
 800d6be:	6023      	str	r3, [r4, #0]
 800d6c0:	4630      	mov	r0, r6
 800d6c2:	bc70      	pop	{r4, r5, r6}
 800d6c4:	4770      	bx	lr
 800d6c6:	bf00      	nop
 800d6c8:	2000003c 	.word	0x2000003c

0800d6cc <rcutils_allocator_is_valid>:
 800d6cc:	b158      	cbz	r0, 800d6e6 <rcutils_allocator_is_valid+0x1a>
 800d6ce:	6803      	ldr	r3, [r0, #0]
 800d6d0:	b143      	cbz	r3, 800d6e4 <rcutils_allocator_is_valid+0x18>
 800d6d2:	6843      	ldr	r3, [r0, #4]
 800d6d4:	b133      	cbz	r3, 800d6e4 <rcutils_allocator_is_valid+0x18>
 800d6d6:	68c3      	ldr	r3, [r0, #12]
 800d6d8:	b123      	cbz	r3, 800d6e4 <rcutils_allocator_is_valid+0x18>
 800d6da:	6880      	ldr	r0, [r0, #8]
 800d6dc:	3800      	subs	r0, #0
 800d6de:	bf18      	it	ne
 800d6e0:	2001      	movne	r0, #1
 800d6e2:	4770      	bx	lr
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	4770      	bx	lr

0800d6e8 <rcutils_get_error_string>:
 800d6e8:	4b06      	ldr	r3, [pc, #24]	; (800d704 <rcutils_get_error_string+0x1c>)
 800d6ea:	781b      	ldrb	r3, [r3, #0]
 800d6ec:	b13b      	cbz	r3, 800d6fe <rcutils_get_error_string+0x16>
 800d6ee:	4b06      	ldr	r3, [pc, #24]	; (800d708 <rcutils_get_error_string+0x20>)
 800d6f0:	781a      	ldrb	r2, [r3, #0]
 800d6f2:	b90a      	cbnz	r2, 800d6f8 <rcutils_get_error_string+0x10>
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	701a      	strb	r2, [r3, #0]
 800d6f8:	4b04      	ldr	r3, [pc, #16]	; (800d70c <rcutils_get_error_string+0x24>)
 800d6fa:	7818      	ldrb	r0, [r3, #0]
 800d6fc:	4770      	bx	lr
 800d6fe:	4b04      	ldr	r3, [pc, #16]	; (800d710 <rcutils_get_error_string+0x28>)
 800d700:	7818      	ldrb	r0, [r3, #0]
 800d702:	4770      	bx	lr
 800d704:	20009c20 	.word	0x20009c20
 800d708:	20009c21 	.word	0x20009c21
 800d70c:	20009e88 	.word	0x20009e88
 800d710:	080198ec 	.word	0x080198ec

0800d714 <rcutils_reset_error>:
 800d714:	b4d0      	push	{r4, r6, r7}
 800d716:	4a07      	ldr	r2, [pc, #28]	; (800d734 <rcutils_reset_error+0x20>)
 800d718:	4807      	ldr	r0, [pc, #28]	; (800d738 <rcutils_reset_error+0x24>)
 800d71a:	4c08      	ldr	r4, [pc, #32]	; (800d73c <rcutils_reset_error+0x28>)
 800d71c:	4908      	ldr	r1, [pc, #32]	; (800d740 <rcutils_reset_error+0x2c>)
 800d71e:	2300      	movs	r3, #0
 800d720:	2600      	movs	r6, #0
 800d722:	2700      	movs	r7, #0
 800d724:	8013      	strh	r3, [r2, #0]
 800d726:	7003      	strb	r3, [r0, #0]
 800d728:	e9c2 6702 	strd	r6, r7, [r2, #8]
 800d72c:	7023      	strb	r3, [r4, #0]
 800d72e:	700b      	strb	r3, [r1, #0]
 800d730:	bcd0      	pop	{r4, r6, r7}
 800d732:	4770      	bx	lr
 800d734:	20009e90 	.word	0x20009e90
 800d738:	20009e88 	.word	0x20009e88
 800d73c:	20009c21 	.word	0x20009c21
 800d740:	20009c20 	.word	0x20009c20

0800d744 <rcutils_get_zero_initialized_string_map>:
 800d744:	4b01      	ldr	r3, [pc, #4]	; (800d74c <rcutils_get_zero_initialized_string_map+0x8>)
 800d746:	2000      	movs	r0, #0
 800d748:	6018      	str	r0, [r3, #0]
 800d74a:	4770      	bx	lr
 800d74c:	20009c24 	.word	0x20009c24

0800d750 <rcutils_string_map_reserve>:
 800d750:	2800      	cmp	r0, #0
 800d752:	d061      	beq.n	800d818 <rcutils_string_map_reserve+0xc8>
 800d754:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d758:	6805      	ldr	r5, [r0, #0]
 800d75a:	b083      	sub	sp, #12
 800d75c:	460c      	mov	r4, r1
 800d75e:	4606      	mov	r6, r0
 800d760:	b12d      	cbz	r5, 800d76e <rcutils_string_map_reserve+0x1e>
 800d762:	68eb      	ldr	r3, [r5, #12]
 800d764:	42a3      	cmp	r3, r4
 800d766:	d906      	bls.n	800d776 <rcutils_string_map_reserve+0x26>
 800d768:	461c      	mov	r4, r3
 800d76a:	2d00      	cmp	r5, #0
 800d76c:	d1f9      	bne.n	800d762 <rcutils_string_map_reserve+0x12>
 800d76e:	201f      	movs	r0, #31
 800d770:	b003      	add	sp, #12
 800d772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d776:	68ab      	ldr	r3, [r5, #8]
 800d778:	42a3      	cmp	r3, r4
 800d77a:	d049      	beq.n	800d810 <rcutils_string_map_reserve+0xc0>
 800d77c:	6a2f      	ldr	r7, [r5, #32]
 800d77e:	2c00      	cmp	r4, #0
 800d780:	d035      	beq.n	800d7ee <rcutils_string_map_reserve+0x9e>
 800d782:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800d786:	d245      	bcs.n	800d814 <rcutils_string_map_reserve+0xc4>
 800d788:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800d78c:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800d790:	6828      	ldr	r0, [r5, #0]
 800d792:	4641      	mov	r1, r8
 800d794:	463a      	mov	r2, r7
 800d796:	47c8      	blx	r9
 800d798:	2800      	cmp	r0, #0
 800d79a:	d03b      	beq.n	800d814 <rcutils_string_map_reserve+0xc4>
 800d79c:	6833      	ldr	r3, [r6, #0]
 800d79e:	463a      	mov	r2, r7
 800d7a0:	6018      	str	r0, [r3, #0]
 800d7a2:	4641      	mov	r1, r8
 800d7a4:	6858      	ldr	r0, [r3, #4]
 800d7a6:	47c8      	blx	r9
 800d7a8:	2800      	cmp	r0, #0
 800d7aa:	d033      	beq.n	800d814 <rcutils_string_map_reserve+0xc4>
 800d7ac:	6835      	ldr	r5, [r6, #0]
 800d7ae:	68ab      	ldr	r3, [r5, #8]
 800d7b0:	6068      	str	r0, [r5, #4]
 800d7b2:	42a3      	cmp	r3, r4
 800d7b4:	d227      	bcs.n	800d806 <rcutils_string_map_reserve+0xb6>
 800d7b6:	682a      	ldr	r2, [r5, #0]
 800d7b8:	eb00 0108 	add.w	r1, r0, r8
 800d7bc:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800d7c0:	428f      	cmp	r7, r1
 800d7c2:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800d7c6:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800d7ca:	d203      	bcs.n	800d7d4 <rcutils_string_map_reserve+0x84>
 800d7cc:	eb02 0108 	add.w	r1, r2, r8
 800d7d0:	428e      	cmp	r6, r1
 800d7d2:	d323      	bcc.n	800d81c <rcutils_string_map_reserve+0xcc>
 800d7d4:	1ae3      	subs	r3, r4, r3
 800d7d6:	009a      	lsls	r2, r3, #2
 800d7d8:	4638      	mov	r0, r7
 800d7da:	2100      	movs	r1, #0
 800d7dc:	9201      	str	r2, [sp, #4]
 800d7de:	f00a fe43 	bl	8018468 <memset>
 800d7e2:	9a01      	ldr	r2, [sp, #4]
 800d7e4:	4630      	mov	r0, r6
 800d7e6:	2100      	movs	r1, #0
 800d7e8:	f00a fe3e 	bl	8018468 <memset>
 800d7ec:	e00b      	b.n	800d806 <rcutils_string_map_reserve+0xb6>
 800d7ee:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800d7f2:	6828      	ldr	r0, [r5, #0]
 800d7f4:	4639      	mov	r1, r7
 800d7f6:	47c0      	blx	r8
 800d7f8:	6833      	ldr	r3, [r6, #0]
 800d7fa:	4639      	mov	r1, r7
 800d7fc:	6858      	ldr	r0, [r3, #4]
 800d7fe:	601c      	str	r4, [r3, #0]
 800d800:	47c0      	blx	r8
 800d802:	6835      	ldr	r5, [r6, #0]
 800d804:	606c      	str	r4, [r5, #4]
 800d806:	2000      	movs	r0, #0
 800d808:	60ac      	str	r4, [r5, #8]
 800d80a:	b003      	add	sp, #12
 800d80c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d810:	2000      	movs	r0, #0
 800d812:	e7ad      	b.n	800d770 <rcutils_string_map_reserve+0x20>
 800d814:	200a      	movs	r0, #10
 800d816:	e7ab      	b.n	800d770 <rcutils_string_map_reserve+0x20>
 800d818:	200b      	movs	r0, #11
 800d81a:	4770      	bx	lr
 800d81c:	1f13      	subs	r3, r2, #4
 800d81e:	f1ac 0c04 	sub.w	ip, ip, #4
 800d822:	4498      	add	r8, r3
 800d824:	4460      	add	r0, ip
 800d826:	4462      	add	r2, ip
 800d828:	2300      	movs	r3, #0
 800d82a:	f842 3f04 	str.w	r3, [r2, #4]!
 800d82e:	4542      	cmp	r2, r8
 800d830:	f840 3f04 	str.w	r3, [r0, #4]!
 800d834:	d1f9      	bne.n	800d82a <rcutils_string_map_reserve+0xda>
 800d836:	e7e6      	b.n	800d806 <rcutils_string_map_reserve+0xb6>

0800d838 <rcutils_string_map_init>:
 800d838:	b082      	sub	sp, #8
 800d83a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d83c:	460e      	mov	r6, r1
 800d83e:	a906      	add	r1, sp, #24
 800d840:	e881 000c 	stmia.w	r1, {r2, r3}
 800d844:	b380      	cbz	r0, 800d8a8 <rcutils_string_map_init+0x70>
 800d846:	6807      	ldr	r7, [r0, #0]
 800d848:	4604      	mov	r4, r0
 800d84a:	b12f      	cbz	r7, 800d858 <rcutils_string_map_init+0x20>
 800d84c:	251e      	movs	r5, #30
 800d84e:	4628      	mov	r0, r5
 800d850:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d854:	b002      	add	sp, #8
 800d856:	4770      	bx	lr
 800d858:	a806      	add	r0, sp, #24
 800d85a:	f7ff ff37 	bl	800d6cc <rcutils_allocator_is_valid>
 800d85e:	b318      	cbz	r0, 800d8a8 <rcutils_string_map_init+0x70>
 800d860:	9b06      	ldr	r3, [sp, #24]
 800d862:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d864:	2024      	movs	r0, #36	; 0x24
 800d866:	4798      	blx	r3
 800d868:	4605      	mov	r5, r0
 800d86a:	6020      	str	r0, [r4, #0]
 800d86c:	b310      	cbz	r0, 800d8b4 <rcutils_string_map_init+0x7c>
 800d86e:	f10d 0e18 	add.w	lr, sp, #24
 800d872:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d876:	f105 0c10 	add.w	ip, r5, #16
 800d87a:	e9c5 7700 	strd	r7, r7, [r5]
 800d87e:	e9c5 7702 	strd	r7, r7, [r5, #8]
 800d882:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d886:	f8de 3000 	ldr.w	r3, [lr]
 800d88a:	f8cc 3000 	str.w	r3, [ip]
 800d88e:	4631      	mov	r1, r6
 800d890:	4620      	mov	r0, r4
 800d892:	f7ff ff5d 	bl	800d750 <rcutils_string_map_reserve>
 800d896:	4605      	mov	r5, r0
 800d898:	2800      	cmp	r0, #0
 800d89a:	d0d8      	beq.n	800d84e <rcutils_string_map_init+0x16>
 800d89c:	9b07      	ldr	r3, [sp, #28]
 800d89e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d8a0:	6820      	ldr	r0, [r4, #0]
 800d8a2:	4798      	blx	r3
 800d8a4:	6027      	str	r7, [r4, #0]
 800d8a6:	e7d2      	b.n	800d84e <rcutils_string_map_init+0x16>
 800d8a8:	250b      	movs	r5, #11
 800d8aa:	4628      	mov	r0, r5
 800d8ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d8b0:	b002      	add	sp, #8
 800d8b2:	4770      	bx	lr
 800d8b4:	250a      	movs	r5, #10
 800d8b6:	e7ca      	b.n	800d84e <rcutils_string_map_init+0x16>

0800d8b8 <rcutils_string_map_fini>:
 800d8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8bc:	b082      	sub	sp, #8
 800d8be:	2800      	cmp	r0, #0
 800d8c0:	d039      	beq.n	800d936 <rcutils_string_map_fini+0x7e>
 800d8c2:	6804      	ldr	r4, [r0, #0]
 800d8c4:	4606      	mov	r6, r0
 800d8c6:	2c00      	cmp	r4, #0
 800d8c8:	d031      	beq.n	800d92e <rcutils_string_map_fini+0x76>
 800d8ca:	68a3      	ldr	r3, [r4, #8]
 800d8cc:	b323      	cbz	r3, 800d918 <rcutils_string_map_fini+0x60>
 800d8ce:	2500      	movs	r5, #0
 800d8d0:	6822      	ldr	r2, [r4, #0]
 800d8d2:	46a8      	mov	r8, r5
 800d8d4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800d8d8:	b1d8      	cbz	r0, 800d912 <rcutils_string_map_fini+0x5a>
 800d8da:	6a21      	ldr	r1, [r4, #32]
 800d8dc:	6967      	ldr	r7, [r4, #20]
 800d8de:	9101      	str	r1, [sp, #4]
 800d8e0:	47b8      	blx	r7
 800d8e2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d8e6:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800d8ea:	9901      	ldr	r1, [sp, #4]
 800d8ec:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d8f0:	47b8      	blx	r7
 800d8f2:	68e3      	ldr	r3, [r4, #12]
 800d8f4:	6862      	ldr	r2, [r4, #4]
 800d8f6:	3b01      	subs	r3, #1
 800d8f8:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800d8fc:	60e3      	str	r3, [r4, #12]
 800d8fe:	6834      	ldr	r4, [r6, #0]
 800d900:	68a3      	ldr	r3, [r4, #8]
 800d902:	3501      	adds	r5, #1
 800d904:	429d      	cmp	r5, r3
 800d906:	d207      	bcs.n	800d918 <rcutils_string_map_fini+0x60>
 800d908:	6822      	ldr	r2, [r4, #0]
 800d90a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800d90e:	2800      	cmp	r0, #0
 800d910:	d1e3      	bne.n	800d8da <rcutils_string_map_fini+0x22>
 800d912:	3501      	adds	r5, #1
 800d914:	429d      	cmp	r5, r3
 800d916:	d3dd      	bcc.n	800d8d4 <rcutils_string_map_fini+0x1c>
 800d918:	2100      	movs	r1, #0
 800d91a:	4630      	mov	r0, r6
 800d91c:	f7ff ff18 	bl	800d750 <rcutils_string_map_reserve>
 800d920:	4604      	mov	r4, r0
 800d922:	b920      	cbnz	r0, 800d92e <rcutils_string_map_fini+0x76>
 800d924:	6830      	ldr	r0, [r6, #0]
 800d926:	6943      	ldr	r3, [r0, #20]
 800d928:	6a01      	ldr	r1, [r0, #32]
 800d92a:	4798      	blx	r3
 800d92c:	6034      	str	r4, [r6, #0]
 800d92e:	4620      	mov	r0, r4
 800d930:	b002      	add	sp, #8
 800d932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d936:	240b      	movs	r4, #11
 800d938:	4620      	mov	r0, r4
 800d93a:	b002      	add	sp, #8
 800d93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d940 <rcutils_string_map_getn>:
 800d940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d944:	b082      	sub	sp, #8
 800d946:	b308      	cbz	r0, 800d98c <rcutils_string_map_getn+0x4c>
 800d948:	6804      	ldr	r4, [r0, #0]
 800d94a:	b304      	cbz	r4, 800d98e <rcutils_string_map_getn+0x4e>
 800d94c:	460d      	mov	r5, r1
 800d94e:	b1e9      	cbz	r1, 800d98c <rcutils_string_map_getn+0x4c>
 800d950:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800d954:	6827      	ldr	r7, [r4, #0]
 800d956:	f1b9 0f00 	cmp.w	r9, #0
 800d95a:	d017      	beq.n	800d98c <rcutils_string_map_getn+0x4c>
 800d95c:	4690      	mov	r8, r2
 800d95e:	3f04      	subs	r7, #4
 800d960:	2600      	movs	r6, #0
 800d962:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800d966:	9101      	str	r1, [sp, #4]
 800d968:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800d96c:	4608      	mov	r0, r1
 800d96e:	3601      	adds	r6, #1
 800d970:	b151      	cbz	r1, 800d988 <rcutils_string_map_getn+0x48>
 800d972:	f7f2 fc3f 	bl	80001f4 <strlen>
 800d976:	4540      	cmp	r0, r8
 800d978:	4602      	mov	r2, r0
 800d97a:	9901      	ldr	r1, [sp, #4]
 800d97c:	bf38      	it	cc
 800d97e:	4642      	movcc	r2, r8
 800d980:	4628      	mov	r0, r5
 800d982:	f00a fd86 	bl	8018492 <strncmp>
 800d986:	b130      	cbz	r0, 800d996 <rcutils_string_map_getn+0x56>
 800d988:	45b1      	cmp	r9, r6
 800d98a:	d1ea      	bne.n	800d962 <rcutils_string_map_getn+0x22>
 800d98c:	2400      	movs	r4, #0
 800d98e:	4620      	mov	r0, r4
 800d990:	b002      	add	sp, #8
 800d992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d996:	6863      	ldr	r3, [r4, #4]
 800d998:	f853 400a 	ldr.w	r4, [r3, sl]
 800d99c:	4620      	mov	r0, r4
 800d99e:	b002      	add	sp, #8
 800d9a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d9a4 <rcutils_system_time_now>:
 800d9a4:	b310      	cbz	r0, 800d9ec <rcutils_system_time_now+0x48>
 800d9a6:	b570      	push	{r4, r5, r6, lr}
 800d9a8:	b084      	sub	sp, #16
 800d9aa:	4669      	mov	r1, sp
 800d9ac:	4604      	mov	r4, r0
 800d9ae:	2001      	movs	r0, #1
 800d9b0:	f7f4 ff2a 	bl	8002808 <clock_gettime>
 800d9b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d9b8:	2800      	cmp	r0, #0
 800d9ba:	f171 0300 	sbcs.w	r3, r1, #0
 800d9be:	db12      	blt.n	800d9e6 <rcutils_system_time_now+0x42>
 800d9c0:	9d02      	ldr	r5, [sp, #8]
 800d9c2:	2d00      	cmp	r5, #0
 800d9c4:	db0c      	blt.n	800d9e0 <rcutils_system_time_now+0x3c>
 800d9c6:	4e0a      	ldr	r6, [pc, #40]	; (800d9f0 <rcutils_system_time_now+0x4c>)
 800d9c8:	fba0 2306 	umull	r2, r3, r0, r6
 800d9cc:	1952      	adds	r2, r2, r5
 800d9ce:	fb06 3301 	mla	r3, r6, r1, r3
 800d9d2:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800d9d6:	2000      	movs	r0, #0
 800d9d8:	e9c4 2300 	strd	r2, r3, [r4]
 800d9dc:	b004      	add	sp, #16
 800d9de:	bd70      	pop	{r4, r5, r6, pc}
 800d9e0:	ea50 0301 	orrs.w	r3, r0, r1
 800d9e4:	d1ef      	bne.n	800d9c6 <rcutils_system_time_now+0x22>
 800d9e6:	2002      	movs	r0, #2
 800d9e8:	b004      	add	sp, #16
 800d9ea:	bd70      	pop	{r4, r5, r6, pc}
 800d9ec:	200b      	movs	r0, #11
 800d9ee:	4770      	bx	lr
 800d9f0:	3b9aca00 	.word	0x3b9aca00

0800d9f4 <rcutils_steady_time_now>:
 800d9f4:	b310      	cbz	r0, 800da3c <rcutils_steady_time_now+0x48>
 800d9f6:	b570      	push	{r4, r5, r6, lr}
 800d9f8:	b084      	sub	sp, #16
 800d9fa:	4669      	mov	r1, sp
 800d9fc:	4604      	mov	r4, r0
 800d9fe:	2000      	movs	r0, #0
 800da00:	f7f4 ff02 	bl	8002808 <clock_gettime>
 800da04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800da08:	2800      	cmp	r0, #0
 800da0a:	f171 0300 	sbcs.w	r3, r1, #0
 800da0e:	db12      	blt.n	800da36 <rcutils_steady_time_now+0x42>
 800da10:	9d02      	ldr	r5, [sp, #8]
 800da12:	2d00      	cmp	r5, #0
 800da14:	db0c      	blt.n	800da30 <rcutils_steady_time_now+0x3c>
 800da16:	4e0a      	ldr	r6, [pc, #40]	; (800da40 <rcutils_steady_time_now+0x4c>)
 800da18:	fba0 2306 	umull	r2, r3, r0, r6
 800da1c:	1952      	adds	r2, r2, r5
 800da1e:	fb06 3301 	mla	r3, r6, r1, r3
 800da22:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800da26:	2000      	movs	r0, #0
 800da28:	e9c4 2300 	strd	r2, r3, [r4]
 800da2c:	b004      	add	sp, #16
 800da2e:	bd70      	pop	{r4, r5, r6, pc}
 800da30:	ea50 0301 	orrs.w	r3, r0, r1
 800da34:	d1ef      	bne.n	800da16 <rcutils_steady_time_now+0x22>
 800da36:	2002      	movs	r0, #2
 800da38:	b004      	add	sp, #16
 800da3a:	bd70      	pop	{r4, r5, r6, pc}
 800da3c:	200b      	movs	r0, #11
 800da3e:	4770      	bx	lr
 800da40:	3b9aca00 	.word	0x3b9aca00

0800da44 <rmw_get_default_publisher_options>:
 800da44:	2000      	movs	r0, #0
 800da46:	4770      	bx	lr

0800da48 <rmw_get_default_subscription_options>:
 800da48:	2200      	movs	r2, #0
 800da4a:	6002      	str	r2, [r0, #0]
 800da4c:	7102      	strb	r2, [r0, #4]
 800da4e:	4770      	bx	lr

0800da50 <rmw_get_zero_initialized_message_info>:
 800da50:	b470      	push	{r4, r5, r6}
 800da52:	4d07      	ldr	r5, [pc, #28]	; (800da70 <rmw_get_zero_initialized_message_info+0x20>)
 800da54:	4606      	mov	r6, r0
 800da56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da58:	4634      	mov	r4, r6
 800da5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800da5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800da60:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800da64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800da68:	4630      	mov	r0, r6
 800da6a:	bc70      	pop	{r4, r5, r6}
 800da6c:	4770      	bx	lr
 800da6e:	bf00      	nop
 800da70:	080196b0 	.word	0x080196b0

0800da74 <rmw_validate_full_topic_name>:
 800da74:	2800      	cmp	r0, #0
 800da76:	d062      	beq.n	800db3e <rmw_validate_full_topic_name+0xca>
 800da78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da7c:	460d      	mov	r5, r1
 800da7e:	2900      	cmp	r1, #0
 800da80:	d05f      	beq.n	800db42 <rmw_validate_full_topic_name+0xce>
 800da82:	4616      	mov	r6, r2
 800da84:	4604      	mov	r4, r0
 800da86:	f7f2 fbb5 	bl	80001f4 <strlen>
 800da8a:	b148      	cbz	r0, 800daa0 <rmw_validate_full_topic_name+0x2c>
 800da8c:	7823      	ldrb	r3, [r4, #0]
 800da8e:	2b2f      	cmp	r3, #47	; 0x2f
 800da90:	d00d      	beq.n	800daae <rmw_validate_full_topic_name+0x3a>
 800da92:	2302      	movs	r3, #2
 800da94:	602b      	str	r3, [r5, #0]
 800da96:	b13e      	cbz	r6, 800daa8 <rmw_validate_full_topic_name+0x34>
 800da98:	2000      	movs	r0, #0
 800da9a:	6030      	str	r0, [r6, #0]
 800da9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daa0:	2301      	movs	r3, #1
 800daa2:	602b      	str	r3, [r5, #0]
 800daa4:	2e00      	cmp	r6, #0
 800daa6:	d1f7      	bne.n	800da98 <rmw_validate_full_topic_name+0x24>
 800daa8:	2000      	movs	r0, #0
 800daaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daae:	1e47      	subs	r7, r0, #1
 800dab0:	5de3      	ldrb	r3, [r4, r7]
 800dab2:	2b2f      	cmp	r3, #47	; 0x2f
 800dab4:	d047      	beq.n	800db46 <rmw_validate_full_topic_name+0xd2>
 800dab6:	1e63      	subs	r3, r4, #1
 800dab8:	eb03 0900 	add.w	r9, r3, r0
 800dabc:	f1c4 0e01 	rsb	lr, r4, #1
 800dac0:	eb0e 0803 	add.w	r8, lr, r3
 800dac4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800dac8:	f021 0220 	bic.w	r2, r1, #32
 800dacc:	3a41      	subs	r2, #65	; 0x41
 800dace:	2a19      	cmp	r2, #25
 800dad0:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 800dad4:	d90c      	bls.n	800daf0 <rmw_validate_full_topic_name+0x7c>
 800dad6:	295f      	cmp	r1, #95	; 0x5f
 800dad8:	d00a      	beq.n	800daf0 <rmw_validate_full_topic_name+0x7c>
 800dada:	f1bc 0f0a 	cmp.w	ip, #10
 800dade:	d907      	bls.n	800daf0 <rmw_validate_full_topic_name+0x7c>
 800dae0:	2304      	movs	r3, #4
 800dae2:	602b      	str	r3, [r5, #0]
 800dae4:	2e00      	cmp	r6, #0
 800dae6:	d0df      	beq.n	800daa8 <rmw_validate_full_topic_name+0x34>
 800dae8:	f8c6 8000 	str.w	r8, [r6]
 800daec:	2000      	movs	r0, #0
 800daee:	e7d5      	b.n	800da9c <rmw_validate_full_topic_name+0x28>
 800daf0:	454b      	cmp	r3, r9
 800daf2:	d1e5      	bne.n	800dac0 <rmw_validate_full_topic_name+0x4c>
 800daf4:	f8df e084 	ldr.w	lr, [pc, #132]	; 800db7c <rmw_validate_full_topic_name+0x108>
 800daf8:	2300      	movs	r3, #0
 800dafa:	f107 0801 	add.w	r8, r7, #1
 800dafe:	e005      	b.n	800db0c <rmw_validate_full_topic_name+0x98>
 800db00:	4611      	mov	r1, r2
 800db02:	4288      	cmp	r0, r1
 800db04:	4613      	mov	r3, r2
 800db06:	f104 0401 	add.w	r4, r4, #1
 800db0a:	d925      	bls.n	800db58 <rmw_validate_full_topic_name+0xe4>
 800db0c:	429f      	cmp	r7, r3
 800db0e:	f103 0201 	add.w	r2, r3, #1
 800db12:	d01e      	beq.n	800db52 <rmw_validate_full_topic_name+0xde>
 800db14:	7821      	ldrb	r1, [r4, #0]
 800db16:	292f      	cmp	r1, #47	; 0x2f
 800db18:	d1f2      	bne.n	800db00 <rmw_validate_full_topic_name+0x8c>
 800db1a:	f894 c001 	ldrb.w	ip, [r4, #1]
 800db1e:	1c5a      	adds	r2, r3, #1
 800db20:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800db24:	4611      	mov	r1, r2
 800db26:	d024      	beq.n	800db72 <rmw_validate_full_topic_name+0xfe>
 800db28:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800db2c:	075b      	lsls	r3, r3, #29
 800db2e:	d5e8      	bpl.n	800db02 <rmw_validate_full_topic_name+0x8e>
 800db30:	2306      	movs	r3, #6
 800db32:	602b      	str	r3, [r5, #0]
 800db34:	2e00      	cmp	r6, #0
 800db36:	d0b7      	beq.n	800daa8 <rmw_validate_full_topic_name+0x34>
 800db38:	6032      	str	r2, [r6, #0]
 800db3a:	2000      	movs	r0, #0
 800db3c:	e7ae      	b.n	800da9c <rmw_validate_full_topic_name+0x28>
 800db3e:	200b      	movs	r0, #11
 800db40:	4770      	bx	lr
 800db42:	200b      	movs	r0, #11
 800db44:	e7aa      	b.n	800da9c <rmw_validate_full_topic_name+0x28>
 800db46:	2303      	movs	r3, #3
 800db48:	602b      	str	r3, [r5, #0]
 800db4a:	2e00      	cmp	r6, #0
 800db4c:	d0ac      	beq.n	800daa8 <rmw_validate_full_topic_name+0x34>
 800db4e:	6037      	str	r7, [r6, #0]
 800db50:	e7aa      	b.n	800daa8 <rmw_validate_full_topic_name+0x34>
 800db52:	4641      	mov	r1, r8
 800db54:	1c7a      	adds	r2, r7, #1
 800db56:	e7d4      	b.n	800db02 <rmw_validate_full_topic_name+0x8e>
 800db58:	28f7      	cmp	r0, #247	; 0xf7
 800db5a:	d802      	bhi.n	800db62 <rmw_validate_full_topic_name+0xee>
 800db5c:	2000      	movs	r0, #0
 800db5e:	6028      	str	r0, [r5, #0]
 800db60:	e79c      	b.n	800da9c <rmw_validate_full_topic_name+0x28>
 800db62:	2307      	movs	r3, #7
 800db64:	602b      	str	r3, [r5, #0]
 800db66:	2e00      	cmp	r6, #0
 800db68:	d09e      	beq.n	800daa8 <rmw_validate_full_topic_name+0x34>
 800db6a:	23f6      	movs	r3, #246	; 0xf6
 800db6c:	6033      	str	r3, [r6, #0]
 800db6e:	2000      	movs	r0, #0
 800db70:	e794      	b.n	800da9c <rmw_validate_full_topic_name+0x28>
 800db72:	2305      	movs	r3, #5
 800db74:	602b      	str	r3, [r5, #0]
 800db76:	2e00      	cmp	r6, #0
 800db78:	d1de      	bne.n	800db38 <rmw_validate_full_topic_name+0xc4>
 800db7a:	e795      	b.n	800daa8 <rmw_validate_full_topic_name+0x34>
 800db7c:	0801a0b8 	.word	0x0801a0b8

0800db80 <rmw_uros_set_custom_transport>:
 800db80:	b470      	push	{r4, r5, r6}
 800db82:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800db86:	b162      	cbz	r2, 800dba2 <rmw_uros_set_custom_transport+0x22>
 800db88:	b15b      	cbz	r3, 800dba2 <rmw_uros_set_custom_transport+0x22>
 800db8a:	b155      	cbz	r5, 800dba2 <rmw_uros_set_custom_transport+0x22>
 800db8c:	b14e      	cbz	r6, 800dba2 <rmw_uros_set_custom_transport+0x22>
 800db8e:	4c06      	ldr	r4, [pc, #24]	; (800dba8 <rmw_uros_set_custom_transport+0x28>)
 800db90:	7020      	strb	r0, [r4, #0]
 800db92:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800db96:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800db9a:	6166      	str	r6, [r4, #20]
 800db9c:	2000      	movs	r0, #0
 800db9e:	bc70      	pop	{r4, r5, r6}
 800dba0:	4770      	bx	lr
 800dba2:	200b      	movs	r0, #11
 800dba4:	bc70      	pop	{r4, r5, r6}
 800dba6:	4770      	bx	lr
 800dba8:	20009ea0 	.word	0x20009ea0

0800dbac <flush_session>:
 800dbac:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800dbae:	f002 bf03 	b.w	80109b8 <uxr_run_session_until_confirm_delivery>
 800dbb2:	bf00      	nop

0800dbb4 <rmw_publish>:
 800dbb4:	2800      	cmp	r0, #0
 800dbb6:	d053      	beq.n	800dc60 <rmw_publish+0xac>
 800dbb8:	b570      	push	{r4, r5, r6, lr}
 800dbba:	460d      	mov	r5, r1
 800dbbc:	b08e      	sub	sp, #56	; 0x38
 800dbbe:	2900      	cmp	r1, #0
 800dbc0:	d04b      	beq.n	800dc5a <rmw_publish+0xa6>
 800dbc2:	4604      	mov	r4, r0
 800dbc4:	6800      	ldr	r0, [r0, #0]
 800dbc6:	f000 fe33 	bl	800e830 <is_uxrce_rmw_identifier_valid>
 800dbca:	2800      	cmp	r0, #0
 800dbcc:	d045      	beq.n	800dc5a <rmw_publish+0xa6>
 800dbce:	6866      	ldr	r6, [r4, #4]
 800dbd0:	2e00      	cmp	r6, #0
 800dbd2:	d042      	beq.n	800dc5a <rmw_publish+0xa6>
 800dbd4:	69b4      	ldr	r4, [r6, #24]
 800dbd6:	4628      	mov	r0, r5
 800dbd8:	6923      	ldr	r3, [r4, #16]
 800dbda:	4798      	blx	r3
 800dbdc:	69f3      	ldr	r3, [r6, #28]
 800dbde:	9005      	str	r0, [sp, #20]
 800dbe0:	b113      	cbz	r3, 800dbe8 <rmw_publish+0x34>
 800dbe2:	a805      	add	r0, sp, #20
 800dbe4:	4798      	blx	r3
 800dbe6:	9805      	ldr	r0, [sp, #20]
 800dbe8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800dbec:	691b      	ldr	r3, [r3, #16]
 800dbee:	9000      	str	r0, [sp, #0]
 800dbf0:	6972      	ldr	r2, [r6, #20]
 800dbf2:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800dbf4:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800dbf8:	ab06      	add	r3, sp, #24
 800dbfa:	f003 fce5 	bl	80115c8 <uxr_prepare_output_stream>
 800dbfe:	b1d8      	cbz	r0, 800dc38 <rmw_publish+0x84>
 800dc00:	68a3      	ldr	r3, [r4, #8]
 800dc02:	4628      	mov	r0, r5
 800dc04:	a906      	add	r1, sp, #24
 800dc06:	4798      	blx	r3
 800dc08:	6a33      	ldr	r3, [r6, #32]
 800dc0a:	4604      	mov	r4, r0
 800dc0c:	b10b      	cbz	r3, 800dc12 <rmw_publish+0x5e>
 800dc0e:	a806      	add	r0, sp, #24
 800dc10:	4798      	blx	r3
 800dc12:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800dc16:	2b01      	cmp	r3, #1
 800dc18:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800dc1c:	d022      	beq.n	800dc64 <rmw_publish+0xb0>
 800dc1e:	6918      	ldr	r0, [r3, #16]
 800dc20:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800dc22:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800dc26:	f002 fec7 	bl	80109b8 <uxr_run_session_until_confirm_delivery>
 800dc2a:	4020      	ands	r0, r4
 800dc2c:	b2c4      	uxtb	r4, r0
 800dc2e:	f084 0001 	eor.w	r0, r4, #1
 800dc32:	b2c0      	uxtb	r0, r0
 800dc34:	b00e      	add	sp, #56	; 0x38
 800dc36:	bd70      	pop	{r4, r5, r6, pc}
 800dc38:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800dc3c:	4a0c      	ldr	r2, [pc, #48]	; (800dc70 <rmw_publish+0xbc>)
 800dc3e:	6918      	ldr	r0, [r3, #16]
 800dc40:	9b05      	ldr	r3, [sp, #20]
 800dc42:	9300      	str	r3, [sp, #0]
 800dc44:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800dc48:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800dc4c:	6972      	ldr	r2, [r6, #20]
 800dc4e:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800dc50:	ab06      	add	r3, sp, #24
 800dc52:	f003 fce9 	bl	8011628 <uxr_prepare_output_stream_fragmented>
 800dc56:	2800      	cmp	r0, #0
 800dc58:	d1d2      	bne.n	800dc00 <rmw_publish+0x4c>
 800dc5a:	2001      	movs	r0, #1
 800dc5c:	b00e      	add	sp, #56	; 0x38
 800dc5e:	bd70      	pop	{r4, r5, r6, pc}
 800dc60:	2001      	movs	r0, #1
 800dc62:	4770      	bx	lr
 800dc64:	6918      	ldr	r0, [r3, #16]
 800dc66:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800dc6a:	f002 fae9 	bl	8010240 <uxr_flash_output_streams>
 800dc6e:	e7de      	b.n	800dc2e <rmw_publish+0x7a>
 800dc70:	0800dbad 	.word	0x0800dbad

0800dc74 <rmw_create_publisher>:
 800dc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc78:	b087      	sub	sp, #28
 800dc7a:	2800      	cmp	r0, #0
 800dc7c:	f000 80cc 	beq.w	800de18 <rmw_create_publisher+0x1a4>
 800dc80:	460e      	mov	r6, r1
 800dc82:	2900      	cmp	r1, #0
 800dc84:	f000 80c8 	beq.w	800de18 <rmw_create_publisher+0x1a4>
 800dc88:	4604      	mov	r4, r0
 800dc8a:	6800      	ldr	r0, [r0, #0]
 800dc8c:	4615      	mov	r5, r2
 800dc8e:	4698      	mov	r8, r3
 800dc90:	f000 fdce 	bl	800e830 <is_uxrce_rmw_identifier_valid>
 800dc94:	2800      	cmp	r0, #0
 800dc96:	f000 80bf 	beq.w	800de18 <rmw_create_publisher+0x1a4>
 800dc9a:	2d00      	cmp	r5, #0
 800dc9c:	f000 80bc 	beq.w	800de18 <rmw_create_publisher+0x1a4>
 800dca0:	782b      	ldrb	r3, [r5, #0]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	f000 80b8 	beq.w	800de18 <rmw_create_publisher+0x1a4>
 800dca8:	f1b8 0f00 	cmp.w	r8, #0
 800dcac:	f000 80b4 	beq.w	800de18 <rmw_create_publisher+0x1a4>
 800dcb0:	485c      	ldr	r0, [pc, #368]	; (800de24 <rmw_create_publisher+0x1b0>)
 800dcb2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800dcb6:	f007 f953 	bl	8014f60 <get_memory>
 800dcba:	2800      	cmp	r0, #0
 800dcbc:	f000 80ac 	beq.w	800de18 <rmw_create_publisher+0x1a4>
 800dcc0:	68c4      	ldr	r4, [r0, #12]
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800dcc8:	f007 f9b2 	bl	8015030 <rmw_get_implementation_identifier>
 800dccc:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 800dcd0:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800dcd4:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800dcd8:	4628      	mov	r0, r5
 800dcda:	f7f2 fa8b 	bl	80001f4 <strlen>
 800dcde:	3001      	adds	r0, #1
 800dce0:	283c      	cmp	r0, #60	; 0x3c
 800dce2:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800dce6:	f200 8094 	bhi.w	800de12 <rmw_create_publisher+0x19e>
 800dcea:	4a4f      	ldr	r2, [pc, #316]	; (800de28 <rmw_create_publisher+0x1b4>)
 800dcec:	462b      	mov	r3, r5
 800dcee:	213c      	movs	r1, #60	; 0x3c
 800dcf0:	4650      	mov	r0, sl
 800dcf2:	f00a fa59 	bl	80181a8 <sniprintf>
 800dcf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dcfa:	e9c4 391f 	strd	r3, r9, [r4, #124]	; 0x7c
 800dcfe:	4641      	mov	r1, r8
 800dd00:	2250      	movs	r2, #80	; 0x50
 800dd02:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800dd06:	f00a fcce 	bl	80186a6 <memcpy>
 800dd0a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800dd0e:	4947      	ldr	r1, [pc, #284]	; (800de2c <rmw_create_publisher+0x1b8>)
 800dd10:	2b02      	cmp	r3, #2
 800dd12:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd16:	bf0c      	ite	eq
 800dd18:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800dd1c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800dd20:	67a3      	str	r3, [r4, #120]	; 0x78
 800dd22:	2300      	movs	r3, #0
 800dd24:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800dd28:	4630      	mov	r0, r6
 800dd2a:	f000 fd8f 	bl	800e84c <get_message_typesupport_handle>
 800dd2e:	2800      	cmp	r0, #0
 800dd30:	d06f      	beq.n	800de12 <rmw_create_publisher+0x19e>
 800dd32:	6842      	ldr	r2, [r0, #4]
 800dd34:	61a2      	str	r2, [r4, #24]
 800dd36:	2a00      	cmp	r2, #0
 800dd38:	d06b      	beq.n	800de12 <rmw_create_publisher+0x19e>
 800dd3a:	4629      	mov	r1, r5
 800dd3c:	4643      	mov	r3, r8
 800dd3e:	4648      	mov	r0, r9
 800dd40:	f007 fbc0 	bl	80154c4 <create_topic>
 800dd44:	6260      	str	r0, [r4, #36]	; 0x24
 800dd46:	2800      	cmp	r0, #0
 800dd48:	d063      	beq.n	800de12 <rmw_create_publisher+0x19e>
 800dd4a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800dd4e:	f241 5398 	movw	r3, #5528	; 0x1598
 800dd52:	2103      	movs	r1, #3
 800dd54:	5ad0      	ldrh	r0, [r2, r3]
 800dd56:	1c45      	adds	r5, r0, #1
 800dd58:	52d5      	strh	r5, [r2, r3]
 800dd5a:	f001 ffff 	bl	800fd5c <uxr_object_id>
 800dd5e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd62:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800dd66:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800dd6a:	6912      	ldr	r2, [r2, #16]
 800dd6c:	6120      	str	r0, [r4, #16]
 800dd6e:	f04f 0a06 	mov.w	sl, #6
 800dd72:	f8cd a000 	str.w	sl, [sp]
 800dd76:	6819      	ldr	r1, [r3, #0]
 800dd78:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800dd7c:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 800dd80:	6922      	ldr	r2, [r4, #16]
 800dd82:	f001 fe9b 	bl	800fabc <uxr_buffer_create_publisher_bin>
 800dd86:	4602      	mov	r2, r0
 800dd88:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800dd8c:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800dd90:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800dd94:	f000 fccc 	bl	800e730 <run_xrce_session>
 800dd98:	b3b8      	cbz	r0, 800de0a <rmw_create_publisher+0x196>
 800dd9a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800dd9e:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800dda2:	f241 539a 	movw	r3, #5530	; 0x159a
 800dda6:	2105      	movs	r1, #5
 800dda8:	5ad0      	ldrh	r0, [r2, r3]
 800ddaa:	1c45      	adds	r5, r0, #1
 800ddac:	52d5      	strh	r5, [r2, r3]
 800ddae:	f001 ffd5 	bl	800fd5c <uxr_object_id>
 800ddb2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800ddb6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ddba:	6915      	ldr	r5, [r2, #16]
 800ddbc:	6160      	str	r0, [r4, #20]
 800ddbe:	ae04      	add	r6, sp, #16
 800ddc0:	4641      	mov	r1, r8
 800ddc2:	4630      	mov	r0, r6
 800ddc4:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800ddc8:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800ddcc:	f000 fccc 	bl	800e768 <convert_qos_profile>
 800ddd0:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ddd4:	f8cd a00c 	str.w	sl, [sp, #12]
 800ddd8:	9001      	str	r0, [sp, #4]
 800ddda:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ddde:	f8db 3010 	ldr.w	r3, [fp, #16]
 800dde2:	9300      	str	r3, [sp, #0]
 800dde4:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
 800dde8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800ddec:	f8d8 1000 	ldr.w	r1, [r8]
 800ddf0:	4628      	mov	r0, r5
 800ddf2:	f001 fec1 	bl	800fb78 <uxr_buffer_create_datawriter_bin>
 800ddf6:	4602      	mov	r2, r0
 800ddf8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ddfc:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800de00:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800de04:	f000 fc94 	bl	800e730 <run_xrce_session>
 800de08:	b938      	cbnz	r0, 800de1a <rmw_create_publisher+0x1a6>
 800de0a:	4806      	ldr	r0, [pc, #24]	; (800de24 <rmw_create_publisher+0x1b0>)
 800de0c:	4621      	mov	r1, r4
 800de0e:	f007 f8b7 	bl	8014f80 <put_memory>
 800de12:	4638      	mov	r0, r7
 800de14:	f000 fb3a 	bl	800e48c <rmw_uxrce_fini_publisher_memory>
 800de18:	2700      	movs	r7, #0
 800de1a:	4638      	mov	r0, r7
 800de1c:	b007      	add	sp, #28
 800de1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de22:	bf00      	nop
 800de24:	20009ed0 	.word	0x20009ed0
 800de28:	08019924 	.word	0x08019924
 800de2c:	080198f0 	.word	0x080198f0

0800de30 <rmw_publisher_get_actual_qos>:
 800de30:	2000      	movs	r0, #0
 800de32:	4770      	bx	lr

0800de34 <rmw_destroy_publisher>:
 800de34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de36:	b128      	cbz	r0, 800de44 <rmw_destroy_publisher+0x10>
 800de38:	4604      	mov	r4, r0
 800de3a:	6800      	ldr	r0, [r0, #0]
 800de3c:	460d      	mov	r5, r1
 800de3e:	f000 fcf7 	bl	800e830 <is_uxrce_rmw_identifier_valid>
 800de42:	b910      	cbnz	r0, 800de4a <rmw_destroy_publisher+0x16>
 800de44:	2401      	movs	r4, #1
 800de46:	4620      	mov	r0, r4
 800de48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de4a:	6863      	ldr	r3, [r4, #4]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d0f9      	beq.n	800de44 <rmw_destroy_publisher+0x10>
 800de50:	2d00      	cmp	r5, #0
 800de52:	d0f7      	beq.n	800de44 <rmw_destroy_publisher+0x10>
 800de54:	6828      	ldr	r0, [r5, #0]
 800de56:	f000 fceb 	bl	800e830 <is_uxrce_rmw_identifier_valid>
 800de5a:	2800      	cmp	r0, #0
 800de5c:	d0f2      	beq.n	800de44 <rmw_destroy_publisher+0x10>
 800de5e:	686c      	ldr	r4, [r5, #4]
 800de60:	2c00      	cmp	r4, #0
 800de62:	d0ef      	beq.n	800de44 <rmw_destroy_publisher+0x10>
 800de64:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800de66:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800de6a:	f007 fb8d 	bl	8015588 <destroy_topic>
 800de6e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800de72:	6962      	ldr	r2, [r4, #20]
 800de74:	6918      	ldr	r0, [r3, #16]
 800de76:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800de7a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800de7e:	6819      	ldr	r1, [r3, #0]
 800de80:	f001 fd6a 	bl	800f958 <uxr_buffer_delete_entity>
 800de84:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800de88:	6922      	ldr	r2, [r4, #16]
 800de8a:	4603      	mov	r3, r0
 800de8c:	6908      	ldr	r0, [r1, #16]
 800de8e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800de92:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800de96:	6809      	ldr	r1, [r1, #0]
 800de98:	461c      	mov	r4, r3
 800de9a:	f001 fd5d 	bl	800f958 <uxr_buffer_delete_entity>
 800de9e:	4606      	mov	r6, r0
 800dea0:	6938      	ldr	r0, [r7, #16]
 800dea2:	4622      	mov	r2, r4
 800dea4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800dea8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800deac:	f000 fc40 	bl	800e730 <run_xrce_session>
 800deb0:	4604      	mov	r4, r0
 800deb2:	6938      	ldr	r0, [r7, #16]
 800deb4:	4632      	mov	r2, r6
 800deb6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800deba:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800debe:	f000 fc37 	bl	800e730 <run_xrce_session>
 800dec2:	b12c      	cbz	r4, 800ded0 <rmw_destroy_publisher+0x9c>
 800dec4:	b120      	cbz	r0, 800ded0 <rmw_destroy_publisher+0x9c>
 800dec6:	2400      	movs	r4, #0
 800dec8:	4628      	mov	r0, r5
 800deca:	f000 fadf 	bl	800e48c <rmw_uxrce_fini_publisher_memory>
 800dece:	e7ba      	b.n	800de46 <rmw_destroy_publisher+0x12>
 800ded0:	2402      	movs	r4, #2
 800ded2:	e7f9      	b.n	800dec8 <rmw_destroy_publisher+0x94>

0800ded4 <rmw_create_subscription>:
 800ded4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded8:	b08d      	sub	sp, #52	; 0x34
 800deda:	2800      	cmp	r0, #0
 800dedc:	f000 80cf 	beq.w	800e07e <rmw_create_subscription+0x1aa>
 800dee0:	460e      	mov	r6, r1
 800dee2:	2900      	cmp	r1, #0
 800dee4:	f000 80cb 	beq.w	800e07e <rmw_create_subscription+0x1aa>
 800dee8:	4604      	mov	r4, r0
 800deea:	6800      	ldr	r0, [r0, #0]
 800deec:	4615      	mov	r5, r2
 800deee:	4698      	mov	r8, r3
 800def0:	f000 fc9e 	bl	800e830 <is_uxrce_rmw_identifier_valid>
 800def4:	2800      	cmp	r0, #0
 800def6:	f000 80c2 	beq.w	800e07e <rmw_create_subscription+0x1aa>
 800defa:	2d00      	cmp	r5, #0
 800defc:	f000 80bf 	beq.w	800e07e <rmw_create_subscription+0x1aa>
 800df00:	782b      	ldrb	r3, [r5, #0]
 800df02:	2b00      	cmp	r3, #0
 800df04:	f000 80bb 	beq.w	800e07e <rmw_create_subscription+0x1aa>
 800df08:	f1b8 0f00 	cmp.w	r8, #0
 800df0c:	f000 80b7 	beq.w	800e07e <rmw_create_subscription+0x1aa>
 800df10:	485d      	ldr	r0, [pc, #372]	; (800e088 <rmw_create_subscription+0x1b4>)
 800df12:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800df16:	f007 f823 	bl	8014f60 <get_memory>
 800df1a:	4604      	mov	r4, r0
 800df1c:	2800      	cmp	r0, #0
 800df1e:	f000 80af 	beq.w	800e080 <rmw_create_subscription+0x1ac>
 800df22:	68c7      	ldr	r7, [r0, #12]
 800df24:	2300      	movs	r3, #0
 800df26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800df2a:	f007 f881 	bl	8015030 <rmw_get_implementation_identifier>
 800df2e:	f107 0a94 	add.w	sl, r7, #148	; 0x94
 800df32:	67f8      	str	r0, [r7, #124]	; 0x7c
 800df34:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 800df38:	4628      	mov	r0, r5
 800df3a:	f7f2 f95b 	bl	80001f4 <strlen>
 800df3e:	3001      	adds	r0, #1
 800df40:	283c      	cmp	r0, #60	; 0x3c
 800df42:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 800df46:	f200 8097 	bhi.w	800e078 <rmw_create_subscription+0x1a4>
 800df4a:	4a50      	ldr	r2, [pc, #320]	; (800e08c <rmw_create_subscription+0x1b8>)
 800df4c:	462b      	mov	r3, r5
 800df4e:	213c      	movs	r1, #60	; 0x3c
 800df50:	4650      	mov	r0, sl
 800df52:	f00a f929 	bl	80181a8 <sniprintf>
 800df56:	4641      	mov	r1, r8
 800df58:	f8c7 9020 	str.w	r9, [r7, #32]
 800df5c:	2250      	movs	r2, #80	; 0x50
 800df5e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800df62:	f00a fba0 	bl	80186a6 <memcpy>
 800df66:	494a      	ldr	r1, [pc, #296]	; (800e090 <rmw_create_subscription+0x1bc>)
 800df68:	4630      	mov	r0, r6
 800df6a:	f000 fc6f 	bl	800e84c <get_message_typesupport_handle>
 800df6e:	2800      	cmp	r0, #0
 800df70:	f000 8082 	beq.w	800e078 <rmw_create_subscription+0x1a4>
 800df74:	6842      	ldr	r2, [r0, #4]
 800df76:	61ba      	str	r2, [r7, #24]
 800df78:	2a00      	cmp	r2, #0
 800df7a:	d07d      	beq.n	800e078 <rmw_create_subscription+0x1a4>
 800df7c:	4629      	mov	r1, r5
 800df7e:	4643      	mov	r3, r8
 800df80:	4648      	mov	r0, r9
 800df82:	f007 fa9f 	bl	80154c4 <create_topic>
 800df86:	61f8      	str	r0, [r7, #28]
 800df88:	2800      	cmp	r0, #0
 800df8a:	d075      	beq.n	800e078 <rmw_create_subscription+0x1a4>
 800df8c:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800df90:	f241 539c 	movw	r3, #5532	; 0x159c
 800df94:	2104      	movs	r1, #4
 800df96:	5ad0      	ldrh	r0, [r2, r3]
 800df98:	1c45      	adds	r5, r0, #1
 800df9a:	52d5      	strh	r5, [r2, r3]
 800df9c:	f001 fede 	bl	800fd5c <uxr_object_id>
 800dfa0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dfa4:	6138      	str	r0, [r7, #16]
 800dfa6:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800dfaa:	2606      	movs	r6, #6
 800dfac:	9600      	str	r6, [sp, #0]
 800dfae:	6811      	ldr	r1, [r2, #0]
 800dfb0:	693a      	ldr	r2, [r7, #16]
 800dfb2:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800dfb6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800dfba:	f001 fdad 	bl	800fb18 <uxr_buffer_create_subscriber_bin>
 800dfbe:	4602      	mov	r2, r0
 800dfc0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800dfc4:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800dfc8:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800dfcc:	f000 fbb0 	bl	800e730 <run_xrce_session>
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	d04d      	beq.n	800e070 <rmw_create_subscription+0x19c>
 800dfd4:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800dfd8:	f241 539e 	movw	r3, #5534	; 0x159e
 800dfdc:	4631      	mov	r1, r6
 800dfde:	5ad0      	ldrh	r0, [r2, r3]
 800dfe0:	1c45      	adds	r5, r0, #1
 800dfe2:	52d5      	strh	r5, [r2, r3]
 800dfe4:	f001 feba 	bl	800fd5c <uxr_object_id>
 800dfe8:	ad08      	add	r5, sp, #32
 800dfea:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dfee:	69fb      	ldr	r3, [r7, #28]
 800dff0:	6178      	str	r0, [r7, #20]
 800dff2:	4641      	mov	r1, r8
 800dff4:	4628      	mov	r0, r5
 800dff6:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 800dffa:	9305      	str	r3, [sp, #20]
 800dffc:	f000 fbb4 	bl	800e768 <convert_qos_profile>
 800e000:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e004:	9b05      	ldr	r3, [sp, #20]
 800e006:	9001      	str	r0, [sp, #4]
 800e008:	9603      	str	r6, [sp, #12]
 800e00a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e00e:	691b      	ldr	r3, [r3, #16]
 800e010:	9300      	str	r3, [sp, #0]
 800e012:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800e016:	f8db 1000 	ldr.w	r1, [fp]
 800e01a:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 800e01e:	f001 fe23 	bl	800fc68 <uxr_buffer_create_datareader_bin>
 800e022:	4602      	mov	r2, r0
 800e024:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e028:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800e02c:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e030:	f000 fb7e 	bl	800e730 <run_xrce_session>
 800e034:	b1e0      	cbz	r0, 800e070 <rmw_create_subscription+0x19c>
 800e036:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 800e03a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800e03e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e042:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e046:	2200      	movs	r2, #0
 800e048:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 800e04c:	2b02      	cmp	r3, #2
 800e04e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e052:	bf0c      	ite	eq
 800e054:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 800e058:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 800e05c:	9307      	str	r3, [sp, #28]
 800e05e:	aa0a      	add	r2, sp, #40	; 0x28
 800e060:	9200      	str	r2, [sp, #0]
 800e062:	697a      	ldr	r2, [r7, #20]
 800e064:	6809      	ldr	r1, [r1, #0]
 800e066:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e06a:	f001 fea5 	bl	800fdb8 <uxr_buffer_request_data>
 800e06e:	e007      	b.n	800e080 <rmw_create_subscription+0x1ac>
 800e070:	4805      	ldr	r0, [pc, #20]	; (800e088 <rmw_create_subscription+0x1b4>)
 800e072:	4639      	mov	r1, r7
 800e074:	f006 ff84 	bl	8014f80 <put_memory>
 800e078:	4620      	mov	r0, r4
 800e07a:	f000 fa1d 	bl	800e4b8 <rmw_uxrce_fini_subscription_memory>
 800e07e:	2400      	movs	r4, #0
 800e080:	4620      	mov	r0, r4
 800e082:	b00d      	add	sp, #52	; 0x34
 800e084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e088:	2000d12c 	.word	0x2000d12c
 800e08c:	08019924 	.word	0x08019924
 800e090:	080198f0 	.word	0x080198f0

0800e094 <rmw_subscription_get_actual_qos>:
 800e094:	2000      	movs	r0, #0
 800e096:	4770      	bx	lr

0800e098 <rmw_destroy_subscription>:
 800e098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e09a:	b128      	cbz	r0, 800e0a8 <rmw_destroy_subscription+0x10>
 800e09c:	4604      	mov	r4, r0
 800e09e:	6800      	ldr	r0, [r0, #0]
 800e0a0:	460d      	mov	r5, r1
 800e0a2:	f000 fbc5 	bl	800e830 <is_uxrce_rmw_identifier_valid>
 800e0a6:	b910      	cbnz	r0, 800e0ae <rmw_destroy_subscription+0x16>
 800e0a8:	2401      	movs	r4, #1
 800e0aa:	4620      	mov	r0, r4
 800e0ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0ae:	6863      	ldr	r3, [r4, #4]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d0f9      	beq.n	800e0a8 <rmw_destroy_subscription+0x10>
 800e0b4:	2d00      	cmp	r5, #0
 800e0b6:	d0f7      	beq.n	800e0a8 <rmw_destroy_subscription+0x10>
 800e0b8:	6828      	ldr	r0, [r5, #0]
 800e0ba:	f000 fbb9 	bl	800e830 <is_uxrce_rmw_identifier_valid>
 800e0be:	2800      	cmp	r0, #0
 800e0c0:	d0f2      	beq.n	800e0a8 <rmw_destroy_subscription+0x10>
 800e0c2:	686c      	ldr	r4, [r5, #4]
 800e0c4:	2c00      	cmp	r4, #0
 800e0c6:	d0ef      	beq.n	800e0a8 <rmw_destroy_subscription+0x10>
 800e0c8:	6a26      	ldr	r6, [r4, #32]
 800e0ca:	6962      	ldr	r2, [r4, #20]
 800e0cc:	6930      	ldr	r0, [r6, #16]
 800e0ce:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e0d2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e0d6:	6819      	ldr	r1, [r3, #0]
 800e0d8:	f001 fea8 	bl	800fe2c <uxr_buffer_cancel_data>
 800e0dc:	4602      	mov	r2, r0
 800e0de:	6930      	ldr	r0, [r6, #16]
 800e0e0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e0e4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e0e8:	f000 fb22 	bl	800e730 <run_xrce_session>
 800e0ec:	69e0      	ldr	r0, [r4, #28]
 800e0ee:	f007 fa4b 	bl	8015588 <destroy_topic>
 800e0f2:	6a23      	ldr	r3, [r4, #32]
 800e0f4:	6962      	ldr	r2, [r4, #20]
 800e0f6:	6918      	ldr	r0, [r3, #16]
 800e0f8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e0fc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e100:	6819      	ldr	r1, [r3, #0]
 800e102:	f001 fc29 	bl	800f958 <uxr_buffer_delete_entity>
 800e106:	6a21      	ldr	r1, [r4, #32]
 800e108:	6922      	ldr	r2, [r4, #16]
 800e10a:	4603      	mov	r3, r0
 800e10c:	6908      	ldr	r0, [r1, #16]
 800e10e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e112:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e116:	6809      	ldr	r1, [r1, #0]
 800e118:	461c      	mov	r4, r3
 800e11a:	f001 fc1d 	bl	800f958 <uxr_buffer_delete_entity>
 800e11e:	4607      	mov	r7, r0
 800e120:	6930      	ldr	r0, [r6, #16]
 800e122:	4622      	mov	r2, r4
 800e124:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e128:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e12c:	f000 fb00 	bl	800e730 <run_xrce_session>
 800e130:	4604      	mov	r4, r0
 800e132:	6930      	ldr	r0, [r6, #16]
 800e134:	463a      	mov	r2, r7
 800e136:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e13a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e13e:	f000 faf7 	bl	800e730 <run_xrce_session>
 800e142:	b12c      	cbz	r4, 800e150 <rmw_destroy_subscription+0xb8>
 800e144:	b120      	cbz	r0, 800e150 <rmw_destroy_subscription+0xb8>
 800e146:	2400      	movs	r4, #0
 800e148:	4628      	mov	r0, r5
 800e14a:	f000 f9b5 	bl	800e4b8 <rmw_uxrce_fini_subscription_memory>
 800e14e:	e7ac      	b.n	800e0aa <rmw_destroy_subscription+0x12>
 800e150:	2402      	movs	r4, #2
 800e152:	e7f9      	b.n	800e148 <rmw_destroy_subscription+0xb0>

0800e154 <rmw_take_with_info>:
 800e154:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e156:	4604      	mov	r4, r0
 800e158:	6800      	ldr	r0, [r0, #0]
 800e15a:	b089      	sub	sp, #36	; 0x24
 800e15c:	460f      	mov	r7, r1
 800e15e:	4615      	mov	r5, r2
 800e160:	b128      	cbz	r0, 800e16e <rmw_take_with_info+0x1a>
 800e162:	4b24      	ldr	r3, [pc, #144]	; (800e1f4 <rmw_take_with_info+0xa0>)
 800e164:	6819      	ldr	r1, [r3, #0]
 800e166:	f7f2 f83b 	bl	80001e0 <strcmp>
 800e16a:	2800      	cmp	r0, #0
 800e16c:	d13e      	bne.n	800e1ec <rmw_take_with_info+0x98>
 800e16e:	b305      	cbz	r5, 800e1b2 <rmw_take_with_info+0x5e>
 800e170:	6864      	ldr	r4, [r4, #4]
 800e172:	2300      	movs	r3, #0
 800e174:	702b      	strb	r3, [r5, #0]
 800e176:	f000 fa63 	bl	800e640 <rmw_uxrce_clean_expired_static_input_buffer>
 800e17a:	4620      	mov	r0, r4
 800e17c:	f000 fa36 	bl	800e5ec <rmw_uxrce_find_static_input_buffer_by_owner>
 800e180:	4606      	mov	r6, r0
 800e182:	b1f0      	cbz	r0, 800e1c2 <rmw_take_with_info+0x6e>
 800e184:	68c1      	ldr	r1, [r0, #12]
 800e186:	4668      	mov	r0, sp
 800e188:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800e18c:	3110      	adds	r1, #16
 800e18e:	f001 fb73 	bl	800f878 <ucdr_init_buffer>
 800e192:	69a3      	ldr	r3, [r4, #24]
 800e194:	4639      	mov	r1, r7
 800e196:	68db      	ldr	r3, [r3, #12]
 800e198:	4668      	mov	r0, sp
 800e19a:	4798      	blx	r3
 800e19c:	4631      	mov	r1, r6
 800e19e:	4604      	mov	r4, r0
 800e1a0:	4815      	ldr	r0, [pc, #84]	; (800e1f8 <rmw_take_with_info+0xa4>)
 800e1a2:	f006 feed 	bl	8014f80 <put_memory>
 800e1a6:	702c      	strb	r4, [r5, #0]
 800e1a8:	f084 0001 	eor.w	r0, r4, #1
 800e1ac:	b2c0      	uxtb	r0, r0
 800e1ae:	b009      	add	sp, #36	; 0x24
 800e1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1b2:	6864      	ldr	r4, [r4, #4]
 800e1b4:	f000 fa44 	bl	800e640 <rmw_uxrce_clean_expired_static_input_buffer>
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	f000 fa17 	bl	800e5ec <rmw_uxrce_find_static_input_buffer_by_owner>
 800e1be:	4605      	mov	r5, r0
 800e1c0:	b910      	cbnz	r0, 800e1c8 <rmw_take_with_info+0x74>
 800e1c2:	2001      	movs	r0, #1
 800e1c4:	b009      	add	sp, #36	; 0x24
 800e1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1c8:	68e9      	ldr	r1, [r5, #12]
 800e1ca:	4668      	mov	r0, sp
 800e1cc:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800e1d0:	3110      	adds	r1, #16
 800e1d2:	f001 fb51 	bl	800f878 <ucdr_init_buffer>
 800e1d6:	69a3      	ldr	r3, [r4, #24]
 800e1d8:	4639      	mov	r1, r7
 800e1da:	68db      	ldr	r3, [r3, #12]
 800e1dc:	4668      	mov	r0, sp
 800e1de:	4798      	blx	r3
 800e1e0:	4629      	mov	r1, r5
 800e1e2:	4604      	mov	r4, r0
 800e1e4:	4804      	ldr	r0, [pc, #16]	; (800e1f8 <rmw_take_with_info+0xa4>)
 800e1e6:	f006 fecb 	bl	8014f80 <put_memory>
 800e1ea:	e7dd      	b.n	800e1a8 <rmw_take_with_info+0x54>
 800e1ec:	200c      	movs	r0, #12
 800e1ee:	b009      	add	sp, #36	; 0x24
 800e1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1f2:	bf00      	nop
 800e1f4:	08019e2c 	.word	0x08019e2c
 800e1f8:	20009ec0 	.word	0x20009ec0

0800e1fc <rmw_uxrce_init_service_memory>:
 800e1fc:	b1b2      	cbz	r2, 800e22c <rmw_uxrce_init_service_memory+0x30>
 800e1fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e200:	7a07      	ldrb	r7, [r0, #8]
 800e202:	4605      	mov	r5, r0
 800e204:	b98f      	cbnz	r7, 800e22a <rmw_uxrce_init_service_memory+0x2e>
 800e206:	e9c0 7700 	strd	r7, r7, [r0]
 800e20a:	460c      	mov	r4, r1
 800e20c:	23c8      	movs	r3, #200	; 0xc8
 800e20e:	2101      	movs	r1, #1
 800e210:	fb03 4602 	mla	r6, r3, r2, r4
 800e214:	60c3      	str	r3, [r0, #12]
 800e216:	7201      	strb	r1, [r0, #8]
 800e218:	4621      	mov	r1, r4
 800e21a:	4628      	mov	r0, r5
 800e21c:	f006 feb0 	bl	8014f80 <put_memory>
 800e220:	60e4      	str	r4, [r4, #12]
 800e222:	f804 7bc8 	strb.w	r7, [r4], #200
 800e226:	42a6      	cmp	r6, r4
 800e228:	d1f6      	bne.n	800e218 <rmw_uxrce_init_service_memory+0x1c>
 800e22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e22c:	4770      	bx	lr
 800e22e:	bf00      	nop

0800e230 <rmw_uxrce_init_client_memory>:
 800e230:	b1b2      	cbz	r2, 800e260 <rmw_uxrce_init_client_memory+0x30>
 800e232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e234:	7a07      	ldrb	r7, [r0, #8]
 800e236:	4605      	mov	r5, r0
 800e238:	b98f      	cbnz	r7, 800e25e <rmw_uxrce_init_client_memory+0x2e>
 800e23a:	e9c0 7700 	strd	r7, r7, [r0]
 800e23e:	460c      	mov	r4, r1
 800e240:	23c8      	movs	r3, #200	; 0xc8
 800e242:	2101      	movs	r1, #1
 800e244:	fb03 4602 	mla	r6, r3, r2, r4
 800e248:	60c3      	str	r3, [r0, #12]
 800e24a:	7201      	strb	r1, [r0, #8]
 800e24c:	4621      	mov	r1, r4
 800e24e:	4628      	mov	r0, r5
 800e250:	f006 fe96 	bl	8014f80 <put_memory>
 800e254:	60e4      	str	r4, [r4, #12]
 800e256:	f804 7bc8 	strb.w	r7, [r4], #200
 800e25a:	42a6      	cmp	r6, r4
 800e25c:	d1f6      	bne.n	800e24c <rmw_uxrce_init_client_memory+0x1c>
 800e25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e260:	4770      	bx	lr
 800e262:	bf00      	nop

0800e264 <rmw_uxrce_init_publisher_memory>:
 800e264:	b1b2      	cbz	r2, 800e294 <rmw_uxrce_init_publisher_memory+0x30>
 800e266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e268:	7a07      	ldrb	r7, [r0, #8]
 800e26a:	4605      	mov	r5, r0
 800e26c:	b98f      	cbnz	r7, 800e292 <rmw_uxrce_init_publisher_memory+0x2e>
 800e26e:	e9c0 7700 	strd	r7, r7, [r0]
 800e272:	460c      	mov	r4, r1
 800e274:	23d8      	movs	r3, #216	; 0xd8
 800e276:	2101      	movs	r1, #1
 800e278:	fb03 4602 	mla	r6, r3, r2, r4
 800e27c:	60c3      	str	r3, [r0, #12]
 800e27e:	7201      	strb	r1, [r0, #8]
 800e280:	4621      	mov	r1, r4
 800e282:	4628      	mov	r0, r5
 800e284:	f006 fe7c 	bl	8014f80 <put_memory>
 800e288:	60e4      	str	r4, [r4, #12]
 800e28a:	f804 7bd8 	strb.w	r7, [r4], #216
 800e28e:	42a6      	cmp	r6, r4
 800e290:	d1f6      	bne.n	800e280 <rmw_uxrce_init_publisher_memory+0x1c>
 800e292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e294:	4770      	bx	lr
 800e296:	bf00      	nop

0800e298 <rmw_uxrce_init_subscription_memory>:
 800e298:	b1b2      	cbz	r2, 800e2c8 <rmw_uxrce_init_subscription_memory+0x30>
 800e29a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e29c:	7a07      	ldrb	r7, [r0, #8]
 800e29e:	4605      	mov	r5, r0
 800e2a0:	b98f      	cbnz	r7, 800e2c6 <rmw_uxrce_init_subscription_memory+0x2e>
 800e2a2:	e9c0 7700 	strd	r7, r7, [r0]
 800e2a6:	460c      	mov	r4, r1
 800e2a8:	23d0      	movs	r3, #208	; 0xd0
 800e2aa:	2101      	movs	r1, #1
 800e2ac:	fb03 4602 	mla	r6, r3, r2, r4
 800e2b0:	60c3      	str	r3, [r0, #12]
 800e2b2:	7201      	strb	r1, [r0, #8]
 800e2b4:	4621      	mov	r1, r4
 800e2b6:	4628      	mov	r0, r5
 800e2b8:	f006 fe62 	bl	8014f80 <put_memory>
 800e2bc:	60e4      	str	r4, [r4, #12]
 800e2be:	f804 7bd0 	strb.w	r7, [r4], #208
 800e2c2:	42a6      	cmp	r6, r4
 800e2c4:	d1f6      	bne.n	800e2b4 <rmw_uxrce_init_subscription_memory+0x1c>
 800e2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2c8:	4770      	bx	lr
 800e2ca:	bf00      	nop

0800e2cc <rmw_uxrce_init_node_memory>:
 800e2cc:	b1b2      	cbz	r2, 800e2fc <rmw_uxrce_init_node_memory+0x30>
 800e2ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2d0:	7a07      	ldrb	r7, [r0, #8]
 800e2d2:	4605      	mov	r5, r0
 800e2d4:	b98f      	cbnz	r7, 800e2fa <rmw_uxrce_init_node_memory+0x2e>
 800e2d6:	e9c0 7700 	strd	r7, r7, [r0]
 800e2da:	460c      	mov	r4, r1
 800e2dc:	23a4      	movs	r3, #164	; 0xa4
 800e2de:	2101      	movs	r1, #1
 800e2e0:	fb03 4602 	mla	r6, r3, r2, r4
 800e2e4:	60c3      	str	r3, [r0, #12]
 800e2e6:	7201      	strb	r1, [r0, #8]
 800e2e8:	4621      	mov	r1, r4
 800e2ea:	4628      	mov	r0, r5
 800e2ec:	f006 fe48 	bl	8014f80 <put_memory>
 800e2f0:	60e4      	str	r4, [r4, #12]
 800e2f2:	f804 7ba4 	strb.w	r7, [r4], #164
 800e2f6:	42a6      	cmp	r6, r4
 800e2f8:	d1f6      	bne.n	800e2e8 <rmw_uxrce_init_node_memory+0x1c>
 800e2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2fc:	4770      	bx	lr
 800e2fe:	bf00      	nop

0800e300 <rmw_uxrce_init_session_memory>:
 800e300:	b1d2      	cbz	r2, 800e338 <rmw_uxrce_init_session_memory+0x38>
 800e302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e306:	7a07      	ldrb	r7, [r0, #8]
 800e308:	4605      	mov	r5, r0
 800e30a:	b99f      	cbnz	r7, 800e334 <rmw_uxrce_init_session_memory+0x34>
 800e30c:	e9c0 7700 	strd	r7, r7, [r0]
 800e310:	f241 53a8 	movw	r3, #5544	; 0x15a8
 800e314:	460c      	mov	r4, r1
 800e316:	2101      	movs	r1, #1
 800e318:	fb03 4602 	mla	r6, r3, r2, r4
 800e31c:	60c3      	str	r3, [r0, #12]
 800e31e:	4698      	mov	r8, r3
 800e320:	7201      	strb	r1, [r0, #8]
 800e322:	4621      	mov	r1, r4
 800e324:	4628      	mov	r0, r5
 800e326:	f006 fe2b 	bl	8014f80 <put_memory>
 800e32a:	60e4      	str	r4, [r4, #12]
 800e32c:	7027      	strb	r7, [r4, #0]
 800e32e:	4444      	add	r4, r8
 800e330:	42a6      	cmp	r6, r4
 800e332:	d1f6      	bne.n	800e322 <rmw_uxrce_init_session_memory+0x22>
 800e334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e338:	4770      	bx	lr
 800e33a:	bf00      	nop

0800e33c <rmw_uxrce_init_topic_memory>:
 800e33c:	b1c2      	cbz	r2, 800e370 <rmw_uxrce_init_topic_memory+0x34>
 800e33e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e340:	7a07      	ldrb	r7, [r0, #8]
 800e342:	4606      	mov	r6, r0
 800e344:	b99f      	cbnz	r7, 800e36e <rmw_uxrce_init_topic_memory+0x32>
 800e346:	e9c0 7700 	strd	r7, r7, [r0]
 800e34a:	460c      	mov	r4, r1
 800e34c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800e350:	2101      	movs	r1, #1
 800e352:	231c      	movs	r3, #28
 800e354:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e358:	7201      	strb	r1, [r0, #8]
 800e35a:	60c3      	str	r3, [r0, #12]
 800e35c:	4621      	mov	r1, r4
 800e35e:	4630      	mov	r0, r6
 800e360:	f006 fe0e 	bl	8014f80 <put_memory>
 800e364:	60e4      	str	r4, [r4, #12]
 800e366:	f804 7b1c 	strb.w	r7, [r4], #28
 800e36a:	42a5      	cmp	r5, r4
 800e36c:	d1f6      	bne.n	800e35c <rmw_uxrce_init_topic_memory+0x20>
 800e36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e370:	4770      	bx	lr
 800e372:	bf00      	nop

0800e374 <rmw_uxrce_init_static_input_buffer_memory>:
 800e374:	b1d2      	cbz	r2, 800e3ac <rmw_uxrce_init_static_input_buffer_memory+0x38>
 800e376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e378:	7a07      	ldrb	r7, [r0, #8]
 800e37a:	4606      	mov	r6, r0
 800e37c:	b9af      	cbnz	r7, 800e3aa <rmw_uxrce_init_static_input_buffer_memory+0x36>
 800e37e:	e9c0 7700 	strd	r7, r7, [r0]
 800e382:	460c      	mov	r4, r1
 800e384:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 800e388:	2101      	movs	r1, #1
 800e38a:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800e38e:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 800e392:	7201      	strb	r1, [r0, #8]
 800e394:	60c3      	str	r3, [r0, #12]
 800e396:	4621      	mov	r1, r4
 800e398:	4630      	mov	r0, r6
 800e39a:	f006 fdf1 	bl	8014f80 <put_memory>
 800e39e:	60e4      	str	r4, [r4, #12]
 800e3a0:	7027      	strb	r7, [r4, #0]
 800e3a2:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800e3a6:	42a5      	cmp	r5, r4
 800e3a8:	d1f5      	bne.n	800e396 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800e3aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3ac:	4770      	bx	lr
 800e3ae:	bf00      	nop

0800e3b0 <rmw_uxrce_init_init_options_impl_memory>:
 800e3b0:	b1b2      	cbz	r2, 800e3e0 <rmw_uxrce_init_init_options_impl_memory+0x30>
 800e3b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3b4:	7a07      	ldrb	r7, [r0, #8]
 800e3b6:	4605      	mov	r5, r0
 800e3b8:	b98f      	cbnz	r7, 800e3de <rmw_uxrce_init_init_options_impl_memory+0x2e>
 800e3ba:	e9c0 7700 	strd	r7, r7, [r0]
 800e3be:	460c      	mov	r4, r1
 800e3c0:	232c      	movs	r3, #44	; 0x2c
 800e3c2:	2101      	movs	r1, #1
 800e3c4:	fb03 4602 	mla	r6, r3, r2, r4
 800e3c8:	60c3      	str	r3, [r0, #12]
 800e3ca:	7201      	strb	r1, [r0, #8]
 800e3cc:	4621      	mov	r1, r4
 800e3ce:	4628      	mov	r0, r5
 800e3d0:	f006 fdd6 	bl	8014f80 <put_memory>
 800e3d4:	60e4      	str	r4, [r4, #12]
 800e3d6:	f804 7b2c 	strb.w	r7, [r4], #44
 800e3da:	42a6      	cmp	r6, r4
 800e3dc:	d1f6      	bne.n	800e3cc <rmw_uxrce_init_init_options_impl_memory+0x1c>
 800e3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3e0:	4770      	bx	lr
 800e3e2:	bf00      	nop

0800e3e4 <rmw_uxrce_init_wait_set_memory>:
 800e3e4:	b1c2      	cbz	r2, 800e418 <rmw_uxrce_init_wait_set_memory+0x34>
 800e3e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3e8:	7a07      	ldrb	r7, [r0, #8]
 800e3ea:	4606      	mov	r6, r0
 800e3ec:	b99f      	cbnz	r7, 800e416 <rmw_uxrce_init_wait_set_memory+0x32>
 800e3ee:	e9c0 7700 	strd	r7, r7, [r0]
 800e3f2:	460c      	mov	r4, r1
 800e3f4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800e3f8:	2101      	movs	r1, #1
 800e3fa:	231c      	movs	r3, #28
 800e3fc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e400:	7201      	strb	r1, [r0, #8]
 800e402:	60c3      	str	r3, [r0, #12]
 800e404:	4621      	mov	r1, r4
 800e406:	4630      	mov	r0, r6
 800e408:	f006 fdba 	bl	8014f80 <put_memory>
 800e40c:	60e4      	str	r4, [r4, #12]
 800e40e:	f804 7b1c 	strb.w	r7, [r4], #28
 800e412:	42a5      	cmp	r5, r4
 800e414:	d1f6      	bne.n	800e404 <rmw_uxrce_init_wait_set_memory+0x20>
 800e416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e418:	4770      	bx	lr
 800e41a:	bf00      	nop

0800e41c <rmw_uxrce_init_guard_condition_memory>:
 800e41c:	b1b2      	cbz	r2, 800e44c <rmw_uxrce_init_guard_condition_memory+0x30>
 800e41e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e420:	7a07      	ldrb	r7, [r0, #8]
 800e422:	4605      	mov	r5, r0
 800e424:	b98f      	cbnz	r7, 800e44a <rmw_uxrce_init_guard_condition_memory+0x2e>
 800e426:	e9c0 7700 	strd	r7, r7, [r0]
 800e42a:	460c      	mov	r4, r1
 800e42c:	2320      	movs	r3, #32
 800e42e:	2101      	movs	r1, #1
 800e430:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 800e434:	7201      	strb	r1, [r0, #8]
 800e436:	60c3      	str	r3, [r0, #12]
 800e438:	4621      	mov	r1, r4
 800e43a:	4628      	mov	r0, r5
 800e43c:	f006 fda0 	bl	8014f80 <put_memory>
 800e440:	60e4      	str	r4, [r4, #12]
 800e442:	f804 7b20 	strb.w	r7, [r4], #32
 800e446:	42a6      	cmp	r6, r4
 800e448:	d1f6      	bne.n	800e438 <rmw_uxrce_init_guard_condition_memory+0x1c>
 800e44a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e44c:	4770      	bx	lr
 800e44e:	bf00      	nop

0800e450 <rmw_uxrce_fini_session_memory>:
 800e450:	4601      	mov	r1, r0
 800e452:	4801      	ldr	r0, [pc, #4]	; (800e458 <rmw_uxrce_fini_session_memory+0x8>)
 800e454:	f006 bd94 	b.w	8014f80 <put_memory>
 800e458:	2000d068 	.word	0x2000d068

0800e45c <rmw_uxrce_fini_node_memory>:
 800e45c:	b538      	push	{r3, r4, r5, lr}
 800e45e:	4604      	mov	r4, r0
 800e460:	6800      	ldr	r0, [r0, #0]
 800e462:	b128      	cbz	r0, 800e470 <rmw_uxrce_fini_node_memory+0x14>
 800e464:	4b07      	ldr	r3, [pc, #28]	; (800e484 <rmw_uxrce_fini_node_memory+0x28>)
 800e466:	6819      	ldr	r1, [r3, #0]
 800e468:	f7f1 feba 	bl	80001e0 <strcmp>
 800e46c:	b940      	cbnz	r0, 800e480 <rmw_uxrce_fini_node_memory+0x24>
 800e46e:	6020      	str	r0, [r4, #0]
 800e470:	6861      	ldr	r1, [r4, #4]
 800e472:	b129      	cbz	r1, 800e480 <rmw_uxrce_fini_node_memory+0x24>
 800e474:	2500      	movs	r5, #0
 800e476:	4804      	ldr	r0, [pc, #16]	; (800e488 <rmw_uxrce_fini_node_memory+0x2c>)
 800e478:	610d      	str	r5, [r1, #16]
 800e47a:	f006 fd81 	bl	8014f80 <put_memory>
 800e47e:	6065      	str	r5, [r4, #4]
 800e480:	bd38      	pop	{r3, r4, r5, pc}
 800e482:	bf00      	nop
 800e484:	08019e2c 	.word	0x08019e2c
 800e488:	2000ce94 	.word	0x2000ce94

0800e48c <rmw_uxrce_fini_publisher_memory>:
 800e48c:	b510      	push	{r4, lr}
 800e48e:	4604      	mov	r4, r0
 800e490:	6800      	ldr	r0, [r0, #0]
 800e492:	b128      	cbz	r0, 800e4a0 <rmw_uxrce_fini_publisher_memory+0x14>
 800e494:	4b06      	ldr	r3, [pc, #24]	; (800e4b0 <rmw_uxrce_fini_publisher_memory+0x24>)
 800e496:	6819      	ldr	r1, [r3, #0]
 800e498:	f7f1 fea2 	bl	80001e0 <strcmp>
 800e49c:	b938      	cbnz	r0, 800e4ae <rmw_uxrce_fini_publisher_memory+0x22>
 800e49e:	6020      	str	r0, [r4, #0]
 800e4a0:	6861      	ldr	r1, [r4, #4]
 800e4a2:	b121      	cbz	r1, 800e4ae <rmw_uxrce_fini_publisher_memory+0x22>
 800e4a4:	4803      	ldr	r0, [pc, #12]	; (800e4b4 <rmw_uxrce_fini_publisher_memory+0x28>)
 800e4a6:	f006 fd6b 	bl	8014f80 <put_memory>
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	6063      	str	r3, [r4, #4]
 800e4ae:	bd10      	pop	{r4, pc}
 800e4b0:	08019e2c 	.word	0x08019e2c
 800e4b4:	20009ed0 	.word	0x20009ed0

0800e4b8 <rmw_uxrce_fini_subscription_memory>:
 800e4b8:	b510      	push	{r4, lr}
 800e4ba:	4604      	mov	r4, r0
 800e4bc:	6800      	ldr	r0, [r0, #0]
 800e4be:	b128      	cbz	r0, 800e4cc <rmw_uxrce_fini_subscription_memory+0x14>
 800e4c0:	4b06      	ldr	r3, [pc, #24]	; (800e4dc <rmw_uxrce_fini_subscription_memory+0x24>)
 800e4c2:	6819      	ldr	r1, [r3, #0]
 800e4c4:	f7f1 fe8c 	bl	80001e0 <strcmp>
 800e4c8:	b938      	cbnz	r0, 800e4da <rmw_uxrce_fini_subscription_memory+0x22>
 800e4ca:	6020      	str	r0, [r4, #0]
 800e4cc:	6861      	ldr	r1, [r4, #4]
 800e4ce:	b121      	cbz	r1, 800e4da <rmw_uxrce_fini_subscription_memory+0x22>
 800e4d0:	4803      	ldr	r0, [pc, #12]	; (800e4e0 <rmw_uxrce_fini_subscription_memory+0x28>)
 800e4d2:	f006 fd55 	bl	8014f80 <put_memory>
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	6063      	str	r3, [r4, #4]
 800e4da:	bd10      	pop	{r4, pc}
 800e4dc:	08019e2c 	.word	0x08019e2c
 800e4e0:	2000d12c 	.word	0x2000d12c

0800e4e4 <rmw_uxrce_fini_service_memory>:
 800e4e4:	b510      	push	{r4, lr}
 800e4e6:	4604      	mov	r4, r0
 800e4e8:	6800      	ldr	r0, [r0, #0]
 800e4ea:	b128      	cbz	r0, 800e4f8 <rmw_uxrce_fini_service_memory+0x14>
 800e4ec:	4b06      	ldr	r3, [pc, #24]	; (800e508 <rmw_uxrce_fini_service_memory+0x24>)
 800e4ee:	6819      	ldr	r1, [r3, #0]
 800e4f0:	f7f1 fe76 	bl	80001e0 <strcmp>
 800e4f4:	b938      	cbnz	r0, 800e506 <rmw_uxrce_fini_service_memory+0x22>
 800e4f6:	6020      	str	r0, [r4, #0]
 800e4f8:	6861      	ldr	r1, [r4, #4]
 800e4fa:	b121      	cbz	r1, 800e506 <rmw_uxrce_fini_service_memory+0x22>
 800e4fc:	4803      	ldr	r0, [pc, #12]	; (800e50c <rmw_uxrce_fini_service_memory+0x28>)
 800e4fe:	f006 fd3f 	bl	8014f80 <put_memory>
 800e502:	2300      	movs	r3, #0
 800e504:	6063      	str	r3, [r4, #4]
 800e506:	bd10      	pop	{r4, pc}
 800e508:	08019e2c 	.word	0x08019e2c
 800e50c:	2000d11c 	.word	0x2000d11c

0800e510 <rmw_uxrce_fini_client_memory>:
 800e510:	b510      	push	{r4, lr}
 800e512:	4604      	mov	r4, r0
 800e514:	6800      	ldr	r0, [r0, #0]
 800e516:	b128      	cbz	r0, 800e524 <rmw_uxrce_fini_client_memory+0x14>
 800e518:	4b06      	ldr	r3, [pc, #24]	; (800e534 <rmw_uxrce_fini_client_memory+0x24>)
 800e51a:	6819      	ldr	r1, [r3, #0]
 800e51c:	f7f1 fe60 	bl	80001e0 <strcmp>
 800e520:	b938      	cbnz	r0, 800e532 <rmw_uxrce_fini_client_memory+0x22>
 800e522:	6020      	str	r0, [r4, #0]
 800e524:	6861      	ldr	r1, [r4, #4]
 800e526:	b121      	cbz	r1, 800e532 <rmw_uxrce_fini_client_memory+0x22>
 800e528:	4803      	ldr	r0, [pc, #12]	; (800e538 <rmw_uxrce_fini_client_memory+0x28>)
 800e52a:	f006 fd29 	bl	8014f80 <put_memory>
 800e52e:	2300      	movs	r3, #0
 800e530:	6063      	str	r3, [r4, #4]
 800e532:	bd10      	pop	{r4, pc}
 800e534:	08019e2c 	.word	0x08019e2c
 800e538:	2000a750 	.word	0x2000a750

0800e53c <rmw_uxrce_fini_topic_memory>:
 800e53c:	b510      	push	{r4, lr}
 800e53e:	4601      	mov	r1, r0
 800e540:	4604      	mov	r4, r0
 800e542:	4803      	ldr	r0, [pc, #12]	; (800e550 <rmw_uxrce_fini_topic_memory+0x14>)
 800e544:	f006 fd1c 	bl	8014f80 <put_memory>
 800e548:	2300      	movs	r3, #0
 800e54a:	61a3      	str	r3, [r4, #24]
 800e54c:	bd10      	pop	{r4, pc}
 800e54e:	bf00      	nop
 800e550:	2000d058 	.word	0x2000d058

0800e554 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800e554:	b082      	sub	sp, #8
 800e556:	b4f0      	push	{r4, r5, r6, r7}
 800e558:	4923      	ldr	r1, [pc, #140]	; (800e5e8 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800e55a:	ac04      	add	r4, sp, #16
 800e55c:	e884 000c 	stmia.w	r4, {r2, r3}
 800e560:	680d      	ldr	r5, [r1, #0]
 800e562:	9c05      	ldr	r4, [sp, #20]
 800e564:	2d00      	cmp	r5, #0
 800e566:	d03d      	beq.n	800e5e4 <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 800e568:	462b      	mov	r3, r5
 800e56a:	2100      	movs	r1, #0
 800e56c:	68da      	ldr	r2, [r3, #12]
 800e56e:	689b      	ldr	r3, [r3, #8]
 800e570:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800e574:	4290      	cmp	r0, r2
 800e576:	bf08      	it	eq
 800e578:	3101      	addeq	r1, #1
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d1f6      	bne.n	800e56c <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800e57e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800e582:	2b02      	cmp	r3, #2
 800e584:	d026      	beq.n	800e5d4 <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 800e586:	d906      	bls.n	800e596 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800e588:	2b03      	cmp	r3, #3
 800e58a:	d004      	beq.n	800e596 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800e58c:	2100      	movs	r1, #0
 800e58e:	bcf0      	pop	{r4, r5, r6, r7}
 800e590:	4608      	mov	r0, r1
 800e592:	b002      	add	sp, #8
 800e594:	4770      	bx	lr
 800e596:	b304      	cbz	r4, 800e5da <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e598:	428c      	cmp	r4, r1
 800e59a:	d81e      	bhi.n	800e5da <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e59c:	2d00      	cmp	r5, #0
 800e59e:	d0f5      	beq.n	800e58c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e5a0:	2100      	movs	r1, #0
 800e5a2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800e5a6:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800e5aa:	e002      	b.n	800e5b2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800e5ac:	68ad      	ldr	r5, [r5, #8]
 800e5ae:	2d00      	cmp	r5, #0
 800e5b0:	d0ed      	beq.n	800e58e <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800e5b2:	68eb      	ldr	r3, [r5, #12]
 800e5b4:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800e5b8:	4290      	cmp	r0, r2
 800e5ba:	d1f7      	bne.n	800e5ac <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800e5bc:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800e5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c4:	42b2      	cmp	r2, r6
 800e5c6:	eb73 0407 	sbcs.w	r4, r3, r7
 800e5ca:	daef      	bge.n	800e5ac <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800e5cc:	4616      	mov	r6, r2
 800e5ce:	461f      	mov	r7, r3
 800e5d0:	4629      	mov	r1, r5
 800e5d2:	e7eb      	b.n	800e5ac <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800e5d4:	b10c      	cbz	r4, 800e5da <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e5d6:	428c      	cmp	r4, r1
 800e5d8:	d9d8      	bls.n	800e58c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e5da:	bcf0      	pop	{r4, r5, r6, r7}
 800e5dc:	4802      	ldr	r0, [pc, #8]	; (800e5e8 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800e5de:	b002      	add	sp, #8
 800e5e0:	f006 bcbe 	b.w	8014f60 <get_memory>
 800e5e4:	4629      	mov	r1, r5
 800e5e6:	e7ca      	b.n	800e57e <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800e5e8:	20009ec0 	.word	0x20009ec0

0800e5ec <rmw_uxrce_find_static_input_buffer_by_owner>:
 800e5ec:	4b12      	ldr	r3, [pc, #72]	; (800e638 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	b1fb      	cbz	r3, 800e632 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 800e5f2:	b4f0      	push	{r4, r5, r6, r7}
 800e5f4:	f04f 0c00 	mov.w	ip, #0
 800e5f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e5fc:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800e600:	e001      	b.n	800e606 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800e602:	689b      	ldr	r3, [r3, #8]
 800e604:	b193      	cbz	r3, 800e62c <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800e606:	68da      	ldr	r2, [r3, #12]
 800e608:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800e60c:	4288      	cmp	r0, r1
 800e60e:	d1f8      	bne.n	800e602 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800e610:	f602 0218 	addw	r2, r2, #2072	; 0x818
 800e614:	e9d2 6700 	ldrd	r6, r7, [r2]
 800e618:	42a6      	cmp	r6, r4
 800e61a:	eb77 0205 	sbcs.w	r2, r7, r5
 800e61e:	daf0      	bge.n	800e602 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800e620:	469c      	mov	ip, r3
 800e622:	689b      	ldr	r3, [r3, #8]
 800e624:	4634      	mov	r4, r6
 800e626:	463d      	mov	r5, r7
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d1ec      	bne.n	800e606 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800e62c:	4660      	mov	r0, ip
 800e62e:	bcf0      	pop	{r4, r5, r6, r7}
 800e630:	4770      	bx	lr
 800e632:	4618      	mov	r0, r3
 800e634:	4770      	bx	lr
 800e636:	bf00      	nop
 800e638:	20009ec0 	.word	0x20009ec0
 800e63c:	00000000 	.word	0x00000000

0800e640 <rmw_uxrce_clean_expired_static_input_buffer>:
 800e640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e644:	4e38      	ldr	r6, [pc, #224]	; (800e728 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 800e646:	f8d6 8000 	ldr.w	r8, [r6]
 800e64a:	b083      	sub	sp, #12
 800e64c:	f007 fbd2 	bl	8015df4 <rmw_uros_epoch_nanos>
 800e650:	f1b8 0f00 	cmp.w	r8, #0
 800e654:	d05f      	beq.n	800e716 <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800e656:	46b1      	mov	r9, r6
 800e658:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800e65c:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800e660:	2b04      	cmp	r3, #4
 800e662:	4682      	mov	sl, r0
 800e664:	468b      	mov	fp, r1
 800e666:	d02d      	beq.n	800e6c4 <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800e668:	2b05      	cmp	r3, #5
 800e66a:	d041      	beq.n	800e6f0 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 800e66c:	2b03      	cmp	r3, #3
 800e66e:	d029      	beq.n	800e6c4 <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800e670:	2200      	movs	r2, #0
 800e672:	2300      	movs	r3, #0
 800e674:	e9cd 2300 	strd	r2, r3, [sp]
 800e678:	2001      	movs	r0, #1
 800e67a:	2100      	movs	r1, #0
 800e67c:	9b00      	ldr	r3, [sp, #0]
 800e67e:	f606 0618 	addw	r6, r6, #2072	; 0x818
 800e682:	e9d6 6700 	ldrd	r6, r7, [r6]
 800e686:	18c2      	adds	r2, r0, r3
 800e688:	9b01      	ldr	r3, [sp, #4]
 800e68a:	eb41 0303 	adc.w	r3, r1, r3
 800e68e:	1994      	adds	r4, r2, r6
 800e690:	eb43 0507 	adc.w	r5, r3, r7
 800e694:	4554      	cmp	r4, sl
 800e696:	eb75 020b 	sbcs.w	r2, r5, fp
 800e69a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e69e:	db03      	blt.n	800e6a8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800e6a0:	45b2      	cmp	sl, r6
 800e6a2:	eb7b 0207 	sbcs.w	r2, fp, r7
 800e6a6:	da05      	bge.n	800e6b4 <rmw_uxrce_clean_expired_static_input_buffer+0x74>
 800e6a8:	4641      	mov	r1, r8
 800e6aa:	4648      	mov	r0, r9
 800e6ac:	9300      	str	r3, [sp, #0]
 800e6ae:	f006 fc67 	bl	8014f80 <put_memory>
 800e6b2:	9b00      	ldr	r3, [sp, #0]
 800e6b4:	b37b      	cbz	r3, 800e716 <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800e6b6:	4698      	mov	r8, r3
 800e6b8:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800e6bc:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800e6c0:	2b04      	cmp	r3, #4
 800e6c2:	d1d1      	bne.n	800e668 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 800e6c4:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800e6c8:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	; 0x40
 800e6cc:	e9cd 2300 	strd	r2, r3, [sp]
 800e6d0:	4313      	orrs	r3, r2
 800e6d2:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 800e6d6:	d015      	beq.n	800e704 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800e6d8:	9a01      	ldr	r2, [sp, #4]
 800e6da:	4b14      	ldr	r3, [pc, #80]	; (800e72c <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 800e6dc:	fb03 f702 	mul.w	r7, r3, r2
 800e6e0:	9a00      	ldr	r2, [sp, #0]
 800e6e2:	fba2 2303 	umull	r2, r3, r2, r3
 800e6e6:	e9cd 2300 	strd	r2, r3, [sp]
 800e6ea:	443b      	add	r3, r7
 800e6ec:	9301      	str	r3, [sp, #4]
 800e6ee:	e7c5      	b.n	800e67c <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800e6f0:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800e6f4:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
 800e6f8:	e9cd 2300 	strd	r2, r3, [sp]
 800e6fc:	4313      	orrs	r3, r2
 800e6fe:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 800e702:	d1e9      	bne.n	800e6d8 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 800e704:	ea50 0301 	orrs.w	r3, r0, r1
 800e708:	bf02      	ittt	eq
 800e70a:	a305      	addeq	r3, pc, #20	; (adr r3, 800e720 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 800e70c:	e9d3 2300 	ldrdeq	r2, r3, [r3]
 800e710:	e9cd 2300 	strdeq	r2, r3, [sp]
 800e714:	e7b2      	b.n	800e67c <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800e716:	b003      	add	sp, #12
 800e718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e71c:	f3af 8000 	nop.w
 800e720:	fc23ac00 	.word	0xfc23ac00
 800e724:	00000006 	.word	0x00000006
 800e728:	20009ec0 	.word	0x20009ec0
 800e72c:	3b9aca00 	.word	0x3b9aca00

0800e730 <run_xrce_session>:
 800e730:	b510      	push	{r4, lr}
 800e732:	788c      	ldrb	r4, [r1, #2]
 800e734:	b086      	sub	sp, #24
 800e736:	2c01      	cmp	r4, #1
 800e738:	f8ad 200e 	strh.w	r2, [sp, #14]
 800e73c:	d00c      	beq.n	800e758 <run_xrce_session+0x28>
 800e73e:	4619      	mov	r1, r3
 800e740:	2301      	movs	r3, #1
 800e742:	9300      	str	r3, [sp, #0]
 800e744:	f10d 020e 	add.w	r2, sp, #14
 800e748:	f10d 0317 	add.w	r3, sp, #23
 800e74c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e750:	f002 f958 	bl	8010a04 <uxr_run_session_until_all_status>
 800e754:	b006      	add	sp, #24
 800e756:	bd10      	pop	{r4, pc}
 800e758:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e75c:	f001 fd70 	bl	8010240 <uxr_flash_output_streams>
 800e760:	4620      	mov	r0, r4
 800e762:	b006      	add	sp, #24
 800e764:	bd10      	pop	{r4, pc}
 800e766:	bf00      	nop

0800e768 <convert_qos_profile>:
 800e768:	b430      	push	{r4, r5}
 800e76a:	7a0d      	ldrb	r5, [r1, #8]
 800e76c:	780c      	ldrb	r4, [r1, #0]
 800e76e:	7a4a      	ldrb	r2, [r1, #9]
 800e770:	8889      	ldrh	r1, [r1, #4]
 800e772:	8081      	strh	r1, [r0, #4]
 800e774:	f1a5 0502 	sub.w	r5, r5, #2
 800e778:	f1a4 0402 	sub.w	r4, r4, #2
 800e77c:	2a02      	cmp	r2, #2
 800e77e:	fab5 f585 	clz	r5, r5
 800e782:	fab4 f484 	clz	r4, r4
 800e786:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800e78a:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800e78e:	bf18      	it	ne
 800e790:	2200      	movne	r2, #0
 800e792:	7045      	strb	r5, [r0, #1]
 800e794:	7084      	strb	r4, [r0, #2]
 800e796:	7002      	strb	r2, [r0, #0]
 800e798:	bc30      	pop	{r4, r5}
 800e79a:	4770      	bx	lr

0800e79c <generate_type_name>:
 800e79c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e79e:	2300      	movs	r3, #0
 800e7a0:	700b      	strb	r3, [r1, #0]
 800e7a2:	6803      	ldr	r3, [r0, #0]
 800e7a4:	b087      	sub	sp, #28
 800e7a6:	4614      	mov	r4, r2
 800e7a8:	b1d3      	cbz	r3, 800e7e0 <generate_type_name+0x44>
 800e7aa:	4d0f      	ldr	r5, [pc, #60]	; (800e7e8 <generate_type_name+0x4c>)
 800e7ac:	462f      	mov	r7, r5
 800e7ae:	4a0f      	ldr	r2, [pc, #60]	; (800e7ec <generate_type_name+0x50>)
 800e7b0:	4e0f      	ldr	r6, [pc, #60]	; (800e7f0 <generate_type_name+0x54>)
 800e7b2:	6840      	ldr	r0, [r0, #4]
 800e7b4:	9004      	str	r0, [sp, #16]
 800e7b6:	e9cd 6201 	strd	r6, r2, [sp, #4]
 800e7ba:	4608      	mov	r0, r1
 800e7bc:	9205      	str	r2, [sp, #20]
 800e7be:	9503      	str	r5, [sp, #12]
 800e7c0:	4a0c      	ldr	r2, [pc, #48]	; (800e7f4 <generate_type_name+0x58>)
 800e7c2:	9700      	str	r7, [sp, #0]
 800e7c4:	4621      	mov	r1, r4
 800e7c6:	f009 fcef 	bl	80181a8 <sniprintf>
 800e7ca:	2800      	cmp	r0, #0
 800e7cc:	db05      	blt.n	800e7da <generate_type_name+0x3e>
 800e7ce:	4284      	cmp	r4, r0
 800e7d0:	bfd4      	ite	le
 800e7d2:	2000      	movle	r0, #0
 800e7d4:	2001      	movgt	r0, #1
 800e7d6:	b007      	add	sp, #28
 800e7d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7da:	2000      	movs	r0, #0
 800e7dc:	b007      	add	sp, #28
 800e7de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7e0:	4b05      	ldr	r3, [pc, #20]	; (800e7f8 <generate_type_name+0x5c>)
 800e7e2:	4d01      	ldr	r5, [pc, #4]	; (800e7e8 <generate_type_name+0x4c>)
 800e7e4:	461f      	mov	r7, r3
 800e7e6:	e7e2      	b.n	800e7ae <generate_type_name+0x12>
 800e7e8:	08019914 	.word	0x08019914
 800e7ec:	08019928 	.word	0x08019928
 800e7f0:	0801992c 	.word	0x0801992c
 800e7f4:	08019918 	.word	0x08019918
 800e7f8:	08019c04 	.word	0x08019c04

0800e7fc <generate_topic_name>:
 800e7fc:	b510      	push	{r4, lr}
 800e7fe:	b082      	sub	sp, #8
 800e800:	4b09      	ldr	r3, [pc, #36]	; (800e828 <generate_topic_name+0x2c>)
 800e802:	9000      	str	r0, [sp, #0]
 800e804:	4614      	mov	r4, r2
 800e806:	4608      	mov	r0, r1
 800e808:	4611      	mov	r1, r2
 800e80a:	4a08      	ldr	r2, [pc, #32]	; (800e82c <generate_topic_name+0x30>)
 800e80c:	f009 fccc 	bl	80181a8 <sniprintf>
 800e810:	2800      	cmp	r0, #0
 800e812:	db05      	blt.n	800e820 <generate_topic_name+0x24>
 800e814:	4284      	cmp	r4, r0
 800e816:	bfd4      	ite	le
 800e818:	2000      	movle	r0, #0
 800e81a:	2001      	movgt	r0, #1
 800e81c:	b002      	add	sp, #8
 800e81e:	bd10      	pop	{r4, pc}
 800e820:	2000      	movs	r0, #0
 800e822:	b002      	add	sp, #8
 800e824:	bd10      	pop	{r4, pc}
 800e826:	bf00      	nop
 800e828:	08019938 	.word	0x08019938
 800e82c:	08019930 	.word	0x08019930

0800e830 <is_uxrce_rmw_identifier_valid>:
 800e830:	b510      	push	{r4, lr}
 800e832:	4604      	mov	r4, r0
 800e834:	b140      	cbz	r0, 800e848 <is_uxrce_rmw_identifier_valid+0x18>
 800e836:	f006 fbfb 	bl	8015030 <rmw_get_implementation_identifier>
 800e83a:	4601      	mov	r1, r0
 800e83c:	4620      	mov	r0, r4
 800e83e:	f7f1 fccf 	bl	80001e0 <strcmp>
 800e842:	fab0 f080 	clz	r0, r0
 800e846:	0940      	lsrs	r0, r0, #5
 800e848:	bd10      	pop	{r4, pc}
 800e84a:	bf00      	nop

0800e84c <get_message_typesupport_handle>:
 800e84c:	6883      	ldr	r3, [r0, #8]
 800e84e:	4718      	bx	r3

0800e850 <get_message_typesupport_handle_function>:
 800e850:	b510      	push	{r4, lr}
 800e852:	4604      	mov	r4, r0
 800e854:	6800      	ldr	r0, [r0, #0]
 800e856:	f7f1 fcc3 	bl	80001e0 <strcmp>
 800e85a:	2800      	cmp	r0, #0
 800e85c:	bf0c      	ite	eq
 800e85e:	4620      	moveq	r0, r4
 800e860:	2000      	movne	r0, #0
 800e862:	bd10      	pop	{r4, pc}

0800e864 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800e864:	f000 b82a 	b.w	800e8bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>

0800e868 <_Int32__max_serialized_size>:
 800e868:	b508      	push	{r3, lr}
 800e86a:	2104      	movs	r1, #4
 800e86c:	2000      	movs	r0, #0
 800e86e:	f001 f807 	bl	800f880 <ucdr_alignment>
 800e872:	3004      	adds	r0, #4
 800e874:	bd08      	pop	{r3, pc}
 800e876:	bf00      	nop

0800e878 <_Int32__cdr_deserialize>:
 800e878:	b109      	cbz	r1, 800e87e <_Int32__cdr_deserialize+0x6>
 800e87a:	f000 bf1b 	b.w	800f6b4 <ucdr_deserialize_int32_t>
 800e87e:	4608      	mov	r0, r1
 800e880:	4770      	bx	lr
 800e882:	bf00      	nop

0800e884 <get_serialized_size_std_msgs__msg__Int32>:
 800e884:	b130      	cbz	r0, 800e894 <get_serialized_size_std_msgs__msg__Int32+0x10>
 800e886:	b508      	push	{r3, lr}
 800e888:	4608      	mov	r0, r1
 800e88a:	2104      	movs	r1, #4
 800e88c:	f000 fff8 	bl	800f880 <ucdr_alignment>
 800e890:	3004      	adds	r0, #4
 800e892:	bd08      	pop	{r3, pc}
 800e894:	4770      	bx	lr
 800e896:	bf00      	nop

0800e898 <_Int32__cdr_serialize>:
 800e898:	460a      	mov	r2, r1
 800e89a:	b118      	cbz	r0, 800e8a4 <_Int32__cdr_serialize+0xc>
 800e89c:	6801      	ldr	r1, [r0, #0]
 800e89e:	4610      	mov	r0, r2
 800e8a0:	f000 be70 	b.w	800f584 <ucdr_serialize_int32_t>
 800e8a4:	4770      	bx	lr
 800e8a6:	bf00      	nop

0800e8a8 <_Int32__get_serialized_size>:
 800e8a8:	b130      	cbz	r0, 800e8b8 <_Int32__get_serialized_size+0x10>
 800e8aa:	b508      	push	{r3, lr}
 800e8ac:	2104      	movs	r1, #4
 800e8ae:	2000      	movs	r0, #0
 800e8b0:	f000 ffe6 	bl	800f880 <ucdr_alignment>
 800e8b4:	3004      	adds	r0, #4
 800e8b6:	bd08      	pop	{r3, pc}
 800e8b8:	4770      	bx	lr
 800e8ba:	bf00      	nop

0800e8bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800e8bc:	4800      	ldr	r0, [pc, #0]	; (800e8c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800e8be:	4770      	bx	lr
 800e8c0:	20000050 	.word	0x20000050

0800e8c4 <ucdr_serialize_bool>:
 800e8c4:	b538      	push	{r3, r4, r5, lr}
 800e8c6:	460d      	mov	r5, r1
 800e8c8:	2101      	movs	r1, #1
 800e8ca:	4604      	mov	r4, r0
 800e8cc:	f000 ff8e 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800e8d0:	b148      	cbz	r0, 800e8e6 <ucdr_serialize_bool+0x22>
 800e8d2:	68a3      	ldr	r3, [r4, #8]
 800e8d4:	701d      	strb	r5, [r3, #0]
 800e8d6:	68a2      	ldr	r2, [r4, #8]
 800e8d8:	6923      	ldr	r3, [r4, #16]
 800e8da:	3201      	adds	r2, #1
 800e8dc:	3301      	adds	r3, #1
 800e8de:	2101      	movs	r1, #1
 800e8e0:	60a2      	str	r2, [r4, #8]
 800e8e2:	6123      	str	r3, [r4, #16]
 800e8e4:	7561      	strb	r1, [r4, #21]
 800e8e6:	7da0      	ldrb	r0, [r4, #22]
 800e8e8:	f080 0001 	eor.w	r0, r0, #1
 800e8ec:	bd38      	pop	{r3, r4, r5, pc}
 800e8ee:	bf00      	nop

0800e8f0 <ucdr_deserialize_bool>:
 800e8f0:	b538      	push	{r3, r4, r5, lr}
 800e8f2:	460d      	mov	r5, r1
 800e8f4:	2101      	movs	r1, #1
 800e8f6:	4604      	mov	r4, r0
 800e8f8:	f000 ff78 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800e8fc:	b168      	cbz	r0, 800e91a <ucdr_deserialize_bool+0x2a>
 800e8fe:	68a2      	ldr	r2, [r4, #8]
 800e900:	6923      	ldr	r3, [r4, #16]
 800e902:	f812 1b01 	ldrb.w	r1, [r2], #1
 800e906:	3900      	subs	r1, #0
 800e908:	f103 0301 	add.w	r3, r3, #1
 800e90c:	bf18      	it	ne
 800e90e:	2101      	movne	r1, #1
 800e910:	2001      	movs	r0, #1
 800e912:	7029      	strb	r1, [r5, #0]
 800e914:	60a2      	str	r2, [r4, #8]
 800e916:	6123      	str	r3, [r4, #16]
 800e918:	7560      	strb	r0, [r4, #21]
 800e91a:	7da0      	ldrb	r0, [r4, #22]
 800e91c:	f080 0001 	eor.w	r0, r0, #1
 800e920:	bd38      	pop	{r3, r4, r5, pc}
 800e922:	bf00      	nop

0800e924 <ucdr_serialize_uint8_t>:
 800e924:	b538      	push	{r3, r4, r5, lr}
 800e926:	460d      	mov	r5, r1
 800e928:	2101      	movs	r1, #1
 800e92a:	4604      	mov	r4, r0
 800e92c:	f000 ff5e 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800e930:	b148      	cbz	r0, 800e946 <ucdr_serialize_uint8_t+0x22>
 800e932:	68a3      	ldr	r3, [r4, #8]
 800e934:	701d      	strb	r5, [r3, #0]
 800e936:	68a2      	ldr	r2, [r4, #8]
 800e938:	6923      	ldr	r3, [r4, #16]
 800e93a:	3201      	adds	r2, #1
 800e93c:	3301      	adds	r3, #1
 800e93e:	2101      	movs	r1, #1
 800e940:	60a2      	str	r2, [r4, #8]
 800e942:	6123      	str	r3, [r4, #16]
 800e944:	7561      	strb	r1, [r4, #21]
 800e946:	7da0      	ldrb	r0, [r4, #22]
 800e948:	f080 0001 	eor.w	r0, r0, #1
 800e94c:	bd38      	pop	{r3, r4, r5, pc}
 800e94e:	bf00      	nop

0800e950 <ucdr_deserialize_uint8_t>:
 800e950:	b538      	push	{r3, r4, r5, lr}
 800e952:	460d      	mov	r5, r1
 800e954:	2101      	movs	r1, #1
 800e956:	4604      	mov	r4, r0
 800e958:	f000 ff48 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800e95c:	b150      	cbz	r0, 800e974 <ucdr_deserialize_uint8_t+0x24>
 800e95e:	68a3      	ldr	r3, [r4, #8]
 800e960:	781b      	ldrb	r3, [r3, #0]
 800e962:	702b      	strb	r3, [r5, #0]
 800e964:	68a2      	ldr	r2, [r4, #8]
 800e966:	6923      	ldr	r3, [r4, #16]
 800e968:	3201      	adds	r2, #1
 800e96a:	3301      	adds	r3, #1
 800e96c:	2101      	movs	r1, #1
 800e96e:	60a2      	str	r2, [r4, #8]
 800e970:	6123      	str	r3, [r4, #16]
 800e972:	7561      	strb	r1, [r4, #21]
 800e974:	7da0      	ldrb	r0, [r4, #22]
 800e976:	f080 0001 	eor.w	r0, r0, #1
 800e97a:	bd38      	pop	{r3, r4, r5, pc}

0800e97c <ucdr_serialize_uint16_t>:
 800e97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e980:	b082      	sub	sp, #8
 800e982:	460b      	mov	r3, r1
 800e984:	2102      	movs	r1, #2
 800e986:	4604      	mov	r4, r0
 800e988:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e98c:	f000 ff80 	bl	800f890 <ucdr_buffer_alignment>
 800e990:	4601      	mov	r1, r0
 800e992:	4620      	mov	r0, r4
 800e994:	7d67      	ldrb	r7, [r4, #21]
 800e996:	f000 ffbf 	bl	800f918 <ucdr_advance_buffer>
 800e99a:	4620      	mov	r0, r4
 800e99c:	2102      	movs	r1, #2
 800e99e:	f000 ff19 	bl	800f7d4 <ucdr_check_buffer_available_for>
 800e9a2:	bb78      	cbnz	r0, 800ea04 <ucdr_serialize_uint16_t+0x88>
 800e9a4:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800e9a8:	42b5      	cmp	r5, r6
 800e9aa:	d926      	bls.n	800e9fa <ucdr_serialize_uint16_t+0x7e>
 800e9ac:	6922      	ldr	r2, [r4, #16]
 800e9ae:	60a5      	str	r5, [r4, #8]
 800e9b0:	1bad      	subs	r5, r5, r6
 800e9b2:	442a      	add	r2, r5
 800e9b4:	f1c5 0802 	rsb	r8, r5, #2
 800e9b8:	6122      	str	r2, [r4, #16]
 800e9ba:	4641      	mov	r1, r8
 800e9bc:	4620      	mov	r0, r4
 800e9be:	f000 ff15 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800e9c2:	2800      	cmp	r0, #0
 800e9c4:	d03b      	beq.n	800ea3e <ucdr_serialize_uint16_t+0xc2>
 800e9c6:	7d23      	ldrb	r3, [r4, #20]
 800e9c8:	2b01      	cmp	r3, #1
 800e9ca:	d04a      	beq.n	800ea62 <ucdr_serialize_uint16_t+0xe6>
 800e9cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e9d0:	7033      	strb	r3, [r6, #0]
 800e9d2:	2d00      	cmp	r5, #0
 800e9d4:	d040      	beq.n	800ea58 <ucdr_serialize_uint16_t+0xdc>
 800e9d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e9da:	7073      	strb	r3, [r6, #1]
 800e9dc:	6923      	ldr	r3, [r4, #16]
 800e9de:	68a2      	ldr	r2, [r4, #8]
 800e9e0:	7da0      	ldrb	r0, [r4, #22]
 800e9e2:	3302      	adds	r3, #2
 800e9e4:	1b5b      	subs	r3, r3, r5
 800e9e6:	4442      	add	r2, r8
 800e9e8:	2102      	movs	r1, #2
 800e9ea:	f080 0001 	eor.w	r0, r0, #1
 800e9ee:	6123      	str	r3, [r4, #16]
 800e9f0:	60a2      	str	r2, [r4, #8]
 800e9f2:	7561      	strb	r1, [r4, #21]
 800e9f4:	b002      	add	sp, #8
 800e9f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9fa:	2102      	movs	r1, #2
 800e9fc:	4620      	mov	r0, r4
 800e9fe:	f000 fef5 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800ea02:	b190      	cbz	r0, 800ea2a <ucdr_serialize_uint16_t+0xae>
 800ea04:	7d23      	ldrb	r3, [r4, #20]
 800ea06:	2b01      	cmp	r3, #1
 800ea08:	68a3      	ldr	r3, [r4, #8]
 800ea0a:	d014      	beq.n	800ea36 <ucdr_serialize_uint16_t+0xba>
 800ea0c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ea10:	701a      	strb	r2, [r3, #0]
 800ea12:	68a3      	ldr	r3, [r4, #8]
 800ea14:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ea18:	705a      	strb	r2, [r3, #1]
 800ea1a:	68a2      	ldr	r2, [r4, #8]
 800ea1c:	6923      	ldr	r3, [r4, #16]
 800ea1e:	3202      	adds	r2, #2
 800ea20:	3302      	adds	r3, #2
 800ea22:	2102      	movs	r1, #2
 800ea24:	60a2      	str	r2, [r4, #8]
 800ea26:	6123      	str	r3, [r4, #16]
 800ea28:	7561      	strb	r1, [r4, #21]
 800ea2a:	7da0      	ldrb	r0, [r4, #22]
 800ea2c:	f080 0001 	eor.w	r0, r0, #1
 800ea30:	b002      	add	sp, #8
 800ea32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea36:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ea3a:	801a      	strh	r2, [r3, #0]
 800ea3c:	e7ed      	b.n	800ea1a <ucdr_serialize_uint16_t+0x9e>
 800ea3e:	68a2      	ldr	r2, [r4, #8]
 800ea40:	6923      	ldr	r3, [r4, #16]
 800ea42:	7da0      	ldrb	r0, [r4, #22]
 800ea44:	7567      	strb	r7, [r4, #21]
 800ea46:	1b52      	subs	r2, r2, r5
 800ea48:	1b5b      	subs	r3, r3, r5
 800ea4a:	f080 0001 	eor.w	r0, r0, #1
 800ea4e:	60a2      	str	r2, [r4, #8]
 800ea50:	6123      	str	r3, [r4, #16]
 800ea52:	b002      	add	sp, #8
 800ea54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea58:	68a3      	ldr	r3, [r4, #8]
 800ea5a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ea5e:	701a      	strb	r2, [r3, #0]
 800ea60:	e7bc      	b.n	800e9dc <ucdr_serialize_uint16_t+0x60>
 800ea62:	4630      	mov	r0, r6
 800ea64:	f10d 0606 	add.w	r6, sp, #6
 800ea68:	4631      	mov	r1, r6
 800ea6a:	462a      	mov	r2, r5
 800ea6c:	f009 fe1b 	bl	80186a6 <memcpy>
 800ea70:	68a0      	ldr	r0, [r4, #8]
 800ea72:	4642      	mov	r2, r8
 800ea74:	1971      	adds	r1, r6, r5
 800ea76:	f009 fe16 	bl	80186a6 <memcpy>
 800ea7a:	e7af      	b.n	800e9dc <ucdr_serialize_uint16_t+0x60>

0800ea7c <ucdr_serialize_endian_uint16_t>:
 800ea7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea80:	b083      	sub	sp, #12
 800ea82:	460d      	mov	r5, r1
 800ea84:	2102      	movs	r1, #2
 800ea86:	4604      	mov	r4, r0
 800ea88:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ea8c:	f000 ff00 	bl	800f890 <ucdr_buffer_alignment>
 800ea90:	4601      	mov	r1, r0
 800ea92:	4620      	mov	r0, r4
 800ea94:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ea98:	f000 ff3e 	bl	800f918 <ucdr_advance_buffer>
 800ea9c:	4620      	mov	r0, r4
 800ea9e:	2102      	movs	r1, #2
 800eaa0:	f000 fe98 	bl	800f7d4 <ucdr_check_buffer_available_for>
 800eaa4:	bb70      	cbnz	r0, 800eb04 <ucdr_serialize_endian_uint16_t+0x88>
 800eaa6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800eaaa:	42be      	cmp	r6, r7
 800eaac:	d925      	bls.n	800eafa <ucdr_serialize_endian_uint16_t+0x7e>
 800eaae:	6922      	ldr	r2, [r4, #16]
 800eab0:	60a6      	str	r6, [r4, #8]
 800eab2:	1bf6      	subs	r6, r6, r7
 800eab4:	4432      	add	r2, r6
 800eab6:	f1c6 0902 	rsb	r9, r6, #2
 800eaba:	6122      	str	r2, [r4, #16]
 800eabc:	4649      	mov	r1, r9
 800eabe:	4620      	mov	r0, r4
 800eac0:	f000 fe94 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800eac4:	2800      	cmp	r0, #0
 800eac6:	d039      	beq.n	800eb3c <ucdr_serialize_endian_uint16_t+0xc0>
 800eac8:	2d01      	cmp	r5, #1
 800eaca:	d04a      	beq.n	800eb62 <ucdr_serialize_endian_uint16_t+0xe6>
 800eacc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ead0:	703b      	strb	r3, [r7, #0]
 800ead2:	2e00      	cmp	r6, #0
 800ead4:	d040      	beq.n	800eb58 <ucdr_serialize_endian_uint16_t+0xdc>
 800ead6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800eada:	707b      	strb	r3, [r7, #1]
 800eadc:	6923      	ldr	r3, [r4, #16]
 800eade:	68a2      	ldr	r2, [r4, #8]
 800eae0:	7da0      	ldrb	r0, [r4, #22]
 800eae2:	3302      	adds	r3, #2
 800eae4:	1b9b      	subs	r3, r3, r6
 800eae6:	444a      	add	r2, r9
 800eae8:	2102      	movs	r1, #2
 800eaea:	f080 0001 	eor.w	r0, r0, #1
 800eaee:	6123      	str	r3, [r4, #16]
 800eaf0:	60a2      	str	r2, [r4, #8]
 800eaf2:	7561      	strb	r1, [r4, #21]
 800eaf4:	b003      	add	sp, #12
 800eaf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eafa:	2102      	movs	r1, #2
 800eafc:	4620      	mov	r0, r4
 800eafe:	f000 fe75 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800eb02:	b188      	cbz	r0, 800eb28 <ucdr_serialize_endian_uint16_t+0xac>
 800eb04:	2d01      	cmp	r5, #1
 800eb06:	68a3      	ldr	r3, [r4, #8]
 800eb08:	d014      	beq.n	800eb34 <ucdr_serialize_endian_uint16_t+0xb8>
 800eb0a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800eb0e:	701a      	strb	r2, [r3, #0]
 800eb10:	68a3      	ldr	r3, [r4, #8]
 800eb12:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eb16:	705a      	strb	r2, [r3, #1]
 800eb18:	68a2      	ldr	r2, [r4, #8]
 800eb1a:	6923      	ldr	r3, [r4, #16]
 800eb1c:	3202      	adds	r2, #2
 800eb1e:	3302      	adds	r3, #2
 800eb20:	2102      	movs	r1, #2
 800eb22:	60a2      	str	r2, [r4, #8]
 800eb24:	6123      	str	r3, [r4, #16]
 800eb26:	7561      	strb	r1, [r4, #21]
 800eb28:	7da0      	ldrb	r0, [r4, #22]
 800eb2a:	f080 0001 	eor.w	r0, r0, #1
 800eb2e:	b003      	add	sp, #12
 800eb30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb34:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800eb38:	801a      	strh	r2, [r3, #0]
 800eb3a:	e7ed      	b.n	800eb18 <ucdr_serialize_endian_uint16_t+0x9c>
 800eb3c:	68a2      	ldr	r2, [r4, #8]
 800eb3e:	6923      	ldr	r3, [r4, #16]
 800eb40:	7da0      	ldrb	r0, [r4, #22]
 800eb42:	f884 8015 	strb.w	r8, [r4, #21]
 800eb46:	1b92      	subs	r2, r2, r6
 800eb48:	1b9b      	subs	r3, r3, r6
 800eb4a:	f080 0001 	eor.w	r0, r0, #1
 800eb4e:	60a2      	str	r2, [r4, #8]
 800eb50:	6123      	str	r3, [r4, #16]
 800eb52:	b003      	add	sp, #12
 800eb54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb58:	68a3      	ldr	r3, [r4, #8]
 800eb5a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eb5e:	701a      	strb	r2, [r3, #0]
 800eb60:	e7bc      	b.n	800eadc <ucdr_serialize_endian_uint16_t+0x60>
 800eb62:	f10d 0506 	add.w	r5, sp, #6
 800eb66:	4629      	mov	r1, r5
 800eb68:	4632      	mov	r2, r6
 800eb6a:	4638      	mov	r0, r7
 800eb6c:	f009 fd9b 	bl	80186a6 <memcpy>
 800eb70:	68a0      	ldr	r0, [r4, #8]
 800eb72:	464a      	mov	r2, r9
 800eb74:	19a9      	adds	r1, r5, r6
 800eb76:	f009 fd96 	bl	80186a6 <memcpy>
 800eb7a:	e7af      	b.n	800eadc <ucdr_serialize_endian_uint16_t+0x60>

0800eb7c <ucdr_deserialize_uint16_t>:
 800eb7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb80:	460d      	mov	r5, r1
 800eb82:	2102      	movs	r1, #2
 800eb84:	4604      	mov	r4, r0
 800eb86:	f000 fe83 	bl	800f890 <ucdr_buffer_alignment>
 800eb8a:	4601      	mov	r1, r0
 800eb8c:	4620      	mov	r0, r4
 800eb8e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800eb92:	f000 fec1 	bl	800f918 <ucdr_advance_buffer>
 800eb96:	4620      	mov	r0, r4
 800eb98:	2102      	movs	r1, #2
 800eb9a:	f000 fe1b 	bl	800f7d4 <ucdr_check_buffer_available_for>
 800eb9e:	bb60      	cbnz	r0, 800ebfa <ucdr_deserialize_uint16_t+0x7e>
 800eba0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800eba4:	42be      	cmp	r6, r7
 800eba6:	d923      	bls.n	800ebf0 <ucdr_deserialize_uint16_t+0x74>
 800eba8:	6922      	ldr	r2, [r4, #16]
 800ebaa:	60a6      	str	r6, [r4, #8]
 800ebac:	1bf6      	subs	r6, r6, r7
 800ebae:	4432      	add	r2, r6
 800ebb0:	f1c6 0902 	rsb	r9, r6, #2
 800ebb4:	6122      	str	r2, [r4, #16]
 800ebb6:	4649      	mov	r1, r9
 800ebb8:	4620      	mov	r0, r4
 800ebba:	f000 fe17 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800ebbe:	2800      	cmp	r0, #0
 800ebc0:	d034      	beq.n	800ec2c <ucdr_deserialize_uint16_t+0xb0>
 800ebc2:	7d23      	ldrb	r3, [r4, #20]
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	d042      	beq.n	800ec4e <ucdr_deserialize_uint16_t+0xd2>
 800ebc8:	787b      	ldrb	r3, [r7, #1]
 800ebca:	702b      	strb	r3, [r5, #0]
 800ebcc:	2e00      	cmp	r6, #0
 800ebce:	d03a      	beq.n	800ec46 <ucdr_deserialize_uint16_t+0xca>
 800ebd0:	783b      	ldrb	r3, [r7, #0]
 800ebd2:	706b      	strb	r3, [r5, #1]
 800ebd4:	6923      	ldr	r3, [r4, #16]
 800ebd6:	68a2      	ldr	r2, [r4, #8]
 800ebd8:	7da0      	ldrb	r0, [r4, #22]
 800ebda:	2102      	movs	r1, #2
 800ebdc:	3302      	adds	r3, #2
 800ebde:	1b9b      	subs	r3, r3, r6
 800ebe0:	444a      	add	r2, r9
 800ebe2:	7561      	strb	r1, [r4, #21]
 800ebe4:	6123      	str	r3, [r4, #16]
 800ebe6:	60a2      	str	r2, [r4, #8]
 800ebe8:	f080 0001 	eor.w	r0, r0, #1
 800ebec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebf0:	2102      	movs	r1, #2
 800ebf2:	4620      	mov	r0, r4
 800ebf4:	f000 fdfa 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800ebf8:	b180      	cbz	r0, 800ec1c <ucdr_deserialize_uint16_t+0xa0>
 800ebfa:	7d23      	ldrb	r3, [r4, #20]
 800ebfc:	2b01      	cmp	r3, #1
 800ebfe:	68a3      	ldr	r3, [r4, #8]
 800ec00:	d011      	beq.n	800ec26 <ucdr_deserialize_uint16_t+0xaa>
 800ec02:	785b      	ldrb	r3, [r3, #1]
 800ec04:	702b      	strb	r3, [r5, #0]
 800ec06:	68a3      	ldr	r3, [r4, #8]
 800ec08:	781b      	ldrb	r3, [r3, #0]
 800ec0a:	706b      	strb	r3, [r5, #1]
 800ec0c:	68a2      	ldr	r2, [r4, #8]
 800ec0e:	6923      	ldr	r3, [r4, #16]
 800ec10:	3202      	adds	r2, #2
 800ec12:	3302      	adds	r3, #2
 800ec14:	2102      	movs	r1, #2
 800ec16:	60a2      	str	r2, [r4, #8]
 800ec18:	6123      	str	r3, [r4, #16]
 800ec1a:	7561      	strb	r1, [r4, #21]
 800ec1c:	7da0      	ldrb	r0, [r4, #22]
 800ec1e:	f080 0001 	eor.w	r0, r0, #1
 800ec22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec26:	881b      	ldrh	r3, [r3, #0]
 800ec28:	802b      	strh	r3, [r5, #0]
 800ec2a:	e7ef      	b.n	800ec0c <ucdr_deserialize_uint16_t+0x90>
 800ec2c:	68a2      	ldr	r2, [r4, #8]
 800ec2e:	6923      	ldr	r3, [r4, #16]
 800ec30:	7da0      	ldrb	r0, [r4, #22]
 800ec32:	f884 8015 	strb.w	r8, [r4, #21]
 800ec36:	1b92      	subs	r2, r2, r6
 800ec38:	1b9b      	subs	r3, r3, r6
 800ec3a:	60a2      	str	r2, [r4, #8]
 800ec3c:	6123      	str	r3, [r4, #16]
 800ec3e:	f080 0001 	eor.w	r0, r0, #1
 800ec42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec46:	68a3      	ldr	r3, [r4, #8]
 800ec48:	781b      	ldrb	r3, [r3, #0]
 800ec4a:	706b      	strb	r3, [r5, #1]
 800ec4c:	e7c2      	b.n	800ebd4 <ucdr_deserialize_uint16_t+0x58>
 800ec4e:	4639      	mov	r1, r7
 800ec50:	4632      	mov	r2, r6
 800ec52:	4628      	mov	r0, r5
 800ec54:	f009 fd27 	bl	80186a6 <memcpy>
 800ec58:	68a1      	ldr	r1, [r4, #8]
 800ec5a:	464a      	mov	r2, r9
 800ec5c:	19a8      	adds	r0, r5, r6
 800ec5e:	f009 fd22 	bl	80186a6 <memcpy>
 800ec62:	e7b7      	b.n	800ebd4 <ucdr_deserialize_uint16_t+0x58>

0800ec64 <ucdr_deserialize_endian_uint16_t>:
 800ec64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec68:	460e      	mov	r6, r1
 800ec6a:	2102      	movs	r1, #2
 800ec6c:	4604      	mov	r4, r0
 800ec6e:	4615      	mov	r5, r2
 800ec70:	f000 fe0e 	bl	800f890 <ucdr_buffer_alignment>
 800ec74:	4601      	mov	r1, r0
 800ec76:	4620      	mov	r0, r4
 800ec78:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ec7c:	f000 fe4c 	bl	800f918 <ucdr_advance_buffer>
 800ec80:	4620      	mov	r0, r4
 800ec82:	2102      	movs	r1, #2
 800ec84:	f000 fda6 	bl	800f7d4 <ucdr_check_buffer_available_for>
 800ec88:	bb70      	cbnz	r0, 800ece8 <ucdr_deserialize_endian_uint16_t+0x84>
 800ec8a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800ec8e:	4547      	cmp	r7, r8
 800ec90:	d925      	bls.n	800ecde <ucdr_deserialize_endian_uint16_t+0x7a>
 800ec92:	6922      	ldr	r2, [r4, #16]
 800ec94:	60a7      	str	r7, [r4, #8]
 800ec96:	eba7 0708 	sub.w	r7, r7, r8
 800ec9a:	443a      	add	r2, r7
 800ec9c:	f1c7 0a02 	rsb	sl, r7, #2
 800eca0:	6122      	str	r2, [r4, #16]
 800eca2:	4651      	mov	r1, sl
 800eca4:	4620      	mov	r0, r4
 800eca6:	f000 fda1 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800ecaa:	2800      	cmp	r0, #0
 800ecac:	d034      	beq.n	800ed18 <ucdr_deserialize_endian_uint16_t+0xb4>
 800ecae:	2e01      	cmp	r6, #1
 800ecb0:	d043      	beq.n	800ed3a <ucdr_deserialize_endian_uint16_t+0xd6>
 800ecb2:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ecb6:	702b      	strb	r3, [r5, #0]
 800ecb8:	2f00      	cmp	r7, #0
 800ecba:	d03a      	beq.n	800ed32 <ucdr_deserialize_endian_uint16_t+0xce>
 800ecbc:	f898 3000 	ldrb.w	r3, [r8]
 800ecc0:	706b      	strb	r3, [r5, #1]
 800ecc2:	6923      	ldr	r3, [r4, #16]
 800ecc4:	68a2      	ldr	r2, [r4, #8]
 800ecc6:	7da0      	ldrb	r0, [r4, #22]
 800ecc8:	2102      	movs	r1, #2
 800ecca:	3302      	adds	r3, #2
 800eccc:	1bdb      	subs	r3, r3, r7
 800ecce:	4452      	add	r2, sl
 800ecd0:	7561      	strb	r1, [r4, #21]
 800ecd2:	6123      	str	r3, [r4, #16]
 800ecd4:	60a2      	str	r2, [r4, #8]
 800ecd6:	f080 0001 	eor.w	r0, r0, #1
 800ecda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecde:	2102      	movs	r1, #2
 800ece0:	4620      	mov	r0, r4
 800ece2:	f000 fd83 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800ece6:	b178      	cbz	r0, 800ed08 <ucdr_deserialize_endian_uint16_t+0xa4>
 800ece8:	2e01      	cmp	r6, #1
 800ecea:	68a3      	ldr	r3, [r4, #8]
 800ecec:	d011      	beq.n	800ed12 <ucdr_deserialize_endian_uint16_t+0xae>
 800ecee:	785b      	ldrb	r3, [r3, #1]
 800ecf0:	702b      	strb	r3, [r5, #0]
 800ecf2:	68a3      	ldr	r3, [r4, #8]
 800ecf4:	781b      	ldrb	r3, [r3, #0]
 800ecf6:	706b      	strb	r3, [r5, #1]
 800ecf8:	68a2      	ldr	r2, [r4, #8]
 800ecfa:	6923      	ldr	r3, [r4, #16]
 800ecfc:	3202      	adds	r2, #2
 800ecfe:	3302      	adds	r3, #2
 800ed00:	2102      	movs	r1, #2
 800ed02:	60a2      	str	r2, [r4, #8]
 800ed04:	6123      	str	r3, [r4, #16]
 800ed06:	7561      	strb	r1, [r4, #21]
 800ed08:	7da0      	ldrb	r0, [r4, #22]
 800ed0a:	f080 0001 	eor.w	r0, r0, #1
 800ed0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed12:	881b      	ldrh	r3, [r3, #0]
 800ed14:	802b      	strh	r3, [r5, #0]
 800ed16:	e7ef      	b.n	800ecf8 <ucdr_deserialize_endian_uint16_t+0x94>
 800ed18:	68a2      	ldr	r2, [r4, #8]
 800ed1a:	6923      	ldr	r3, [r4, #16]
 800ed1c:	7da0      	ldrb	r0, [r4, #22]
 800ed1e:	f884 9015 	strb.w	r9, [r4, #21]
 800ed22:	1bd2      	subs	r2, r2, r7
 800ed24:	1bdb      	subs	r3, r3, r7
 800ed26:	60a2      	str	r2, [r4, #8]
 800ed28:	6123      	str	r3, [r4, #16]
 800ed2a:	f080 0001 	eor.w	r0, r0, #1
 800ed2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed32:	68a3      	ldr	r3, [r4, #8]
 800ed34:	781b      	ldrb	r3, [r3, #0]
 800ed36:	706b      	strb	r3, [r5, #1]
 800ed38:	e7c3      	b.n	800ecc2 <ucdr_deserialize_endian_uint16_t+0x5e>
 800ed3a:	4641      	mov	r1, r8
 800ed3c:	463a      	mov	r2, r7
 800ed3e:	4628      	mov	r0, r5
 800ed40:	f009 fcb1 	bl	80186a6 <memcpy>
 800ed44:	68a1      	ldr	r1, [r4, #8]
 800ed46:	4652      	mov	r2, sl
 800ed48:	19e8      	adds	r0, r5, r7
 800ed4a:	f009 fcac 	bl	80186a6 <memcpy>
 800ed4e:	e7b8      	b.n	800ecc2 <ucdr_deserialize_endian_uint16_t+0x5e>

0800ed50 <ucdr_serialize_uint32_t>:
 800ed50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed54:	b082      	sub	sp, #8
 800ed56:	4604      	mov	r4, r0
 800ed58:	9101      	str	r1, [sp, #4]
 800ed5a:	2104      	movs	r1, #4
 800ed5c:	f000 fd98 	bl	800f890 <ucdr_buffer_alignment>
 800ed60:	4601      	mov	r1, r0
 800ed62:	4620      	mov	r0, r4
 800ed64:	7d67      	ldrb	r7, [r4, #21]
 800ed66:	f000 fdd7 	bl	800f918 <ucdr_advance_buffer>
 800ed6a:	4620      	mov	r0, r4
 800ed6c:	2104      	movs	r1, #4
 800ed6e:	f000 fd31 	bl	800f7d4 <ucdr_check_buffer_available_for>
 800ed72:	2800      	cmp	r0, #0
 800ed74:	d139      	bne.n	800edea <ucdr_serialize_uint32_t+0x9a>
 800ed76:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 800ed7a:	42ae      	cmp	r6, r5
 800ed7c:	d930      	bls.n	800ede0 <ucdr_serialize_uint32_t+0x90>
 800ed7e:	6922      	ldr	r2, [r4, #16]
 800ed80:	60a6      	str	r6, [r4, #8]
 800ed82:	1b76      	subs	r6, r6, r5
 800ed84:	4432      	add	r2, r6
 800ed86:	f1c6 0804 	rsb	r8, r6, #4
 800ed8a:	6122      	str	r2, [r4, #16]
 800ed8c:	4641      	mov	r1, r8
 800ed8e:	4620      	mov	r0, r4
 800ed90:	f000 fd2c 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800ed94:	2800      	cmp	r0, #0
 800ed96:	d04c      	beq.n	800ee32 <ucdr_serialize_uint32_t+0xe2>
 800ed98:	7d23      	ldrb	r3, [r4, #20]
 800ed9a:	2b01      	cmp	r3, #1
 800ed9c:	d063      	beq.n	800ee66 <ucdr_serialize_uint32_t+0x116>
 800ed9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800eda2:	702b      	strb	r3, [r5, #0]
 800eda4:	2e00      	cmp	r6, #0
 800eda6:	d051      	beq.n	800ee4c <ucdr_serialize_uint32_t+0xfc>
 800eda8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800edac:	706b      	strb	r3, [r5, #1]
 800edae:	2e01      	cmp	r6, #1
 800edb0:	d050      	beq.n	800ee54 <ucdr_serialize_uint32_t+0x104>
 800edb2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800edb6:	70ab      	strb	r3, [r5, #2]
 800edb8:	2e02      	cmp	r6, #2
 800edba:	d04f      	beq.n	800ee5c <ucdr_serialize_uint32_t+0x10c>
 800edbc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800edc0:	70eb      	strb	r3, [r5, #3]
 800edc2:	6923      	ldr	r3, [r4, #16]
 800edc4:	68a2      	ldr	r2, [r4, #8]
 800edc6:	7da0      	ldrb	r0, [r4, #22]
 800edc8:	3304      	adds	r3, #4
 800edca:	1b9b      	subs	r3, r3, r6
 800edcc:	4442      	add	r2, r8
 800edce:	2104      	movs	r1, #4
 800edd0:	f080 0001 	eor.w	r0, r0, #1
 800edd4:	6123      	str	r3, [r4, #16]
 800edd6:	60a2      	str	r2, [r4, #8]
 800edd8:	7561      	strb	r1, [r4, #21]
 800edda:	b002      	add	sp, #8
 800eddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ede0:	2104      	movs	r1, #4
 800ede2:	4620      	mov	r0, r4
 800ede4:	f000 fd02 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800ede8:	b1d0      	cbz	r0, 800ee20 <ucdr_serialize_uint32_t+0xd0>
 800edea:	7d23      	ldrb	r3, [r4, #20]
 800edec:	2b01      	cmp	r3, #1
 800edee:	68a3      	ldr	r3, [r4, #8]
 800edf0:	d01c      	beq.n	800ee2c <ucdr_serialize_uint32_t+0xdc>
 800edf2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800edf6:	701a      	strb	r2, [r3, #0]
 800edf8:	68a3      	ldr	r3, [r4, #8]
 800edfa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800edfe:	705a      	strb	r2, [r3, #1]
 800ee00:	68a3      	ldr	r3, [r4, #8]
 800ee02:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ee06:	709a      	strb	r2, [r3, #2]
 800ee08:	68a3      	ldr	r3, [r4, #8]
 800ee0a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ee0e:	70da      	strb	r2, [r3, #3]
 800ee10:	68a2      	ldr	r2, [r4, #8]
 800ee12:	6923      	ldr	r3, [r4, #16]
 800ee14:	3204      	adds	r2, #4
 800ee16:	3304      	adds	r3, #4
 800ee18:	2104      	movs	r1, #4
 800ee1a:	60a2      	str	r2, [r4, #8]
 800ee1c:	6123      	str	r3, [r4, #16]
 800ee1e:	7561      	strb	r1, [r4, #21]
 800ee20:	7da0      	ldrb	r0, [r4, #22]
 800ee22:	f080 0001 	eor.w	r0, r0, #1
 800ee26:	b002      	add	sp, #8
 800ee28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee2c:	9a01      	ldr	r2, [sp, #4]
 800ee2e:	601a      	str	r2, [r3, #0]
 800ee30:	e7ee      	b.n	800ee10 <ucdr_serialize_uint32_t+0xc0>
 800ee32:	68a2      	ldr	r2, [r4, #8]
 800ee34:	6923      	ldr	r3, [r4, #16]
 800ee36:	7da0      	ldrb	r0, [r4, #22]
 800ee38:	7567      	strb	r7, [r4, #21]
 800ee3a:	1b92      	subs	r2, r2, r6
 800ee3c:	1b9b      	subs	r3, r3, r6
 800ee3e:	f080 0001 	eor.w	r0, r0, #1
 800ee42:	60a2      	str	r2, [r4, #8]
 800ee44:	6123      	str	r3, [r4, #16]
 800ee46:	b002      	add	sp, #8
 800ee48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee4c:	68a3      	ldr	r3, [r4, #8]
 800ee4e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ee52:	701a      	strb	r2, [r3, #0]
 800ee54:	68a3      	ldr	r3, [r4, #8]
 800ee56:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ee5a:	701a      	strb	r2, [r3, #0]
 800ee5c:	68a3      	ldr	r3, [r4, #8]
 800ee5e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ee62:	701a      	strb	r2, [r3, #0]
 800ee64:	e7ad      	b.n	800edc2 <ucdr_serialize_uint32_t+0x72>
 800ee66:	4628      	mov	r0, r5
 800ee68:	ad01      	add	r5, sp, #4
 800ee6a:	4629      	mov	r1, r5
 800ee6c:	4632      	mov	r2, r6
 800ee6e:	f009 fc1a 	bl	80186a6 <memcpy>
 800ee72:	68a0      	ldr	r0, [r4, #8]
 800ee74:	4642      	mov	r2, r8
 800ee76:	19a9      	adds	r1, r5, r6
 800ee78:	f009 fc15 	bl	80186a6 <memcpy>
 800ee7c:	e7a1      	b.n	800edc2 <ucdr_serialize_uint32_t+0x72>
 800ee7e:	bf00      	nop

0800ee80 <ucdr_serialize_endian_uint32_t>:
 800ee80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee84:	b083      	sub	sp, #12
 800ee86:	460d      	mov	r5, r1
 800ee88:	2104      	movs	r1, #4
 800ee8a:	4604      	mov	r4, r0
 800ee8c:	9201      	str	r2, [sp, #4]
 800ee8e:	f000 fcff 	bl	800f890 <ucdr_buffer_alignment>
 800ee92:	4601      	mov	r1, r0
 800ee94:	4620      	mov	r0, r4
 800ee96:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ee9a:	f000 fd3d 	bl	800f918 <ucdr_advance_buffer>
 800ee9e:	4620      	mov	r0, r4
 800eea0:	2104      	movs	r1, #4
 800eea2:	f000 fc97 	bl	800f7d4 <ucdr_check_buffer_available_for>
 800eea6:	2800      	cmp	r0, #0
 800eea8:	d138      	bne.n	800ef1c <ucdr_serialize_endian_uint32_t+0x9c>
 800eeaa:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800eeae:	42b7      	cmp	r7, r6
 800eeb0:	d92f      	bls.n	800ef12 <ucdr_serialize_endian_uint32_t+0x92>
 800eeb2:	6922      	ldr	r2, [r4, #16]
 800eeb4:	60a7      	str	r7, [r4, #8]
 800eeb6:	1bbf      	subs	r7, r7, r6
 800eeb8:	443a      	add	r2, r7
 800eeba:	f1c7 0904 	rsb	r9, r7, #4
 800eebe:	6122      	str	r2, [r4, #16]
 800eec0:	4649      	mov	r1, r9
 800eec2:	4620      	mov	r0, r4
 800eec4:	f000 fc92 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800eec8:	2800      	cmp	r0, #0
 800eeca:	d04a      	beq.n	800ef62 <ucdr_serialize_endian_uint32_t+0xe2>
 800eecc:	2d01      	cmp	r5, #1
 800eece:	d063      	beq.n	800ef98 <ucdr_serialize_endian_uint32_t+0x118>
 800eed0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800eed4:	7033      	strb	r3, [r6, #0]
 800eed6:	2f00      	cmp	r7, #0
 800eed8:	d051      	beq.n	800ef7e <ucdr_serialize_endian_uint32_t+0xfe>
 800eeda:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800eede:	7073      	strb	r3, [r6, #1]
 800eee0:	2f01      	cmp	r7, #1
 800eee2:	d050      	beq.n	800ef86 <ucdr_serialize_endian_uint32_t+0x106>
 800eee4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800eee8:	70b3      	strb	r3, [r6, #2]
 800eeea:	2f02      	cmp	r7, #2
 800eeec:	d04f      	beq.n	800ef8e <ucdr_serialize_endian_uint32_t+0x10e>
 800eeee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800eef2:	70f3      	strb	r3, [r6, #3]
 800eef4:	6923      	ldr	r3, [r4, #16]
 800eef6:	68a2      	ldr	r2, [r4, #8]
 800eef8:	7da0      	ldrb	r0, [r4, #22]
 800eefa:	3304      	adds	r3, #4
 800eefc:	1bdb      	subs	r3, r3, r7
 800eefe:	444a      	add	r2, r9
 800ef00:	2104      	movs	r1, #4
 800ef02:	f080 0001 	eor.w	r0, r0, #1
 800ef06:	6123      	str	r3, [r4, #16]
 800ef08:	60a2      	str	r2, [r4, #8]
 800ef0a:	7561      	strb	r1, [r4, #21]
 800ef0c:	b003      	add	sp, #12
 800ef0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef12:	2104      	movs	r1, #4
 800ef14:	4620      	mov	r0, r4
 800ef16:	f000 fc69 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800ef1a:	b1c8      	cbz	r0, 800ef50 <ucdr_serialize_endian_uint32_t+0xd0>
 800ef1c:	2d01      	cmp	r5, #1
 800ef1e:	68a3      	ldr	r3, [r4, #8]
 800ef20:	d01c      	beq.n	800ef5c <ucdr_serialize_endian_uint32_t+0xdc>
 800ef22:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ef26:	701a      	strb	r2, [r3, #0]
 800ef28:	68a3      	ldr	r3, [r4, #8]
 800ef2a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ef2e:	705a      	strb	r2, [r3, #1]
 800ef30:	68a3      	ldr	r3, [r4, #8]
 800ef32:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ef36:	709a      	strb	r2, [r3, #2]
 800ef38:	68a3      	ldr	r3, [r4, #8]
 800ef3a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ef3e:	70da      	strb	r2, [r3, #3]
 800ef40:	68a2      	ldr	r2, [r4, #8]
 800ef42:	6923      	ldr	r3, [r4, #16]
 800ef44:	3204      	adds	r2, #4
 800ef46:	3304      	adds	r3, #4
 800ef48:	2104      	movs	r1, #4
 800ef4a:	60a2      	str	r2, [r4, #8]
 800ef4c:	6123      	str	r3, [r4, #16]
 800ef4e:	7561      	strb	r1, [r4, #21]
 800ef50:	7da0      	ldrb	r0, [r4, #22]
 800ef52:	f080 0001 	eor.w	r0, r0, #1
 800ef56:	b003      	add	sp, #12
 800ef58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef5c:	9a01      	ldr	r2, [sp, #4]
 800ef5e:	601a      	str	r2, [r3, #0]
 800ef60:	e7ee      	b.n	800ef40 <ucdr_serialize_endian_uint32_t+0xc0>
 800ef62:	68a2      	ldr	r2, [r4, #8]
 800ef64:	6923      	ldr	r3, [r4, #16]
 800ef66:	7da0      	ldrb	r0, [r4, #22]
 800ef68:	f884 8015 	strb.w	r8, [r4, #21]
 800ef6c:	1bd2      	subs	r2, r2, r7
 800ef6e:	1bdb      	subs	r3, r3, r7
 800ef70:	f080 0001 	eor.w	r0, r0, #1
 800ef74:	60a2      	str	r2, [r4, #8]
 800ef76:	6123      	str	r3, [r4, #16]
 800ef78:	b003      	add	sp, #12
 800ef7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef7e:	68a3      	ldr	r3, [r4, #8]
 800ef80:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ef84:	701a      	strb	r2, [r3, #0]
 800ef86:	68a3      	ldr	r3, [r4, #8]
 800ef88:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ef8c:	701a      	strb	r2, [r3, #0]
 800ef8e:	68a3      	ldr	r3, [r4, #8]
 800ef90:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ef94:	701a      	strb	r2, [r3, #0]
 800ef96:	e7ad      	b.n	800eef4 <ucdr_serialize_endian_uint32_t+0x74>
 800ef98:	ad01      	add	r5, sp, #4
 800ef9a:	4629      	mov	r1, r5
 800ef9c:	463a      	mov	r2, r7
 800ef9e:	4630      	mov	r0, r6
 800efa0:	f009 fb81 	bl	80186a6 <memcpy>
 800efa4:	68a0      	ldr	r0, [r4, #8]
 800efa6:	464a      	mov	r2, r9
 800efa8:	19e9      	adds	r1, r5, r7
 800efaa:	f009 fb7c 	bl	80186a6 <memcpy>
 800efae:	e7a1      	b.n	800eef4 <ucdr_serialize_endian_uint32_t+0x74>

0800efb0 <ucdr_deserialize_uint32_t>:
 800efb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efb4:	460d      	mov	r5, r1
 800efb6:	2104      	movs	r1, #4
 800efb8:	4604      	mov	r4, r0
 800efba:	f000 fc69 	bl	800f890 <ucdr_buffer_alignment>
 800efbe:	4601      	mov	r1, r0
 800efc0:	4620      	mov	r0, r4
 800efc2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800efc6:	f000 fca7 	bl	800f918 <ucdr_advance_buffer>
 800efca:	4620      	mov	r0, r4
 800efcc:	2104      	movs	r1, #4
 800efce:	f000 fc01 	bl	800f7d4 <ucdr_check_buffer_available_for>
 800efd2:	2800      	cmp	r0, #0
 800efd4:	d138      	bne.n	800f048 <ucdr_deserialize_uint32_t+0x98>
 800efd6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800efda:	42b7      	cmp	r7, r6
 800efdc:	d92f      	bls.n	800f03e <ucdr_deserialize_uint32_t+0x8e>
 800efde:	6922      	ldr	r2, [r4, #16]
 800efe0:	60a7      	str	r7, [r4, #8]
 800efe2:	1bbf      	subs	r7, r7, r6
 800efe4:	443a      	add	r2, r7
 800efe6:	f1c7 0904 	rsb	r9, r7, #4
 800efea:	6122      	str	r2, [r4, #16]
 800efec:	4649      	mov	r1, r9
 800efee:	4620      	mov	r0, r4
 800eff0:	f000 fbfc 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800eff4:	2800      	cmp	r0, #0
 800eff6:	d046      	beq.n	800f086 <ucdr_deserialize_uint32_t+0xd6>
 800eff8:	7d23      	ldrb	r3, [r4, #20]
 800effa:	2b01      	cmp	r3, #1
 800effc:	d05c      	beq.n	800f0b8 <ucdr_deserialize_uint32_t+0x108>
 800effe:	78f3      	ldrb	r3, [r6, #3]
 800f000:	702b      	strb	r3, [r5, #0]
 800f002:	2f00      	cmp	r7, #0
 800f004:	d04c      	beq.n	800f0a0 <ucdr_deserialize_uint32_t+0xf0>
 800f006:	78b3      	ldrb	r3, [r6, #2]
 800f008:	706b      	strb	r3, [r5, #1]
 800f00a:	2f01      	cmp	r7, #1
 800f00c:	f105 0302 	add.w	r3, r5, #2
 800f010:	d04a      	beq.n	800f0a8 <ucdr_deserialize_uint32_t+0xf8>
 800f012:	7873      	ldrb	r3, [r6, #1]
 800f014:	70ab      	strb	r3, [r5, #2]
 800f016:	2f02      	cmp	r7, #2
 800f018:	f105 0303 	add.w	r3, r5, #3
 800f01c:	d048      	beq.n	800f0b0 <ucdr_deserialize_uint32_t+0x100>
 800f01e:	7833      	ldrb	r3, [r6, #0]
 800f020:	70eb      	strb	r3, [r5, #3]
 800f022:	6923      	ldr	r3, [r4, #16]
 800f024:	68a2      	ldr	r2, [r4, #8]
 800f026:	7da0      	ldrb	r0, [r4, #22]
 800f028:	2104      	movs	r1, #4
 800f02a:	3304      	adds	r3, #4
 800f02c:	1bdb      	subs	r3, r3, r7
 800f02e:	444a      	add	r2, r9
 800f030:	7561      	strb	r1, [r4, #21]
 800f032:	6123      	str	r3, [r4, #16]
 800f034:	60a2      	str	r2, [r4, #8]
 800f036:	f080 0001 	eor.w	r0, r0, #1
 800f03a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f03e:	2104      	movs	r1, #4
 800f040:	4620      	mov	r0, r4
 800f042:	f000 fbd3 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800f046:	b1b0      	cbz	r0, 800f076 <ucdr_deserialize_uint32_t+0xc6>
 800f048:	7d23      	ldrb	r3, [r4, #20]
 800f04a:	2b01      	cmp	r3, #1
 800f04c:	68a3      	ldr	r3, [r4, #8]
 800f04e:	d017      	beq.n	800f080 <ucdr_deserialize_uint32_t+0xd0>
 800f050:	78db      	ldrb	r3, [r3, #3]
 800f052:	702b      	strb	r3, [r5, #0]
 800f054:	68a3      	ldr	r3, [r4, #8]
 800f056:	789b      	ldrb	r3, [r3, #2]
 800f058:	706b      	strb	r3, [r5, #1]
 800f05a:	68a3      	ldr	r3, [r4, #8]
 800f05c:	785b      	ldrb	r3, [r3, #1]
 800f05e:	70ab      	strb	r3, [r5, #2]
 800f060:	68a3      	ldr	r3, [r4, #8]
 800f062:	781b      	ldrb	r3, [r3, #0]
 800f064:	70eb      	strb	r3, [r5, #3]
 800f066:	68a2      	ldr	r2, [r4, #8]
 800f068:	6923      	ldr	r3, [r4, #16]
 800f06a:	3204      	adds	r2, #4
 800f06c:	3304      	adds	r3, #4
 800f06e:	2104      	movs	r1, #4
 800f070:	60a2      	str	r2, [r4, #8]
 800f072:	6123      	str	r3, [r4, #16]
 800f074:	7561      	strb	r1, [r4, #21]
 800f076:	7da0      	ldrb	r0, [r4, #22]
 800f078:	f080 0001 	eor.w	r0, r0, #1
 800f07c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	602b      	str	r3, [r5, #0]
 800f084:	e7ef      	b.n	800f066 <ucdr_deserialize_uint32_t+0xb6>
 800f086:	68a2      	ldr	r2, [r4, #8]
 800f088:	6923      	ldr	r3, [r4, #16]
 800f08a:	7da0      	ldrb	r0, [r4, #22]
 800f08c:	f884 8015 	strb.w	r8, [r4, #21]
 800f090:	1bd2      	subs	r2, r2, r7
 800f092:	1bdb      	subs	r3, r3, r7
 800f094:	60a2      	str	r2, [r4, #8]
 800f096:	6123      	str	r3, [r4, #16]
 800f098:	f080 0001 	eor.w	r0, r0, #1
 800f09c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0a0:	68a3      	ldr	r3, [r4, #8]
 800f0a2:	789b      	ldrb	r3, [r3, #2]
 800f0a4:	706b      	strb	r3, [r5, #1]
 800f0a6:	1cab      	adds	r3, r5, #2
 800f0a8:	68a2      	ldr	r2, [r4, #8]
 800f0aa:	7852      	ldrb	r2, [r2, #1]
 800f0ac:	f803 2b01 	strb.w	r2, [r3], #1
 800f0b0:	68a2      	ldr	r2, [r4, #8]
 800f0b2:	7812      	ldrb	r2, [r2, #0]
 800f0b4:	701a      	strb	r2, [r3, #0]
 800f0b6:	e7b4      	b.n	800f022 <ucdr_deserialize_uint32_t+0x72>
 800f0b8:	4631      	mov	r1, r6
 800f0ba:	463a      	mov	r2, r7
 800f0bc:	4628      	mov	r0, r5
 800f0be:	f009 faf2 	bl	80186a6 <memcpy>
 800f0c2:	68a1      	ldr	r1, [r4, #8]
 800f0c4:	464a      	mov	r2, r9
 800f0c6:	19e8      	adds	r0, r5, r7
 800f0c8:	f009 faed 	bl	80186a6 <memcpy>
 800f0cc:	e7a9      	b.n	800f022 <ucdr_deserialize_uint32_t+0x72>
 800f0ce:	bf00      	nop

0800f0d0 <ucdr_deserialize_endian_uint32_t>:
 800f0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0d4:	460e      	mov	r6, r1
 800f0d6:	2104      	movs	r1, #4
 800f0d8:	4604      	mov	r4, r0
 800f0da:	4615      	mov	r5, r2
 800f0dc:	f000 fbd8 	bl	800f890 <ucdr_buffer_alignment>
 800f0e0:	4601      	mov	r1, r0
 800f0e2:	4620      	mov	r0, r4
 800f0e4:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f0e8:	f000 fc16 	bl	800f918 <ucdr_advance_buffer>
 800f0ec:	4620      	mov	r0, r4
 800f0ee:	2104      	movs	r1, #4
 800f0f0:	f000 fb70 	bl	800f7d4 <ucdr_check_buffer_available_for>
 800f0f4:	2800      	cmp	r0, #0
 800f0f6:	d13c      	bne.n	800f172 <ucdr_deserialize_endian_uint32_t+0xa2>
 800f0f8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f0fc:	42bb      	cmp	r3, r7
 800f0fe:	d933      	bls.n	800f168 <ucdr_deserialize_endian_uint32_t+0x98>
 800f100:	6922      	ldr	r2, [r4, #16]
 800f102:	60a3      	str	r3, [r4, #8]
 800f104:	eba3 0807 	sub.w	r8, r3, r7
 800f108:	4442      	add	r2, r8
 800f10a:	f1c8 0a04 	rsb	sl, r8, #4
 800f10e:	6122      	str	r2, [r4, #16]
 800f110:	4651      	mov	r1, sl
 800f112:	4620      	mov	r0, r4
 800f114:	f000 fb6a 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800f118:	2800      	cmp	r0, #0
 800f11a:	d048      	beq.n	800f1ae <ucdr_deserialize_endian_uint32_t+0xde>
 800f11c:	2e01      	cmp	r6, #1
 800f11e:	d061      	beq.n	800f1e4 <ucdr_deserialize_endian_uint32_t+0x114>
 800f120:	78fb      	ldrb	r3, [r7, #3]
 800f122:	702b      	strb	r3, [r5, #0]
 800f124:	f1b8 0f00 	cmp.w	r8, #0
 800f128:	d050      	beq.n	800f1cc <ucdr_deserialize_endian_uint32_t+0xfc>
 800f12a:	78bb      	ldrb	r3, [r7, #2]
 800f12c:	706b      	strb	r3, [r5, #1]
 800f12e:	f1b8 0f01 	cmp.w	r8, #1
 800f132:	f105 0302 	add.w	r3, r5, #2
 800f136:	d04d      	beq.n	800f1d4 <ucdr_deserialize_endian_uint32_t+0x104>
 800f138:	787b      	ldrb	r3, [r7, #1]
 800f13a:	70ab      	strb	r3, [r5, #2]
 800f13c:	f1b8 0f02 	cmp.w	r8, #2
 800f140:	f105 0303 	add.w	r3, r5, #3
 800f144:	d04a      	beq.n	800f1dc <ucdr_deserialize_endian_uint32_t+0x10c>
 800f146:	783b      	ldrb	r3, [r7, #0]
 800f148:	70eb      	strb	r3, [r5, #3]
 800f14a:	6923      	ldr	r3, [r4, #16]
 800f14c:	68a2      	ldr	r2, [r4, #8]
 800f14e:	7da0      	ldrb	r0, [r4, #22]
 800f150:	2104      	movs	r1, #4
 800f152:	3304      	adds	r3, #4
 800f154:	eba3 0308 	sub.w	r3, r3, r8
 800f158:	4452      	add	r2, sl
 800f15a:	7561      	strb	r1, [r4, #21]
 800f15c:	6123      	str	r3, [r4, #16]
 800f15e:	60a2      	str	r2, [r4, #8]
 800f160:	f080 0001 	eor.w	r0, r0, #1
 800f164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f168:	2104      	movs	r1, #4
 800f16a:	4620      	mov	r0, r4
 800f16c:	f000 fb3e 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800f170:	b1a8      	cbz	r0, 800f19e <ucdr_deserialize_endian_uint32_t+0xce>
 800f172:	2e01      	cmp	r6, #1
 800f174:	68a3      	ldr	r3, [r4, #8]
 800f176:	d017      	beq.n	800f1a8 <ucdr_deserialize_endian_uint32_t+0xd8>
 800f178:	78db      	ldrb	r3, [r3, #3]
 800f17a:	702b      	strb	r3, [r5, #0]
 800f17c:	68a3      	ldr	r3, [r4, #8]
 800f17e:	789b      	ldrb	r3, [r3, #2]
 800f180:	706b      	strb	r3, [r5, #1]
 800f182:	68a3      	ldr	r3, [r4, #8]
 800f184:	785b      	ldrb	r3, [r3, #1]
 800f186:	70ab      	strb	r3, [r5, #2]
 800f188:	68a3      	ldr	r3, [r4, #8]
 800f18a:	781b      	ldrb	r3, [r3, #0]
 800f18c:	70eb      	strb	r3, [r5, #3]
 800f18e:	68a2      	ldr	r2, [r4, #8]
 800f190:	6923      	ldr	r3, [r4, #16]
 800f192:	3204      	adds	r2, #4
 800f194:	3304      	adds	r3, #4
 800f196:	2104      	movs	r1, #4
 800f198:	60a2      	str	r2, [r4, #8]
 800f19a:	6123      	str	r3, [r4, #16]
 800f19c:	7561      	strb	r1, [r4, #21]
 800f19e:	7da0      	ldrb	r0, [r4, #22]
 800f1a0:	f080 0001 	eor.w	r0, r0, #1
 800f1a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	602b      	str	r3, [r5, #0]
 800f1ac:	e7ef      	b.n	800f18e <ucdr_deserialize_endian_uint32_t+0xbe>
 800f1ae:	68a2      	ldr	r2, [r4, #8]
 800f1b0:	6923      	ldr	r3, [r4, #16]
 800f1b2:	7da0      	ldrb	r0, [r4, #22]
 800f1b4:	f884 9015 	strb.w	r9, [r4, #21]
 800f1b8:	eba2 0208 	sub.w	r2, r2, r8
 800f1bc:	eba3 0308 	sub.w	r3, r3, r8
 800f1c0:	60a2      	str	r2, [r4, #8]
 800f1c2:	6123      	str	r3, [r4, #16]
 800f1c4:	f080 0001 	eor.w	r0, r0, #1
 800f1c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1cc:	68a3      	ldr	r3, [r4, #8]
 800f1ce:	789b      	ldrb	r3, [r3, #2]
 800f1d0:	706b      	strb	r3, [r5, #1]
 800f1d2:	1cab      	adds	r3, r5, #2
 800f1d4:	68a2      	ldr	r2, [r4, #8]
 800f1d6:	7852      	ldrb	r2, [r2, #1]
 800f1d8:	f803 2b01 	strb.w	r2, [r3], #1
 800f1dc:	68a2      	ldr	r2, [r4, #8]
 800f1de:	7812      	ldrb	r2, [r2, #0]
 800f1e0:	701a      	strb	r2, [r3, #0]
 800f1e2:	e7b2      	b.n	800f14a <ucdr_deserialize_endian_uint32_t+0x7a>
 800f1e4:	4639      	mov	r1, r7
 800f1e6:	4642      	mov	r2, r8
 800f1e8:	4628      	mov	r0, r5
 800f1ea:	f009 fa5c 	bl	80186a6 <memcpy>
 800f1ee:	68a1      	ldr	r1, [r4, #8]
 800f1f0:	4652      	mov	r2, sl
 800f1f2:	eb05 0008 	add.w	r0, r5, r8
 800f1f6:	f009 fa56 	bl	80186a6 <memcpy>
 800f1fa:	e7a6      	b.n	800f14a <ucdr_deserialize_endian_uint32_t+0x7a>

0800f1fc <ucdr_serialize_uint64_t>:
 800f1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f200:	2108      	movs	r1, #8
 800f202:	b082      	sub	sp, #8
 800f204:	4604      	mov	r4, r0
 800f206:	e9cd 2300 	strd	r2, r3, [sp]
 800f20a:	f000 fb41 	bl	800f890 <ucdr_buffer_alignment>
 800f20e:	4601      	mov	r1, r0
 800f210:	4620      	mov	r0, r4
 800f212:	7d67      	ldrb	r7, [r4, #21]
 800f214:	f000 fb80 	bl	800f918 <ucdr_advance_buffer>
 800f218:	4620      	mov	r0, r4
 800f21a:	2108      	movs	r1, #8
 800f21c:	f000 fada 	bl	800f7d4 <ucdr_check_buffer_available_for>
 800f220:	2800      	cmp	r0, #0
 800f222:	d14e      	bne.n	800f2c2 <ucdr_serialize_uint64_t+0xc6>
 800f224:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800f228:	42b5      	cmp	r5, r6
 800f22a:	d945      	bls.n	800f2b8 <ucdr_serialize_uint64_t+0xbc>
 800f22c:	6923      	ldr	r3, [r4, #16]
 800f22e:	60a5      	str	r5, [r4, #8]
 800f230:	1bad      	subs	r5, r5, r6
 800f232:	442b      	add	r3, r5
 800f234:	f1c5 0808 	rsb	r8, r5, #8
 800f238:	6123      	str	r3, [r4, #16]
 800f23a:	4641      	mov	r1, r8
 800f23c:	4620      	mov	r0, r4
 800f23e:	f000 fad5 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800f242:	2800      	cmp	r0, #0
 800f244:	d074      	beq.n	800f330 <ucdr_serialize_uint64_t+0x134>
 800f246:	7d23      	ldrb	r3, [r4, #20]
 800f248:	2b01      	cmp	r3, #1
 800f24a:	f000 809b 	beq.w	800f384 <ucdr_serialize_uint64_t+0x188>
 800f24e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f252:	7033      	strb	r3, [r6, #0]
 800f254:	2d00      	cmp	r5, #0
 800f256:	d078      	beq.n	800f34a <ucdr_serialize_uint64_t+0x14e>
 800f258:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f25c:	7073      	strb	r3, [r6, #1]
 800f25e:	2d01      	cmp	r5, #1
 800f260:	d077      	beq.n	800f352 <ucdr_serialize_uint64_t+0x156>
 800f262:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f266:	70b3      	strb	r3, [r6, #2]
 800f268:	2d02      	cmp	r5, #2
 800f26a:	d076      	beq.n	800f35a <ucdr_serialize_uint64_t+0x15e>
 800f26c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f270:	70f3      	strb	r3, [r6, #3]
 800f272:	2d03      	cmp	r5, #3
 800f274:	d075      	beq.n	800f362 <ucdr_serialize_uint64_t+0x166>
 800f276:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f27a:	7133      	strb	r3, [r6, #4]
 800f27c:	2d04      	cmp	r5, #4
 800f27e:	d074      	beq.n	800f36a <ucdr_serialize_uint64_t+0x16e>
 800f280:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f284:	7173      	strb	r3, [r6, #5]
 800f286:	2d05      	cmp	r5, #5
 800f288:	d073      	beq.n	800f372 <ucdr_serialize_uint64_t+0x176>
 800f28a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f28e:	71b3      	strb	r3, [r6, #6]
 800f290:	2d06      	cmp	r5, #6
 800f292:	d072      	beq.n	800f37a <ucdr_serialize_uint64_t+0x17e>
 800f294:	f89d 3000 	ldrb.w	r3, [sp]
 800f298:	71f3      	strb	r3, [r6, #7]
 800f29a:	6923      	ldr	r3, [r4, #16]
 800f29c:	68a2      	ldr	r2, [r4, #8]
 800f29e:	7da0      	ldrb	r0, [r4, #22]
 800f2a0:	3308      	adds	r3, #8
 800f2a2:	1b5d      	subs	r5, r3, r5
 800f2a4:	4442      	add	r2, r8
 800f2a6:	2308      	movs	r3, #8
 800f2a8:	f080 0001 	eor.w	r0, r0, #1
 800f2ac:	6125      	str	r5, [r4, #16]
 800f2ae:	60a2      	str	r2, [r4, #8]
 800f2b0:	7563      	strb	r3, [r4, #21]
 800f2b2:	b002      	add	sp, #8
 800f2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2b8:	2108      	movs	r1, #8
 800f2ba:	4620      	mov	r0, r4
 800f2bc:	f000 fa96 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800f2c0:	b350      	cbz	r0, 800f318 <ucdr_serialize_uint64_t+0x11c>
 800f2c2:	7d23      	ldrb	r3, [r4, #20]
 800f2c4:	2b01      	cmp	r3, #1
 800f2c6:	d02d      	beq.n	800f324 <ucdr_serialize_uint64_t+0x128>
 800f2c8:	68a3      	ldr	r3, [r4, #8]
 800f2ca:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f2ce:	701a      	strb	r2, [r3, #0]
 800f2d0:	68a3      	ldr	r3, [r4, #8]
 800f2d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f2d6:	705a      	strb	r2, [r3, #1]
 800f2d8:	68a3      	ldr	r3, [r4, #8]
 800f2da:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f2de:	709a      	strb	r2, [r3, #2]
 800f2e0:	68a3      	ldr	r3, [r4, #8]
 800f2e2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f2e6:	70da      	strb	r2, [r3, #3]
 800f2e8:	68a3      	ldr	r3, [r4, #8]
 800f2ea:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f2ee:	711a      	strb	r2, [r3, #4]
 800f2f0:	68a3      	ldr	r3, [r4, #8]
 800f2f2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f2f6:	715a      	strb	r2, [r3, #5]
 800f2f8:	68a3      	ldr	r3, [r4, #8]
 800f2fa:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f2fe:	719a      	strb	r2, [r3, #6]
 800f300:	68a3      	ldr	r3, [r4, #8]
 800f302:	f89d 2000 	ldrb.w	r2, [sp]
 800f306:	71da      	strb	r2, [r3, #7]
 800f308:	68a2      	ldr	r2, [r4, #8]
 800f30a:	6923      	ldr	r3, [r4, #16]
 800f30c:	3208      	adds	r2, #8
 800f30e:	3308      	adds	r3, #8
 800f310:	2108      	movs	r1, #8
 800f312:	60a2      	str	r2, [r4, #8]
 800f314:	6123      	str	r3, [r4, #16]
 800f316:	7561      	strb	r1, [r4, #21]
 800f318:	7da0      	ldrb	r0, [r4, #22]
 800f31a:	f080 0001 	eor.w	r0, r0, #1
 800f31e:	b002      	add	sp, #8
 800f320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f324:	466b      	mov	r3, sp
 800f326:	cb03      	ldmia	r3!, {r0, r1}
 800f328:	68a3      	ldr	r3, [r4, #8]
 800f32a:	6018      	str	r0, [r3, #0]
 800f32c:	6059      	str	r1, [r3, #4]
 800f32e:	e7eb      	b.n	800f308 <ucdr_serialize_uint64_t+0x10c>
 800f330:	68a2      	ldr	r2, [r4, #8]
 800f332:	6923      	ldr	r3, [r4, #16]
 800f334:	7da0      	ldrb	r0, [r4, #22]
 800f336:	7567      	strb	r7, [r4, #21]
 800f338:	1b52      	subs	r2, r2, r5
 800f33a:	f080 0001 	eor.w	r0, r0, #1
 800f33e:	1b5d      	subs	r5, r3, r5
 800f340:	60a2      	str	r2, [r4, #8]
 800f342:	6125      	str	r5, [r4, #16]
 800f344:	b002      	add	sp, #8
 800f346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f34a:	68a3      	ldr	r3, [r4, #8]
 800f34c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f350:	701a      	strb	r2, [r3, #0]
 800f352:	68a3      	ldr	r3, [r4, #8]
 800f354:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f358:	701a      	strb	r2, [r3, #0]
 800f35a:	68a3      	ldr	r3, [r4, #8]
 800f35c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f360:	701a      	strb	r2, [r3, #0]
 800f362:	68a3      	ldr	r3, [r4, #8]
 800f364:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f368:	701a      	strb	r2, [r3, #0]
 800f36a:	68a3      	ldr	r3, [r4, #8]
 800f36c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f370:	701a      	strb	r2, [r3, #0]
 800f372:	68a3      	ldr	r3, [r4, #8]
 800f374:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f378:	701a      	strb	r2, [r3, #0]
 800f37a:	68a3      	ldr	r3, [r4, #8]
 800f37c:	f89d 2000 	ldrb.w	r2, [sp]
 800f380:	701a      	strb	r2, [r3, #0]
 800f382:	e78a      	b.n	800f29a <ucdr_serialize_uint64_t+0x9e>
 800f384:	4630      	mov	r0, r6
 800f386:	466e      	mov	r6, sp
 800f388:	4631      	mov	r1, r6
 800f38a:	462a      	mov	r2, r5
 800f38c:	f009 f98b 	bl	80186a6 <memcpy>
 800f390:	68a0      	ldr	r0, [r4, #8]
 800f392:	4642      	mov	r2, r8
 800f394:	1971      	adds	r1, r6, r5
 800f396:	f009 f986 	bl	80186a6 <memcpy>
 800f39a:	e77e      	b.n	800f29a <ucdr_serialize_uint64_t+0x9e>

0800f39c <ucdr_serialize_int16_t>:
 800f39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3a0:	b082      	sub	sp, #8
 800f3a2:	460b      	mov	r3, r1
 800f3a4:	2102      	movs	r1, #2
 800f3a6:	4604      	mov	r4, r0
 800f3a8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f3ac:	f000 fa70 	bl	800f890 <ucdr_buffer_alignment>
 800f3b0:	4601      	mov	r1, r0
 800f3b2:	4620      	mov	r0, r4
 800f3b4:	7d67      	ldrb	r7, [r4, #21]
 800f3b6:	f000 faaf 	bl	800f918 <ucdr_advance_buffer>
 800f3ba:	4620      	mov	r0, r4
 800f3bc:	2102      	movs	r1, #2
 800f3be:	f000 fa09 	bl	800f7d4 <ucdr_check_buffer_available_for>
 800f3c2:	bb78      	cbnz	r0, 800f424 <ucdr_serialize_int16_t+0x88>
 800f3c4:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800f3c8:	42b5      	cmp	r5, r6
 800f3ca:	d926      	bls.n	800f41a <ucdr_serialize_int16_t+0x7e>
 800f3cc:	6922      	ldr	r2, [r4, #16]
 800f3ce:	60a5      	str	r5, [r4, #8]
 800f3d0:	1bad      	subs	r5, r5, r6
 800f3d2:	442a      	add	r2, r5
 800f3d4:	f1c5 0802 	rsb	r8, r5, #2
 800f3d8:	6122      	str	r2, [r4, #16]
 800f3da:	4641      	mov	r1, r8
 800f3dc:	4620      	mov	r0, r4
 800f3de:	f000 fa05 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800f3e2:	2800      	cmp	r0, #0
 800f3e4:	d03b      	beq.n	800f45e <ucdr_serialize_int16_t+0xc2>
 800f3e6:	7d23      	ldrb	r3, [r4, #20]
 800f3e8:	2b01      	cmp	r3, #1
 800f3ea:	d04a      	beq.n	800f482 <ucdr_serialize_int16_t+0xe6>
 800f3ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f3f0:	7033      	strb	r3, [r6, #0]
 800f3f2:	2d00      	cmp	r5, #0
 800f3f4:	d040      	beq.n	800f478 <ucdr_serialize_int16_t+0xdc>
 800f3f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f3fa:	7073      	strb	r3, [r6, #1]
 800f3fc:	6923      	ldr	r3, [r4, #16]
 800f3fe:	68a2      	ldr	r2, [r4, #8]
 800f400:	7da0      	ldrb	r0, [r4, #22]
 800f402:	3302      	adds	r3, #2
 800f404:	1b5b      	subs	r3, r3, r5
 800f406:	4442      	add	r2, r8
 800f408:	2102      	movs	r1, #2
 800f40a:	f080 0001 	eor.w	r0, r0, #1
 800f40e:	6123      	str	r3, [r4, #16]
 800f410:	60a2      	str	r2, [r4, #8]
 800f412:	7561      	strb	r1, [r4, #21]
 800f414:	b002      	add	sp, #8
 800f416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f41a:	2102      	movs	r1, #2
 800f41c:	4620      	mov	r0, r4
 800f41e:	f000 f9e5 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800f422:	b190      	cbz	r0, 800f44a <ucdr_serialize_int16_t+0xae>
 800f424:	7d23      	ldrb	r3, [r4, #20]
 800f426:	2b01      	cmp	r3, #1
 800f428:	68a3      	ldr	r3, [r4, #8]
 800f42a:	d014      	beq.n	800f456 <ucdr_serialize_int16_t+0xba>
 800f42c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f430:	701a      	strb	r2, [r3, #0]
 800f432:	68a3      	ldr	r3, [r4, #8]
 800f434:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f438:	705a      	strb	r2, [r3, #1]
 800f43a:	68a2      	ldr	r2, [r4, #8]
 800f43c:	6923      	ldr	r3, [r4, #16]
 800f43e:	3202      	adds	r2, #2
 800f440:	3302      	adds	r3, #2
 800f442:	2102      	movs	r1, #2
 800f444:	60a2      	str	r2, [r4, #8]
 800f446:	6123      	str	r3, [r4, #16]
 800f448:	7561      	strb	r1, [r4, #21]
 800f44a:	7da0      	ldrb	r0, [r4, #22]
 800f44c:	f080 0001 	eor.w	r0, r0, #1
 800f450:	b002      	add	sp, #8
 800f452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f456:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f45a:	801a      	strh	r2, [r3, #0]
 800f45c:	e7ed      	b.n	800f43a <ucdr_serialize_int16_t+0x9e>
 800f45e:	68a2      	ldr	r2, [r4, #8]
 800f460:	6923      	ldr	r3, [r4, #16]
 800f462:	7da0      	ldrb	r0, [r4, #22]
 800f464:	7567      	strb	r7, [r4, #21]
 800f466:	1b52      	subs	r2, r2, r5
 800f468:	1b5b      	subs	r3, r3, r5
 800f46a:	f080 0001 	eor.w	r0, r0, #1
 800f46e:	60a2      	str	r2, [r4, #8]
 800f470:	6123      	str	r3, [r4, #16]
 800f472:	b002      	add	sp, #8
 800f474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f478:	68a3      	ldr	r3, [r4, #8]
 800f47a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f47e:	701a      	strb	r2, [r3, #0]
 800f480:	e7bc      	b.n	800f3fc <ucdr_serialize_int16_t+0x60>
 800f482:	4630      	mov	r0, r6
 800f484:	f10d 0606 	add.w	r6, sp, #6
 800f488:	4631      	mov	r1, r6
 800f48a:	462a      	mov	r2, r5
 800f48c:	f009 f90b 	bl	80186a6 <memcpy>
 800f490:	68a0      	ldr	r0, [r4, #8]
 800f492:	4642      	mov	r2, r8
 800f494:	1971      	adds	r1, r6, r5
 800f496:	f009 f906 	bl	80186a6 <memcpy>
 800f49a:	e7af      	b.n	800f3fc <ucdr_serialize_int16_t+0x60>

0800f49c <ucdr_deserialize_int16_t>:
 800f49c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4a0:	460d      	mov	r5, r1
 800f4a2:	2102      	movs	r1, #2
 800f4a4:	4604      	mov	r4, r0
 800f4a6:	f000 f9f3 	bl	800f890 <ucdr_buffer_alignment>
 800f4aa:	4601      	mov	r1, r0
 800f4ac:	4620      	mov	r0, r4
 800f4ae:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f4b2:	f000 fa31 	bl	800f918 <ucdr_advance_buffer>
 800f4b6:	4620      	mov	r0, r4
 800f4b8:	2102      	movs	r1, #2
 800f4ba:	f000 f98b 	bl	800f7d4 <ucdr_check_buffer_available_for>
 800f4be:	bb60      	cbnz	r0, 800f51a <ucdr_deserialize_int16_t+0x7e>
 800f4c0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f4c4:	42be      	cmp	r6, r7
 800f4c6:	d923      	bls.n	800f510 <ucdr_deserialize_int16_t+0x74>
 800f4c8:	6922      	ldr	r2, [r4, #16]
 800f4ca:	60a6      	str	r6, [r4, #8]
 800f4cc:	1bf6      	subs	r6, r6, r7
 800f4ce:	4432      	add	r2, r6
 800f4d0:	f1c6 0902 	rsb	r9, r6, #2
 800f4d4:	6122      	str	r2, [r4, #16]
 800f4d6:	4649      	mov	r1, r9
 800f4d8:	4620      	mov	r0, r4
 800f4da:	f000 f987 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800f4de:	2800      	cmp	r0, #0
 800f4e0:	d034      	beq.n	800f54c <ucdr_deserialize_int16_t+0xb0>
 800f4e2:	7d23      	ldrb	r3, [r4, #20]
 800f4e4:	2b01      	cmp	r3, #1
 800f4e6:	d042      	beq.n	800f56e <ucdr_deserialize_int16_t+0xd2>
 800f4e8:	787b      	ldrb	r3, [r7, #1]
 800f4ea:	702b      	strb	r3, [r5, #0]
 800f4ec:	2e00      	cmp	r6, #0
 800f4ee:	d03a      	beq.n	800f566 <ucdr_deserialize_int16_t+0xca>
 800f4f0:	783b      	ldrb	r3, [r7, #0]
 800f4f2:	706b      	strb	r3, [r5, #1]
 800f4f4:	6923      	ldr	r3, [r4, #16]
 800f4f6:	68a2      	ldr	r2, [r4, #8]
 800f4f8:	7da0      	ldrb	r0, [r4, #22]
 800f4fa:	2102      	movs	r1, #2
 800f4fc:	3302      	adds	r3, #2
 800f4fe:	1b9b      	subs	r3, r3, r6
 800f500:	444a      	add	r2, r9
 800f502:	7561      	strb	r1, [r4, #21]
 800f504:	6123      	str	r3, [r4, #16]
 800f506:	60a2      	str	r2, [r4, #8]
 800f508:	f080 0001 	eor.w	r0, r0, #1
 800f50c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f510:	2102      	movs	r1, #2
 800f512:	4620      	mov	r0, r4
 800f514:	f000 f96a 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800f518:	b180      	cbz	r0, 800f53c <ucdr_deserialize_int16_t+0xa0>
 800f51a:	7d23      	ldrb	r3, [r4, #20]
 800f51c:	2b01      	cmp	r3, #1
 800f51e:	68a3      	ldr	r3, [r4, #8]
 800f520:	d011      	beq.n	800f546 <ucdr_deserialize_int16_t+0xaa>
 800f522:	785b      	ldrb	r3, [r3, #1]
 800f524:	702b      	strb	r3, [r5, #0]
 800f526:	68a3      	ldr	r3, [r4, #8]
 800f528:	781b      	ldrb	r3, [r3, #0]
 800f52a:	706b      	strb	r3, [r5, #1]
 800f52c:	68a2      	ldr	r2, [r4, #8]
 800f52e:	6923      	ldr	r3, [r4, #16]
 800f530:	3202      	adds	r2, #2
 800f532:	3302      	adds	r3, #2
 800f534:	2102      	movs	r1, #2
 800f536:	60a2      	str	r2, [r4, #8]
 800f538:	6123      	str	r3, [r4, #16]
 800f53a:	7561      	strb	r1, [r4, #21]
 800f53c:	7da0      	ldrb	r0, [r4, #22]
 800f53e:	f080 0001 	eor.w	r0, r0, #1
 800f542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f546:	881b      	ldrh	r3, [r3, #0]
 800f548:	802b      	strh	r3, [r5, #0]
 800f54a:	e7ef      	b.n	800f52c <ucdr_deserialize_int16_t+0x90>
 800f54c:	68a2      	ldr	r2, [r4, #8]
 800f54e:	6923      	ldr	r3, [r4, #16]
 800f550:	7da0      	ldrb	r0, [r4, #22]
 800f552:	f884 8015 	strb.w	r8, [r4, #21]
 800f556:	1b92      	subs	r2, r2, r6
 800f558:	1b9b      	subs	r3, r3, r6
 800f55a:	60a2      	str	r2, [r4, #8]
 800f55c:	6123      	str	r3, [r4, #16]
 800f55e:	f080 0001 	eor.w	r0, r0, #1
 800f562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f566:	68a3      	ldr	r3, [r4, #8]
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	706b      	strb	r3, [r5, #1]
 800f56c:	e7c2      	b.n	800f4f4 <ucdr_deserialize_int16_t+0x58>
 800f56e:	4639      	mov	r1, r7
 800f570:	4632      	mov	r2, r6
 800f572:	4628      	mov	r0, r5
 800f574:	f009 f897 	bl	80186a6 <memcpy>
 800f578:	68a1      	ldr	r1, [r4, #8]
 800f57a:	464a      	mov	r2, r9
 800f57c:	19a8      	adds	r0, r5, r6
 800f57e:	f009 f892 	bl	80186a6 <memcpy>
 800f582:	e7b7      	b.n	800f4f4 <ucdr_deserialize_int16_t+0x58>

0800f584 <ucdr_serialize_int32_t>:
 800f584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f588:	b082      	sub	sp, #8
 800f58a:	4604      	mov	r4, r0
 800f58c:	9101      	str	r1, [sp, #4]
 800f58e:	2104      	movs	r1, #4
 800f590:	f000 f97e 	bl	800f890 <ucdr_buffer_alignment>
 800f594:	4601      	mov	r1, r0
 800f596:	4620      	mov	r0, r4
 800f598:	7d67      	ldrb	r7, [r4, #21]
 800f59a:	f000 f9bd 	bl	800f918 <ucdr_advance_buffer>
 800f59e:	4620      	mov	r0, r4
 800f5a0:	2104      	movs	r1, #4
 800f5a2:	f000 f917 	bl	800f7d4 <ucdr_check_buffer_available_for>
 800f5a6:	2800      	cmp	r0, #0
 800f5a8:	d139      	bne.n	800f61e <ucdr_serialize_int32_t+0x9a>
 800f5aa:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 800f5ae:	42ae      	cmp	r6, r5
 800f5b0:	d930      	bls.n	800f614 <ucdr_serialize_int32_t+0x90>
 800f5b2:	6922      	ldr	r2, [r4, #16]
 800f5b4:	60a6      	str	r6, [r4, #8]
 800f5b6:	1b76      	subs	r6, r6, r5
 800f5b8:	4432      	add	r2, r6
 800f5ba:	f1c6 0804 	rsb	r8, r6, #4
 800f5be:	6122      	str	r2, [r4, #16]
 800f5c0:	4641      	mov	r1, r8
 800f5c2:	4620      	mov	r0, r4
 800f5c4:	f000 f912 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800f5c8:	2800      	cmp	r0, #0
 800f5ca:	d04c      	beq.n	800f666 <ucdr_serialize_int32_t+0xe2>
 800f5cc:	7d23      	ldrb	r3, [r4, #20]
 800f5ce:	2b01      	cmp	r3, #1
 800f5d0:	d063      	beq.n	800f69a <ucdr_serialize_int32_t+0x116>
 800f5d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f5d6:	702b      	strb	r3, [r5, #0]
 800f5d8:	2e00      	cmp	r6, #0
 800f5da:	d051      	beq.n	800f680 <ucdr_serialize_int32_t+0xfc>
 800f5dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f5e0:	706b      	strb	r3, [r5, #1]
 800f5e2:	2e01      	cmp	r6, #1
 800f5e4:	d050      	beq.n	800f688 <ucdr_serialize_int32_t+0x104>
 800f5e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f5ea:	70ab      	strb	r3, [r5, #2]
 800f5ec:	2e02      	cmp	r6, #2
 800f5ee:	d04f      	beq.n	800f690 <ucdr_serialize_int32_t+0x10c>
 800f5f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f5f4:	70eb      	strb	r3, [r5, #3]
 800f5f6:	6923      	ldr	r3, [r4, #16]
 800f5f8:	68a2      	ldr	r2, [r4, #8]
 800f5fa:	7da0      	ldrb	r0, [r4, #22]
 800f5fc:	3304      	adds	r3, #4
 800f5fe:	1b9b      	subs	r3, r3, r6
 800f600:	4442      	add	r2, r8
 800f602:	2104      	movs	r1, #4
 800f604:	f080 0001 	eor.w	r0, r0, #1
 800f608:	6123      	str	r3, [r4, #16]
 800f60a:	60a2      	str	r2, [r4, #8]
 800f60c:	7561      	strb	r1, [r4, #21]
 800f60e:	b002      	add	sp, #8
 800f610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f614:	2104      	movs	r1, #4
 800f616:	4620      	mov	r0, r4
 800f618:	f000 f8e8 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800f61c:	b1d0      	cbz	r0, 800f654 <ucdr_serialize_int32_t+0xd0>
 800f61e:	7d23      	ldrb	r3, [r4, #20]
 800f620:	2b01      	cmp	r3, #1
 800f622:	68a3      	ldr	r3, [r4, #8]
 800f624:	d01c      	beq.n	800f660 <ucdr_serialize_int32_t+0xdc>
 800f626:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f62a:	701a      	strb	r2, [r3, #0]
 800f62c:	68a3      	ldr	r3, [r4, #8]
 800f62e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f632:	705a      	strb	r2, [r3, #1]
 800f634:	68a3      	ldr	r3, [r4, #8]
 800f636:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f63a:	709a      	strb	r2, [r3, #2]
 800f63c:	68a3      	ldr	r3, [r4, #8]
 800f63e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f642:	70da      	strb	r2, [r3, #3]
 800f644:	68a2      	ldr	r2, [r4, #8]
 800f646:	6923      	ldr	r3, [r4, #16]
 800f648:	3204      	adds	r2, #4
 800f64a:	3304      	adds	r3, #4
 800f64c:	2104      	movs	r1, #4
 800f64e:	60a2      	str	r2, [r4, #8]
 800f650:	6123      	str	r3, [r4, #16]
 800f652:	7561      	strb	r1, [r4, #21]
 800f654:	7da0      	ldrb	r0, [r4, #22]
 800f656:	f080 0001 	eor.w	r0, r0, #1
 800f65a:	b002      	add	sp, #8
 800f65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f660:	9a01      	ldr	r2, [sp, #4]
 800f662:	601a      	str	r2, [r3, #0]
 800f664:	e7ee      	b.n	800f644 <ucdr_serialize_int32_t+0xc0>
 800f666:	68a2      	ldr	r2, [r4, #8]
 800f668:	6923      	ldr	r3, [r4, #16]
 800f66a:	7da0      	ldrb	r0, [r4, #22]
 800f66c:	7567      	strb	r7, [r4, #21]
 800f66e:	1b92      	subs	r2, r2, r6
 800f670:	1b9b      	subs	r3, r3, r6
 800f672:	f080 0001 	eor.w	r0, r0, #1
 800f676:	60a2      	str	r2, [r4, #8]
 800f678:	6123      	str	r3, [r4, #16]
 800f67a:	b002      	add	sp, #8
 800f67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f680:	68a3      	ldr	r3, [r4, #8]
 800f682:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f686:	701a      	strb	r2, [r3, #0]
 800f688:	68a3      	ldr	r3, [r4, #8]
 800f68a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f68e:	701a      	strb	r2, [r3, #0]
 800f690:	68a3      	ldr	r3, [r4, #8]
 800f692:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f696:	701a      	strb	r2, [r3, #0]
 800f698:	e7ad      	b.n	800f5f6 <ucdr_serialize_int32_t+0x72>
 800f69a:	4628      	mov	r0, r5
 800f69c:	ad01      	add	r5, sp, #4
 800f69e:	4629      	mov	r1, r5
 800f6a0:	4632      	mov	r2, r6
 800f6a2:	f009 f800 	bl	80186a6 <memcpy>
 800f6a6:	68a0      	ldr	r0, [r4, #8]
 800f6a8:	4642      	mov	r2, r8
 800f6aa:	19a9      	adds	r1, r5, r6
 800f6ac:	f008 fffb 	bl	80186a6 <memcpy>
 800f6b0:	e7a1      	b.n	800f5f6 <ucdr_serialize_int32_t+0x72>
 800f6b2:	bf00      	nop

0800f6b4 <ucdr_deserialize_int32_t>:
 800f6b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6b8:	460d      	mov	r5, r1
 800f6ba:	2104      	movs	r1, #4
 800f6bc:	4604      	mov	r4, r0
 800f6be:	f000 f8e7 	bl	800f890 <ucdr_buffer_alignment>
 800f6c2:	4601      	mov	r1, r0
 800f6c4:	4620      	mov	r0, r4
 800f6c6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f6ca:	f000 f925 	bl	800f918 <ucdr_advance_buffer>
 800f6ce:	4620      	mov	r0, r4
 800f6d0:	2104      	movs	r1, #4
 800f6d2:	f000 f87f 	bl	800f7d4 <ucdr_check_buffer_available_for>
 800f6d6:	2800      	cmp	r0, #0
 800f6d8:	d138      	bne.n	800f74c <ucdr_deserialize_int32_t+0x98>
 800f6da:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f6de:	42b7      	cmp	r7, r6
 800f6e0:	d92f      	bls.n	800f742 <ucdr_deserialize_int32_t+0x8e>
 800f6e2:	6922      	ldr	r2, [r4, #16]
 800f6e4:	60a7      	str	r7, [r4, #8]
 800f6e6:	1bbf      	subs	r7, r7, r6
 800f6e8:	443a      	add	r2, r7
 800f6ea:	f1c7 0904 	rsb	r9, r7, #4
 800f6ee:	6122      	str	r2, [r4, #16]
 800f6f0:	4649      	mov	r1, r9
 800f6f2:	4620      	mov	r0, r4
 800f6f4:	f000 f87a 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800f6f8:	2800      	cmp	r0, #0
 800f6fa:	d046      	beq.n	800f78a <ucdr_deserialize_int32_t+0xd6>
 800f6fc:	7d23      	ldrb	r3, [r4, #20]
 800f6fe:	2b01      	cmp	r3, #1
 800f700:	d05c      	beq.n	800f7bc <ucdr_deserialize_int32_t+0x108>
 800f702:	78f3      	ldrb	r3, [r6, #3]
 800f704:	702b      	strb	r3, [r5, #0]
 800f706:	2f00      	cmp	r7, #0
 800f708:	d04c      	beq.n	800f7a4 <ucdr_deserialize_int32_t+0xf0>
 800f70a:	78b3      	ldrb	r3, [r6, #2]
 800f70c:	706b      	strb	r3, [r5, #1]
 800f70e:	2f01      	cmp	r7, #1
 800f710:	f105 0302 	add.w	r3, r5, #2
 800f714:	d04a      	beq.n	800f7ac <ucdr_deserialize_int32_t+0xf8>
 800f716:	7873      	ldrb	r3, [r6, #1]
 800f718:	70ab      	strb	r3, [r5, #2]
 800f71a:	2f02      	cmp	r7, #2
 800f71c:	f105 0303 	add.w	r3, r5, #3
 800f720:	d048      	beq.n	800f7b4 <ucdr_deserialize_int32_t+0x100>
 800f722:	7833      	ldrb	r3, [r6, #0]
 800f724:	70eb      	strb	r3, [r5, #3]
 800f726:	6923      	ldr	r3, [r4, #16]
 800f728:	68a2      	ldr	r2, [r4, #8]
 800f72a:	7da0      	ldrb	r0, [r4, #22]
 800f72c:	2104      	movs	r1, #4
 800f72e:	3304      	adds	r3, #4
 800f730:	1bdb      	subs	r3, r3, r7
 800f732:	444a      	add	r2, r9
 800f734:	7561      	strb	r1, [r4, #21]
 800f736:	6123      	str	r3, [r4, #16]
 800f738:	60a2      	str	r2, [r4, #8]
 800f73a:	f080 0001 	eor.w	r0, r0, #1
 800f73e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f742:	2104      	movs	r1, #4
 800f744:	4620      	mov	r0, r4
 800f746:	f000 f851 	bl	800f7ec <ucdr_check_final_buffer_behavior>
 800f74a:	b1b0      	cbz	r0, 800f77a <ucdr_deserialize_int32_t+0xc6>
 800f74c:	7d23      	ldrb	r3, [r4, #20]
 800f74e:	2b01      	cmp	r3, #1
 800f750:	68a3      	ldr	r3, [r4, #8]
 800f752:	d017      	beq.n	800f784 <ucdr_deserialize_int32_t+0xd0>
 800f754:	78db      	ldrb	r3, [r3, #3]
 800f756:	702b      	strb	r3, [r5, #0]
 800f758:	68a3      	ldr	r3, [r4, #8]
 800f75a:	789b      	ldrb	r3, [r3, #2]
 800f75c:	706b      	strb	r3, [r5, #1]
 800f75e:	68a3      	ldr	r3, [r4, #8]
 800f760:	785b      	ldrb	r3, [r3, #1]
 800f762:	70ab      	strb	r3, [r5, #2]
 800f764:	68a3      	ldr	r3, [r4, #8]
 800f766:	781b      	ldrb	r3, [r3, #0]
 800f768:	70eb      	strb	r3, [r5, #3]
 800f76a:	68a2      	ldr	r2, [r4, #8]
 800f76c:	6923      	ldr	r3, [r4, #16]
 800f76e:	3204      	adds	r2, #4
 800f770:	3304      	adds	r3, #4
 800f772:	2104      	movs	r1, #4
 800f774:	60a2      	str	r2, [r4, #8]
 800f776:	6123      	str	r3, [r4, #16]
 800f778:	7561      	strb	r1, [r4, #21]
 800f77a:	7da0      	ldrb	r0, [r4, #22]
 800f77c:	f080 0001 	eor.w	r0, r0, #1
 800f780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	602b      	str	r3, [r5, #0]
 800f788:	e7ef      	b.n	800f76a <ucdr_deserialize_int32_t+0xb6>
 800f78a:	68a2      	ldr	r2, [r4, #8]
 800f78c:	6923      	ldr	r3, [r4, #16]
 800f78e:	7da0      	ldrb	r0, [r4, #22]
 800f790:	f884 8015 	strb.w	r8, [r4, #21]
 800f794:	1bd2      	subs	r2, r2, r7
 800f796:	1bdb      	subs	r3, r3, r7
 800f798:	60a2      	str	r2, [r4, #8]
 800f79a:	6123      	str	r3, [r4, #16]
 800f79c:	f080 0001 	eor.w	r0, r0, #1
 800f7a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7a4:	68a3      	ldr	r3, [r4, #8]
 800f7a6:	789b      	ldrb	r3, [r3, #2]
 800f7a8:	706b      	strb	r3, [r5, #1]
 800f7aa:	1cab      	adds	r3, r5, #2
 800f7ac:	68a2      	ldr	r2, [r4, #8]
 800f7ae:	7852      	ldrb	r2, [r2, #1]
 800f7b0:	f803 2b01 	strb.w	r2, [r3], #1
 800f7b4:	68a2      	ldr	r2, [r4, #8]
 800f7b6:	7812      	ldrb	r2, [r2, #0]
 800f7b8:	701a      	strb	r2, [r3, #0]
 800f7ba:	e7b4      	b.n	800f726 <ucdr_deserialize_int32_t+0x72>
 800f7bc:	4631      	mov	r1, r6
 800f7be:	463a      	mov	r2, r7
 800f7c0:	4628      	mov	r0, r5
 800f7c2:	f008 ff70 	bl	80186a6 <memcpy>
 800f7c6:	68a1      	ldr	r1, [r4, #8]
 800f7c8:	464a      	mov	r2, r9
 800f7ca:	19e8      	adds	r0, r5, r7
 800f7cc:	f008 ff6b 	bl	80186a6 <memcpy>
 800f7d0:	e7a9      	b.n	800f726 <ucdr_deserialize_int32_t+0x72>
 800f7d2:	bf00      	nop

0800f7d4 <ucdr_check_buffer_available_for>:
 800f7d4:	7d83      	ldrb	r3, [r0, #22]
 800f7d6:	b93b      	cbnz	r3, 800f7e8 <ucdr_check_buffer_available_for+0x14>
 800f7d8:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800f7dc:	4419      	add	r1, r3
 800f7de:	4288      	cmp	r0, r1
 800f7e0:	bf34      	ite	cc
 800f7e2:	2000      	movcc	r0, #0
 800f7e4:	2001      	movcs	r0, #1
 800f7e6:	4770      	bx	lr
 800f7e8:	2000      	movs	r0, #0
 800f7ea:	4770      	bx	lr

0800f7ec <ucdr_check_final_buffer_behavior>:
 800f7ec:	7d83      	ldrb	r3, [r0, #22]
 800f7ee:	b943      	cbnz	r3, 800f802 <ucdr_check_final_buffer_behavior+0x16>
 800f7f0:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800f7f4:	4291      	cmp	r1, r2
 800f7f6:	b510      	push	{r4, lr}
 800f7f8:	4604      	mov	r4, r0
 800f7fa:	d205      	bcs.n	800f808 <ucdr_check_final_buffer_behavior+0x1c>
 800f7fc:	2301      	movs	r3, #1
 800f7fe:	4618      	mov	r0, r3
 800f800:	bd10      	pop	{r4, pc}
 800f802:	2300      	movs	r3, #0
 800f804:	4618      	mov	r0, r3
 800f806:	4770      	bx	lr
 800f808:	6982      	ldr	r2, [r0, #24]
 800f80a:	b13a      	cbz	r2, 800f81c <ucdr_check_final_buffer_behavior+0x30>
 800f80c:	69c1      	ldr	r1, [r0, #28]
 800f80e:	4790      	blx	r2
 800f810:	f080 0301 	eor.w	r3, r0, #1
 800f814:	b2db      	uxtb	r3, r3
 800f816:	75a0      	strb	r0, [r4, #22]
 800f818:	4618      	mov	r0, r3
 800f81a:	bd10      	pop	{r4, pc}
 800f81c:	2001      	movs	r0, #1
 800f81e:	75a0      	strb	r0, [r4, #22]
 800f820:	e7fa      	b.n	800f818 <ucdr_check_final_buffer_behavior+0x2c>
 800f822:	bf00      	nop

0800f824 <ucdr_set_on_full_buffer_callback>:
 800f824:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800f828:	4770      	bx	lr
 800f82a:	bf00      	nop

0800f82c <ucdr_init_buffer_origin_offset_endian>:
 800f82c:	b430      	push	{r4, r5}
 800f82e:	9c02      	ldr	r4, [sp, #8]
 800f830:	f89d 500c 	ldrb.w	r5, [sp, #12]
 800f834:	6001      	str	r1, [r0, #0]
 800f836:	440a      	add	r2, r1
 800f838:	60c3      	str	r3, [r0, #12]
 800f83a:	4421      	add	r1, r4
 800f83c:	441c      	add	r4, r3
 800f83e:	2300      	movs	r3, #0
 800f840:	6104      	str	r4, [r0, #16]
 800f842:	7505      	strb	r5, [r0, #20]
 800f844:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800f848:	bc30      	pop	{r4, r5}
 800f84a:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800f84e:	7543      	strb	r3, [r0, #21]
 800f850:	7583      	strb	r3, [r0, #22]
 800f852:	4770      	bx	lr

0800f854 <ucdr_init_buffer_origin_offset>:
 800f854:	b510      	push	{r4, lr}
 800f856:	b082      	sub	sp, #8
 800f858:	9c04      	ldr	r4, [sp, #16]
 800f85a:	9400      	str	r4, [sp, #0]
 800f85c:	2401      	movs	r4, #1
 800f85e:	9401      	str	r4, [sp, #4]
 800f860:	f7ff ffe4 	bl	800f82c <ucdr_init_buffer_origin_offset_endian>
 800f864:	b002      	add	sp, #8
 800f866:	bd10      	pop	{r4, pc}

0800f868 <ucdr_init_buffer_origin>:
 800f868:	b510      	push	{r4, lr}
 800f86a:	b082      	sub	sp, #8
 800f86c:	2400      	movs	r4, #0
 800f86e:	9400      	str	r4, [sp, #0]
 800f870:	f7ff fff0 	bl	800f854 <ucdr_init_buffer_origin_offset>
 800f874:	b002      	add	sp, #8
 800f876:	bd10      	pop	{r4, pc}

0800f878 <ucdr_init_buffer>:
 800f878:	2300      	movs	r3, #0
 800f87a:	f7ff bff5 	b.w	800f868 <ucdr_init_buffer_origin>
 800f87e:	bf00      	nop

0800f880 <ucdr_alignment>:
 800f880:	fbb0 f3f1 	udiv	r3, r0, r1
 800f884:	fb03 0011 	mls	r0, r3, r1, r0
 800f888:	1a08      	subs	r0, r1, r0
 800f88a:	3901      	subs	r1, #1
 800f88c:	4008      	ands	r0, r1
 800f88e:	4770      	bx	lr

0800f890 <ucdr_buffer_alignment>:
 800f890:	7d43      	ldrb	r3, [r0, #21]
 800f892:	428b      	cmp	r3, r1
 800f894:	d208      	bcs.n	800f8a8 <ucdr_buffer_alignment+0x18>
 800f896:	6903      	ldr	r3, [r0, #16]
 800f898:	fbb3 f0f1 	udiv	r0, r3, r1
 800f89c:	fb01 3010 	mls	r0, r1, r0, r3
 800f8a0:	1a08      	subs	r0, r1, r0
 800f8a2:	3901      	subs	r1, #1
 800f8a4:	4008      	ands	r0, r1
 800f8a6:	4770      	bx	lr
 800f8a8:	2000      	movs	r0, #0
 800f8aa:	4770      	bx	lr

0800f8ac <ucdr_align_to>:
 800f8ac:	b570      	push	{r4, r5, r6, lr}
 800f8ae:	4604      	mov	r4, r0
 800f8b0:	460e      	mov	r6, r1
 800f8b2:	f7ff ffed 	bl	800f890 <ucdr_buffer_alignment>
 800f8b6:	68a5      	ldr	r5, [r4, #8]
 800f8b8:	6863      	ldr	r3, [r4, #4]
 800f8ba:	6922      	ldr	r2, [r4, #16]
 800f8bc:	7566      	strb	r6, [r4, #21]
 800f8be:	4405      	add	r5, r0
 800f8c0:	42ab      	cmp	r3, r5
 800f8c2:	4410      	add	r0, r2
 800f8c4:	bf28      	it	cs
 800f8c6:	462b      	movcs	r3, r5
 800f8c8:	6120      	str	r0, [r4, #16]
 800f8ca:	60a3      	str	r3, [r4, #8]
 800f8cc:	bd70      	pop	{r4, r5, r6, pc}
 800f8ce:	bf00      	nop

0800f8d0 <ucdr_buffer_length>:
 800f8d0:	6882      	ldr	r2, [r0, #8]
 800f8d2:	6800      	ldr	r0, [r0, #0]
 800f8d4:	1a10      	subs	r0, r2, r0
 800f8d6:	4770      	bx	lr

0800f8d8 <ucdr_buffer_remaining>:
 800f8d8:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800f8dc:	1a10      	subs	r0, r2, r0
 800f8de:	4770      	bx	lr

0800f8e0 <ucdr_check_final_buffer_behavior_array>:
 800f8e0:	b538      	push	{r3, r4, r5, lr}
 800f8e2:	7d83      	ldrb	r3, [r0, #22]
 800f8e4:	b963      	cbnz	r3, 800f900 <ucdr_check_final_buffer_behavior_array+0x20>
 800f8e6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	4604      	mov	r4, r0
 800f8ee:	460d      	mov	r5, r1
 800f8f0:	d308      	bcc.n	800f904 <ucdr_check_final_buffer_behavior_array+0x24>
 800f8f2:	b139      	cbz	r1, 800f904 <ucdr_check_final_buffer_behavior_array+0x24>
 800f8f4:	6983      	ldr	r3, [r0, #24]
 800f8f6:	b163      	cbz	r3, 800f912 <ucdr_check_final_buffer_behavior_array+0x32>
 800f8f8:	69c1      	ldr	r1, [r0, #28]
 800f8fa:	4798      	blx	r3
 800f8fc:	75a0      	strb	r0, [r4, #22]
 800f8fe:	b108      	cbz	r0, 800f904 <ucdr_check_final_buffer_behavior_array+0x24>
 800f900:	2000      	movs	r0, #0
 800f902:	bd38      	pop	{r3, r4, r5, pc}
 800f904:	4620      	mov	r0, r4
 800f906:	f7ff ffe7 	bl	800f8d8 <ucdr_buffer_remaining>
 800f90a:	42a8      	cmp	r0, r5
 800f90c:	bf28      	it	cs
 800f90e:	4628      	movcs	r0, r5
 800f910:	bd38      	pop	{r3, r4, r5, pc}
 800f912:	2301      	movs	r3, #1
 800f914:	7583      	strb	r3, [r0, #22]
 800f916:	e7f3      	b.n	800f900 <ucdr_check_final_buffer_behavior_array+0x20>

0800f918 <ucdr_advance_buffer>:
 800f918:	b538      	push	{r3, r4, r5, lr}
 800f91a:	4604      	mov	r4, r0
 800f91c:	460d      	mov	r5, r1
 800f91e:	f7ff ff59 	bl	800f7d4 <ucdr_check_buffer_available_for>
 800f922:	b178      	cbz	r0, 800f944 <ucdr_advance_buffer+0x2c>
 800f924:	68a3      	ldr	r3, [r4, #8]
 800f926:	6921      	ldr	r1, [r4, #16]
 800f928:	442b      	add	r3, r5
 800f92a:	60a3      	str	r3, [r4, #8]
 800f92c:	2301      	movs	r3, #1
 800f92e:	4429      	add	r1, r5
 800f930:	7563      	strb	r3, [r4, #21]
 800f932:	6121      	str	r1, [r4, #16]
 800f934:	bd38      	pop	{r3, r4, r5, pc}
 800f936:	68a2      	ldr	r2, [r4, #8]
 800f938:	6923      	ldr	r3, [r4, #16]
 800f93a:	4402      	add	r2, r0
 800f93c:	4403      	add	r3, r0
 800f93e:	1a2d      	subs	r5, r5, r0
 800f940:	60a2      	str	r2, [r4, #8]
 800f942:	6123      	str	r3, [r4, #16]
 800f944:	2201      	movs	r2, #1
 800f946:	4629      	mov	r1, r5
 800f948:	4620      	mov	r0, r4
 800f94a:	f7ff ffc9 	bl	800f8e0 <ucdr_check_final_buffer_behavior_array>
 800f94e:	2800      	cmp	r0, #0
 800f950:	d1f1      	bne.n	800f936 <ucdr_advance_buffer+0x1e>
 800f952:	2301      	movs	r3, #1
 800f954:	7563      	strb	r3, [r4, #21]
 800f956:	bd38      	pop	{r3, r4, r5, pc}

0800f958 <uxr_buffer_delete_entity>:
 800f958:	b530      	push	{r4, r5, lr}
 800f95a:	b08f      	sub	sp, #60	; 0x3c
 800f95c:	2403      	movs	r4, #3
 800f95e:	2500      	movs	r5, #0
 800f960:	e9cd 4500 	strd	r4, r5, [sp]
 800f964:	9202      	str	r2, [sp, #8]
 800f966:	ab06      	add	r3, sp, #24
 800f968:	2204      	movs	r2, #4
 800f96a:	9103      	str	r1, [sp, #12]
 800f96c:	4604      	mov	r4, r0
 800f96e:	f001 fa85 	bl	8010e7c <uxr_prepare_stream_to_write_submessage>
 800f972:	b918      	cbnz	r0, 800f97c <uxr_buffer_delete_entity+0x24>
 800f974:	4604      	mov	r4, r0
 800f976:	4620      	mov	r0, r4
 800f978:	b00f      	add	sp, #60	; 0x3c
 800f97a:	bd30      	pop	{r4, r5, pc}
 800f97c:	9902      	ldr	r1, [sp, #8]
 800f97e:	aa05      	add	r2, sp, #20
 800f980:	4620      	mov	r0, r4
 800f982:	f001 fbb5 	bl	80110f0 <uxr_init_base_object_request>
 800f986:	a905      	add	r1, sp, #20
 800f988:	4604      	mov	r4, r0
 800f98a:	a806      	add	r0, sp, #24
 800f98c:	f002 fdf0 	bl	8012570 <uxr_serialize_DELETE_Payload>
 800f990:	4620      	mov	r0, r4
 800f992:	b00f      	add	sp, #60	; 0x3c
 800f994:	bd30      	pop	{r4, r5, pc}
 800f996:	bf00      	nop

0800f998 <uxr_common_create_entity>:
 800f998:	b530      	push	{r4, r5, lr}
 800f99a:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800f99e:	b08d      	sub	sp, #52	; 0x34
 800f9a0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800f9a4:	2d01      	cmp	r5, #1
 800f9a6:	bf0c      	ite	eq
 800f9a8:	f003 0201 	andeq.w	r2, r3, #1
 800f9ac:	2200      	movne	r2, #0
 800f9ae:	330e      	adds	r3, #14
 800f9b0:	4604      	mov	r4, r0
 800f9b2:	441a      	add	r2, r3
 800f9b4:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 800f9b8:	9001      	str	r0, [sp, #4]
 800f9ba:	2101      	movs	r1, #1
 800f9bc:	9100      	str	r1, [sp, #0]
 800f9be:	b292      	uxth	r2, r2
 800f9c0:	9903      	ldr	r1, [sp, #12]
 800f9c2:	ab04      	add	r3, sp, #16
 800f9c4:	4620      	mov	r0, r4
 800f9c6:	f001 fa59 	bl	8010e7c <uxr_prepare_stream_to_write_submessage>
 800f9ca:	b918      	cbnz	r0, 800f9d4 <uxr_common_create_entity+0x3c>
 800f9cc:	4604      	mov	r4, r0
 800f9ce:	4620      	mov	r0, r4
 800f9d0:	b00d      	add	sp, #52	; 0x34
 800f9d2:	bd30      	pop	{r4, r5, pc}
 800f9d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f9d6:	9902      	ldr	r1, [sp, #8]
 800f9d8:	4620      	mov	r0, r4
 800f9da:	f001 fb89 	bl	80110f0 <uxr_init_base_object_request>
 800f9de:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f9e0:	4604      	mov	r4, r0
 800f9e2:	a804      	add	r0, sp, #16
 800f9e4:	f002 fd18 	bl	8012418 <uxr_serialize_CREATE_Payload>
 800f9e8:	4620      	mov	r0, r4
 800f9ea:	b00d      	add	sp, #52	; 0x34
 800f9ec:	bd30      	pop	{r4, r5, pc}
 800f9ee:	bf00      	nop

0800f9f0 <uxr_buffer_create_participant_bin>:
 800f9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9f2:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 800f9f6:	ac11      	add	r4, sp, #68	; 0x44
 800f9f8:	9103      	str	r1, [sp, #12]
 800f9fa:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 800f9fc:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 800fa00:	2103      	movs	r1, #3
 800fa02:	7221      	strb	r1, [r4, #8]
 800fa04:	2301      	movs	r3, #1
 800fa06:	2100      	movs	r1, #0
 800fa08:	7123      	strb	r3, [r4, #4]
 800fa0a:	f89d 7274 	ldrb.w	r7, [sp, #628]	; 0x274
 800fa0e:	9202      	str	r2, [sp, #8]
 800fa10:	4605      	mov	r5, r0
 800fa12:	f88d 1014 	strb.w	r1, [sp, #20]
 800fa16:	b1ce      	cbz	r6, 800fa4c <uxr_buffer_create_participant_bin+0x5c>
 800fa18:	f88d 301c 	strb.w	r3, [sp, #28]
 800fa1c:	9608      	str	r6, [sp, #32]
 800fa1e:	a809      	add	r0, sp, #36	; 0x24
 800fa20:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fa24:	a915      	add	r1, sp, #84	; 0x54
 800fa26:	f7ff ff27 	bl	800f878 <ucdr_init_buffer>
 800fa2a:	a905      	add	r1, sp, #20
 800fa2c:	a809      	add	r0, sp, #36	; 0x24
 800fa2e:	f002 f8bb 	bl	8011ba8 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800fa32:	980d      	ldr	r0, [sp, #52]	; 0x34
 800fa34:	9401      	str	r4, [sp, #4]
 800fa36:	b283      	uxth	r3, r0
 800fa38:	9700      	str	r7, [sp, #0]
 800fa3a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fa3e:	60e0      	str	r0, [r4, #12]
 800fa40:	4628      	mov	r0, r5
 800fa42:	f7ff ffa9 	bl	800f998 <uxr_common_create_entity>
 800fa46:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 800fa4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa4c:	f88d 601c 	strb.w	r6, [sp, #28]
 800fa50:	e7e5      	b.n	800fa1e <uxr_buffer_create_participant_bin+0x2e>
 800fa52:	bf00      	nop

0800fa54 <uxr_buffer_create_topic_bin>:
 800fa54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa56:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800fa5a:	ac13      	add	r4, sp, #76	; 0x4c
 800fa5c:	4605      	mov	r5, r0
 800fa5e:	9105      	str	r1, [sp, #20]
 800fa60:	4618      	mov	r0, r3
 800fa62:	a997      	add	r1, sp, #604	; 0x25c
 800fa64:	2602      	movs	r6, #2
 800fa66:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fa6a:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 800fa6e:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 800fa72:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 800fa74:	f000 f994 	bl	800fda0 <uxr_object_id_to_raw>
 800fa78:	9a9e      	ldr	r2, [sp, #632]	; 0x278
 800fa7a:	9206      	str	r2, [sp, #24]
 800fa7c:	2303      	movs	r3, #3
 800fa7e:	2101      	movs	r1, #1
 800fa80:	7223      	strb	r3, [r4, #8]
 800fa82:	a80b      	add	r0, sp, #44	; 0x2c
 800fa84:	2300      	movs	r3, #0
 800fa86:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fa8a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800fa8e:	a917      	add	r1, sp, #92	; 0x5c
 800fa90:	f88d 301c 	strb.w	r3, [sp, #28]
 800fa94:	960a      	str	r6, [sp, #40]	; 0x28
 800fa96:	f7ff feef 	bl	800f878 <ucdr_init_buffer>
 800fa9a:	a906      	add	r1, sp, #24
 800fa9c:	a80b      	add	r0, sp, #44	; 0x2c
 800fa9e:	f002 f8a5 	bl	8011bec <uxr_serialize_OBJK_Topic_Binary>
 800faa2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800faa4:	9401      	str	r4, [sp, #4]
 800faa6:	9700      	str	r7, [sp, #0]
 800faa8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800faac:	4628      	mov	r0, r5
 800faae:	b2b3      	uxth	r3, r6
 800fab0:	60e6      	str	r6, [r4, #12]
 800fab2:	f7ff ff71 	bl	800f998 <uxr_common_create_entity>
 800fab6:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800faba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fabc <uxr_buffer_create_publisher_bin>:
 800fabc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fabe:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800fac2:	ac0e      	add	r4, sp, #56	; 0x38
 800fac4:	4605      	mov	r5, r0
 800fac6:	9105      	str	r1, [sp, #20]
 800fac8:	4618      	mov	r0, r3
 800faca:	2603      	movs	r6, #3
 800facc:	a992      	add	r1, sp, #584	; 0x248
 800face:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fad2:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800fad6:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800fada:	f000 f961 	bl	800fda0 <uxr_object_id_to_raw>
 800fade:	2300      	movs	r3, #0
 800fae0:	a806      	add	r0, sp, #24
 800fae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fae6:	a912      	add	r1, sp, #72	; 0x48
 800fae8:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800faec:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800faf0:	7226      	strb	r6, [r4, #8]
 800faf2:	f7ff fec1 	bl	800f878 <ucdr_init_buffer>
 800faf6:	a993      	add	r1, sp, #588	; 0x24c
 800faf8:	a806      	add	r0, sp, #24
 800fafa:	f002 f92b 	bl	8011d54 <uxr_serialize_OBJK_Publisher_Binary>
 800fafe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fb00:	9700      	str	r7, [sp, #0]
 800fb02:	9401      	str	r4, [sp, #4]
 800fb04:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fb08:	4628      	mov	r0, r5
 800fb0a:	b2b3      	uxth	r3, r6
 800fb0c:	60e6      	str	r6, [r4, #12]
 800fb0e:	f7ff ff43 	bl	800f998 <uxr_common_create_entity>
 800fb12:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800fb16:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fb18 <uxr_buffer_create_subscriber_bin>:
 800fb18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb1a:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800fb1e:	ac0e      	add	r4, sp, #56	; 0x38
 800fb20:	4605      	mov	r5, r0
 800fb22:	9105      	str	r1, [sp, #20]
 800fb24:	4618      	mov	r0, r3
 800fb26:	a992      	add	r1, sp, #584	; 0x248
 800fb28:	2604      	movs	r6, #4
 800fb2a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fb2e:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800fb32:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800fb36:	f000 f933 	bl	800fda0 <uxr_object_id_to_raw>
 800fb3a:	2103      	movs	r1, #3
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	a806      	add	r0, sp, #24
 800fb40:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fb44:	7221      	strb	r1, [r4, #8]
 800fb46:	a912      	add	r1, sp, #72	; 0x48
 800fb48:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800fb4c:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800fb50:	f7ff fe92 	bl	800f878 <ucdr_init_buffer>
 800fb54:	a993      	add	r1, sp, #588	; 0x24c
 800fb56:	a806      	add	r0, sp, #24
 800fb58:	f002 f9ac 	bl	8011eb4 <uxr_serialize_OBJK_Subscriber_Binary>
 800fb5c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fb5e:	9700      	str	r7, [sp, #0]
 800fb60:	9401      	str	r4, [sp, #4]
 800fb62:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fb66:	4628      	mov	r0, r5
 800fb68:	b2b3      	uxth	r3, r6
 800fb6a:	60e6      	str	r6, [r4, #12]
 800fb6c:	f7ff ff14 	bl	800f998 <uxr_common_create_entity>
 800fb70:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800fb74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb76:	bf00      	nop

0800fb78 <uxr_buffer_create_datawriter_bin>:
 800fb78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb7c:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800fb80:	ac1d      	add	r4, sp, #116	; 0x74
 800fb82:	2505      	movs	r5, #5
 800fb84:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fb88:	9105      	str	r1, [sp, #20]
 800fb8a:	4606      	mov	r6, r0
 800fb8c:	a9a1      	add	r1, sp, #644	; 0x284
 800fb8e:	4618      	mov	r0, r3
 800fb90:	7125      	strb	r5, [r4, #4]
 800fb92:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800fb96:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800fb9a:	2703      	movs	r7, #3
 800fb9c:	f000 f900 	bl	800fda0 <uxr_object_id_to_raw>
 800fba0:	a90e      	add	r1, sp, #56	; 0x38
 800fba2:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800fba4:	7227      	strb	r7, [r4, #8]
 800fba6:	f000 f8fb 	bl	800fda0 <uxr_object_id_to_raw>
 800fbaa:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800fbae:	f89d 12a5 	ldrb.w	r1, [sp, #677]	; 0x2a5
 800fbb2:	3d00      	subs	r5, #0
 800fbb4:	f04f 0300 	mov.w	r3, #0
 800fbb8:	bf18      	it	ne
 800fbba:	2501      	movne	r5, #1
 800fbbc:	2201      	movs	r2, #1
 800fbbe:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800fbc2:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800fbc6:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800fbca:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800fbce:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800fbd2:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800fbd6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800fbda:	bb89      	cbnz	r1, 800fc40 <uxr_buffer_create_datawriter_bin+0xc8>
 800fbdc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800fbe0:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800fbe4:	f04f 0c13 	mov.w	ip, #19
 800fbe8:	250b      	movs	r5, #11
 800fbea:	2221      	movs	r2, #33	; 0x21
 800fbec:	2111      	movs	r1, #17
 800fbee:	2009      	movs	r0, #9
 800fbf0:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800fbf4:	b923      	cbnz	r3, 800fc00 <uxr_buffer_create_datawriter_bin+0x88>
 800fbf6:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800fbfa:	4672      	mov	r2, lr
 800fbfc:	4661      	mov	r1, ip
 800fbfe:	4628      	mov	r0, r5
 800fc00:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800fc04:	2b01      	cmp	r3, #1
 800fc06:	d025      	beq.n	800fc54 <uxr_buffer_create_datawriter_bin+0xdc>
 800fc08:	2b03      	cmp	r3, #3
 800fc0a:	d029      	beq.n	800fc60 <uxr_buffer_create_datawriter_bin+0xe8>
 800fc0c:	b32b      	cbz	r3, 800fc5a <uxr_buffer_create_datawriter_bin+0xe2>
 800fc0e:	a806      	add	r0, sp, #24
 800fc10:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fc14:	a921      	add	r1, sp, #132	; 0x84
 800fc16:	f7ff fe2f 	bl	800f878 <ucdr_init_buffer>
 800fc1a:	a90e      	add	r1, sp, #56	; 0x38
 800fc1c:	a806      	add	r0, sp, #24
 800fc1e:	f002 f9fb 	bl	8012018 <uxr_serialize_OBJK_DataWriter_Binary>
 800fc22:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fc24:	9401      	str	r4, [sp, #4]
 800fc26:	b283      	uxth	r3, r0
 800fc28:	f8cd 8000 	str.w	r8, [sp]
 800fc2c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fc30:	60e0      	str	r0, [r4, #12]
 800fc32:	4630      	mov	r0, r6
 800fc34:	f7ff feb0 	bl	800f998 <uxr_common_create_entity>
 800fc38:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800fc3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc40:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800fc44:	f04f 0c12 	mov.w	ip, #18
 800fc48:	250a      	movs	r5, #10
 800fc4a:	2220      	movs	r2, #32
 800fc4c:	2110      	movs	r1, #16
 800fc4e:	2008      	movs	r0, #8
 800fc50:	2702      	movs	r7, #2
 800fc52:	e7cd      	b.n	800fbf0 <uxr_buffer_create_datawriter_bin+0x78>
 800fc54:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800fc58:	e7d9      	b.n	800fc0e <uxr_buffer_create_datawriter_bin+0x96>
 800fc5a:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800fc5e:	e7d6      	b.n	800fc0e <uxr_buffer_create_datawriter_bin+0x96>
 800fc60:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800fc64:	e7d3      	b.n	800fc0e <uxr_buffer_create_datawriter_bin+0x96>
 800fc66:	bf00      	nop

0800fc68 <uxr_buffer_create_datareader_bin>:
 800fc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc6c:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800fc70:	ac1f      	add	r4, sp, #124	; 0x7c
 800fc72:	2506      	movs	r5, #6
 800fc74:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fc78:	9105      	str	r1, [sp, #20]
 800fc7a:	4606      	mov	r6, r0
 800fc7c:	a9a3      	add	r1, sp, #652	; 0x28c
 800fc7e:	4618      	mov	r0, r3
 800fc80:	7125      	strb	r5, [r4, #4]
 800fc82:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 800fc86:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 800fc8a:	2703      	movs	r7, #3
 800fc8c:	f000 f888 	bl	800fda0 <uxr_object_id_to_raw>
 800fc90:	a90e      	add	r1, sp, #56	; 0x38
 800fc92:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 800fc94:	7227      	strb	r7, [r4, #8]
 800fc96:	f000 f883 	bl	800fda0 <uxr_object_id_to_raw>
 800fc9a:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800fc9e:	f89d 12ad 	ldrb.w	r1, [sp, #685]	; 0x2ad
 800fca2:	3d00      	subs	r5, #0
 800fca4:	f04f 0300 	mov.w	r3, #0
 800fca8:	bf18      	it	ne
 800fcaa:	2501      	movne	r5, #1
 800fcac:	2201      	movs	r2, #1
 800fcae:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800fcb2:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800fcb6:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800fcba:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800fcbe:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800fcc2:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800fcc6:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800fcca:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800fcce:	bb89      	cbnz	r1, 800fd34 <uxr_buffer_create_datareader_bin+0xcc>
 800fcd0:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800fcd4:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800fcd8:	f04f 0c13 	mov.w	ip, #19
 800fcdc:	250b      	movs	r5, #11
 800fcde:	2221      	movs	r2, #33	; 0x21
 800fce0:	2111      	movs	r1, #17
 800fce2:	2009      	movs	r0, #9
 800fce4:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 800fce8:	b923      	cbnz	r3, 800fcf4 <uxr_buffer_create_datareader_bin+0x8c>
 800fcea:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800fcee:	4672      	mov	r2, lr
 800fcf0:	4661      	mov	r1, ip
 800fcf2:	4628      	mov	r0, r5
 800fcf4:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 800fcf8:	2b01      	cmp	r3, #1
 800fcfa:	d025      	beq.n	800fd48 <uxr_buffer_create_datareader_bin+0xe0>
 800fcfc:	2b03      	cmp	r3, #3
 800fcfe:	d029      	beq.n	800fd54 <uxr_buffer_create_datareader_bin+0xec>
 800fd00:	b32b      	cbz	r3, 800fd4e <uxr_buffer_create_datareader_bin+0xe6>
 800fd02:	a806      	add	r0, sp, #24
 800fd04:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fd08:	a923      	add	r1, sp, #140	; 0x8c
 800fd0a:	f7ff fdb5 	bl	800f878 <ucdr_init_buffer>
 800fd0e:	a90e      	add	r1, sp, #56	; 0x38
 800fd10:	a806      	add	r0, sp, #24
 800fd12:	f002 f945 	bl	8011fa0 <uxr_serialize_OBJK_DataReader_Binary>
 800fd16:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fd18:	9401      	str	r4, [sp, #4]
 800fd1a:	b283      	uxth	r3, r0
 800fd1c:	f8cd 8000 	str.w	r8, [sp]
 800fd20:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fd24:	60e0      	str	r0, [r4, #12]
 800fd26:	4630      	mov	r0, r6
 800fd28:	f7ff fe36 	bl	800f998 <uxr_common_create_entity>
 800fd2c:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800fd30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd34:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800fd38:	f04f 0c12 	mov.w	ip, #18
 800fd3c:	250a      	movs	r5, #10
 800fd3e:	2220      	movs	r2, #32
 800fd40:	2110      	movs	r1, #16
 800fd42:	2008      	movs	r0, #8
 800fd44:	2702      	movs	r7, #2
 800fd46:	e7cd      	b.n	800fce4 <uxr_buffer_create_datareader_bin+0x7c>
 800fd48:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800fd4c:	e7d9      	b.n	800fd02 <uxr_buffer_create_datareader_bin+0x9a>
 800fd4e:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800fd52:	e7d6      	b.n	800fd02 <uxr_buffer_create_datareader_bin+0x9a>
 800fd54:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800fd58:	e7d3      	b.n	800fd02 <uxr_buffer_create_datareader_bin+0x9a>
 800fd5a:	bf00      	nop

0800fd5c <uxr_object_id>:
 800fd5c:	b082      	sub	sp, #8
 800fd5e:	2300      	movs	r3, #0
 800fd60:	f88d 1006 	strb.w	r1, [sp, #6]
 800fd64:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fd68:	f360 030f 	bfi	r3, r0, #0, #16
 800fd6c:	f362 431f 	bfi	r3, r2, #16, #16
 800fd70:	4618      	mov	r0, r3
 800fd72:	b002      	add	sp, #8
 800fd74:	4770      	bx	lr
 800fd76:	bf00      	nop

0800fd78 <uxr_object_id_from_raw>:
 800fd78:	7843      	ldrb	r3, [r0, #1]
 800fd7a:	7801      	ldrb	r1, [r0, #0]
 800fd7c:	b082      	sub	sp, #8
 800fd7e:	f003 000f 	and.w	r0, r3, #15
 800fd82:	f88d 0006 	strb.w	r0, [sp, #6]
 800fd86:	091b      	lsrs	r3, r3, #4
 800fd88:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800fd92:	f363 020f 	bfi	r2, r3, #0, #16
 800fd96:	f361 421f 	bfi	r2, r1, #16, #16
 800fd9a:	4610      	mov	r0, r2
 800fd9c:	b002      	add	sp, #8
 800fd9e:	4770      	bx	lr

0800fda0 <uxr_object_id_to_raw>:
 800fda0:	4602      	mov	r2, r0
 800fda2:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800fda6:	b082      	sub	sp, #8
 800fda8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800fdac:	f3c2 120b 	ubfx	r2, r2, #4, #12
 800fdb0:	700a      	strb	r2, [r1, #0]
 800fdb2:	704b      	strb	r3, [r1, #1]
 800fdb4:	b002      	add	sp, #8
 800fdb6:	4770      	bx	lr

0800fdb8 <uxr_buffer_request_data>:
 800fdb8:	b530      	push	{r4, r5, lr}
 800fdba:	b095      	sub	sp, #84	; 0x54
 800fdbc:	4604      	mov	r4, r0
 800fdbe:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800fdc0:	9105      	str	r1, [sp, #20]
 800fdc2:	2d00      	cmp	r5, #0
 800fdc4:	bf14      	ite	ne
 800fdc6:	2101      	movne	r1, #1
 800fdc8:	2100      	moveq	r1, #0
 800fdca:	9204      	str	r2, [sp, #16]
 800fdcc:	f04f 0200 	mov.w	r2, #0
 800fdd0:	9303      	str	r3, [sp, #12]
 800fdd2:	f88d 301c 	strb.w	r3, [sp, #28]
 800fdd6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800fdda:	f88d 201d 	strb.w	r2, [sp, #29]
 800fdde:	f88d 201e 	strb.w	r2, [sp, #30]
 800fde2:	d021      	beq.n	800fe28 <uxr_buffer_request_data+0x70>
 800fde4:	686a      	ldr	r2, [r5, #4]
 800fde6:	682b      	ldr	r3, [r5, #0]
 800fde8:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 800fdec:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 800fdf0:	2210      	movs	r2, #16
 800fdf2:	2000      	movs	r0, #0
 800fdf4:	2108      	movs	r1, #8
 800fdf6:	e9cd 1000 	strd	r1, r0, [sp]
 800fdfa:	ab0c      	add	r3, sp, #48	; 0x30
 800fdfc:	9905      	ldr	r1, [sp, #20]
 800fdfe:	4620      	mov	r0, r4
 800fe00:	f001 f83c 	bl	8010e7c <uxr_prepare_stream_to_write_submessage>
 800fe04:	b918      	cbnz	r0, 800fe0e <uxr_buffer_request_data+0x56>
 800fe06:	4604      	mov	r4, r0
 800fe08:	4620      	mov	r0, r4
 800fe0a:	b015      	add	sp, #84	; 0x54
 800fe0c:	bd30      	pop	{r4, r5, pc}
 800fe0e:	9904      	ldr	r1, [sp, #16]
 800fe10:	aa06      	add	r2, sp, #24
 800fe12:	4620      	mov	r0, r4
 800fe14:	f001 f96c 	bl	80110f0 <uxr_init_base_object_request>
 800fe18:	a906      	add	r1, sp, #24
 800fe1a:	4604      	mov	r4, r0
 800fe1c:	a80c      	add	r0, sp, #48	; 0x30
 800fe1e:	f002 fc51 	bl	80126c4 <uxr_serialize_READ_DATA_Payload>
 800fe22:	4620      	mov	r0, r4
 800fe24:	b015      	add	sp, #84	; 0x54
 800fe26:	bd30      	pop	{r4, r5, pc}
 800fe28:	2208      	movs	r2, #8
 800fe2a:	e7e2      	b.n	800fdf2 <uxr_buffer_request_data+0x3a>

0800fe2c <uxr_buffer_cancel_data>:
 800fe2c:	b530      	push	{r4, r5, lr}
 800fe2e:	b095      	sub	sp, #84	; 0x54
 800fe30:	2400      	movs	r4, #0
 800fe32:	2308      	movs	r3, #8
 800fe34:	e9cd 4201 	strd	r4, r2, [sp, #4]
 800fe38:	9300      	str	r3, [sp, #0]
 800fe3a:	9205      	str	r2, [sp, #20]
 800fe3c:	2501      	movs	r5, #1
 800fe3e:	ab0c      	add	r3, sp, #48	; 0x30
 800fe40:	2210      	movs	r2, #16
 800fe42:	f8ad 401c 	strh.w	r4, [sp, #28]
 800fe46:	f88d 401e 	strb.w	r4, [sp, #30]
 800fe4a:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 800fe4e:	f8cd 402a 	str.w	r4, [sp, #42]	; 0x2a
 800fe52:	9103      	str	r1, [sp, #12]
 800fe54:	4604      	mov	r4, r0
 800fe56:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 800fe5a:	f001 f80f 	bl	8010e7c <uxr_prepare_stream_to_write_submessage>
 800fe5e:	b918      	cbnz	r0, 800fe68 <uxr_buffer_cancel_data+0x3c>
 800fe60:	4604      	mov	r4, r0
 800fe62:	4620      	mov	r0, r4
 800fe64:	b015      	add	sp, #84	; 0x54
 800fe66:	bd30      	pop	{r4, r5, pc}
 800fe68:	9905      	ldr	r1, [sp, #20]
 800fe6a:	aa06      	add	r2, sp, #24
 800fe6c:	4620      	mov	r0, r4
 800fe6e:	f001 f93f 	bl	80110f0 <uxr_init_base_object_request>
 800fe72:	a906      	add	r1, sp, #24
 800fe74:	4604      	mov	r4, r0
 800fe76:	a80c      	add	r0, sp, #48	; 0x30
 800fe78:	f002 fc24 	bl	80126c4 <uxr_serialize_READ_DATA_Payload>
 800fe7c:	4620      	mov	r0, r4
 800fe7e:	b015      	add	sp, #84	; 0x54
 800fe80:	bd30      	pop	{r4, r5, pc}
 800fe82:	bf00      	nop

0800fe84 <read_submessage_format>:
 800fe84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe88:	b095      	sub	sp, #84	; 0x54
 800fe8a:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 800fe8e:	b113      	cbz	r3, 800fe96 <read_submessage_format+0x12>
 800fe90:	b015      	add	sp, #84	; 0x54
 800fe92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe96:	460c      	mov	r4, r1
 800fe98:	4616      	mov	r6, r2
 800fe9a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800fe9e:	461d      	mov	r5, r3
 800fea0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800fea2:	9304      	str	r3, [sp, #16]
 800fea4:	1a52      	subs	r2, r2, r1
 800fea6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fea8:	9305      	str	r3, [sp, #20]
 800feaa:	4607      	mov	r7, r0
 800feac:	a80c      	add	r0, sp, #48	; 0x30
 800feae:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 800feb2:	f7ff fce1 	bl	800f878 <ucdr_init_buffer>
 800feb6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800feba:	a80c      	add	r0, sp, #48	; 0x30
 800febc:	f7ff fcb2 	bl	800f824 <ucdr_set_on_full_buffer_callback>
 800fec0:	69e3      	ldr	r3, [r4, #28]
 800fec2:	b193      	cbz	r3, 800feea <read_submessage_format+0x66>
 800fec4:	f1b8 0f07 	cmp.w	r8, #7
 800fec8:	751d      	strb	r5, [r3, #20]
 800feca:	d03e      	beq.n	800ff4a <read_submessage_format+0xc6>
 800fecc:	f1b8 0f08 	cmp.w	r8, #8
 800fed0:	d02c      	beq.n	800ff2c <read_submessage_format+0xa8>
 800fed2:	f1b8 0f06 	cmp.w	r8, #6
 800fed6:	d011      	beq.n	800fefc <read_submessage_format+0x78>
 800fed8:	2201      	movs	r2, #1
 800feda:	751a      	strb	r2, [r3, #20]
 800fedc:	4631      	mov	r1, r6
 800fede:	4620      	mov	r0, r4
 800fee0:	f7ff fd1a 	bl	800f918 <ucdr_advance_buffer>
 800fee4:	b015      	add	sp, #84	; 0x54
 800fee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800feea:	f1b8 0f07 	cmp.w	r8, #7
 800feee:	d02c      	beq.n	800ff4a <read_submessage_format+0xc6>
 800fef0:	f1b8 0f08 	cmp.w	r8, #8
 800fef4:	d01a      	beq.n	800ff2c <read_submessage_format+0xa8>
 800fef6:	f1b8 0f06 	cmp.w	r8, #6
 800fefa:	d1ef      	bne.n	800fedc <read_submessage_format+0x58>
 800fefc:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 800ff00:	b18d      	cbz	r5, 800ff26 <read_submessage_format+0xa2>
 800ff02:	2306      	movs	r3, #6
 800ff04:	f88d 3016 	strb.w	r3, [sp, #22]
 800ff08:	aa0c      	add	r2, sp, #48	; 0x30
 800ff0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ff0e:	9302      	str	r3, [sp, #8]
 800ff10:	9200      	str	r2, [sp, #0]
 800ff12:	9b04      	ldr	r3, [sp, #16]
 800ff14:	9905      	ldr	r1, [sp, #20]
 800ff16:	9601      	str	r6, [sp, #4]
 800ff18:	464a      	mov	r2, r9
 800ff1a:	4638      	mov	r0, r7
 800ff1c:	47a8      	blx	r5
 800ff1e:	2301      	movs	r3, #1
 800ff20:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800ff24:	69e3      	ldr	r3, [r4, #28]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d1d6      	bne.n	800fed8 <read_submessage_format+0x54>
 800ff2a:	e7d7      	b.n	800fedc <read_submessage_format+0x58>
 800ff2c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ff30:	2a00      	cmp	r2, #0
 800ff32:	d0f8      	beq.n	800ff26 <read_submessage_format+0xa2>
 800ff34:	a906      	add	r1, sp, #24
 800ff36:	a80c      	add	r0, sp, #48	; 0x30
 800ff38:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ff3a:	f002 fc89 	bl	8012850 <uxr_deserialize_SampleIdentity>
 800ff3e:	2800      	cmp	r0, #0
 800ff40:	d13c      	bne.n	800ffbc <read_submessage_format+0x138>
 800ff42:	69e3      	ldr	r3, [r4, #28]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d1c7      	bne.n	800fed8 <read_submessage_format+0x54>
 800ff48:	e7c8      	b.n	800fedc <read_submessage_format+0x58>
 800ff4a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ff4e:	b132      	cbz	r2, 800ff5e <read_submessage_format+0xda>
 800ff50:	a906      	add	r1, sp, #24
 800ff52:	a80c      	add	r0, sp, #48	; 0x30
 800ff54:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ff56:	f002 f939 	bl	80121cc <uxr_deserialize_BaseObjectRequest>
 800ff5a:	b930      	cbnz	r0, 800ff6a <read_submessage_format+0xe6>
 800ff5c:	69e3      	ldr	r3, [r4, #28]
 800ff5e:	68a2      	ldr	r2, [r4, #8]
 800ff60:	4432      	add	r2, r6
 800ff62:	60a2      	str	r2, [r4, #8]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d1b7      	bne.n	800fed8 <read_submessage_format+0x54>
 800ff68:	e7b8      	b.n	800fedc <read_submessage_format+0x58>
 800ff6a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800ff6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ff70:	1a52      	subs	r2, r2, r1
 800ff72:	a80c      	add	r0, sp, #48	; 0x30
 800ff74:	1aed      	subs	r5, r5, r3
 800ff76:	f7ff fc7f 	bl	800f878 <ucdr_init_buffer>
 800ff7a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ff7e:	a80c      	add	r0, sp, #48	; 0x30
 800ff80:	f7ff fc50 	bl	800f824 <ucdr_set_on_full_buffer_callback>
 800ff84:	4435      	add	r5, r6
 800ff86:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800ff8a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800ff8e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800ff92:	9002      	str	r0, [sp, #8]
 800ff94:	2207      	movs	r2, #7
 800ff96:	f88d 2016 	strb.w	r2, [sp, #22]
 800ff9a:	b2ad      	uxth	r5, r5
 800ff9c:	aa0c      	add	r2, sp, #48	; 0x30
 800ff9e:	9200      	str	r2, [sp, #0]
 800ffa0:	9501      	str	r5, [sp, #4]
 800ffa2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800ffa6:	b29b      	uxth	r3, r3
 800ffa8:	9905      	ldr	r1, [sp, #20]
 800ffaa:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
 800ffae:	464a      	mov	r2, r9
 800ffb0:	4638      	mov	r0, r7
 800ffb2:	47a8      	blx	r5
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800ffba:	e7cf      	b.n	800ff5c <read_submessage_format+0xd8>
 800ffbc:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800ffc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ffc2:	1a52      	subs	r2, r2, r1
 800ffc4:	a80c      	add	r0, sp, #48	; 0x30
 800ffc6:	1aed      	subs	r5, r5, r3
 800ffc8:	f7ff fc56 	bl	800f878 <ucdr_init_buffer>
 800ffcc:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ffd0:	a80c      	add	r0, sp, #48	; 0x30
 800ffd2:	f7ff fc27 	bl	800f824 <ucdr_set_on_full_buffer_callback>
 800ffd6:	4435      	add	r5, r6
 800ffd8:	2308      	movs	r3, #8
 800ffda:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800ffde:	f88d 3016 	strb.w	r3, [sp, #22]
 800ffe2:	b2ad      	uxth	r5, r5
 800ffe4:	ab0c      	add	r3, sp, #48	; 0x30
 800ffe6:	9300      	str	r3, [sp, #0]
 800ffe8:	9002      	str	r0, [sp, #8]
 800ffea:	9501      	str	r5, [sp, #4]
 800ffec:	ab06      	add	r3, sp, #24
 800ffee:	9905      	ldr	r1, [sp, #20]
 800fff0:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 800fff4:	464a      	mov	r2, r9
 800fff6:	4638      	mov	r0, r7
 800fff8:	47a8      	blx	r5
 800fffa:	2301      	movs	r3, #1
 800fffc:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8010000:	e79f      	b.n	800ff42 <read_submessage_format+0xbe>
 8010002:	bf00      	nop

08010004 <on_get_fragmentation_info>:
 8010004:	b500      	push	{lr}
 8010006:	b08b      	sub	sp, #44	; 0x2c
 8010008:	4601      	mov	r1, r0
 801000a:	2204      	movs	r2, #4
 801000c:	a802      	add	r0, sp, #8
 801000e:	f7ff fc33 	bl	800f878 <ucdr_init_buffer>
 8010012:	f10d 0305 	add.w	r3, sp, #5
 8010016:	a802      	add	r0, sp, #8
 8010018:	f10d 0206 	add.w	r2, sp, #6
 801001c:	a901      	add	r1, sp, #4
 801001e:	f001 f9eb 	bl	80113f8 <uxr_read_submessage_header>
 8010022:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010026:	2b0d      	cmp	r3, #13
 8010028:	d003      	beq.n	8010032 <on_get_fragmentation_info+0x2e>
 801002a:	2000      	movs	r0, #0
 801002c:	b00b      	add	sp, #44	; 0x2c
 801002e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010032:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010036:	f013 0f02 	tst.w	r3, #2
 801003a:	bf14      	ite	ne
 801003c:	2002      	movne	r0, #2
 801003e:	2001      	moveq	r0, #1
 8010040:	b00b      	add	sp, #44	; 0x2c
 8010042:	f85d fb04 	ldr.w	pc, [sp], #4
 8010046:	bf00      	nop

08010048 <read_submessage_get_info>:
 8010048:	b570      	push	{r4, r5, r6, lr}
 801004a:	2500      	movs	r5, #0
 801004c:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8010050:	4604      	mov	r4, r0
 8010052:	f44f 7224 	mov.w	r2, #656	; 0x290
 8010056:	460e      	mov	r6, r1
 8010058:	a810      	add	r0, sp, #64	; 0x40
 801005a:	4629      	mov	r1, r5
 801005c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8010060:	f008 fa02 	bl	8018468 <memset>
 8010064:	a903      	add	r1, sp, #12
 8010066:	4630      	mov	r0, r6
 8010068:	f002 fa6e 	bl	8012548 <uxr_deserialize_GET_INFO_Payload>
 801006c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010070:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010074:	4620      	mov	r0, r4
 8010076:	f001 f833 	bl	80110e0 <uxr_session_header_offset>
 801007a:	462b      	mov	r3, r5
 801007c:	9000      	str	r0, [sp, #0]
 801007e:	a905      	add	r1, sp, #20
 8010080:	a808      	add	r0, sp, #32
 8010082:	220c      	movs	r2, #12
 8010084:	f7ff fbe6 	bl	800f854 <ucdr_init_buffer_origin_offset>
 8010088:	a910      	add	r1, sp, #64	; 0x40
 801008a:	a808      	add	r0, sp, #32
 801008c:	f002 face 	bl	801262c <uxr_serialize_INFO_Payload>
 8010090:	9b08      	ldr	r3, [sp, #32]
 8010092:	462a      	mov	r2, r5
 8010094:	4629      	mov	r1, r5
 8010096:	4620      	mov	r0, r4
 8010098:	f000 ffca 	bl	8011030 <uxr_stamp_session_header>
 801009c:	a808      	add	r0, sp, #32
 801009e:	f7ff fc17 	bl	800f8d0 <ucdr_buffer_length>
 80100a2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80100a4:	4602      	mov	r2, r0
 80100a6:	a905      	add	r1, sp, #20
 80100a8:	e9d3 0400 	ldrd	r0, r4, [r3]
 80100ac:	47a0      	blx	r4
 80100ae:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 80100b2:	bd70      	pop	{r4, r5, r6, pc}

080100b4 <write_submessage_acknack.isra.0>:
 80100b4:	b570      	push	{r4, r5, r6, lr}
 80100b6:	b092      	sub	sp, #72	; 0x48
 80100b8:	4605      	mov	r5, r0
 80100ba:	460e      	mov	r6, r1
 80100bc:	4614      	mov	r4, r2
 80100be:	f001 f80f 	bl	80110e0 <uxr_session_header_offset>
 80100c2:	a905      	add	r1, sp, #20
 80100c4:	9000      	str	r0, [sp, #0]
 80100c6:	2300      	movs	r3, #0
 80100c8:	a80a      	add	r0, sp, #40	; 0x28
 80100ca:	2211      	movs	r2, #17
 80100cc:	f7ff fbc2 	bl	800f854 <ucdr_init_buffer_origin_offset>
 80100d0:	2218      	movs	r2, #24
 80100d2:	fb02 5404 	mla	r4, r2, r4, r5
 80100d6:	2300      	movs	r3, #0
 80100d8:	2205      	movs	r2, #5
 80100da:	3450      	adds	r4, #80	; 0x50
 80100dc:	a80a      	add	r0, sp, #40	; 0x28
 80100de:	210a      	movs	r1, #10
 80100e0:	f001 f970 	bl	80113c4 <uxr_buffer_submessage_header>
 80100e4:	a903      	add	r1, sp, #12
 80100e6:	4620      	mov	r0, r4
 80100e8:	f006 fa84 	bl	80165f4 <uxr_compute_acknack>
 80100ec:	a903      	add	r1, sp, #12
 80100ee:	ba43      	rev16	r3, r0
 80100f0:	a80a      	add	r0, sp, #40	; 0x28
 80100f2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80100f6:	f88d 6010 	strb.w	r6, [sp, #16]
 80100fa:	f002 fb07 	bl	801270c <uxr_serialize_ACKNACK_Payload>
 80100fe:	2200      	movs	r2, #0
 8010100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010102:	4611      	mov	r1, r2
 8010104:	4628      	mov	r0, r5
 8010106:	f000 ff93 	bl	8011030 <uxr_stamp_session_header>
 801010a:	a80a      	add	r0, sp, #40	; 0x28
 801010c:	f7ff fbe0 	bl	800f8d0 <ucdr_buffer_length>
 8010110:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8010112:	4602      	mov	r2, r0
 8010114:	a905      	add	r1, sp, #20
 8010116:	e9d3 0400 	ldrd	r0, r4, [r3]
 801011a:	47a0      	blx	r4
 801011c:	b012      	add	sp, #72	; 0x48
 801011e:	bd70      	pop	{r4, r5, r6, pc}

08010120 <uxr_init_session>:
 8010120:	b5d0      	push	{r4, r6, r7, lr}
 8010122:	2300      	movs	r3, #0
 8010124:	2600      	movs	r6, #0
 8010126:	2700      	movs	r7, #0
 8010128:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 801012c:	4604      	mov	r4, r0
 801012e:	6701      	str	r1, [r0, #112]	; 0x70
 8010130:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 8010134:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 8010138:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 801013c:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 8010140:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 8010144:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8010148:	2181      	movs	r1, #129	; 0x81
 801014a:	f000 fedb 	bl	8010f04 <uxr_init_session_info>
 801014e:	f104 0008 	add.w	r0, r4, #8
 8010152:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 8010156:	f001 b851 	b.w	80111fc <uxr_init_stream_storage>
 801015a:	bf00      	nop

0801015c <uxr_set_status_callback>:
 801015c:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8010160:	4770      	bx	lr
 8010162:	bf00      	nop

08010164 <uxr_set_topic_callback>:
 8010164:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8010168:	4770      	bx	lr
 801016a:	bf00      	nop

0801016c <uxr_set_request_callback>:
 801016c:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8010170:	4770      	bx	lr
 8010172:	bf00      	nop

08010174 <uxr_set_reply_callback>:
 8010174:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8010178:	4770      	bx	lr
 801017a:	bf00      	nop

0801017c <uxr_create_output_best_effort_stream>:
 801017c:	b510      	push	{r4, lr}
 801017e:	b084      	sub	sp, #16
 8010180:	e9cd 2100 	strd	r2, r1, [sp]
 8010184:	4604      	mov	r4, r0
 8010186:	f000 ffab 	bl	80110e0 <uxr_session_header_offset>
 801018a:	e9dd 2100 	ldrd	r2, r1, [sp]
 801018e:	4603      	mov	r3, r0
 8010190:	f104 0008 	add.w	r0, r4, #8
 8010194:	b004      	add	sp, #16
 8010196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801019a:	f001 b879 	b.w	8011290 <uxr_add_output_best_effort_buffer>
 801019e:	bf00      	nop

080101a0 <uxr_create_output_reliable_stream>:
 80101a0:	b530      	push	{r4, r5, lr}
 80101a2:	b089      	sub	sp, #36	; 0x24
 80101a4:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80101a8:	9303      	str	r3, [sp, #12]
 80101aa:	4604      	mov	r4, r0
 80101ac:	f000 ff98 	bl	80110e0 <uxr_session_header_offset>
 80101b0:	4605      	mov	r5, r0
 80101b2:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80101b6:	9905      	ldr	r1, [sp, #20]
 80101b8:	9500      	str	r5, [sp, #0]
 80101ba:	f104 0008 	add.w	r0, r4, #8
 80101be:	f001 f879 	bl	80112b4 <uxr_add_output_reliable_buffer>
 80101c2:	2200      	movs	r2, #0
 80101c4:	b2c3      	uxtb	r3, r0
 80101c6:	f363 0207 	bfi	r2, r3, #0, #8
 80101ca:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80101ce:	f363 220f 	bfi	r2, r3, #8, #8
 80101d2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80101d6:	f363 4217 	bfi	r2, r3, #16, #8
 80101da:	0e03      	lsrs	r3, r0, #24
 80101dc:	f363 621f 	bfi	r2, r3, #24, #8
 80101e0:	4610      	mov	r0, r2
 80101e2:	b009      	add	sp, #36	; 0x24
 80101e4:	bd30      	pop	{r4, r5, pc}
 80101e6:	bf00      	nop

080101e8 <uxr_create_input_best_effort_stream>:
 80101e8:	b082      	sub	sp, #8
 80101ea:	3008      	adds	r0, #8
 80101ec:	b002      	add	sp, #8
 80101ee:	f001 b87b 	b.w	80112e8 <uxr_add_input_best_effort_buffer>
 80101f2:	bf00      	nop

080101f4 <uxr_create_input_reliable_stream>:
 80101f4:	b510      	push	{r4, lr}
 80101f6:	b084      	sub	sp, #16
 80101f8:	4c0b      	ldr	r4, [pc, #44]	; (8010228 <uxr_create_input_reliable_stream+0x34>)
 80101fa:	9400      	str	r4, [sp, #0]
 80101fc:	3008      	adds	r0, #8
 80101fe:	f001 f889 	bl	8011314 <uxr_add_input_reliable_buffer>
 8010202:	2200      	movs	r2, #0
 8010204:	b2c3      	uxtb	r3, r0
 8010206:	f363 0207 	bfi	r2, r3, #0, #8
 801020a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801020e:	f363 220f 	bfi	r2, r3, #8, #8
 8010212:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010216:	f363 4217 	bfi	r2, r3, #16, #8
 801021a:	0e03      	lsrs	r3, r0, #24
 801021c:	f363 621f 	bfi	r2, r3, #24, #8
 8010220:	4610      	mov	r0, r2
 8010222:	b004      	add	sp, #16
 8010224:	bd10      	pop	{r4, pc}
 8010226:	bf00      	nop
 8010228:	08010005 	.word	0x08010005

0801022c <uxr_epoch_nanos>:
 801022c:	b510      	push	{r4, lr}
 801022e:	4604      	mov	r4, r0
 8010230:	f001 f92a 	bl	8011488 <uxr_nanos>
 8010234:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8010238:	1ac0      	subs	r0, r0, r3
 801023a:	eb61 0102 	sbc.w	r1, r1, r2
 801023e:	bd10      	pop	{r4, pc}

08010240 <uxr_flash_output_streams>:
 8010240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010244:	7e03      	ldrb	r3, [r0, #24]
 8010246:	b084      	sub	sp, #16
 8010248:	4604      	mov	r4, r0
 801024a:	b1fb      	cbz	r3, 801028c <uxr_flash_output_streams+0x4c>
 801024c:	f04f 0900 	mov.w	r9, #0
 8010250:	4648      	mov	r0, r9
 8010252:	f10d 0802 	add.w	r8, sp, #2
 8010256:	af03      	add	r7, sp, #12
 8010258:	ae02      	add	r6, sp, #8
 801025a:	2201      	movs	r2, #1
 801025c:	4611      	mov	r1, r2
 801025e:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8010262:	f000 ff75 	bl	8011150 <uxr_stream_id>
 8010266:	3508      	adds	r5, #8
 8010268:	4684      	mov	ip, r0
 801026a:	4643      	mov	r3, r8
 801026c:	4628      	mov	r0, r5
 801026e:	463a      	mov	r2, r7
 8010270:	4631      	mov	r1, r6
 8010272:	f8cd c004 	str.w	ip, [sp, #4]
 8010276:	f006 fa45 	bl	8016704 <uxr_prepare_best_effort_buffer_to_send>
 801027a:	2800      	cmp	r0, #0
 801027c:	d13d      	bne.n	80102fa <uxr_flash_output_streams+0xba>
 801027e:	7e23      	ldrb	r3, [r4, #24]
 8010280:	f109 0901 	add.w	r9, r9, #1
 8010284:	fa5f f089 	uxtb.w	r0, r9
 8010288:	4283      	cmp	r3, r0
 801028a:	d8e6      	bhi.n	801025a <uxr_flash_output_streams+0x1a>
 801028c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8010290:	b383      	cbz	r3, 80102f4 <uxr_flash_output_streams+0xb4>
 8010292:	f04f 0900 	mov.w	r9, #0
 8010296:	4648      	mov	r0, r9
 8010298:	f10d 0802 	add.w	r8, sp, #2
 801029c:	af03      	add	r7, sp, #12
 801029e:	ae02      	add	r6, sp, #8
 80102a0:	2201      	movs	r2, #1
 80102a2:	2102      	movs	r1, #2
 80102a4:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80102a8:	f000 ff52 	bl	8011150 <uxr_stream_id>
 80102ac:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80102b0:	3520      	adds	r5, #32
 80102b2:	9001      	str	r0, [sp, #4]
 80102b4:	e00c      	b.n	80102d0 <uxr_flash_output_streams+0x90>
 80102b6:	9b02      	ldr	r3, [sp, #8]
 80102b8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80102bc:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80102c0:	f000 feb6 	bl	8011030 <uxr_stamp_session_header>
 80102c4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80102c6:	9a03      	ldr	r2, [sp, #12]
 80102c8:	9902      	ldr	r1, [sp, #8]
 80102ca:	e9d3 0a00 	ldrd	r0, sl, [r3]
 80102ce:	47d0      	blx	sl
 80102d0:	4643      	mov	r3, r8
 80102d2:	463a      	mov	r2, r7
 80102d4:	4631      	mov	r1, r6
 80102d6:	4628      	mov	r0, r5
 80102d8:	f006 fc1c 	bl	8016b14 <uxr_prepare_next_reliable_buffer_to_send>
 80102dc:	4603      	mov	r3, r0
 80102de:	4620      	mov	r0, r4
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d1e8      	bne.n	80102b6 <uxr_flash_output_streams+0x76>
 80102e4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80102e8:	f109 0901 	add.w	r9, r9, #1
 80102ec:	fa5f f089 	uxtb.w	r0, r9
 80102f0:	4283      	cmp	r3, r0
 80102f2:	d8d5      	bhi.n	80102a0 <uxr_flash_output_streams+0x60>
 80102f4:	b004      	add	sp, #16
 80102f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102fa:	9b02      	ldr	r3, [sp, #8]
 80102fc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010300:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010304:	4620      	mov	r0, r4
 8010306:	f000 fe93 	bl	8011030 <uxr_stamp_session_header>
 801030a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801030c:	9a03      	ldr	r2, [sp, #12]
 801030e:	9902      	ldr	r1, [sp, #8]
 8010310:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010314:	47a8      	blx	r5
 8010316:	f109 0901 	add.w	r9, r9, #1
 801031a:	7e23      	ldrb	r3, [r4, #24]
 801031c:	fa5f f089 	uxtb.w	r0, r9
 8010320:	4283      	cmp	r3, r0
 8010322:	d89a      	bhi.n	801025a <uxr_flash_output_streams+0x1a>
 8010324:	e7b2      	b.n	801028c <uxr_flash_output_streams+0x4c>
 8010326:	bf00      	nop

08010328 <read_submessage_info>:
 8010328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801032c:	460d      	mov	r5, r1
 801032e:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8010332:	4669      	mov	r1, sp
 8010334:	4607      	mov	r7, r0
 8010336:	4628      	mov	r0, r5
 8010338:	f002 f80c 	bl	8012354 <uxr_deserialize_BaseObjectReply>
 801033c:	a902      	add	r1, sp, #8
 801033e:	4604      	mov	r4, r0
 8010340:	4628      	mov	r0, r5
 8010342:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8010346:	f7fe fad3 	bl	800e8f0 <ucdr_deserialize_bool>
 801034a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801034e:	4004      	ands	r4, r0
 8010350:	b2e4      	uxtb	r4, r4
 8010352:	b95b      	cbnz	r3, 801036c <read_submessage_info+0x44>
 8010354:	a987      	add	r1, sp, #540	; 0x21c
 8010356:	4628      	mov	r0, r5
 8010358:	f7fe faca 	bl	800e8f0 <ucdr_deserialize_bool>
 801035c:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 8010360:	4606      	mov	r6, r0
 8010362:	b94b      	cbnz	r3, 8010378 <read_submessage_info+0x50>
 8010364:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8010368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801036c:	a903      	add	r1, sp, #12
 801036e:	4628      	mov	r0, r5
 8010370:	f001 fe7e 	bl	8012070 <uxr_deserialize_ObjectVariant>
 8010374:	4004      	ands	r4, r0
 8010376:	e7ed      	b.n	8010354 <read_submessage_info+0x2c>
 8010378:	a988      	add	r1, sp, #544	; 0x220
 801037a:	4628      	mov	r0, r5
 801037c:	f7fe fae8 	bl	800e950 <ucdr_deserialize_uint8_t>
 8010380:	4234      	tst	r4, r6
 8010382:	d0ef      	beq.n	8010364 <read_submessage_info+0x3c>
 8010384:	2800      	cmp	r0, #0
 8010386:	d0ed      	beq.n	8010364 <read_submessage_info+0x3c>
 8010388:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 801038c:	2b0d      	cmp	r3, #13
 801038e:	d1e9      	bne.n	8010364 <read_submessage_info+0x3c>
 8010390:	4628      	mov	r0, r5
 8010392:	a98a      	add	r1, sp, #552	; 0x228
 8010394:	f7ff f882 	bl	800f49c <ucdr_deserialize_int16_t>
 8010398:	b140      	cbz	r0, 80103ac <read_submessage_info+0x84>
 801039a:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 801039e:	2b00      	cmp	r3, #0
 80103a0:	dd07      	ble.n	80103b2 <read_submessage_info+0x8a>
 80103a2:	f1b8 0f00 	cmp.w	r8, #0
 80103a6:	bf14      	ite	ne
 80103a8:	2001      	movne	r0, #1
 80103aa:	2002      	moveq	r0, #2
 80103ac:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 80103b0:	e7d8      	b.n	8010364 <read_submessage_info+0x3c>
 80103b2:	2000      	movs	r0, #0
 80103b4:	e7fa      	b.n	80103ac <read_submessage_info+0x84>
 80103b6:	bf00      	nop

080103b8 <read_submessage_list>:
 80103b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103bc:	b098      	sub	sp, #96	; 0x60
 80103be:	f8df 9304 	ldr.w	r9, [pc, #772]	; 80106c4 <read_submessage_list+0x30c>
 80103c2:	920b      	str	r2, [sp, #44]	; 0x2c
 80103c4:	4604      	mov	r4, r0
 80103c6:	4688      	mov	r8, r1
 80103c8:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 80103cc:	aa0e      	add	r2, sp, #56	; 0x38
 80103ce:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 80103d2:	4640      	mov	r0, r8
 80103d4:	f001 f810 	bl	80113f8 <uxr_read_submessage_header>
 80103d8:	2800      	cmp	r0, #0
 80103da:	f000 813d 	beq.w	8010658 <read_submessage_list+0x2a0>
 80103de:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 80103e2:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 80103e6:	3b02      	subs	r3, #2
 80103e8:	2b0d      	cmp	r3, #13
 80103ea:	d8ed      	bhi.n	80103c8 <read_submessage_list+0x10>
 80103ec:	a101      	add	r1, pc, #4	; (adr r1, 80103f4 <read_submessage_list+0x3c>)
 80103ee:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80103f2:	bf00      	nop
 80103f4:	0801064f 	.word	0x0801064f
 80103f8:	080103c9 	.word	0x080103c9
 80103fc:	0801063f 	.word	0x0801063f
 8010400:	080105e3 	.word	0x080105e3
 8010404:	080105d9 	.word	0x080105d9
 8010408:	080103c9 	.word	0x080103c9
 801040c:	080103c9 	.word	0x080103c9
 8010410:	0801053b 	.word	0x0801053b
 8010414:	080104cd 	.word	0x080104cd
 8010418:	0801048b 	.word	0x0801048b
 801041c:	080103c9 	.word	0x080103c9
 8010420:	080103c9 	.word	0x080103c9
 8010424:	080103c9 	.word	0x080103c9
 8010428:	0801042d 	.word	0x0801042d
 801042c:	a912      	add	r1, sp, #72	; 0x48
 801042e:	4640      	mov	r0, r8
 8010430:	f002 f9bc 	bl	80127ac <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8010434:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8010438:	2d00      	cmp	r5, #0
 801043a:	f000 8115 	beq.w	8010668 <read_submessage_list+0x2b0>
 801043e:	f001 f823 	bl	8011488 <uxr_nanos>
 8010442:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010444:	460b      	mov	r3, r1
 8010446:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010448:	2700      	movs	r7, #0
 801044a:	fbc9 6701 	smlal	r6, r7, r9, r1
 801044e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010452:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8010454:	4602      	mov	r2, r0
 8010456:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010458:	460e      	mov	r6, r1
 801045a:	2700      	movs	r7, #0
 801045c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8010460:	9106      	str	r1, [sp, #24]
 8010462:	fbc9 6700 	smlal	r6, r7, r9, r0
 8010466:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010468:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801046c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801046e:	2700      	movs	r7, #0
 8010470:	4608      	mov	r0, r1
 8010472:	4639      	mov	r1, r7
 8010474:	fbc9 0106 	smlal	r0, r1, r9, r6
 8010478:	e9cd 0100 	strd	r0, r1, [sp]
 801047c:	4620      	mov	r0, r4
 801047e:	47a8      	blx	r5
 8010480:	f04f 0301 	mov.w	r3, #1
 8010484:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8010488:	e79e      	b.n	80103c8 <read_submessage_list+0x10>
 801048a:	a912      	add	r1, sp, #72	; 0x48
 801048c:	4640      	mov	r0, r8
 801048e:	f002 f97b 	bl	8012788 <uxr_deserialize_HEARTBEAT_Payload>
 8010492:	2100      	movs	r1, #0
 8010494:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8010498:	f000 fe84 	bl	80111a4 <uxr_stream_id_from_raw>
 801049c:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80104a0:	4603      	mov	r3, r0
 80104a2:	4629      	mov	r1, r5
 80104a4:	f104 0008 	add.w	r0, r4, #8
 80104a8:	9311      	str	r3, [sp, #68]	; 0x44
 80104aa:	f000 ff69 	bl	8011380 <uxr_get_input_reliable_stream>
 80104ae:	2800      	cmp	r0, #0
 80104b0:	d08a      	beq.n	80103c8 <read_submessage_list+0x10>
 80104b2:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 80104b6:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 80104ba:	f006 f88f 	bl	80165dc <uxr_process_heartbeat>
 80104be:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 80104c2:	462a      	mov	r2, r5
 80104c4:	4620      	mov	r0, r4
 80104c6:	f7ff fdf5 	bl	80100b4 <write_submessage_acknack.isra.0>
 80104ca:	e77d      	b.n	80103c8 <read_submessage_list+0x10>
 80104cc:	a912      	add	r1, sp, #72	; 0x48
 80104ce:	4640      	mov	r0, r8
 80104d0:	f002 f932 	bl	8012738 <uxr_deserialize_ACKNACK_Payload>
 80104d4:	2100      	movs	r1, #0
 80104d6:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80104da:	f000 fe63 	bl	80111a4 <uxr_stream_id_from_raw>
 80104de:	4603      	mov	r3, r0
 80104e0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80104e4:	f104 0008 	add.w	r0, r4, #8
 80104e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80104ea:	f000 ff33 	bl	8011354 <uxr_get_output_reliable_stream>
 80104ee:	4605      	mov	r5, r0
 80104f0:	2800      	cmp	r0, #0
 80104f2:	f43f af69 	beq.w	80103c8 <read_submessage_list+0x10>
 80104f6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 80104fa:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 80104fe:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8010502:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8010506:	b289      	uxth	r1, r1
 8010508:	f006 fbac 	bl	8016c64 <uxr_process_acknack>
 801050c:	4628      	mov	r0, r5
 801050e:	f006 fb6f 	bl	8016bf0 <uxr_begin_output_nack_buffer_it>
 8010512:	af10      	add	r7, sp, #64	; 0x40
 8010514:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 8010518:	e005      	b.n	8010526 <read_submessage_list+0x16e>
 801051a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801051c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801051e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010520:	e9d3 0600 	ldrd	r0, r6, [r3]
 8010524:	47b0      	blx	r6
 8010526:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 801052a:	aa11      	add	r2, sp, #68	; 0x44
 801052c:	4639      	mov	r1, r7
 801052e:	4628      	mov	r0, r5
 8010530:	f006 fb60 	bl	8016bf4 <uxr_next_reliable_nack_buffer_to_send>
 8010534:	2800      	cmp	r0, #0
 8010536:	d1f0      	bne.n	801051a <read_submessage_list+0x162>
 8010538:	e746      	b.n	80103c8 <read_submessage_list+0x10>
 801053a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801053e:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 8010542:	af10      	add	r7, sp, #64	; 0x40
 8010544:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8010548:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 801054c:	4639      	mov	r1, r7
 801054e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8010552:	f89d 6037 	ldrb.w	r6, [sp, #55]	; 0x37
 8010556:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801055a:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
 801055e:	4640      	mov	r0, r8
 8010560:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8010564:	f001 fe32 	bl	80121cc <uxr_deserialize_BaseObjectRequest>
 8010568:	4638      	mov	r0, r7
 801056a:	a911      	add	r1, sp, #68	; 0x44
 801056c:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 8010570:	f000 fddc 	bl	801112c <uxr_parse_base_object_request>
 8010574:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8010578:	9911      	ldr	r1, [sp, #68]	; 0x44
 801057a:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
 801057e:	9112      	str	r1, [sp, #72]	; 0x48
 8010580:	3d04      	subs	r5, #4
 8010582:	f006 060e 	and.w	r6, r6, #14
 8010586:	b2ad      	uxth	r5, r5
 8010588:	f1ba 0f00 	cmp.w	sl, #0
 801058c:	d006      	beq.n	801059c <read_submessage_list+0x1e4>
 801058e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8010592:	9300      	str	r3, [sp, #0]
 8010594:	463a      	mov	r2, r7
 8010596:	2300      	movs	r3, #0
 8010598:	4620      	mov	r0, r4
 801059a:	47d0      	blx	sl
 801059c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 801059e:	b168      	cbz	r0, 80105bc <read_submessage_list+0x204>
 80105a0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80105a2:	2300      	movs	r3, #0
 80105a4:	3902      	subs	r1, #2
 80105a6:	e002      	b.n	80105ae <read_submessage_list+0x1f6>
 80105a8:	3301      	adds	r3, #1
 80105aa:	4283      	cmp	r3, r0
 80105ac:	d006      	beq.n	80105bc <read_submessage_list+0x204>
 80105ae:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 80105b2:	42ba      	cmp	r2, r7
 80105b4:	d1f8      	bne.n	80105a8 <read_submessage_list+0x1f0>
 80105b6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80105b8:	2100      	movs	r1, #0
 80105ba:	54d1      	strb	r1, [r2, r3]
 80105bc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80105be:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80105c0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80105c4:	9302      	str	r3, [sp, #8]
 80105c6:	e9cd 1000 	strd	r1, r0, [sp]
 80105ca:	4633      	mov	r3, r6
 80105cc:	462a      	mov	r2, r5
 80105ce:	4641      	mov	r1, r8
 80105d0:	4620      	mov	r0, r4
 80105d2:	f7ff fc57 	bl	800fe84 <read_submessage_format>
 80105d6:	e6f7      	b.n	80103c8 <read_submessage_list+0x10>
 80105d8:	4641      	mov	r1, r8
 80105da:	4620      	mov	r0, r4
 80105dc:	f7ff fea4 	bl	8010328 <read_submessage_info>
 80105e0:	e6f2      	b.n	80103c8 <read_submessage_list+0x10>
 80105e2:	2a00      	cmp	r2, #0
 80105e4:	d03b      	beq.n	801065e <read_submessage_list+0x2a6>
 80105e6:	a912      	add	r1, sp, #72	; 0x48
 80105e8:	4640      	mov	r0, r8
 80105ea:	f002 f801 	bl	80125f0 <uxr_deserialize_STATUS_Payload>
 80105ee:	a910      	add	r1, sp, #64	; 0x40
 80105f0:	aa0f      	add	r2, sp, #60	; 0x3c
 80105f2:	a812      	add	r0, sp, #72	; 0x48
 80105f4:	f000 fd9a 	bl	801112c <uxr_parse_base_object_request>
 80105f8:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80105fc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80105fe:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8010602:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8010606:	9111      	str	r1, [sp, #68]	; 0x44
 8010608:	b135      	cbz	r5, 8010618 <read_submessage_list+0x260>
 801060a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 801060e:	9300      	str	r3, [sp, #0]
 8010610:	4632      	mov	r2, r6
 8010612:	463b      	mov	r3, r7
 8010614:	4620      	mov	r0, r4
 8010616:	47a8      	blx	r5
 8010618:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 801061a:	2b00      	cmp	r3, #0
 801061c:	f43f aed4 	beq.w	80103c8 <read_submessage_list+0x10>
 8010620:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8010622:	2100      	movs	r1, #0
 8010624:	3802      	subs	r0, #2
 8010626:	e003      	b.n	8010630 <read_submessage_list+0x278>
 8010628:	3101      	adds	r1, #1
 801062a:	4299      	cmp	r1, r3
 801062c:	f43f aecc 	beq.w	80103c8 <read_submessage_list+0x10>
 8010630:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 8010634:	42b2      	cmp	r2, r6
 8010636:	d1f7      	bne.n	8010628 <read_submessage_list+0x270>
 8010638:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801063a:	545f      	strb	r7, [r3, r1]
 801063c:	e6c4      	b.n	80103c8 <read_submessage_list+0x10>
 801063e:	2a00      	cmp	r2, #0
 8010640:	f47f aec2 	bne.w	80103c8 <read_submessage_list+0x10>
 8010644:	4641      	mov	r1, r8
 8010646:	4620      	mov	r0, r4
 8010648:	f000 fcb4 	bl	8010fb4 <uxr_read_create_session_status>
 801064c:	e6bc      	b.n	80103c8 <read_submessage_list+0x10>
 801064e:	4641      	mov	r1, r8
 8010650:	4620      	mov	r0, r4
 8010652:	f7ff fcf9 	bl	8010048 <read_submessage_get_info>
 8010656:	e6b7      	b.n	80103c8 <read_submessage_list+0x10>
 8010658:	b018      	add	sp, #96	; 0x60
 801065a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801065e:	4641      	mov	r1, r8
 8010660:	4620      	mov	r0, r4
 8010662:	f000 fcb3 	bl	8010fcc <uxr_read_delete_session_status>
 8010666:	e6af      	b.n	80103c8 <read_submessage_list+0x10>
 8010668:	f000 ff0e 	bl	8011488 <uxr_nanos>
 801066c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801066e:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010670:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010672:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8010674:	2700      	movs	r7, #0
 8010676:	fbc9 6703 	smlal	r6, r7, r9, r3
 801067a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801067c:	eb16 0c00 	adds.w	ip, r6, r0
 8010680:	4618      	mov	r0, r3
 8010682:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010684:	eb47 0e01 	adc.w	lr, r7, r1
 8010688:	461e      	mov	r6, r3
 801068a:	2100      	movs	r1, #0
 801068c:	2700      	movs	r7, #0
 801068e:	fbc9 0105 	smlal	r0, r1, r9, r5
 8010692:	fbc9 6702 	smlal	r6, r7, r9, r2
 8010696:	1983      	adds	r3, r0, r6
 8010698:	eb41 0207 	adc.w	r2, r1, r7
 801069c:	ebbc 0303 	subs.w	r3, ip, r3
 80106a0:	9308      	str	r3, [sp, #32]
 80106a2:	eb6e 0302 	sbc.w	r3, lr, r2
 80106a6:	9309      	str	r3, [sp, #36]	; 0x24
 80106a8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80106ac:	0fd3      	lsrs	r3, r2, #31
 80106ae:	18c9      	adds	r1, r1, r3
 80106b0:	f142 0200 	adc.w	r2, r2, #0
 80106b4:	084b      	lsrs	r3, r1, #1
 80106b6:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 80106ba:	1052      	asrs	r2, r2, #1
 80106bc:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 80106c0:	e6de      	b.n	8010480 <read_submessage_list+0xc8>
 80106c2:	bf00      	nop
 80106c4:	3b9aca00 	.word	0x3b9aca00

080106c8 <listen_message_reliably>:
 80106c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106cc:	1e0b      	subs	r3, r1, #0
 80106ce:	b09d      	sub	sp, #116	; 0x74
 80106d0:	bfb8      	it	lt
 80106d2:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 80106d6:	9305      	str	r3, [sp, #20]
 80106d8:	4607      	mov	r7, r0
 80106da:	f000 feb9 	bl	8011450 <uxr_millis>
 80106de:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 80106e2:	4681      	mov	r9, r0
 80106e4:	2a00      	cmp	r2, #0
 80106e6:	f000 8095 	beq.w	8010814 <listen_message_reliably+0x14c>
 80106ea:	2600      	movs	r6, #0
 80106ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80106f0:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80106f4:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80106f8:	4630      	mov	r0, r6
 80106fa:	4688      	mov	r8, r1
 80106fc:	46ca      	mov	sl, r9
 80106fe:	e00f      	b.n	8010720 <listen_message_reliably+0x58>
 8010700:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010704:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010708:	42a2      	cmp	r2, r4
 801070a:	eb73 0105 	sbcs.w	r1, r3, r5
 801070e:	bfb8      	it	lt
 8010710:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
 8010714:	3601      	adds	r6, #1
 8010716:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801071a:	b2f0      	uxtb	r0, r6
 801071c:	4283      	cmp	r3, r0
 801071e:	d951      	bls.n	80107c4 <listen_message_reliably+0xfc>
 8010720:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8010724:	2201      	movs	r2, #1
 8010726:	2102      	movs	r1, #2
 8010728:	f000 fd12 	bl	8011150 <uxr_stream_id>
 801072c:	00e4      	lsls	r4, r4, #3
 801072e:	f104 0520 	add.w	r5, r4, #32
 8010732:	443d      	add	r5, r7
 8010734:	4601      	mov	r1, r0
 8010736:	4643      	mov	r3, r8
 8010738:	4652      	mov	r2, sl
 801073a:	4628      	mov	r0, r5
 801073c:	9109      	str	r1, [sp, #36]	; 0x24
 801073e:	f006 fa2b 	bl	8016b98 <uxr_update_output_stream_heartbeat_timestamp>
 8010742:	193b      	adds	r3, r7, r4
 8010744:	2800      	cmp	r0, #0
 8010746:	d0db      	beq.n	8010700 <listen_message_reliably+0x38>
 8010748:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 801074c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8010750:	4638      	mov	r0, r7
 8010752:	f000 fcc5 	bl	80110e0 <uxr_session_header_offset>
 8010756:	3501      	adds	r5, #1
 8010758:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 801075c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8010760:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8010764:	9000      	str	r0, [sp, #0]
 8010766:	2300      	movs	r3, #0
 8010768:	4658      	mov	r0, fp
 801076a:	2211      	movs	r2, #17
 801076c:	a90c      	add	r1, sp, #48	; 0x30
 801076e:	f7ff f871 	bl	800f854 <ucdr_init_buffer_origin_offset>
 8010772:	2300      	movs	r3, #0
 8010774:	2205      	movs	r2, #5
 8010776:	210b      	movs	r1, #11
 8010778:	4658      	mov	r0, fp
 801077a:	f000 fe23 	bl	80113c4 <uxr_buffer_submessage_header>
 801077e:	8968      	ldrh	r0, [r5, #10]
 8010780:	2101      	movs	r1, #1
 8010782:	f006 fac7 	bl	8016d14 <uxr_seq_num_add>
 8010786:	892a      	ldrh	r2, [r5, #8]
 8010788:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801078c:	4603      	mov	r3, r0
 801078e:	a90a      	add	r1, sp, #40	; 0x28
 8010790:	4658      	mov	r0, fp
 8010792:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8010796:	f88d 902c 	strb.w	r9, [sp, #44]	; 0x2c
 801079a:	f001 ffe1 	bl	8012760 <uxr_serialize_HEARTBEAT_Payload>
 801079e:	2200      	movs	r2, #0
 80107a0:	4611      	mov	r1, r2
 80107a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80107a4:	4638      	mov	r0, r7
 80107a6:	f000 fc43 	bl	8011030 <uxr_stamp_session_header>
 80107aa:	4658      	mov	r0, fp
 80107ac:	f7ff f890 	bl	800f8d0 <ucdr_buffer_length>
 80107b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80107b2:	4602      	mov	r2, r0
 80107b4:	a90c      	add	r1, sp, #48	; 0x30
 80107b6:	e9d3 0500 	ldrd	r0, r5, [r3]
 80107ba:	443c      	add	r4, r7
 80107bc:	47a8      	blx	r5
 80107be:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80107c2:	e79f      	b.n	8010704 <listen_message_reliably+0x3c>
 80107c4:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 80107c8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80107cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80107d0:	4294      	cmp	r4, r2
 80107d2:	bf08      	it	eq
 80107d4:	428b      	cmpeq	r3, r1
 80107d6:	d01d      	beq.n	8010814 <listen_message_reliably+0x14c>
 80107d8:	eba3 030a 	sub.w	r3, r3, sl
 80107dc:	9905      	ldr	r1, [sp, #20]
 80107de:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	bf08      	it	eq
 80107e4:	2301      	moveq	r3, #1
 80107e6:	4299      	cmp	r1, r3
 80107e8:	bfa8      	it	ge
 80107ea:	4619      	movge	r1, r3
 80107ec:	6894      	ldr	r4, [r2, #8]
 80107ee:	6810      	ldr	r0, [r2, #0]
 80107f0:	4689      	mov	r9, r1
 80107f2:	460b      	mov	r3, r1
 80107f4:	aa08      	add	r2, sp, #32
 80107f6:	a907      	add	r1, sp, #28
 80107f8:	47a0      	blx	r4
 80107fa:	b968      	cbnz	r0, 8010818 <listen_message_reliably+0x150>
 80107fc:	9b05      	ldr	r3, [sp, #20]
 80107fe:	eba3 0309 	sub.w	r3, r3, r9
 8010802:	2b00      	cmp	r3, #0
 8010804:	9305      	str	r3, [sp, #20]
 8010806:	f73f af68 	bgt.w	80106da <listen_message_reliably+0x12>
 801080a:	4604      	mov	r4, r0
 801080c:	4620      	mov	r0, r4
 801080e:	b01d      	add	sp, #116	; 0x74
 8010810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010814:	9b05      	ldr	r3, [sp, #20]
 8010816:	e7e1      	b.n	80107dc <listen_message_reliably+0x114>
 8010818:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801081c:	4604      	mov	r4, r0
 801081e:	a80c      	add	r0, sp, #48	; 0x30
 8010820:	f7ff f82a 	bl	800f878 <ucdr_init_buffer>
 8010824:	2500      	movs	r5, #0
 8010826:	a90c      	add	r1, sp, #48	; 0x30
 8010828:	f10d 031a 	add.w	r3, sp, #26
 801082c:	aa06      	add	r2, sp, #24
 801082e:	4638      	mov	r0, r7
 8010830:	f88d 5018 	strb.w	r5, [sp, #24]
 8010834:	f000 fc12 	bl	801105c <uxr_read_session_header>
 8010838:	b918      	cbnz	r0, 8010842 <listen_message_reliably+0x17a>
 801083a:	4620      	mov	r0, r4
 801083c:	b01d      	add	sp, #116	; 0x74
 801083e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010842:	4629      	mov	r1, r5
 8010844:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010848:	f000 fcac 	bl	80111a4 <uxr_stream_id_from_raw>
 801084c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8010850:	2e01      	cmp	r6, #1
 8010852:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8010856:	900a      	str	r0, [sp, #40]	; 0x28
 8010858:	fa5f fa80 	uxtb.w	sl, r0
 801085c:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8010860:	d04b      	beq.n	80108fa <listen_message_reliably+0x232>
 8010862:	2e02      	cmp	r6, #2
 8010864:	d00f      	beq.n	8010886 <listen_message_reliably+0x1be>
 8010866:	2e00      	cmp	r6, #0
 8010868:	d1e7      	bne.n	801083a <listen_message_reliably+0x172>
 801086a:	4631      	mov	r1, r6
 801086c:	4630      	mov	r0, r6
 801086e:	f000 fc99 	bl	80111a4 <uxr_stream_id_from_raw>
 8010872:	a90c      	add	r1, sp, #48	; 0x30
 8010874:	4602      	mov	r2, r0
 8010876:	4638      	mov	r0, r7
 8010878:	920a      	str	r2, [sp, #40]	; 0x28
 801087a:	f7ff fd9d 	bl	80103b8 <read_submessage_list>
 801087e:	4620      	mov	r0, r4
 8010880:	b01d      	add	sp, #116	; 0x74
 8010882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010886:	4629      	mov	r1, r5
 8010888:	f107 0008 	add.w	r0, r7, #8
 801088c:	f000 fd78 	bl	8011380 <uxr_get_input_reliable_stream>
 8010890:	4680      	mov	r8, r0
 8010892:	b348      	cbz	r0, 80108e8 <listen_message_reliably+0x220>
 8010894:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010896:	9202      	str	r2, [sp, #8]
 8010898:	a80c      	add	r0, sp, #48	; 0x30
 801089a:	f7ff f81d 	bl	800f8d8 <ucdr_buffer_remaining>
 801089e:	4603      	mov	r3, r0
 80108a0:	f10d 0019 	add.w	r0, sp, #25
 80108a4:	9000      	str	r0, [sp, #0]
 80108a6:	9a02      	ldr	r2, [sp, #8]
 80108a8:	4649      	mov	r1, r9
 80108aa:	4640      	mov	r0, r8
 80108ac:	f005 fd98 	bl	80163e0 <uxr_receive_reliable_message>
 80108b0:	b1d0      	cbz	r0, 80108e8 <listen_message_reliably+0x220>
 80108b2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d037      	beq.n	801092a <listen_message_reliably+0x262>
 80108ba:	ae14      	add	r6, sp, #80	; 0x50
 80108bc:	f04f 0902 	mov.w	r9, #2
 80108c0:	e008      	b.n	80108d4 <listen_message_reliably+0x20c>
 80108c2:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 80108c6:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 80108ca:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 80108ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80108d0:	f7ff fd72 	bl	80103b8 <read_submessage_list>
 80108d4:	4631      	mov	r1, r6
 80108d6:	2204      	movs	r2, #4
 80108d8:	4640      	mov	r0, r8
 80108da:	f005 fe01 	bl	80164e0 <uxr_next_input_reliable_buffer_available>
 80108de:	4603      	mov	r3, r0
 80108e0:	4631      	mov	r1, r6
 80108e2:	4638      	mov	r0, r7
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d1ec      	bne.n	80108c2 <listen_message_reliably+0x1fa>
 80108e8:	4638      	mov	r0, r7
 80108ea:	462a      	mov	r2, r5
 80108ec:	4651      	mov	r1, sl
 80108ee:	f7ff fbe1 	bl	80100b4 <write_submessage_acknack.isra.0>
 80108f2:	4620      	mov	r0, r4
 80108f4:	b01d      	add	sp, #116	; 0x74
 80108f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108fa:	4629      	mov	r1, r5
 80108fc:	f107 0008 	add.w	r0, r7, #8
 8010900:	f000 fd34 	bl	801136c <uxr_get_input_best_effort_stream>
 8010904:	2800      	cmp	r0, #0
 8010906:	d098      	beq.n	801083a <listen_message_reliably+0x172>
 8010908:	4649      	mov	r1, r9
 801090a:	f005 fce5 	bl	80162d8 <uxr_receive_best_effort_message>
 801090e:	2800      	cmp	r0, #0
 8010910:	d093      	beq.n	801083a <listen_message_reliably+0x172>
 8010912:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8010916:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 801091a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 801091e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010920:	a90c      	add	r1, sp, #48	; 0x30
 8010922:	4638      	mov	r0, r7
 8010924:	f7ff fd48 	bl	80103b8 <read_submessage_list>
 8010928:	e787      	b.n	801083a <listen_message_reliably+0x172>
 801092a:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 801092e:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8010932:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8010936:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010938:	a90c      	add	r1, sp, #48	; 0x30
 801093a:	4638      	mov	r0, r7
 801093c:	f7ff fd3c 	bl	80103b8 <read_submessage_list>
 8010940:	e7bb      	b.n	80108ba <listen_message_reliably+0x1f2>
 8010942:	bf00      	nop

08010944 <uxr_run_session_timeout>:
 8010944:	b570      	push	{r4, r5, r6, lr}
 8010946:	4604      	mov	r4, r0
 8010948:	460d      	mov	r5, r1
 801094a:	f000 fd81 	bl	8011450 <uxr_millis>
 801094e:	4606      	mov	r6, r0
 8010950:	4620      	mov	r0, r4
 8010952:	f7ff fc75 	bl	8010240 <uxr_flash_output_streams>
 8010956:	4629      	mov	r1, r5
 8010958:	4620      	mov	r0, r4
 801095a:	f7ff feb5 	bl	80106c8 <listen_message_reliably>
 801095e:	f000 fd77 	bl	8011450 <uxr_millis>
 8010962:	1b83      	subs	r3, r0, r6
 8010964:	1ae9      	subs	r1, r5, r3
 8010966:	2900      	cmp	r1, #0
 8010968:	dcf6      	bgt.n	8010958 <uxr_run_session_timeout+0x14>
 801096a:	f104 0008 	add.w	r0, r4, #8
 801096e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010972:	f000 bd11 	b.w	8011398 <uxr_output_streams_confirmed>
 8010976:	bf00      	nop

08010978 <uxr_run_session_until_data>:
 8010978:	b570      	push	{r4, r5, r6, lr}
 801097a:	4604      	mov	r4, r0
 801097c:	460d      	mov	r5, r1
 801097e:	f000 fd67 	bl	8011450 <uxr_millis>
 8010982:	4606      	mov	r6, r0
 8010984:	4620      	mov	r0, r4
 8010986:	f7ff fc5b 	bl	8010240 <uxr_flash_output_streams>
 801098a:	2300      	movs	r3, #0
 801098c:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8010990:	4629      	mov	r1, r5
 8010992:	e005      	b.n	80109a0 <uxr_run_session_until_data+0x28>
 8010994:	f000 fd5c 	bl	8011450 <uxr_millis>
 8010998:	1b83      	subs	r3, r0, r6
 801099a:	1ae9      	subs	r1, r5, r3
 801099c:	2900      	cmp	r1, #0
 801099e:	dd07      	ble.n	80109b0 <uxr_run_session_until_data+0x38>
 80109a0:	4620      	mov	r0, r4
 80109a2:	f7ff fe91 	bl	80106c8 <listen_message_reliably>
 80109a6:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 80109aa:	2800      	cmp	r0, #0
 80109ac:	d0f2      	beq.n	8010994 <uxr_run_session_until_data+0x1c>
 80109ae:	bd70      	pop	{r4, r5, r6, pc}
 80109b0:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 80109b4:	bd70      	pop	{r4, r5, r6, pc}
 80109b6:	bf00      	nop

080109b8 <uxr_run_session_until_confirm_delivery>:
 80109b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109bc:	4606      	mov	r6, r0
 80109be:	460d      	mov	r5, r1
 80109c0:	f000 fd46 	bl	8011450 <uxr_millis>
 80109c4:	4607      	mov	r7, r0
 80109c6:	4630      	mov	r0, r6
 80109c8:	f7ff fc3a 	bl	8010240 <uxr_flash_output_streams>
 80109cc:	2d00      	cmp	r5, #0
 80109ce:	f106 0808 	add.w	r8, r6, #8
 80109d2:	bfa8      	it	ge
 80109d4:	462c      	movge	r4, r5
 80109d6:	da07      	bge.n	80109e8 <uxr_run_session_until_confirm_delivery+0x30>
 80109d8:	e00e      	b.n	80109f8 <uxr_run_session_until_confirm_delivery+0x40>
 80109da:	f7ff fe75 	bl	80106c8 <listen_message_reliably>
 80109de:	f000 fd37 	bl	8011450 <uxr_millis>
 80109e2:	1bc3      	subs	r3, r0, r7
 80109e4:	1aec      	subs	r4, r5, r3
 80109e6:	d407      	bmi.n	80109f8 <uxr_run_session_until_confirm_delivery+0x40>
 80109e8:	4640      	mov	r0, r8
 80109ea:	f000 fcd5 	bl	8011398 <uxr_output_streams_confirmed>
 80109ee:	4603      	mov	r3, r0
 80109f0:	4621      	mov	r1, r4
 80109f2:	4630      	mov	r0, r6
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d0f0      	beq.n	80109da <uxr_run_session_until_confirm_delivery+0x22>
 80109f8:	4640      	mov	r0, r8
 80109fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109fe:	f000 bccb 	b.w	8011398 <uxr_output_streams_confirmed>
 8010a02:	bf00      	nop

08010a04 <uxr_run_session_until_all_status>:
 8010a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a08:	9d08      	ldr	r5, [sp, #32]
 8010a0a:	460f      	mov	r7, r1
 8010a0c:	4692      	mov	sl, r2
 8010a0e:	461c      	mov	r4, r3
 8010a10:	4606      	mov	r6, r0
 8010a12:	f7ff fc15 	bl	8010240 <uxr_flash_output_streams>
 8010a16:	b125      	cbz	r5, 8010a22 <uxr_run_session_until_all_status+0x1e>
 8010a18:	462a      	mov	r2, r5
 8010a1a:	21ff      	movs	r1, #255	; 0xff
 8010a1c:	4620      	mov	r0, r4
 8010a1e:	f007 fd23 	bl	8018468 <memset>
 8010a22:	e9c6 a41d 	strd	sl, r4, [r6, #116]	; 0x74
 8010a26:	67f5      	str	r5, [r6, #124]	; 0x7c
 8010a28:	f000 fd12 	bl	8011450 <uxr_millis>
 8010a2c:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8010a30:	f1aa 0a02 	sub.w	sl, sl, #2
 8010a34:	4680      	mov	r8, r0
 8010a36:	4639      	mov	r1, r7
 8010a38:	4630      	mov	r0, r6
 8010a3a:	f7ff fe45 	bl	80106c8 <listen_message_reliably>
 8010a3e:	f000 fd07 	bl	8011450 <uxr_millis>
 8010a42:	eba0 0008 	sub.w	r0, r0, r8
 8010a46:	1a39      	subs	r1, r7, r0
 8010a48:	b33d      	cbz	r5, 8010a9a <uxr_run_session_until_all_status+0x96>
 8010a4a:	46cc      	mov	ip, r9
 8010a4c:	464a      	mov	r2, r9
 8010a4e:	2301      	movs	r3, #1
 8010a50:	e002      	b.n	8010a58 <uxr_run_session_until_all_status+0x54>
 8010a52:	42ab      	cmp	r3, r5
 8010a54:	d20c      	bcs.n	8010a70 <uxr_run_session_until_all_status+0x6c>
 8010a56:	3301      	adds	r3, #1
 8010a58:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8010a5c:	2cff      	cmp	r4, #255	; 0xff
 8010a5e:	d1f8      	bne.n	8010a52 <uxr_run_session_until_all_status+0x4e>
 8010a60:	42ab      	cmp	r3, r5
 8010a62:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 8010a66:	d213      	bcs.n	8010a90 <uxr_run_session_until_all_status+0x8c>
 8010a68:	2800      	cmp	r0, #0
 8010a6a:	d0f4      	beq.n	8010a56 <uxr_run_session_until_all_status+0x52>
 8010a6c:	2900      	cmp	r1, #0
 8010a6e:	dce3      	bgt.n	8010a38 <uxr_run_session_until_all_status+0x34>
 8010a70:	2300      	movs	r3, #0
 8010a72:	444d      	add	r5, r9
 8010a74:	67f3      	str	r3, [r6, #124]	; 0x7c
 8010a76:	e001      	b.n	8010a7c <uxr_run_session_until_all_status+0x78>
 8010a78:	2b01      	cmp	r3, #1
 8010a7a:	d812      	bhi.n	8010aa2 <uxr_run_session_until_all_status+0x9e>
 8010a7c:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8010a80:	4565      	cmp	r5, ip
 8010a82:	d1f9      	bne.n	8010a78 <uxr_run_session_until_all_status+0x74>
 8010a84:	2b01      	cmp	r3, #1
 8010a86:	bf8c      	ite	hi
 8010a88:	2000      	movhi	r0, #0
 8010a8a:	2001      	movls	r0, #1
 8010a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a90:	2900      	cmp	r1, #0
 8010a92:	dded      	ble.n	8010a70 <uxr_run_session_until_all_status+0x6c>
 8010a94:	2800      	cmp	r0, #0
 8010a96:	d1cf      	bne.n	8010a38 <uxr_run_session_until_all_status+0x34>
 8010a98:	e7ea      	b.n	8010a70 <uxr_run_session_until_all_status+0x6c>
 8010a9a:	67f5      	str	r5, [r6, #124]	; 0x7c
 8010a9c:	2001      	movs	r0, #1
 8010a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010aa2:	2000      	movs	r0, #0
 8010aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010aa8 <uxr_create_session>:
 8010aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aac:	ed2d 8b02 	vpush	{d8}
 8010ab0:	f100 0808 	add.w	r8, r0, #8
 8010ab4:	b0a9      	sub	sp, #164	; 0xa4
 8010ab6:	4604      	mov	r4, r0
 8010ab8:	4640      	mov	r0, r8
 8010aba:	f000 fba9 	bl	8011210 <uxr_reset_stream_storage>
 8010abe:	4620      	mov	r0, r4
 8010ac0:	f000 fb0e 	bl	80110e0 <uxr_session_header_offset>
 8010ac4:	a909      	add	r1, sp, #36	; 0x24
 8010ac6:	9000      	str	r0, [sp, #0]
 8010ac8:	2300      	movs	r3, #0
 8010aca:	a810      	add	r0, sp, #64	; 0x40
 8010acc:	221c      	movs	r2, #28
 8010ace:	f7fe fec1 	bl	800f854 <ucdr_init_buffer_origin_offset>
 8010ad2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010ad4:	8a1a      	ldrh	r2, [r3, #16]
 8010ad6:	3a04      	subs	r2, #4
 8010ad8:	b292      	uxth	r2, r2
 8010ada:	4620      	mov	r0, r4
 8010adc:	a910      	add	r1, sp, #64	; 0x40
 8010ade:	f000 fa23 	bl	8010f28 <uxr_buffer_create_session>
 8010ae2:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010ae4:	4620      	mov	r0, r4
 8010ae6:	f000 fa8f 	bl	8011008 <uxr_stamp_create_session_header>
 8010aea:	a810      	add	r0, sp, #64	; 0x40
 8010aec:	f7fe fef0 	bl	800f8d0 <ucdr_buffer_length>
 8010af0:	23ff      	movs	r3, #255	; 0xff
 8010af2:	ee08 0a10 	vmov	s16, r0
 8010af6:	7163      	strb	r3, [r4, #5]
 8010af8:	f04f 090a 	mov.w	r9, #10
 8010afc:	46c2      	mov	sl, r8
 8010afe:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010b00:	ee18 2a10 	vmov	r2, s16
 8010b04:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010b08:	a909      	add	r1, sp, #36	; 0x24
 8010b0a:	47a8      	blx	r5
 8010b0c:	f000 fca0 	bl	8011450 <uxr_millis>
 8010b10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010b14:	9002      	str	r0, [sp, #8]
 8010b16:	e00c      	b.n	8010b32 <uxr_create_session+0x8a>
 8010b18:	f000 fc9a 	bl	8011450 <uxr_millis>
 8010b1c:	9b02      	ldr	r3, [sp, #8]
 8010b1e:	7962      	ldrb	r2, [r4, #5]
 8010b20:	1ac0      	subs	r0, r0, r3
 8010b22:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	f340 8094 	ble.w	8010c54 <uxr_create_session+0x1ac>
 8010b2c:	2aff      	cmp	r2, #255	; 0xff
 8010b2e:	f040 8097 	bne.w	8010c60 <uxr_create_session+0x1b8>
 8010b32:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8010b34:	a905      	add	r1, sp, #20
 8010b36:	6895      	ldr	r5, [r2, #8]
 8010b38:	6810      	ldr	r0, [r2, #0]
 8010b3a:	aa06      	add	r2, sp, #24
 8010b3c:	47a8      	blx	r5
 8010b3e:	2800      	cmp	r0, #0
 8010b40:	d0ea      	beq.n	8010b18 <uxr_create_session+0x70>
 8010b42:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8010b46:	a818      	add	r0, sp, #96	; 0x60
 8010b48:	f7fe fe96 	bl	800f878 <ucdr_init_buffer>
 8010b4c:	2500      	movs	r5, #0
 8010b4e:	f10d 0312 	add.w	r3, sp, #18
 8010b52:	aa04      	add	r2, sp, #16
 8010b54:	a918      	add	r1, sp, #96	; 0x60
 8010b56:	4620      	mov	r0, r4
 8010b58:	f88d 5010 	strb.w	r5, [sp, #16]
 8010b5c:	f000 fa7e 	bl	801105c <uxr_read_session_header>
 8010b60:	2800      	cmp	r0, #0
 8010b62:	d0d9      	beq.n	8010b18 <uxr_create_session+0x70>
 8010b64:	4629      	mov	r1, r5
 8010b66:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8010b6a:	f000 fb1b 	bl	80111a4 <uxr_stream_id_from_raw>
 8010b6e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010b72:	2f01      	cmp	r7, #1
 8010b74:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8010b78:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8010b7c:	fa5f f880 	uxtb.w	r8, r0
 8010b80:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8010b84:	d04d      	beq.n	8010c22 <uxr_create_session+0x17a>
 8010b86:	2f02      	cmp	r7, #2
 8010b88:	d00c      	beq.n	8010ba4 <uxr_create_session+0xfc>
 8010b8a:	2f00      	cmp	r7, #0
 8010b8c:	d1c4      	bne.n	8010b18 <uxr_create_session+0x70>
 8010b8e:	4639      	mov	r1, r7
 8010b90:	4638      	mov	r0, r7
 8010b92:	f000 fb07 	bl	80111a4 <uxr_stream_id_from_raw>
 8010b96:	a918      	add	r1, sp, #96	; 0x60
 8010b98:	4602      	mov	r2, r0
 8010b9a:	4620      	mov	r0, r4
 8010b9c:	9208      	str	r2, [sp, #32]
 8010b9e:	f7ff fc0b 	bl	80103b8 <read_submessage_list>
 8010ba2:	e7b9      	b.n	8010b18 <uxr_create_session+0x70>
 8010ba4:	4629      	mov	r1, r5
 8010ba6:	4650      	mov	r0, sl
 8010ba8:	f000 fbea 	bl	8011380 <uxr_get_input_reliable_stream>
 8010bac:	4606      	mov	r6, r0
 8010bae:	b390      	cbz	r0, 8010c16 <uxr_create_session+0x16e>
 8010bb0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010bb2:	9203      	str	r2, [sp, #12]
 8010bb4:	a818      	add	r0, sp, #96	; 0x60
 8010bb6:	f7fe fe8f 	bl	800f8d8 <ucdr_buffer_remaining>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	f10d 0011 	add.w	r0, sp, #17
 8010bc0:	9000      	str	r0, [sp, #0]
 8010bc2:	9a03      	ldr	r2, [sp, #12]
 8010bc4:	4659      	mov	r1, fp
 8010bc6:	4630      	mov	r0, r6
 8010bc8:	f005 fc0a 	bl	80163e0 <uxr_receive_reliable_message>
 8010bcc:	b318      	cbz	r0, 8010c16 <uxr_create_session+0x16e>
 8010bce:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8010bd2:	b9b3      	cbnz	r3, 8010c02 <uxr_create_session+0x15a>
 8010bd4:	f88d 8020 	strb.w	r8, [sp, #32]
 8010bd8:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8010bdc:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 8010be0:	9a08      	ldr	r2, [sp, #32]
 8010be2:	a918      	add	r1, sp, #96	; 0x60
 8010be4:	4620      	mov	r0, r4
 8010be6:	f7ff fbe7 	bl	80103b8 <read_submessage_list>
 8010bea:	e00a      	b.n	8010c02 <uxr_create_session+0x15a>
 8010bec:	f04f 0302 	mov.w	r3, #2
 8010bf0:	f88d 8020 	strb.w	r8, [sp, #32]
 8010bf4:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8010bf8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 8010bfc:	9a08      	ldr	r2, [sp, #32]
 8010bfe:	f7ff fbdb 	bl	80103b8 <read_submessage_list>
 8010c02:	a920      	add	r1, sp, #128	; 0x80
 8010c04:	2204      	movs	r2, #4
 8010c06:	4630      	mov	r0, r6
 8010c08:	f005 fc6a 	bl	80164e0 <uxr_next_input_reliable_buffer_available>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	a920      	add	r1, sp, #128	; 0x80
 8010c10:	4620      	mov	r0, r4
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d1ea      	bne.n	8010bec <uxr_create_session+0x144>
 8010c16:	462a      	mov	r2, r5
 8010c18:	4641      	mov	r1, r8
 8010c1a:	4620      	mov	r0, r4
 8010c1c:	f7ff fa4a 	bl	80100b4 <write_submessage_acknack.isra.0>
 8010c20:	e77a      	b.n	8010b18 <uxr_create_session+0x70>
 8010c22:	4629      	mov	r1, r5
 8010c24:	4650      	mov	r0, sl
 8010c26:	f000 fba1 	bl	801136c <uxr_get_input_best_effort_stream>
 8010c2a:	2800      	cmp	r0, #0
 8010c2c:	f43f af74 	beq.w	8010b18 <uxr_create_session+0x70>
 8010c30:	4659      	mov	r1, fp
 8010c32:	f005 fb51 	bl	80162d8 <uxr_receive_best_effort_message>
 8010c36:	2800      	cmp	r0, #0
 8010c38:	f43f af6e 	beq.w	8010b18 <uxr_create_session+0x70>
 8010c3c:	f88d 8020 	strb.w	r8, [sp, #32]
 8010c40:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8010c44:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 8010c48:	9a08      	ldr	r2, [sp, #32]
 8010c4a:	a918      	add	r1, sp, #96	; 0x60
 8010c4c:	4620      	mov	r0, r4
 8010c4e:	f7ff fbb3 	bl	80103b8 <read_submessage_list>
 8010c52:	e761      	b.n	8010b18 <uxr_create_session+0x70>
 8010c54:	f1b9 0901 	subs.w	r9, r9, #1
 8010c58:	d002      	beq.n	8010c60 <uxr_create_session+0x1b8>
 8010c5a:	2aff      	cmp	r2, #255	; 0xff
 8010c5c:	f43f af4f 	beq.w	8010afe <uxr_create_session+0x56>
 8010c60:	b12a      	cbz	r2, 8010c6e <uxr_create_session+0x1c6>
 8010c62:	2000      	movs	r0, #0
 8010c64:	b029      	add	sp, #164	; 0xa4
 8010c66:	ecbd 8b02 	vpop	{d8}
 8010c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c6e:	4650      	mov	r0, sl
 8010c70:	f000 face 	bl	8011210 <uxr_reset_stream_storage>
 8010c74:	2001      	movs	r0, #1
 8010c76:	b029      	add	sp, #164	; 0xa4
 8010c78:	ecbd 8b02 	vpop	{d8}
 8010c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010c80 <wait_session_status>:
 8010c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c84:	4604      	mov	r4, r0
 8010c86:	b09d      	sub	sp, #116	; 0x74
 8010c88:	20ff      	movs	r0, #255	; 0xff
 8010c8a:	7160      	strb	r0, [r4, #5]
 8010c8c:	9304      	str	r3, [sp, #16]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	f000 80b8 	beq.w	8010e04 <wait_session_status+0x184>
 8010c94:	2300      	movs	r3, #0
 8010c96:	468b      	mov	fp, r1
 8010c98:	4692      	mov	sl, r2
 8010c9a:	9303      	str	r3, [sp, #12]
 8010c9c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010c9e:	4652      	mov	r2, sl
 8010ca0:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010ca4:	4659      	mov	r1, fp
 8010ca6:	47a8      	blx	r5
 8010ca8:	f000 fbd2 	bl	8011450 <uxr_millis>
 8010cac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010cb0:	4605      	mov	r5, r0
 8010cb2:	e009      	b.n	8010cc8 <wait_session_status+0x48>
 8010cb4:	f000 fbcc 	bl	8011450 <uxr_millis>
 8010cb8:	1b40      	subs	r0, r0, r5
 8010cba:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	dd42      	ble.n	8010d48 <wait_session_status+0xc8>
 8010cc2:	7960      	ldrb	r0, [r4, #5]
 8010cc4:	28ff      	cmp	r0, #255	; 0xff
 8010cc6:	d148      	bne.n	8010d5a <wait_session_status+0xda>
 8010cc8:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8010cca:	a908      	add	r1, sp, #32
 8010ccc:	6896      	ldr	r6, [r2, #8]
 8010cce:	6810      	ldr	r0, [r2, #0]
 8010cd0:	aa09      	add	r2, sp, #36	; 0x24
 8010cd2:	47b0      	blx	r6
 8010cd4:	2800      	cmp	r0, #0
 8010cd6:	d0ed      	beq.n	8010cb4 <wait_session_status+0x34>
 8010cd8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8010cdc:	a80c      	add	r0, sp, #48	; 0x30
 8010cde:	f7fe fdcb 	bl	800f878 <ucdr_init_buffer>
 8010ce2:	2600      	movs	r6, #0
 8010ce4:	f10d 031e 	add.w	r3, sp, #30
 8010ce8:	aa07      	add	r2, sp, #28
 8010cea:	a90c      	add	r1, sp, #48	; 0x30
 8010cec:	4620      	mov	r0, r4
 8010cee:	f88d 601c 	strb.w	r6, [sp, #28]
 8010cf2:	f000 f9b3 	bl	801105c <uxr_read_session_header>
 8010cf6:	2800      	cmp	r0, #0
 8010cf8:	d0dc      	beq.n	8010cb4 <wait_session_status+0x34>
 8010cfa:	4631      	mov	r1, r6
 8010cfc:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010d00:	f000 fa50 	bl	80111a4 <uxr_stream_id_from_raw>
 8010d04:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010d08:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8010d0c:	9302      	str	r3, [sp, #8]
 8010d0e:	2f01      	cmp	r7, #1
 8010d10:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8010d14:	fa5f f880 	uxtb.w	r8, r0
 8010d18:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010d1c:	d058      	beq.n	8010dd0 <wait_session_status+0x150>
 8010d1e:	2f02      	cmp	r7, #2
 8010d20:	d021      	beq.n	8010d66 <wait_session_status+0xe6>
 8010d22:	2f00      	cmp	r7, #0
 8010d24:	d1c6      	bne.n	8010cb4 <wait_session_status+0x34>
 8010d26:	4639      	mov	r1, r7
 8010d28:	4638      	mov	r0, r7
 8010d2a:	f000 fa3b 	bl	80111a4 <uxr_stream_id_from_raw>
 8010d2e:	a90c      	add	r1, sp, #48	; 0x30
 8010d30:	4602      	mov	r2, r0
 8010d32:	4620      	mov	r0, r4
 8010d34:	920b      	str	r2, [sp, #44]	; 0x2c
 8010d36:	f7ff fb3f 	bl	80103b8 <read_submessage_list>
 8010d3a:	f000 fb89 	bl	8011450 <uxr_millis>
 8010d3e:	1b40      	subs	r0, r0, r5
 8010d40:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	dcbc      	bgt.n	8010cc2 <wait_session_status+0x42>
 8010d48:	9b03      	ldr	r3, [sp, #12]
 8010d4a:	9a04      	ldr	r2, [sp, #16]
 8010d4c:	7960      	ldrb	r0, [r4, #5]
 8010d4e:	3301      	adds	r3, #1
 8010d50:	429a      	cmp	r2, r3
 8010d52:	9303      	str	r3, [sp, #12]
 8010d54:	d001      	beq.n	8010d5a <wait_session_status+0xda>
 8010d56:	28ff      	cmp	r0, #255	; 0xff
 8010d58:	d0a0      	beq.n	8010c9c <wait_session_status+0x1c>
 8010d5a:	38ff      	subs	r0, #255	; 0xff
 8010d5c:	bf18      	it	ne
 8010d5e:	2001      	movne	r0, #1
 8010d60:	b01d      	add	sp, #116	; 0x74
 8010d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d66:	4631      	mov	r1, r6
 8010d68:	f104 0008 	add.w	r0, r4, #8
 8010d6c:	f000 fb08 	bl	8011380 <uxr_get_input_reliable_stream>
 8010d70:	4681      	mov	r9, r0
 8010d72:	b338      	cbz	r0, 8010dc4 <wait_session_status+0x144>
 8010d74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010d76:	9205      	str	r2, [sp, #20]
 8010d78:	a80c      	add	r0, sp, #48	; 0x30
 8010d7a:	f7fe fdad 	bl	800f8d8 <ucdr_buffer_remaining>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	f10d 001d 	add.w	r0, sp, #29
 8010d84:	9000      	str	r0, [sp, #0]
 8010d86:	9a05      	ldr	r2, [sp, #20]
 8010d88:	9902      	ldr	r1, [sp, #8]
 8010d8a:	4648      	mov	r0, r9
 8010d8c:	f005 fb28 	bl	80163e0 <uxr_receive_reliable_message>
 8010d90:	b1c0      	cbz	r0, 8010dc4 <wait_session_status+0x144>
 8010d92:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8010d96:	b95b      	cbnz	r3, 8010db0 <wait_session_status+0x130>
 8010d98:	e03c      	b.n	8010e14 <wait_session_status+0x194>
 8010d9a:	f04f 0302 	mov.w	r3, #2
 8010d9e:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8010da2:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8010da6:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8010daa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010dac:	f7ff fb04 	bl	80103b8 <read_submessage_list>
 8010db0:	a914      	add	r1, sp, #80	; 0x50
 8010db2:	2204      	movs	r2, #4
 8010db4:	4648      	mov	r0, r9
 8010db6:	f005 fb93 	bl	80164e0 <uxr_next_input_reliable_buffer_available>
 8010dba:	4603      	mov	r3, r0
 8010dbc:	a914      	add	r1, sp, #80	; 0x50
 8010dbe:	4620      	mov	r0, r4
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d1ea      	bne.n	8010d9a <wait_session_status+0x11a>
 8010dc4:	4632      	mov	r2, r6
 8010dc6:	4641      	mov	r1, r8
 8010dc8:	4620      	mov	r0, r4
 8010dca:	f7ff f973 	bl	80100b4 <write_submessage_acknack.isra.0>
 8010dce:	e771      	b.n	8010cb4 <wait_session_status+0x34>
 8010dd0:	4631      	mov	r1, r6
 8010dd2:	f104 0008 	add.w	r0, r4, #8
 8010dd6:	f000 fac9 	bl	801136c <uxr_get_input_best_effort_stream>
 8010dda:	2800      	cmp	r0, #0
 8010ddc:	f43f af6a 	beq.w	8010cb4 <wait_session_status+0x34>
 8010de0:	9902      	ldr	r1, [sp, #8]
 8010de2:	f005 fa79 	bl	80162d8 <uxr_receive_best_effort_message>
 8010de6:	2800      	cmp	r0, #0
 8010de8:	f43f af64 	beq.w	8010cb4 <wait_session_status+0x34>
 8010dec:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8010df0:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8010df4:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8010df8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010dfa:	a90c      	add	r1, sp, #48	; 0x30
 8010dfc:	4620      	mov	r0, r4
 8010dfe:	f7ff fadb 	bl	80103b8 <read_submessage_list>
 8010e02:	e757      	b.n	8010cb4 <wait_session_status+0x34>
 8010e04:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010e06:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010e0a:	47a0      	blx	r4
 8010e0c:	2001      	movs	r0, #1
 8010e0e:	b01d      	add	sp, #116	; 0x74
 8010e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e14:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8010e18:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8010e1c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8010e20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010e22:	a90c      	add	r1, sp, #48	; 0x30
 8010e24:	4620      	mov	r0, r4
 8010e26:	f7ff fac7 	bl	80103b8 <read_submessage_list>
 8010e2a:	e7c1      	b.n	8010db0 <wait_session_status+0x130>

08010e2c <uxr_delete_session_retries>:
 8010e2c:	b530      	push	{r4, r5, lr}
 8010e2e:	b08f      	sub	sp, #60	; 0x3c
 8010e30:	4604      	mov	r4, r0
 8010e32:	460d      	mov	r5, r1
 8010e34:	f000 f954 	bl	80110e0 <uxr_session_header_offset>
 8010e38:	2300      	movs	r3, #0
 8010e3a:	2210      	movs	r2, #16
 8010e3c:	9000      	str	r0, [sp, #0]
 8010e3e:	a902      	add	r1, sp, #8
 8010e40:	a806      	add	r0, sp, #24
 8010e42:	f7fe fd07 	bl	800f854 <ucdr_init_buffer_origin_offset>
 8010e46:	a906      	add	r1, sp, #24
 8010e48:	4620      	mov	r0, r4
 8010e4a:	f000 f897 	bl	8010f7c <uxr_buffer_delete_session>
 8010e4e:	2200      	movs	r2, #0
 8010e50:	4611      	mov	r1, r2
 8010e52:	9b06      	ldr	r3, [sp, #24]
 8010e54:	4620      	mov	r0, r4
 8010e56:	f000 f8eb 	bl	8011030 <uxr_stamp_session_header>
 8010e5a:	a806      	add	r0, sp, #24
 8010e5c:	f7fe fd38 	bl	800f8d0 <ucdr_buffer_length>
 8010e60:	462b      	mov	r3, r5
 8010e62:	4602      	mov	r2, r0
 8010e64:	a902      	add	r1, sp, #8
 8010e66:	4620      	mov	r0, r4
 8010e68:	f7ff ff0a 	bl	8010c80 <wait_session_status>
 8010e6c:	b118      	cbz	r0, 8010e76 <uxr_delete_session_retries+0x4a>
 8010e6e:	7960      	ldrb	r0, [r4, #5]
 8010e70:	fab0 f080 	clz	r0, r0
 8010e74:	0940      	lsrs	r0, r0, #5
 8010e76:	b00f      	add	sp, #60	; 0x3c
 8010e78:	bd30      	pop	{r4, r5, pc}
 8010e7a:	bf00      	nop

08010e7c <uxr_prepare_stream_to_write_submessage>:
 8010e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e80:	b082      	sub	sp, #8
 8010e82:	4682      	mov	sl, r0
 8010e84:	4610      	mov	r0, r2
 8010e86:	4615      	mov	r5, r2
 8010e88:	461e      	mov	r6, r3
 8010e8a:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8010e8e:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8010e92:	9101      	str	r1, [sp, #4]
 8010e94:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8010e98:	f000 fad4 	bl	8011444 <uxr_submessage_padding>
 8010e9c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010ea0:	f105 0904 	add.w	r9, r5, #4
 8010ea4:	2b01      	cmp	r3, #1
 8010ea6:	4481      	add	r9, r0
 8010ea8:	d01d      	beq.n	8010ee6 <uxr_prepare_stream_to_write_submessage+0x6a>
 8010eaa:	2b02      	cmp	r3, #2
 8010eac:	d116      	bne.n	8010edc <uxr_prepare_stream_to_write_submessage+0x60>
 8010eae:	4621      	mov	r1, r4
 8010eb0:	f10a 0008 	add.w	r0, sl, #8
 8010eb4:	f000 fa4e 	bl	8011354 <uxr_get_output_reliable_stream>
 8010eb8:	4604      	mov	r4, r0
 8010eba:	b158      	cbz	r0, 8010ed4 <uxr_prepare_stream_to_write_submessage+0x58>
 8010ebc:	4649      	mov	r1, r9
 8010ebe:	4632      	mov	r2, r6
 8010ec0:	f005 fcc4 	bl	801684c <uxr_prepare_reliable_buffer_to_write>
 8010ec4:	4604      	mov	r4, r0
 8010ec6:	b12c      	cbz	r4, 8010ed4 <uxr_prepare_stream_to_write_submessage+0x58>
 8010ec8:	4643      	mov	r3, r8
 8010eca:	b2aa      	uxth	r2, r5
 8010ecc:	4639      	mov	r1, r7
 8010ece:	4630      	mov	r0, r6
 8010ed0:	f000 fa78 	bl	80113c4 <uxr_buffer_submessage_header>
 8010ed4:	4620      	mov	r0, r4
 8010ed6:	b002      	add	sp, #8
 8010ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010edc:	2400      	movs	r4, #0
 8010ede:	4620      	mov	r0, r4
 8010ee0:	b002      	add	sp, #8
 8010ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ee6:	4621      	mov	r1, r4
 8010ee8:	f10a 0008 	add.w	r0, sl, #8
 8010eec:	f000 fa2a 	bl	8011344 <uxr_get_output_best_effort_stream>
 8010ef0:	4604      	mov	r4, r0
 8010ef2:	2800      	cmp	r0, #0
 8010ef4:	d0ee      	beq.n	8010ed4 <uxr_prepare_stream_to_write_submessage+0x58>
 8010ef6:	4649      	mov	r1, r9
 8010ef8:	4632      	mov	r2, r6
 8010efa:	f005 fbe3 	bl	80166c4 <uxr_prepare_best_effort_buffer_to_write>
 8010efe:	4604      	mov	r4, r0
 8010f00:	e7e1      	b.n	8010ec6 <uxr_prepare_stream_to_write_submessage+0x4a>
 8010f02:	bf00      	nop

08010f04 <uxr_init_session_info>:
 8010f04:	b470      	push	{r4, r5, r6}
 8010f06:	7102      	strb	r2, [r0, #4]
 8010f08:	0e16      	lsrs	r6, r2, #24
 8010f0a:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8010f0e:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8010f12:	23ff      	movs	r3, #255	; 0xff
 8010f14:	2209      	movs	r2, #9
 8010f16:	7046      	strb	r6, [r0, #1]
 8010f18:	7085      	strb	r5, [r0, #2]
 8010f1a:	70c4      	strb	r4, [r0, #3]
 8010f1c:	7001      	strb	r1, [r0, #0]
 8010f1e:	bc70      	pop	{r4, r5, r6}
 8010f20:	80c2      	strh	r2, [r0, #6]
 8010f22:	7143      	strb	r3, [r0, #5]
 8010f24:	4770      	bx	lr
 8010f26:	bf00      	nop

08010f28 <uxr_buffer_create_session>:
 8010f28:	b570      	push	{r4, r5, r6, lr}
 8010f2a:	b088      	sub	sp, #32
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	4d12      	ldr	r5, [pc, #72]	; (8010f78 <uxr_buffer_create_session+0x50>)
 8010f30:	9307      	str	r3, [sp, #28]
 8010f32:	f8ad 201c 	strh.w	r2, [sp, #28]
 8010f36:	7802      	ldrb	r2, [r0, #0]
 8010f38:	9303      	str	r3, [sp, #12]
 8010f3a:	460c      	mov	r4, r1
 8010f3c:	f88d 200c 	strb.w	r2, [sp, #12]
 8010f40:	2101      	movs	r1, #1
 8010f42:	682a      	ldr	r2, [r5, #0]
 8010f44:	f8d0 6001 	ldr.w	r6, [r0, #1]
 8010f48:	88ad      	ldrh	r5, [r5, #4]
 8010f4a:	80c1      	strh	r1, [r0, #6]
 8010f4c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8010f50:	9200      	str	r2, [sp, #0]
 8010f52:	4619      	mov	r1, r3
 8010f54:	2210      	movs	r2, #16
 8010f56:	4620      	mov	r0, r4
 8010f58:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8010f5c:	9306      	str	r3, [sp, #24]
 8010f5e:	f88d 300d 	strb.w	r3, [sp, #13]
 8010f62:	9602      	str	r6, [sp, #8]
 8010f64:	f8ad 5006 	strh.w	r5, [sp, #6]
 8010f68:	f000 fa2c 	bl	80113c4 <uxr_buffer_submessage_header>
 8010f6c:	4620      	mov	r0, r4
 8010f6e:	4669      	mov	r1, sp
 8010f70:	f001 fa50 	bl	8012414 <uxr_serialize_CREATE_CLIENT_Payload>
 8010f74:	b008      	add	sp, #32
 8010f76:	bd70      	pop	{r4, r5, r6, pc}
 8010f78:	080196e0 	.word	0x080196e0

08010f7c <uxr_buffer_delete_session>:
 8010f7c:	b530      	push	{r4, r5, lr}
 8010f7e:	4b0c      	ldr	r3, [pc, #48]	; (8010fb0 <uxr_buffer_delete_session+0x34>)
 8010f80:	b083      	sub	sp, #12
 8010f82:	891b      	ldrh	r3, [r3, #8]
 8010f84:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010f88:	2202      	movs	r2, #2
 8010f8a:	460c      	mov	r4, r1
 8010f8c:	80c2      	strh	r2, [r0, #6]
 8010f8e:	2300      	movs	r3, #0
 8010f90:	2204      	movs	r2, #4
 8010f92:	4608      	mov	r0, r1
 8010f94:	f44f 7500 	mov.w	r5, #512	; 0x200
 8010f98:	2103      	movs	r1, #3
 8010f9a:	f8ad 5004 	strh.w	r5, [sp, #4]
 8010f9e:	f000 fa11 	bl	80113c4 <uxr_buffer_submessage_header>
 8010fa2:	4620      	mov	r0, r4
 8010fa4:	a901      	add	r1, sp, #4
 8010fa6:	f001 fae3 	bl	8012570 <uxr_serialize_DELETE_Payload>
 8010faa:	b003      	add	sp, #12
 8010fac:	bd30      	pop	{r4, r5, pc}
 8010fae:	bf00      	nop
 8010fb0:	080196e0 	.word	0x080196e0

08010fb4 <uxr_read_create_session_status>:
 8010fb4:	b510      	push	{r4, lr}
 8010fb6:	b088      	sub	sp, #32
 8010fb8:	4604      	mov	r4, r0
 8010fba:	4608      	mov	r0, r1
 8010fbc:	a901      	add	r1, sp, #4
 8010fbe:	f001 fae7 	bl	8012590 <uxr_deserialize_STATUS_AGENT_Payload>
 8010fc2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010fc6:	7163      	strb	r3, [r4, #5]
 8010fc8:	b008      	add	sp, #32
 8010fca:	bd10      	pop	{r4, pc}

08010fcc <uxr_read_delete_session_status>:
 8010fcc:	b510      	push	{r4, lr}
 8010fce:	4604      	mov	r4, r0
 8010fd0:	b084      	sub	sp, #16
 8010fd2:	4608      	mov	r0, r1
 8010fd4:	a902      	add	r1, sp, #8
 8010fd6:	f001 fb0b 	bl	80125f0 <uxr_deserialize_STATUS_Payload>
 8010fda:	88e3      	ldrh	r3, [r4, #6]
 8010fdc:	2b02      	cmp	r3, #2
 8010fde:	d001      	beq.n	8010fe4 <uxr_read_delete_session_status+0x18>
 8010fe0:	b004      	add	sp, #16
 8010fe2:	bd10      	pop	{r4, pc}
 8010fe4:	f10d 000a 	add.w	r0, sp, #10
 8010fe8:	f7fe fec6 	bl	800fd78 <uxr_object_id_from_raw>
 8010fec:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8010ff0:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8010ff4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010ff8:	b29b      	uxth	r3, r3
 8010ffa:	2b02      	cmp	r3, #2
 8010ffc:	bf04      	itt	eq
 8010ffe:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8011002:	7163      	strbeq	r3, [r4, #5]
 8011004:	b004      	add	sp, #16
 8011006:	bd10      	pop	{r4, pc}

08011008 <uxr_stamp_create_session_header>:
 8011008:	b510      	push	{r4, lr}
 801100a:	4604      	mov	r4, r0
 801100c:	b08a      	sub	sp, #40	; 0x28
 801100e:	a802      	add	r0, sp, #8
 8011010:	2208      	movs	r2, #8
 8011012:	f7fe fc31 	bl	800f878 <ucdr_init_buffer>
 8011016:	f814 1b01 	ldrb.w	r1, [r4], #1
 801101a:	9400      	str	r4, [sp, #0]
 801101c:	2300      	movs	r3, #0
 801101e:	a802      	add	r0, sp, #8
 8011020:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8011024:	461a      	mov	r2, r3
 8011026:	f000 fbcb 	bl	80117c0 <uxr_serialize_message_header>
 801102a:	b00a      	add	sp, #40	; 0x28
 801102c:	bd10      	pop	{r4, pc}
 801102e:	bf00      	nop

08011030 <uxr_stamp_session_header>:
 8011030:	b570      	push	{r4, r5, r6, lr}
 8011032:	4604      	mov	r4, r0
 8011034:	b08c      	sub	sp, #48	; 0x30
 8011036:	460d      	mov	r5, r1
 8011038:	4616      	mov	r6, r2
 801103a:	4619      	mov	r1, r3
 801103c:	a804      	add	r0, sp, #16
 801103e:	2208      	movs	r2, #8
 8011040:	9603      	str	r6, [sp, #12]
 8011042:	f7fe fc19 	bl	800f878 <ucdr_init_buffer>
 8011046:	f814 1b01 	ldrb.w	r1, [r4], #1
 801104a:	9b03      	ldr	r3, [sp, #12]
 801104c:	9400      	str	r4, [sp, #0]
 801104e:	462a      	mov	r2, r5
 8011050:	a804      	add	r0, sp, #16
 8011052:	f000 fbb5 	bl	80117c0 <uxr_serialize_message_header>
 8011056:	b00c      	add	sp, #48	; 0x30
 8011058:	bd70      	pop	{r4, r5, r6, pc}
 801105a:	bf00      	nop

0801105c <uxr_read_session_header>:
 801105c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011060:	4607      	mov	r7, r0
 8011062:	b084      	sub	sp, #16
 8011064:	4608      	mov	r0, r1
 8011066:	460c      	mov	r4, r1
 8011068:	4615      	mov	r5, r2
 801106a:	461e      	mov	r6, r3
 801106c:	f7fe fc34 	bl	800f8d8 <ucdr_buffer_remaining>
 8011070:	2808      	cmp	r0, #8
 8011072:	d803      	bhi.n	801107c <uxr_read_session_header+0x20>
 8011074:	2000      	movs	r0, #0
 8011076:	b004      	add	sp, #16
 8011078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801107c:	f10d 080c 	add.w	r8, sp, #12
 8011080:	4633      	mov	r3, r6
 8011082:	462a      	mov	r2, r5
 8011084:	4620      	mov	r0, r4
 8011086:	f8cd 8000 	str.w	r8, [sp]
 801108a:	f10d 010b 	add.w	r1, sp, #11
 801108e:	f000 fbb5 	bl	80117fc <uxr_deserialize_message_header>
 8011092:	783a      	ldrb	r2, [r7, #0]
 8011094:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8011098:	4293      	cmp	r3, r2
 801109a:	d1eb      	bne.n	8011074 <uxr_read_session_header+0x18>
 801109c:	061b      	lsls	r3, r3, #24
 801109e:	d41c      	bmi.n	80110da <uxr_read_session_header+0x7e>
 80110a0:	f898 2000 	ldrb.w	r2, [r8]
 80110a4:	787b      	ldrb	r3, [r7, #1]
 80110a6:	429a      	cmp	r2, r3
 80110a8:	d003      	beq.n	80110b2 <uxr_read_session_header+0x56>
 80110aa:	2001      	movs	r0, #1
 80110ac:	f080 0001 	eor.w	r0, r0, #1
 80110b0:	e7e1      	b.n	8011076 <uxr_read_session_header+0x1a>
 80110b2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80110b6:	78bb      	ldrb	r3, [r7, #2]
 80110b8:	429a      	cmp	r2, r3
 80110ba:	f107 0102 	add.w	r1, r7, #2
 80110be:	d1f4      	bne.n	80110aa <uxr_read_session_header+0x4e>
 80110c0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80110c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80110c8:	429a      	cmp	r2, r3
 80110ca:	d1ee      	bne.n	80110aa <uxr_read_session_header+0x4e>
 80110cc:	784b      	ldrb	r3, [r1, #1]
 80110ce:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80110d2:	429a      	cmp	r2, r3
 80110d4:	d1e9      	bne.n	80110aa <uxr_read_session_header+0x4e>
 80110d6:	2000      	movs	r0, #0
 80110d8:	e7e8      	b.n	80110ac <uxr_read_session_header+0x50>
 80110da:	2001      	movs	r0, #1
 80110dc:	e7cb      	b.n	8011076 <uxr_read_session_header+0x1a>
 80110de:	bf00      	nop

080110e0 <uxr_session_header_offset>:
 80110e0:	f990 3000 	ldrsb.w	r3, [r0]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	bfac      	ite	ge
 80110e8:	2008      	movge	r0, #8
 80110ea:	2004      	movlt	r0, #4
 80110ec:	4770      	bx	lr
 80110ee:	bf00      	nop

080110f0 <uxr_init_base_object_request>:
 80110f0:	b530      	push	{r4, r5, lr}
 80110f2:	88c3      	ldrh	r3, [r0, #6]
 80110f4:	b083      	sub	sp, #12
 80110f6:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 80110fa:	9101      	str	r1, [sp, #4]
 80110fc:	f1a3 010a 	sub.w	r1, r3, #10
 8011100:	b289      	uxth	r1, r1
 8011102:	42a1      	cmp	r1, r4
 8011104:	d80e      	bhi.n	8011124 <uxr_init_base_object_request+0x34>
 8011106:	3301      	adds	r3, #1
 8011108:	b29c      	uxth	r4, r3
 801110a:	f3c3 2507 	ubfx	r5, r3, #8, #8
 801110e:	b2db      	uxtb	r3, r3
 8011110:	80c4      	strh	r4, [r0, #6]
 8011112:	1c91      	adds	r1, r2, #2
 8011114:	9801      	ldr	r0, [sp, #4]
 8011116:	7015      	strb	r5, [r2, #0]
 8011118:	7053      	strb	r3, [r2, #1]
 801111a:	f7fe fe41 	bl	800fda0 <uxr_object_id_to_raw>
 801111e:	4620      	mov	r0, r4
 8011120:	b003      	add	sp, #12
 8011122:	bd30      	pop	{r4, r5, pc}
 8011124:	230a      	movs	r3, #10
 8011126:	461c      	mov	r4, r3
 8011128:	2500      	movs	r5, #0
 801112a:	e7f1      	b.n	8011110 <uxr_init_base_object_request+0x20>

0801112c <uxr_parse_base_object_request>:
 801112c:	b570      	push	{r4, r5, r6, lr}
 801112e:	4604      	mov	r4, r0
 8011130:	3002      	adds	r0, #2
 8011132:	460d      	mov	r5, r1
 8011134:	4616      	mov	r6, r2
 8011136:	f7fe fe1f 	bl	800fd78 <uxr_object_id_from_raw>
 801113a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801113e:	8028      	strh	r0, [r5, #0]
 8011140:	806b      	strh	r3, [r5, #2]
 8011142:	7822      	ldrb	r2, [r4, #0]
 8011144:	7863      	ldrb	r3, [r4, #1]
 8011146:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801114a:	8033      	strh	r3, [r6, #0]
 801114c:	bd70      	pop	{r4, r5, r6, pc}
 801114e:	bf00      	nop

08011150 <uxr_stream_id>:
 8011150:	b410      	push	{r4}
 8011152:	2901      	cmp	r1, #1
 8011154:	b083      	sub	sp, #12
 8011156:	d01f      	beq.n	8011198 <uxr_stream_id+0x48>
 8011158:	2902      	cmp	r1, #2
 801115a:	f04f 0400 	mov.w	r4, #0
 801115e:	d01e      	beq.n	801119e <uxr_stream_id+0x4e>
 8011160:	2300      	movs	r3, #0
 8011162:	f364 0307 	bfi	r3, r4, #0, #8
 8011166:	f360 230f 	bfi	r3, r0, #8, #8
 801116a:	f361 4317 	bfi	r3, r1, #16, #8
 801116e:	f362 631f 	bfi	r3, r2, #24, #8
 8011172:	b2da      	uxtb	r2, r3
 8011174:	2000      	movs	r0, #0
 8011176:	f362 0007 	bfi	r0, r2, #0, #8
 801117a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801117e:	f362 200f 	bfi	r0, r2, #8, #8
 8011182:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011186:	f362 4017 	bfi	r0, r2, #16, #8
 801118a:	0e1b      	lsrs	r3, r3, #24
 801118c:	f363 601f 	bfi	r0, r3, #24, #8
 8011190:	b003      	add	sp, #12
 8011192:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011196:	4770      	bx	lr
 8011198:	1c44      	adds	r4, r0, #1
 801119a:	b2e4      	uxtb	r4, r4
 801119c:	e7e0      	b.n	8011160 <uxr_stream_id+0x10>
 801119e:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 80111a2:	e7dd      	b.n	8011160 <uxr_stream_id+0x10>

080111a4 <uxr_stream_id_from_raw>:
 80111a4:	b410      	push	{r4}
 80111a6:	b083      	sub	sp, #12
 80111a8:	b128      	cbz	r0, 80111b6 <uxr_stream_id_from_raw+0x12>
 80111aa:	0603      	lsls	r3, r0, #24
 80111ac:	d421      	bmi.n	80111f2 <uxr_stream_id_from_raw+0x4e>
 80111ae:	1e42      	subs	r2, r0, #1
 80111b0:	b2d2      	uxtb	r2, r2
 80111b2:	2401      	movs	r4, #1
 80111b4:	e001      	b.n	80111ba <uxr_stream_id_from_raw+0x16>
 80111b6:	4604      	mov	r4, r0
 80111b8:	4602      	mov	r2, r0
 80111ba:	2300      	movs	r3, #0
 80111bc:	f360 0307 	bfi	r3, r0, #0, #8
 80111c0:	f362 230f 	bfi	r3, r2, #8, #8
 80111c4:	f364 4317 	bfi	r3, r4, #16, #8
 80111c8:	f361 631f 	bfi	r3, r1, #24, #8
 80111cc:	b2da      	uxtb	r2, r3
 80111ce:	2000      	movs	r0, #0
 80111d0:	f362 0007 	bfi	r0, r2, #0, #8
 80111d4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80111d8:	f362 200f 	bfi	r0, r2, #8, #8
 80111dc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80111e0:	f362 4017 	bfi	r0, r2, #16, #8
 80111e4:	0e1b      	lsrs	r3, r3, #24
 80111e6:	f363 601f 	bfi	r0, r3, #24, #8
 80111ea:	b003      	add	sp, #12
 80111ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111f0:	4770      	bx	lr
 80111f2:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 80111f6:	2402      	movs	r4, #2
 80111f8:	e7df      	b.n	80111ba <uxr_stream_id_from_raw+0x16>
 80111fa:	bf00      	nop

080111fc <uxr_init_stream_storage>:
 80111fc:	2300      	movs	r3, #0
 80111fe:	7403      	strb	r3, [r0, #16]
 8011200:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8011204:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8011208:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 801120c:	4770      	bx	lr
 801120e:	bf00      	nop

08011210 <uxr_reset_stream_storage>:
 8011210:	b570      	push	{r4, r5, r6, lr}
 8011212:	7c03      	ldrb	r3, [r0, #16]
 8011214:	4604      	mov	r4, r0
 8011216:	b153      	cbz	r3, 801122e <uxr_reset_stream_storage+0x1e>
 8011218:	4606      	mov	r6, r0
 801121a:	2500      	movs	r5, #0
 801121c:	4630      	mov	r0, r6
 801121e:	f005 fa4b 	bl	80166b8 <uxr_reset_output_best_effort_stream>
 8011222:	7c23      	ldrb	r3, [r4, #16]
 8011224:	3501      	adds	r5, #1
 8011226:	42ab      	cmp	r3, r5
 8011228:	f106 0610 	add.w	r6, r6, #16
 801122c:	d8f6      	bhi.n	801121c <uxr_reset_stream_storage+0xc>
 801122e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011232:	b163      	cbz	r3, 801124e <uxr_reset_stream_storage+0x3e>
 8011234:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011238:	2500      	movs	r5, #0
 801123a:	4630      	mov	r0, r6
 801123c:	f005 f848 	bl	80162d0 <uxr_reset_input_best_effort_stream>
 8011240:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011244:	3501      	adds	r5, #1
 8011246:	42ab      	cmp	r3, r5
 8011248:	f106 0602 	add.w	r6, r6, #2
 801124c:	d8f5      	bhi.n	801123a <uxr_reset_stream_storage+0x2a>
 801124e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011252:	b163      	cbz	r3, 801126e <uxr_reset_stream_storage+0x5e>
 8011254:	f104 0618 	add.w	r6, r4, #24
 8011258:	2500      	movs	r5, #0
 801125a:	4630      	mov	r0, r6
 801125c:	f005 facc 	bl	80167f8 <uxr_reset_output_reliable_stream>
 8011260:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011264:	3501      	adds	r5, #1
 8011266:	42ab      	cmp	r3, r5
 8011268:	f106 0628 	add.w	r6, r6, #40	; 0x28
 801126c:	d8f5      	bhi.n	801125a <uxr_reset_stream_storage+0x4a>
 801126e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8011272:	b163      	cbz	r3, 801128e <uxr_reset_stream_storage+0x7e>
 8011274:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8011278:	2500      	movs	r5, #0
 801127a:	4630      	mov	r0, r6
 801127c:	f005 f890 	bl	80163a0 <uxr_reset_input_reliable_stream>
 8011280:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8011284:	3501      	adds	r5, #1
 8011286:	42ab      	cmp	r3, r5
 8011288:	f106 0618 	add.w	r6, r6, #24
 801128c:	d8f5      	bhi.n	801127a <uxr_reset_stream_storage+0x6a>
 801128e:	bd70      	pop	{r4, r5, r6, pc}

08011290 <uxr_add_output_best_effort_buffer>:
 8011290:	b530      	push	{r4, r5, lr}
 8011292:	7c04      	ldrb	r4, [r0, #16]
 8011294:	1c65      	adds	r5, r4, #1
 8011296:	b083      	sub	sp, #12
 8011298:	7405      	strb	r5, [r0, #16]
 801129a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801129e:	f005 f9ff 	bl	80166a0 <uxr_init_output_best_effort_stream>
 80112a2:	2201      	movs	r2, #1
 80112a4:	4620      	mov	r0, r4
 80112a6:	4611      	mov	r1, r2
 80112a8:	b003      	add	sp, #12
 80112aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80112ae:	f7ff bf4f 	b.w	8011150 <uxr_stream_id>
 80112b2:	bf00      	nop

080112b4 <uxr_add_output_reliable_buffer>:
 80112b4:	b570      	push	{r4, r5, r6, lr}
 80112b6:	b084      	sub	sp, #16
 80112b8:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80112bc:	f89d 6020 	ldrb.w	r6, [sp, #32]
 80112c0:	9600      	str	r6, [sp, #0]
 80112c2:	2528      	movs	r5, #40	; 0x28
 80112c4:	1c66      	adds	r6, r4, #1
 80112c6:	fb05 0504 	mla	r5, r5, r4, r0
 80112ca:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 80112ce:	f105 0018 	add.w	r0, r5, #24
 80112d2:	f005 fa5f 	bl	8016794 <uxr_init_output_reliable_stream>
 80112d6:	4620      	mov	r0, r4
 80112d8:	2201      	movs	r2, #1
 80112da:	2102      	movs	r1, #2
 80112dc:	b004      	add	sp, #16
 80112de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80112e2:	f7ff bf35 	b.w	8011150 <uxr_stream_id>
 80112e6:	bf00      	nop

080112e8 <uxr_add_input_best_effort_buffer>:
 80112e8:	b510      	push	{r4, lr}
 80112ea:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 80112ee:	1c62      	adds	r2, r4, #1
 80112f0:	f104 0321 	add.w	r3, r4, #33	; 0x21
 80112f4:	b082      	sub	sp, #8
 80112f6:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 80112fa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80112fe:	f004 ffe3 	bl	80162c8 <uxr_init_input_best_effort_stream>
 8011302:	4620      	mov	r0, r4
 8011304:	2200      	movs	r2, #0
 8011306:	2101      	movs	r1, #1
 8011308:	b002      	add	sp, #8
 801130a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801130e:	f7ff bf1f 	b.w	8011150 <uxr_stream_id>
 8011312:	bf00      	nop

08011314 <uxr_add_input_reliable_buffer>:
 8011314:	b570      	push	{r4, r5, r6, lr}
 8011316:	b084      	sub	sp, #16
 8011318:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 801131c:	9e08      	ldr	r6, [sp, #32]
 801131e:	9600      	str	r6, [sp, #0]
 8011320:	2518      	movs	r5, #24
 8011322:	1c66      	adds	r6, r4, #1
 8011324:	fb05 0504 	mla	r5, r5, r4, r0
 8011328:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 801132c:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8011330:	f005 f812 	bl	8016358 <uxr_init_input_reliable_stream>
 8011334:	4620      	mov	r0, r4
 8011336:	2200      	movs	r2, #0
 8011338:	2102      	movs	r1, #2
 801133a:	b004      	add	sp, #16
 801133c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011340:	f7ff bf06 	b.w	8011150 <uxr_stream_id>

08011344 <uxr_get_output_best_effort_stream>:
 8011344:	7c03      	ldrb	r3, [r0, #16]
 8011346:	428b      	cmp	r3, r1
 8011348:	bf8c      	ite	hi
 801134a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801134e:	2000      	movls	r0, #0
 8011350:	4770      	bx	lr
 8011352:	bf00      	nop

08011354 <uxr_get_output_reliable_stream>:
 8011354:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8011358:	428b      	cmp	r3, r1
 801135a:	bf83      	ittte	hi
 801135c:	2328      	movhi	r3, #40	; 0x28
 801135e:	fb03 0101 	mlahi	r1, r3, r1, r0
 8011362:	f101 0018 	addhi.w	r0, r1, #24
 8011366:	2000      	movls	r0, #0
 8011368:	4770      	bx	lr
 801136a:	bf00      	nop

0801136c <uxr_get_input_best_effort_stream>:
 801136c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8011370:	428b      	cmp	r3, r1
 8011372:	bf86      	itte	hi
 8011374:	3121      	addhi	r1, #33	; 0x21
 8011376:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 801137a:	2000      	movls	r0, #0
 801137c:	4770      	bx	lr
 801137e:	bf00      	nop

08011380 <uxr_get_input_reliable_stream>:
 8011380:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8011384:	428b      	cmp	r3, r1
 8011386:	bf83      	ittte	hi
 8011388:	2318      	movhi	r3, #24
 801138a:	fb03 0101 	mlahi	r1, r3, r1, r0
 801138e:	f101 0048 	addhi.w	r0, r1, #72	; 0x48
 8011392:	2000      	movls	r0, #0
 8011394:	4770      	bx	lr
 8011396:	bf00      	nop

08011398 <uxr_output_streams_confirmed>:
 8011398:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801139c:	b183      	cbz	r3, 80113c0 <uxr_output_streams_confirmed+0x28>
 801139e:	b570      	push	{r4, r5, r6, lr}
 80113a0:	4606      	mov	r6, r0
 80113a2:	f100 0518 	add.w	r5, r0, #24
 80113a6:	2400      	movs	r4, #0
 80113a8:	e001      	b.n	80113ae <uxr_output_streams_confirmed+0x16>
 80113aa:	3528      	adds	r5, #40	; 0x28
 80113ac:	b138      	cbz	r0, 80113be <uxr_output_streams_confirmed+0x26>
 80113ae:	4628      	mov	r0, r5
 80113b0:	f005 fc86 	bl	8016cc0 <uxr_is_output_up_to_date>
 80113b4:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 80113b8:	3401      	adds	r4, #1
 80113ba:	42a3      	cmp	r3, r4
 80113bc:	d8f5      	bhi.n	80113aa <uxr_output_streams_confirmed+0x12>
 80113be:	bd70      	pop	{r4, r5, r6, pc}
 80113c0:	2001      	movs	r0, #1
 80113c2:	4770      	bx	lr

080113c4 <uxr_buffer_submessage_header>:
 80113c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113c6:	4604      	mov	r4, r0
 80113c8:	460e      	mov	r6, r1
 80113ca:	2104      	movs	r1, #4
 80113cc:	4615      	mov	r5, r2
 80113ce:	461f      	mov	r7, r3
 80113d0:	f7fe fa6c 	bl	800f8ac <ucdr_align_to>
 80113d4:	2301      	movs	r3, #1
 80113d6:	ea47 0203 	orr.w	r2, r7, r3
 80113da:	4631      	mov	r1, r6
 80113dc:	7523      	strb	r3, [r4, #20]
 80113de:	4620      	mov	r0, r4
 80113e0:	462b      	mov	r3, r5
 80113e2:	f000 fa2b 	bl	801183c <uxr_serialize_submessage_header>
 80113e6:	4620      	mov	r0, r4
 80113e8:	f7fe fa76 	bl	800f8d8 <ucdr_buffer_remaining>
 80113ec:	42a8      	cmp	r0, r5
 80113ee:	bf34      	ite	cc
 80113f0:	2000      	movcc	r0, #0
 80113f2:	2001      	movcs	r0, #1
 80113f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113f6:	bf00      	nop

080113f8 <uxr_read_submessage_header>:
 80113f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113fc:	4604      	mov	r4, r0
 80113fe:	460d      	mov	r5, r1
 8011400:	2104      	movs	r1, #4
 8011402:	4616      	mov	r6, r2
 8011404:	4698      	mov	r8, r3
 8011406:	f7fe fa51 	bl	800f8ac <ucdr_align_to>
 801140a:	4620      	mov	r0, r4
 801140c:	f7fe fa64 	bl	800f8d8 <ucdr_buffer_remaining>
 8011410:	2803      	cmp	r0, #3
 8011412:	bf8c      	ite	hi
 8011414:	2701      	movhi	r7, #1
 8011416:	2700      	movls	r7, #0
 8011418:	d802      	bhi.n	8011420 <uxr_read_submessage_header+0x28>
 801141a:	4638      	mov	r0, r7
 801141c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011420:	4633      	mov	r3, r6
 8011422:	4642      	mov	r2, r8
 8011424:	4620      	mov	r0, r4
 8011426:	4629      	mov	r1, r5
 8011428:	f000 fa1c 	bl	8011864 <uxr_deserialize_submessage_header>
 801142c:	f898 3000 	ldrb.w	r3, [r8]
 8011430:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8011434:	f003 0301 	and.w	r3, r3, #1
 8011438:	f888 2000 	strb.w	r2, [r8]
 801143c:	7523      	strb	r3, [r4, #20]
 801143e:	4638      	mov	r0, r7
 8011440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011444 <uxr_submessage_padding>:
 8011444:	f010 0003 	ands.w	r0, r0, #3
 8011448:	bf18      	it	ne
 801144a:	f1c0 0004 	rsbne	r0, r0, #4
 801144e:	4770      	bx	lr

08011450 <uxr_millis>:
 8011450:	b510      	push	{r4, lr}
 8011452:	b084      	sub	sp, #16
 8011454:	4669      	mov	r1, sp
 8011456:	2001      	movs	r0, #1
 8011458:	f7f1 f9d6 	bl	8002808 <clock_gettime>
 801145c:	e9dd 2400 	ldrd	r2, r4, [sp]
 8011460:	4907      	ldr	r1, [pc, #28]	; (8011480 <uxr_millis+0x30>)
 8011462:	9802      	ldr	r0, [sp, #8]
 8011464:	fba2 2301 	umull	r2, r3, r2, r1
 8011468:	fb01 3304 	mla	r3, r1, r4, r3
 801146c:	4604      	mov	r4, r0
 801146e:	1810      	adds	r0, r2, r0
 8011470:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8011474:	4a03      	ldr	r2, [pc, #12]	; (8011484 <uxr_millis+0x34>)
 8011476:	2300      	movs	r3, #0
 8011478:	f7ef fb38 	bl	8000aec <__aeabi_ldivmod>
 801147c:	b004      	add	sp, #16
 801147e:	bd10      	pop	{r4, pc}
 8011480:	3b9aca00 	.word	0x3b9aca00
 8011484:	000f4240 	.word	0x000f4240

08011488 <uxr_nanos>:
 8011488:	b510      	push	{r4, lr}
 801148a:	b084      	sub	sp, #16
 801148c:	4669      	mov	r1, sp
 801148e:	2001      	movs	r0, #1
 8011490:	f7f1 f9ba 	bl	8002808 <clock_gettime>
 8011494:	e9dd 2400 	ldrd	r2, r4, [sp]
 8011498:	4905      	ldr	r1, [pc, #20]	; (80114b0 <uxr_nanos+0x28>)
 801149a:	9802      	ldr	r0, [sp, #8]
 801149c:	fba2 2301 	umull	r2, r3, r2, r1
 80114a0:	fb01 3304 	mla	r3, r1, r4, r3
 80114a4:	4604      	mov	r4, r0
 80114a6:	1810      	adds	r0, r2, r0
 80114a8:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 80114ac:	b004      	add	sp, #16
 80114ae:	bd10      	pop	{r4, pc}
 80114b0:	3b9aca00 	.word	0x3b9aca00

080114b4 <on_full_output_buffer_fragmented>:
 80114b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114b8:	460c      	mov	r4, r1
 80114ba:	b08a      	sub	sp, #40	; 0x28
 80114bc:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 80114c0:	4606      	mov	r6, r0
 80114c2:	f104 0008 	add.w	r0, r4, #8
 80114c6:	f7ff ff45 	bl	8011354 <uxr_get_output_reliable_stream>
 80114ca:	4605      	mov	r5, r0
 80114cc:	f005 fc02 	bl	8016cd4 <get_available_free_slots>
 80114d0:	b968      	cbnz	r0, 80114ee <on_full_output_buffer_fragmented+0x3a>
 80114d2:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 80114d6:	4620      	mov	r0, r4
 80114d8:	4798      	blx	r3
 80114da:	b918      	cbnz	r0, 80114e4 <on_full_output_buffer_fragmented+0x30>
 80114dc:	2001      	movs	r0, #1
 80114de:	b00a      	add	sp, #40	; 0x28
 80114e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114e4:	4628      	mov	r0, r5
 80114e6:	f005 fbf5 	bl	8016cd4 <get_available_free_slots>
 80114ea:	2800      	cmp	r0, #0
 80114ec:	d0f6      	beq.n	80114dc <on_full_output_buffer_fragmented+0x28>
 80114ee:	8928      	ldrh	r0, [r5, #8]
 80114f0:	89eb      	ldrh	r3, [r5, #14]
 80114f2:	7b2a      	ldrb	r2, [r5, #12]
 80114f4:	fbb3 f1f0 	udiv	r1, r3, r0
 80114f8:	f5c2 427f 	rsb	r2, r2, #65280	; 0xff00
 80114fc:	fb00 3111 	mls	r1, r0, r1, r3
 8011500:	b28b      	uxth	r3, r1
 8011502:	32fc      	adds	r2, #252	; 0xfc
 8011504:	6869      	ldr	r1, [r5, #4]
 8011506:	fbb1 f1f0 	udiv	r1, r1, r0
 801150a:	1f0f      	subs	r7, r1, #4
 801150c:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 8011510:	fb01 f103 	mul.w	r1, r1, r3
 8011514:	443a      	add	r2, r7
 8011516:	682b      	ldr	r3, [r5, #0]
 8011518:	fa1f f882 	uxth.w	r8, r2
 801151c:	3104      	adds	r1, #4
 801151e:	4419      	add	r1, r3
 8011520:	eba0 0008 	sub.w	r0, r0, r8
 8011524:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 8011528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801152c:	9300      	str	r3, [sp, #0]
 801152e:	463a      	mov	r2, r7
 8011530:	2300      	movs	r3, #0
 8011532:	a802      	add	r0, sp, #8
 8011534:	f7fe f98e 	bl	800f854 <ucdr_init_buffer_origin_offset>
 8011538:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 801153c:	f102 0308 	add.w	r3, r2, #8
 8011540:	42bb      	cmp	r3, r7
 8011542:	d927      	bls.n	8011594 <on_full_output_buffer_fragmented+0xe0>
 8011544:	4642      	mov	r2, r8
 8011546:	2300      	movs	r3, #0
 8011548:	210d      	movs	r1, #13
 801154a:	a802      	add	r0, sp, #8
 801154c:	f7ff ff3a 	bl	80113c4 <uxr_buffer_submessage_header>
 8011550:	8928      	ldrh	r0, [r5, #8]
 8011552:	89eb      	ldrh	r3, [r5, #14]
 8011554:	fbb3 f1f0 	udiv	r1, r3, r0
 8011558:	fb00 3111 	mls	r1, r0, r1, r3
 801155c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011560:	b289      	uxth	r1, r1
 8011562:	fbb3 f3f0 	udiv	r3, r3, r0
 8011566:	fb03 f301 	mul.w	r3, r3, r1
 801156a:	50d7      	str	r7, [r2, r3]
 801156c:	89e8      	ldrh	r0, [r5, #14]
 801156e:	2101      	movs	r1, #1
 8011570:	f005 fbd0 	bl	8016d14 <uxr_seq_num_add>
 8011574:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8011578:	81e8      	strh	r0, [r5, #14]
 801157a:	1a52      	subs	r2, r2, r1
 801157c:	4630      	mov	r0, r6
 801157e:	f7fe f97b 	bl	800f878 <ucdr_init_buffer>
 8011582:	4630      	mov	r0, r6
 8011584:	490f      	ldr	r1, [pc, #60]	; (80115c4 <on_full_output_buffer_fragmented+0x110>)
 8011586:	4622      	mov	r2, r4
 8011588:	f7fe f94c 	bl	800f824 <ucdr_set_on_full_buffer_callback>
 801158c:	2000      	movs	r0, #0
 801158e:	b00a      	add	sp, #40	; 0x28
 8011590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011594:	b292      	uxth	r2, r2
 8011596:	2302      	movs	r3, #2
 8011598:	210d      	movs	r1, #13
 801159a:	a802      	add	r0, sp, #8
 801159c:	f7ff ff12 	bl	80113c4 <uxr_buffer_submessage_header>
 80115a0:	8928      	ldrh	r0, [r5, #8]
 80115a2:	89eb      	ldrh	r3, [r5, #14]
 80115a4:	fbb3 f2f0 	udiv	r2, r3, r0
 80115a8:	fb00 3212 	mls	r2, r0, r2, r3
 80115ac:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 80115b0:	686b      	ldr	r3, [r5, #4]
 80115b2:	fbb3 f3f0 	udiv	r3, r3, r0
 80115b6:	b292      	uxth	r2, r2
 80115b8:	6828      	ldr	r0, [r5, #0]
 80115ba:	fb03 f302 	mul.w	r3, r3, r2
 80115be:	3108      	adds	r1, #8
 80115c0:	50c1      	str	r1, [r0, r3]
 80115c2:	e7d3      	b.n	801156c <on_full_output_buffer_fragmented+0xb8>
 80115c4:	080114b5 	.word	0x080114b5

080115c8 <uxr_prepare_output_stream>:
 80115c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115ca:	b087      	sub	sp, #28
 80115cc:	2407      	movs	r4, #7
 80115ce:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80115d0:	9202      	str	r2, [sp, #8]
 80115d2:	2500      	movs	r5, #0
 80115d4:	1d32      	adds	r2, r6, #4
 80115d6:	e9cd 4500 	strd	r4, r5, [sp]
 80115da:	9103      	str	r1, [sp, #12]
 80115dc:	461c      	mov	r4, r3
 80115de:	4606      	mov	r6, r0
 80115e0:	f7ff fc4c 	bl	8010e7c <uxr_prepare_stream_to_write_submessage>
 80115e4:	f080 0201 	eor.w	r2, r0, #1
 80115e8:	b2d2      	uxtb	r2, r2
 80115ea:	75a2      	strb	r2, [r4, #22]
 80115ec:	b112      	cbz	r2, 80115f4 <uxr_prepare_output_stream+0x2c>
 80115ee:	4628      	mov	r0, r5
 80115f0:	b007      	add	sp, #28
 80115f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115f4:	aa05      	add	r2, sp, #20
 80115f6:	9902      	ldr	r1, [sp, #8]
 80115f8:	4630      	mov	r0, r6
 80115fa:	f7ff fd79 	bl	80110f0 <uxr_init_base_object_request>
 80115fe:	a905      	add	r1, sp, #20
 8011600:	4605      	mov	r5, r0
 8011602:	4620      	mov	r0, r4
 8011604:	f001 f872 	bl	80126ec <uxr_serialize_WRITE_DATA_Payload_Data>
 8011608:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801160c:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 8011610:	1a52      	subs	r2, r2, r1
 8011612:	4620      	mov	r0, r4
 8011614:	f7fe f930 	bl	800f878 <ucdr_init_buffer>
 8011618:	4620      	mov	r0, r4
 801161a:	463a      	mov	r2, r7
 801161c:	4631      	mov	r1, r6
 801161e:	f7fe f901 	bl	800f824 <ucdr_set_on_full_buffer_callback>
 8011622:	4628      	mov	r0, r5
 8011624:	b007      	add	sp, #28
 8011626:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011628 <uxr_prepare_output_stream_fragmented>:
 8011628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801162c:	b093      	sub	sp, #76	; 0x4c
 801162e:	4605      	mov	r5, r0
 8011630:	9107      	str	r1, [sp, #28]
 8011632:	3008      	adds	r0, #8
 8011634:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8011638:	9303      	str	r3, [sp, #12]
 801163a:	9206      	str	r2, [sp, #24]
 801163c:	f7ff fe8a 	bl	8011354 <uxr_get_output_reliable_stream>
 8011640:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8011644:	2b01      	cmp	r3, #1
 8011646:	f000 8094 	beq.w	8011772 <uxr_prepare_output_stream_fragmented+0x14a>
 801164a:	4604      	mov	r4, r0
 801164c:	2800      	cmp	r0, #0
 801164e:	f000 8090 	beq.w	8011772 <uxr_prepare_output_stream_fragmented+0x14a>
 8011652:	f005 fb3f 	bl	8016cd4 <get_available_free_slots>
 8011656:	2800      	cmp	r0, #0
 8011658:	f000 8086 	beq.w	8011768 <uxr_prepare_output_stream_fragmented+0x140>
 801165c:	8922      	ldrh	r2, [r4, #8]
 801165e:	89e7      	ldrh	r7, [r4, #14]
 8011660:	fbb7 f8f2 	udiv	r8, r7, r2
 8011664:	e9d4 3100 	ldrd	r3, r1, [r4]
 8011668:	fb02 7818 	mls	r8, r2, r8, r7
 801166c:	fa1f f888 	uxth.w	r8, r8
 8011670:	fbb1 f2f2 	udiv	r2, r1, r2
 8011674:	fb02 f808 	mul.w	r8, r2, r8
 8011678:	f108 0804 	add.w	r8, r8, #4
 801167c:	4498      	add	r8, r3
 801167e:	7b23      	ldrb	r3, [r4, #12]
 8011680:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8011684:	9204      	str	r2, [sp, #16]
 8011686:	4553      	cmp	r3, sl
 8011688:	f1a2 0b04 	sub.w	fp, r2, #4
 801168c:	d37d      	bcc.n	801178a <uxr_prepare_output_stream_fragmented+0x162>
 801168e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8011690:	f8cd a000 	str.w	sl, [sp]
 8011694:	f1ab 0904 	sub.w	r9, fp, #4
 8011698:	eba9 0903 	sub.w	r9, r9, r3
 801169c:	3608      	adds	r6, #8
 801169e:	a80a      	add	r0, sp, #40	; 0x28
 80116a0:	2300      	movs	r3, #0
 80116a2:	465a      	mov	r2, fp
 80116a4:	4641      	mov	r1, r8
 80116a6:	fa1f f989 	uxth.w	r9, r9
 80116aa:	9605      	str	r6, [sp, #20]
 80116ac:	f7fe f8d2 	bl	800f854 <ucdr_init_buffer_origin_offset>
 80116b0:	455e      	cmp	r6, fp
 80116b2:	bf34      	ite	cc
 80116b4:	2302      	movcc	r3, #2
 80116b6:	2300      	movcs	r3, #0
 80116b8:	464a      	mov	r2, r9
 80116ba:	210d      	movs	r1, #13
 80116bc:	a80a      	add	r0, sp, #40	; 0x28
 80116be:	f7ff fe81 	bl	80113c4 <uxr_buffer_submessage_header>
 80116c2:	8920      	ldrh	r0, [r4, #8]
 80116c4:	fbb7 f3f0 	udiv	r3, r7, r0
 80116c8:	e9d4 2100 	ldrd	r2, r1, [r4]
 80116cc:	fb00 7313 	mls	r3, r0, r3, r7
 80116d0:	b29b      	uxth	r3, r3
 80116d2:	fbb1 f1f0 	udiv	r1, r1, r0
 80116d6:	fb03 f301 	mul.w	r3, r3, r1
 80116da:	4638      	mov	r0, r7
 80116dc:	f842 b003 	str.w	fp, [r2, r3]
 80116e0:	2101      	movs	r1, #1
 80116e2:	f005 fb17 	bl	8016d14 <uxr_seq_num_add>
 80116e6:	9b04      	ldr	r3, [sp, #16]
 80116e8:	9e03      	ldr	r6, [sp, #12]
 80116ea:	f1a3 0208 	sub.w	r2, r3, #8
 80116ee:	f10a 0104 	add.w	r1, sl, #4
 80116f2:	4607      	mov	r7, r0
 80116f4:	eba2 020a 	sub.w	r2, r2, sl
 80116f8:	4441      	add	r1, r8
 80116fa:	4630      	mov	r0, r6
 80116fc:	f7fe f8bc 	bl	800f878 <ucdr_init_buffer>
 8011700:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011702:	81e7      	strh	r7, [r4, #14]
 8011704:	1d1a      	adds	r2, r3, #4
 8011706:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801170a:	bf28      	it	cs
 801170c:	2200      	movcs	r2, #0
 801170e:	b292      	uxth	r2, r2
 8011710:	2300      	movs	r3, #0
 8011712:	2107      	movs	r1, #7
 8011714:	4630      	mov	r0, r6
 8011716:	f7ff fe55 	bl	80113c4 <uxr_buffer_submessage_header>
 801171a:	9906      	ldr	r1, [sp, #24]
 801171c:	aa09      	add	r2, sp, #36	; 0x24
 801171e:	4628      	mov	r0, r5
 8011720:	f7ff fce6 	bl	80110f0 <uxr_init_base_object_request>
 8011724:	4604      	mov	r4, r0
 8011726:	b328      	cbz	r0, 8011774 <uxr_prepare_output_stream_fragmented+0x14c>
 8011728:	9e03      	ldr	r6, [sp, #12]
 801172a:	a909      	add	r1, sp, #36	; 0x24
 801172c:	4630      	mov	r0, r6
 801172e:	f000 ffdd 	bl	80126ec <uxr_serialize_WRITE_DATA_Payload_Data>
 8011732:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8011736:	4630      	mov	r0, r6
 8011738:	1a52      	subs	r2, r2, r1
 801173a:	f7fe f89d 	bl	800f878 <ucdr_init_buffer>
 801173e:	9a05      	ldr	r2, [sp, #20]
 8011740:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 8011744:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011746:	9b07      	ldr	r3, [sp, #28]
 8011748:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 801174c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801174e:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
 8011752:	4630      	mov	r0, r6
 8011754:	4919      	ldr	r1, [pc, #100]	; (80117bc <uxr_prepare_output_stream_fragmented+0x194>)
 8011756:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 801175a:	462a      	mov	r2, r5
 801175c:	f7fe f862 	bl	800f824 <ucdr_set_on_full_buffer_callback>
 8011760:	4620      	mov	r0, r4
 8011762:	b013      	add	sp, #76	; 0x4c
 8011764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011768:	991e      	ldr	r1, [sp, #120]	; 0x78
 801176a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801176c:	4628      	mov	r0, r5
 801176e:	4798      	blx	r3
 8011770:	b920      	cbnz	r0, 801177c <uxr_prepare_output_stream_fragmented+0x154>
 8011772:	2400      	movs	r4, #0
 8011774:	4620      	mov	r0, r4
 8011776:	b013      	add	sp, #76	; 0x4c
 8011778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801177c:	4620      	mov	r0, r4
 801177e:	f005 faa9 	bl	8016cd4 <get_available_free_slots>
 8011782:	2800      	cmp	r0, #0
 8011784:	f47f af6a 	bne.w	801165c <uxr_prepare_output_stream_fragmented+0x34>
 8011788:	e7f3      	b.n	8011772 <uxr_prepare_output_stream_fragmented+0x14a>
 801178a:	4638      	mov	r0, r7
 801178c:	2101      	movs	r1, #1
 801178e:	f005 fac1 	bl	8016d14 <uxr_seq_num_add>
 8011792:	8922      	ldrh	r2, [r4, #8]
 8011794:	fbb0 f8f2 	udiv	r8, r0, r2
 8011798:	fb02 0818 	mls	r8, r2, r8, r0
 801179c:	fa1f f888 	uxth.w	r8, r8
 80117a0:	6863      	ldr	r3, [r4, #4]
 80117a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80117a6:	6822      	ldr	r2, [r4, #0]
 80117a8:	fb08 f803 	mul.w	r8, r8, r3
 80117ac:	f108 0804 	add.w	r8, r8, #4
 80117b0:	4490      	add	r8, r2
 80117b2:	7b23      	ldrb	r3, [r4, #12]
 80117b4:	f858 ac04 	ldr.w	sl, [r8, #-4]
 80117b8:	4607      	mov	r7, r0
 80117ba:	e768      	b.n	801168e <uxr_prepare_output_stream_fragmented+0x66>
 80117bc:	080114b5 	.word	0x080114b5

080117c0 <uxr_serialize_message_header>:
 80117c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117c2:	b083      	sub	sp, #12
 80117c4:	4616      	mov	r6, r2
 80117c6:	4604      	mov	r4, r0
 80117c8:	9301      	str	r3, [sp, #4]
 80117ca:	460d      	mov	r5, r1
 80117cc:	9f08      	ldr	r7, [sp, #32]
 80117ce:	f7fd f8a9 	bl	800e924 <ucdr_serialize_uint8_t>
 80117d2:	4631      	mov	r1, r6
 80117d4:	4620      	mov	r0, r4
 80117d6:	f7fd f8a5 	bl	800e924 <ucdr_serialize_uint8_t>
 80117da:	9a01      	ldr	r2, [sp, #4]
 80117dc:	4620      	mov	r0, r4
 80117de:	2101      	movs	r1, #1
 80117e0:	f7fd f94c 	bl	800ea7c <ucdr_serialize_endian_uint16_t>
 80117e4:	062b      	lsls	r3, r5, #24
 80117e6:	d501      	bpl.n	80117ec <uxr_serialize_message_header+0x2c>
 80117e8:	b003      	add	sp, #12
 80117ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117ec:	4639      	mov	r1, r7
 80117ee:	4620      	mov	r0, r4
 80117f0:	2204      	movs	r2, #4
 80117f2:	b003      	add	sp, #12
 80117f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80117f8:	f004 bb6e 	b.w	8015ed8 <ucdr_serialize_array_uint8_t>

080117fc <uxr_deserialize_message_header>:
 80117fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117fe:	b083      	sub	sp, #12
 8011800:	4616      	mov	r6, r2
 8011802:	4604      	mov	r4, r0
 8011804:	9301      	str	r3, [sp, #4]
 8011806:	460d      	mov	r5, r1
 8011808:	9f08      	ldr	r7, [sp, #32]
 801180a:	f7fd f8a1 	bl	800e950 <ucdr_deserialize_uint8_t>
 801180e:	4631      	mov	r1, r6
 8011810:	4620      	mov	r0, r4
 8011812:	f7fd f89d 	bl	800e950 <ucdr_deserialize_uint8_t>
 8011816:	9a01      	ldr	r2, [sp, #4]
 8011818:	4620      	mov	r0, r4
 801181a:	2101      	movs	r1, #1
 801181c:	f7fd fa22 	bl	800ec64 <ucdr_deserialize_endian_uint16_t>
 8011820:	f995 3000 	ldrsb.w	r3, [r5]
 8011824:	2b00      	cmp	r3, #0
 8011826:	da01      	bge.n	801182c <uxr_deserialize_message_header+0x30>
 8011828:	b003      	add	sp, #12
 801182a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801182c:	4639      	mov	r1, r7
 801182e:	4620      	mov	r0, r4
 8011830:	2204      	movs	r2, #4
 8011832:	b003      	add	sp, #12
 8011834:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011838:	f004 bbb2 	b.w	8015fa0 <ucdr_deserialize_array_uint8_t>

0801183c <uxr_serialize_submessage_header>:
 801183c:	b530      	push	{r4, r5, lr}
 801183e:	b083      	sub	sp, #12
 8011840:	4615      	mov	r5, r2
 8011842:	4604      	mov	r4, r0
 8011844:	9301      	str	r3, [sp, #4]
 8011846:	f7fd f86d 	bl	800e924 <ucdr_serialize_uint8_t>
 801184a:	4629      	mov	r1, r5
 801184c:	4620      	mov	r0, r4
 801184e:	f7fd f869 	bl	800e924 <ucdr_serialize_uint8_t>
 8011852:	9a01      	ldr	r2, [sp, #4]
 8011854:	4620      	mov	r0, r4
 8011856:	2101      	movs	r1, #1
 8011858:	b003      	add	sp, #12
 801185a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801185e:	f7fd b90d 	b.w	800ea7c <ucdr_serialize_endian_uint16_t>
 8011862:	bf00      	nop

08011864 <uxr_deserialize_submessage_header>:
 8011864:	b530      	push	{r4, r5, lr}
 8011866:	b083      	sub	sp, #12
 8011868:	4615      	mov	r5, r2
 801186a:	4604      	mov	r4, r0
 801186c:	9301      	str	r3, [sp, #4]
 801186e:	f7fd f86f 	bl	800e950 <ucdr_deserialize_uint8_t>
 8011872:	4629      	mov	r1, r5
 8011874:	4620      	mov	r0, r4
 8011876:	f7fd f86b 	bl	800e950 <ucdr_deserialize_uint8_t>
 801187a:	9a01      	ldr	r2, [sp, #4]
 801187c:	4620      	mov	r0, r4
 801187e:	2101      	movs	r1, #1
 8011880:	b003      	add	sp, #12
 8011882:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011886:	f7fd b9ed 	b.w	800ec64 <ucdr_deserialize_endian_uint16_t>
 801188a:	bf00      	nop

0801188c <uxr_serialize_CLIENT_Representation>:
 801188c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011890:	2204      	movs	r2, #4
 8011892:	460c      	mov	r4, r1
 8011894:	4605      	mov	r5, r0
 8011896:	f004 fb1f 	bl	8015ed8 <ucdr_serialize_array_uint8_t>
 801189a:	1d21      	adds	r1, r4, #4
 801189c:	4607      	mov	r7, r0
 801189e:	2202      	movs	r2, #2
 80118a0:	4628      	mov	r0, r5
 80118a2:	f004 fb19 	bl	8015ed8 <ucdr_serialize_array_uint8_t>
 80118a6:	1da1      	adds	r1, r4, #6
 80118a8:	4007      	ands	r7, r0
 80118aa:	2202      	movs	r2, #2
 80118ac:	4628      	mov	r0, r5
 80118ae:	f004 fb13 	bl	8015ed8 <ucdr_serialize_array_uint8_t>
 80118b2:	fa5f f887 	uxtb.w	r8, r7
 80118b6:	2204      	movs	r2, #4
 80118b8:	4607      	mov	r7, r0
 80118ba:	f104 0108 	add.w	r1, r4, #8
 80118be:	4628      	mov	r0, r5
 80118c0:	f004 fb0a 	bl	8015ed8 <ucdr_serialize_array_uint8_t>
 80118c4:	ea08 0707 	and.w	r7, r8, r7
 80118c8:	7b21      	ldrb	r1, [r4, #12]
 80118ca:	4680      	mov	r8, r0
 80118cc:	4628      	mov	r0, r5
 80118ce:	f7fd f829 	bl	800e924 <ucdr_serialize_uint8_t>
 80118d2:	ea08 0807 	and.w	r8, r8, r7
 80118d6:	7b61      	ldrb	r1, [r4, #13]
 80118d8:	4607      	mov	r7, r0
 80118da:	4628      	mov	r0, r5
 80118dc:	f7fc fff2 	bl	800e8c4 <ucdr_serialize_bool>
 80118e0:	7b63      	ldrb	r3, [r4, #13]
 80118e2:	ea08 0707 	and.w	r7, r8, r7
 80118e6:	ea07 0600 	and.w	r6, r7, r0
 80118ea:	b933      	cbnz	r3, 80118fa <uxr_serialize_CLIENT_Representation+0x6e>
 80118ec:	8ba1      	ldrh	r1, [r4, #28]
 80118ee:	4628      	mov	r0, r5
 80118f0:	f7fd f844 	bl	800e97c <ucdr_serialize_uint16_t>
 80118f4:	4030      	ands	r0, r6
 80118f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118fa:	6921      	ldr	r1, [r4, #16]
 80118fc:	4628      	mov	r0, r5
 80118fe:	f7fd fa27 	bl	800ed50 <ucdr_serialize_uint32_t>
 8011902:	6923      	ldr	r3, [r4, #16]
 8011904:	b1cb      	cbz	r3, 801193a <uxr_serialize_CLIENT_Representation+0xae>
 8011906:	b1d0      	cbz	r0, 801193e <uxr_serialize_CLIENT_Representation+0xb2>
 8011908:	46a0      	mov	r8, r4
 801190a:	f04f 0900 	mov.w	r9, #0
 801190e:	e002      	b.n	8011916 <uxr_serialize_CLIENT_Representation+0x8a>
 8011910:	f108 0808 	add.w	r8, r8, #8
 8011914:	b198      	cbz	r0, 801193e <uxr_serialize_CLIENT_Representation+0xb2>
 8011916:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801191a:	4628      	mov	r0, r5
 801191c:	f004 fbfc 	bl	8016118 <ucdr_serialize_string>
 8011920:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8011924:	4607      	mov	r7, r0
 8011926:	4628      	mov	r0, r5
 8011928:	f004 fbf6 	bl	8016118 <ucdr_serialize_string>
 801192c:	6923      	ldr	r3, [r4, #16]
 801192e:	f109 0901 	add.w	r9, r9, #1
 8011932:	4038      	ands	r0, r7
 8011934:	4599      	cmp	r9, r3
 8011936:	b2c0      	uxtb	r0, r0
 8011938:	d3ea      	bcc.n	8011910 <uxr_serialize_CLIENT_Representation+0x84>
 801193a:	4006      	ands	r6, r0
 801193c:	e7d6      	b.n	80118ec <uxr_serialize_CLIENT_Representation+0x60>
 801193e:	2600      	movs	r6, #0
 8011940:	e7d4      	b.n	80118ec <uxr_serialize_CLIENT_Representation+0x60>
 8011942:	bf00      	nop

08011944 <uxr_deserialize_CLIENT_Representation>:
 8011944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011948:	2204      	movs	r2, #4
 801194a:	460c      	mov	r4, r1
 801194c:	4605      	mov	r5, r0
 801194e:	f004 fb27 	bl	8015fa0 <ucdr_deserialize_array_uint8_t>
 8011952:	1d21      	adds	r1, r4, #4
 8011954:	4607      	mov	r7, r0
 8011956:	2202      	movs	r2, #2
 8011958:	4628      	mov	r0, r5
 801195a:	f004 fb21 	bl	8015fa0 <ucdr_deserialize_array_uint8_t>
 801195e:	1da1      	adds	r1, r4, #6
 8011960:	4007      	ands	r7, r0
 8011962:	2202      	movs	r2, #2
 8011964:	4628      	mov	r0, r5
 8011966:	f004 fb1b 	bl	8015fa0 <ucdr_deserialize_array_uint8_t>
 801196a:	fa5f f887 	uxtb.w	r8, r7
 801196e:	2204      	movs	r2, #4
 8011970:	4607      	mov	r7, r0
 8011972:	f104 0108 	add.w	r1, r4, #8
 8011976:	4628      	mov	r0, r5
 8011978:	f004 fb12 	bl	8015fa0 <ucdr_deserialize_array_uint8_t>
 801197c:	ea08 0707 	and.w	r7, r8, r7
 8011980:	f104 010c 	add.w	r1, r4, #12
 8011984:	4680      	mov	r8, r0
 8011986:	4628      	mov	r0, r5
 8011988:	f7fc ffe2 	bl	800e950 <ucdr_deserialize_uint8_t>
 801198c:	ea08 0807 	and.w	r8, r8, r7
 8011990:	f104 010d 	add.w	r1, r4, #13
 8011994:	4607      	mov	r7, r0
 8011996:	4628      	mov	r0, r5
 8011998:	f7fc ffaa 	bl	800e8f0 <ucdr_deserialize_bool>
 801199c:	7b63      	ldrb	r3, [r4, #13]
 801199e:	ea08 0707 	and.w	r7, r8, r7
 80119a2:	ea07 0600 	and.w	r6, r7, r0
 80119a6:	b93b      	cbnz	r3, 80119b8 <uxr_deserialize_CLIENT_Representation+0x74>
 80119a8:	f104 011c 	add.w	r1, r4, #28
 80119ac:	4628      	mov	r0, r5
 80119ae:	f7fd f8e5 	bl	800eb7c <ucdr_deserialize_uint16_t>
 80119b2:	4030      	ands	r0, r6
 80119b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119b8:	f104 0110 	add.w	r1, r4, #16
 80119bc:	4628      	mov	r0, r5
 80119be:	f7fd faf7 	bl	800efb0 <ucdr_deserialize_uint32_t>
 80119c2:	6923      	ldr	r3, [r4, #16]
 80119c4:	2b01      	cmp	r3, #1
 80119c6:	d903      	bls.n	80119d0 <uxr_deserialize_CLIENT_Representation+0x8c>
 80119c8:	2301      	movs	r3, #1
 80119ca:	75ab      	strb	r3, [r5, #22]
 80119cc:	2600      	movs	r6, #0
 80119ce:	e7eb      	b.n	80119a8 <uxr_deserialize_CLIENT_Representation+0x64>
 80119d0:	b1fb      	cbz	r3, 8011a12 <uxr_deserialize_CLIENT_Representation+0xce>
 80119d2:	2800      	cmp	r0, #0
 80119d4:	d0fa      	beq.n	80119cc <uxr_deserialize_CLIENT_Representation+0x88>
 80119d6:	46a0      	mov	r8, r4
 80119d8:	f04f 0900 	mov.w	r9, #0
 80119dc:	e003      	b.n	80119e6 <uxr_deserialize_CLIENT_Representation+0xa2>
 80119de:	f108 0808 	add.w	r8, r8, #8
 80119e2:	2800      	cmp	r0, #0
 80119e4:	d0f2      	beq.n	80119cc <uxr_deserialize_CLIENT_Representation+0x88>
 80119e6:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80119ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80119ee:	4628      	mov	r0, r5
 80119f0:	f004 fba2 	bl	8016138 <ucdr_deserialize_string>
 80119f4:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80119f8:	4607      	mov	r7, r0
 80119fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80119fe:	4628      	mov	r0, r5
 8011a00:	f004 fb9a 	bl	8016138 <ucdr_deserialize_string>
 8011a04:	6923      	ldr	r3, [r4, #16]
 8011a06:	f109 0901 	add.w	r9, r9, #1
 8011a0a:	4038      	ands	r0, r7
 8011a0c:	4599      	cmp	r9, r3
 8011a0e:	b2c0      	uxtb	r0, r0
 8011a10:	d3e5      	bcc.n	80119de <uxr_deserialize_CLIENT_Representation+0x9a>
 8011a12:	4006      	ands	r6, r0
 8011a14:	e7c8      	b.n	80119a8 <uxr_deserialize_CLIENT_Representation+0x64>
 8011a16:	bf00      	nop

08011a18 <uxr_serialize_AGENT_Representation>:
 8011a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a1c:	2204      	movs	r2, #4
 8011a1e:	460c      	mov	r4, r1
 8011a20:	4605      	mov	r5, r0
 8011a22:	f004 fa59 	bl	8015ed8 <ucdr_serialize_array_uint8_t>
 8011a26:	1d21      	adds	r1, r4, #4
 8011a28:	4606      	mov	r6, r0
 8011a2a:	2202      	movs	r2, #2
 8011a2c:	4628      	mov	r0, r5
 8011a2e:	f004 fa53 	bl	8015ed8 <ucdr_serialize_array_uint8_t>
 8011a32:	1da1      	adds	r1, r4, #6
 8011a34:	4006      	ands	r6, r0
 8011a36:	2202      	movs	r2, #2
 8011a38:	4628      	mov	r0, r5
 8011a3a:	f004 fa4d 	bl	8015ed8 <ucdr_serialize_array_uint8_t>
 8011a3e:	b2f6      	uxtb	r6, r6
 8011a40:	4603      	mov	r3, r0
 8011a42:	7a21      	ldrb	r1, [r4, #8]
 8011a44:	4628      	mov	r0, r5
 8011a46:	401e      	ands	r6, r3
 8011a48:	f7fc ff3c 	bl	800e8c4 <ucdr_serialize_bool>
 8011a4c:	7a23      	ldrb	r3, [r4, #8]
 8011a4e:	ea00 0706 	and.w	r7, r0, r6
 8011a52:	b913      	cbnz	r3, 8011a5a <uxr_serialize_AGENT_Representation+0x42>
 8011a54:	4638      	mov	r0, r7
 8011a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a5a:	68e1      	ldr	r1, [r4, #12]
 8011a5c:	4628      	mov	r0, r5
 8011a5e:	f7fd f977 	bl	800ed50 <ucdr_serialize_uint32_t>
 8011a62:	68e3      	ldr	r3, [r4, #12]
 8011a64:	b313      	cbz	r3, 8011aac <uxr_serialize_AGENT_Representation+0x94>
 8011a66:	b1e8      	cbz	r0, 8011aa4 <uxr_serialize_AGENT_Representation+0x8c>
 8011a68:	46a0      	mov	r8, r4
 8011a6a:	f04f 0900 	mov.w	r9, #0
 8011a6e:	e002      	b.n	8011a76 <uxr_serialize_AGENT_Representation+0x5e>
 8011a70:	f108 0808 	add.w	r8, r8, #8
 8011a74:	b1b3      	cbz	r3, 8011aa4 <uxr_serialize_AGENT_Representation+0x8c>
 8011a76:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011a7a:	4628      	mov	r0, r5
 8011a7c:	f004 fb4c 	bl	8016118 <ucdr_serialize_string>
 8011a80:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011a84:	4606      	mov	r6, r0
 8011a86:	4628      	mov	r0, r5
 8011a88:	f004 fb46 	bl	8016118 <ucdr_serialize_string>
 8011a8c:	68e2      	ldr	r2, [r4, #12]
 8011a8e:	f109 0901 	add.w	r9, r9, #1
 8011a92:	ea06 0300 	and.w	r3, r6, r0
 8011a96:	4591      	cmp	r9, r2
 8011a98:	b2db      	uxtb	r3, r3
 8011a9a:	d3e9      	bcc.n	8011a70 <uxr_serialize_AGENT_Representation+0x58>
 8011a9c:	401f      	ands	r7, r3
 8011a9e:	4638      	mov	r0, r7
 8011aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011aa4:	2700      	movs	r7, #0
 8011aa6:	4638      	mov	r0, r7
 8011aa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011aac:	4007      	ands	r7, r0
 8011aae:	e7d1      	b.n	8011a54 <uxr_serialize_AGENT_Representation+0x3c>

08011ab0 <uxr_serialize_ObjectVariant.part.0>:
 8011ab0:	b570      	push	{r4, r5, r6, lr}
 8011ab2:	780b      	ldrb	r3, [r1, #0]
 8011ab4:	3b01      	subs	r3, #1
 8011ab6:	460c      	mov	r4, r1
 8011ab8:	4605      	mov	r5, r0
 8011aba:	2b0d      	cmp	r3, #13
 8011abc:	d869      	bhi.n	8011b92 <uxr_serialize_ObjectVariant.part.0+0xe2>
 8011abe:	e8df f003 	tbb	[pc, r3]
 8011ac2:	074a      	.short	0x074a
 8011ac4:	07073030 	.word	0x07073030
 8011ac8:	21680707 	.word	0x21680707
 8011acc:	45632121 	.word	0x45632121
 8011ad0:	7909      	ldrb	r1, [r1, #4]
 8011ad2:	f7fc ff27 	bl	800e924 <ucdr_serialize_uint8_t>
 8011ad6:	4606      	mov	r6, r0
 8011ad8:	b158      	cbz	r0, 8011af2 <uxr_serialize_ObjectVariant.part.0+0x42>
 8011ada:	7923      	ldrb	r3, [r4, #4]
 8011adc:	2b02      	cmp	r3, #2
 8011ade:	d003      	beq.n	8011ae8 <uxr_serialize_ObjectVariant.part.0+0x38>
 8011ae0:	2b03      	cmp	r3, #3
 8011ae2:	d029      	beq.n	8011b38 <uxr_serialize_ObjectVariant.part.0+0x88>
 8011ae4:	2b01      	cmp	r3, #1
 8011ae6:	d104      	bne.n	8011af2 <uxr_serialize_ObjectVariant.part.0+0x42>
 8011ae8:	68a1      	ldr	r1, [r4, #8]
 8011aea:	4628      	mov	r0, r5
 8011aec:	f004 fb14 	bl	8016118 <ucdr_serialize_string>
 8011af0:	4606      	mov	r6, r0
 8011af2:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8011af6:	4628      	mov	r0, r5
 8011af8:	2202      	movs	r2, #2
 8011afa:	f004 f9ed 	bl	8015ed8 <ucdr_serialize_array_uint8_t>
 8011afe:	4030      	ands	r0, r6
 8011b00:	b2c0      	uxtb	r0, r0
 8011b02:	bd70      	pop	{r4, r5, r6, pc}
 8011b04:	7909      	ldrb	r1, [r1, #4]
 8011b06:	f7fc ff0d 	bl	800e924 <ucdr_serialize_uint8_t>
 8011b0a:	b1e8      	cbz	r0, 8011b48 <uxr_serialize_ObjectVariant.part.0+0x98>
 8011b0c:	7923      	ldrb	r3, [r4, #4]
 8011b0e:	2b01      	cmp	r3, #1
 8011b10:	d001      	beq.n	8011b16 <uxr_serialize_ObjectVariant.part.0+0x66>
 8011b12:	2b02      	cmp	r3, #2
 8011b14:	d13d      	bne.n	8011b92 <uxr_serialize_ObjectVariant.part.0+0xe2>
 8011b16:	68a1      	ldr	r1, [r4, #8]
 8011b18:	4628      	mov	r0, r5
 8011b1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b1e:	f004 bafb 	b.w	8016118 <ucdr_serialize_string>
 8011b22:	7909      	ldrb	r1, [r1, #4]
 8011b24:	f7fc fefe 	bl	800e924 <ucdr_serialize_uint8_t>
 8011b28:	4606      	mov	r6, r0
 8011b2a:	2800      	cmp	r0, #0
 8011b2c:	d0e1      	beq.n	8011af2 <uxr_serialize_ObjectVariant.part.0+0x42>
 8011b2e:	7923      	ldrb	r3, [r4, #4]
 8011b30:	2b02      	cmp	r3, #2
 8011b32:	d0d9      	beq.n	8011ae8 <uxr_serialize_ObjectVariant.part.0+0x38>
 8011b34:	2b03      	cmp	r3, #3
 8011b36:	d1dc      	bne.n	8011af2 <uxr_serialize_ObjectVariant.part.0+0x42>
 8011b38:	68a2      	ldr	r2, [r4, #8]
 8011b3a:	f104 010c 	add.w	r1, r4, #12
 8011b3e:	4628      	mov	r0, r5
 8011b40:	f004 fabe 	bl	80160c0 <ucdr_serialize_sequence_uint8_t>
 8011b44:	4606      	mov	r6, r0
 8011b46:	e7d4      	b.n	8011af2 <uxr_serialize_ObjectVariant.part.0+0x42>
 8011b48:	2000      	movs	r0, #0
 8011b4a:	bd70      	pop	{r4, r5, r6, pc}
 8011b4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b50:	3104      	adds	r1, #4
 8011b52:	f7ff be9b 	b.w	801188c <uxr_serialize_CLIENT_Representation>
 8011b56:	7909      	ldrb	r1, [r1, #4]
 8011b58:	f7fc fee4 	bl	800e924 <ucdr_serialize_uint8_t>
 8011b5c:	4606      	mov	r6, r0
 8011b5e:	b158      	cbz	r0, 8011b78 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8011b60:	7923      	ldrb	r3, [r4, #4]
 8011b62:	2b02      	cmp	r3, #2
 8011b64:	d003      	beq.n	8011b6e <uxr_serialize_ObjectVariant.part.0+0xbe>
 8011b66:	2b03      	cmp	r3, #3
 8011b68:	d015      	beq.n	8011b96 <uxr_serialize_ObjectVariant.part.0+0xe6>
 8011b6a:	2b01      	cmp	r3, #1
 8011b6c:	d104      	bne.n	8011b78 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8011b6e:	68a1      	ldr	r1, [r4, #8]
 8011b70:	4628      	mov	r0, r5
 8011b72:	f004 fad1 	bl	8016118 <ucdr_serialize_string>
 8011b76:	4606      	mov	r6, r0
 8011b78:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8011b7c:	4628      	mov	r0, r5
 8011b7e:	f7fd fc0d 	bl	800f39c <ucdr_serialize_int16_t>
 8011b82:	4030      	ands	r0, r6
 8011b84:	b2c0      	uxtb	r0, r0
 8011b86:	bd70      	pop	{r4, r5, r6, pc}
 8011b88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b8c:	3104      	adds	r1, #4
 8011b8e:	f7ff bf43 	b.w	8011a18 <uxr_serialize_AGENT_Representation>
 8011b92:	2001      	movs	r0, #1
 8011b94:	bd70      	pop	{r4, r5, r6, pc}
 8011b96:	68a2      	ldr	r2, [r4, #8]
 8011b98:	f104 010c 	add.w	r1, r4, #12
 8011b9c:	4628      	mov	r0, r5
 8011b9e:	f004 fa8f 	bl	80160c0 <ucdr_serialize_sequence_uint8_t>
 8011ba2:	4606      	mov	r6, r0
 8011ba4:	e7e8      	b.n	8011b78 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8011ba6:	bf00      	nop

08011ba8 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8011ba8:	b570      	push	{r4, r5, r6, lr}
 8011baa:	460d      	mov	r5, r1
 8011bac:	7809      	ldrb	r1, [r1, #0]
 8011bae:	4606      	mov	r6, r0
 8011bb0:	f7fc fe88 	bl	800e8c4 <ucdr_serialize_bool>
 8011bb4:	782b      	ldrb	r3, [r5, #0]
 8011bb6:	4604      	mov	r4, r0
 8011bb8:	b94b      	cbnz	r3, 8011bce <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8011bba:	7a29      	ldrb	r1, [r5, #8]
 8011bbc:	4630      	mov	r0, r6
 8011bbe:	f7fc fe81 	bl	800e8c4 <ucdr_serialize_bool>
 8011bc2:	7a2b      	ldrb	r3, [r5, #8]
 8011bc4:	4004      	ands	r4, r0
 8011bc6:	b2e4      	uxtb	r4, r4
 8011bc8:	b943      	cbnz	r3, 8011bdc <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8011bca:	4620      	mov	r0, r4
 8011bcc:	bd70      	pop	{r4, r5, r6, pc}
 8011bce:	6869      	ldr	r1, [r5, #4]
 8011bd0:	4630      	mov	r0, r6
 8011bd2:	f004 faa1 	bl	8016118 <ucdr_serialize_string>
 8011bd6:	4004      	ands	r4, r0
 8011bd8:	b2e4      	uxtb	r4, r4
 8011bda:	e7ee      	b.n	8011bba <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8011bdc:	68e9      	ldr	r1, [r5, #12]
 8011bde:	4630      	mov	r0, r6
 8011be0:	f004 fa9a 	bl	8016118 <ucdr_serialize_string>
 8011be4:	4004      	ands	r4, r0
 8011be6:	4620      	mov	r0, r4
 8011be8:	bd70      	pop	{r4, r5, r6, pc}
 8011bea:	bf00      	nop

08011bec <uxr_serialize_OBJK_Topic_Binary>:
 8011bec:	b570      	push	{r4, r5, r6, lr}
 8011bee:	460d      	mov	r5, r1
 8011bf0:	6809      	ldr	r1, [r1, #0]
 8011bf2:	4606      	mov	r6, r0
 8011bf4:	f004 fa90 	bl	8016118 <ucdr_serialize_string>
 8011bf8:	7929      	ldrb	r1, [r5, #4]
 8011bfa:	4604      	mov	r4, r0
 8011bfc:	4630      	mov	r0, r6
 8011bfe:	f7fc fe61 	bl	800e8c4 <ucdr_serialize_bool>
 8011c02:	792b      	ldrb	r3, [r5, #4]
 8011c04:	4004      	ands	r4, r0
 8011c06:	b2e4      	uxtb	r4, r4
 8011c08:	b943      	cbnz	r3, 8011c1c <uxr_serialize_OBJK_Topic_Binary+0x30>
 8011c0a:	7b29      	ldrb	r1, [r5, #12]
 8011c0c:	4630      	mov	r0, r6
 8011c0e:	f7fc fe59 	bl	800e8c4 <ucdr_serialize_bool>
 8011c12:	7b2b      	ldrb	r3, [r5, #12]
 8011c14:	4004      	ands	r4, r0
 8011c16:	b93b      	cbnz	r3, 8011c28 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8011c18:	4620      	mov	r0, r4
 8011c1a:	bd70      	pop	{r4, r5, r6, pc}
 8011c1c:	68a9      	ldr	r1, [r5, #8]
 8011c1e:	4630      	mov	r0, r6
 8011c20:	f004 fa7a 	bl	8016118 <ucdr_serialize_string>
 8011c24:	4004      	ands	r4, r0
 8011c26:	e7f0      	b.n	8011c0a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8011c28:	6929      	ldr	r1, [r5, #16]
 8011c2a:	4630      	mov	r0, r6
 8011c2c:	f004 fa74 	bl	8016118 <ucdr_serialize_string>
 8011c30:	4004      	ands	r4, r0
 8011c32:	b2e4      	uxtb	r4, r4
 8011c34:	4620      	mov	r0, r4
 8011c36:	bd70      	pop	{r4, r5, r6, pc}

08011c38 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8011c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c3c:	460c      	mov	r4, r1
 8011c3e:	7809      	ldrb	r1, [r1, #0]
 8011c40:	4606      	mov	r6, r0
 8011c42:	f7fc fe3f 	bl	800e8c4 <ucdr_serialize_bool>
 8011c46:	7823      	ldrb	r3, [r4, #0]
 8011c48:	4605      	mov	r5, r0
 8011c4a:	b96b      	cbnz	r3, 8011c68 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8011c4c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8011c50:	4630      	mov	r0, r6
 8011c52:	f7fc fe37 	bl	800e8c4 <ucdr_serialize_bool>
 8011c56:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8011c5a:	4005      	ands	r5, r0
 8011c5c:	b2ed      	uxtb	r5, r5
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d169      	bne.n	8011d36 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8011c62:	4628      	mov	r0, r5
 8011c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c68:	6861      	ldr	r1, [r4, #4]
 8011c6a:	4630      	mov	r0, r6
 8011c6c:	f7fd f870 	bl	800ed50 <ucdr_serialize_uint32_t>
 8011c70:	6863      	ldr	r3, [r4, #4]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d06b      	beq.n	8011d4e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8011c76:	2800      	cmp	r0, #0
 8011c78:	d067      	beq.n	8011d4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011c7a:	68a1      	ldr	r1, [r4, #8]
 8011c7c:	4630      	mov	r0, r6
 8011c7e:	f004 fa4b 	bl	8016118 <ucdr_serialize_string>
 8011c82:	6863      	ldr	r3, [r4, #4]
 8011c84:	2b01      	cmp	r3, #1
 8011c86:	d953      	bls.n	8011d30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011c88:	2800      	cmp	r0, #0
 8011c8a:	d05e      	beq.n	8011d4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011c8c:	68e1      	ldr	r1, [r4, #12]
 8011c8e:	4630      	mov	r0, r6
 8011c90:	f004 fa42 	bl	8016118 <ucdr_serialize_string>
 8011c94:	6863      	ldr	r3, [r4, #4]
 8011c96:	2b02      	cmp	r3, #2
 8011c98:	d94a      	bls.n	8011d30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011c9a:	2800      	cmp	r0, #0
 8011c9c:	d055      	beq.n	8011d4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011c9e:	6921      	ldr	r1, [r4, #16]
 8011ca0:	4630      	mov	r0, r6
 8011ca2:	f004 fa39 	bl	8016118 <ucdr_serialize_string>
 8011ca6:	6863      	ldr	r3, [r4, #4]
 8011ca8:	2b03      	cmp	r3, #3
 8011caa:	d941      	bls.n	8011d30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011cac:	2800      	cmp	r0, #0
 8011cae:	d04c      	beq.n	8011d4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011cb0:	6961      	ldr	r1, [r4, #20]
 8011cb2:	4630      	mov	r0, r6
 8011cb4:	f004 fa30 	bl	8016118 <ucdr_serialize_string>
 8011cb8:	6863      	ldr	r3, [r4, #4]
 8011cba:	2b04      	cmp	r3, #4
 8011cbc:	d938      	bls.n	8011d30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011cbe:	2800      	cmp	r0, #0
 8011cc0:	d043      	beq.n	8011d4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011cc2:	69a1      	ldr	r1, [r4, #24]
 8011cc4:	4630      	mov	r0, r6
 8011cc6:	f004 fa27 	bl	8016118 <ucdr_serialize_string>
 8011cca:	6863      	ldr	r3, [r4, #4]
 8011ccc:	2b05      	cmp	r3, #5
 8011cce:	d92f      	bls.n	8011d30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011cd0:	2800      	cmp	r0, #0
 8011cd2:	d03a      	beq.n	8011d4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011cd4:	69e1      	ldr	r1, [r4, #28]
 8011cd6:	4630      	mov	r0, r6
 8011cd8:	f004 fa1e 	bl	8016118 <ucdr_serialize_string>
 8011cdc:	6863      	ldr	r3, [r4, #4]
 8011cde:	2b06      	cmp	r3, #6
 8011ce0:	d926      	bls.n	8011d30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011ce2:	b390      	cbz	r0, 8011d4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011ce4:	6a21      	ldr	r1, [r4, #32]
 8011ce6:	4630      	mov	r0, r6
 8011ce8:	f004 fa16 	bl	8016118 <ucdr_serialize_string>
 8011cec:	6863      	ldr	r3, [r4, #4]
 8011cee:	2b07      	cmp	r3, #7
 8011cf0:	d91e      	bls.n	8011d30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011cf2:	b350      	cbz	r0, 8011d4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011cf4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011cf6:	4630      	mov	r0, r6
 8011cf8:	f004 fa0e 	bl	8016118 <ucdr_serialize_string>
 8011cfc:	6863      	ldr	r3, [r4, #4]
 8011cfe:	2b08      	cmp	r3, #8
 8011d00:	d916      	bls.n	8011d30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011d02:	b310      	cbz	r0, 8011d4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011d04:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8011d06:	4630      	mov	r0, r6
 8011d08:	f004 fa06 	bl	8016118 <ucdr_serialize_string>
 8011d0c:	6863      	ldr	r3, [r4, #4]
 8011d0e:	2b09      	cmp	r3, #9
 8011d10:	d90e      	bls.n	8011d30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011d12:	b1d0      	cbz	r0, 8011d4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011d14:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8011d18:	2709      	movs	r7, #9
 8011d1a:	e000      	b.n	8011d1e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8011d1c:	b1a8      	cbz	r0, 8011d4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011d1e:	f858 1b04 	ldr.w	r1, [r8], #4
 8011d22:	4630      	mov	r0, r6
 8011d24:	f004 f9f8 	bl	8016118 <ucdr_serialize_string>
 8011d28:	6862      	ldr	r2, [r4, #4]
 8011d2a:	3701      	adds	r7, #1
 8011d2c:	4297      	cmp	r7, r2
 8011d2e:	d3f5      	bcc.n	8011d1c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8011d30:	4005      	ands	r5, r0
 8011d32:	b2ed      	uxtb	r5, r5
 8011d34:	e78a      	b.n	8011c4c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011d36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011d38:	4630      	mov	r0, r6
 8011d3a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8011d3e:	f004 f9bf 	bl	80160c0 <ucdr_serialize_sequence_uint8_t>
 8011d42:	4005      	ands	r5, r0
 8011d44:	4628      	mov	r0, r5
 8011d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d4a:	2500      	movs	r5, #0
 8011d4c:	e77e      	b.n	8011c4c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011d4e:	4028      	ands	r0, r5
 8011d50:	b2c5      	uxtb	r5, r0
 8011d52:	e77b      	b.n	8011c4c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08011d54 <uxr_serialize_OBJK_Publisher_Binary>:
 8011d54:	b570      	push	{r4, r5, r6, lr}
 8011d56:	460d      	mov	r5, r1
 8011d58:	7809      	ldrb	r1, [r1, #0]
 8011d5a:	4606      	mov	r6, r0
 8011d5c:	f7fc fdb2 	bl	800e8c4 <ucdr_serialize_bool>
 8011d60:	782b      	ldrb	r3, [r5, #0]
 8011d62:	4604      	mov	r4, r0
 8011d64:	b94b      	cbnz	r3, 8011d7a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8011d66:	7a29      	ldrb	r1, [r5, #8]
 8011d68:	4630      	mov	r0, r6
 8011d6a:	f7fc fdab 	bl	800e8c4 <ucdr_serialize_bool>
 8011d6e:	7a2b      	ldrb	r3, [r5, #8]
 8011d70:	4004      	ands	r4, r0
 8011d72:	b2e4      	uxtb	r4, r4
 8011d74:	b943      	cbnz	r3, 8011d88 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8011d76:	4620      	mov	r0, r4
 8011d78:	bd70      	pop	{r4, r5, r6, pc}
 8011d7a:	6869      	ldr	r1, [r5, #4]
 8011d7c:	4630      	mov	r0, r6
 8011d7e:	f004 f9cb 	bl	8016118 <ucdr_serialize_string>
 8011d82:	4004      	ands	r4, r0
 8011d84:	b2e4      	uxtb	r4, r4
 8011d86:	e7ee      	b.n	8011d66 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8011d88:	f105 010c 	add.w	r1, r5, #12
 8011d8c:	4630      	mov	r0, r6
 8011d8e:	f7ff ff53 	bl	8011c38 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8011d92:	4004      	ands	r4, r0
 8011d94:	4620      	mov	r0, r4
 8011d96:	bd70      	pop	{r4, r5, r6, pc}

08011d98 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8011d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d9c:	460c      	mov	r4, r1
 8011d9e:	7809      	ldrb	r1, [r1, #0]
 8011da0:	4606      	mov	r6, r0
 8011da2:	f7fc fd8f 	bl	800e8c4 <ucdr_serialize_bool>
 8011da6:	7823      	ldrb	r3, [r4, #0]
 8011da8:	4605      	mov	r5, r0
 8011daa:	b96b      	cbnz	r3, 8011dc8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8011dac:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8011db0:	4630      	mov	r0, r6
 8011db2:	f7fc fd87 	bl	800e8c4 <ucdr_serialize_bool>
 8011db6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8011dba:	4005      	ands	r5, r0
 8011dbc:	b2ed      	uxtb	r5, r5
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d169      	bne.n	8011e96 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8011dc2:	4628      	mov	r0, r5
 8011dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dc8:	6861      	ldr	r1, [r4, #4]
 8011dca:	4630      	mov	r0, r6
 8011dcc:	f7fc ffc0 	bl	800ed50 <ucdr_serialize_uint32_t>
 8011dd0:	6863      	ldr	r3, [r4, #4]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d06b      	beq.n	8011eae <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8011dd6:	2800      	cmp	r0, #0
 8011dd8:	d067      	beq.n	8011eaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011dda:	68a1      	ldr	r1, [r4, #8]
 8011ddc:	4630      	mov	r0, r6
 8011dde:	f004 f99b 	bl	8016118 <ucdr_serialize_string>
 8011de2:	6863      	ldr	r3, [r4, #4]
 8011de4:	2b01      	cmp	r3, #1
 8011de6:	d953      	bls.n	8011e90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011de8:	2800      	cmp	r0, #0
 8011dea:	d05e      	beq.n	8011eaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011dec:	68e1      	ldr	r1, [r4, #12]
 8011dee:	4630      	mov	r0, r6
 8011df0:	f004 f992 	bl	8016118 <ucdr_serialize_string>
 8011df4:	6863      	ldr	r3, [r4, #4]
 8011df6:	2b02      	cmp	r3, #2
 8011df8:	d94a      	bls.n	8011e90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011dfa:	2800      	cmp	r0, #0
 8011dfc:	d055      	beq.n	8011eaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011dfe:	6921      	ldr	r1, [r4, #16]
 8011e00:	4630      	mov	r0, r6
 8011e02:	f004 f989 	bl	8016118 <ucdr_serialize_string>
 8011e06:	6863      	ldr	r3, [r4, #4]
 8011e08:	2b03      	cmp	r3, #3
 8011e0a:	d941      	bls.n	8011e90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011e0c:	2800      	cmp	r0, #0
 8011e0e:	d04c      	beq.n	8011eaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011e10:	6961      	ldr	r1, [r4, #20]
 8011e12:	4630      	mov	r0, r6
 8011e14:	f004 f980 	bl	8016118 <ucdr_serialize_string>
 8011e18:	6863      	ldr	r3, [r4, #4]
 8011e1a:	2b04      	cmp	r3, #4
 8011e1c:	d938      	bls.n	8011e90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011e1e:	2800      	cmp	r0, #0
 8011e20:	d043      	beq.n	8011eaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011e22:	69a1      	ldr	r1, [r4, #24]
 8011e24:	4630      	mov	r0, r6
 8011e26:	f004 f977 	bl	8016118 <ucdr_serialize_string>
 8011e2a:	6863      	ldr	r3, [r4, #4]
 8011e2c:	2b05      	cmp	r3, #5
 8011e2e:	d92f      	bls.n	8011e90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011e30:	2800      	cmp	r0, #0
 8011e32:	d03a      	beq.n	8011eaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011e34:	69e1      	ldr	r1, [r4, #28]
 8011e36:	4630      	mov	r0, r6
 8011e38:	f004 f96e 	bl	8016118 <ucdr_serialize_string>
 8011e3c:	6863      	ldr	r3, [r4, #4]
 8011e3e:	2b06      	cmp	r3, #6
 8011e40:	d926      	bls.n	8011e90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011e42:	b390      	cbz	r0, 8011eaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011e44:	6a21      	ldr	r1, [r4, #32]
 8011e46:	4630      	mov	r0, r6
 8011e48:	f004 f966 	bl	8016118 <ucdr_serialize_string>
 8011e4c:	6863      	ldr	r3, [r4, #4]
 8011e4e:	2b07      	cmp	r3, #7
 8011e50:	d91e      	bls.n	8011e90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011e52:	b350      	cbz	r0, 8011eaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011e54:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011e56:	4630      	mov	r0, r6
 8011e58:	f004 f95e 	bl	8016118 <ucdr_serialize_string>
 8011e5c:	6863      	ldr	r3, [r4, #4]
 8011e5e:	2b08      	cmp	r3, #8
 8011e60:	d916      	bls.n	8011e90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011e62:	b310      	cbz	r0, 8011eaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011e64:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8011e66:	4630      	mov	r0, r6
 8011e68:	f004 f956 	bl	8016118 <ucdr_serialize_string>
 8011e6c:	6863      	ldr	r3, [r4, #4]
 8011e6e:	2b09      	cmp	r3, #9
 8011e70:	d90e      	bls.n	8011e90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011e72:	b1d0      	cbz	r0, 8011eaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011e74:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8011e78:	2709      	movs	r7, #9
 8011e7a:	e000      	b.n	8011e7e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8011e7c:	b1a8      	cbz	r0, 8011eaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011e7e:	f858 1b04 	ldr.w	r1, [r8], #4
 8011e82:	4630      	mov	r0, r6
 8011e84:	f004 f948 	bl	8016118 <ucdr_serialize_string>
 8011e88:	6862      	ldr	r2, [r4, #4]
 8011e8a:	3701      	adds	r7, #1
 8011e8c:	4297      	cmp	r7, r2
 8011e8e:	d3f5      	bcc.n	8011e7c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8011e90:	4005      	ands	r5, r0
 8011e92:	b2ed      	uxtb	r5, r5
 8011e94:	e78a      	b.n	8011dac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8011e96:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011e98:	4630      	mov	r0, r6
 8011e9a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8011e9e:	f004 f90f 	bl	80160c0 <ucdr_serialize_sequence_uint8_t>
 8011ea2:	4005      	ands	r5, r0
 8011ea4:	4628      	mov	r0, r5
 8011ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011eaa:	2500      	movs	r5, #0
 8011eac:	e77e      	b.n	8011dac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8011eae:	4028      	ands	r0, r5
 8011eb0:	b2c5      	uxtb	r5, r0
 8011eb2:	e77b      	b.n	8011dac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08011eb4 <uxr_serialize_OBJK_Subscriber_Binary>:
 8011eb4:	b570      	push	{r4, r5, r6, lr}
 8011eb6:	460d      	mov	r5, r1
 8011eb8:	7809      	ldrb	r1, [r1, #0]
 8011eba:	4606      	mov	r6, r0
 8011ebc:	f7fc fd02 	bl	800e8c4 <ucdr_serialize_bool>
 8011ec0:	782b      	ldrb	r3, [r5, #0]
 8011ec2:	4604      	mov	r4, r0
 8011ec4:	b94b      	cbnz	r3, 8011eda <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8011ec6:	7a29      	ldrb	r1, [r5, #8]
 8011ec8:	4630      	mov	r0, r6
 8011eca:	f7fc fcfb 	bl	800e8c4 <ucdr_serialize_bool>
 8011ece:	7a2b      	ldrb	r3, [r5, #8]
 8011ed0:	4004      	ands	r4, r0
 8011ed2:	b2e4      	uxtb	r4, r4
 8011ed4:	b943      	cbnz	r3, 8011ee8 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8011ed6:	4620      	mov	r0, r4
 8011ed8:	bd70      	pop	{r4, r5, r6, pc}
 8011eda:	6869      	ldr	r1, [r5, #4]
 8011edc:	4630      	mov	r0, r6
 8011ede:	f004 f91b 	bl	8016118 <ucdr_serialize_string>
 8011ee2:	4004      	ands	r4, r0
 8011ee4:	b2e4      	uxtb	r4, r4
 8011ee6:	e7ee      	b.n	8011ec6 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8011ee8:	f105 010c 	add.w	r1, r5, #12
 8011eec:	4630      	mov	r0, r6
 8011eee:	f7ff ff53 	bl	8011d98 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8011ef2:	4004      	ands	r4, r0
 8011ef4:	4620      	mov	r0, r4
 8011ef6:	bd70      	pop	{r4, r5, r6, pc}

08011ef8 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8011ef8:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8011efc:	4688      	mov	r8, r1
 8011efe:	8809      	ldrh	r1, [r1, #0]
 8011f00:	4681      	mov	r9, r0
 8011f02:	f7fc fd3b 	bl	800e97c <ucdr_serialize_uint16_t>
 8011f06:	f898 1002 	ldrb.w	r1, [r8, #2]
 8011f0a:	4606      	mov	r6, r0
 8011f0c:	4648      	mov	r0, r9
 8011f0e:	f7fc fcd9 	bl	800e8c4 <ucdr_serialize_bool>
 8011f12:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011f16:	4030      	ands	r0, r6
 8011f18:	b2c5      	uxtb	r5, r0
 8011f1a:	b9eb      	cbnz	r3, 8011f58 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8011f1c:	f898 1006 	ldrb.w	r1, [r8, #6]
 8011f20:	4648      	mov	r0, r9
 8011f22:	f7fc fccf 	bl	800e8c4 <ucdr_serialize_bool>
 8011f26:	f898 3006 	ldrb.w	r3, [r8, #6]
 8011f2a:	4005      	ands	r5, r0
 8011f2c:	bb7b      	cbnz	r3, 8011f8e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8011f2e:	f898 100c 	ldrb.w	r1, [r8, #12]
 8011f32:	4648      	mov	r0, r9
 8011f34:	f7fc fcc6 	bl	800e8c4 <ucdr_serialize_bool>
 8011f38:	f898 300c 	ldrb.w	r3, [r8, #12]
 8011f3c:	4005      	ands	r5, r0
 8011f3e:	b9f3      	cbnz	r3, 8011f7e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8011f40:	f898 1014 	ldrb.w	r1, [r8, #20]
 8011f44:	4648      	mov	r0, r9
 8011f46:	f7fc fcbd 	bl	800e8c4 <ucdr_serialize_bool>
 8011f4a:	f898 3014 	ldrb.w	r3, [r8, #20]
 8011f4e:	4005      	ands	r5, r0
 8011f50:	b94b      	cbnz	r3, 8011f66 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8011f52:	4628      	mov	r0, r5
 8011f54:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8011f58:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8011f5c:	4648      	mov	r0, r9
 8011f5e:	f7fc fd0d 	bl	800e97c <ucdr_serialize_uint16_t>
 8011f62:	4005      	ands	r5, r0
 8011f64:	e7da      	b.n	8011f1c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8011f66:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8011f6a:	4648      	mov	r0, r9
 8011f6c:	f108 011c 	add.w	r1, r8, #28
 8011f70:	f004 f8a6 	bl	80160c0 <ucdr_serialize_sequence_uint8_t>
 8011f74:	4028      	ands	r0, r5
 8011f76:	b2c5      	uxtb	r5, r0
 8011f78:	4628      	mov	r0, r5
 8011f7a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8011f7e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011f82:	4648      	mov	r0, r9
 8011f84:	f7fc fee4 	bl	800ed50 <ucdr_serialize_uint32_t>
 8011f88:	4028      	ands	r0, r5
 8011f8a:	b2c5      	uxtb	r5, r0
 8011f8c:	e7d8      	b.n	8011f40 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8011f8e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8011f92:	4648      	mov	r0, r9
 8011f94:	f7fc fedc 	bl	800ed50 <ucdr_serialize_uint32_t>
 8011f98:	4028      	ands	r0, r5
 8011f9a:	b2c5      	uxtb	r5, r0
 8011f9c:	e7c7      	b.n	8011f2e <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8011f9e:	bf00      	nop

08011fa0 <uxr_serialize_OBJK_DataReader_Binary>:
 8011fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fa2:	2202      	movs	r2, #2
 8011fa4:	460c      	mov	r4, r1
 8011fa6:	4606      	mov	r6, r0
 8011fa8:	f003 ff96 	bl	8015ed8 <ucdr_serialize_array_uint8_t>
 8011fac:	78a1      	ldrb	r1, [r4, #2]
 8011fae:	4605      	mov	r5, r0
 8011fb0:	4630      	mov	r0, r6
 8011fb2:	f7fc fc87 	bl	800e8c4 <ucdr_serialize_bool>
 8011fb6:	78a3      	ldrb	r3, [r4, #2]
 8011fb8:	4005      	ands	r5, r0
 8011fba:	b2ed      	uxtb	r5, r5
 8011fbc:	b90b      	cbnz	r3, 8011fc2 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8011fbe:	4628      	mov	r0, r5
 8011fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fc2:	f104 0108 	add.w	r1, r4, #8
 8011fc6:	4630      	mov	r0, r6
 8011fc8:	f7ff ff96 	bl	8011ef8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8011fcc:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8011fd0:	4607      	mov	r7, r0
 8011fd2:	4630      	mov	r0, r6
 8011fd4:	f7fc fc76 	bl	800e8c4 <ucdr_serialize_bool>
 8011fd8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8011fdc:	4038      	ands	r0, r7
 8011fde:	b2c7      	uxtb	r7, r0
 8011fe0:	b95b      	cbnz	r3, 8011ffa <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8011fe2:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8011fe6:	4630      	mov	r0, r6
 8011fe8:	f7fc fc6c 	bl	800e8c4 <ucdr_serialize_bool>
 8011fec:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011ff0:	4007      	ands	r7, r0
 8011ff2:	b94b      	cbnz	r3, 8012008 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8011ff4:	403d      	ands	r5, r7
 8011ff6:	4628      	mov	r0, r5
 8011ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ffa:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8011ffe:	4630      	mov	r0, r6
 8012000:	f7fd f8fc 	bl	800f1fc <ucdr_serialize_uint64_t>
 8012004:	4007      	ands	r7, r0
 8012006:	e7ec      	b.n	8011fe2 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8012008:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801200a:	4630      	mov	r0, r6
 801200c:	f004 f884 	bl	8016118 <ucdr_serialize_string>
 8012010:	4007      	ands	r7, r0
 8012012:	b2ff      	uxtb	r7, r7
 8012014:	e7ee      	b.n	8011ff4 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8012016:	bf00      	nop

08012018 <uxr_serialize_OBJK_DataWriter_Binary>:
 8012018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801201a:	2202      	movs	r2, #2
 801201c:	460d      	mov	r5, r1
 801201e:	4606      	mov	r6, r0
 8012020:	f003 ff5a 	bl	8015ed8 <ucdr_serialize_array_uint8_t>
 8012024:	78a9      	ldrb	r1, [r5, #2]
 8012026:	4604      	mov	r4, r0
 8012028:	4630      	mov	r0, r6
 801202a:	f7fc fc4b 	bl	800e8c4 <ucdr_serialize_bool>
 801202e:	78ab      	ldrb	r3, [r5, #2]
 8012030:	4004      	ands	r4, r0
 8012032:	b2e4      	uxtb	r4, r4
 8012034:	b90b      	cbnz	r3, 801203a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8012036:	4620      	mov	r0, r4
 8012038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801203a:	f105 0108 	add.w	r1, r5, #8
 801203e:	4630      	mov	r0, r6
 8012040:	f7ff ff5a 	bl	8011ef8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012044:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8012048:	4607      	mov	r7, r0
 801204a:	4630      	mov	r0, r6
 801204c:	f7fc fc3a 	bl	800e8c4 <ucdr_serialize_bool>
 8012050:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8012054:	4007      	ands	r7, r0
 8012056:	b2ff      	uxtb	r7, r7
 8012058:	b913      	cbnz	r3, 8012060 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801205a:	403c      	ands	r4, r7
 801205c:	4620      	mov	r0, r4
 801205e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012060:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8012064:	4630      	mov	r0, r6
 8012066:	f7fd f8c9 	bl	800f1fc <ucdr_serialize_uint64_t>
 801206a:	4007      	ands	r7, r0
 801206c:	e7f5      	b.n	801205a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801206e:	bf00      	nop

08012070 <uxr_deserialize_ObjectVariant>:
 8012070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012072:	4605      	mov	r5, r0
 8012074:	460e      	mov	r6, r1
 8012076:	f7fc fc6b 	bl	800e950 <ucdr_deserialize_uint8_t>
 801207a:	b320      	cbz	r0, 80120c6 <uxr_deserialize_ObjectVariant+0x56>
 801207c:	7833      	ldrb	r3, [r6, #0]
 801207e:	3b01      	subs	r3, #1
 8012080:	4604      	mov	r4, r0
 8012082:	2b0d      	cmp	r3, #13
 8012084:	d81d      	bhi.n	80120c2 <uxr_deserialize_ObjectVariant+0x52>
 8012086:	e8df f003 	tbb	[pc, r3]
 801208a:	2107      	.short	0x2107
 801208c:	21214b4b 	.word	0x21214b4b
 8012090:	381c2121 	.word	0x381c2121
 8012094:	876a3838 	.word	0x876a3838
 8012098:	1d31      	adds	r1, r6, #4
 801209a:	4628      	mov	r0, r5
 801209c:	f7fc fc58 	bl	800e950 <ucdr_deserialize_uint8_t>
 80120a0:	4607      	mov	r7, r0
 80120a2:	b138      	cbz	r0, 80120b4 <uxr_deserialize_ObjectVariant+0x44>
 80120a4:	7933      	ldrb	r3, [r6, #4]
 80120a6:	2b02      	cmp	r3, #2
 80120a8:	d07c      	beq.n	80121a4 <uxr_deserialize_ObjectVariant+0x134>
 80120aa:	2b03      	cmp	r3, #3
 80120ac:	f000 8082 	beq.w	80121b4 <uxr_deserialize_ObjectVariant+0x144>
 80120b0:	2b01      	cmp	r3, #1
 80120b2:	d077      	beq.n	80121a4 <uxr_deserialize_ObjectVariant+0x134>
 80120b4:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 80120b8:	4628      	mov	r0, r5
 80120ba:	f7fd f9ef 	bl	800f49c <ucdr_deserialize_int16_t>
 80120be:	4038      	ands	r0, r7
 80120c0:	b2c4      	uxtb	r4, r0
 80120c2:	4620      	mov	r0, r4
 80120c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120c6:	2400      	movs	r4, #0
 80120c8:	4620      	mov	r0, r4
 80120ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120cc:	1d31      	adds	r1, r6, #4
 80120ce:	4628      	mov	r0, r5
 80120d0:	f7fc fc3e 	bl	800e950 <ucdr_deserialize_uint8_t>
 80120d4:	4607      	mov	r7, r0
 80120d6:	b130      	cbz	r0, 80120e6 <uxr_deserialize_ObjectVariant+0x76>
 80120d8:	7933      	ldrb	r3, [r6, #4]
 80120da:	2b02      	cmp	r3, #2
 80120dc:	d037      	beq.n	801214e <uxr_deserialize_ObjectVariant+0xde>
 80120de:	2b03      	cmp	r3, #3
 80120e0:	d02a      	beq.n	8012138 <uxr_deserialize_ObjectVariant+0xc8>
 80120e2:	2b01      	cmp	r3, #1
 80120e4:	d033      	beq.n	801214e <uxr_deserialize_ObjectVariant+0xde>
 80120e6:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 80120ea:	4628      	mov	r0, r5
 80120ec:	2202      	movs	r2, #2
 80120ee:	f003 ff57 	bl	8015fa0 <ucdr_deserialize_array_uint8_t>
 80120f2:	4038      	ands	r0, r7
 80120f4:	b2c4      	uxtb	r4, r0
 80120f6:	4620      	mov	r0, r4
 80120f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120fa:	1d31      	adds	r1, r6, #4
 80120fc:	4628      	mov	r0, r5
 80120fe:	f7fc fc27 	bl	800e950 <ucdr_deserialize_uint8_t>
 8012102:	2800      	cmp	r0, #0
 8012104:	d0df      	beq.n	80120c6 <uxr_deserialize_ObjectVariant+0x56>
 8012106:	7933      	ldrb	r3, [r6, #4]
 8012108:	2b01      	cmp	r3, #1
 801210a:	d001      	beq.n	8012110 <uxr_deserialize_ObjectVariant+0xa0>
 801210c:	2b02      	cmp	r3, #2
 801210e:	d1d8      	bne.n	80120c2 <uxr_deserialize_ObjectVariant+0x52>
 8012110:	68b1      	ldr	r1, [r6, #8]
 8012112:	4628      	mov	r0, r5
 8012114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012118:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801211c:	f004 b80c 	b.w	8016138 <ucdr_deserialize_string>
 8012120:	1d31      	adds	r1, r6, #4
 8012122:	4628      	mov	r0, r5
 8012124:	f7fc fc14 	bl	800e950 <ucdr_deserialize_uint8_t>
 8012128:	4607      	mov	r7, r0
 801212a:	2800      	cmp	r0, #0
 801212c:	d0db      	beq.n	80120e6 <uxr_deserialize_ObjectVariant+0x76>
 801212e:	7933      	ldrb	r3, [r6, #4]
 8012130:	2b02      	cmp	r3, #2
 8012132:	d00c      	beq.n	801214e <uxr_deserialize_ObjectVariant+0xde>
 8012134:	2b03      	cmp	r3, #3
 8012136:	d1d6      	bne.n	80120e6 <uxr_deserialize_ObjectVariant+0x76>
 8012138:	f106 0308 	add.w	r3, r6, #8
 801213c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012140:	f106 010c 	add.w	r1, r6, #12
 8012144:	4628      	mov	r0, r5
 8012146:	f003 ffcd 	bl	80160e4 <ucdr_deserialize_sequence_uint8_t>
 801214a:	4607      	mov	r7, r0
 801214c:	e7cb      	b.n	80120e6 <uxr_deserialize_ObjectVariant+0x76>
 801214e:	68b1      	ldr	r1, [r6, #8]
 8012150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012154:	4628      	mov	r0, r5
 8012156:	f003 ffef 	bl	8016138 <ucdr_deserialize_string>
 801215a:	4607      	mov	r7, r0
 801215c:	e7c3      	b.n	80120e6 <uxr_deserialize_ObjectVariant+0x76>
 801215e:	2204      	movs	r2, #4
 8012160:	18b1      	adds	r1, r6, r2
 8012162:	4628      	mov	r0, r5
 8012164:	f003 ff1c 	bl	8015fa0 <ucdr_deserialize_array_uint8_t>
 8012168:	2202      	movs	r2, #2
 801216a:	4604      	mov	r4, r0
 801216c:	f106 0108 	add.w	r1, r6, #8
 8012170:	4628      	mov	r0, r5
 8012172:	f003 ff15 	bl	8015fa0 <ucdr_deserialize_array_uint8_t>
 8012176:	2202      	movs	r2, #2
 8012178:	4004      	ands	r4, r0
 801217a:	f106 010a 	add.w	r1, r6, #10
 801217e:	4628      	mov	r0, r5
 8012180:	f003 ff0e 	bl	8015fa0 <ucdr_deserialize_array_uint8_t>
 8012184:	b2e4      	uxtb	r4, r4
 8012186:	4603      	mov	r3, r0
 8012188:	f106 010c 	add.w	r1, r6, #12
 801218c:	4628      	mov	r0, r5
 801218e:	401c      	ands	r4, r3
 8012190:	f7fc fbae 	bl	800e8f0 <ucdr_deserialize_bool>
 8012194:	4004      	ands	r4, r0
 8012196:	e794      	b.n	80120c2 <uxr_deserialize_ObjectVariant+0x52>
 8012198:	1d31      	adds	r1, r6, #4
 801219a:	4628      	mov	r0, r5
 801219c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80121a0:	f7ff bbd0 	b.w	8011944 <uxr_deserialize_CLIENT_Representation>
 80121a4:	68b1      	ldr	r1, [r6, #8]
 80121a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80121aa:	4628      	mov	r0, r5
 80121ac:	f003 ffc4 	bl	8016138 <ucdr_deserialize_string>
 80121b0:	4607      	mov	r7, r0
 80121b2:	e77f      	b.n	80120b4 <uxr_deserialize_ObjectVariant+0x44>
 80121b4:	f106 0308 	add.w	r3, r6, #8
 80121b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80121bc:	f106 010c 	add.w	r1, r6, #12
 80121c0:	4628      	mov	r0, r5
 80121c2:	f003 ff8f 	bl	80160e4 <ucdr_deserialize_sequence_uint8_t>
 80121c6:	4607      	mov	r7, r0
 80121c8:	e774      	b.n	80120b4 <uxr_deserialize_ObjectVariant+0x44>
 80121ca:	bf00      	nop

080121cc <uxr_deserialize_BaseObjectRequest>:
 80121cc:	b570      	push	{r4, r5, r6, lr}
 80121ce:	2202      	movs	r2, #2
 80121d0:	4605      	mov	r5, r0
 80121d2:	460e      	mov	r6, r1
 80121d4:	f003 fee4 	bl	8015fa0 <ucdr_deserialize_array_uint8_t>
 80121d8:	1cb1      	adds	r1, r6, #2
 80121da:	4604      	mov	r4, r0
 80121dc:	2202      	movs	r2, #2
 80121de:	4628      	mov	r0, r5
 80121e0:	f003 fede 	bl	8015fa0 <ucdr_deserialize_array_uint8_t>
 80121e4:	4020      	ands	r0, r4
 80121e6:	b2c0      	uxtb	r0, r0
 80121e8:	bd70      	pop	{r4, r5, r6, pc}
 80121ea:	bf00      	nop

080121ec <uxr_serialize_AGENT_ActivityInfo>:
 80121ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121f0:	460e      	mov	r6, r1
 80121f2:	f9b1 1000 	ldrsh.w	r1, [r1]
 80121f6:	4607      	mov	r7, r0
 80121f8:	f7fd f8d0 	bl	800f39c <ucdr_serialize_int16_t>
 80121fc:	6871      	ldr	r1, [r6, #4]
 80121fe:	4680      	mov	r8, r0
 8012200:	4638      	mov	r0, r7
 8012202:	f7fc fda5 	bl	800ed50 <ucdr_serialize_uint32_t>
 8012206:	6873      	ldr	r3, [r6, #4]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d06a      	beq.n	80122e2 <uxr_serialize_AGENT_ActivityInfo+0xf6>
 801220c:	b318      	cbz	r0, 8012256 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 801220e:	f106 0904 	add.w	r9, r6, #4
 8012212:	2500      	movs	r5, #0
 8012214:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8012218:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 801221c:	7a21      	ldrb	r1, [r4, #8]
 801221e:	4638      	mov	r0, r7
 8012220:	f7fc fb80 	bl	800e924 <ucdr_serialize_uint8_t>
 8012224:	2800      	cmp	r0, #0
 8012226:	d051      	beq.n	80122cc <uxr_serialize_AGENT_ActivityInfo+0xe0>
 8012228:	7a23      	ldrb	r3, [r4, #8]
 801222a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801222e:	00c9      	lsls	r1, r1, #3
 8012230:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 8012234:	2b03      	cmp	r3, #3
 8012236:	d859      	bhi.n	80122ec <uxr_serialize_AGENT_ActivityInfo+0x100>
 8012238:	e8df f003 	tbb	[pc, r3]
 801223c:	02122436 	.word	0x02122436
 8012240:	4449      	add	r1, r9
 8012242:	4638      	mov	r0, r7
 8012244:	6889      	ldr	r1, [r1, #8]
 8012246:	f003 ff67 	bl	8016118 <ucdr_serialize_string>
 801224a:	6873      	ldr	r3, [r6, #4]
 801224c:	3501      	adds	r5, #1
 801224e:	429d      	cmp	r5, r3
 8012250:	d240      	bcs.n	80122d4 <uxr_serialize_AGENT_ActivityInfo+0xe8>
 8012252:	2800      	cmp	r0, #0
 8012254:	d1de      	bne.n	8012214 <uxr_serialize_AGENT_ActivityInfo+0x28>
 8012256:	f04f 0800 	mov.w	r8, #0
 801225a:	4640      	mov	r0, r8
 801225c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012260:	3108      	adds	r1, #8
 8012262:	4449      	add	r1, r9
 8012264:	2210      	movs	r2, #16
 8012266:	4638      	mov	r0, r7
 8012268:	f003 fe36 	bl	8015ed8 <ucdr_serialize_array_uint8_t>
 801226c:	44aa      	add	sl, r5
 801226e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8012272:	4604      	mov	r4, r0
 8012274:	f8da 101c 	ldr.w	r1, [sl, #28]
 8012278:	4638      	mov	r0, r7
 801227a:	f7fc fd69 	bl	800ed50 <ucdr_serialize_uint32_t>
 801227e:	4020      	ands	r0, r4
 8012280:	b2c0      	uxtb	r0, r0
 8012282:	e7e2      	b.n	801224a <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8012284:	3108      	adds	r1, #8
 8012286:	4449      	add	r1, r9
 8012288:	2204      	movs	r2, #4
 801228a:	4638      	mov	r0, r7
 801228c:	f003 fe24 	bl	8015ed8 <ucdr_serialize_array_uint8_t>
 8012290:	44aa      	add	sl, r5
 8012292:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8012296:	4604      	mov	r4, r0
 8012298:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 801229c:	4638      	mov	r0, r7
 801229e:	f7fc fb6d 	bl	800e97c <ucdr_serialize_uint16_t>
 80122a2:	4020      	ands	r0, r4
 80122a4:	b2c0      	uxtb	r0, r0
 80122a6:	e7d0      	b.n	801224a <uxr_serialize_AGENT_ActivityInfo+0x5e>
 80122a8:	3108      	adds	r1, #8
 80122aa:	4449      	add	r1, r9
 80122ac:	2202      	movs	r2, #2
 80122ae:	4638      	mov	r0, r7
 80122b0:	f003 fe12 	bl	8015ed8 <ucdr_serialize_array_uint8_t>
 80122b4:	44aa      	add	sl, r5
 80122b6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80122ba:	4604      	mov	r4, r0
 80122bc:	f89a 100e 	ldrb.w	r1, [sl, #14]
 80122c0:	4638      	mov	r0, r7
 80122c2:	f7fc fb2f 	bl	800e924 <ucdr_serialize_uint8_t>
 80122c6:	4020      	ands	r0, r4
 80122c8:	b2c0      	uxtb	r0, r0
 80122ca:	e7be      	b.n	801224a <uxr_serialize_AGENT_ActivityInfo+0x5e>
 80122cc:	6873      	ldr	r3, [r6, #4]
 80122ce:	3501      	adds	r5, #1
 80122d0:	429d      	cmp	r5, r3
 80122d2:	d3c0      	bcc.n	8012256 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 80122d4:	ea08 0000 	and.w	r0, r8, r0
 80122d8:	fa5f f880 	uxtb.w	r8, r0
 80122dc:	4640      	mov	r0, r8
 80122de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122e2:	ea08 0800 	and.w	r8, r8, r0
 80122e6:	fa5f f888 	uxtb.w	r8, r8
 80122ea:	e7b6      	b.n	801225a <uxr_serialize_AGENT_ActivityInfo+0x6e>
 80122ec:	6873      	ldr	r3, [r6, #4]
 80122ee:	3501      	adds	r5, #1
 80122f0:	42ab      	cmp	r3, r5
 80122f2:	f104 0418 	add.w	r4, r4, #24
 80122f6:	d891      	bhi.n	801221c <uxr_serialize_AGENT_ActivityInfo+0x30>
 80122f8:	e7af      	b.n	801225a <uxr_serialize_AGENT_ActivityInfo+0x6e>
 80122fa:	bf00      	nop

080122fc <uxr_serialize_ActivityInfoVariant>:
 80122fc:	b570      	push	{r4, r5, r6, lr}
 80122fe:	460d      	mov	r5, r1
 8012300:	7809      	ldrb	r1, [r1, #0]
 8012302:	4606      	mov	r6, r0
 8012304:	f7fc fb0e 	bl	800e924 <ucdr_serialize_uint8_t>
 8012308:	b130      	cbz	r0, 8012318 <uxr_serialize_ActivityInfoVariant+0x1c>
 801230a:	782b      	ldrb	r3, [r5, #0]
 801230c:	2b06      	cmp	r3, #6
 801230e:	d019      	beq.n	8012344 <uxr_serialize_ActivityInfoVariant+0x48>
 8012310:	2b0d      	cmp	r3, #13
 8012312:	d010      	beq.n	8012336 <uxr_serialize_ActivityInfoVariant+0x3a>
 8012314:	2b05      	cmp	r3, #5
 8012316:	d000      	beq.n	801231a <uxr_serialize_ActivityInfoVariant+0x1e>
 8012318:	bd70      	pop	{r4, r5, r6, pc}
 801231a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801231e:	4630      	mov	r0, r6
 8012320:	f7fd f83c 	bl	800f39c <ucdr_serialize_int16_t>
 8012324:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8012328:	4604      	mov	r4, r0
 801232a:	4630      	mov	r0, r6
 801232c:	f7fc ff66 	bl	800f1fc <ucdr_serialize_uint64_t>
 8012330:	4020      	ands	r0, r4
 8012332:	b2c0      	uxtb	r0, r0
 8012334:	bd70      	pop	{r4, r5, r6, pc}
 8012336:	f105 0108 	add.w	r1, r5, #8
 801233a:	4630      	mov	r0, r6
 801233c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012340:	f7ff bf54 	b.w	80121ec <uxr_serialize_AGENT_ActivityInfo>
 8012344:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012348:	4630      	mov	r0, r6
 801234a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801234e:	f7fd b825 	b.w	800f39c <ucdr_serialize_int16_t>
 8012352:	bf00      	nop

08012354 <uxr_deserialize_BaseObjectReply>:
 8012354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012358:	2202      	movs	r2, #2
 801235a:	4606      	mov	r6, r0
 801235c:	460f      	mov	r7, r1
 801235e:	f003 fe1f 	bl	8015fa0 <ucdr_deserialize_array_uint8_t>
 8012362:	2202      	movs	r2, #2
 8012364:	1cb9      	adds	r1, r7, #2
 8012366:	4605      	mov	r5, r0
 8012368:	4630      	mov	r0, r6
 801236a:	f003 fe19 	bl	8015fa0 <ucdr_deserialize_array_uint8_t>
 801236e:	1d39      	adds	r1, r7, #4
 8012370:	4680      	mov	r8, r0
 8012372:	4630      	mov	r0, r6
 8012374:	f7fc faec 	bl	800e950 <ucdr_deserialize_uint8_t>
 8012378:	1d79      	adds	r1, r7, #5
 801237a:	4604      	mov	r4, r0
 801237c:	4630      	mov	r0, r6
 801237e:	f7fc fae7 	bl	800e950 <ucdr_deserialize_uint8_t>
 8012382:	ea05 0508 	and.w	r5, r5, r8
 8012386:	402c      	ands	r4, r5
 8012388:	4020      	ands	r0, r4
 801238a:	b2c0      	uxtb	r0, r0
 801238c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012390 <uxr_serialize_ReadSpecification>:
 8012390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012394:	460e      	mov	r6, r1
 8012396:	7809      	ldrb	r1, [r1, #0]
 8012398:	4607      	mov	r7, r0
 801239a:	f7fc fac3 	bl	800e924 <ucdr_serialize_uint8_t>
 801239e:	7871      	ldrb	r1, [r6, #1]
 80123a0:	4604      	mov	r4, r0
 80123a2:	4638      	mov	r0, r7
 80123a4:	f7fc fabe 	bl	800e924 <ucdr_serialize_uint8_t>
 80123a8:	78b1      	ldrb	r1, [r6, #2]
 80123aa:	4004      	ands	r4, r0
 80123ac:	4638      	mov	r0, r7
 80123ae:	f7fc fa89 	bl	800e8c4 <ucdr_serialize_bool>
 80123b2:	78b3      	ldrb	r3, [r6, #2]
 80123b4:	b2e4      	uxtb	r4, r4
 80123b6:	4004      	ands	r4, r0
 80123b8:	b94b      	cbnz	r3, 80123ce <uxr_serialize_ReadSpecification+0x3e>
 80123ba:	7a31      	ldrb	r1, [r6, #8]
 80123bc:	4638      	mov	r0, r7
 80123be:	f7fc fa81 	bl	800e8c4 <ucdr_serialize_bool>
 80123c2:	7a33      	ldrb	r3, [r6, #8]
 80123c4:	4004      	ands	r4, r0
 80123c6:	b943      	cbnz	r3, 80123da <uxr_serialize_ReadSpecification+0x4a>
 80123c8:	4620      	mov	r0, r4
 80123ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123ce:	6871      	ldr	r1, [r6, #4]
 80123d0:	4638      	mov	r0, r7
 80123d2:	f003 fea1 	bl	8016118 <ucdr_serialize_string>
 80123d6:	4004      	ands	r4, r0
 80123d8:	e7ef      	b.n	80123ba <uxr_serialize_ReadSpecification+0x2a>
 80123da:	8971      	ldrh	r1, [r6, #10]
 80123dc:	4638      	mov	r0, r7
 80123de:	f7fc facd 	bl	800e97c <ucdr_serialize_uint16_t>
 80123e2:	89b1      	ldrh	r1, [r6, #12]
 80123e4:	4605      	mov	r5, r0
 80123e6:	4638      	mov	r0, r7
 80123e8:	f7fc fac8 	bl	800e97c <ucdr_serialize_uint16_t>
 80123ec:	89f1      	ldrh	r1, [r6, #14]
 80123ee:	4005      	ands	r5, r0
 80123f0:	4638      	mov	r0, r7
 80123f2:	f7fc fac3 	bl	800e97c <ucdr_serialize_uint16_t>
 80123f6:	8a31      	ldrh	r1, [r6, #16]
 80123f8:	4680      	mov	r8, r0
 80123fa:	4638      	mov	r0, r7
 80123fc:	f7fc fabe 	bl	800e97c <ucdr_serialize_uint16_t>
 8012400:	b2ed      	uxtb	r5, r5
 8012402:	4025      	ands	r5, r4
 8012404:	ea08 0505 	and.w	r5, r8, r5
 8012408:	ea00 0405 	and.w	r4, r0, r5
 801240c:	4620      	mov	r0, r4
 801240e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012412:	bf00      	nop

08012414 <uxr_serialize_CREATE_CLIENT_Payload>:
 8012414:	f7ff ba3a 	b.w	801188c <uxr_serialize_CLIENT_Representation>

08012418 <uxr_serialize_CREATE_Payload>:
 8012418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801241a:	2202      	movs	r2, #2
 801241c:	4606      	mov	r6, r0
 801241e:	460d      	mov	r5, r1
 8012420:	f003 fd5a 	bl	8015ed8 <ucdr_serialize_array_uint8_t>
 8012424:	1ca9      	adds	r1, r5, #2
 8012426:	4604      	mov	r4, r0
 8012428:	2202      	movs	r2, #2
 801242a:	4630      	mov	r0, r6
 801242c:	f003 fd54 	bl	8015ed8 <ucdr_serialize_array_uint8_t>
 8012430:	7929      	ldrb	r1, [r5, #4]
 8012432:	4607      	mov	r7, r0
 8012434:	4630      	mov	r0, r6
 8012436:	f7fc fa75 	bl	800e924 <ucdr_serialize_uint8_t>
 801243a:	b328      	cbz	r0, 8012488 <uxr_serialize_CREATE_Payload+0x70>
 801243c:	792b      	ldrb	r3, [r5, #4]
 801243e:	403c      	ands	r4, r7
 8012440:	3b01      	subs	r3, #1
 8012442:	b2e4      	uxtb	r4, r4
 8012444:	2b0d      	cmp	r3, #13
 8012446:	d81d      	bhi.n	8012484 <uxr_serialize_CREATE_Payload+0x6c>
 8012448:	e8df f003 	tbb	[pc, r3]
 801244c:	32320753 	.word	0x32320753
 8012450:	07070707 	.word	0x07070707
 8012454:	2121211c 	.word	0x2121211c
 8012458:	684c      	.short	0x684c
 801245a:	7a29      	ldrb	r1, [r5, #8]
 801245c:	4630      	mov	r0, r6
 801245e:	f7fc fa61 	bl	800e924 <ucdr_serialize_uint8_t>
 8012462:	4607      	mov	r7, r0
 8012464:	b130      	cbz	r0, 8012474 <uxr_serialize_CREATE_Payload+0x5c>
 8012466:	7a2b      	ldrb	r3, [r5, #8]
 8012468:	2b02      	cmp	r3, #2
 801246a:	d035      	beq.n	80124d8 <uxr_serialize_CREATE_Payload+0xc0>
 801246c:	2b03      	cmp	r3, #3
 801246e:	d02b      	beq.n	80124c8 <uxr_serialize_CREATE_Payload+0xb0>
 8012470:	2b01      	cmp	r3, #1
 8012472:	d031      	beq.n	80124d8 <uxr_serialize_CREATE_Payload+0xc0>
 8012474:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8012478:	4630      	mov	r0, r6
 801247a:	2202      	movs	r2, #2
 801247c:	f003 fd2c 	bl	8015ed8 <ucdr_serialize_array_uint8_t>
 8012480:	4038      	ands	r0, r7
 8012482:	4004      	ands	r4, r0
 8012484:	4620      	mov	r0, r4
 8012486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012488:	2400      	movs	r4, #0
 801248a:	4620      	mov	r0, r4
 801248c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801248e:	7a29      	ldrb	r1, [r5, #8]
 8012490:	4630      	mov	r0, r6
 8012492:	f7fc fa47 	bl	800e924 <ucdr_serialize_uint8_t>
 8012496:	2800      	cmp	r0, #0
 8012498:	d0f6      	beq.n	8012488 <uxr_serialize_CREATE_Payload+0x70>
 801249a:	7a2b      	ldrb	r3, [r5, #8]
 801249c:	2b01      	cmp	r3, #1
 801249e:	d001      	beq.n	80124a4 <uxr_serialize_CREATE_Payload+0x8c>
 80124a0:	2b02      	cmp	r3, #2
 80124a2:	d1ef      	bne.n	8012484 <uxr_serialize_CREATE_Payload+0x6c>
 80124a4:	68e9      	ldr	r1, [r5, #12]
 80124a6:	4630      	mov	r0, r6
 80124a8:	f003 fe36 	bl	8016118 <ucdr_serialize_string>
 80124ac:	4004      	ands	r4, r0
 80124ae:	e7e9      	b.n	8012484 <uxr_serialize_CREATE_Payload+0x6c>
 80124b0:	7a29      	ldrb	r1, [r5, #8]
 80124b2:	4630      	mov	r0, r6
 80124b4:	f7fc fa36 	bl	800e924 <ucdr_serialize_uint8_t>
 80124b8:	4607      	mov	r7, r0
 80124ba:	2800      	cmp	r0, #0
 80124bc:	d0da      	beq.n	8012474 <uxr_serialize_CREATE_Payload+0x5c>
 80124be:	7a2b      	ldrb	r3, [r5, #8]
 80124c0:	2b02      	cmp	r3, #2
 80124c2:	d009      	beq.n	80124d8 <uxr_serialize_CREATE_Payload+0xc0>
 80124c4:	2b03      	cmp	r3, #3
 80124c6:	d1d5      	bne.n	8012474 <uxr_serialize_CREATE_Payload+0x5c>
 80124c8:	68ea      	ldr	r2, [r5, #12]
 80124ca:	f105 0110 	add.w	r1, r5, #16
 80124ce:	4630      	mov	r0, r6
 80124d0:	f003 fdf6 	bl	80160c0 <ucdr_serialize_sequence_uint8_t>
 80124d4:	4607      	mov	r7, r0
 80124d6:	e7cd      	b.n	8012474 <uxr_serialize_CREATE_Payload+0x5c>
 80124d8:	68e9      	ldr	r1, [r5, #12]
 80124da:	4630      	mov	r0, r6
 80124dc:	f003 fe1c 	bl	8016118 <ucdr_serialize_string>
 80124e0:	4607      	mov	r7, r0
 80124e2:	e7c7      	b.n	8012474 <uxr_serialize_CREATE_Payload+0x5c>
 80124e4:	f105 0108 	add.w	r1, r5, #8
 80124e8:	4630      	mov	r0, r6
 80124ea:	f7ff fa95 	bl	8011a18 <uxr_serialize_AGENT_Representation>
 80124ee:	4004      	ands	r4, r0
 80124f0:	e7c8      	b.n	8012484 <uxr_serialize_CREATE_Payload+0x6c>
 80124f2:	7a29      	ldrb	r1, [r5, #8]
 80124f4:	4630      	mov	r0, r6
 80124f6:	f7fc fa15 	bl	800e924 <ucdr_serialize_uint8_t>
 80124fa:	4607      	mov	r7, r0
 80124fc:	b130      	cbz	r0, 801250c <uxr_serialize_CREATE_Payload+0xf4>
 80124fe:	7a2b      	ldrb	r3, [r5, #8]
 8012500:	2b02      	cmp	r3, #2
 8012502:	d012      	beq.n	801252a <uxr_serialize_CREATE_Payload+0x112>
 8012504:	2b03      	cmp	r3, #3
 8012506:	d016      	beq.n	8012536 <uxr_serialize_CREATE_Payload+0x11e>
 8012508:	2b01      	cmp	r3, #1
 801250a:	d00e      	beq.n	801252a <uxr_serialize_CREATE_Payload+0x112>
 801250c:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 8012510:	4630      	mov	r0, r6
 8012512:	f7fc ff43 	bl	800f39c <ucdr_serialize_int16_t>
 8012516:	4038      	ands	r0, r7
 8012518:	4004      	ands	r4, r0
 801251a:	e7b3      	b.n	8012484 <uxr_serialize_CREATE_Payload+0x6c>
 801251c:	f105 0108 	add.w	r1, r5, #8
 8012520:	4630      	mov	r0, r6
 8012522:	f7ff f9b3 	bl	801188c <uxr_serialize_CLIENT_Representation>
 8012526:	4004      	ands	r4, r0
 8012528:	e7ac      	b.n	8012484 <uxr_serialize_CREATE_Payload+0x6c>
 801252a:	68e9      	ldr	r1, [r5, #12]
 801252c:	4630      	mov	r0, r6
 801252e:	f003 fdf3 	bl	8016118 <ucdr_serialize_string>
 8012532:	4607      	mov	r7, r0
 8012534:	e7ea      	b.n	801250c <uxr_serialize_CREATE_Payload+0xf4>
 8012536:	68ea      	ldr	r2, [r5, #12]
 8012538:	f105 0110 	add.w	r1, r5, #16
 801253c:	4630      	mov	r0, r6
 801253e:	f003 fdbf 	bl	80160c0 <ucdr_serialize_sequence_uint8_t>
 8012542:	4607      	mov	r7, r0
 8012544:	e7e2      	b.n	801250c <uxr_serialize_CREATE_Payload+0xf4>
 8012546:	bf00      	nop

08012548 <uxr_deserialize_GET_INFO_Payload>:
 8012548:	b570      	push	{r4, r5, r6, lr}
 801254a:	2202      	movs	r2, #2
 801254c:	4605      	mov	r5, r0
 801254e:	460e      	mov	r6, r1
 8012550:	f003 fd26 	bl	8015fa0 <ucdr_deserialize_array_uint8_t>
 8012554:	1cb1      	adds	r1, r6, #2
 8012556:	2202      	movs	r2, #2
 8012558:	4604      	mov	r4, r0
 801255a:	4628      	mov	r0, r5
 801255c:	f003 fd20 	bl	8015fa0 <ucdr_deserialize_array_uint8_t>
 8012560:	1d31      	adds	r1, r6, #4
 8012562:	4004      	ands	r4, r0
 8012564:	4628      	mov	r0, r5
 8012566:	f7fc fd23 	bl	800efb0 <ucdr_deserialize_uint32_t>
 801256a:	b2e4      	uxtb	r4, r4
 801256c:	4020      	ands	r0, r4
 801256e:	bd70      	pop	{r4, r5, r6, pc}

08012570 <uxr_serialize_DELETE_Payload>:
 8012570:	b570      	push	{r4, r5, r6, lr}
 8012572:	2202      	movs	r2, #2
 8012574:	4605      	mov	r5, r0
 8012576:	460e      	mov	r6, r1
 8012578:	f003 fcae 	bl	8015ed8 <ucdr_serialize_array_uint8_t>
 801257c:	1cb1      	adds	r1, r6, #2
 801257e:	4604      	mov	r4, r0
 8012580:	2202      	movs	r2, #2
 8012582:	4628      	mov	r0, r5
 8012584:	f003 fca8 	bl	8015ed8 <ucdr_serialize_array_uint8_t>
 8012588:	4020      	ands	r0, r4
 801258a:	b2c0      	uxtb	r0, r0
 801258c:	bd70      	pop	{r4, r5, r6, pc}
 801258e:	bf00      	nop

08012590 <uxr_deserialize_STATUS_AGENT_Payload>:
 8012590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012594:	4606      	mov	r6, r0
 8012596:	460f      	mov	r7, r1
 8012598:	f7fc f9da 	bl	800e950 <ucdr_deserialize_uint8_t>
 801259c:	1c79      	adds	r1, r7, #1
 801259e:	4605      	mov	r5, r0
 80125a0:	4630      	mov	r0, r6
 80125a2:	f7fc f9d5 	bl	800e950 <ucdr_deserialize_uint8_t>
 80125a6:	1d39      	adds	r1, r7, #4
 80125a8:	4681      	mov	r9, r0
 80125aa:	2204      	movs	r2, #4
 80125ac:	4630      	mov	r0, r6
 80125ae:	f003 fcf7 	bl	8015fa0 <ucdr_deserialize_array_uint8_t>
 80125b2:	f107 0108 	add.w	r1, r7, #8
 80125b6:	4604      	mov	r4, r0
 80125b8:	2202      	movs	r2, #2
 80125ba:	4630      	mov	r0, r6
 80125bc:	f003 fcf0 	bl	8015fa0 <ucdr_deserialize_array_uint8_t>
 80125c0:	f107 010a 	add.w	r1, r7, #10
 80125c4:	4680      	mov	r8, r0
 80125c6:	2202      	movs	r2, #2
 80125c8:	4630      	mov	r0, r6
 80125ca:	f003 fce9 	bl	8015fa0 <ucdr_deserialize_array_uint8_t>
 80125ce:	ea05 0509 	and.w	r5, r5, r9
 80125d2:	b2ed      	uxtb	r5, r5
 80125d4:	402c      	ands	r4, r5
 80125d6:	f107 010c 	add.w	r1, r7, #12
 80125da:	4605      	mov	r5, r0
 80125dc:	4630      	mov	r0, r6
 80125de:	f7fc f987 	bl	800e8f0 <ucdr_deserialize_bool>
 80125e2:	ea08 0404 	and.w	r4, r8, r4
 80125e6:	4025      	ands	r5, r4
 80125e8:	4028      	ands	r0, r5
 80125ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125ee:	bf00      	nop

080125f0 <uxr_deserialize_STATUS_Payload>:
 80125f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125f4:	2202      	movs	r2, #2
 80125f6:	4606      	mov	r6, r0
 80125f8:	460f      	mov	r7, r1
 80125fa:	f003 fcd1 	bl	8015fa0 <ucdr_deserialize_array_uint8_t>
 80125fe:	2202      	movs	r2, #2
 8012600:	1cb9      	adds	r1, r7, #2
 8012602:	4605      	mov	r5, r0
 8012604:	4630      	mov	r0, r6
 8012606:	f003 fccb 	bl	8015fa0 <ucdr_deserialize_array_uint8_t>
 801260a:	1d39      	adds	r1, r7, #4
 801260c:	4680      	mov	r8, r0
 801260e:	4630      	mov	r0, r6
 8012610:	f7fc f99e 	bl	800e950 <ucdr_deserialize_uint8_t>
 8012614:	1d79      	adds	r1, r7, #5
 8012616:	4604      	mov	r4, r0
 8012618:	4630      	mov	r0, r6
 801261a:	f7fc f999 	bl	800e950 <ucdr_deserialize_uint8_t>
 801261e:	ea05 0508 	and.w	r5, r5, r8
 8012622:	402c      	ands	r4, r5
 8012624:	4020      	ands	r0, r4
 8012626:	b2c0      	uxtb	r0, r0
 8012628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801262c <uxr_serialize_INFO_Payload>:
 801262c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012630:	2202      	movs	r2, #2
 8012632:	460c      	mov	r4, r1
 8012634:	4605      	mov	r5, r0
 8012636:	f003 fc4f 	bl	8015ed8 <ucdr_serialize_array_uint8_t>
 801263a:	2202      	movs	r2, #2
 801263c:	4680      	mov	r8, r0
 801263e:	1ca1      	adds	r1, r4, #2
 8012640:	4628      	mov	r0, r5
 8012642:	f003 fc49 	bl	8015ed8 <ucdr_serialize_array_uint8_t>
 8012646:	7921      	ldrb	r1, [r4, #4]
 8012648:	4607      	mov	r7, r0
 801264a:	4628      	mov	r0, r5
 801264c:	f7fc f96a 	bl	800e924 <ucdr_serialize_uint8_t>
 8012650:	7961      	ldrb	r1, [r4, #5]
 8012652:	4606      	mov	r6, r0
 8012654:	4628      	mov	r0, r5
 8012656:	f7fc f965 	bl	800e924 <ucdr_serialize_uint8_t>
 801265a:	ea08 0807 	and.w	r8, r8, r7
 801265e:	ea06 0608 	and.w	r6, r6, r8
 8012662:	4006      	ands	r6, r0
 8012664:	7a21      	ldrb	r1, [r4, #8]
 8012666:	4628      	mov	r0, r5
 8012668:	f7fc f92c 	bl	800e8c4 <ucdr_serialize_bool>
 801266c:	7a23      	ldrb	r3, [r4, #8]
 801266e:	b2f7      	uxtb	r7, r6
 8012670:	4606      	mov	r6, r0
 8012672:	b96b      	cbnz	r3, 8012690 <uxr_serialize_INFO_Payload+0x64>
 8012674:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 8012678:	4628      	mov	r0, r5
 801267a:	f7fc f923 	bl	800e8c4 <ucdr_serialize_bool>
 801267e:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 8012682:	4030      	ands	r0, r6
 8012684:	b2c6      	uxtb	r6, r0
 8012686:	b983      	cbnz	r3, 80126aa <uxr_serialize_INFO_Payload+0x7e>
 8012688:	ea06 0007 	and.w	r0, r6, r7
 801268c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012690:	7b21      	ldrb	r1, [r4, #12]
 8012692:	4628      	mov	r0, r5
 8012694:	f7fc f946 	bl	800e924 <ucdr_serialize_uint8_t>
 8012698:	b188      	cbz	r0, 80126be <uxr_serialize_INFO_Payload+0x92>
 801269a:	f104 010c 	add.w	r1, r4, #12
 801269e:	4628      	mov	r0, r5
 80126a0:	f7ff fa06 	bl	8011ab0 <uxr_serialize_ObjectVariant.part.0>
 80126a4:	4030      	ands	r0, r6
 80126a6:	b2c6      	uxtb	r6, r0
 80126a8:	e7e4      	b.n	8012674 <uxr_serialize_INFO_Payload+0x48>
 80126aa:	f504 7108 	add.w	r1, r4, #544	; 0x220
 80126ae:	4628      	mov	r0, r5
 80126b0:	f7ff fe24 	bl	80122fc <uxr_serialize_ActivityInfoVariant>
 80126b4:	4006      	ands	r6, r0
 80126b6:	ea06 0007 	and.w	r0, r6, r7
 80126ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126be:	4606      	mov	r6, r0
 80126c0:	e7d8      	b.n	8012674 <uxr_serialize_INFO_Payload+0x48>
 80126c2:	bf00      	nop

080126c4 <uxr_serialize_READ_DATA_Payload>:
 80126c4:	b570      	push	{r4, r5, r6, lr}
 80126c6:	2202      	movs	r2, #2
 80126c8:	4605      	mov	r5, r0
 80126ca:	460e      	mov	r6, r1
 80126cc:	f003 fc04 	bl	8015ed8 <ucdr_serialize_array_uint8_t>
 80126d0:	1cb1      	adds	r1, r6, #2
 80126d2:	2202      	movs	r2, #2
 80126d4:	4604      	mov	r4, r0
 80126d6:	4628      	mov	r0, r5
 80126d8:	f003 fbfe 	bl	8015ed8 <ucdr_serialize_array_uint8_t>
 80126dc:	1d31      	adds	r1, r6, #4
 80126de:	4004      	ands	r4, r0
 80126e0:	4628      	mov	r0, r5
 80126e2:	f7ff fe55 	bl	8012390 <uxr_serialize_ReadSpecification>
 80126e6:	b2e4      	uxtb	r4, r4
 80126e8:	4020      	ands	r0, r4
 80126ea:	bd70      	pop	{r4, r5, r6, pc}

080126ec <uxr_serialize_WRITE_DATA_Payload_Data>:
 80126ec:	b570      	push	{r4, r5, r6, lr}
 80126ee:	2202      	movs	r2, #2
 80126f0:	4605      	mov	r5, r0
 80126f2:	460e      	mov	r6, r1
 80126f4:	f003 fbf0 	bl	8015ed8 <ucdr_serialize_array_uint8_t>
 80126f8:	1cb1      	adds	r1, r6, #2
 80126fa:	4604      	mov	r4, r0
 80126fc:	2202      	movs	r2, #2
 80126fe:	4628      	mov	r0, r5
 8012700:	f003 fbea 	bl	8015ed8 <ucdr_serialize_array_uint8_t>
 8012704:	4020      	ands	r0, r4
 8012706:	b2c0      	uxtb	r0, r0
 8012708:	bd70      	pop	{r4, r5, r6, pc}
 801270a:	bf00      	nop

0801270c <uxr_serialize_ACKNACK_Payload>:
 801270c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801270e:	460f      	mov	r7, r1
 8012710:	460e      	mov	r6, r1
 8012712:	f837 1b02 	ldrh.w	r1, [r7], #2
 8012716:	4605      	mov	r5, r0
 8012718:	f7fc f930 	bl	800e97c <ucdr_serialize_uint16_t>
 801271c:	4639      	mov	r1, r7
 801271e:	2202      	movs	r2, #2
 8012720:	4604      	mov	r4, r0
 8012722:	4628      	mov	r0, r5
 8012724:	f003 fbd8 	bl	8015ed8 <ucdr_serialize_array_uint8_t>
 8012728:	7931      	ldrb	r1, [r6, #4]
 801272a:	4004      	ands	r4, r0
 801272c:	4628      	mov	r0, r5
 801272e:	f7fc f8f9 	bl	800e924 <ucdr_serialize_uint8_t>
 8012732:	b2e4      	uxtb	r4, r4
 8012734:	4020      	ands	r0, r4
 8012736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012738 <uxr_deserialize_ACKNACK_Payload>:
 8012738:	b570      	push	{r4, r5, r6, lr}
 801273a:	4605      	mov	r5, r0
 801273c:	460e      	mov	r6, r1
 801273e:	f7fc fa1d 	bl	800eb7c <ucdr_deserialize_uint16_t>
 8012742:	1cb1      	adds	r1, r6, #2
 8012744:	2202      	movs	r2, #2
 8012746:	4604      	mov	r4, r0
 8012748:	4628      	mov	r0, r5
 801274a:	f003 fc29 	bl	8015fa0 <ucdr_deserialize_array_uint8_t>
 801274e:	1d31      	adds	r1, r6, #4
 8012750:	4004      	ands	r4, r0
 8012752:	4628      	mov	r0, r5
 8012754:	f7fc f8fc 	bl	800e950 <ucdr_deserialize_uint8_t>
 8012758:	b2e4      	uxtb	r4, r4
 801275a:	4020      	ands	r0, r4
 801275c:	bd70      	pop	{r4, r5, r6, pc}
 801275e:	bf00      	nop

08012760 <uxr_serialize_HEARTBEAT_Payload>:
 8012760:	b570      	push	{r4, r5, r6, lr}
 8012762:	460d      	mov	r5, r1
 8012764:	8809      	ldrh	r1, [r1, #0]
 8012766:	4606      	mov	r6, r0
 8012768:	f7fc f908 	bl	800e97c <ucdr_serialize_uint16_t>
 801276c:	8869      	ldrh	r1, [r5, #2]
 801276e:	4604      	mov	r4, r0
 8012770:	4630      	mov	r0, r6
 8012772:	f7fc f903 	bl	800e97c <ucdr_serialize_uint16_t>
 8012776:	7929      	ldrb	r1, [r5, #4]
 8012778:	4004      	ands	r4, r0
 801277a:	4630      	mov	r0, r6
 801277c:	f7fc f8d2 	bl	800e924 <ucdr_serialize_uint8_t>
 8012780:	b2e4      	uxtb	r4, r4
 8012782:	4020      	ands	r0, r4
 8012784:	bd70      	pop	{r4, r5, r6, pc}
 8012786:	bf00      	nop

08012788 <uxr_deserialize_HEARTBEAT_Payload>:
 8012788:	b570      	push	{r4, r5, r6, lr}
 801278a:	4605      	mov	r5, r0
 801278c:	460e      	mov	r6, r1
 801278e:	f7fc f9f5 	bl	800eb7c <ucdr_deserialize_uint16_t>
 8012792:	1cb1      	adds	r1, r6, #2
 8012794:	4604      	mov	r4, r0
 8012796:	4628      	mov	r0, r5
 8012798:	f7fc f9f0 	bl	800eb7c <ucdr_deserialize_uint16_t>
 801279c:	1d31      	adds	r1, r6, #4
 801279e:	4004      	ands	r4, r0
 80127a0:	4628      	mov	r0, r5
 80127a2:	f7fc f8d5 	bl	800e950 <ucdr_deserialize_uint8_t>
 80127a6:	b2e4      	uxtb	r4, r4
 80127a8:	4020      	ands	r0, r4
 80127aa:	bd70      	pop	{r4, r5, r6, pc}

080127ac <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80127ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127b0:	4605      	mov	r5, r0
 80127b2:	460e      	mov	r6, r1
 80127b4:	f7fc ff7e 	bl	800f6b4 <ucdr_deserialize_int32_t>
 80127b8:	1d31      	adds	r1, r6, #4
 80127ba:	4607      	mov	r7, r0
 80127bc:	4628      	mov	r0, r5
 80127be:	f7fc fbf7 	bl	800efb0 <ucdr_deserialize_uint32_t>
 80127c2:	f106 0108 	add.w	r1, r6, #8
 80127c6:	4680      	mov	r8, r0
 80127c8:	4628      	mov	r0, r5
 80127ca:	f7fc ff73 	bl	800f6b4 <ucdr_deserialize_int32_t>
 80127ce:	f106 010c 	add.w	r1, r6, #12
 80127d2:	4604      	mov	r4, r0
 80127d4:	4628      	mov	r0, r5
 80127d6:	f7fc fbeb 	bl	800efb0 <ucdr_deserialize_uint32_t>
 80127da:	ea07 0708 	and.w	r7, r7, r8
 80127de:	403c      	ands	r4, r7
 80127e0:	f106 0110 	add.w	r1, r6, #16
 80127e4:	4004      	ands	r4, r0
 80127e6:	4628      	mov	r0, r5
 80127e8:	f7fc ff64 	bl	800f6b4 <ucdr_deserialize_int32_t>
 80127ec:	f106 0114 	add.w	r1, r6, #20
 80127f0:	4603      	mov	r3, r0
 80127f2:	4628      	mov	r0, r5
 80127f4:	461d      	mov	r5, r3
 80127f6:	f7fc fbdb 	bl	800efb0 <ucdr_deserialize_uint32_t>
 80127fa:	b2e4      	uxtb	r4, r4
 80127fc:	402c      	ands	r4, r5
 80127fe:	4020      	ands	r0, r4
 8012800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012804 <uxr_serialize_SampleIdentity>:
 8012804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012808:	220c      	movs	r2, #12
 801280a:	4604      	mov	r4, r0
 801280c:	460d      	mov	r5, r1
 801280e:	f003 fb63 	bl	8015ed8 <ucdr_serialize_array_uint8_t>
 8012812:	2203      	movs	r2, #3
 8012814:	f105 010c 	add.w	r1, r5, #12
 8012818:	4607      	mov	r7, r0
 801281a:	4620      	mov	r0, r4
 801281c:	f003 fb5c 	bl	8015ed8 <ucdr_serialize_array_uint8_t>
 8012820:	7be9      	ldrb	r1, [r5, #15]
 8012822:	4680      	mov	r8, r0
 8012824:	4620      	mov	r0, r4
 8012826:	f7fc f87d 	bl	800e924 <ucdr_serialize_uint8_t>
 801282a:	6929      	ldr	r1, [r5, #16]
 801282c:	4606      	mov	r6, r0
 801282e:	4620      	mov	r0, r4
 8012830:	f7fc fea8 	bl	800f584 <ucdr_serialize_int32_t>
 8012834:	6969      	ldr	r1, [r5, #20]
 8012836:	4603      	mov	r3, r0
 8012838:	4620      	mov	r0, r4
 801283a:	ea07 0708 	and.w	r7, r7, r8
 801283e:	461c      	mov	r4, r3
 8012840:	f7fc fa86 	bl	800ed50 <ucdr_serialize_uint32_t>
 8012844:	403e      	ands	r6, r7
 8012846:	4034      	ands	r4, r6
 8012848:	4020      	ands	r0, r4
 801284a:	b2c0      	uxtb	r0, r0
 801284c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012850 <uxr_deserialize_SampleIdentity>:
 8012850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012854:	220c      	movs	r2, #12
 8012856:	4604      	mov	r4, r0
 8012858:	460d      	mov	r5, r1
 801285a:	f003 fba1 	bl	8015fa0 <ucdr_deserialize_array_uint8_t>
 801285e:	2203      	movs	r2, #3
 8012860:	f105 010c 	add.w	r1, r5, #12
 8012864:	4607      	mov	r7, r0
 8012866:	4620      	mov	r0, r4
 8012868:	f003 fb9a 	bl	8015fa0 <ucdr_deserialize_array_uint8_t>
 801286c:	f105 010f 	add.w	r1, r5, #15
 8012870:	4680      	mov	r8, r0
 8012872:	4620      	mov	r0, r4
 8012874:	f7fc f86c 	bl	800e950 <ucdr_deserialize_uint8_t>
 8012878:	f105 0110 	add.w	r1, r5, #16
 801287c:	4606      	mov	r6, r0
 801287e:	4620      	mov	r0, r4
 8012880:	f7fc ff18 	bl	800f6b4 <ucdr_deserialize_int32_t>
 8012884:	f105 0114 	add.w	r1, r5, #20
 8012888:	4603      	mov	r3, r0
 801288a:	4620      	mov	r0, r4
 801288c:	ea07 0708 	and.w	r7, r7, r8
 8012890:	461c      	mov	r4, r3
 8012892:	f7fc fb8d 	bl	800efb0 <ucdr_deserialize_uint32_t>
 8012896:	403e      	ands	r6, r7
 8012898:	4034      	ands	r4, r6
 801289a:	4020      	ands	r0, r4
 801289c:	b2c0      	uxtb	r0, r0
 801289e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128a2:	bf00      	nop

080128a4 <rcl_client_get_rmw_handle>:
 80128a4:	b110      	cbz	r0, 80128ac <rcl_client_get_rmw_handle+0x8>
 80128a6:	6800      	ldr	r0, [r0, #0]
 80128a8:	b100      	cbz	r0, 80128ac <rcl_client_get_rmw_handle+0x8>
 80128aa:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80128ac:	4770      	bx	lr
 80128ae:	bf00      	nop

080128b0 <rcl_take_response>:
 80128b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80128b2:	460e      	mov	r6, r1
 80128b4:	460c      	mov	r4, r1
 80128b6:	4607      	mov	r7, r0
 80128b8:	4694      	mov	ip, r2
 80128ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80128bc:	b08d      	sub	sp, #52	; 0x34
 80128be:	ad06      	add	r5, sp, #24
 80128c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80128c2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80128c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80128ca:	b337      	cbz	r7, 801291a <rcl_take_response+0x6a>
 80128cc:	683b      	ldr	r3, [r7, #0]
 80128ce:	b323      	cbz	r3, 801291a <rcl_take_response+0x6a>
 80128d0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80128d2:	b310      	cbz	r0, 801291a <rcl_take_response+0x6a>
 80128d4:	4662      	mov	r2, ip
 80128d6:	b31a      	cbz	r2, 8012920 <rcl_take_response+0x70>
 80128d8:	2300      	movs	r3, #0
 80128da:	2600      	movs	r6, #0
 80128dc:	2700      	movs	r7, #0
 80128de:	f88d 3007 	strb.w	r3, [sp, #7]
 80128e2:	a902      	add	r1, sp, #8
 80128e4:	f10d 0307 	add.w	r3, sp, #7
 80128e8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80128ec:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80128f0:	f003 f83a 	bl	8015968 <rmw_take_response>
 80128f4:	4606      	mov	r6, r0
 80128f6:	b9a8      	cbnz	r0, 8012924 <rcl_take_response+0x74>
 80128f8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80128fc:	f240 13f5 	movw	r3, #501	; 0x1f5
 8012900:	2a00      	cmp	r2, #0
 8012902:	bf08      	it	eq
 8012904:	461e      	moveq	r6, r3
 8012906:	ad06      	add	r5, sp, #24
 8012908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801290a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801290c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012910:	e884 0003 	stmia.w	r4, {r0, r1}
 8012914:	4630      	mov	r0, r6
 8012916:	b00d      	add	sp, #52	; 0x34
 8012918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801291a:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 801291e:	e7f2      	b.n	8012906 <rcl_take_response+0x56>
 8012920:	260b      	movs	r6, #11
 8012922:	e7f0      	b.n	8012906 <rcl_take_response+0x56>
 8012924:	2601      	movs	r6, #1
 8012926:	e7ee      	b.n	8012906 <rcl_take_response+0x56>

08012928 <rcl_convert_rmw_ret_to_rcl_ret>:
 8012928:	280b      	cmp	r0, #11
 801292a:	dc0d      	bgt.n	8012948 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801292c:	2800      	cmp	r0, #0
 801292e:	db09      	blt.n	8012944 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012930:	280b      	cmp	r0, #11
 8012932:	d807      	bhi.n	8012944 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012934:	e8df f000 	tbb	[pc, r0]
 8012938:	07060607 	.word	0x07060607
 801293c:	06060606 	.word	0x06060606
 8012940:	07070606 	.word	0x07070606
 8012944:	2001      	movs	r0, #1
 8012946:	4770      	bx	lr
 8012948:	28cb      	cmp	r0, #203	; 0xcb
 801294a:	bf18      	it	ne
 801294c:	2001      	movne	r0, #1
 801294e:	4770      	bx	lr

08012950 <rcl_get_zero_initialized_context>:
 8012950:	4a03      	ldr	r2, [pc, #12]	; (8012960 <rcl_get_zero_initialized_context+0x10>)
 8012952:	4603      	mov	r3, r0
 8012954:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012958:	e883 0003 	stmia.w	r3, {r0, r1}
 801295c:	4618      	mov	r0, r3
 801295e:	4770      	bx	lr
 8012960:	08019954 	.word	0x08019954

08012964 <rcl_context_is_valid>:
 8012964:	b118      	cbz	r0, 801296e <rcl_context_is_valid+0xa>
 8012966:	6840      	ldr	r0, [r0, #4]
 8012968:	3800      	subs	r0, #0
 801296a:	bf18      	it	ne
 801296c:	2001      	movne	r0, #1
 801296e:	4770      	bx	lr

08012970 <__cleanup_context>:
 8012970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012974:	4606      	mov	r6, r0
 8012976:	6800      	ldr	r0, [r0, #0]
 8012978:	2300      	movs	r3, #0
 801297a:	6073      	str	r3, [r6, #4]
 801297c:	2800      	cmp	r0, #0
 801297e:	d04d      	beq.n	8012a1c <__cleanup_context+0xac>
 8012980:	6947      	ldr	r7, [r0, #20]
 8012982:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8012986:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801298a:	b137      	cbz	r7, 801299a <__cleanup_context+0x2a>
 801298c:	3014      	adds	r0, #20
 801298e:	f000 fb1d 	bl	8012fcc <rcl_init_options_fini>
 8012992:	4607      	mov	r7, r0
 8012994:	2800      	cmp	r0, #0
 8012996:	d148      	bne.n	8012a2a <__cleanup_context+0xba>
 8012998:	6830      	ldr	r0, [r6, #0]
 801299a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801299c:	b143      	cbz	r3, 80129b0 <__cleanup_context+0x40>
 801299e:	3028      	adds	r0, #40	; 0x28
 80129a0:	f002 fd5e 	bl	8015460 <rmw_context_fini>
 80129a4:	b118      	cbz	r0, 80129ae <__cleanup_context+0x3e>
 80129a6:	2f00      	cmp	r7, #0
 80129a8:	d042      	beq.n	8012a30 <__cleanup_context+0xc0>
 80129aa:	f7fa feb3 	bl	800d714 <rcutils_reset_error>
 80129ae:	6830      	ldr	r0, [r6, #0]
 80129b0:	f8d0 c020 	ldr.w	ip, [r0, #32]
 80129b4:	f1bc 0f00 	cmp.w	ip, #0
 80129b8:	d01c      	beq.n	80129f4 <__cleanup_context+0x84>
 80129ba:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80129be:	2a01      	cmp	r2, #1
 80129c0:	f173 0100 	sbcs.w	r1, r3, #0
 80129c4:	db12      	blt.n	80129ec <__cleanup_context+0x7c>
 80129c6:	2400      	movs	r4, #0
 80129c8:	2500      	movs	r5, #0
 80129ca:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 80129ce:	4649      	mov	r1, r9
 80129d0:	b1c0      	cbz	r0, 8012a04 <__cleanup_context+0x94>
 80129d2:	47c0      	blx	r8
 80129d4:	6831      	ldr	r1, [r6, #0]
 80129d6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80129da:	3401      	adds	r4, #1
 80129dc:	f145 0500 	adc.w	r5, r5, #0
 80129e0:	4294      	cmp	r4, r2
 80129e2:	f8d1 c020 	ldr.w	ip, [r1, #32]
 80129e6:	eb75 0103 	sbcs.w	r1, r5, r3
 80129ea:	dbee      	blt.n	80129ca <__cleanup_context+0x5a>
 80129ec:	4660      	mov	r0, ip
 80129ee:	4649      	mov	r1, r9
 80129f0:	47c0      	blx	r8
 80129f2:	6830      	ldr	r0, [r6, #0]
 80129f4:	4649      	mov	r1, r9
 80129f6:	47c0      	blx	r8
 80129f8:	2300      	movs	r3, #0
 80129fa:	e9c6 3300 	strd	r3, r3, [r6]
 80129fe:	4638      	mov	r0, r7
 8012a00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a04:	3401      	adds	r4, #1
 8012a06:	f145 0500 	adc.w	r5, r5, #0
 8012a0a:	4294      	cmp	r4, r2
 8012a0c:	eb75 0103 	sbcs.w	r1, r5, r3
 8012a10:	dbdb      	blt.n	80129ca <__cleanup_context+0x5a>
 8012a12:	4660      	mov	r0, ip
 8012a14:	4649      	mov	r1, r9
 8012a16:	47c0      	blx	r8
 8012a18:	6830      	ldr	r0, [r6, #0]
 8012a1a:	e7eb      	b.n	80129f4 <__cleanup_context+0x84>
 8012a1c:	4607      	mov	r7, r0
 8012a1e:	2300      	movs	r3, #0
 8012a20:	e9c6 3300 	strd	r3, r3, [r6]
 8012a24:	4638      	mov	r0, r7
 8012a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a2a:	f7fa fe73 	bl	800d714 <rcutils_reset_error>
 8012a2e:	e7b3      	b.n	8012998 <__cleanup_context+0x28>
 8012a30:	f7ff ff7a 	bl	8012928 <rcl_convert_rmw_ret_to_rcl_ret>
 8012a34:	4607      	mov	r7, r0
 8012a36:	e7b8      	b.n	80129aa <__cleanup_context+0x3a>

08012a38 <rcl_expand_topic_name>:
 8012a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a3c:	b08b      	sub	sp, #44	; 0x2c
 8012a3e:	9306      	str	r3, [sp, #24]
 8012a40:	2800      	cmp	r0, #0
 8012a42:	f000 80d2 	beq.w	8012bea <rcl_expand_topic_name+0x1b2>
 8012a46:	460e      	mov	r6, r1
 8012a48:	2900      	cmp	r1, #0
 8012a4a:	f000 80ce 	beq.w	8012bea <rcl_expand_topic_name+0x1b2>
 8012a4e:	4617      	mov	r7, r2
 8012a50:	2a00      	cmp	r2, #0
 8012a52:	f000 80ca 	beq.w	8012bea <rcl_expand_topic_name+0x1b2>
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	f000 80c7 	beq.w	8012bea <rcl_expand_topic_name+0x1b2>
 8012a5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	f000 80c3 	beq.w	8012bea <rcl_expand_topic_name+0x1b2>
 8012a64:	a909      	add	r1, sp, #36	; 0x24
 8012a66:	2200      	movs	r2, #0
 8012a68:	4680      	mov	r8, r0
 8012a6a:	f001 f899 	bl	8013ba0 <rcl_validate_topic_name>
 8012a6e:	4604      	mov	r4, r0
 8012a70:	2800      	cmp	r0, #0
 8012a72:	f040 80b6 	bne.w	8012be2 <rcl_expand_topic_name+0x1aa>
 8012a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	f040 80bf 	bne.w	8012bfc <rcl_expand_topic_name+0x1c4>
 8012a7e:	4602      	mov	r2, r0
 8012a80:	a909      	add	r1, sp, #36	; 0x24
 8012a82:	4630      	mov	r0, r6
 8012a84:	f002 fa0e 	bl	8014ea4 <rmw_validate_node_name>
 8012a88:	2800      	cmp	r0, #0
 8012a8a:	f040 80b3 	bne.w	8012bf4 <rcl_expand_topic_name+0x1bc>
 8012a8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a90:	2a00      	cmp	r2, #0
 8012a92:	f040 80b8 	bne.w	8012c06 <rcl_expand_topic_name+0x1ce>
 8012a96:	a909      	add	r1, sp, #36	; 0x24
 8012a98:	4638      	mov	r0, r7
 8012a9a:	f002 f9e5 	bl	8014e68 <rmw_validate_namespace>
 8012a9e:	2800      	cmp	r0, #0
 8012aa0:	f040 80a8 	bne.w	8012bf4 <rcl_expand_topic_name+0x1bc>
 8012aa4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012aa6:	2c00      	cmp	r4, #0
 8012aa8:	f040 80f6 	bne.w	8012c98 <rcl_expand_topic_name+0x260>
 8012aac:	217b      	movs	r1, #123	; 0x7b
 8012aae:	4640      	mov	r0, r8
 8012ab0:	f005 fce2 	bl	8018478 <strchr>
 8012ab4:	f898 3000 	ldrb.w	r3, [r8]
 8012ab8:	2b2f      	cmp	r3, #47	; 0x2f
 8012aba:	4605      	mov	r5, r0
 8012abc:	f000 80c4 	beq.w	8012c48 <rcl_expand_topic_name+0x210>
 8012ac0:	2b7e      	cmp	r3, #126	; 0x7e
 8012ac2:	d16f      	bne.n	8012ba4 <rcl_expand_topic_name+0x16c>
 8012ac4:	4638      	mov	r0, r7
 8012ac6:	f7ed fb95 	bl	80001f4 <strlen>
 8012aca:	4b87      	ldr	r3, [pc, #540]	; (8012ce8 <rcl_expand_topic_name+0x2b0>)
 8012acc:	4987      	ldr	r1, [pc, #540]	; (8012cec <rcl_expand_topic_name+0x2b4>)
 8012ace:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012ad0:	9604      	str	r6, [sp, #16]
 8012ad2:	2801      	cmp	r0, #1
 8012ad4:	bf0c      	ite	eq
 8012ad6:	4618      	moveq	r0, r3
 8012ad8:	4608      	movne	r0, r1
 8012ada:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012ade:	e9cd 2300 	strd	r2, r3, [sp]
 8012ae2:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8012ae6:	f108 0101 	add.w	r1, r8, #1
 8012aea:	9105      	str	r1, [sp, #20]
 8012aec:	ab14      	add	r3, sp, #80	; 0x50
 8012aee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012af0:	f001 ffe8 	bl	8014ac4 <rcutils_format_string_limit>
 8012af4:	4682      	mov	sl, r0
 8012af6:	2800      	cmp	r0, #0
 8012af8:	f000 80d0 	beq.w	8012c9c <rcl_expand_topic_name+0x264>
 8012afc:	2d00      	cmp	r5, #0
 8012afe:	f000 80aa 	beq.w	8012c56 <rcl_expand_topic_name+0x21e>
 8012b02:	217b      	movs	r1, #123	; 0x7b
 8012b04:	f005 fcb8 	bl	8018478 <strchr>
 8012b08:	46d1      	mov	r9, sl
 8012b0a:	4605      	mov	r5, r0
 8012b0c:	9407      	str	r4, [sp, #28]
 8012b0e:	46d3      	mov	fp, sl
 8012b10:	464c      	mov	r4, r9
 8012b12:	2d00      	cmp	r5, #0
 8012b14:	f000 80c7 	beq.w	8012ca6 <rcl_expand_topic_name+0x26e>
 8012b18:	217d      	movs	r1, #125	; 0x7d
 8012b1a:	4620      	mov	r0, r4
 8012b1c:	f005 fcac 	bl	8018478 <strchr>
 8012b20:	eba0 0905 	sub.w	r9, r0, r5
 8012b24:	f109 0a01 	add.w	sl, r9, #1
 8012b28:	4871      	ldr	r0, [pc, #452]	; (8012cf0 <rcl_expand_topic_name+0x2b8>)
 8012b2a:	4652      	mov	r2, sl
 8012b2c:	4629      	mov	r1, r5
 8012b2e:	f005 fcb0 	bl	8018492 <strncmp>
 8012b32:	2800      	cmp	r0, #0
 8012b34:	f000 808d 	beq.w	8012c52 <rcl_expand_topic_name+0x21a>
 8012b38:	486e      	ldr	r0, [pc, #440]	; (8012cf4 <rcl_expand_topic_name+0x2bc>)
 8012b3a:	4652      	mov	r2, sl
 8012b3c:	4629      	mov	r1, r5
 8012b3e:	f005 fca8 	bl	8018492 <strncmp>
 8012b42:	b130      	cbz	r0, 8012b52 <rcl_expand_topic_name+0x11a>
 8012b44:	486c      	ldr	r0, [pc, #432]	; (8012cf8 <rcl_expand_topic_name+0x2c0>)
 8012b46:	4652      	mov	r2, sl
 8012b48:	4629      	mov	r1, r5
 8012b4a:	f005 fca2 	bl	8018492 <strncmp>
 8012b4e:	2800      	cmp	r0, #0
 8012b50:	d15b      	bne.n	8012c0a <rcl_expand_topic_name+0x1d2>
 8012b52:	46b9      	mov	r9, r7
 8012b54:	ab16      	add	r3, sp, #88	; 0x58
 8012b56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012b5a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012b5e:	ab14      	add	r3, sp, #80	; 0x50
 8012b60:	4628      	mov	r0, r5
 8012b62:	cb0c      	ldmia	r3, {r2, r3}
 8012b64:	4651      	mov	r1, sl
 8012b66:	f002 f8f9 	bl	8014d5c <rcutils_strndup>
 8012b6a:	4605      	mov	r5, r0
 8012b6c:	2800      	cmp	r0, #0
 8012b6e:	f000 80a4 	beq.w	8012cba <rcl_expand_topic_name+0x282>
 8012b72:	464a      	mov	r2, r9
 8012b74:	4620      	mov	r0, r4
 8012b76:	ab14      	add	r3, sp, #80	; 0x50
 8012b78:	4629      	mov	r1, r5
 8012b7a:	f001 fff5 	bl	8014b68 <rcutils_repl_str>
 8012b7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012b80:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012b82:	4604      	mov	r4, r0
 8012b84:	4628      	mov	r0, r5
 8012b86:	4798      	blx	r3
 8012b88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012b8a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012b8c:	4658      	mov	r0, fp
 8012b8e:	4798      	blx	r3
 8012b90:	2c00      	cmp	r4, #0
 8012b92:	f000 8083 	beq.w	8012c9c <rcl_expand_topic_name+0x264>
 8012b96:	217b      	movs	r1, #123	; 0x7b
 8012b98:	4620      	mov	r0, r4
 8012b9a:	f005 fc6d 	bl	8018478 <strchr>
 8012b9e:	46a3      	mov	fp, r4
 8012ba0:	4605      	mov	r5, r0
 8012ba2:	e7b6      	b.n	8012b12 <rcl_expand_topic_name+0xda>
 8012ba4:	2800      	cmp	r0, #0
 8012ba6:	d151      	bne.n	8012c4c <rcl_expand_topic_name+0x214>
 8012ba8:	4638      	mov	r0, r7
 8012baa:	f7ed fb23 	bl	80001f4 <strlen>
 8012bae:	4b53      	ldr	r3, [pc, #332]	; (8012cfc <rcl_expand_topic_name+0x2c4>)
 8012bb0:	4a53      	ldr	r2, [pc, #332]	; (8012d00 <rcl_expand_topic_name+0x2c8>)
 8012bb2:	f8cd 8010 	str.w	r8, [sp, #16]
 8012bb6:	2801      	cmp	r0, #1
 8012bb8:	bf0c      	ite	eq
 8012bba:	4618      	moveq	r0, r3
 8012bbc:	4610      	movne	r0, r2
 8012bbe:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012bc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012bc4:	e9cd 3200 	strd	r3, r2, [sp]
 8012bc8:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8012bcc:	ab14      	add	r3, sp, #80	; 0x50
 8012bce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012bd0:	f001 ff78 	bl	8014ac4 <rcutils_format_string_limit>
 8012bd4:	4682      	mov	sl, r0
 8012bd6:	4653      	mov	r3, sl
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d05f      	beq.n	8012c9c <rcl_expand_topic_name+0x264>
 8012bdc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012bde:	f8c3 a000 	str.w	sl, [r3]
 8012be2:	4620      	mov	r0, r4
 8012be4:	b00b      	add	sp, #44	; 0x2c
 8012be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bea:	240b      	movs	r4, #11
 8012bec:	4620      	mov	r0, r4
 8012bee:	b00b      	add	sp, #44	; 0x2c
 8012bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bf4:	f7ff fe98 	bl	8012928 <rcl_convert_rmw_ret_to_rcl_ret>
 8012bf8:	4604      	mov	r4, r0
 8012bfa:	e7f2      	b.n	8012be2 <rcl_expand_topic_name+0x1aa>
 8012bfc:	2467      	movs	r4, #103	; 0x67
 8012bfe:	4620      	mov	r0, r4
 8012c00:	b00b      	add	sp, #44	; 0x2c
 8012c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c06:	24c9      	movs	r4, #201	; 0xc9
 8012c08:	e7eb      	b.n	8012be2 <rcl_expand_topic_name+0x1aa>
 8012c0a:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8012c0e:	9806      	ldr	r0, [sp, #24]
 8012c10:	1c69      	adds	r1, r5, #1
 8012c12:	f7fa fe95 	bl	800d940 <rcutils_string_map_getn>
 8012c16:	4681      	mov	r9, r0
 8012c18:	2800      	cmp	r0, #0
 8012c1a:	d19b      	bne.n	8012b54 <rcl_expand_topic_name+0x11c>
 8012c1c:	aa16      	add	r2, sp, #88	; 0x58
 8012c1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8012c20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012c22:	f8c3 9000 	str.w	r9, [r3]
 8012c26:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012c2a:	ab14      	add	r3, sp, #80	; 0x50
 8012c2c:	cb0c      	ldmia	r3, {r2, r3}
 8012c2e:	4651      	mov	r1, sl
 8012c30:	4628      	mov	r0, r5
 8012c32:	f002 f893 	bl	8014d5c <rcutils_strndup>
 8012c36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012c38:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012c3a:	4798      	blx	r3
 8012c3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012c3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012c40:	4658      	mov	r0, fp
 8012c42:	4798      	blx	r3
 8012c44:	2469      	movs	r4, #105	; 0x69
 8012c46:	e7cc      	b.n	8012be2 <rcl_expand_topic_name+0x1aa>
 8012c48:	2800      	cmp	r0, #0
 8012c4a:	d03e      	beq.n	8012cca <rcl_expand_topic_name+0x292>
 8012c4c:	46c1      	mov	r9, r8
 8012c4e:	46a2      	mov	sl, r4
 8012c50:	e75c      	b.n	8012b0c <rcl_expand_topic_name+0xd4>
 8012c52:	46b1      	mov	r9, r6
 8012c54:	e77e      	b.n	8012b54 <rcl_expand_topic_name+0x11c>
 8012c56:	f89a 3000 	ldrb.w	r3, [sl]
 8012c5a:	2b2f      	cmp	r3, #47	; 0x2f
 8012c5c:	d0be      	beq.n	8012bdc <rcl_expand_topic_name+0x1a4>
 8012c5e:	4638      	mov	r0, r7
 8012c60:	f7ed fac8 	bl	80001f4 <strlen>
 8012c64:	4b25      	ldr	r3, [pc, #148]	; (8012cfc <rcl_expand_topic_name+0x2c4>)
 8012c66:	4926      	ldr	r1, [pc, #152]	; (8012d00 <rcl_expand_topic_name+0x2c8>)
 8012c68:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012c6a:	f8cd a010 	str.w	sl, [sp, #16]
 8012c6e:	2801      	cmp	r0, #1
 8012c70:	bf0c      	ite	eq
 8012c72:	4618      	moveq	r0, r3
 8012c74:	4608      	movne	r0, r1
 8012c76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012c7a:	e9cd 2300 	strd	r2, r3, [sp]
 8012c7e:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8012c82:	ab14      	add	r3, sp, #80	; 0x50
 8012c84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012c86:	f001 ff1d 	bl	8014ac4 <rcutils_format_string_limit>
 8012c8a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012c8c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012c8e:	4603      	mov	r3, r0
 8012c90:	4650      	mov	r0, sl
 8012c92:	469a      	mov	sl, r3
 8012c94:	4790      	blx	r2
 8012c96:	e79e      	b.n	8012bd6 <rcl_expand_topic_name+0x19e>
 8012c98:	24ca      	movs	r4, #202	; 0xca
 8012c9a:	e7a2      	b.n	8012be2 <rcl_expand_topic_name+0x1aa>
 8012c9c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	6013      	str	r3, [r2, #0]
 8012ca2:	240a      	movs	r4, #10
 8012ca4:	e79d      	b.n	8012be2 <rcl_expand_topic_name+0x1aa>
 8012ca6:	465b      	mov	r3, fp
 8012ca8:	9c07      	ldr	r4, [sp, #28]
 8012caa:	46da      	mov	sl, fp
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d1d2      	bne.n	8012c56 <rcl_expand_topic_name+0x21e>
 8012cb0:	f898 3000 	ldrb.w	r3, [r8]
 8012cb4:	2b2f      	cmp	r3, #47	; 0x2f
 8012cb6:	d091      	beq.n	8012bdc <rcl_expand_topic_name+0x1a4>
 8012cb8:	e776      	b.n	8012ba8 <rcl_expand_topic_name+0x170>
 8012cba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012cbc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012cbe:	601d      	str	r5, [r3, #0]
 8012cc0:	4658      	mov	r0, fp
 8012cc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012cc4:	4798      	blx	r3
 8012cc6:	240a      	movs	r4, #10
 8012cc8:	e78b      	b.n	8012be2 <rcl_expand_topic_name+0x1aa>
 8012cca:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 8012cce:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012cd2:	ab14      	add	r3, sp, #80	; 0x50
 8012cd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012cd6:	4640      	mov	r0, r8
 8012cd8:	f002 f81e 	bl	8014d18 <rcutils_strdup>
 8012cdc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012cde:	2800      	cmp	r0, #0
 8012ce0:	bf08      	it	eq
 8012ce2:	240a      	moveq	r4, #10
 8012ce4:	6018      	str	r0, [r3, #0]
 8012ce6:	e77c      	b.n	8012be2 <rcl_expand_topic_name+0x1aa>
 8012ce8:	08019920 	.word	0x08019920
 8012cec:	0801995c 	.word	0x0801995c
 8012cf0:	0801996c 	.word	0x0801996c
 8012cf4:	08019974 	.word	0x08019974
 8012cf8:	0801997c 	.word	0x0801997c
 8012cfc:	08019930 	.word	0x08019930
 8012d00:	08019964 	.word	0x08019964

08012d04 <rcl_get_default_topic_name_substitutions>:
 8012d04:	2800      	cmp	r0, #0
 8012d06:	bf0c      	ite	eq
 8012d08:	200b      	moveq	r0, #11
 8012d0a:	2000      	movne	r0, #0
 8012d0c:	4770      	bx	lr
 8012d0e:	bf00      	nop

08012d10 <rcl_init>:
 8012d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d14:	1e07      	subs	r7, r0, #0
 8012d16:	b09f      	sub	sp, #124	; 0x7c
 8012d18:	4688      	mov	r8, r1
 8012d1a:	4692      	mov	sl, r2
 8012d1c:	4699      	mov	r9, r3
 8012d1e:	f340 8097 	ble.w	8012e50 <rcl_init+0x140>
 8012d22:	2900      	cmp	r1, #0
 8012d24:	f000 8097 	beq.w	8012e56 <rcl_init+0x146>
 8012d28:	1f0d      	subs	r5, r1, #4
 8012d2a:	2400      	movs	r4, #0
 8012d2c:	f855 6f04 	ldr.w	r6, [r5, #4]!
 8012d30:	3401      	adds	r4, #1
 8012d32:	2e00      	cmp	r6, #0
 8012d34:	f000 808f 	beq.w	8012e56 <rcl_init+0x146>
 8012d38:	42a7      	cmp	r7, r4
 8012d3a:	d1f7      	bne.n	8012d2c <rcl_init+0x1c>
 8012d3c:	f1ba 0f00 	cmp.w	sl, #0
 8012d40:	f000 8089 	beq.w	8012e56 <rcl_init+0x146>
 8012d44:	f8da 4000 	ldr.w	r4, [sl]
 8012d48:	2c00      	cmp	r4, #0
 8012d4a:	f000 8084 	beq.w	8012e56 <rcl_init+0x146>
 8012d4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012d50:	ad19      	add	r5, sp, #100	; 0x64
 8012d52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012d54:	6823      	ldr	r3, [r4, #0]
 8012d56:	602b      	str	r3, [r5, #0]
 8012d58:	a819      	add	r0, sp, #100	; 0x64
 8012d5a:	f7fa fcb7 	bl	800d6cc <rcutils_allocator_is_valid>
 8012d5e:	2800      	cmp	r0, #0
 8012d60:	d079      	beq.n	8012e56 <rcl_init+0x146>
 8012d62:	f1b9 0f00 	cmp.w	r9, #0
 8012d66:	d076      	beq.n	8012e56 <rcl_init+0x146>
 8012d68:	f8d9 3000 	ldr.w	r3, [r9]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d177      	bne.n	8012e60 <rcl_init+0x150>
 8012d70:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8012d74:	2178      	movs	r1, #120	; 0x78
 8012d76:	2001      	movs	r0, #1
 8012d78:	4798      	blx	r3
 8012d7a:	4604      	mov	r4, r0
 8012d7c:	f8c9 0000 	str.w	r0, [r9]
 8012d80:	2800      	cmp	r0, #0
 8012d82:	f000 80ba 	beq.w	8012efa <rcl_init+0x1ea>
 8012d86:	a802      	add	r0, sp, #8
 8012d88:	f002 f804 	bl	8014d94 <rmw_get_zero_initialized_context>
 8012d8c:	a902      	add	r1, sp, #8
 8012d8e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8012d92:	2250      	movs	r2, #80	; 0x50
 8012d94:	ac19      	add	r4, sp, #100	; 0x64
 8012d96:	f005 fc86 	bl	80186a6 <memcpy>
 8012d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012d9c:	f8d9 5000 	ldr.w	r5, [r9]
 8012da0:	6826      	ldr	r6, [r4, #0]
 8012da2:	462c      	mov	r4, r5
 8012da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012da6:	f105 0114 	add.w	r1, r5, #20
 8012daa:	6026      	str	r6, [r4, #0]
 8012dac:	4650      	mov	r0, sl
 8012dae:	f000 f931 	bl	8013014 <rcl_init_options_copy>
 8012db2:	4606      	mov	r6, r0
 8012db4:	2800      	cmp	r0, #0
 8012db6:	d144      	bne.n	8012e42 <rcl_init+0x132>
 8012db8:	f8d9 a000 	ldr.w	sl, [r9]
 8012dbc:	463c      	mov	r4, r7
 8012dbe:	17fd      	asrs	r5, r7, #31
 8012dc0:	e9ca 4506 	strd	r4, r5, [sl, #24]
 8012dc4:	f8ca 0020 	str.w	r0, [sl, #32]
 8012dc8:	2f00      	cmp	r7, #0
 8012dca:	d050      	beq.n	8012e6e <rcl_init+0x15e>
 8012dcc:	f1b8 0f00 	cmp.w	r8, #0
 8012dd0:	d04d      	beq.n	8012e6e <rcl_init+0x15e>
 8012dd2:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8012dd6:	4638      	mov	r0, r7
 8012dd8:	2104      	movs	r1, #4
 8012dda:	4798      	blx	r3
 8012ddc:	f8ca 0020 	str.w	r0, [sl, #32]
 8012de0:	f8d9 a000 	ldr.w	sl, [r9]
 8012de4:	f8da 3020 	ldr.w	r3, [sl, #32]
 8012de8:	46d3      	mov	fp, sl
 8012dea:	b34b      	cbz	r3, 8012e40 <rcl_init+0x130>
 8012dec:	2f01      	cmp	r7, #1
 8012dee:	f175 0300 	sbcs.w	r3, r5, #0
 8012df2:	db3c      	blt.n	8012e6e <rcl_init+0x15e>
 8012df4:	f1a8 0804 	sub.w	r8, r8, #4
 8012df8:	2600      	movs	r6, #0
 8012dfa:	2700      	movs	r7, #0
 8012dfc:	e00c      	b.n	8012e18 <rcl_init+0x108>
 8012dfe:	f8d8 1000 	ldr.w	r1, [r8]
 8012e02:	f005 fc50 	bl	80186a6 <memcpy>
 8012e06:	3601      	adds	r6, #1
 8012e08:	f147 0700 	adc.w	r7, r7, #0
 8012e0c:	42bd      	cmp	r5, r7
 8012e0e:	bf08      	it	eq
 8012e10:	42b4      	cmpeq	r4, r6
 8012e12:	d02a      	beq.n	8012e6a <rcl_init+0x15a>
 8012e14:	f8d9 b000 	ldr.w	fp, [r9]
 8012e18:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8012e1c:	f7ed f9ea 	bl	80001f4 <strlen>
 8012e20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012e22:	991d      	ldr	r1, [sp, #116]	; 0x74
 8012e24:	f8db a020 	ldr.w	sl, [fp, #32]
 8012e28:	9001      	str	r0, [sp, #4]
 8012e2a:	4798      	blx	r3
 8012e2c:	f8d9 1000 	ldr.w	r1, [r9]
 8012e30:	9a01      	ldr	r2, [sp, #4]
 8012e32:	6a09      	ldr	r1, [r1, #32]
 8012e34:	00b3      	lsls	r3, r6, #2
 8012e36:	f84a 0003 	str.w	r0, [sl, r3]
 8012e3a:	58c8      	ldr	r0, [r1, r3]
 8012e3c:	2800      	cmp	r0, #0
 8012e3e:	d1de      	bne.n	8012dfe <rcl_init+0xee>
 8012e40:	260a      	movs	r6, #10
 8012e42:	4648      	mov	r0, r9
 8012e44:	f7ff fd94 	bl	8012970 <__cleanup_context>
 8012e48:	4630      	mov	r0, r6
 8012e4a:	b01f      	add	sp, #124	; 0x7c
 8012e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e50:	2900      	cmp	r1, #0
 8012e52:	f43f af73 	beq.w	8012d3c <rcl_init+0x2c>
 8012e56:	260b      	movs	r6, #11
 8012e58:	4630      	mov	r0, r6
 8012e5a:	b01f      	add	sp, #124	; 0x7c
 8012e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e60:	2664      	movs	r6, #100	; 0x64
 8012e62:	4630      	mov	r0, r6
 8012e64:	b01f      	add	sp, #124	; 0x7c
 8012e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e6a:	f8d9 a000 	ldr.w	sl, [r9]
 8012e6e:	4a2c      	ldr	r2, [pc, #176]	; (8012f20 <rcl_init+0x210>)
 8012e70:	6813      	ldr	r3, [r2, #0]
 8012e72:	3301      	adds	r3, #1
 8012e74:	d03b      	beq.n	8012eee <rcl_init+0x1de>
 8012e76:	6013      	str	r3, [r2, #0]
 8012e78:	4619      	mov	r1, r3
 8012e7a:	2000      	movs	r0, #0
 8012e7c:	f8da 4014 	ldr.w	r4, [sl, #20]
 8012e80:	f8c9 3004 	str.w	r3, [r9, #4]
 8012e84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e86:	3301      	adds	r3, #1
 8012e88:	e9c4 1006 	strd	r1, r0, [r4, #24]
 8012e8c:	d039      	beq.n	8012f02 <rcl_init+0x1f2>
 8012e8e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8012e92:	b94b      	cbnz	r3, 8012ea8 <rcl_init+0x198>
 8012e94:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8012e98:	f000 f962 	bl	8013160 <rcl_get_localhost_only>
 8012e9c:	4606      	mov	r6, r0
 8012e9e:	2800      	cmp	r0, #0
 8012ea0:	d1cf      	bne.n	8012e42 <rcl_init+0x132>
 8012ea2:	f8d9 3000 	ldr.w	r3, [r9]
 8012ea6:	695c      	ldr	r4, [r3, #20]
 8012ea8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8012eaa:	aa18      	add	r2, sp, #96	; 0x60
 8012eac:	a917      	add	r1, sp, #92	; 0x5c
 8012eae:	f000 fe65 	bl	8013b7c <rcl_validate_enclave_name>
 8012eb2:	4606      	mov	r6, r0
 8012eb4:	2800      	cmp	r0, #0
 8012eb6:	d1c4      	bne.n	8012e42 <rcl_init+0x132>
 8012eb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012eba:	bb03      	cbnz	r3, 8012efe <rcl_init+0x1ee>
 8012ebc:	f8d9 1000 	ldr.w	r1, [r9]
 8012ec0:	694b      	ldr	r3, [r1, #20]
 8012ec2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8012ec4:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8012ec8:	f000 fbb8 	bl	801363c <rcl_get_security_options_from_environment>
 8012ecc:	4606      	mov	r6, r0
 8012ece:	2800      	cmp	r0, #0
 8012ed0:	d1b7      	bne.n	8012e42 <rcl_init+0x132>
 8012ed2:	f8d9 1000 	ldr.w	r1, [r9]
 8012ed6:	6948      	ldr	r0, [r1, #20]
 8012ed8:	3128      	adds	r1, #40	; 0x28
 8012eda:	3018      	adds	r0, #24
 8012edc:	f002 f988 	bl	80151f0 <rmw_init>
 8012ee0:	4606      	mov	r6, r0
 8012ee2:	2800      	cmp	r0, #0
 8012ee4:	d0b8      	beq.n	8012e58 <rcl_init+0x148>
 8012ee6:	f7ff fd1f 	bl	8012928 <rcl_convert_rmw_ret_to_rcl_ret>
 8012eea:	4606      	mov	r6, r0
 8012eec:	e7a9      	b.n	8012e42 <rcl_init+0x132>
 8012eee:	2401      	movs	r4, #1
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	4621      	mov	r1, r4
 8012ef4:	6014      	str	r4, [r2, #0]
 8012ef6:	4623      	mov	r3, r4
 8012ef8:	e7c0      	b.n	8012e7c <rcl_init+0x16c>
 8012efa:	260a      	movs	r6, #10
 8012efc:	e7ac      	b.n	8012e58 <rcl_init+0x148>
 8012efe:	2601      	movs	r6, #1
 8012f00:	e79f      	b.n	8012e42 <rcl_init+0x132>
 8012f02:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8012f06:	f004 fba3 	bl	8017650 <rcl_get_default_domain_id>
 8012f0a:	4606      	mov	r6, r0
 8012f0c:	2800      	cmp	r0, #0
 8012f0e:	d198      	bne.n	8012e42 <rcl_init+0x132>
 8012f10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012f12:	3301      	adds	r3, #1
 8012f14:	f8d9 3000 	ldr.w	r3, [r9]
 8012f18:	bf08      	it	eq
 8012f1a:	6260      	streq	r0, [r4, #36]	; 0x24
 8012f1c:	695c      	ldr	r4, [r3, #20]
 8012f1e:	e7b6      	b.n	8012e8e <rcl_init+0x17e>
 8012f20:	20009c28 	.word	0x20009c28

08012f24 <rcl_get_zero_initialized_init_options>:
 8012f24:	2000      	movs	r0, #0
 8012f26:	4770      	bx	lr

08012f28 <rcl_init_options_init>:
 8012f28:	b084      	sub	sp, #16
 8012f2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f2c:	b091      	sub	sp, #68	; 0x44
 8012f2e:	af17      	add	r7, sp, #92	; 0x5c
 8012f30:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 8012f34:	2800      	cmp	r0, #0
 8012f36:	d044      	beq.n	8012fc2 <rcl_init_options_init+0x9a>
 8012f38:	6803      	ldr	r3, [r0, #0]
 8012f3a:	4606      	mov	r6, r0
 8012f3c:	b133      	cbz	r3, 8012f4c <rcl_init_options_init+0x24>
 8012f3e:	2464      	movs	r4, #100	; 0x64
 8012f40:	4620      	mov	r0, r4
 8012f42:	b011      	add	sp, #68	; 0x44
 8012f44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012f48:	b004      	add	sp, #16
 8012f4a:	4770      	bx	lr
 8012f4c:	4638      	mov	r0, r7
 8012f4e:	f7fa fbbd 	bl	800d6cc <rcutils_allocator_is_valid>
 8012f52:	2800      	cmp	r0, #0
 8012f54:	d035      	beq.n	8012fc2 <rcl_init_options_init+0x9a>
 8012f56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012f58:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8012f5a:	2050      	movs	r0, #80	; 0x50
 8012f5c:	4798      	blx	r3
 8012f5e:	4604      	mov	r4, r0
 8012f60:	6030      	str	r0, [r6, #0]
 8012f62:	2800      	cmp	r0, #0
 8012f64:	d02f      	beq.n	8012fc6 <rcl_init_options_init+0x9e>
 8012f66:	46bc      	mov	ip, r7
 8012f68:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012f6c:	4625      	mov	r5, r4
 8012f6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012f70:	f8dc 3000 	ldr.w	r3, [ip]
 8012f74:	602b      	str	r3, [r5, #0]
 8012f76:	a802      	add	r0, sp, #8
 8012f78:	ad02      	add	r5, sp, #8
 8012f7a:	f001 ff13 	bl	8014da4 <rmw_get_zero_initialized_init_options>
 8012f7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012f80:	3418      	adds	r4, #24
 8012f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012f8c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012f90:	6833      	ldr	r3, [r6, #0]
 8012f92:	e884 0003 	stmia.w	r4, {r0, r1}
 8012f96:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8012f9a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012f9e:	f103 0018 	add.w	r0, r3, #24
 8012fa2:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8012fa6:	f002 f849 	bl	801503c <rmw_init_options_init>
 8012faa:	4604      	mov	r4, r0
 8012fac:	2800      	cmp	r0, #0
 8012fae:	d0c7      	beq.n	8012f40 <rcl_init_options_init+0x18>
 8012fb0:	6830      	ldr	r0, [r6, #0]
 8012fb2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012fb4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8012fb6:	4798      	blx	r3
 8012fb8:	4620      	mov	r0, r4
 8012fba:	f7ff fcb5 	bl	8012928 <rcl_convert_rmw_ret_to_rcl_ret>
 8012fbe:	4604      	mov	r4, r0
 8012fc0:	e7be      	b.n	8012f40 <rcl_init_options_init+0x18>
 8012fc2:	240b      	movs	r4, #11
 8012fc4:	e7bc      	b.n	8012f40 <rcl_init_options_init+0x18>
 8012fc6:	240a      	movs	r4, #10
 8012fc8:	e7ba      	b.n	8012f40 <rcl_init_options_init+0x18>
 8012fca:	bf00      	nop

08012fcc <rcl_init_options_fini>:
 8012fcc:	b570      	push	{r4, r5, r6, lr}
 8012fce:	b086      	sub	sp, #24
 8012fd0:	b1c0      	cbz	r0, 8013004 <rcl_init_options_fini+0x38>
 8012fd2:	6804      	ldr	r4, [r0, #0]
 8012fd4:	4606      	mov	r6, r0
 8012fd6:	b1ac      	cbz	r4, 8013004 <rcl_init_options_fini+0x38>
 8012fd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012fda:	ad01      	add	r5, sp, #4
 8012fdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012fde:	6823      	ldr	r3, [r4, #0]
 8012fe0:	602b      	str	r3, [r5, #0]
 8012fe2:	a801      	add	r0, sp, #4
 8012fe4:	f7fa fb72 	bl	800d6cc <rcutils_allocator_is_valid>
 8012fe8:	b160      	cbz	r0, 8013004 <rcl_init_options_fini+0x38>
 8012fea:	6830      	ldr	r0, [r6, #0]
 8012fec:	3018      	adds	r0, #24
 8012fee:	f002 f8bf 	bl	8015170 <rmw_init_options_fini>
 8012ff2:	4604      	mov	r4, r0
 8012ff4:	b950      	cbnz	r0, 801300c <rcl_init_options_fini+0x40>
 8012ff6:	6830      	ldr	r0, [r6, #0]
 8012ff8:	9b02      	ldr	r3, [sp, #8]
 8012ffa:	9905      	ldr	r1, [sp, #20]
 8012ffc:	4798      	blx	r3
 8012ffe:	4620      	mov	r0, r4
 8013000:	b006      	add	sp, #24
 8013002:	bd70      	pop	{r4, r5, r6, pc}
 8013004:	240b      	movs	r4, #11
 8013006:	4620      	mov	r0, r4
 8013008:	b006      	add	sp, #24
 801300a:	bd70      	pop	{r4, r5, r6, pc}
 801300c:	f7ff fc8c 	bl	8012928 <rcl_convert_rmw_ret_to_rcl_ret>
 8013010:	4604      	mov	r4, r0
 8013012:	e7f8      	b.n	8013006 <rcl_init_options_fini+0x3a>

08013014 <rcl_init_options_copy>:
 8013014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013018:	b096      	sub	sp, #88	; 0x58
 801301a:	2800      	cmp	r0, #0
 801301c:	d063      	beq.n	80130e6 <rcl_init_options_copy+0xd2>
 801301e:	6806      	ldr	r6, [r0, #0]
 8013020:	4605      	mov	r5, r0
 8013022:	2e00      	cmp	r6, #0
 8013024:	d05f      	beq.n	80130e6 <rcl_init_options_copy+0xd2>
 8013026:	460c      	mov	r4, r1
 8013028:	2900      	cmp	r1, #0
 801302a:	d05c      	beq.n	80130e6 <rcl_init_options_copy+0xd2>
 801302c:	680b      	ldr	r3, [r1, #0]
 801302e:	b123      	cbz	r3, 801303a <rcl_init_options_copy+0x26>
 8013030:	2664      	movs	r6, #100	; 0x64
 8013032:	4630      	mov	r0, r6
 8013034:	b016      	add	sp, #88	; 0x58
 8013036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801303a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801303c:	af11      	add	r7, sp, #68	; 0x44
 801303e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013040:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 8013044:	6833      	ldr	r3, [r6, #0]
 8013046:	603b      	str	r3, [r7, #0]
 8013048:	4640      	mov	r0, r8
 801304a:	f7fa fb3f 	bl	800d6cc <rcutils_allocator_is_valid>
 801304e:	2800      	cmp	r0, #0
 8013050:	d049      	beq.n	80130e6 <rcl_init_options_copy+0xd2>
 8013052:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013054:	9915      	ldr	r1, [sp, #84]	; 0x54
 8013056:	2050      	movs	r0, #80	; 0x50
 8013058:	4798      	blx	r3
 801305a:	4606      	mov	r6, r0
 801305c:	6020      	str	r0, [r4, #0]
 801305e:	2800      	cmp	r0, #0
 8013060:	d077      	beq.n	8013152 <rcl_init_options_copy+0x13e>
 8013062:	46c4      	mov	ip, r8
 8013064:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013068:	4637      	mov	r7, r6
 801306a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801306c:	f8dc 3000 	ldr.w	r3, [ip]
 8013070:	603b      	str	r3, [r7, #0]
 8013072:	a802      	add	r0, sp, #8
 8013074:	af02      	add	r7, sp, #8
 8013076:	f001 fe95 	bl	8014da4 <rmw_get_zero_initialized_init_options>
 801307a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801307c:	3618      	adds	r6, #24
 801307e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013080:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013082:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013084:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013086:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013088:	e897 0003 	ldmia.w	r7, {r0, r1}
 801308c:	ab16      	add	r3, sp, #88	; 0x58
 801308e:	e886 0003 	stmia.w	r6, {r0, r1}
 8013092:	e913 0003 	ldmdb	r3, {r0, r1}
 8013096:	6823      	ldr	r3, [r4, #0]
 8013098:	e88d 0003 	stmia.w	sp, {r0, r1}
 801309c:	f103 0018 	add.w	r0, r3, #24
 80130a0:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80130a4:	f001 ffca 	bl	801503c <rmw_init_options_init>
 80130a8:	4606      	mov	r6, r0
 80130aa:	bb08      	cbnz	r0, 80130f0 <rcl_init_options_copy+0xdc>
 80130ac:	682f      	ldr	r7, [r5, #0]
 80130ae:	f8d4 c000 	ldr.w	ip, [r4]
 80130b2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80130b4:	4666      	mov	r6, ip
 80130b6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80130b8:	683b      	ldr	r3, [r7, #0]
 80130ba:	6033      	str	r3, [r6, #0]
 80130bc:	f10c 0018 	add.w	r0, ip, #24
 80130c0:	f002 f856 	bl	8015170 <rmw_init_options_fini>
 80130c4:	4607      	mov	r7, r0
 80130c6:	b1f0      	cbz	r0, 8013106 <rcl_init_options_copy+0xf2>
 80130c8:	f7fa fb0e 	bl	800d6e8 <rcutils_get_error_string>
 80130cc:	f7fa fb22 	bl	800d714 <rcutils_reset_error>
 80130d0:	4620      	mov	r0, r4
 80130d2:	f7ff ff7b 	bl	8012fcc <rcl_init_options_fini>
 80130d6:	4606      	mov	r6, r0
 80130d8:	2800      	cmp	r0, #0
 80130da:	d1aa      	bne.n	8013032 <rcl_init_options_copy+0x1e>
 80130dc:	4638      	mov	r0, r7
 80130de:	f7ff fc23 	bl	8012928 <rcl_convert_rmw_ret_to_rcl_ret>
 80130e2:	4606      	mov	r6, r0
 80130e4:	e7a5      	b.n	8013032 <rcl_init_options_copy+0x1e>
 80130e6:	260b      	movs	r6, #11
 80130e8:	4630      	mov	r0, r6
 80130ea:	b016      	add	sp, #88	; 0x58
 80130ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80130f2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80130f4:	6820      	ldr	r0, [r4, #0]
 80130f6:	4798      	blx	r3
 80130f8:	4630      	mov	r0, r6
 80130fa:	f7ff fc15 	bl	8012928 <rcl_convert_rmw_ret_to_rcl_ret>
 80130fe:	4606      	mov	r6, r0
 8013100:	2800      	cmp	r0, #0
 8013102:	d0d3      	beq.n	80130ac <rcl_init_options_copy+0x98>
 8013104:	e795      	b.n	8013032 <rcl_init_options_copy+0x1e>
 8013106:	a802      	add	r0, sp, #8
 8013108:	ae02      	add	r6, sp, #8
 801310a:	6827      	ldr	r7, [r4, #0]
 801310c:	f001 fe4a 	bl	8014da4 <rmw_get_zero_initialized_init_options>
 8013110:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013112:	3718      	adds	r7, #24
 8013114:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013116:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013118:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801311a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801311c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801311e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013122:	682a      	ldr	r2, [r5, #0]
 8013124:	6823      	ldr	r3, [r4, #0]
 8013126:	e887 0003 	stmia.w	r7, {r0, r1}
 801312a:	f102 0018 	add.w	r0, r2, #24
 801312e:	f103 0118 	add.w	r1, r3, #24
 8013132:	f001 ffdb 	bl	80150ec <rmw_init_options_copy>
 8013136:	4606      	mov	r6, r0
 8013138:	2800      	cmp	r0, #0
 801313a:	f43f af7a 	beq.w	8013032 <rcl_init_options_copy+0x1e>
 801313e:	f7fa fad3 	bl	800d6e8 <rcutils_get_error_string>
 8013142:	f7fa fae7 	bl	800d714 <rcutils_reset_error>
 8013146:	4620      	mov	r0, r4
 8013148:	f7ff ff40 	bl	8012fcc <rcl_init_options_fini>
 801314c:	b118      	cbz	r0, 8013156 <rcl_init_options_copy+0x142>
 801314e:	4606      	mov	r6, r0
 8013150:	e76f      	b.n	8013032 <rcl_init_options_copy+0x1e>
 8013152:	260a      	movs	r6, #10
 8013154:	e76d      	b.n	8013032 <rcl_init_options_copy+0x1e>
 8013156:	4630      	mov	r0, r6
 8013158:	f7ff fbe6 	bl	8012928 <rcl_convert_rmw_ret_to_rcl_ret>
 801315c:	4606      	mov	r6, r0
 801315e:	e768      	b.n	8013032 <rcl_init_options_copy+0x1e>

08013160 <rcl_get_localhost_only>:
 8013160:	b510      	push	{r4, lr}
 8013162:	b082      	sub	sp, #8
 8013164:	2300      	movs	r3, #0
 8013166:	9301      	str	r3, [sp, #4]
 8013168:	b1b8      	cbz	r0, 801319a <rcl_get_localhost_only+0x3a>
 801316a:	4604      	mov	r4, r0
 801316c:	a901      	add	r1, sp, #4
 801316e:	480c      	ldr	r0, [pc, #48]	; (80131a0 <rcl_get_localhost_only+0x40>)
 8013170:	f001 fce2 	bl	8014b38 <rcutils_get_env>
 8013174:	b110      	cbz	r0, 801317c <rcl_get_localhost_only+0x1c>
 8013176:	2001      	movs	r0, #1
 8013178:	b002      	add	sp, #8
 801317a:	bd10      	pop	{r4, pc}
 801317c:	9b01      	ldr	r3, [sp, #4]
 801317e:	b113      	cbz	r3, 8013186 <rcl_get_localhost_only+0x26>
 8013180:	781a      	ldrb	r2, [r3, #0]
 8013182:	2a31      	cmp	r2, #49	; 0x31
 8013184:	d004      	beq.n	8013190 <rcl_get_localhost_only+0x30>
 8013186:	2302      	movs	r3, #2
 8013188:	2000      	movs	r0, #0
 801318a:	7023      	strb	r3, [r4, #0]
 801318c:	b002      	add	sp, #8
 801318e:	bd10      	pop	{r4, pc}
 8013190:	785b      	ldrb	r3, [r3, #1]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d1f7      	bne.n	8013186 <rcl_get_localhost_only+0x26>
 8013196:	2301      	movs	r3, #1
 8013198:	e7f6      	b.n	8013188 <rcl_get_localhost_only+0x28>
 801319a:	200b      	movs	r0, #11
 801319c:	b002      	add	sp, #8
 801319e:	bd10      	pop	{r4, pc}
 80131a0:	08019988 	.word	0x08019988

080131a4 <rcl_get_zero_initialized_node>:
 80131a4:	4a03      	ldr	r2, [pc, #12]	; (80131b4 <rcl_get_zero_initialized_node+0x10>)
 80131a6:	4603      	mov	r3, r0
 80131a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80131ac:	e883 0003 	stmia.w	r3, {r0, r1}
 80131b0:	4618      	mov	r0, r3
 80131b2:	4770      	bx	lr
 80131b4:	080199a8 	.word	0x080199a8

080131b8 <rcl_node_init>:
 80131b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131bc:	b09b      	sub	sp, #108	; 0x6c
 80131be:	4604      	mov	r4, r0
 80131c0:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 80131c4:	f04f 0c00 	mov.w	ip, #0
 80131c8:	a815      	add	r0, sp, #84	; 0x54
 80131ca:	460e      	mov	r6, r1
 80131cc:	4615      	mov	r5, r2
 80131ce:	461f      	mov	r7, r3
 80131d0:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 80131d4:	f004 faf8 	bl	80177c8 <rcl_guard_condition_get_default_options>
 80131d8:	f1b8 0f00 	cmp.w	r8, #0
 80131dc:	f000 80fd 	beq.w	80133da <rcl_node_init+0x222>
 80131e0:	f108 0b04 	add.w	fp, r8, #4
 80131e4:	4658      	mov	r0, fp
 80131e6:	f7fa fa71 	bl	800d6cc <rcutils_allocator_is_valid>
 80131ea:	2800      	cmp	r0, #0
 80131ec:	f000 80f5 	beq.w	80133da <rcl_node_init+0x222>
 80131f0:	2e00      	cmp	r6, #0
 80131f2:	f000 80f2 	beq.w	80133da <rcl_node_init+0x222>
 80131f6:	2d00      	cmp	r5, #0
 80131f8:	f000 80ef 	beq.w	80133da <rcl_node_init+0x222>
 80131fc:	2c00      	cmp	r4, #0
 80131fe:	f000 80ec 	beq.w	80133da <rcl_node_init+0x222>
 8013202:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013206:	f1b9 0f00 	cmp.w	r9, #0
 801320a:	f040 8112 	bne.w	8013432 <rcl_node_init+0x27a>
 801320e:	2f00      	cmp	r7, #0
 8013210:	f000 80e3 	beq.w	80133da <rcl_node_init+0x222>
 8013214:	4638      	mov	r0, r7
 8013216:	f7ff fba5 	bl	8012964 <rcl_context_is_valid>
 801321a:	4682      	mov	sl, r0
 801321c:	2800      	cmp	r0, #0
 801321e:	f000 80e2 	beq.w	80133e6 <rcl_node_init+0x22e>
 8013222:	464a      	mov	r2, r9
 8013224:	a914      	add	r1, sp, #80	; 0x50
 8013226:	4630      	mov	r0, r6
 8013228:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 801322c:	f001 fe3a 	bl	8014ea4 <rmw_validate_node_name>
 8013230:	4681      	mov	r9, r0
 8013232:	2800      	cmp	r0, #0
 8013234:	f040 80d3 	bne.w	80133de <rcl_node_init+0x226>
 8013238:	9814      	ldr	r0, [sp, #80]	; 0x50
 801323a:	2800      	cmp	r0, #0
 801323c:	f040 8105 	bne.w	801344a <rcl_node_init+0x292>
 8013240:	4628      	mov	r0, r5
 8013242:	f7ec ffd7 	bl	80001f4 <strlen>
 8013246:	2800      	cmp	r0, #0
 8013248:	f040 80d0 	bne.w	80133ec <rcl_node_init+0x234>
 801324c:	4d8e      	ldr	r5, [pc, #568]	; (8013488 <rcl_node_init+0x2d0>)
 801324e:	a914      	add	r1, sp, #80	; 0x50
 8013250:	2200      	movs	r2, #0
 8013252:	4628      	mov	r0, r5
 8013254:	f001 fe08 	bl	8014e68 <rmw_validate_namespace>
 8013258:	4681      	mov	r9, r0
 801325a:	2800      	cmp	r0, #0
 801325c:	f040 80bf 	bne.w	80133de <rcl_node_init+0x226>
 8013260:	4682      	mov	sl, r0
 8013262:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013264:	2b00      	cmp	r3, #0
 8013266:	f040 80f5 	bne.w	8013454 <rcl_node_init+0x29c>
 801326a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801326e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013272:	9307      	str	r3, [sp, #28]
 8013274:	2030      	movs	r0, #48	; 0x30
 8013276:	4790      	blx	r2
 8013278:	4681      	mov	r9, r0
 801327a:	6060      	str	r0, [r4, #4]
 801327c:	2800      	cmp	r0, #0
 801327e:	f000 80de 	beq.w	801343e <rcl_node_init+0x286>
 8013282:	9b07      	ldr	r3, [sp, #28]
 8013284:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8013288:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 801328c:	a80a      	add	r0, sp, #40	; 0x28
 801328e:	f7f9 faad 	bl	800c7ec <rcl_node_get_default_options>
 8013292:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8013296:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801329a:	46cc      	mov	ip, r9
 801329c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80132a0:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80132a4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80132a8:	6861      	ldr	r1, [r4, #4]
 80132aa:	6027      	str	r7, [r4, #0]
 80132ac:	4640      	mov	r0, r8
 80132ae:	f7f9 fab9 	bl	800c824 <rcl_node_options_copy>
 80132b2:	2800      	cmp	r0, #0
 80132b4:	d167      	bne.n	8013386 <rcl_node_init+0x1ce>
 80132b6:	4628      	mov	r0, r5
 80132b8:	f7ec ff9c 	bl	80001f4 <strlen>
 80132bc:	4428      	add	r0, r5
 80132be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80132c2:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80132c6:	2b2f      	cmp	r3, #47	; 0x2f
 80132c8:	bf08      	it	eq
 80132ca:	4970      	ldreq	r1, [pc, #448]	; (801348c <rcl_node_init+0x2d4>)
 80132cc:	f8db 3010 	ldr.w	r3, [fp, #16]
 80132d0:	bf18      	it	ne
 80132d2:	496f      	ldrne	r1, [pc, #444]	; (8013490 <rcl_node_init+0x2d8>)
 80132d4:	9604      	str	r6, [sp, #16]
 80132d6:	e9cd 1502 	strd	r1, r5, [sp, #8]
 80132da:	e9cd 3200 	strd	r3, r2, [sp]
 80132de:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80132e2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80132e6:	f001 fbed 	bl	8014ac4 <rcutils_format_string_limit>
 80132ea:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 80132ee:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80132f2:	f8d9 3000 	ldr.w	r3, [r9]
 80132f6:	9313      	str	r3, [sp, #76]	; 0x4c
 80132f8:	1c59      	adds	r1, r3, #1
 80132fa:	f000 80b7 	beq.w	801346c <rcl_node_init+0x2b4>
 80132fe:	683a      	ldr	r2, [r7, #0]
 8013300:	f8c9 301c 	str.w	r3, [r9, #28]
 8013304:	6952      	ldr	r2, [r2, #20]
 8013306:	6821      	ldr	r1, [r4, #0]
 8013308:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 801330c:	6808      	ldr	r0, [r1, #0]
 801330e:	f1a2 0201 	sub.w	r2, r2, #1
 8013312:	fab2 f282 	clz	r2, r2
 8013316:	0952      	lsrs	r2, r2, #5
 8013318:	9200      	str	r2, [sp, #0]
 801331a:	4631      	mov	r1, r6
 801331c:	3028      	adds	r0, #40	; 0x28
 801331e:	462a      	mov	r2, r5
 8013320:	f002 f9ce 	bl	80156c0 <rmw_create_node>
 8013324:	6863      	ldr	r3, [r4, #4]
 8013326:	f8c9 0020 	str.w	r0, [r9, #32]
 801332a:	6a18      	ldr	r0, [r3, #32]
 801332c:	b368      	cbz	r0, 801338a <rcl_node_init+0x1d2>
 801332e:	f002 fa59 	bl	80157e4 <rmw_node_get_graph_guard_condition>
 8013332:	4681      	mov	r9, r0
 8013334:	b338      	cbz	r0, 8013386 <rcl_node_init+0x1ce>
 8013336:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801333a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801333e:	6866      	ldr	r6, [r4, #4]
 8013340:	2008      	movs	r0, #8
 8013342:	4798      	blx	r3
 8013344:	6863      	ldr	r3, [r4, #4]
 8013346:	6270      	str	r0, [r6, #36]	; 0x24
 8013348:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 801334a:	b1f6      	cbz	r6, 801338a <rcl_node_init+0x1d2>
 801334c:	a808      	add	r0, sp, #32
 801334e:	f004 f9b3 	bl	80176b8 <rcl_get_zero_initialized_guard_condition>
 8013352:	a808      	add	r0, sp, #32
 8013354:	c803      	ldmia	r0, {r0, r1}
 8013356:	e886 0003 	stmia.w	r6, {r0, r1}
 801335a:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 801335e:	ae15      	add	r6, sp, #84	; 0x54
 8013360:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013362:	f8db 3000 	ldr.w	r3, [fp]
 8013366:	6033      	str	r3, [r6, #0]
 8013368:	ab1a      	add	r3, sp, #104	; 0x68
 801336a:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801336e:	6866      	ldr	r6, [r4, #4]
 8013370:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8013372:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013376:	4649      	mov	r1, r9
 8013378:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801337a:	4630      	mov	r0, r6
 801337c:	463a      	mov	r2, r7
 801337e:	f004 f9a5 	bl	80176cc <rcl_guard_condition_init_from_rmw>
 8013382:	4681      	mov	r9, r0
 8013384:	b328      	cbz	r0, 80133d2 <rcl_node_init+0x21a>
 8013386:	6863      	ldr	r3, [r4, #4]
 8013388:	b1f3      	cbz	r3, 80133c8 <rcl_node_init+0x210>
 801338a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801338c:	b128      	cbz	r0, 801339a <rcl_node_init+0x1e2>
 801338e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013392:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013396:	4798      	blx	r3
 8013398:	6863      	ldr	r3, [r4, #4]
 801339a:	6a18      	ldr	r0, [r3, #32]
 801339c:	b110      	cbz	r0, 80133a4 <rcl_node_init+0x1ec>
 801339e:	f002 f9a7 	bl	80156f0 <rmw_destroy_node>
 80133a2:	6863      	ldr	r3, [r4, #4]
 80133a4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80133a6:	b148      	cbz	r0, 80133bc <rcl_node_init+0x204>
 80133a8:	f004 f9e8 	bl	801777c <rcl_guard_condition_fini>
 80133ac:	6862      	ldr	r2, [r4, #4]
 80133ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80133b2:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80133b4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80133b8:	4798      	blx	r3
 80133ba:	6863      	ldr	r3, [r4, #4]
 80133bc:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80133c0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80133c4:	4618      	mov	r0, r3
 80133c6:	4790      	blx	r2
 80133c8:	2300      	movs	r3, #0
 80133ca:	e9c4 3300 	strd	r3, r3, [r4]
 80133ce:	f04f 0901 	mov.w	r9, #1
 80133d2:	f1ba 0f00 	cmp.w	sl, #0
 80133d6:	d125      	bne.n	8013424 <rcl_node_init+0x26c>
 80133d8:	e001      	b.n	80133de <rcl_node_init+0x226>
 80133da:	f04f 090b 	mov.w	r9, #11
 80133de:	4648      	mov	r0, r9
 80133e0:	b01b      	add	sp, #108	; 0x6c
 80133e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133e6:	f04f 0965 	mov.w	r9, #101	; 0x65
 80133ea:	e7f8      	b.n	80133de <rcl_node_init+0x226>
 80133ec:	782b      	ldrb	r3, [r5, #0]
 80133ee:	2b2f      	cmp	r3, #47	; 0x2f
 80133f0:	f43f af2d 	beq.w	801324e <rcl_node_init+0x96>
 80133f4:	4927      	ldr	r1, [pc, #156]	; (8013494 <rcl_node_init+0x2dc>)
 80133f6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80133fa:	9300      	str	r3, [sp, #0]
 80133fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013400:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8013404:	9503      	str	r5, [sp, #12]
 8013406:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 801340a:	f001 fb5b 	bl	8014ac4 <rcutils_format_string_limit>
 801340e:	4605      	mov	r5, r0
 8013410:	b348      	cbz	r0, 8013466 <rcl_node_init+0x2ae>
 8013412:	2200      	movs	r2, #0
 8013414:	a914      	add	r1, sp, #80	; 0x50
 8013416:	9214      	str	r2, [sp, #80]	; 0x50
 8013418:	f001 fd26 	bl	8014e68 <rmw_validate_namespace>
 801341c:	4681      	mov	r9, r0
 801341e:	2800      	cmp	r0, #0
 8013420:	f43f af1f 	beq.w	8013262 <rcl_node_init+0xaa>
 8013424:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013428:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801342c:	4628      	mov	r0, r5
 801342e:	4798      	blx	r3
 8013430:	e7d5      	b.n	80133de <rcl_node_init+0x226>
 8013432:	f04f 0964 	mov.w	r9, #100	; 0x64
 8013436:	4648      	mov	r0, r9
 8013438:	b01b      	add	sp, #108	; 0x6c
 801343a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801343e:	f04f 090a 	mov.w	r9, #10
 8013442:	f1ba 0f00 	cmp.w	sl, #0
 8013446:	d1ed      	bne.n	8013424 <rcl_node_init+0x26c>
 8013448:	e7c9      	b.n	80133de <rcl_node_init+0x226>
 801344a:	f001 fd7d 	bl	8014f48 <rmw_node_name_validation_result_string>
 801344e:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 8013452:	e7c4      	b.n	80133de <rcl_node_init+0x226>
 8013454:	4618      	mov	r0, r3
 8013456:	f001 fd19 	bl	8014e8c <rmw_namespace_validation_result_string>
 801345a:	f04f 09ca 	mov.w	r9, #202	; 0xca
 801345e:	f1ba 0f00 	cmp.w	sl, #0
 8013462:	d1df      	bne.n	8013424 <rcl_node_init+0x26c>
 8013464:	e7bb      	b.n	80133de <rcl_node_init+0x226>
 8013466:	f04f 090a 	mov.w	r9, #10
 801346a:	e7b8      	b.n	80133de <rcl_node_init+0x226>
 801346c:	a813      	add	r0, sp, #76	; 0x4c
 801346e:	f004 f8ef 	bl	8017650 <rcl_get_default_domain_id>
 8013472:	2800      	cmp	r0, #0
 8013474:	d187      	bne.n	8013386 <rcl_node_init+0x1ce>
 8013476:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013478:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801347c:	1c5a      	adds	r2, r3, #1
 801347e:	bf04      	itt	eq
 8013480:	9013      	streq	r0, [sp, #76]	; 0x4c
 8013482:	4603      	moveq	r3, r0
 8013484:	e73b      	b.n	80132fe <rcl_node_init+0x146>
 8013486:	bf00      	nop
 8013488:	080199a0 	.word	0x080199a0
 801348c:	08019930 	.word	0x08019930
 8013490:	08019964 	.word	0x08019964
 8013494:	080199a4 	.word	0x080199a4

08013498 <rcl_node_is_valid>:
 8013498:	b130      	cbz	r0, 80134a8 <rcl_node_is_valid+0x10>
 801349a:	6843      	ldr	r3, [r0, #4]
 801349c:	b123      	cbz	r3, 80134a8 <rcl_node_is_valid+0x10>
 801349e:	6a1b      	ldr	r3, [r3, #32]
 80134a0:	b113      	cbz	r3, 80134a8 <rcl_node_is_valid+0x10>
 80134a2:	6800      	ldr	r0, [r0, #0]
 80134a4:	f7ff ba5e 	b.w	8012964 <rcl_context_is_valid>
 80134a8:	2000      	movs	r0, #0
 80134aa:	4770      	bx	lr

080134ac <rcl_node_get_name>:
 80134ac:	b120      	cbz	r0, 80134b8 <rcl_node_get_name+0xc>
 80134ae:	6840      	ldr	r0, [r0, #4]
 80134b0:	b110      	cbz	r0, 80134b8 <rcl_node_get_name+0xc>
 80134b2:	6a00      	ldr	r0, [r0, #32]
 80134b4:	b100      	cbz	r0, 80134b8 <rcl_node_get_name+0xc>
 80134b6:	6880      	ldr	r0, [r0, #8]
 80134b8:	4770      	bx	lr
 80134ba:	bf00      	nop

080134bc <rcl_node_get_namespace>:
 80134bc:	b120      	cbz	r0, 80134c8 <rcl_node_get_namespace+0xc>
 80134be:	6840      	ldr	r0, [r0, #4]
 80134c0:	b110      	cbz	r0, 80134c8 <rcl_node_get_namespace+0xc>
 80134c2:	6a00      	ldr	r0, [r0, #32]
 80134c4:	b100      	cbz	r0, 80134c8 <rcl_node_get_namespace+0xc>
 80134c6:	68c0      	ldr	r0, [r0, #12]
 80134c8:	4770      	bx	lr
 80134ca:	bf00      	nop

080134cc <rcl_node_get_options>:
 80134cc:	b128      	cbz	r0, 80134da <rcl_node_get_options+0xe>
 80134ce:	6840      	ldr	r0, [r0, #4]
 80134d0:	b118      	cbz	r0, 80134da <rcl_node_get_options+0xe>
 80134d2:	6a03      	ldr	r3, [r0, #32]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	bf08      	it	eq
 80134d8:	2000      	moveq	r0, #0
 80134da:	4770      	bx	lr

080134dc <rcl_node_get_rmw_handle>:
 80134dc:	b110      	cbz	r0, 80134e4 <rcl_node_get_rmw_handle+0x8>
 80134de:	6840      	ldr	r0, [r0, #4]
 80134e0:	b100      	cbz	r0, 80134e4 <rcl_node_get_rmw_handle+0x8>
 80134e2:	6a00      	ldr	r0, [r0, #32]
 80134e4:	4770      	bx	lr
 80134e6:	bf00      	nop

080134e8 <exact_match_lookup>:
 80134e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134ea:	f102 0708 	add.w	r7, r2, #8
 80134ee:	460b      	mov	r3, r1
 80134f0:	4614      	mov	r4, r2
 80134f2:	4606      	mov	r6, r0
 80134f4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80134f8:	b085      	sub	sp, #20
 80134fa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80134fe:	4618      	mov	r0, r3
 8013500:	4918      	ldr	r1, [pc, #96]	; (8013564 <exact_match_lookup+0x7c>)
 8013502:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013506:	f001 facf 	bl	8014aa8 <rcutils_join_path>
 801350a:	7833      	ldrb	r3, [r6, #0]
 801350c:	2b2f      	cmp	r3, #47	; 0x2f
 801350e:	4605      	mov	r5, r0
 8013510:	d021      	beq.n	8013556 <exact_match_lookup+0x6e>
 8013512:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8013516:	e88d 0003 	stmia.w	sp, {r0, r1}
 801351a:	1c70      	adds	r0, r6, #1
 801351c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013520:	f001 fac8 	bl	8014ab4 <rcutils_to_native_path>
 8013524:	4606      	mov	r6, r0
 8013526:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801352a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801352e:	4631      	mov	r1, r6
 8013530:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013534:	4628      	mov	r0, r5
 8013536:	f001 fab7 	bl	8014aa8 <rcutils_join_path>
 801353a:	6862      	ldr	r2, [r4, #4]
 801353c:	6921      	ldr	r1, [r4, #16]
 801353e:	4603      	mov	r3, r0
 8013540:	4630      	mov	r0, r6
 8013542:	461e      	mov	r6, r3
 8013544:	4790      	blx	r2
 8013546:	4628      	mov	r0, r5
 8013548:	6863      	ldr	r3, [r4, #4]
 801354a:	6921      	ldr	r1, [r4, #16]
 801354c:	4798      	blx	r3
 801354e:	4635      	mov	r5, r6
 8013550:	4628      	mov	r0, r5
 8013552:	b005      	add	sp, #20
 8013554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013556:	7873      	ldrb	r3, [r6, #1]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d1da      	bne.n	8013512 <exact_match_lookup+0x2a>
 801355c:	4628      	mov	r0, r5
 801355e:	b005      	add	sp, #20
 8013560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013562:	bf00      	nop
 8013564:	080199ec 	.word	0x080199ec

08013568 <rcl_get_secure_root>:
 8013568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801356c:	b085      	sub	sp, #20
 801356e:	b168      	cbz	r0, 801358c <rcl_get_secure_root+0x24>
 8013570:	4607      	mov	r7, r0
 8013572:	4608      	mov	r0, r1
 8013574:	460c      	mov	r4, r1
 8013576:	f7fa f8a9 	bl	800d6cc <rcutils_allocator_is_valid>
 801357a:	b138      	cbz	r0, 801358c <rcl_get_secure_root+0x24>
 801357c:	2300      	movs	r3, #0
 801357e:	482d      	ldr	r0, [pc, #180]	; (8013634 <rcl_get_secure_root+0xcc>)
 8013580:	9303      	str	r3, [sp, #12]
 8013582:	a903      	add	r1, sp, #12
 8013584:	f001 fad8 	bl	8014b38 <rcutils_get_env>
 8013588:	4605      	mov	r5, r0
 801358a:	b120      	cbz	r0, 8013596 <rcl_get_secure_root+0x2e>
 801358c:	2500      	movs	r5, #0
 801358e:	4628      	mov	r0, r5
 8013590:	b005      	add	sp, #20
 8013592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013596:	9b03      	ldr	r3, [sp, #12]
 8013598:	781a      	ldrb	r2, [r3, #0]
 801359a:	2a00      	cmp	r2, #0
 801359c:	d0f6      	beq.n	801358c <rcl_get_secure_root+0x24>
 801359e:	f104 090c 	add.w	r9, r4, #12
 80135a2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80135a6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80135aa:	4618      	mov	r0, r3
 80135ac:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80135b0:	f001 fbb2 	bl	8014d18 <rcutils_strdup>
 80135b4:	4680      	mov	r8, r0
 80135b6:	2800      	cmp	r0, #0
 80135b8:	d0e8      	beq.n	801358c <rcl_get_secure_root+0x24>
 80135ba:	481f      	ldr	r0, [pc, #124]	; (8013638 <rcl_get_secure_root+0xd0>)
 80135bc:	9503      	str	r5, [sp, #12]
 80135be:	a903      	add	r1, sp, #12
 80135c0:	f001 faba 	bl	8014b38 <rcutils_get_env>
 80135c4:	b160      	cbz	r0, 80135e0 <rcl_get_secure_root+0x78>
 80135c6:	2600      	movs	r6, #0
 80135c8:	6863      	ldr	r3, [r4, #4]
 80135ca:	6921      	ldr	r1, [r4, #16]
 80135cc:	4630      	mov	r0, r6
 80135ce:	4798      	blx	r3
 80135d0:	4640      	mov	r0, r8
 80135d2:	6863      	ldr	r3, [r4, #4]
 80135d4:	6921      	ldr	r1, [r4, #16]
 80135d6:	4798      	blx	r3
 80135d8:	4628      	mov	r0, r5
 80135da:	b005      	add	sp, #20
 80135dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135e0:	9b03      	ldr	r3, [sp, #12]
 80135e2:	781e      	ldrb	r6, [r3, #0]
 80135e4:	b1f6      	cbz	r6, 8013624 <rcl_get_secure_root+0xbc>
 80135e6:	e899 0003 	ldmia.w	r9, {r0, r1}
 80135ea:	e88d 0003 	stmia.w	sp, {r0, r1}
 80135ee:	4618      	mov	r0, r3
 80135f0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80135f4:	f001 fb90 	bl	8014d18 <rcutils_strdup>
 80135f8:	4606      	mov	r6, r0
 80135fa:	2800      	cmp	r0, #0
 80135fc:	d0e3      	beq.n	80135c6 <rcl_get_secure_root+0x5e>
 80135fe:	4622      	mov	r2, r4
 8013600:	4641      	mov	r1, r8
 8013602:	f7ff ff71 	bl	80134e8 <exact_match_lookup>
 8013606:	4605      	mov	r5, r0
 8013608:	2d00      	cmp	r5, #0
 801360a:	d0dd      	beq.n	80135c8 <rcl_get_secure_root+0x60>
 801360c:	4628      	mov	r0, r5
 801360e:	f001 fa49 	bl	8014aa4 <rcutils_is_directory>
 8013612:	4607      	mov	r7, r0
 8013614:	2800      	cmp	r0, #0
 8013616:	d1d7      	bne.n	80135c8 <rcl_get_secure_root+0x60>
 8013618:	4628      	mov	r0, r5
 801361a:	6863      	ldr	r3, [r4, #4]
 801361c:	6921      	ldr	r1, [r4, #16]
 801361e:	4798      	blx	r3
 8013620:	463d      	mov	r5, r7
 8013622:	e7d1      	b.n	80135c8 <rcl_get_secure_root+0x60>
 8013624:	4638      	mov	r0, r7
 8013626:	4622      	mov	r2, r4
 8013628:	4641      	mov	r1, r8
 801362a:	f7ff ff5d 	bl	80134e8 <exact_match_lookup>
 801362e:	4605      	mov	r5, r0
 8013630:	e7ea      	b.n	8013608 <rcl_get_secure_root+0xa0>
 8013632:	bf00      	nop
 8013634:	080199f8 	.word	0x080199f8
 8013638:	08019a10 	.word	0x08019a10

0801363c <rcl_get_security_options_from_environment>:
 801363c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013640:	b082      	sub	sp, #8
 8013642:	4607      	mov	r7, r0
 8013644:	4688      	mov	r8, r1
 8013646:	2400      	movs	r4, #0
 8013648:	481d      	ldr	r0, [pc, #116]	; (80136c0 <rcl_get_security_options_from_environment+0x84>)
 801364a:	9401      	str	r4, [sp, #4]
 801364c:	a901      	add	r1, sp, #4
 801364e:	4616      	mov	r6, r2
 8013650:	f001 fa72 	bl	8014b38 <rcutils_get_env>
 8013654:	b120      	cbz	r0, 8013660 <rcl_get_security_options_from_environment+0x24>
 8013656:	2501      	movs	r5, #1
 8013658:	4628      	mov	r0, r5
 801365a:	b002      	add	sp, #8
 801365c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013660:	4918      	ldr	r1, [pc, #96]	; (80136c4 <rcl_get_security_options_from_environment+0x88>)
 8013662:	4604      	mov	r4, r0
 8013664:	9801      	ldr	r0, [sp, #4]
 8013666:	f7ec fdbb 	bl	80001e0 <strcmp>
 801366a:	4605      	mov	r5, r0
 801366c:	b9c8      	cbnz	r0, 80136a2 <rcl_get_security_options_from_environment+0x66>
 801366e:	9001      	str	r0, [sp, #4]
 8013670:	b1ee      	cbz	r6, 80136ae <rcl_get_security_options_from_environment+0x72>
 8013672:	4815      	ldr	r0, [pc, #84]	; (80136c8 <rcl_get_security_options_from_environment+0x8c>)
 8013674:	a901      	add	r1, sp, #4
 8013676:	f001 fa5f 	bl	8014b38 <rcutils_get_env>
 801367a:	2800      	cmp	r0, #0
 801367c:	d1eb      	bne.n	8013656 <rcl_get_security_options_from_environment+0x1a>
 801367e:	4913      	ldr	r1, [pc, #76]	; (80136cc <rcl_get_security_options_from_environment+0x90>)
 8013680:	9801      	ldr	r0, [sp, #4]
 8013682:	f7ec fdad 	bl	80001e0 <strcmp>
 8013686:	fab0 f080 	clz	r0, r0
 801368a:	0940      	lsrs	r0, r0, #5
 801368c:	7030      	strb	r0, [r6, #0]
 801368e:	4641      	mov	r1, r8
 8013690:	4638      	mov	r0, r7
 8013692:	f7ff ff69 	bl	8013568 <rcl_get_secure_root>
 8013696:	b160      	cbz	r0, 80136b2 <rcl_get_security_options_from_environment+0x76>
 8013698:	6070      	str	r0, [r6, #4]
 801369a:	4628      	mov	r0, r5
 801369c:	b002      	add	sp, #8
 801369e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136a2:	4625      	mov	r5, r4
 80136a4:	4628      	mov	r0, r5
 80136a6:	7034      	strb	r4, [r6, #0]
 80136a8:	b002      	add	sp, #8
 80136aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136ae:	250b      	movs	r5, #11
 80136b0:	e7d2      	b.n	8013658 <rcl_get_security_options_from_environment+0x1c>
 80136b2:	7835      	ldrb	r5, [r6, #0]
 80136b4:	f1a5 0501 	sub.w	r5, r5, #1
 80136b8:	fab5 f585 	clz	r5, r5
 80136bc:	096d      	lsrs	r5, r5, #5
 80136be:	e7cb      	b.n	8013658 <rcl_get_security_options_from_environment+0x1c>
 80136c0:	080199b0 	.word	0x080199b0
 80136c4:	080199c4 	.word	0x080199c4
 80136c8:	080199cc 	.word	0x080199cc
 80136cc:	080199e4 	.word	0x080199e4

080136d0 <rcl_service_get_rmw_handle>:
 80136d0:	b110      	cbz	r0, 80136d8 <rcl_service_get_rmw_handle+0x8>
 80136d2:	6800      	ldr	r0, [r0, #0]
 80136d4:	b100      	cbz	r0, 80136d8 <rcl_service_get_rmw_handle+0x8>
 80136d6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80136d8:	4770      	bx	lr
 80136da:	bf00      	nop

080136dc <rcl_take_request>:
 80136dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136de:	460e      	mov	r6, r1
 80136e0:	460c      	mov	r4, r1
 80136e2:	4607      	mov	r7, r0
 80136e4:	4694      	mov	ip, r2
 80136e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80136e8:	b08d      	sub	sp, #52	; 0x34
 80136ea:	ad06      	add	r5, sp, #24
 80136ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80136ee:	e896 0003 	ldmia.w	r6, {r0, r1}
 80136f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80136f6:	b1e7      	cbz	r7, 8013732 <rcl_take_request+0x56>
 80136f8:	683b      	ldr	r3, [r7, #0]
 80136fa:	b1d3      	cbz	r3, 8013732 <rcl_take_request+0x56>
 80136fc:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80136fe:	b1c0      	cbz	r0, 8013732 <rcl_take_request+0x56>
 8013700:	4662      	mov	r2, ip
 8013702:	b30a      	cbz	r2, 8013748 <rcl_take_request+0x6c>
 8013704:	2500      	movs	r5, #0
 8013706:	f10d 0307 	add.w	r3, sp, #7
 801370a:	a902      	add	r1, sp, #8
 801370c:	f88d 5007 	strb.w	r5, [sp, #7]
 8013710:	f002 f86e 	bl	80157f0 <rmw_take_request>
 8013714:	4606      	mov	r6, r0
 8013716:	b178      	cbz	r0, 8013738 <rcl_take_request+0x5c>
 8013718:	280a      	cmp	r0, #10
 801371a:	bf18      	it	ne
 801371c:	2601      	movne	r6, #1
 801371e:	ad06      	add	r5, sp, #24
 8013720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013724:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013728:	e884 0003 	stmia.w	r4, {r0, r1}
 801372c:	4630      	mov	r0, r6
 801372e:	b00d      	add	sp, #52	; 0x34
 8013730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013732:	f44f 7616 	mov.w	r6, #600	; 0x258
 8013736:	e7f2      	b.n	801371e <rcl_take_request+0x42>
 8013738:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801373c:	f240 2359 	movw	r3, #601	; 0x259
 8013740:	2a00      	cmp	r2, #0
 8013742:	bf08      	it	eq
 8013744:	461e      	moveq	r6, r3
 8013746:	e7ea      	b.n	801371e <rcl_take_request+0x42>
 8013748:	260b      	movs	r6, #11
 801374a:	e7e8      	b.n	801371e <rcl_take_request+0x42>

0801374c <rcl_send_response>:
 801374c:	b160      	cbz	r0, 8013768 <rcl_send_response+0x1c>
 801374e:	6800      	ldr	r0, [r0, #0]
 8013750:	b150      	cbz	r0, 8013768 <rcl_send_response+0x1c>
 8013752:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8013754:	b140      	cbz	r0, 8013768 <rcl_send_response+0x1c>
 8013756:	b151      	cbz	r1, 801376e <rcl_send_response+0x22>
 8013758:	b510      	push	{r4, lr}
 801375a:	b152      	cbz	r2, 8013772 <rcl_send_response+0x26>
 801375c:	f002 f8a6 	bl	80158ac <rmw_send_response>
 8013760:	3800      	subs	r0, #0
 8013762:	bf18      	it	ne
 8013764:	2001      	movne	r0, #1
 8013766:	bd10      	pop	{r4, pc}
 8013768:	f44f 7016 	mov.w	r0, #600	; 0x258
 801376c:	4770      	bx	lr
 801376e:	200b      	movs	r0, #11
 8013770:	4770      	bx	lr
 8013772:	200b      	movs	r0, #11
 8013774:	bd10      	pop	{r4, pc}
 8013776:	bf00      	nop

08013778 <rcl_get_system_time>:
 8013778:	4608      	mov	r0, r1
 801377a:	f7fa b913 	b.w	800d9a4 <rcutils_system_time_now>
 801377e:	bf00      	nop

08013780 <rcl_get_steady_time>:
 8013780:	4608      	mov	r0, r1
 8013782:	f7fa b937 	b.w	800d9f4 <rcutils_steady_time_now>
 8013786:	bf00      	nop

08013788 <rcl_get_ros_time>:
 8013788:	7a03      	ldrb	r3, [r0, #8]
 801378a:	b510      	push	{r4, lr}
 801378c:	460c      	mov	r4, r1
 801378e:	b133      	cbz	r3, 801379e <rcl_get_ros_time+0x16>
 8013790:	2105      	movs	r1, #5
 8013792:	f001 f8e5 	bl	8014960 <__atomic_load_8>
 8013796:	e9c4 0100 	strd	r0, r1, [r4]
 801379a:	2000      	movs	r0, #0
 801379c:	bd10      	pop	{r4, pc}
 801379e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80137a2:	4608      	mov	r0, r1
 80137a4:	f7fa b8fe 	b.w	800d9a4 <rcutils_system_time_now>

080137a8 <rcl_clock_init>:
 80137a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80137ac:	4606      	mov	r6, r0
 80137ae:	4610      	mov	r0, r2
 80137b0:	4614      	mov	r4, r2
 80137b2:	460d      	mov	r5, r1
 80137b4:	f7f9 ff8a 	bl	800d6cc <rcutils_allocator_is_valid>
 80137b8:	b128      	cbz	r0, 80137c6 <rcl_clock_init+0x1e>
 80137ba:	2e03      	cmp	r6, #3
 80137bc:	d803      	bhi.n	80137c6 <rcl_clock_init+0x1e>
 80137be:	e8df f006 	tbb	[pc, r6]
 80137c2:	2c1b      	.short	0x2c1b
 80137c4:	0554      	.short	0x0554
 80137c6:	200b      	movs	r0, #11
 80137c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137cc:	2d00      	cmp	r5, #0
 80137ce:	d0fa      	beq.n	80137c6 <rcl_clock_init+0x1e>
 80137d0:	2c00      	cmp	r4, #0
 80137d2:	d0f8      	beq.n	80137c6 <rcl_clock_init+0x1e>
 80137d4:	2600      	movs	r6, #0
 80137d6:	702e      	strb	r6, [r5, #0]
 80137d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80137da:	f105 0714 	add.w	r7, r5, #20
 80137de:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80137e2:	612e      	str	r6, [r5, #16]
 80137e4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80137e6:	6823      	ldr	r3, [r4, #0]
 80137e8:	603b      	str	r3, [r7, #0]
 80137ea:	2303      	movs	r3, #3
 80137ec:	4a2b      	ldr	r2, [pc, #172]	; (801389c <rcl_clock_init+0xf4>)
 80137ee:	702b      	strb	r3, [r5, #0]
 80137f0:	4630      	mov	r0, r6
 80137f2:	60ea      	str	r2, [r5, #12]
 80137f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137f8:	2d00      	cmp	r5, #0
 80137fa:	d0e4      	beq.n	80137c6 <rcl_clock_init+0x1e>
 80137fc:	2600      	movs	r6, #0
 80137fe:	702e      	strb	r6, [r5, #0]
 8013800:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013802:	f105 0714 	add.w	r7, r5, #20
 8013806:	e9c5 6601 	strd	r6, r6, [r5, #4]
 801380a:	e9c5 6603 	strd	r6, r6, [r5, #12]
 801380e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013810:	6823      	ldr	r3, [r4, #0]
 8013812:	603b      	str	r3, [r7, #0]
 8013814:	4630      	mov	r0, r6
 8013816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801381a:	2d00      	cmp	r5, #0
 801381c:	d0d3      	beq.n	80137c6 <rcl_clock_init+0x1e>
 801381e:	2c00      	cmp	r4, #0
 8013820:	d0d1      	beq.n	80137c6 <rcl_clock_init+0x1e>
 8013822:	2600      	movs	r6, #0
 8013824:	702e      	strb	r6, [r5, #0]
 8013826:	46a4      	mov	ip, r4
 8013828:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801382c:	f105 0714 	add.w	r7, r5, #20
 8013830:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8013834:	e9c5 6603 	strd	r6, r6, [r5, #12]
 8013838:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801383a:	f8dc 3000 	ldr.w	r3, [ip]
 801383e:	603b      	str	r3, [r7, #0]
 8013840:	6921      	ldr	r1, [r4, #16]
 8013842:	6823      	ldr	r3, [r4, #0]
 8013844:	2010      	movs	r0, #16
 8013846:	4798      	blx	r3
 8013848:	4603      	mov	r3, r0
 801384a:	6128      	str	r0, [r5, #16]
 801384c:	b318      	cbz	r0, 8013896 <rcl_clock_init+0xee>
 801384e:	f04f 0800 	mov.w	r8, #0
 8013852:	f04f 0900 	mov.w	r9, #0
 8013856:	7206      	strb	r6, [r0, #8]
 8013858:	e9c3 8900 	strd	r8, r9, [r3]
 801385c:	2301      	movs	r3, #1
 801385e:	4a10      	ldr	r2, [pc, #64]	; (80138a0 <rcl_clock_init+0xf8>)
 8013860:	702b      	strb	r3, [r5, #0]
 8013862:	4630      	mov	r0, r6
 8013864:	60ea      	str	r2, [r5, #12]
 8013866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801386a:	2d00      	cmp	r5, #0
 801386c:	d0ab      	beq.n	80137c6 <rcl_clock_init+0x1e>
 801386e:	2c00      	cmp	r4, #0
 8013870:	d0a9      	beq.n	80137c6 <rcl_clock_init+0x1e>
 8013872:	2600      	movs	r6, #0
 8013874:	702e      	strb	r6, [r5, #0]
 8013876:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013878:	f105 0714 	add.w	r7, r5, #20
 801387c:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8013880:	612e      	str	r6, [r5, #16]
 8013882:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013884:	6823      	ldr	r3, [r4, #0]
 8013886:	603b      	str	r3, [r7, #0]
 8013888:	2302      	movs	r3, #2
 801388a:	4a06      	ldr	r2, [pc, #24]	; (80138a4 <rcl_clock_init+0xfc>)
 801388c:	702b      	strb	r3, [r5, #0]
 801388e:	4630      	mov	r0, r6
 8013890:	60ea      	str	r2, [r5, #12]
 8013892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013896:	200a      	movs	r0, #10
 8013898:	e796      	b.n	80137c8 <rcl_clock_init+0x20>
 801389a:	bf00      	nop
 801389c:	08013781 	.word	0x08013781
 80138a0:	08013789 	.word	0x08013789
 80138a4:	08013779 	.word	0x08013779

080138a8 <rcl_clock_get_now>:
 80138a8:	b140      	cbz	r0, 80138bc <rcl_clock_get_now+0x14>
 80138aa:	b139      	cbz	r1, 80138bc <rcl_clock_get_now+0x14>
 80138ac:	7803      	ldrb	r3, [r0, #0]
 80138ae:	b11b      	cbz	r3, 80138b8 <rcl_clock_get_now+0x10>
 80138b0:	68c3      	ldr	r3, [r0, #12]
 80138b2:	b10b      	cbz	r3, 80138b8 <rcl_clock_get_now+0x10>
 80138b4:	6900      	ldr	r0, [r0, #16]
 80138b6:	4718      	bx	r3
 80138b8:	2001      	movs	r0, #1
 80138ba:	4770      	bx	lr
 80138bc:	200b      	movs	r0, #11
 80138be:	4770      	bx	lr

080138c0 <rcl_timer_call>:
 80138c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138c4:	b08b      	sub	sp, #44	; 0x2c
 80138c6:	2800      	cmp	r0, #0
 80138c8:	d06e      	beq.n	80139a8 <rcl_timer_call+0xe8>
 80138ca:	6803      	ldr	r3, [r0, #0]
 80138cc:	f3bf 8f5b 	dmb	ish
 80138d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80138d4:	f3bf 8f5b 	dmb	ish
 80138d8:	4604      	mov	r4, r0
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d159      	bne.n	8013992 <rcl_timer_call+0xd2>
 80138de:	6803      	ldr	r3, [r0, #0]
 80138e0:	a908      	add	r1, sp, #32
 80138e2:	6818      	ldr	r0, [r3, #0]
 80138e4:	f7ff ffe0 	bl	80138a8 <rcl_clock_get_now>
 80138e8:	4605      	mov	r5, r0
 80138ea:	2800      	cmp	r0, #0
 80138ec:	d14d      	bne.n	801398a <rcl_timer_call+0xca>
 80138ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80138f2:	2a00      	cmp	r2, #0
 80138f4:	f173 0100 	sbcs.w	r1, r3, #0
 80138f8:	db51      	blt.n	801399e <rcl_timer_call+0xde>
 80138fa:	6820      	ldr	r0, [r4, #0]
 80138fc:	2605      	movs	r6, #5
 80138fe:	9600      	str	r6, [sp, #0]
 8013900:	3020      	adds	r0, #32
 8013902:	f001 f895 	bl	8014a30 <__atomic_exchange_8>
 8013906:	6822      	ldr	r2, [r4, #0]
 8013908:	f3bf 8f5b 	dmb	ish
 801390c:	4682      	mov	sl, r0
 801390e:	f8d2 b010 	ldr.w	fp, [r2, #16]
 8013912:	f3bf 8f5b 	dmb	ish
 8013916:	6820      	ldr	r0, [r4, #0]
 8013918:	460b      	mov	r3, r1
 801391a:	3028      	adds	r0, #40	; 0x28
 801391c:	4631      	mov	r1, r6
 801391e:	9305      	str	r3, [sp, #20]
 8013920:	f001 f81e 	bl	8014960 <__atomic_load_8>
 8013924:	4603      	mov	r3, r0
 8013926:	6820      	ldr	r0, [r4, #0]
 8013928:	460a      	mov	r2, r1
 801392a:	3018      	adds	r0, #24
 801392c:	4631      	mov	r1, r6
 801392e:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8013932:	f001 f815 	bl	8014960 <__atomic_load_8>
 8013936:	9b04      	ldr	r3, [sp, #16]
 8013938:	9a03      	ldr	r2, [sp, #12]
 801393a:	4606      	mov	r6, r0
 801393c:	460f      	mov	r7, r1
 801393e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013942:	eb13 0806 	adds.w	r8, r3, r6
 8013946:	eb42 0907 	adc.w	r9, r2, r7
 801394a:	4580      	cmp	r8, r0
 801394c:	eb79 0301 	sbcs.w	r3, r9, r1
 8013950:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013954:	460a      	mov	r2, r1
 8013956:	da04      	bge.n	8013962 <rcl_timer_call+0xa2>
 8013958:	ea56 0307 	orrs.w	r3, r6, r7
 801395c:	d129      	bne.n	80139b2 <rcl_timer_call+0xf2>
 801395e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8013962:	6820      	ldr	r0, [r4, #0]
 8013964:	2105      	movs	r1, #5
 8013966:	4642      	mov	r2, r8
 8013968:	464b      	mov	r3, r9
 801396a:	3028      	adds	r0, #40	; 0x28
 801396c:	9100      	str	r1, [sp, #0]
 801396e:	f001 f82b 	bl	80149c8 <__atomic_store_8>
 8013972:	f1bb 0f00 	cmp.w	fp, #0
 8013976:	d008      	beq.n	801398a <rcl_timer_call+0xca>
 8013978:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801397c:	9905      	ldr	r1, [sp, #20]
 801397e:	ebb2 020a 	subs.w	r2, r2, sl
 8013982:	4620      	mov	r0, r4
 8013984:	eb63 0301 	sbc.w	r3, r3, r1
 8013988:	47d8      	blx	fp
 801398a:	4628      	mov	r0, r5
 801398c:	b00b      	add	sp, #44	; 0x2c
 801398e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013992:	f240 3521 	movw	r5, #801	; 0x321
 8013996:	4628      	mov	r0, r5
 8013998:	b00b      	add	sp, #44	; 0x2c
 801399a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801399e:	2501      	movs	r5, #1
 80139a0:	4628      	mov	r0, r5
 80139a2:	b00b      	add	sp, #44	; 0x2c
 80139a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139a8:	250b      	movs	r5, #11
 80139aa:	4628      	mov	r0, r5
 80139ac:	b00b      	add	sp, #44	; 0x2c
 80139ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139b2:	ebb0 0008 	subs.w	r0, r0, r8
 80139b6:	eb62 0109 	sbc.w	r1, r2, r9
 80139ba:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 80139be:	463b      	mov	r3, r7
 80139c0:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 80139c4:	4632      	mov	r2, r6
 80139c6:	f7ed f891 	bl	8000aec <__aeabi_ldivmod>
 80139ca:	1c43      	adds	r3, r0, #1
 80139cc:	f141 0100 	adc.w	r1, r1, #0
 80139d0:	fb00 7007 	mla	r0, r0, r7, r7
 80139d4:	fb06 0001 	mla	r0, r6, r1, r0
 80139d8:	fba3 6706 	umull	r6, r7, r3, r6
 80139dc:	4407      	add	r7, r0
 80139de:	eb18 0806 	adds.w	r8, r8, r6
 80139e2:	eb49 0907 	adc.w	r9, r9, r7
 80139e6:	e7bc      	b.n	8013962 <rcl_timer_call+0xa2>

080139e8 <rcl_timer_is_ready>:
 80139e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139ec:	b082      	sub	sp, #8
 80139ee:	b310      	cbz	r0, 8013a36 <rcl_timer_is_ready+0x4e>
 80139f0:	4688      	mov	r8, r1
 80139f2:	b301      	cbz	r1, 8013a36 <rcl_timer_is_ready+0x4e>
 80139f4:	6803      	ldr	r3, [r0, #0]
 80139f6:	4604      	mov	r4, r0
 80139f8:	4669      	mov	r1, sp
 80139fa:	6818      	ldr	r0, [r3, #0]
 80139fc:	f7ff ff54 	bl	80138a8 <rcl_clock_get_now>
 8013a00:	4605      	mov	r5, r0
 8013a02:	b118      	cbz	r0, 8013a0c <rcl_timer_is_ready+0x24>
 8013a04:	4628      	mov	r0, r5
 8013a06:	b002      	add	sp, #8
 8013a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a0c:	6820      	ldr	r0, [r4, #0]
 8013a0e:	2105      	movs	r1, #5
 8013a10:	3028      	adds	r0, #40	; 0x28
 8013a12:	f000 ffa5 	bl	8014960 <__atomic_load_8>
 8013a16:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013a1a:	1ac6      	subs	r6, r0, r3
 8013a1c:	eb61 0702 	sbc.w	r7, r1, r2
 8013a20:	2e01      	cmp	r6, #1
 8013a22:	f177 0300 	sbcs.w	r3, r7, #0
 8013a26:	db0b      	blt.n	8013a40 <rcl_timer_is_ready+0x58>
 8013a28:	462b      	mov	r3, r5
 8013a2a:	4628      	mov	r0, r5
 8013a2c:	f888 3000 	strb.w	r3, [r8]
 8013a30:	b002      	add	sp, #8
 8013a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a36:	250b      	movs	r5, #11
 8013a38:	4628      	mov	r0, r5
 8013a3a:	b002      	add	sp, #8
 8013a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a40:	6823      	ldr	r3, [r4, #0]
 8013a42:	f3bf 8f5b 	dmb	ish
 8013a46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013a4a:	f3bf 8f5b 	dmb	ish
 8013a4e:	fab3 f383 	clz	r3, r3
 8013a52:	095b      	lsrs	r3, r3, #5
 8013a54:	e7e9      	b.n	8013a2a <rcl_timer_is_ready+0x42>
 8013a56:	bf00      	nop

08013a58 <rcl_timer_get_time_until_next_call>:
 8013a58:	b570      	push	{r4, r5, r6, lr}
 8013a5a:	b082      	sub	sp, #8
 8013a5c:	b1d8      	cbz	r0, 8013a96 <rcl_timer_get_time_until_next_call+0x3e>
 8013a5e:	460d      	mov	r5, r1
 8013a60:	b1c9      	cbz	r1, 8013a96 <rcl_timer_get_time_until_next_call+0x3e>
 8013a62:	6803      	ldr	r3, [r0, #0]
 8013a64:	4604      	mov	r4, r0
 8013a66:	4669      	mov	r1, sp
 8013a68:	6818      	ldr	r0, [r3, #0]
 8013a6a:	f7ff ff1d 	bl	80138a8 <rcl_clock_get_now>
 8013a6e:	4606      	mov	r6, r0
 8013a70:	b110      	cbz	r0, 8013a78 <rcl_timer_get_time_until_next_call+0x20>
 8013a72:	4630      	mov	r0, r6
 8013a74:	b002      	add	sp, #8
 8013a76:	bd70      	pop	{r4, r5, r6, pc}
 8013a78:	6820      	ldr	r0, [r4, #0]
 8013a7a:	2105      	movs	r1, #5
 8013a7c:	3028      	adds	r0, #40	; 0x28
 8013a7e:	f000 ff6f 	bl	8014960 <__atomic_load_8>
 8013a82:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013a86:	1ac0      	subs	r0, r0, r3
 8013a88:	eb61 0102 	sbc.w	r1, r1, r2
 8013a8c:	e9c5 0100 	strd	r0, r1, [r5]
 8013a90:	4630      	mov	r0, r6
 8013a92:	b002      	add	sp, #8
 8013a94:	bd70      	pop	{r4, r5, r6, pc}
 8013a96:	260b      	movs	r6, #11
 8013a98:	4630      	mov	r0, r6
 8013a9a:	b002      	add	sp, #8
 8013a9c:	bd70      	pop	{r4, r5, r6, pc}
 8013a9e:	bf00      	nop

08013aa0 <rcl_timer_is_canceled>:
 8013aa0:	b168      	cbz	r0, 8013abe <rcl_timer_is_canceled+0x1e>
 8013aa2:	b161      	cbz	r1, 8013abe <rcl_timer_is_canceled+0x1e>
 8013aa4:	6803      	ldr	r3, [r0, #0]
 8013aa6:	f3bf 8f5b 	dmb	ish
 8013aaa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013aae:	f3bf 8f5b 	dmb	ish
 8013ab2:	3b00      	subs	r3, #0
 8013ab4:	bf18      	it	ne
 8013ab6:	2301      	movne	r3, #1
 8013ab8:	700b      	strb	r3, [r1, #0]
 8013aba:	2000      	movs	r0, #0
 8013abc:	4770      	bx	lr
 8013abe:	200b      	movs	r0, #11
 8013ac0:	4770      	bx	lr
 8013ac2:	bf00      	nop

08013ac4 <rcl_timer_get_guard_condition>:
 8013ac4:	b130      	cbz	r0, 8013ad4 <rcl_timer_get_guard_condition+0x10>
 8013ac6:	6800      	ldr	r0, [r0, #0]
 8013ac8:	b120      	cbz	r0, 8013ad4 <rcl_timer_get_guard_condition+0x10>
 8013aca:	68c3      	ldr	r3, [r0, #12]
 8013acc:	b10b      	cbz	r3, 8013ad2 <rcl_timer_get_guard_condition+0xe>
 8013ace:	3008      	adds	r0, #8
 8013ad0:	4770      	bx	lr
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	4770      	bx	lr
 8013ad6:	bf00      	nop

08013ad8 <rcl_validate_enclave_name_with_size>:
 8013ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ada:	b0c3      	sub	sp, #268	; 0x10c
 8013adc:	b1d0      	cbz	r0, 8013b14 <rcl_validate_enclave_name_with_size+0x3c>
 8013ade:	4615      	mov	r5, r2
 8013ae0:	b1c2      	cbz	r2, 8013b14 <rcl_validate_enclave_name_with_size+0x3c>
 8013ae2:	461f      	mov	r7, r3
 8013ae4:	466a      	mov	r2, sp
 8013ae6:	ab01      	add	r3, sp, #4
 8013ae8:	460e      	mov	r6, r1
 8013aea:	f001 f96f 	bl	8014dcc <rmw_validate_namespace_with_size>
 8013aee:	4604      	mov	r4, r0
 8013af0:	b9e0      	cbnz	r0, 8013b2c <rcl_validate_enclave_name_with_size+0x54>
 8013af2:	9b00      	ldr	r3, [sp, #0]
 8013af4:	b923      	cbnz	r3, 8013b00 <rcl_validate_enclave_name_with_size+0x28>
 8013af6:	2300      	movs	r3, #0
 8013af8:	602b      	str	r3, [r5, #0]
 8013afa:	4620      	mov	r0, r4
 8013afc:	b043      	add	sp, #268	; 0x10c
 8013afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b00:	2b07      	cmp	r3, #7
 8013b02:	d00b      	beq.n	8013b1c <rcl_validate_enclave_name_with_size+0x44>
 8013b04:	1e5a      	subs	r2, r3, #1
 8013b06:	2a05      	cmp	r2, #5
 8013b08:	d82e      	bhi.n	8013b68 <rcl_validate_enclave_name_with_size+0x90>
 8013b0a:	e8df f002 	tbb	[pc, r2]
 8013b0e:	211e      	.short	0x211e
 8013b10:	152a2724 	.word	0x152a2724
 8013b14:	240b      	movs	r4, #11
 8013b16:	4620      	mov	r0, r4
 8013b18:	b043      	add	sp, #268	; 0x10c
 8013b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b1c:	2eff      	cmp	r6, #255	; 0xff
 8013b1e:	d9ea      	bls.n	8013af6 <rcl_validate_enclave_name_with_size+0x1e>
 8013b20:	602b      	str	r3, [r5, #0]
 8013b22:	2f00      	cmp	r7, #0
 8013b24:	d0e9      	beq.n	8013afa <rcl_validate_enclave_name_with_size+0x22>
 8013b26:	23fe      	movs	r3, #254	; 0xfe
 8013b28:	603b      	str	r3, [r7, #0]
 8013b2a:	e7e6      	b.n	8013afa <rcl_validate_enclave_name_with_size+0x22>
 8013b2c:	f7fe fefc 	bl	8012928 <rcl_convert_rmw_ret_to_rcl_ret>
 8013b30:	4604      	mov	r4, r0
 8013b32:	4620      	mov	r0, r4
 8013b34:	b043      	add	sp, #268	; 0x10c
 8013b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b38:	2306      	movs	r3, #6
 8013b3a:	602b      	str	r3, [r5, #0]
 8013b3c:	2f00      	cmp	r7, #0
 8013b3e:	d0dc      	beq.n	8013afa <rcl_validate_enclave_name_with_size+0x22>
 8013b40:	9b01      	ldr	r3, [sp, #4]
 8013b42:	603b      	str	r3, [r7, #0]
 8013b44:	4620      	mov	r0, r4
 8013b46:	b043      	add	sp, #268	; 0x10c
 8013b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b4a:	2301      	movs	r3, #1
 8013b4c:	602b      	str	r3, [r5, #0]
 8013b4e:	e7f5      	b.n	8013b3c <rcl_validate_enclave_name_with_size+0x64>
 8013b50:	2302      	movs	r3, #2
 8013b52:	602b      	str	r3, [r5, #0]
 8013b54:	e7f2      	b.n	8013b3c <rcl_validate_enclave_name_with_size+0x64>
 8013b56:	2303      	movs	r3, #3
 8013b58:	602b      	str	r3, [r5, #0]
 8013b5a:	e7ef      	b.n	8013b3c <rcl_validate_enclave_name_with_size+0x64>
 8013b5c:	2304      	movs	r3, #4
 8013b5e:	602b      	str	r3, [r5, #0]
 8013b60:	e7ec      	b.n	8013b3c <rcl_validate_enclave_name_with_size+0x64>
 8013b62:	2305      	movs	r3, #5
 8013b64:	602b      	str	r3, [r5, #0]
 8013b66:	e7e9      	b.n	8013b3c <rcl_validate_enclave_name_with_size+0x64>
 8013b68:	4a03      	ldr	r2, [pc, #12]	; (8013b78 <rcl_validate_enclave_name_with_size+0xa0>)
 8013b6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013b6e:	a802      	add	r0, sp, #8
 8013b70:	f001 f8a6 	bl	8014cc0 <rcutils_snprintf>
 8013b74:	2401      	movs	r4, #1
 8013b76:	e7c0      	b.n	8013afa <rcl_validate_enclave_name_with_size+0x22>
 8013b78:	08019a30 	.word	0x08019a30

08013b7c <rcl_validate_enclave_name>:
 8013b7c:	b168      	cbz	r0, 8013b9a <rcl_validate_enclave_name+0x1e>
 8013b7e:	b570      	push	{r4, r5, r6, lr}
 8013b80:	460d      	mov	r5, r1
 8013b82:	4616      	mov	r6, r2
 8013b84:	4604      	mov	r4, r0
 8013b86:	f7ec fb35 	bl	80001f4 <strlen>
 8013b8a:	4633      	mov	r3, r6
 8013b8c:	4601      	mov	r1, r0
 8013b8e:	462a      	mov	r2, r5
 8013b90:	4620      	mov	r0, r4
 8013b92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b96:	f7ff bf9f 	b.w	8013ad8 <rcl_validate_enclave_name_with_size>
 8013b9a:	200b      	movs	r0, #11
 8013b9c:	4770      	bx	lr
 8013b9e:	bf00      	nop

08013ba0 <rcl_validate_topic_name>:
 8013ba0:	2800      	cmp	r0, #0
 8013ba2:	f000 808b 	beq.w	8013cbc <rcl_validate_topic_name+0x11c>
 8013ba6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013baa:	460e      	mov	r6, r1
 8013bac:	2900      	cmp	r1, #0
 8013bae:	f000 808c 	beq.w	8013cca <rcl_validate_topic_name+0x12a>
 8013bb2:	4617      	mov	r7, r2
 8013bb4:	4605      	mov	r5, r0
 8013bb6:	f7ec fb1d 	bl	80001f4 <strlen>
 8013bba:	b1b0      	cbz	r0, 8013bea <rcl_validate_topic_name+0x4a>
 8013bbc:	f895 9000 	ldrb.w	r9, [r5]
 8013bc0:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8013d70 <rcl_validate_topic_name+0x1d0>
 8013bc4:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8013bc8:	f013 0304 	ands.w	r3, r3, #4
 8013bcc:	d178      	bne.n	8013cc0 <rcl_validate_topic_name+0x120>
 8013bce:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8013bd2:	f815 2008 	ldrb.w	r2, [r5, r8]
 8013bd6:	2a2f      	cmp	r2, #47	; 0x2f
 8013bd8:	d10e      	bne.n	8013bf8 <rcl_validate_topic_name+0x58>
 8013bda:	2202      	movs	r2, #2
 8013bdc:	6032      	str	r2, [r6, #0]
 8013bde:	b36f      	cbz	r7, 8013c3c <rcl_validate_topic_name+0x9c>
 8013be0:	f8c7 8000 	str.w	r8, [r7]
 8013be4:	4618      	mov	r0, r3
 8013be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bea:	2301      	movs	r3, #1
 8013bec:	6033      	str	r3, [r6, #0]
 8013bee:	b32f      	cbz	r7, 8013c3c <rcl_validate_topic_name+0x9c>
 8013bf0:	2000      	movs	r0, #0
 8013bf2:	6038      	str	r0, [r7, #0]
 8013bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bf8:	461c      	mov	r4, r3
 8013bfa:	4619      	mov	r1, r3
 8013bfc:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8013c00:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8013c04:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8013c08:	f1be 0f09 	cmp.w	lr, #9
 8013c0c:	d946      	bls.n	8013c9c <rcl_validate_topic_name+0xfc>
 8013c0e:	f022 0e20 	bic.w	lr, r2, #32
 8013c12:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8013c16:	f1be 0f19 	cmp.w	lr, #25
 8013c1a:	d93f      	bls.n	8013c9c <rcl_validate_topic_name+0xfc>
 8013c1c:	2a5f      	cmp	r2, #95	; 0x5f
 8013c1e:	d014      	beq.n	8013c4a <rcl_validate_topic_name+0xaa>
 8013c20:	2a2f      	cmp	r2, #47	; 0x2f
 8013c22:	d05b      	beq.n	8013cdc <rcl_validate_topic_name+0x13c>
 8013c24:	2a7e      	cmp	r2, #126	; 0x7e
 8013c26:	d052      	beq.n	8013cce <rcl_validate_topic_name+0x12e>
 8013c28:	2a7b      	cmp	r2, #123	; 0x7b
 8013c2a:	d00a      	beq.n	8013c42 <rcl_validate_topic_name+0xa2>
 8013c2c:	2a7d      	cmp	r2, #125	; 0x7d
 8013c2e:	d16f      	bne.n	8013d10 <rcl_validate_topic_name+0x170>
 8013c30:	2c00      	cmp	r4, #0
 8013c32:	d15e      	bne.n	8013cf2 <rcl_validate_topic_name+0x152>
 8013c34:	2305      	movs	r3, #5
 8013c36:	6033      	str	r3, [r6, #0]
 8013c38:	b107      	cbz	r7, 8013c3c <rcl_validate_topic_name+0x9c>
 8013c3a:	6039      	str	r1, [r7, #0]
 8013c3c:	2000      	movs	r0, #0
 8013c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c42:	2c00      	cmp	r4, #0
 8013c44:	d14c      	bne.n	8013ce0 <rcl_validate_topic_name+0x140>
 8013c46:	460b      	mov	r3, r1
 8013c48:	2401      	movs	r4, #1
 8013c4a:	3101      	adds	r1, #1
 8013c4c:	4288      	cmp	r0, r1
 8013c4e:	d1d7      	bne.n	8013c00 <rcl_validate_topic_name+0x60>
 8013c50:	2c00      	cmp	r4, #0
 8013c52:	d156      	bne.n	8013d02 <rcl_validate_topic_name+0x162>
 8013c54:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8013c58:	4620      	mov	r0, r4
 8013c5a:	d061      	beq.n	8013d20 <rcl_validate_topic_name+0x180>
 8013c5c:	f108 0e01 	add.w	lr, r8, #1
 8013c60:	e007      	b.n	8013c72 <rcl_validate_topic_name+0xd2>
 8013c62:	2801      	cmp	r0, #1
 8013c64:	d047      	beq.n	8013cf6 <rcl_validate_topic_name+0x156>
 8013c66:	461a      	mov	r2, r3
 8013c68:	4291      	cmp	r1, r2
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f105 0501 	add.w	r5, r5, #1
 8013c70:	d944      	bls.n	8013cfc <rcl_validate_topic_name+0x15c>
 8013c72:	4580      	cmp	r8, r0
 8013c74:	f100 0301 	add.w	r3, r0, #1
 8013c78:	d037      	beq.n	8013cea <rcl_validate_topic_name+0x14a>
 8013c7a:	782a      	ldrb	r2, [r5, #0]
 8013c7c:	2a2f      	cmp	r2, #47	; 0x2f
 8013c7e:	d1f0      	bne.n	8013c62 <rcl_validate_topic_name+0xc2>
 8013c80:	786b      	ldrb	r3, [r5, #1]
 8013c82:	f81c 4003 	ldrb.w	r4, [ip, r3]
 8013c86:	1c43      	adds	r3, r0, #1
 8013c88:	0760      	lsls	r0, r4, #29
 8013c8a:	461a      	mov	r2, r3
 8013c8c:	d5ec      	bpl.n	8013c68 <rcl_validate_topic_name+0xc8>
 8013c8e:	2304      	movs	r3, #4
 8013c90:	6033      	str	r3, [r6, #0]
 8013c92:	2f00      	cmp	r7, #0
 8013c94:	d0d2      	beq.n	8013c3c <rcl_validate_topic_name+0x9c>
 8013c96:	603a      	str	r2, [r7, #0]
 8013c98:	2000      	movs	r0, #0
 8013c9a:	e7ab      	b.n	8013bf4 <rcl_validate_topic_name+0x54>
 8013c9c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013ca0:	0752      	lsls	r2, r2, #29
 8013ca2:	d5d2      	bpl.n	8013c4a <rcl_validate_topic_name+0xaa>
 8013ca4:	2c00      	cmp	r4, #0
 8013ca6:	d0d0      	beq.n	8013c4a <rcl_validate_topic_name+0xaa>
 8013ca8:	2900      	cmp	r1, #0
 8013caa:	d0ce      	beq.n	8013c4a <rcl_validate_topic_name+0xaa>
 8013cac:	1e4a      	subs	r2, r1, #1
 8013cae:	429a      	cmp	r2, r3
 8013cb0:	d1cb      	bne.n	8013c4a <rcl_validate_topic_name+0xaa>
 8013cb2:	2309      	movs	r3, #9
 8013cb4:	6033      	str	r3, [r6, #0]
 8013cb6:	2f00      	cmp	r7, #0
 8013cb8:	d1bf      	bne.n	8013c3a <rcl_validate_topic_name+0x9a>
 8013cba:	e7bf      	b.n	8013c3c <rcl_validate_topic_name+0x9c>
 8013cbc:	200b      	movs	r0, #11
 8013cbe:	4770      	bx	lr
 8013cc0:	2304      	movs	r3, #4
 8013cc2:	6033      	str	r3, [r6, #0]
 8013cc4:	2f00      	cmp	r7, #0
 8013cc6:	d193      	bne.n	8013bf0 <rcl_validate_topic_name+0x50>
 8013cc8:	e7b8      	b.n	8013c3c <rcl_validate_topic_name+0x9c>
 8013cca:	200b      	movs	r0, #11
 8013ccc:	e792      	b.n	8013bf4 <rcl_validate_topic_name+0x54>
 8013cce:	2900      	cmp	r1, #0
 8013cd0:	d0bb      	beq.n	8013c4a <rcl_validate_topic_name+0xaa>
 8013cd2:	2306      	movs	r3, #6
 8013cd4:	6033      	str	r3, [r6, #0]
 8013cd6:	2f00      	cmp	r7, #0
 8013cd8:	d1af      	bne.n	8013c3a <rcl_validate_topic_name+0x9a>
 8013cda:	e7af      	b.n	8013c3c <rcl_validate_topic_name+0x9c>
 8013cdc:	2c00      	cmp	r4, #0
 8013cde:	d0b4      	beq.n	8013c4a <rcl_validate_topic_name+0xaa>
 8013ce0:	2308      	movs	r3, #8
 8013ce2:	6033      	str	r3, [r6, #0]
 8013ce4:	2f00      	cmp	r7, #0
 8013ce6:	d1a8      	bne.n	8013c3a <rcl_validate_topic_name+0x9a>
 8013ce8:	e7a8      	b.n	8013c3c <rcl_validate_topic_name+0x9c>
 8013cea:	4672      	mov	r2, lr
 8013cec:	f108 0301 	add.w	r3, r8, #1
 8013cf0:	e7ba      	b.n	8013c68 <rcl_validate_topic_name+0xc8>
 8013cf2:	2400      	movs	r4, #0
 8013cf4:	e7a9      	b.n	8013c4a <rcl_validate_topic_name+0xaa>
 8013cf6:	2202      	movs	r2, #2
 8013cf8:	4613      	mov	r3, r2
 8013cfa:	e7b5      	b.n	8013c68 <rcl_validate_topic_name+0xc8>
 8013cfc:	2000      	movs	r0, #0
 8013cfe:	6030      	str	r0, [r6, #0]
 8013d00:	e778      	b.n	8013bf4 <rcl_validate_topic_name+0x54>
 8013d02:	2205      	movs	r2, #5
 8013d04:	6032      	str	r2, [r6, #0]
 8013d06:	2f00      	cmp	r7, #0
 8013d08:	d098      	beq.n	8013c3c <rcl_validate_topic_name+0x9c>
 8013d0a:	603b      	str	r3, [r7, #0]
 8013d0c:	2000      	movs	r0, #0
 8013d0e:	e771      	b.n	8013bf4 <rcl_validate_topic_name+0x54>
 8013d10:	2c00      	cmp	r4, #0
 8013d12:	bf14      	ite	ne
 8013d14:	2308      	movne	r3, #8
 8013d16:	2303      	moveq	r3, #3
 8013d18:	6033      	str	r3, [r6, #0]
 8013d1a:	2f00      	cmp	r7, #0
 8013d1c:	d18d      	bne.n	8013c3a <rcl_validate_topic_name+0x9a>
 8013d1e:	e78d      	b.n	8013c3c <rcl_validate_topic_name+0x9c>
 8013d20:	f108 0401 	add.w	r4, r8, #1
 8013d24:	e007      	b.n	8013d36 <rcl_validate_topic_name+0x196>
 8013d26:	2801      	cmp	r0, #1
 8013d28:	d019      	beq.n	8013d5e <rcl_validate_topic_name+0x1be>
 8013d2a:	461a      	mov	r2, r3
 8013d2c:	4291      	cmp	r1, r2
 8013d2e:	4618      	mov	r0, r3
 8013d30:	f105 0501 	add.w	r5, r5, #1
 8013d34:	d9e2      	bls.n	8013cfc <rcl_validate_topic_name+0x15c>
 8013d36:	4580      	cmp	r8, r0
 8013d38:	f100 0301 	add.w	r3, r0, #1
 8013d3c:	d00b      	beq.n	8013d56 <rcl_validate_topic_name+0x1b6>
 8013d3e:	782a      	ldrb	r2, [r5, #0]
 8013d40:	2a2f      	cmp	r2, #47	; 0x2f
 8013d42:	d1f0      	bne.n	8013d26 <rcl_validate_topic_name+0x186>
 8013d44:	786b      	ldrb	r3, [r5, #1]
 8013d46:	f81c e003 	ldrb.w	lr, [ip, r3]
 8013d4a:	1c43      	adds	r3, r0, #1
 8013d4c:	f01e 0f04 	tst.w	lr, #4
 8013d50:	461a      	mov	r2, r3
 8013d52:	d0eb      	beq.n	8013d2c <rcl_validate_topic_name+0x18c>
 8013d54:	e79b      	b.n	8013c8e <rcl_validate_topic_name+0xee>
 8013d56:	4622      	mov	r2, r4
 8013d58:	f108 0301 	add.w	r3, r8, #1
 8013d5c:	e7e6      	b.n	8013d2c <rcl_validate_topic_name+0x18c>
 8013d5e:	2307      	movs	r3, #7
 8013d60:	6033      	str	r3, [r6, #0]
 8013d62:	2f00      	cmp	r7, #0
 8013d64:	f43f af6a 	beq.w	8013c3c <rcl_validate_topic_name+0x9c>
 8013d68:	6038      	str	r0, [r7, #0]
 8013d6a:	2000      	movs	r0, #0
 8013d6c:	e742      	b.n	8013bf4 <rcl_validate_topic_name+0x54>
 8013d6e:	bf00      	nop
 8013d70:	0801a0b8 	.word	0x0801a0b8

08013d74 <rcl_get_zero_initialized_wait_set>:
 8013d74:	b470      	push	{r4, r5, r6}
 8013d76:	4d07      	ldr	r5, [pc, #28]	; (8013d94 <rcl_get_zero_initialized_wait_set+0x20>)
 8013d78:	4606      	mov	r6, r0
 8013d7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013d7c:	4634      	mov	r4, r6
 8013d7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013d80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013d82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013d88:	682b      	ldr	r3, [r5, #0]
 8013d8a:	6023      	str	r3, [r4, #0]
 8013d8c:	4630      	mov	r0, r6
 8013d8e:	bc70      	pop	{r4, r5, r6}
 8013d90:	4770      	bx	lr
 8013d92:	bf00      	nop
 8013d94:	08019a90 	.word	0x08019a90

08013d98 <rcl_wait_set_is_valid>:
 8013d98:	b118      	cbz	r0, 8013da2 <rcl_wait_set_is_valid+0xa>
 8013d9a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8013d9c:	3800      	subs	r0, #0
 8013d9e:	bf18      	it	ne
 8013da0:	2001      	movne	r0, #1
 8013da2:	4770      	bx	lr

08013da4 <rcl_wait_set_fini>:
 8013da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013da8:	b082      	sub	sp, #8
 8013daa:	2800      	cmp	r0, #0
 8013dac:	f000 8095 	beq.w	8013eda <rcl_wait_set_fini+0x136>
 8013db0:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8013db2:	4604      	mov	r4, r0
 8013db4:	2e00      	cmp	r6, #0
 8013db6:	f000 808c 	beq.w	8013ed2 <rcl_wait_set_fini+0x12e>
 8013dba:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8013dbc:	f002 f806 	bl	8015dcc <rmw_destroy_wait_set>
 8013dc0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013dc2:	1e06      	subs	r6, r0, #0
 8013dc4:	bf18      	it	ne
 8013dc6:	f44f 7661 	movne.w	r6, #900	; 0x384
 8013dca:	2d00      	cmp	r5, #0
 8013dcc:	f000 8081 	beq.w	8013ed2 <rcl_wait_set_fini+0x12e>
 8013dd0:	6820      	ldr	r0, [r4, #0]
 8013dd2:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8013dd6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8013dd8:	2700      	movs	r7, #0
 8013dda:	6067      	str	r7, [r4, #4]
 8013ddc:	602f      	str	r7, [r5, #0]
 8013dde:	b120      	cbz	r0, 8013dea <rcl_wait_set_fini+0x46>
 8013de0:	9101      	str	r1, [sp, #4]
 8013de2:	47c0      	blx	r8
 8013de4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013de6:	9901      	ldr	r1, [sp, #4]
 8013de8:	6027      	str	r7, [r4, #0]
 8013dea:	68a8      	ldr	r0, [r5, #8]
 8013dec:	b120      	cbz	r0, 8013df8 <rcl_wait_set_fini+0x54>
 8013dee:	47c0      	blx	r8
 8013df0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013df2:	2300      	movs	r3, #0
 8013df4:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8013df8:	68a0      	ldr	r0, [r4, #8]
 8013dfa:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8013dfc:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8013dfe:	f04f 0800 	mov.w	r8, #0
 8013e02:	f8c4 800c 	str.w	r8, [r4, #12]
 8013e06:	f8c5 800c 	str.w	r8, [r5, #12]
 8013e0a:	b128      	cbz	r0, 8013e18 <rcl_wait_set_fini+0x74>
 8013e0c:	47b8      	blx	r7
 8013e0e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013e10:	f8c4 8008 	str.w	r8, [r4, #8]
 8013e14:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8013e16:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8013e18:	6968      	ldr	r0, [r5, #20]
 8013e1a:	f04f 0800 	mov.w	r8, #0
 8013e1e:	f8c5 8010 	str.w	r8, [r5, #16]
 8013e22:	b128      	cbz	r0, 8013e30 <rcl_wait_set_fini+0x8c>
 8013e24:	47b8      	blx	r7
 8013e26:	f8c5 8014 	str.w	r8, [r5, #20]
 8013e2a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013e2c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8013e2e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8013e30:	6920      	ldr	r0, [r4, #16]
 8013e32:	f04f 0800 	mov.w	r8, #0
 8013e36:	f8c4 8014 	str.w	r8, [r4, #20]
 8013e3a:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8013e3e:	b128      	cbz	r0, 8013e4c <rcl_wait_set_fini+0xa8>
 8013e40:	47b8      	blx	r7
 8013e42:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013e44:	f8c4 8010 	str.w	r8, [r4, #16]
 8013e48:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8013e4a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8013e4c:	69a0      	ldr	r0, [r4, #24]
 8013e4e:	f04f 0800 	mov.w	r8, #0
 8013e52:	f8c4 801c 	str.w	r8, [r4, #28]
 8013e56:	f8c5 8018 	str.w	r8, [r5, #24]
 8013e5a:	b128      	cbz	r0, 8013e68 <rcl_wait_set_fini+0xc4>
 8013e5c:	9101      	str	r1, [sp, #4]
 8013e5e:	47b8      	blx	r7
 8013e60:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013e62:	9901      	ldr	r1, [sp, #4]
 8013e64:	f8c4 8018 	str.w	r8, [r4, #24]
 8013e68:	6a28      	ldr	r0, [r5, #32]
 8013e6a:	b120      	cbz	r0, 8013e76 <rcl_wait_set_fini+0xd2>
 8013e6c:	47b8      	blx	r7
 8013e6e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013e70:	2300      	movs	r3, #0
 8013e72:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8013e76:	6a20      	ldr	r0, [r4, #32]
 8013e78:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8013e7c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8013e7e:	2700      	movs	r7, #0
 8013e80:	6267      	str	r7, [r4, #36]	; 0x24
 8013e82:	626f      	str	r7, [r5, #36]	; 0x24
 8013e84:	b120      	cbz	r0, 8013e90 <rcl_wait_set_fini+0xec>
 8013e86:	9101      	str	r1, [sp, #4]
 8013e88:	47c0      	blx	r8
 8013e8a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013e8c:	9901      	ldr	r1, [sp, #4]
 8013e8e:	6227      	str	r7, [r4, #32]
 8013e90:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8013e92:	b120      	cbz	r0, 8013e9e <rcl_wait_set_fini+0xfa>
 8013e94:	47c0      	blx	r8
 8013e96:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013e98:	2300      	movs	r3, #0
 8013e9a:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8013e9e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8013ea0:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8013ea4:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8013ea6:	2700      	movs	r7, #0
 8013ea8:	62e7      	str	r7, [r4, #44]	; 0x2c
 8013eaa:	632f      	str	r7, [r5, #48]	; 0x30
 8013eac:	b120      	cbz	r0, 8013eb8 <rcl_wait_set_fini+0x114>
 8013eae:	9101      	str	r1, [sp, #4]
 8013eb0:	47c0      	blx	r8
 8013eb2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013eb4:	9901      	ldr	r1, [sp, #4]
 8013eb6:	62a7      	str	r7, [r4, #40]	; 0x28
 8013eb8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8013eba:	b120      	cbz	r0, 8013ec6 <rcl_wait_set_fini+0x122>
 8013ebc:	47c0      	blx	r8
 8013ebe:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 8013ec6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8013ec8:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8013eca:	4628      	mov	r0, r5
 8013ecc:	4798      	blx	r3
 8013ece:	2300      	movs	r3, #0
 8013ed0:	6323      	str	r3, [r4, #48]	; 0x30
 8013ed2:	4630      	mov	r0, r6
 8013ed4:	b002      	add	sp, #8
 8013ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013eda:	260b      	movs	r6, #11
 8013edc:	4630      	mov	r0, r6
 8013ede:	b002      	add	sp, #8
 8013ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013ee4 <rcl_wait_set_add_subscription>:
 8013ee4:	b320      	cbz	r0, 8013f30 <rcl_wait_set_add_subscription+0x4c>
 8013ee6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8013ee8:	b570      	push	{r4, r5, r6, lr}
 8013eea:	4604      	mov	r4, r0
 8013eec:	b1d3      	cbz	r3, 8013f24 <rcl_wait_set_add_subscription+0x40>
 8013eee:	b319      	cbz	r1, 8013f38 <rcl_wait_set_add_subscription+0x54>
 8013ef0:	681d      	ldr	r5, [r3, #0]
 8013ef2:	6860      	ldr	r0, [r4, #4]
 8013ef4:	4285      	cmp	r5, r0
 8013ef6:	d218      	bcs.n	8013f2a <rcl_wait_set_add_subscription+0x46>
 8013ef8:	6820      	ldr	r0, [r4, #0]
 8013efa:	1c6e      	adds	r6, r5, #1
 8013efc:	601e      	str	r6, [r3, #0]
 8013efe:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013f02:	b102      	cbz	r2, 8013f06 <rcl_wait_set_add_subscription+0x22>
 8013f04:	6015      	str	r5, [r2, #0]
 8013f06:	4608      	mov	r0, r1
 8013f08:	f7f8 ff60 	bl	800cdcc <rcl_subscription_get_rmw_handle>
 8013f0c:	b190      	cbz	r0, 8013f34 <rcl_wait_set_add_subscription+0x50>
 8013f0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013f10:	6842      	ldr	r2, [r0, #4]
 8013f12:	689b      	ldr	r3, [r3, #8]
 8013f14:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013f18:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8013f1a:	6853      	ldr	r3, [r2, #4]
 8013f1c:	3301      	adds	r3, #1
 8013f1e:	6053      	str	r3, [r2, #4]
 8013f20:	2000      	movs	r0, #0
 8013f22:	bd70      	pop	{r4, r5, r6, pc}
 8013f24:	f44f 7061 	mov.w	r0, #900	; 0x384
 8013f28:	bd70      	pop	{r4, r5, r6, pc}
 8013f2a:	f240 3086 	movw	r0, #902	; 0x386
 8013f2e:	bd70      	pop	{r4, r5, r6, pc}
 8013f30:	200b      	movs	r0, #11
 8013f32:	4770      	bx	lr
 8013f34:	2001      	movs	r0, #1
 8013f36:	bd70      	pop	{r4, r5, r6, pc}
 8013f38:	200b      	movs	r0, #11
 8013f3a:	bd70      	pop	{r4, r5, r6, pc}

08013f3c <rcl_wait_set_clear>:
 8013f3c:	2800      	cmp	r0, #0
 8013f3e:	d073      	beq.n	8014028 <rcl_wait_set_clear+0xec>
 8013f40:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8013f42:	b510      	push	{r4, lr}
 8013f44:	4604      	mov	r4, r0
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d070      	beq.n	801402c <rcl_wait_set_clear+0xf0>
 8013f4a:	6800      	ldr	r0, [r0, #0]
 8013f4c:	b138      	cbz	r0, 8013f5e <rcl_wait_set_clear+0x22>
 8013f4e:	6862      	ldr	r2, [r4, #4]
 8013f50:	2100      	movs	r1, #0
 8013f52:	0092      	lsls	r2, r2, #2
 8013f54:	f004 fa88 	bl	8018468 <memset>
 8013f58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013f5a:	2200      	movs	r2, #0
 8013f5c:	601a      	str	r2, [r3, #0]
 8013f5e:	68a0      	ldr	r0, [r4, #8]
 8013f60:	b138      	cbz	r0, 8013f72 <rcl_wait_set_clear+0x36>
 8013f62:	68e2      	ldr	r2, [r4, #12]
 8013f64:	2100      	movs	r1, #0
 8013f66:	0092      	lsls	r2, r2, #2
 8013f68:	f004 fa7e 	bl	8018468 <memset>
 8013f6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013f6e:	2200      	movs	r2, #0
 8013f70:	60da      	str	r2, [r3, #12]
 8013f72:	69a0      	ldr	r0, [r4, #24]
 8013f74:	b138      	cbz	r0, 8013f86 <rcl_wait_set_clear+0x4a>
 8013f76:	69e2      	ldr	r2, [r4, #28]
 8013f78:	2100      	movs	r1, #0
 8013f7a:	0092      	lsls	r2, r2, #2
 8013f7c:	f004 fa74 	bl	8018468 <memset>
 8013f80:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013f82:	2200      	movs	r2, #0
 8013f84:	619a      	str	r2, [r3, #24]
 8013f86:	6a20      	ldr	r0, [r4, #32]
 8013f88:	b138      	cbz	r0, 8013f9a <rcl_wait_set_clear+0x5e>
 8013f8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8013f8c:	2100      	movs	r1, #0
 8013f8e:	0092      	lsls	r2, r2, #2
 8013f90:	f004 fa6a 	bl	8018468 <memset>
 8013f94:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013f96:	2200      	movs	r2, #0
 8013f98:	625a      	str	r2, [r3, #36]	; 0x24
 8013f9a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8013f9c:	b138      	cbz	r0, 8013fae <rcl_wait_set_clear+0x72>
 8013f9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013fa0:	2100      	movs	r1, #0
 8013fa2:	0092      	lsls	r2, r2, #2
 8013fa4:	f004 fa60 	bl	8018468 <memset>
 8013fa8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013faa:	2200      	movs	r2, #0
 8013fac:	631a      	str	r2, [r3, #48]	; 0x30
 8013fae:	6920      	ldr	r0, [r4, #16]
 8013fb0:	b138      	cbz	r0, 8013fc2 <rcl_wait_set_clear+0x86>
 8013fb2:	6962      	ldr	r2, [r4, #20]
 8013fb4:	2100      	movs	r1, #0
 8013fb6:	0092      	lsls	r2, r2, #2
 8013fb8:	f004 fa56 	bl	8018468 <memset>
 8013fbc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013fbe:	2200      	movs	r2, #0
 8013fc0:	641a      	str	r2, [r3, #64]	; 0x40
 8013fc2:	6898      	ldr	r0, [r3, #8]
 8013fc4:	b138      	cbz	r0, 8013fd6 <rcl_wait_set_clear+0x9a>
 8013fc6:	685a      	ldr	r2, [r3, #4]
 8013fc8:	2100      	movs	r1, #0
 8013fca:	0092      	lsls	r2, r2, #2
 8013fcc:	f004 fa4c 	bl	8018468 <memset>
 8013fd0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013fd2:	2200      	movs	r2, #0
 8013fd4:	605a      	str	r2, [r3, #4]
 8013fd6:	6958      	ldr	r0, [r3, #20]
 8013fd8:	b138      	cbz	r0, 8013fea <rcl_wait_set_clear+0xae>
 8013fda:	691a      	ldr	r2, [r3, #16]
 8013fdc:	2100      	movs	r1, #0
 8013fde:	0092      	lsls	r2, r2, #2
 8013fe0:	f004 fa42 	bl	8018468 <memset>
 8013fe4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	611a      	str	r2, [r3, #16]
 8013fea:	6a18      	ldr	r0, [r3, #32]
 8013fec:	b138      	cbz	r0, 8013ffe <rcl_wait_set_clear+0xc2>
 8013fee:	69da      	ldr	r2, [r3, #28]
 8013ff0:	2100      	movs	r1, #0
 8013ff2:	0092      	lsls	r2, r2, #2
 8013ff4:	f004 fa38 	bl	8018468 <memset>
 8013ff8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	61da      	str	r2, [r3, #28]
 8013ffe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8014000:	b138      	cbz	r0, 8014012 <rcl_wait_set_clear+0xd6>
 8014002:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014004:	2100      	movs	r1, #0
 8014006:	0092      	lsls	r2, r2, #2
 8014008:	f004 fa2e 	bl	8018468 <memset>
 801400c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801400e:	2200      	movs	r2, #0
 8014010:	629a      	str	r2, [r3, #40]	; 0x28
 8014012:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8014014:	b138      	cbz	r0, 8014026 <rcl_wait_set_clear+0xea>
 8014016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014018:	2100      	movs	r1, #0
 801401a:	0092      	lsls	r2, r2, #2
 801401c:	f004 fa24 	bl	8018468 <memset>
 8014020:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014022:	2000      	movs	r0, #0
 8014024:	6358      	str	r0, [r3, #52]	; 0x34
 8014026:	bd10      	pop	{r4, pc}
 8014028:	200b      	movs	r0, #11
 801402a:	4770      	bx	lr
 801402c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8014030:	bd10      	pop	{r4, pc}
 8014032:	bf00      	nop

08014034 <rcl_wait_set_resize>:
 8014034:	2800      	cmp	r0, #0
 8014036:	f000 81a6 	beq.w	8014386 <rcl_wait_set_resize+0x352>
 801403a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801403e:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 8014042:	b083      	sub	sp, #12
 8014044:	4604      	mov	r4, r0
 8014046:	f1ba 0f00 	cmp.w	sl, #0
 801404a:	f000 819e 	beq.w	801438a <rcl_wait_set_resize+0x356>
 801404e:	461e      	mov	r6, r3
 8014050:	e9da b313 	ldrd	fp, r3, [sl, #76]	; 0x4c
 8014054:	f04f 0800 	mov.w	r8, #0
 8014058:	f8da 9058 	ldr.w	r9, [sl, #88]	; 0x58
 801405c:	9300      	str	r3, [sp, #0]
 801405e:	f8c0 8004 	str.w	r8, [r0, #4]
 8014062:	460f      	mov	r7, r1
 8014064:	4615      	mov	r5, r2
 8014066:	f8ca 8000 	str.w	r8, [sl]
 801406a:	2900      	cmp	r1, #0
 801406c:	f000 80c9 	beq.w	8014202 <rcl_wait_set_resize+0x1ce>
 8014070:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8014074:	6800      	ldr	r0, [r0, #0]
 8014076:	4651      	mov	r1, sl
 8014078:	464a      	mov	r2, r9
 801407a:	4798      	blx	r3
 801407c:	6020      	str	r0, [r4, #0]
 801407e:	2800      	cmp	r0, #0
 8014080:	f000 80d8 	beq.w	8014234 <rcl_wait_set_resize+0x200>
 8014084:	4652      	mov	r2, sl
 8014086:	4641      	mov	r1, r8
 8014088:	f004 f9ee 	bl	8018468 <memset>
 801408c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801408e:	6067      	str	r7, [r4, #4]
 8014090:	6898      	ldr	r0, [r3, #8]
 8014092:	f8c3 8004 	str.w	r8, [r3, #4]
 8014096:	9301      	str	r3, [sp, #4]
 8014098:	464a      	mov	r2, r9
 801409a:	9b00      	ldr	r3, [sp, #0]
 801409c:	4651      	mov	r1, sl
 801409e:	4798      	blx	r3
 80140a0:	9b01      	ldr	r3, [sp, #4]
 80140a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80140a4:	6098      	str	r0, [r3, #8]
 80140a6:	6897      	ldr	r7, [r2, #8]
 80140a8:	2f00      	cmp	r7, #0
 80140aa:	f000 80be 	beq.w	801422a <rcl_wait_set_resize+0x1f6>
 80140ae:	4652      	mov	r2, sl
 80140b0:	4641      	mov	r1, r8
 80140b2:	4638      	mov	r0, r7
 80140b4:	f004 f9d8 	bl	8018468 <memset>
 80140b8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80140bc:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80140c0:	2700      	movs	r7, #0
 80140c2:	e9da 2313 	ldrd	r2, r3, [sl, #76]	; 0x4c
 80140c6:	60e7      	str	r7, [r4, #12]
 80140c8:	f8ca 700c 	str.w	r7, [sl, #12]
 80140cc:	2d00      	cmp	r5, #0
 80140ce:	f040 80b5 	bne.w	801423c <rcl_wait_set_resize+0x208>
 80140d2:	68a0      	ldr	r0, [r4, #8]
 80140d4:	b130      	cbz	r0, 80140e4 <rcl_wait_set_resize+0xb0>
 80140d6:	4641      	mov	r1, r8
 80140d8:	4790      	blx	r2
 80140da:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80140de:	60a5      	str	r5, [r4, #8]
 80140e0:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80140e4:	2700      	movs	r7, #0
 80140e6:	19ad      	adds	r5, r5, r6
 80140e8:	f8ca 7010 	str.w	r7, [sl, #16]
 80140ec:	f040 80be 	bne.w	801426c <rcl_wait_set_resize+0x238>
 80140f0:	f8da 0014 	ldr.w	r0, [sl, #20]
 80140f4:	b148      	cbz	r0, 801410a <rcl_wait_set_resize+0xd6>
 80140f6:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 80140fa:	4641      	mov	r1, r8
 80140fc:	4798      	blx	r3
 80140fe:	f8ca 5014 	str.w	r5, [sl, #20]
 8014102:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014106:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 801410a:	2500      	movs	r5, #0
 801410c:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 8014110:	6165      	str	r5, [r4, #20]
 8014112:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 8014116:	2e00      	cmp	r6, #0
 8014118:	f040 80bf 	bne.w	801429a <rcl_wait_set_resize+0x266>
 801411c:	6920      	ldr	r0, [r4, #16]
 801411e:	b140      	cbz	r0, 8014132 <rcl_wait_set_resize+0xfe>
 8014120:	4641      	mov	r1, r8
 8014122:	47c8      	blx	r9
 8014124:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014128:	6126      	str	r6, [r4, #16]
 801412a:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 801412e:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8014132:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014134:	2500      	movs	r5, #0
 8014136:	61e5      	str	r5, [r4, #28]
 8014138:	f8ca 5018 	str.w	r5, [sl, #24]
 801413c:	2b00      	cmp	r3, #0
 801413e:	f040 80c1 	bne.w	80142c4 <rcl_wait_set_resize+0x290>
 8014142:	69a0      	ldr	r0, [r4, #24]
 8014144:	b128      	cbz	r0, 8014152 <rcl_wait_set_resize+0x11e>
 8014146:	4641      	mov	r1, r8
 8014148:	47c8      	blx	r9
 801414a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801414c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014150:	61a3      	str	r3, [r4, #24]
 8014152:	f8da 0020 	ldr.w	r0, [sl, #32]
 8014156:	b130      	cbz	r0, 8014166 <rcl_wait_set_resize+0x132>
 8014158:	4641      	mov	r1, r8
 801415a:	47c8      	blx	r9
 801415c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014160:	2300      	movs	r3, #0
 8014162:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8014166:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014168:	f8da 7058 	ldr.w	r7, [sl, #88]	; 0x58
 801416c:	2600      	movs	r6, #0
 801416e:	e9da 8913 	ldrd	r8, r9, [sl, #76]	; 0x4c
 8014172:	6266      	str	r6, [r4, #36]	; 0x24
 8014174:	f8ca 6024 	str.w	r6, [sl, #36]	; 0x24
 8014178:	2b00      	cmp	r3, #0
 801417a:	f000 80c8 	beq.w	801430e <rcl_wait_set_resize+0x2da>
 801417e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8014182:	6a20      	ldr	r0, [r4, #32]
 8014184:	4651      	mov	r1, sl
 8014186:	463a      	mov	r2, r7
 8014188:	47c8      	blx	r9
 801418a:	6220      	str	r0, [r4, #32]
 801418c:	2800      	cmp	r0, #0
 801418e:	d051      	beq.n	8014234 <rcl_wait_set_resize+0x200>
 8014190:	4652      	mov	r2, sl
 8014192:	4631      	mov	r1, r6
 8014194:	f004 f968 	bl	8018468 <memset>
 8014198:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801419a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801419c:	6263      	str	r3, [r4, #36]	; 0x24
 801419e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80141a0:	62ae      	str	r6, [r5, #40]	; 0x28
 80141a2:	463a      	mov	r2, r7
 80141a4:	4651      	mov	r1, sl
 80141a6:	47c8      	blx	r9
 80141a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80141aa:	62e8      	str	r0, [r5, #44]	; 0x2c
 80141ac:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80141ae:	2d00      	cmp	r5, #0
 80141b0:	f000 8105 	beq.w	80143be <rcl_wait_set_resize+0x38a>
 80141b4:	4652      	mov	r2, sl
 80141b6:	4631      	mov	r1, r6
 80141b8:	4628      	mov	r0, r5
 80141ba:	f004 f955 	bl	8018468 <memset>
 80141be:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80141c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80141c4:	f8da 6058 	ldr.w	r6, [sl, #88]	; 0x58
 80141c8:	2500      	movs	r5, #0
 80141ca:	e9da 7913 	ldrd	r7, r9, [sl, #76]	; 0x4c
 80141ce:	62e5      	str	r5, [r4, #44]	; 0x2c
 80141d0:	f8ca 5030 	str.w	r5, [sl, #48]	; 0x30
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	f040 80af 	bne.w	8014338 <rcl_wait_set_resize+0x304>
 80141da:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80141dc:	b128      	cbz	r0, 80141ea <rcl_wait_set_resize+0x1b6>
 80141de:	4631      	mov	r1, r6
 80141e0:	47b8      	blx	r7
 80141e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80141e4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80141e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80141ea:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 80141ee:	b310      	cbz	r0, 8014236 <rcl_wait_set_resize+0x202>
 80141f0:	4631      	mov	r1, r6
 80141f2:	47b8      	blx	r7
 80141f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80141f6:	2000      	movs	r0, #0
 80141f8:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 80141fc:	b003      	add	sp, #12
 80141fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014202:	6800      	ldr	r0, [r0, #0]
 8014204:	b120      	cbz	r0, 8014210 <rcl_wait_set_resize+0x1dc>
 8014206:	4649      	mov	r1, r9
 8014208:	47d8      	blx	fp
 801420a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801420e:	6027      	str	r7, [r4, #0]
 8014210:	f8da 0008 	ldr.w	r0, [sl, #8]
 8014214:	2800      	cmp	r0, #0
 8014216:	f43f af51 	beq.w	80140bc <rcl_wait_set_resize+0x88>
 801421a:	4649      	mov	r1, r9
 801421c:	47d8      	blx	fp
 801421e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014222:	2300      	movs	r3, #0
 8014224:	e9ca 3301 	strd	r3, r3, [sl, #4]
 8014228:	e748      	b.n	80140bc <rcl_wait_set_resize+0x88>
 801422a:	6820      	ldr	r0, [r4, #0]
 801422c:	4649      	mov	r1, r9
 801422e:	47d8      	blx	fp
 8014230:	e9c4 7700 	strd	r7, r7, [r4]
 8014234:	200a      	movs	r0, #10
 8014236:	b003      	add	sp, #12
 8014238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801423c:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8014240:	68a0      	ldr	r0, [r4, #8]
 8014242:	4642      	mov	r2, r8
 8014244:	4649      	mov	r1, r9
 8014246:	4798      	blx	r3
 8014248:	60a0      	str	r0, [r4, #8]
 801424a:	2800      	cmp	r0, #0
 801424c:	d0f2      	beq.n	8014234 <rcl_wait_set_resize+0x200>
 801424e:	4639      	mov	r1, r7
 8014250:	464a      	mov	r2, r9
 8014252:	f004 f909 	bl	8018468 <memset>
 8014256:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801425a:	60e5      	str	r5, [r4, #12]
 801425c:	2700      	movs	r7, #0
 801425e:	19ad      	adds	r5, r5, r6
 8014260:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8014264:	f8ca 7010 	str.w	r7, [sl, #16]
 8014268:	f43f af42 	beq.w	80140f0 <rcl_wait_set_resize+0xbc>
 801426c:	00ad      	lsls	r5, r5, #2
 801426e:	4642      	mov	r2, r8
 8014270:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 8014274:	f8da 0014 	ldr.w	r0, [sl, #20]
 8014278:	4629      	mov	r1, r5
 801427a:	4798      	blx	r3
 801427c:	4680      	mov	r8, r0
 801427e:	f8ca 0014 	str.w	r0, [sl, #20]
 8014282:	2800      	cmp	r0, #0
 8014284:	f000 8084 	beq.w	8014390 <rcl_wait_set_resize+0x35c>
 8014288:	462a      	mov	r2, r5
 801428a:	4639      	mov	r1, r7
 801428c:	f004 f8ec 	bl	8018468 <memset>
 8014290:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014294:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8014298:	e737      	b.n	801410a <rcl_wait_set_resize+0xd6>
 801429a:	ea4f 0986 	mov.w	r9, r6, lsl #2
 801429e:	6920      	ldr	r0, [r4, #16]
 80142a0:	4642      	mov	r2, r8
 80142a2:	4649      	mov	r1, r9
 80142a4:	47b8      	blx	r7
 80142a6:	6120      	str	r0, [r4, #16]
 80142a8:	2800      	cmp	r0, #0
 80142aa:	d0c3      	beq.n	8014234 <rcl_wait_set_resize+0x200>
 80142ac:	464a      	mov	r2, r9
 80142ae:	4629      	mov	r1, r5
 80142b0:	f004 f8da 	bl	8018468 <memset>
 80142b4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80142b8:	6166      	str	r6, [r4, #20]
 80142ba:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 80142be:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80142c2:	e736      	b.n	8014132 <rcl_wait_set_resize+0xfe>
 80142c4:	009e      	lsls	r6, r3, #2
 80142c6:	69a0      	ldr	r0, [r4, #24]
 80142c8:	4631      	mov	r1, r6
 80142ca:	4642      	mov	r2, r8
 80142cc:	47b8      	blx	r7
 80142ce:	61a0      	str	r0, [r4, #24]
 80142d0:	2800      	cmp	r0, #0
 80142d2:	d0af      	beq.n	8014234 <rcl_wait_set_resize+0x200>
 80142d4:	4632      	mov	r2, r6
 80142d6:	4629      	mov	r1, r5
 80142d8:	f004 f8c6 	bl	8018468 <memset>
 80142dc:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80142e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142e2:	61e3      	str	r3, [r4, #28]
 80142e4:	f8da 0020 	ldr.w	r0, [sl, #32]
 80142e8:	f8ca 501c 	str.w	r5, [sl, #28]
 80142ec:	4642      	mov	r2, r8
 80142ee:	4631      	mov	r1, r6
 80142f0:	47b8      	blx	r7
 80142f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80142f4:	f8ca 0020 	str.w	r0, [sl, #32]
 80142f8:	6a1f      	ldr	r7, [r3, #32]
 80142fa:	2f00      	cmp	r7, #0
 80142fc:	d058      	beq.n	80143b0 <rcl_wait_set_resize+0x37c>
 80142fe:	4632      	mov	r2, r6
 8014300:	4629      	mov	r1, r5
 8014302:	4638      	mov	r0, r7
 8014304:	f004 f8b0 	bl	8018468 <memset>
 8014308:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801430c:	e72b      	b.n	8014166 <rcl_wait_set_resize+0x132>
 801430e:	6a20      	ldr	r0, [r4, #32]
 8014310:	b128      	cbz	r0, 801431e <rcl_wait_set_resize+0x2ea>
 8014312:	4639      	mov	r1, r7
 8014314:	47c0      	blx	r8
 8014316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014318:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801431c:	6223      	str	r3, [r4, #32]
 801431e:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 8014322:	2800      	cmp	r0, #0
 8014324:	f43f af4d 	beq.w	80141c2 <rcl_wait_set_resize+0x18e>
 8014328:	4639      	mov	r1, r7
 801432a:	47c0      	blx	r8
 801432c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014330:	2300      	movs	r3, #0
 8014332:	e9ca 330a 	strd	r3, r3, [sl, #40]	; 0x28
 8014336:	e744      	b.n	80141c2 <rcl_wait_set_resize+0x18e>
 8014338:	ea4f 0883 	mov.w	r8, r3, lsl #2
 801433c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801433e:	4641      	mov	r1, r8
 8014340:	4632      	mov	r2, r6
 8014342:	47c8      	blx	r9
 8014344:	62a0      	str	r0, [r4, #40]	; 0x28
 8014346:	2800      	cmp	r0, #0
 8014348:	f43f af74 	beq.w	8014234 <rcl_wait_set_resize+0x200>
 801434c:	4642      	mov	r2, r8
 801434e:	4629      	mov	r1, r5
 8014350:	f004 f88a 	bl	8018468 <memset>
 8014354:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801435a:	62e3      	str	r3, [r4, #44]	; 0x2c
 801435c:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8014360:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 8014364:	4632      	mov	r2, r6
 8014366:	4641      	mov	r1, r8
 8014368:	47c8      	blx	r9
 801436a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801436c:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8014370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014372:	b35b      	cbz	r3, 80143cc <rcl_wait_set_resize+0x398>
 8014374:	4642      	mov	r2, r8
 8014376:	4618      	mov	r0, r3
 8014378:	4629      	mov	r1, r5
 801437a:	f004 f875 	bl	8018468 <memset>
 801437e:	4628      	mov	r0, r5
 8014380:	b003      	add	sp, #12
 8014382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014386:	200b      	movs	r0, #11
 8014388:	4770      	bx	lr
 801438a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801438e:	e752      	b.n	8014236 <rcl_wait_set_resize+0x202>
 8014390:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014392:	68a0      	ldr	r0, [r4, #8]
 8014394:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014396:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8014398:	4790      	blx	r2
 801439a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801439c:	6920      	ldr	r0, [r4, #16]
 801439e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80143a0:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80143a2:	e9c4 8802 	strd	r8, r8, [r4, #8]
 80143a6:	4790      	blx	r2
 80143a8:	e9c4 8804 	strd	r8, r8, [r4, #16]
 80143ac:	200a      	movs	r0, #10
 80143ae:	e742      	b.n	8014236 <rcl_wait_set_resize+0x202>
 80143b0:	69a0      	ldr	r0, [r4, #24]
 80143b2:	4641      	mov	r1, r8
 80143b4:	47c8      	blx	r9
 80143b6:	e9c4 7706 	strd	r7, r7, [r4, #24]
 80143ba:	200a      	movs	r0, #10
 80143bc:	e73b      	b.n	8014236 <rcl_wait_set_resize+0x202>
 80143be:	6a20      	ldr	r0, [r4, #32]
 80143c0:	4639      	mov	r1, r7
 80143c2:	47c0      	blx	r8
 80143c4:	e9c4 5508 	strd	r5, r5, [r4, #32]
 80143c8:	200a      	movs	r0, #10
 80143ca:	e734      	b.n	8014236 <rcl_wait_set_resize+0x202>
 80143cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80143ce:	9300      	str	r3, [sp, #0]
 80143d0:	4631      	mov	r1, r6
 80143d2:	47b8      	blx	r7
 80143d4:	9b00      	ldr	r3, [sp, #0]
 80143d6:	200a      	movs	r0, #10
 80143d8:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 80143dc:	e72b      	b.n	8014236 <rcl_wait_set_resize+0x202>
 80143de:	bf00      	nop

080143e0 <rcl_wait_set_init>:
 80143e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143e4:	b084      	sub	sp, #16
 80143e6:	4604      	mov	r4, r0
 80143e8:	a810      	add	r0, sp, #64	; 0x40
 80143ea:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 80143ee:	460f      	mov	r7, r1
 80143f0:	4690      	mov	r8, r2
 80143f2:	4699      	mov	r9, r3
 80143f4:	f7f9 f96a 	bl	800d6cc <rcutils_allocator_is_valid>
 80143f8:	2800      	cmp	r0, #0
 80143fa:	d06b      	beq.n	80144d4 <rcl_wait_set_init+0xf4>
 80143fc:	2c00      	cmp	r4, #0
 80143fe:	d069      	beq.n	80144d4 <rcl_wait_set_init+0xf4>
 8014400:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014402:	b125      	cbz	r5, 801440e <rcl_wait_set_init+0x2e>
 8014404:	2564      	movs	r5, #100	; 0x64
 8014406:	4628      	mov	r0, r5
 8014408:	b004      	add	sp, #16
 801440a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801440e:	f1ba 0f00 	cmp.w	sl, #0
 8014412:	d05f      	beq.n	80144d4 <rcl_wait_set_init+0xf4>
 8014414:	4650      	mov	r0, sl
 8014416:	f7fe faa5 	bl	8012964 <rcl_context_is_valid>
 801441a:	2800      	cmp	r0, #0
 801441c:	d067      	beq.n	80144ee <rcl_wait_set_init+0x10e>
 801441e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014420:	9914      	ldr	r1, [sp, #80]	; 0x50
 8014422:	205c      	movs	r0, #92	; 0x5c
 8014424:	4798      	blx	r3
 8014426:	6320      	str	r0, [r4, #48]	; 0x30
 8014428:	2800      	cmp	r0, #0
 801442a:	d062      	beq.n	80144f2 <rcl_wait_set_init+0x112>
 801442c:	225c      	movs	r2, #92	; 0x5c
 801442e:	4629      	mov	r1, r5
 8014430:	f004 f81a 	bl	8018468 <memset>
 8014434:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8014438:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801443c:	6b26      	ldr	r6, [r4, #48]	; 0x30
 801443e:	f8dc e000 	ldr.w	lr, [ip]
 8014442:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 8014446:	f106 0c48 	add.w	ip, r6, #72	; 0x48
 801444a:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801444e:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8014452:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 8014456:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 801445a:	60b5      	str	r5, [r6, #8]
 801445c:	6075      	str	r5, [r6, #4]
 801445e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014462:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8014466:	1899      	adds	r1, r3, r2
 8014468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801446a:	f8da 0000 	ldr.w	r0, [sl]
 801446e:	f8cc e000 	str.w	lr, [ip]
 8014472:	4419      	add	r1, r3
 8014474:	4441      	add	r1, r8
 8014476:	3028      	adds	r0, #40	; 0x28
 8014478:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 801447c:	f001 fc9c 	bl	8015db8 <rmw_create_wait_set>
 8014480:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014482:	63f0      	str	r0, [r6, #60]	; 0x3c
 8014484:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8014486:	b350      	cbz	r0, 80144de <rcl_wait_set_init+0xfe>
 8014488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801448a:	9302      	str	r3, [sp, #8]
 801448c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801448e:	9301      	str	r3, [sp, #4]
 8014490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014492:	9300      	str	r3, [sp, #0]
 8014494:	4642      	mov	r2, r8
 8014496:	464b      	mov	r3, r9
 8014498:	4639      	mov	r1, r7
 801449a:	4620      	mov	r0, r4
 801449c:	f7ff fdca 	bl	8014034 <rcl_wait_set_resize>
 80144a0:	4605      	mov	r5, r0
 80144a2:	2800      	cmp	r0, #0
 80144a4:	d0af      	beq.n	8014406 <rcl_wait_set_init+0x26>
 80144a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80144a8:	bb2b      	cbnz	r3, 80144f6 <rcl_wait_set_init+0x116>
 80144aa:	2600      	movs	r6, #0
 80144ac:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80144b0:	9600      	str	r6, [sp, #0]
 80144b2:	4633      	mov	r3, r6
 80144b4:	4632      	mov	r2, r6
 80144b6:	4631      	mov	r1, r6
 80144b8:	4620      	mov	r0, r4
 80144ba:	f7ff fdbb 	bl	8014034 <rcl_wait_set_resize>
 80144be:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80144c0:	2800      	cmp	r0, #0
 80144c2:	d0a0      	beq.n	8014406 <rcl_wait_set_init+0x26>
 80144c4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80144c6:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80144c8:	4798      	blx	r3
 80144ca:	4628      	mov	r0, r5
 80144cc:	6326      	str	r6, [r4, #48]	; 0x30
 80144ce:	b004      	add	sp, #16
 80144d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144d4:	250b      	movs	r5, #11
 80144d6:	4628      	mov	r0, r5
 80144d8:	b004      	add	sp, #16
 80144da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144de:	2501      	movs	r5, #1
 80144e0:	f001 fc74 	bl	8015dcc <rmw_destroy_wait_set>
 80144e4:	2800      	cmp	r0, #0
 80144e6:	bf18      	it	ne
 80144e8:	f44f 7561 	movne.w	r5, #900	; 0x384
 80144ec:	e7dd      	b.n	80144aa <rcl_wait_set_init+0xca>
 80144ee:	2565      	movs	r5, #101	; 0x65
 80144f0:	e789      	b.n	8014406 <rcl_wait_set_init+0x26>
 80144f2:	250a      	movs	r5, #10
 80144f4:	e787      	b.n	8014406 <rcl_wait_set_init+0x26>
 80144f6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80144f8:	e7f2      	b.n	80144e0 <rcl_wait_set_init+0x100>
 80144fa:	bf00      	nop

080144fc <rcl_wait_set_add_guard_condition>:
 80144fc:	b320      	cbz	r0, 8014548 <rcl_wait_set_add_guard_condition+0x4c>
 80144fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014500:	b570      	push	{r4, r5, r6, lr}
 8014502:	4604      	mov	r4, r0
 8014504:	b1d3      	cbz	r3, 801453c <rcl_wait_set_add_guard_condition+0x40>
 8014506:	b319      	cbz	r1, 8014550 <rcl_wait_set_add_guard_condition+0x54>
 8014508:	68dd      	ldr	r5, [r3, #12]
 801450a:	68e0      	ldr	r0, [r4, #12]
 801450c:	4285      	cmp	r5, r0
 801450e:	d218      	bcs.n	8014542 <rcl_wait_set_add_guard_condition+0x46>
 8014510:	68a0      	ldr	r0, [r4, #8]
 8014512:	1c6e      	adds	r6, r5, #1
 8014514:	60de      	str	r6, [r3, #12]
 8014516:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801451a:	b102      	cbz	r2, 801451e <rcl_wait_set_add_guard_condition+0x22>
 801451c:	6015      	str	r5, [r2, #0]
 801451e:	4608      	mov	r0, r1
 8014520:	f003 f96c 	bl	80177fc <rcl_guard_condition_get_rmw_handle>
 8014524:	b190      	cbz	r0, 801454c <rcl_wait_set_add_guard_condition+0x50>
 8014526:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014528:	6842      	ldr	r2, [r0, #4]
 801452a:	695b      	ldr	r3, [r3, #20]
 801452c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014530:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014532:	6913      	ldr	r3, [r2, #16]
 8014534:	3301      	adds	r3, #1
 8014536:	6113      	str	r3, [r2, #16]
 8014538:	2000      	movs	r0, #0
 801453a:	bd70      	pop	{r4, r5, r6, pc}
 801453c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8014540:	bd70      	pop	{r4, r5, r6, pc}
 8014542:	f240 3086 	movw	r0, #902	; 0x386
 8014546:	bd70      	pop	{r4, r5, r6, pc}
 8014548:	200b      	movs	r0, #11
 801454a:	4770      	bx	lr
 801454c:	2001      	movs	r0, #1
 801454e:	bd70      	pop	{r4, r5, r6, pc}
 8014550:	200b      	movs	r0, #11
 8014552:	bd70      	pop	{r4, r5, r6, pc}

08014554 <rcl_wait_set_add_timer>:
 8014554:	b340      	cbz	r0, 80145a8 <rcl_wait_set_add_timer+0x54>
 8014556:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014558:	b570      	push	{r4, r5, r6, lr}
 801455a:	4604      	mov	r4, r0
 801455c:	b1f3      	cbz	r3, 801459c <rcl_wait_set_add_timer+0x48>
 801455e:	b329      	cbz	r1, 80145ac <rcl_wait_set_add_timer+0x58>
 8014560:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8014562:	6965      	ldr	r5, [r4, #20]
 8014564:	42a8      	cmp	r0, r5
 8014566:	d21c      	bcs.n	80145a2 <rcl_wait_set_add_timer+0x4e>
 8014568:	6925      	ldr	r5, [r4, #16]
 801456a:	1c46      	adds	r6, r0, #1
 801456c:	641e      	str	r6, [r3, #64]	; 0x40
 801456e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8014572:	b102      	cbz	r2, 8014576 <rcl_wait_set_add_timer+0x22>
 8014574:	6010      	str	r0, [r2, #0]
 8014576:	4608      	mov	r0, r1
 8014578:	f7ff faa4 	bl	8013ac4 <rcl_timer_get_guard_condition>
 801457c:	b168      	cbz	r0, 801459a <rcl_wait_set_add_timer+0x46>
 801457e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014580:	68e3      	ldr	r3, [r4, #12]
 8014582:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8014584:	3b01      	subs	r3, #1
 8014586:	441d      	add	r5, r3
 8014588:	f003 f938 	bl	80177fc <rcl_guard_condition_get_rmw_handle>
 801458c:	b180      	cbz	r0, 80145b0 <rcl_wait_set_add_timer+0x5c>
 801458e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014590:	6842      	ldr	r2, [r0, #4]
 8014592:	695b      	ldr	r3, [r3, #20]
 8014594:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014598:	2000      	movs	r0, #0
 801459a:	bd70      	pop	{r4, r5, r6, pc}
 801459c:	f44f 7061 	mov.w	r0, #900	; 0x384
 80145a0:	bd70      	pop	{r4, r5, r6, pc}
 80145a2:	f240 3086 	movw	r0, #902	; 0x386
 80145a6:	bd70      	pop	{r4, r5, r6, pc}
 80145a8:	200b      	movs	r0, #11
 80145aa:	4770      	bx	lr
 80145ac:	200b      	movs	r0, #11
 80145ae:	bd70      	pop	{r4, r5, r6, pc}
 80145b0:	2001      	movs	r0, #1
 80145b2:	bd70      	pop	{r4, r5, r6, pc}

080145b4 <rcl_wait_set_add_client>:
 80145b4:	b320      	cbz	r0, 8014600 <rcl_wait_set_add_client+0x4c>
 80145b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80145b8:	b570      	push	{r4, r5, r6, lr}
 80145ba:	4604      	mov	r4, r0
 80145bc:	b1d3      	cbz	r3, 80145f4 <rcl_wait_set_add_client+0x40>
 80145be:	b319      	cbz	r1, 8014608 <rcl_wait_set_add_client+0x54>
 80145c0:	699d      	ldr	r5, [r3, #24]
 80145c2:	69e0      	ldr	r0, [r4, #28]
 80145c4:	4285      	cmp	r5, r0
 80145c6:	d218      	bcs.n	80145fa <rcl_wait_set_add_client+0x46>
 80145c8:	69a0      	ldr	r0, [r4, #24]
 80145ca:	1c6e      	adds	r6, r5, #1
 80145cc:	619e      	str	r6, [r3, #24]
 80145ce:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80145d2:	b102      	cbz	r2, 80145d6 <rcl_wait_set_add_client+0x22>
 80145d4:	6015      	str	r5, [r2, #0]
 80145d6:	4608      	mov	r0, r1
 80145d8:	f7fe f964 	bl	80128a4 <rcl_client_get_rmw_handle>
 80145dc:	b190      	cbz	r0, 8014604 <rcl_wait_set_add_client+0x50>
 80145de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80145e0:	6842      	ldr	r2, [r0, #4]
 80145e2:	6a1b      	ldr	r3, [r3, #32]
 80145e4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80145e8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80145ea:	69d3      	ldr	r3, [r2, #28]
 80145ec:	3301      	adds	r3, #1
 80145ee:	61d3      	str	r3, [r2, #28]
 80145f0:	2000      	movs	r0, #0
 80145f2:	bd70      	pop	{r4, r5, r6, pc}
 80145f4:	f44f 7061 	mov.w	r0, #900	; 0x384
 80145f8:	bd70      	pop	{r4, r5, r6, pc}
 80145fa:	f240 3086 	movw	r0, #902	; 0x386
 80145fe:	bd70      	pop	{r4, r5, r6, pc}
 8014600:	200b      	movs	r0, #11
 8014602:	4770      	bx	lr
 8014604:	2001      	movs	r0, #1
 8014606:	bd70      	pop	{r4, r5, r6, pc}
 8014608:	200b      	movs	r0, #11
 801460a:	bd70      	pop	{r4, r5, r6, pc}

0801460c <rcl_wait_set_add_service>:
 801460c:	b320      	cbz	r0, 8014658 <rcl_wait_set_add_service+0x4c>
 801460e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014610:	b570      	push	{r4, r5, r6, lr}
 8014612:	4604      	mov	r4, r0
 8014614:	b1d3      	cbz	r3, 801464c <rcl_wait_set_add_service+0x40>
 8014616:	b319      	cbz	r1, 8014660 <rcl_wait_set_add_service+0x54>
 8014618:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801461a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801461c:	4285      	cmp	r5, r0
 801461e:	d218      	bcs.n	8014652 <rcl_wait_set_add_service+0x46>
 8014620:	6a20      	ldr	r0, [r4, #32]
 8014622:	1c6e      	adds	r6, r5, #1
 8014624:	625e      	str	r6, [r3, #36]	; 0x24
 8014626:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801462a:	b102      	cbz	r2, 801462e <rcl_wait_set_add_service+0x22>
 801462c:	6015      	str	r5, [r2, #0]
 801462e:	4608      	mov	r0, r1
 8014630:	f7ff f84e 	bl	80136d0 <rcl_service_get_rmw_handle>
 8014634:	b190      	cbz	r0, 801465c <rcl_wait_set_add_service+0x50>
 8014636:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014638:	6842      	ldr	r2, [r0, #4]
 801463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801463c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014640:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014642:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8014644:	3301      	adds	r3, #1
 8014646:	6293      	str	r3, [r2, #40]	; 0x28
 8014648:	2000      	movs	r0, #0
 801464a:	bd70      	pop	{r4, r5, r6, pc}
 801464c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8014650:	bd70      	pop	{r4, r5, r6, pc}
 8014652:	f240 3086 	movw	r0, #902	; 0x386
 8014656:	bd70      	pop	{r4, r5, r6, pc}
 8014658:	200b      	movs	r0, #11
 801465a:	4770      	bx	lr
 801465c:	2001      	movs	r0, #1
 801465e:	bd70      	pop	{r4, r5, r6, pc}
 8014660:	200b      	movs	r0, #11
 8014662:	bd70      	pop	{r4, r5, r6, pc}
 8014664:	0000      	movs	r0, r0
	...

08014668 <rcl_wait>:
 8014668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801466c:	b08f      	sub	sp, #60	; 0x3c
 801466e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014672:	2800      	cmp	r0, #0
 8014674:	f000 814c 	beq.w	8014910 <rcl_wait+0x2a8>
 8014678:	6b05      	ldr	r5, [r0, #48]	; 0x30
 801467a:	4604      	mov	r4, r0
 801467c:	2d00      	cmp	r5, #0
 801467e:	f000 80bc 	beq.w	80147fa <rcl_wait+0x192>
 8014682:	6843      	ldr	r3, [r0, #4]
 8014684:	b973      	cbnz	r3, 80146a4 <rcl_wait+0x3c>
 8014686:	68e3      	ldr	r3, [r4, #12]
 8014688:	b963      	cbnz	r3, 80146a4 <rcl_wait+0x3c>
 801468a:	6963      	ldr	r3, [r4, #20]
 801468c:	b953      	cbnz	r3, 80146a4 <rcl_wait+0x3c>
 801468e:	69e3      	ldr	r3, [r4, #28]
 8014690:	b943      	cbnz	r3, 80146a4 <rcl_wait+0x3c>
 8014692:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014694:	b933      	cbnz	r3, 80146a4 <rcl_wait+0x3c>
 8014696:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014698:	b923      	cbnz	r3, 80146a4 <rcl_wait+0x3c>
 801469a:	f240 3085 	movw	r0, #901	; 0x385
 801469e:	b00f      	add	sp, #60	; 0x3c
 80146a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80146a8:	2a01      	cmp	r2, #1
 80146aa:	f173 0300 	sbcs.w	r3, r3, #0
 80146ae:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80146b0:	db56      	blt.n	8014760 <rcl_wait+0xf8>
 80146b2:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80146b6:	2900      	cmp	r1, #0
 80146b8:	f000 8149 	beq.w	801494e <rcl_wait+0x2e6>
 80146bc:	2300      	movs	r3, #0
 80146be:	9307      	str	r3, [sp, #28]
 80146c0:	469b      	mov	fp, r3
 80146c2:	f04f 0800 	mov.w	r8, #0
 80146c6:	f04f 0900 	mov.w	r9, #0
 80146ca:	e00d      	b.n	80146e8 <rcl_wait+0x80>
 80146cc:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80146ce:	6922      	ldr	r2, [r4, #16]
 80146d0:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80146d2:	f842 000a 	str.w	r0, [r2, sl]
 80146d6:	f118 0801 	adds.w	r8, r8, #1
 80146da:	f149 0900 	adc.w	r9, r9, #0
 80146de:	2300      	movs	r3, #0
 80146e0:	4599      	cmp	r9, r3
 80146e2:	bf08      	it	eq
 80146e4:	4588      	cmpeq	r8, r1
 80146e6:	d243      	bcs.n	8014770 <rcl_wait+0x108>
 80146e8:	6922      	ldr	r2, [r4, #16]
 80146ea:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 80146ee:	f852 000a 	ldr.w	r0, [r2, sl]
 80146f2:	2800      	cmp	r0, #0
 80146f4:	d0ef      	beq.n	80146d6 <rcl_wait+0x6e>
 80146f6:	68e2      	ldr	r2, [r4, #12]
 80146f8:	6969      	ldr	r1, [r5, #20]
 80146fa:	4442      	add	r2, r8
 80146fc:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8014700:	b13b      	cbz	r3, 8014712 <rcl_wait+0xaa>
 8014702:	692a      	ldr	r2, [r5, #16]
 8014704:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014708:	6921      	ldr	r1, [r4, #16]
 801470a:	3201      	adds	r2, #1
 801470c:	f851 000a 	ldr.w	r0, [r1, sl]
 8014710:	612a      	str	r2, [r5, #16]
 8014712:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8014716:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
 801471a:	f7ff f9c1 	bl	8013aa0 <rcl_timer_is_canceled>
 801471e:	2800      	cmp	r0, #0
 8014720:	d1bd      	bne.n	801469e <rcl_wait+0x36>
 8014722:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8014726:	2a00      	cmp	r2, #0
 8014728:	d1d0      	bne.n	80146cc <rcl_wait+0x64>
 801472a:	6922      	ldr	r2, [r4, #16]
 801472c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014730:	f852 000a 	ldr.w	r0, [r2, sl]
 8014734:	a90a      	add	r1, sp, #40	; 0x28
 8014736:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801473a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801473e:	f7ff f98b 	bl	8013a58 <rcl_timer_get_time_until_next_call>
 8014742:	2800      	cmp	r0, #0
 8014744:	d1ab      	bne.n	801469e <rcl_wait+0x36>
 8014746:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801474a:	42b2      	cmp	r2, r6
 801474c:	eb73 0107 	sbcs.w	r1, r3, r7
 8014750:	da03      	bge.n	801475a <rcl_wait+0xf2>
 8014752:	461f      	mov	r7, r3
 8014754:	2301      	movs	r3, #1
 8014756:	4616      	mov	r6, r2
 8014758:	9307      	str	r3, [sp, #28]
 801475a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801475c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 801475e:	e7ba      	b.n	80146d6 <rcl_wait+0x6e>
 8014760:	2900      	cmp	r1, #0
 8014762:	f000 80de 	beq.w	8014922 <rcl_wait+0x2ba>
 8014766:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801476a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801476e:	e7a5      	b.n	80146bc <rcl_wait+0x54>
 8014770:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014774:	4313      	orrs	r3, r2
 8014776:	d145      	bne.n	8014804 <rcl_wait+0x19c>
 8014778:	2300      	movs	r3, #0
 801477a:	2200      	movs	r2, #0
 801477c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014780:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014784:	ab0a      	add	r3, sp, #40	; 0x28
 8014786:	9302      	str	r3, [sp, #8]
 8014788:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801478a:	9301      	str	r3, [sp, #4]
 801478c:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8014790:	9300      	str	r3, [sp, #0]
 8014792:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8014796:	f105 031c 	add.w	r3, r5, #28
 801479a:	f105 0110 	add.w	r1, r5, #16
 801479e:	1d28      	adds	r0, r5, #4
 80147a0:	f001 f98a 	bl	8015ab8 <rmw_wait>
 80147a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80147a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80147a8:	4680      	mov	r8, r0
 80147aa:	b30a      	cbz	r2, 80147f0 <rcl_wait+0x188>
 80147ac:	2500      	movs	r5, #0
 80147ae:	462f      	mov	r7, r5
 80147b0:	e004      	b.n	80147bc <rcl_wait+0x154>
 80147b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80147b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80147b6:	3501      	adds	r5, #1
 80147b8:	42aa      	cmp	r2, r5
 80147ba:	d919      	bls.n	80147f0 <rcl_wait+0x188>
 80147bc:	6922      	ldr	r2, [r4, #16]
 80147be:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80147c2:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 80147c6:	00ae      	lsls	r6, r5, #2
 80147c8:	2800      	cmp	r0, #0
 80147ca:	d0f3      	beq.n	80147b4 <rcl_wait+0x14c>
 80147cc:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 80147d0:	f7ff f90a 	bl	80139e8 <rcl_timer_is_ready>
 80147d4:	2800      	cmp	r0, #0
 80147d6:	f47f af62 	bne.w	801469e <rcl_wait+0x36>
 80147da:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 80147de:	2a00      	cmp	r2, #0
 80147e0:	d1e7      	bne.n	80147b2 <rcl_wait+0x14a>
 80147e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80147e4:	6921      	ldr	r1, [r4, #16]
 80147e6:	518a      	str	r2, [r1, r6]
 80147e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80147ea:	3501      	adds	r5, #1
 80147ec:	42aa      	cmp	r2, r5
 80147ee:	d8e5      	bhi.n	80147bc <rcl_wait+0x154>
 80147f0:	f038 0002 	bics.w	r0, r8, #2
 80147f4:	d029      	beq.n	801484a <rcl_wait+0x1e2>
 80147f6:	2001      	movs	r0, #1
 80147f8:	e751      	b.n	801469e <rcl_wait+0x36>
 80147fa:	f44f 7061 	mov.w	r0, #900	; 0x384
 80147fe:	b00f      	add	sp, #60	; 0x3c
 8014800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014804:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014808:	2a01      	cmp	r2, #1
 801480a:	f173 0300 	sbcs.w	r3, r3, #0
 801480e:	f2c0 8083 	blt.w	8014918 <rcl_wait+0x2b0>
 8014812:	2e00      	cmp	r6, #0
 8014814:	f177 0300 	sbcs.w	r3, r7, #0
 8014818:	bfbc      	itt	lt
 801481a:	2600      	movlt	r6, #0
 801481c:	2700      	movlt	r7, #0
 801481e:	a34e      	add	r3, pc, #312	; (adr r3, 8014958 <rcl_wait+0x2f0>)
 8014820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014824:	4630      	mov	r0, r6
 8014826:	4639      	mov	r1, r7
 8014828:	f7ec f960 	bl	8000aec <__aeabi_ldivmod>
 801482c:	a34a      	add	r3, pc, #296	; (adr r3, 8014958 <rcl_wait+0x2f0>)
 801482e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014832:	4680      	mov	r8, r0
 8014834:	4689      	mov	r9, r1
 8014836:	4630      	mov	r0, r6
 8014838:	4639      	mov	r1, r7
 801483a:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 801483e:	f7ec f955 	bl	8000aec <__aeabi_ldivmod>
 8014842:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014846:	ab0a      	add	r3, sp, #40	; 0x28
 8014848:	e79d      	b.n	8014786 <rcl_wait+0x11e>
 801484a:	6866      	ldr	r6, [r4, #4]
 801484c:	4602      	mov	r2, r0
 801484e:	b91e      	cbnz	r6, 8014858 <rcl_wait+0x1f0>
 8014850:	e00d      	b.n	801486e <rcl_wait+0x206>
 8014852:	3201      	adds	r2, #1
 8014854:	42b2      	cmp	r2, r6
 8014856:	d00a      	beq.n	801486e <rcl_wait+0x206>
 8014858:	6899      	ldr	r1, [r3, #8]
 801485a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801485e:	2900      	cmp	r1, #0
 8014860:	d1f7      	bne.n	8014852 <rcl_wait+0x1ea>
 8014862:	6825      	ldr	r5, [r4, #0]
 8014864:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8014868:	3201      	adds	r2, #1
 801486a:	42b2      	cmp	r2, r6
 801486c:	d1f4      	bne.n	8014858 <rcl_wait+0x1f0>
 801486e:	68e6      	ldr	r6, [r4, #12]
 8014870:	2200      	movs	r2, #0
 8014872:	b91e      	cbnz	r6, 801487c <rcl_wait+0x214>
 8014874:	e00d      	b.n	8014892 <rcl_wait+0x22a>
 8014876:	3201      	adds	r2, #1
 8014878:	42b2      	cmp	r2, r6
 801487a:	d00a      	beq.n	8014892 <rcl_wait+0x22a>
 801487c:	6959      	ldr	r1, [r3, #20]
 801487e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014882:	2900      	cmp	r1, #0
 8014884:	d1f7      	bne.n	8014876 <rcl_wait+0x20e>
 8014886:	68a5      	ldr	r5, [r4, #8]
 8014888:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801488c:	3201      	adds	r2, #1
 801488e:	42b2      	cmp	r2, r6
 8014890:	d1f4      	bne.n	801487c <rcl_wait+0x214>
 8014892:	69e6      	ldr	r6, [r4, #28]
 8014894:	2200      	movs	r2, #0
 8014896:	b91e      	cbnz	r6, 80148a0 <rcl_wait+0x238>
 8014898:	e00d      	b.n	80148b6 <rcl_wait+0x24e>
 801489a:	3201      	adds	r2, #1
 801489c:	42b2      	cmp	r2, r6
 801489e:	d00a      	beq.n	80148b6 <rcl_wait+0x24e>
 80148a0:	6a19      	ldr	r1, [r3, #32]
 80148a2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80148a6:	2900      	cmp	r1, #0
 80148a8:	d1f7      	bne.n	801489a <rcl_wait+0x232>
 80148aa:	69a5      	ldr	r5, [r4, #24]
 80148ac:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80148b0:	3201      	adds	r2, #1
 80148b2:	42b2      	cmp	r2, r6
 80148b4:	d1f4      	bne.n	80148a0 <rcl_wait+0x238>
 80148b6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80148b8:	2200      	movs	r2, #0
 80148ba:	b91e      	cbnz	r6, 80148c4 <rcl_wait+0x25c>
 80148bc:	e00d      	b.n	80148da <rcl_wait+0x272>
 80148be:	3201      	adds	r2, #1
 80148c0:	4296      	cmp	r6, r2
 80148c2:	d00a      	beq.n	80148da <rcl_wait+0x272>
 80148c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80148c6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80148ca:	2900      	cmp	r1, #0
 80148cc:	d1f7      	bne.n	80148be <rcl_wait+0x256>
 80148ce:	6a25      	ldr	r5, [r4, #32]
 80148d0:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80148d4:	3201      	adds	r2, #1
 80148d6:	4296      	cmp	r6, r2
 80148d8:	d1f4      	bne.n	80148c4 <rcl_wait+0x25c>
 80148da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80148dc:	2200      	movs	r2, #0
 80148de:	b91e      	cbnz	r6, 80148e8 <rcl_wait+0x280>
 80148e0:	e00d      	b.n	80148fe <rcl_wait+0x296>
 80148e2:	3201      	adds	r2, #1
 80148e4:	42b2      	cmp	r2, r6
 80148e6:	d00a      	beq.n	80148fe <rcl_wait+0x296>
 80148e8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80148ea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80148ee:	2900      	cmp	r1, #0
 80148f0:	d1f7      	bne.n	80148e2 <rcl_wait+0x27a>
 80148f2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80148f4:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80148f8:	3201      	adds	r2, #1
 80148fa:	42b2      	cmp	r2, r6
 80148fc:	d1f4      	bne.n	80148e8 <rcl_wait+0x280>
 80148fe:	f1b8 0f02 	cmp.w	r8, #2
 8014902:	f47f aecc 	bne.w	801469e <rcl_wait+0x36>
 8014906:	9b07      	ldr	r3, [sp, #28]
 8014908:	2b00      	cmp	r3, #0
 801490a:	bf08      	it	eq
 801490c:	2002      	moveq	r0, #2
 801490e:	e6c6      	b.n	801469e <rcl_wait+0x36>
 8014910:	200b      	movs	r0, #11
 8014912:	b00f      	add	sp, #60	; 0x3c
 8014914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014918:	9b07      	ldr	r3, [sp, #28]
 801491a:	2b00      	cmp	r3, #0
 801491c:	f47f af79 	bne.w	8014812 <rcl_wait+0x1aa>
 8014920:	e731      	b.n	8014786 <rcl_wait+0x11e>
 8014922:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014926:	4313      	orrs	r3, r2
 8014928:	bf08      	it	eq
 801492a:	9107      	streq	r1, [sp, #28]
 801492c:	f43f af24 	beq.w	8014778 <rcl_wait+0x110>
 8014930:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014934:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8014938:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801493c:	2a01      	cmp	r2, #1
 801493e:	f173 0300 	sbcs.w	r3, r3, #0
 8014942:	f04f 0300 	mov.w	r3, #0
 8014946:	9307      	str	r3, [sp, #28]
 8014948:	f6bf af63 	bge.w	8014812 <rcl_wait+0x1aa>
 801494c:	e71b      	b.n	8014786 <rcl_wait+0x11e>
 801494e:	4632      	mov	r2, r6
 8014950:	463b      	mov	r3, r7
 8014952:	e7f3      	b.n	801493c <rcl_wait+0x2d4>
 8014954:	f3af 8000 	nop.w
 8014958:	3b9aca00 	.word	0x3b9aca00
 801495c:	00000000 	.word	0x00000000

08014960 <__atomic_load_8>:
 8014960:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014964:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8014968:	4b14      	ldr	r3, [pc, #80]	; (80149bc <__atomic_load_8+0x5c>)
 801496a:	4a15      	ldr	r2, [pc, #84]	; (80149c0 <__atomic_load_8+0x60>)
 801496c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014970:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8014974:	fb03 f301 	mul.w	r3, r3, r1
 8014978:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 801497c:	fba2 1203 	umull	r1, r2, r2, r3
 8014980:	0912      	lsrs	r2, r2, #4
 8014982:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8014986:	b430      	push	{r4, r5}
 8014988:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 801498c:	4c0d      	ldr	r4, [pc, #52]	; (80149c4 <__atomic_load_8+0x64>)
 801498e:	1a9b      	subs	r3, r3, r2
 8014990:	18e1      	adds	r1, r4, r3
 8014992:	f04f 0501 	mov.w	r5, #1
 8014996:	e8d1 2f4f 	ldrexb	r2, [r1]
 801499a:	e8c1 5f4c 	strexb	ip, r5, [r1]
 801499e:	f1bc 0f00 	cmp.w	ip, #0
 80149a2:	d1f8      	bne.n	8014996 <__atomic_load_8+0x36>
 80149a4:	f3bf 8f5b 	dmb	ish
 80149a8:	b2d2      	uxtb	r2, r2
 80149aa:	2a00      	cmp	r2, #0
 80149ac:	d1f3      	bne.n	8014996 <__atomic_load_8+0x36>
 80149ae:	e9d0 0100 	ldrd	r0, r1, [r0]
 80149b2:	f3bf 8f5b 	dmb	ish
 80149b6:	54e2      	strb	r2, [r4, r3]
 80149b8:	bc30      	pop	{r4, r5}
 80149ba:	4770      	bx	lr
 80149bc:	27d4eb2d 	.word	0x27d4eb2d
 80149c0:	b21642c9 	.word	0xb21642c9
 80149c4:	20009c2c 	.word	0x20009c2c

080149c8 <__atomic_store_8>:
 80149c8:	b4f0      	push	{r4, r5, r6, r7}
 80149ca:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 80149ce:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 80149d2:	4914      	ldr	r1, [pc, #80]	; (8014a24 <__atomic_store_8+0x5c>)
 80149d4:	4c14      	ldr	r4, [pc, #80]	; (8014a28 <__atomic_store_8+0x60>)
 80149d6:	4e15      	ldr	r6, [pc, #84]	; (8014a2c <__atomic_store_8+0x64>)
 80149d8:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 80149dc:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 80149e0:	fb01 f105 	mul.w	r1, r1, r5
 80149e4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80149e8:	fba4 5401 	umull	r5, r4, r4, r1
 80149ec:	0924      	lsrs	r4, r4, #4
 80149ee:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80149f2:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 80149f6:	1b09      	subs	r1, r1, r4
 80149f8:	1875      	adds	r5, r6, r1
 80149fa:	f04f 0701 	mov.w	r7, #1
 80149fe:	e8d5 4f4f 	ldrexb	r4, [r5]
 8014a02:	e8c5 7f4c 	strexb	ip, r7, [r5]
 8014a06:	f1bc 0f00 	cmp.w	ip, #0
 8014a0a:	d1f8      	bne.n	80149fe <__atomic_store_8+0x36>
 8014a0c:	f3bf 8f5b 	dmb	ish
 8014a10:	b2e4      	uxtb	r4, r4
 8014a12:	2c00      	cmp	r4, #0
 8014a14:	d1f3      	bne.n	80149fe <__atomic_store_8+0x36>
 8014a16:	e9c0 2300 	strd	r2, r3, [r0]
 8014a1a:	f3bf 8f5b 	dmb	ish
 8014a1e:	5474      	strb	r4, [r6, r1]
 8014a20:	bcf0      	pop	{r4, r5, r6, r7}
 8014a22:	4770      	bx	lr
 8014a24:	27d4eb2d 	.word	0x27d4eb2d
 8014a28:	b21642c9 	.word	0xb21642c9
 8014a2c:	20009c2c 	.word	0x20009c2c

08014a30 <__atomic_exchange_8>:
 8014a30:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8014a34:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8014a38:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8014a3c:	4c16      	ldr	r4, [pc, #88]	; (8014a98 <__atomic_exchange_8+0x68>)
 8014a3e:	4917      	ldr	r1, [pc, #92]	; (8014a9c <__atomic_exchange_8+0x6c>)
 8014a40:	4e17      	ldr	r6, [pc, #92]	; (8014aa0 <__atomic_exchange_8+0x70>)
 8014a42:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8014a46:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8014a4a:	fb04 f505 	mul.w	r5, r4, r5
 8014a4e:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 8014a52:	fba1 4105 	umull	r4, r1, r1, r5
 8014a56:	0909      	lsrs	r1, r1, #4
 8014a58:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8014a5c:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8014a60:	1a6c      	subs	r4, r5, r1
 8014a62:	1931      	adds	r1, r6, r4
 8014a64:	f04f 0701 	mov.w	r7, #1
 8014a68:	e8d1 5f4f 	ldrexb	r5, [r1]
 8014a6c:	e8c1 7f4c 	strexb	ip, r7, [r1]
 8014a70:	f1bc 0f00 	cmp.w	ip, #0
 8014a74:	d1f8      	bne.n	8014a68 <__atomic_exchange_8+0x38>
 8014a76:	f3bf 8f5b 	dmb	ish
 8014a7a:	b2ed      	uxtb	r5, r5
 8014a7c:	2d00      	cmp	r5, #0
 8014a7e:	d1f3      	bne.n	8014a68 <__atomic_exchange_8+0x38>
 8014a80:	e9d0 8900 	ldrd	r8, r9, [r0]
 8014a84:	e9c0 2300 	strd	r2, r3, [r0]
 8014a88:	f3bf 8f5b 	dmb	ish
 8014a8c:	5535      	strb	r5, [r6, r4]
 8014a8e:	4640      	mov	r0, r8
 8014a90:	4649      	mov	r1, r9
 8014a92:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8014a96:	4770      	bx	lr
 8014a98:	27d4eb2d 	.word	0x27d4eb2d
 8014a9c:	b21642c9 	.word	0xb21642c9
 8014aa0:	20009c2c 	.word	0x20009c2c

08014aa4 <rcutils_is_directory>:
 8014aa4:	2000      	movs	r0, #0
 8014aa6:	4770      	bx	lr

08014aa8 <rcutils_join_path>:
 8014aa8:	b082      	sub	sp, #8
 8014aaa:	e88d 000c 	stmia.w	sp, {r2, r3}
 8014aae:	2000      	movs	r0, #0
 8014ab0:	b002      	add	sp, #8
 8014ab2:	4770      	bx	lr

08014ab4 <rcutils_to_native_path>:
 8014ab4:	b084      	sub	sp, #16
 8014ab6:	a801      	add	r0, sp, #4
 8014ab8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8014abc:	b004      	add	sp, #16
 8014abe:	2000      	movs	r0, #0
 8014ac0:	4770      	bx	lr
 8014ac2:	bf00      	nop

08014ac4 <rcutils_format_string_limit>:
 8014ac4:	b40f      	push	{r0, r1, r2, r3}
 8014ac6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ac8:	b083      	sub	sp, #12
 8014aca:	ac08      	add	r4, sp, #32
 8014acc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014ace:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014ad2:	b34e      	cbz	r6, 8014b28 <rcutils_format_string_limit+0x64>
 8014ad4:	a808      	add	r0, sp, #32
 8014ad6:	f7f8 fdf9 	bl	800d6cc <rcutils_allocator_is_valid>
 8014ada:	b328      	cbz	r0, 8014b28 <rcutils_format_string_limit+0x64>
 8014adc:	2100      	movs	r1, #0
 8014ade:	ab0f      	add	r3, sp, #60	; 0x3c
 8014ae0:	4608      	mov	r0, r1
 8014ae2:	4632      	mov	r2, r6
 8014ae4:	e9cd 3300 	strd	r3, r3, [sp]
 8014ae8:	f000 f904 	bl	8014cf4 <rcutils_vsnprintf>
 8014aec:	1c43      	adds	r3, r0, #1
 8014aee:	4605      	mov	r5, r0
 8014af0:	d01a      	beq.n	8014b28 <rcutils_format_string_limit+0x64>
 8014af2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014af4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014af6:	1c47      	adds	r7, r0, #1
 8014af8:	429f      	cmp	r7, r3
 8014afa:	bf84      	itt	hi
 8014afc:	461f      	movhi	r7, r3
 8014afe:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 8014b02:	4638      	mov	r0, r7
 8014b04:	9b08      	ldr	r3, [sp, #32]
 8014b06:	4798      	blx	r3
 8014b08:	4604      	mov	r4, r0
 8014b0a:	b168      	cbz	r0, 8014b28 <rcutils_format_string_limit+0x64>
 8014b0c:	9b01      	ldr	r3, [sp, #4]
 8014b0e:	4632      	mov	r2, r6
 8014b10:	4639      	mov	r1, r7
 8014b12:	f000 f8ef 	bl	8014cf4 <rcutils_vsnprintf>
 8014b16:	2800      	cmp	r0, #0
 8014b18:	db02      	blt.n	8014b20 <rcutils_format_string_limit+0x5c>
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	5563      	strb	r3, [r4, r5]
 8014b1e:	e004      	b.n	8014b2a <rcutils_format_string_limit+0x66>
 8014b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b22:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014b24:	4620      	mov	r0, r4
 8014b26:	4798      	blx	r3
 8014b28:	2400      	movs	r4, #0
 8014b2a:	4620      	mov	r0, r4
 8014b2c:	b003      	add	sp, #12
 8014b2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014b32:	b004      	add	sp, #16
 8014b34:	4770      	bx	lr
 8014b36:	bf00      	nop

08014b38 <rcutils_get_env>:
 8014b38:	b168      	cbz	r0, 8014b56 <rcutils_get_env+0x1e>
 8014b3a:	b510      	push	{r4, lr}
 8014b3c:	460c      	mov	r4, r1
 8014b3e:	b129      	cbz	r1, 8014b4c <rcutils_get_env+0x14>
 8014b40:	f002 ff8c 	bl	8017a5c <getenv>
 8014b44:	b120      	cbz	r0, 8014b50 <rcutils_get_env+0x18>
 8014b46:	6020      	str	r0, [r4, #0]
 8014b48:	2000      	movs	r0, #0
 8014b4a:	bd10      	pop	{r4, pc}
 8014b4c:	4803      	ldr	r0, [pc, #12]	; (8014b5c <rcutils_get_env+0x24>)
 8014b4e:	bd10      	pop	{r4, pc}
 8014b50:	4b03      	ldr	r3, [pc, #12]	; (8014b60 <rcutils_get_env+0x28>)
 8014b52:	6023      	str	r3, [r4, #0]
 8014b54:	bd10      	pop	{r4, pc}
 8014b56:	4803      	ldr	r0, [pc, #12]	; (8014b64 <rcutils_get_env+0x2c>)
 8014b58:	4770      	bx	lr
 8014b5a:	bf00      	nop
 8014b5c:	08019ae0 	.word	0x08019ae0
 8014b60:	08019c04 	.word	0x08019c04
 8014b64:	08019ac4 	.word	0x08019ac4

08014b68 <rcutils_repl_str>:
 8014b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b6c:	ed2d 8b02 	vpush	{d8}
 8014b70:	b087      	sub	sp, #28
 8014b72:	4680      	mov	r8, r0
 8014b74:	4608      	mov	r0, r1
 8014b76:	f8cd 8000 	str.w	r8, [sp]
 8014b7a:	ee08 2a10 	vmov	s16, r2
 8014b7e:	468a      	mov	sl, r1
 8014b80:	4699      	mov	r9, r3
 8014b82:	f7eb fb37 	bl	80001f4 <strlen>
 8014b86:	2600      	movs	r6, #0
 8014b88:	4647      	mov	r7, r8
 8014b8a:	9001      	str	r0, [sp, #4]
 8014b8c:	46b3      	mov	fp, r6
 8014b8e:	2510      	movs	r5, #16
 8014b90:	46b0      	mov	r8, r6
 8014b92:	e01d      	b.n	8014bd0 <rcutils_repl_str+0x68>
 8014b94:	f10b 0b01 	add.w	fp, fp, #1
 8014b98:	455e      	cmp	r6, fp
 8014b9a:	d211      	bcs.n	8014bc0 <rcutils_repl_str+0x58>
 8014b9c:	442e      	add	r6, r5
 8014b9e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014ba2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8014ba6:	00b1      	lsls	r1, r6, #2
 8014ba8:	4798      	blx	r3
 8014baa:	2800      	cmp	r0, #0
 8014bac:	f000 8084 	beq.w	8014cb8 <rcutils_repl_str+0x150>
 8014bb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014bb4:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8014bb8:	bf28      	it	cs
 8014bba:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8014bbe:	4680      	mov	r8, r0
 8014bc0:	9a00      	ldr	r2, [sp, #0]
 8014bc2:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8014bc6:	1aa2      	subs	r2, r4, r2
 8014bc8:	f843 2c04 	str.w	r2, [r3, #-4]
 8014bcc:	9b01      	ldr	r3, [sp, #4]
 8014bce:	18e7      	adds	r7, r4, r3
 8014bd0:	4651      	mov	r1, sl
 8014bd2:	4638      	mov	r0, r7
 8014bd4:	f003 fc6f 	bl	80184b6 <strstr>
 8014bd8:	4604      	mov	r4, r0
 8014bda:	4640      	mov	r0, r8
 8014bdc:	2c00      	cmp	r4, #0
 8014bde:	d1d9      	bne.n	8014b94 <rcutils_repl_str+0x2c>
 8014be0:	46b8      	mov	r8, r7
 8014be2:	4607      	mov	r7, r0
 8014be4:	4640      	mov	r0, r8
 8014be6:	f7eb fb05 	bl	80001f4 <strlen>
 8014bea:	9b00      	ldr	r3, [sp, #0]
 8014bec:	eba8 0303 	sub.w	r3, r8, r3
 8014bf0:	181d      	adds	r5, r3, r0
 8014bf2:	9504      	str	r5, [sp, #16]
 8014bf4:	f1bb 0f00 	cmp.w	fp, #0
 8014bf8:	d03d      	beq.n	8014c76 <rcutils_repl_str+0x10e>
 8014bfa:	ee18 0a10 	vmov	r0, s16
 8014bfe:	f7eb faf9 	bl	80001f4 <strlen>
 8014c02:	9b01      	ldr	r3, [sp, #4]
 8014c04:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014c08:	1ac3      	subs	r3, r0, r3
 8014c0a:	fb0b 5303 	mla	r3, fp, r3, r5
 8014c0e:	9305      	str	r3, [sp, #20]
 8014c10:	4606      	mov	r6, r0
 8014c12:	1c58      	adds	r0, r3, #1
 8014c14:	f8d9 3000 	ldr.w	r3, [r9]
 8014c18:	4798      	blx	r3
 8014c1a:	9003      	str	r0, [sp, #12]
 8014c1c:	2800      	cmp	r0, #0
 8014c1e:	d04c      	beq.n	8014cba <rcutils_repl_str+0x152>
 8014c20:	683a      	ldr	r2, [r7, #0]
 8014c22:	9900      	ldr	r1, [sp, #0]
 8014c24:	f003 fd3f 	bl	80186a6 <memcpy>
 8014c28:	9b03      	ldr	r3, [sp, #12]
 8014c2a:	683d      	ldr	r5, [r7, #0]
 8014c2c:	ee18 8a10 	vmov	r8, s16
 8014c30:	441d      	add	r5, r3
 8014c32:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8014c36:	9302      	str	r3, [sp, #8]
 8014c38:	46ba      	mov	sl, r7
 8014c3a:	4632      	mov	r2, r6
 8014c3c:	4641      	mov	r1, r8
 8014c3e:	4628      	mov	r0, r5
 8014c40:	f003 fd31 	bl	80186a6 <memcpy>
 8014c44:	9b01      	ldr	r3, [sp, #4]
 8014c46:	f85a 2b04 	ldr.w	r2, [sl], #4
 8014c4a:	441a      	add	r2, r3
 8014c4c:	9b00      	ldr	r3, [sp, #0]
 8014c4e:	1899      	adds	r1, r3, r2
 8014c50:	9b02      	ldr	r3, [sp, #8]
 8014c52:	4435      	add	r5, r6
 8014c54:	429c      	cmp	r4, r3
 8014c56:	4628      	mov	r0, r5
 8014c58:	d025      	beq.n	8014ca6 <rcutils_repl_str+0x13e>
 8014c5a:	f8da 3000 	ldr.w	r3, [sl]
 8014c5e:	3401      	adds	r4, #1
 8014c60:	1a9a      	subs	r2, r3, r2
 8014c62:	4415      	add	r5, r2
 8014c64:	f003 fd1f 	bl	80186a6 <memcpy>
 8014c68:	455c      	cmp	r4, fp
 8014c6a:	d3e6      	bcc.n	8014c3a <rcutils_repl_str+0xd2>
 8014c6c:	9a03      	ldr	r2, [sp, #12]
 8014c6e:	9905      	ldr	r1, [sp, #20]
 8014c70:	2300      	movs	r3, #0
 8014c72:	5453      	strb	r3, [r2, r1]
 8014c74:	e00b      	b.n	8014c8e <rcutils_repl_str+0x126>
 8014c76:	4628      	mov	r0, r5
 8014c78:	f8d9 3000 	ldr.w	r3, [r9]
 8014c7c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014c80:	3001      	adds	r0, #1
 8014c82:	4798      	blx	r3
 8014c84:	9003      	str	r0, [sp, #12]
 8014c86:	b110      	cbz	r0, 8014c8e <rcutils_repl_str+0x126>
 8014c88:	9900      	ldr	r1, [sp, #0]
 8014c8a:	f003 fd04 	bl	8018696 <strcpy>
 8014c8e:	4638      	mov	r0, r7
 8014c90:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014c94:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014c98:	4798      	blx	r3
 8014c9a:	9803      	ldr	r0, [sp, #12]
 8014c9c:	b007      	add	sp, #28
 8014c9e:	ecbd 8b02 	vpop	{d8}
 8014ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ca6:	9b04      	ldr	r3, [sp, #16]
 8014ca8:	3401      	adds	r4, #1
 8014caa:	1a9a      	subs	r2, r3, r2
 8014cac:	4415      	add	r5, r2
 8014cae:	f003 fcfa 	bl	80186a6 <memcpy>
 8014cb2:	455c      	cmp	r4, fp
 8014cb4:	d3c1      	bcc.n	8014c3a <rcutils_repl_str+0xd2>
 8014cb6:	e7d9      	b.n	8014c6c <rcutils_repl_str+0x104>
 8014cb8:	4647      	mov	r7, r8
 8014cba:	2300      	movs	r3, #0
 8014cbc:	9303      	str	r3, [sp, #12]
 8014cbe:	e7e6      	b.n	8014c8e <rcutils_repl_str+0x126>

08014cc0 <rcutils_snprintf>:
 8014cc0:	b40c      	push	{r2, r3}
 8014cc2:	b530      	push	{r4, r5, lr}
 8014cc4:	b083      	sub	sp, #12
 8014cc6:	ab06      	add	r3, sp, #24
 8014cc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ccc:	9301      	str	r3, [sp, #4]
 8014cce:	b152      	cbz	r2, 8014ce6 <rcutils_snprintf+0x26>
 8014cd0:	b138      	cbz	r0, 8014ce2 <rcutils_snprintf+0x22>
 8014cd2:	b141      	cbz	r1, 8014ce6 <rcutils_snprintf+0x26>
 8014cd4:	f003 fb0a 	bl	80182ec <vsniprintf>
 8014cd8:	b003      	add	sp, #12
 8014cda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014cde:	b002      	add	sp, #8
 8014ce0:	4770      	bx	lr
 8014ce2:	2900      	cmp	r1, #0
 8014ce4:	d0f6      	beq.n	8014cd4 <rcutils_snprintf+0x14>
 8014ce6:	f003 fca9 	bl	801863c <__errno>
 8014cea:	2316      	movs	r3, #22
 8014cec:	6003      	str	r3, [r0, #0]
 8014cee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014cf2:	e7f1      	b.n	8014cd8 <rcutils_snprintf+0x18>

08014cf4 <rcutils_vsnprintf>:
 8014cf4:	b570      	push	{r4, r5, r6, lr}
 8014cf6:	b13a      	cbz	r2, 8014d08 <rcutils_vsnprintf+0x14>
 8014cf8:	b120      	cbz	r0, 8014d04 <rcutils_vsnprintf+0x10>
 8014cfa:	b129      	cbz	r1, 8014d08 <rcutils_vsnprintf+0x14>
 8014cfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d00:	f003 baf4 	b.w	80182ec <vsniprintf>
 8014d04:	2900      	cmp	r1, #0
 8014d06:	d0f9      	beq.n	8014cfc <rcutils_vsnprintf+0x8>
 8014d08:	f003 fc98 	bl	801863c <__errno>
 8014d0c:	2316      	movs	r3, #22
 8014d0e:	6003      	str	r3, [r0, #0]
 8014d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014d14:	bd70      	pop	{r4, r5, r6, pc}
 8014d16:	bf00      	nop

08014d18 <rcutils_strdup>:
 8014d18:	b084      	sub	sp, #16
 8014d1a:	b570      	push	{r4, r5, r6, lr}
 8014d1c:	b082      	sub	sp, #8
 8014d1e:	ac07      	add	r4, sp, #28
 8014d20:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8014d24:	4605      	mov	r5, r0
 8014d26:	b1b0      	cbz	r0, 8014d56 <rcutils_strdup+0x3e>
 8014d28:	f7eb fa64 	bl	80001f4 <strlen>
 8014d2c:	1c42      	adds	r2, r0, #1
 8014d2e:	9b07      	ldr	r3, [sp, #28]
 8014d30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014d32:	9201      	str	r2, [sp, #4]
 8014d34:	4606      	mov	r6, r0
 8014d36:	4610      	mov	r0, r2
 8014d38:	4798      	blx	r3
 8014d3a:	4604      	mov	r4, r0
 8014d3c:	b128      	cbz	r0, 8014d4a <rcutils_strdup+0x32>
 8014d3e:	9a01      	ldr	r2, [sp, #4]
 8014d40:	4629      	mov	r1, r5
 8014d42:	f003 fcb0 	bl	80186a6 <memcpy>
 8014d46:	2300      	movs	r3, #0
 8014d48:	55a3      	strb	r3, [r4, r6]
 8014d4a:	4620      	mov	r0, r4
 8014d4c:	b002      	add	sp, #8
 8014d4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d52:	b004      	add	sp, #16
 8014d54:	4770      	bx	lr
 8014d56:	4604      	mov	r4, r0
 8014d58:	e7f7      	b.n	8014d4a <rcutils_strdup+0x32>
 8014d5a:	bf00      	nop

08014d5c <rcutils_strndup>:
 8014d5c:	b082      	sub	sp, #8
 8014d5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d60:	460e      	mov	r6, r1
 8014d62:	a906      	add	r1, sp, #24
 8014d64:	e881 000c 	stmia.w	r1, {r2, r3}
 8014d68:	4605      	mov	r5, r0
 8014d6a:	b180      	cbz	r0, 8014d8e <rcutils_strndup+0x32>
 8014d6c:	1c77      	adds	r7, r6, #1
 8014d6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014d70:	4638      	mov	r0, r7
 8014d72:	4790      	blx	r2
 8014d74:	4604      	mov	r4, r0
 8014d76:	b128      	cbz	r0, 8014d84 <rcutils_strndup+0x28>
 8014d78:	463a      	mov	r2, r7
 8014d7a:	4629      	mov	r1, r5
 8014d7c:	f003 fc93 	bl	80186a6 <memcpy>
 8014d80:	2300      	movs	r3, #0
 8014d82:	55a3      	strb	r3, [r4, r6]
 8014d84:	4620      	mov	r0, r4
 8014d86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014d8a:	b002      	add	sp, #8
 8014d8c:	4770      	bx	lr
 8014d8e:	4604      	mov	r4, r0
 8014d90:	e7f8      	b.n	8014d84 <rcutils_strndup+0x28>
 8014d92:	bf00      	nop

08014d94 <rmw_get_zero_initialized_context>:
 8014d94:	b510      	push	{r4, lr}
 8014d96:	2250      	movs	r2, #80	; 0x50
 8014d98:	4604      	mov	r4, r0
 8014d9a:	2100      	movs	r1, #0
 8014d9c:	f003 fb64 	bl	8018468 <memset>
 8014da0:	4620      	mov	r0, r4
 8014da2:	bd10      	pop	{r4, pc}

08014da4 <rmw_get_zero_initialized_init_options>:
 8014da4:	b510      	push	{r4, lr}
 8014da6:	2238      	movs	r2, #56	; 0x38
 8014da8:	4604      	mov	r4, r0
 8014daa:	2100      	movs	r1, #0
 8014dac:	f003 fb5c 	bl	8018468 <memset>
 8014db0:	f104 0010 	add.w	r0, r4, #16
 8014db4:	f000 f806 	bl	8014dc4 <rmw_get_default_security_options>
 8014db8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014dbc:	60e3      	str	r3, [r4, #12]
 8014dbe:	4620      	mov	r0, r4
 8014dc0:	bd10      	pop	{r4, pc}
 8014dc2:	bf00      	nop

08014dc4 <rmw_get_default_security_options>:
 8014dc4:	2200      	movs	r2, #0
 8014dc6:	7002      	strb	r2, [r0, #0]
 8014dc8:	6042      	str	r2, [r0, #4]
 8014dca:	4770      	bx	lr

08014dcc <rmw_validate_namespace_with_size>:
 8014dcc:	b340      	cbz	r0, 8014e20 <rmw_validate_namespace_with_size+0x54>
 8014dce:	b5d0      	push	{r4, r6, r7, lr}
 8014dd0:	4614      	mov	r4, r2
 8014dd2:	b0c2      	sub	sp, #264	; 0x108
 8014dd4:	b332      	cbz	r2, 8014e24 <rmw_validate_namespace_with_size+0x58>
 8014dd6:	2901      	cmp	r1, #1
 8014dd8:	460f      	mov	r7, r1
 8014dda:	461e      	mov	r6, r3
 8014ddc:	d102      	bne.n	8014de4 <rmw_validate_namespace_with_size+0x18>
 8014dde:	7803      	ldrb	r3, [r0, #0]
 8014de0:	2b2f      	cmp	r3, #47	; 0x2f
 8014de2:	d019      	beq.n	8014e18 <rmw_validate_namespace_with_size+0x4c>
 8014de4:	aa01      	add	r2, sp, #4
 8014de6:	4669      	mov	r1, sp
 8014de8:	f7f8 fe44 	bl	800da74 <rmw_validate_full_topic_name>
 8014dec:	b990      	cbnz	r0, 8014e14 <rmw_validate_namespace_with_size+0x48>
 8014dee:	9b00      	ldr	r3, [sp, #0]
 8014df0:	b14b      	cbz	r3, 8014e06 <rmw_validate_namespace_with_size+0x3a>
 8014df2:	2b07      	cmp	r3, #7
 8014df4:	d007      	beq.n	8014e06 <rmw_validate_namespace_with_size+0x3a>
 8014df6:	1e5a      	subs	r2, r3, #1
 8014df8:	2a05      	cmp	r2, #5
 8014dfa:	d82b      	bhi.n	8014e54 <rmw_validate_namespace_with_size+0x88>
 8014dfc:	e8df f002 	tbb	[pc, r2]
 8014e00:	24211e1b 	.word	0x24211e1b
 8014e04:	1427      	.short	0x1427
 8014e06:	2ff5      	cmp	r7, #245	; 0xf5
 8014e08:	d906      	bls.n	8014e18 <rmw_validate_namespace_with_size+0x4c>
 8014e0a:	2307      	movs	r3, #7
 8014e0c:	6023      	str	r3, [r4, #0]
 8014e0e:	b10e      	cbz	r6, 8014e14 <rmw_validate_namespace_with_size+0x48>
 8014e10:	23f4      	movs	r3, #244	; 0xf4
 8014e12:	6033      	str	r3, [r6, #0]
 8014e14:	b042      	add	sp, #264	; 0x108
 8014e16:	bdd0      	pop	{r4, r6, r7, pc}
 8014e18:	2000      	movs	r0, #0
 8014e1a:	6020      	str	r0, [r4, #0]
 8014e1c:	b042      	add	sp, #264	; 0x108
 8014e1e:	bdd0      	pop	{r4, r6, r7, pc}
 8014e20:	200b      	movs	r0, #11
 8014e22:	4770      	bx	lr
 8014e24:	200b      	movs	r0, #11
 8014e26:	e7f5      	b.n	8014e14 <rmw_validate_namespace_with_size+0x48>
 8014e28:	2306      	movs	r3, #6
 8014e2a:	6023      	str	r3, [r4, #0]
 8014e2c:	2e00      	cmp	r6, #0
 8014e2e:	d0f1      	beq.n	8014e14 <rmw_validate_namespace_with_size+0x48>
 8014e30:	9b01      	ldr	r3, [sp, #4]
 8014e32:	6033      	str	r3, [r6, #0]
 8014e34:	e7ee      	b.n	8014e14 <rmw_validate_namespace_with_size+0x48>
 8014e36:	2301      	movs	r3, #1
 8014e38:	6023      	str	r3, [r4, #0]
 8014e3a:	e7f7      	b.n	8014e2c <rmw_validate_namespace_with_size+0x60>
 8014e3c:	2302      	movs	r3, #2
 8014e3e:	6023      	str	r3, [r4, #0]
 8014e40:	e7f4      	b.n	8014e2c <rmw_validate_namespace_with_size+0x60>
 8014e42:	2303      	movs	r3, #3
 8014e44:	6023      	str	r3, [r4, #0]
 8014e46:	e7f1      	b.n	8014e2c <rmw_validate_namespace_with_size+0x60>
 8014e48:	2304      	movs	r3, #4
 8014e4a:	6023      	str	r3, [r4, #0]
 8014e4c:	e7ee      	b.n	8014e2c <rmw_validate_namespace_with_size+0x60>
 8014e4e:	2305      	movs	r3, #5
 8014e50:	6023      	str	r3, [r4, #0]
 8014e52:	e7eb      	b.n	8014e2c <rmw_validate_namespace_with_size+0x60>
 8014e54:	4a03      	ldr	r2, [pc, #12]	; (8014e64 <rmw_validate_namespace_with_size+0x98>)
 8014e56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014e5a:	a802      	add	r0, sp, #8
 8014e5c:	f7ff ff30 	bl	8014cc0 <rcutils_snprintf>
 8014e60:	2001      	movs	r0, #1
 8014e62:	e7d7      	b.n	8014e14 <rmw_validate_namespace_with_size+0x48>
 8014e64:	08019afc 	.word	0x08019afc

08014e68 <rmw_validate_namespace>:
 8014e68:	b168      	cbz	r0, 8014e86 <rmw_validate_namespace+0x1e>
 8014e6a:	b570      	push	{r4, r5, r6, lr}
 8014e6c:	460d      	mov	r5, r1
 8014e6e:	4616      	mov	r6, r2
 8014e70:	4604      	mov	r4, r0
 8014e72:	f7eb f9bf 	bl	80001f4 <strlen>
 8014e76:	4633      	mov	r3, r6
 8014e78:	4601      	mov	r1, r0
 8014e7a:	462a      	mov	r2, r5
 8014e7c:	4620      	mov	r0, r4
 8014e7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e82:	f7ff bfa3 	b.w	8014dcc <rmw_validate_namespace_with_size>
 8014e86:	200b      	movs	r0, #11
 8014e88:	4770      	bx	lr
 8014e8a:	bf00      	nop

08014e8c <rmw_namespace_validation_result_string>:
 8014e8c:	2807      	cmp	r0, #7
 8014e8e:	bf9a      	itte	ls
 8014e90:	4b02      	ldrls	r3, [pc, #8]	; (8014e9c <rmw_namespace_validation_result_string+0x10>)
 8014e92:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8014e96:	4802      	ldrhi	r0, [pc, #8]	; (8014ea0 <rmw_namespace_validation_result_string+0x14>)
 8014e98:	4770      	bx	lr
 8014e9a:	bf00      	nop
 8014e9c:	08019cf4 	.word	0x08019cf4
 8014ea0:	08019b4c 	.word	0x08019b4c

08014ea4 <rmw_validate_node_name>:
 8014ea4:	2800      	cmp	r0, #0
 8014ea6:	d03b      	beq.n	8014f20 <rmw_validate_node_name+0x7c>
 8014ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014eac:	460f      	mov	r7, r1
 8014eae:	2900      	cmp	r1, #0
 8014eb0:	d038      	beq.n	8014f24 <rmw_validate_node_name+0x80>
 8014eb2:	4615      	mov	r5, r2
 8014eb4:	4604      	mov	r4, r0
 8014eb6:	f7eb f99d 	bl	80001f4 <strlen>
 8014eba:	b1e0      	cbz	r0, 8014ef6 <rmw_validate_node_name+0x52>
 8014ebc:	1e63      	subs	r3, r4, #1
 8014ebe:	eb03 0e00 	add.w	lr, r3, r0
 8014ec2:	f1c4 0c01 	rsb	ip, r4, #1
 8014ec6:	eb0c 0803 	add.w	r8, ip, r3
 8014eca:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8014ece:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 8014ed2:	f026 0220 	bic.w	r2, r6, #32
 8014ed6:	2909      	cmp	r1, #9
 8014ed8:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 8014edc:	d913      	bls.n	8014f06 <rmw_validate_node_name+0x62>
 8014ede:	2a19      	cmp	r2, #25
 8014ee0:	d911      	bls.n	8014f06 <rmw_validate_node_name+0x62>
 8014ee2:	2e5f      	cmp	r6, #95	; 0x5f
 8014ee4:	d00f      	beq.n	8014f06 <rmw_validate_node_name+0x62>
 8014ee6:	2302      	movs	r3, #2
 8014ee8:	603b      	str	r3, [r7, #0]
 8014eea:	b10d      	cbz	r5, 8014ef0 <rmw_validate_node_name+0x4c>
 8014eec:	f8c5 8000 	str.w	r8, [r5]
 8014ef0:	2000      	movs	r0, #0
 8014ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ef6:	2301      	movs	r3, #1
 8014ef8:	603b      	str	r3, [r7, #0]
 8014efa:	2d00      	cmp	r5, #0
 8014efc:	d0f8      	beq.n	8014ef0 <rmw_validate_node_name+0x4c>
 8014efe:	2000      	movs	r0, #0
 8014f00:	6028      	str	r0, [r5, #0]
 8014f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f06:	4573      	cmp	r3, lr
 8014f08:	d1dd      	bne.n	8014ec6 <rmw_validate_node_name+0x22>
 8014f0a:	7822      	ldrb	r2, [r4, #0]
 8014f0c:	4b0d      	ldr	r3, [pc, #52]	; (8014f44 <rmw_validate_node_name+0xa0>)
 8014f0e:	5cd3      	ldrb	r3, [r2, r3]
 8014f10:	f013 0304 	ands.w	r3, r3, #4
 8014f14:	d110      	bne.n	8014f38 <rmw_validate_node_name+0x94>
 8014f16:	28ff      	cmp	r0, #255	; 0xff
 8014f18:	d806      	bhi.n	8014f28 <rmw_validate_node_name+0x84>
 8014f1a:	603b      	str	r3, [r7, #0]
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	e7e8      	b.n	8014ef2 <rmw_validate_node_name+0x4e>
 8014f20:	200b      	movs	r0, #11
 8014f22:	4770      	bx	lr
 8014f24:	200b      	movs	r0, #11
 8014f26:	e7e4      	b.n	8014ef2 <rmw_validate_node_name+0x4e>
 8014f28:	2204      	movs	r2, #4
 8014f2a:	603a      	str	r2, [r7, #0]
 8014f2c:	2d00      	cmp	r5, #0
 8014f2e:	d0df      	beq.n	8014ef0 <rmw_validate_node_name+0x4c>
 8014f30:	22fe      	movs	r2, #254	; 0xfe
 8014f32:	4618      	mov	r0, r3
 8014f34:	602a      	str	r2, [r5, #0]
 8014f36:	e7dc      	b.n	8014ef2 <rmw_validate_node_name+0x4e>
 8014f38:	2303      	movs	r3, #3
 8014f3a:	603b      	str	r3, [r7, #0]
 8014f3c:	2d00      	cmp	r5, #0
 8014f3e:	d1de      	bne.n	8014efe <rmw_validate_node_name+0x5a>
 8014f40:	e7d6      	b.n	8014ef0 <rmw_validate_node_name+0x4c>
 8014f42:	bf00      	nop
 8014f44:	0801a0b8 	.word	0x0801a0b8

08014f48 <rmw_node_name_validation_result_string>:
 8014f48:	2804      	cmp	r0, #4
 8014f4a:	bf9a      	itte	ls
 8014f4c:	4b02      	ldrls	r3, [pc, #8]	; (8014f58 <rmw_node_name_validation_result_string+0x10>)
 8014f4e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8014f52:	4802      	ldrhi	r0, [pc, #8]	; (8014f5c <rmw_node_name_validation_result_string+0x14>)
 8014f54:	4770      	bx	lr
 8014f56:	bf00      	nop
 8014f58:	08019e00 	.word	0x08019e00
 8014f5c:	08019d14 	.word	0x08019d14

08014f60 <get_memory>:
 8014f60:	4603      	mov	r3, r0
 8014f62:	6840      	ldr	r0, [r0, #4]
 8014f64:	b158      	cbz	r0, 8014f7e <get_memory+0x1e>
 8014f66:	6882      	ldr	r2, [r0, #8]
 8014f68:	605a      	str	r2, [r3, #4]
 8014f6a:	b10a      	cbz	r2, 8014f70 <get_memory+0x10>
 8014f6c:	2100      	movs	r1, #0
 8014f6e:	6051      	str	r1, [r2, #4]
 8014f70:	681a      	ldr	r2, [r3, #0]
 8014f72:	6082      	str	r2, [r0, #8]
 8014f74:	b102      	cbz	r2, 8014f78 <get_memory+0x18>
 8014f76:	6050      	str	r0, [r2, #4]
 8014f78:	2200      	movs	r2, #0
 8014f7a:	6042      	str	r2, [r0, #4]
 8014f7c:	6018      	str	r0, [r3, #0]
 8014f7e:	4770      	bx	lr

08014f80 <put_memory>:
 8014f80:	684b      	ldr	r3, [r1, #4]
 8014f82:	b10b      	cbz	r3, 8014f88 <put_memory+0x8>
 8014f84:	688a      	ldr	r2, [r1, #8]
 8014f86:	609a      	str	r2, [r3, #8]
 8014f88:	688a      	ldr	r2, [r1, #8]
 8014f8a:	b102      	cbz	r2, 8014f8e <put_memory+0xe>
 8014f8c:	6053      	str	r3, [r2, #4]
 8014f8e:	6803      	ldr	r3, [r0, #0]
 8014f90:	428b      	cmp	r3, r1
 8014f92:	6843      	ldr	r3, [r0, #4]
 8014f94:	bf08      	it	eq
 8014f96:	6002      	streq	r2, [r0, #0]
 8014f98:	608b      	str	r3, [r1, #8]
 8014f9a:	b103      	cbz	r3, 8014f9e <put_memory+0x1e>
 8014f9c:	6059      	str	r1, [r3, #4]
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	604b      	str	r3, [r1, #4]
 8014fa2:	6041      	str	r1, [r0, #4]
 8014fa4:	4770      	bx	lr
 8014fa6:	bf00      	nop

08014fa8 <rmw_destroy_client>:
 8014fa8:	b570      	push	{r4, r5, r6, lr}
 8014faa:	b128      	cbz	r0, 8014fb8 <rmw_destroy_client+0x10>
 8014fac:	4604      	mov	r4, r0
 8014fae:	6800      	ldr	r0, [r0, #0]
 8014fb0:	460d      	mov	r5, r1
 8014fb2:	f7f9 fc3d 	bl	800e830 <is_uxrce_rmw_identifier_valid>
 8014fb6:	b910      	cbnz	r0, 8014fbe <rmw_destroy_client+0x16>
 8014fb8:	2401      	movs	r4, #1
 8014fba:	4620      	mov	r0, r4
 8014fbc:	bd70      	pop	{r4, r5, r6, pc}
 8014fbe:	6863      	ldr	r3, [r4, #4]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d0f9      	beq.n	8014fb8 <rmw_destroy_client+0x10>
 8014fc4:	2d00      	cmp	r5, #0
 8014fc6:	d0f7      	beq.n	8014fb8 <rmw_destroy_client+0x10>
 8014fc8:	6828      	ldr	r0, [r5, #0]
 8014fca:	f7f9 fc31 	bl	800e830 <is_uxrce_rmw_identifier_valid>
 8014fce:	2800      	cmp	r0, #0
 8014fd0:	d0f2      	beq.n	8014fb8 <rmw_destroy_client+0x10>
 8014fd2:	686e      	ldr	r6, [r5, #4]
 8014fd4:	2e00      	cmp	r6, #0
 8014fd6:	d0ef      	beq.n	8014fb8 <rmw_destroy_client+0x10>
 8014fd8:	6864      	ldr	r4, [r4, #4]
 8014fda:	6932      	ldr	r2, [r6, #16]
 8014fdc:	6920      	ldr	r0, [r4, #16]
 8014fde:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014fe2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014fe6:	6819      	ldr	r1, [r3, #0]
 8014fe8:	f7fa ff20 	bl	800fe2c <uxr_buffer_cancel_data>
 8014fec:	4602      	mov	r2, r0
 8014fee:	6920      	ldr	r0, [r4, #16]
 8014ff0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8014ff4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8014ff8:	f7f9 fb9a 	bl	800e730 <run_xrce_session>
 8014ffc:	6920      	ldr	r0, [r4, #16]
 8014ffe:	6932      	ldr	r2, [r6, #16]
 8015000:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015004:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015008:	6819      	ldr	r1, [r3, #0]
 801500a:	f7fa fca5 	bl	800f958 <uxr_buffer_delete_entity>
 801500e:	4602      	mov	r2, r0
 8015010:	6920      	ldr	r0, [r4, #16]
 8015012:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015016:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801501a:	f7f9 fb89 	bl	800e730 <run_xrce_session>
 801501e:	2800      	cmp	r0, #0
 8015020:	4628      	mov	r0, r5
 8015022:	bf14      	ite	ne
 8015024:	2400      	movne	r4, #0
 8015026:	2402      	moveq	r4, #2
 8015028:	f7f9 fa72 	bl	800e510 <rmw_uxrce_fini_client_memory>
 801502c:	e7c5      	b.n	8014fba <rmw_destroy_client+0x12>
 801502e:	bf00      	nop

08015030 <rmw_get_implementation_identifier>:
 8015030:	4b01      	ldr	r3, [pc, #4]	; (8015038 <rmw_get_implementation_identifier+0x8>)
 8015032:	6818      	ldr	r0, [r3, #0]
 8015034:	4770      	bx	lr
 8015036:	bf00      	nop
 8015038:	08019e2c 	.word	0x08019e2c

0801503c <rmw_init_options_init>:
 801503c:	b084      	sub	sp, #16
 801503e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015042:	ad09      	add	r5, sp, #36	; 0x24
 8015044:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8015048:	b130      	cbz	r0, 8015058 <rmw_init_options_init+0x1c>
 801504a:	4604      	mov	r4, r0
 801504c:	4628      	mov	r0, r5
 801504e:	f7f8 fb3d 	bl	800d6cc <rcutils_allocator_is_valid>
 8015052:	b108      	cbz	r0, 8015058 <rmw_init_options_init+0x1c>
 8015054:	68a3      	ldr	r3, [r4, #8]
 8015056:	b123      	cbz	r3, 8015062 <rmw_init_options_init+0x26>
 8015058:	200b      	movs	r0, #11
 801505a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801505e:	b004      	add	sp, #16
 8015060:	4770      	bx	lr
 8015062:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015064:	4f1c      	ldr	r7, [pc, #112]	; (80150d8 <rmw_init_options_init+0x9c>)
 8015066:	682e      	ldr	r6, [r5, #0]
 8015068:	683d      	ldr	r5, [r7, #0]
 801506a:	60a5      	str	r5, [r4, #8]
 801506c:	f04f 0800 	mov.w	r8, #0
 8015070:	f04f 0900 	mov.w	r9, #0
 8015074:	f104 0520 	add.w	r5, r4, #32
 8015078:	e9c4 8900 	strd	r8, r9, [r4]
 801507c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801507e:	4b17      	ldr	r3, [pc, #92]	; (80150dc <rmw_init_options_init+0xa0>)
 8015080:	4817      	ldr	r0, [pc, #92]	; (80150e0 <rmw_init_options_init+0xa4>)
 8015082:	602e      	str	r6, [r5, #0]
 8015084:	4917      	ldr	r1, [pc, #92]	; (80150e4 <rmw_init_options_init+0xa8>)
 8015086:	61e3      	str	r3, [r4, #28]
 8015088:	2203      	movs	r2, #3
 801508a:	f7f9 f991 	bl	800e3b0 <rmw_uxrce_init_init_options_impl_memory>
 801508e:	4814      	ldr	r0, [pc, #80]	; (80150e0 <rmw_init_options_init+0xa4>)
 8015090:	f7ff ff66 	bl	8014f60 <get_memory>
 8015094:	b1e8      	cbz	r0, 80150d2 <rmw_init_options_init+0x96>
 8015096:	4a14      	ldr	r2, [pc, #80]	; (80150e8 <rmw_init_options_init+0xac>)
 8015098:	68c3      	ldr	r3, [r0, #12]
 801509a:	6851      	ldr	r1, [r2, #4]
 801509c:	7810      	ldrb	r0, [r2, #0]
 801509e:	6363      	str	r3, [r4, #52]	; 0x34
 80150a0:	7418      	strb	r0, [r3, #16]
 80150a2:	6159      	str	r1, [r3, #20]
 80150a4:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 80150a8:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 80150ac:	e9c3 5006 	strd	r5, r0, [r3, #24]
 80150b0:	e9c3 1208 	strd	r1, r2, [r3, #32]
 80150b4:	f7fc f9e8 	bl	8011488 <uxr_nanos>
 80150b8:	f002 fdd4 	bl	8017c64 <srand>
 80150bc:	f002 fe00 	bl	8017cc0 <rand>
 80150c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80150c2:	6298      	str	r0, [r3, #40]	; 0x28
 80150c4:	2800      	cmp	r0, #0
 80150c6:	d0f9      	beq.n	80150bc <rmw_init_options_init+0x80>
 80150c8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150cc:	2000      	movs	r0, #0
 80150ce:	b004      	add	sp, #16
 80150d0:	4770      	bx	lr
 80150d2:	2001      	movs	r0, #1
 80150d4:	e7c1      	b.n	801505a <rmw_init_options_init+0x1e>
 80150d6:	bf00      	nop
 80150d8:	08019e2c 	.word	0x08019e2c
 80150dc:	080199a0 	.word	0x080199a0
 80150e0:	2000d1bc 	.word	0x2000d1bc
 80150e4:	2000ce10 	.word	0x2000ce10
 80150e8:	20009ea0 	.word	0x20009ea0

080150ec <rmw_init_options_copy>:
 80150ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150ee:	b158      	cbz	r0, 8015108 <rmw_init_options_copy+0x1c>
 80150f0:	460e      	mov	r6, r1
 80150f2:	b149      	cbz	r1, 8015108 <rmw_init_options_copy+0x1c>
 80150f4:	4604      	mov	r4, r0
 80150f6:	6880      	ldr	r0, [r0, #8]
 80150f8:	b120      	cbz	r0, 8015104 <rmw_init_options_copy+0x18>
 80150fa:	4b1b      	ldr	r3, [pc, #108]	; (8015168 <rmw_init_options_copy+0x7c>)
 80150fc:	6819      	ldr	r1, [r3, #0]
 80150fe:	f7eb f86f 	bl	80001e0 <strcmp>
 8015102:	bb60      	cbnz	r0, 801515e <rmw_init_options_copy+0x72>
 8015104:	68b3      	ldr	r3, [r6, #8]
 8015106:	b113      	cbz	r3, 801510e <rmw_init_options_copy+0x22>
 8015108:	230b      	movs	r3, #11
 801510a:	4618      	mov	r0, r3
 801510c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801510e:	4623      	mov	r3, r4
 8015110:	4632      	mov	r2, r6
 8015112:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8015116:	681d      	ldr	r5, [r3, #0]
 8015118:	6858      	ldr	r0, [r3, #4]
 801511a:	6899      	ldr	r1, [r3, #8]
 801511c:	68df      	ldr	r7, [r3, #12]
 801511e:	60d7      	str	r7, [r2, #12]
 8015120:	3310      	adds	r3, #16
 8015122:	4563      	cmp	r3, ip
 8015124:	6015      	str	r5, [r2, #0]
 8015126:	6050      	str	r0, [r2, #4]
 8015128:	6091      	str	r1, [r2, #8]
 801512a:	f102 0210 	add.w	r2, r2, #16
 801512e:	d1f2      	bne.n	8015116 <rmw_init_options_copy+0x2a>
 8015130:	6819      	ldr	r1, [r3, #0]
 8015132:	685b      	ldr	r3, [r3, #4]
 8015134:	480d      	ldr	r0, [pc, #52]	; (801516c <rmw_init_options_copy+0x80>)
 8015136:	6053      	str	r3, [r2, #4]
 8015138:	6011      	str	r1, [r2, #0]
 801513a:	f7ff ff11 	bl	8014f60 <get_memory>
 801513e:	b188      	cbz	r0, 8015164 <rmw_init_options_copy+0x78>
 8015140:	68c5      	ldr	r5, [r0, #12]
 8015142:	6375      	str	r5, [r6, #52]	; 0x34
 8015144:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8015146:	3610      	adds	r6, #16
 8015148:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801514a:	f105 0410 	add.w	r4, r5, #16
 801514e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015150:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8015154:	2300      	movs	r3, #0
 8015156:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801515a:	4618      	mov	r0, r3
 801515c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801515e:	230c      	movs	r3, #12
 8015160:	4618      	mov	r0, r3
 8015162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015164:	2301      	movs	r3, #1
 8015166:	e7d0      	b.n	801510a <rmw_init_options_copy+0x1e>
 8015168:	08019e2c 	.word	0x08019e2c
 801516c:	2000d1bc 	.word	0x2000d1bc

08015170 <rmw_init_options_fini>:
 8015170:	2800      	cmp	r0, #0
 8015172:	d036      	beq.n	80151e2 <rmw_init_options_fini+0x72>
 8015174:	b530      	push	{r4, r5, lr}
 8015176:	4604      	mov	r4, r0
 8015178:	b08f      	sub	sp, #60	; 0x3c
 801517a:	3020      	adds	r0, #32
 801517c:	f7f8 faa6 	bl	800d6cc <rcutils_allocator_is_valid>
 8015180:	b328      	cbz	r0, 80151ce <rmw_init_options_fini+0x5e>
 8015182:	68a0      	ldr	r0, [r4, #8]
 8015184:	b120      	cbz	r0, 8015190 <rmw_init_options_fini+0x20>
 8015186:	4b18      	ldr	r3, [pc, #96]	; (80151e8 <rmw_init_options_fini+0x78>)
 8015188:	6819      	ldr	r1, [r3, #0]
 801518a:	f7eb f829 	bl	80001e0 <strcmp>
 801518e:	bb30      	cbnz	r0, 80151de <rmw_init_options_fini+0x6e>
 8015190:	4b16      	ldr	r3, [pc, #88]	; (80151ec <rmw_init_options_fini+0x7c>)
 8015192:	6819      	ldr	r1, [r3, #0]
 8015194:	b1f9      	cbz	r1, 80151d6 <rmw_init_options_fini+0x66>
 8015196:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8015198:	e001      	b.n	801519e <rmw_init_options_fini+0x2e>
 801519a:	6889      	ldr	r1, [r1, #8]
 801519c:	b1d9      	cbz	r1, 80151d6 <rmw_init_options_fini+0x66>
 801519e:	68cb      	ldr	r3, [r1, #12]
 80151a0:	429a      	cmp	r2, r3
 80151a2:	d1fa      	bne.n	801519a <rmw_init_options_fini+0x2a>
 80151a4:	4811      	ldr	r0, [pc, #68]	; (80151ec <rmw_init_options_fini+0x7c>)
 80151a6:	f7ff feeb 	bl	8014f80 <put_memory>
 80151aa:	466d      	mov	r5, sp
 80151ac:	4668      	mov	r0, sp
 80151ae:	f7ff fdf9 	bl	8014da4 <rmw_get_zero_initialized_init_options>
 80151b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80151b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80151b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80151b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80151ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80151bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80151be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80151c2:	e884 0003 	stmia.w	r4, {r0, r1}
 80151c6:	2300      	movs	r3, #0
 80151c8:	4618      	mov	r0, r3
 80151ca:	b00f      	add	sp, #60	; 0x3c
 80151cc:	bd30      	pop	{r4, r5, pc}
 80151ce:	230b      	movs	r3, #11
 80151d0:	4618      	mov	r0, r3
 80151d2:	b00f      	add	sp, #60	; 0x3c
 80151d4:	bd30      	pop	{r4, r5, pc}
 80151d6:	2301      	movs	r3, #1
 80151d8:	4618      	mov	r0, r3
 80151da:	b00f      	add	sp, #60	; 0x3c
 80151dc:	bd30      	pop	{r4, r5, pc}
 80151de:	230c      	movs	r3, #12
 80151e0:	e7f2      	b.n	80151c8 <rmw_init_options_fini+0x58>
 80151e2:	230b      	movs	r3, #11
 80151e4:	4618      	mov	r0, r3
 80151e6:	4770      	bx	lr
 80151e8:	08019e2c 	.word	0x08019e2c
 80151ec:	2000d1bc 	.word	0x2000d1bc

080151f0 <rmw_init>:
 80151f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151f4:	b082      	sub	sp, #8
 80151f6:	2800      	cmp	r0, #0
 80151f8:	f000 80d6 	beq.w	80153a8 <rmw_init+0x1b8>
 80151fc:	460e      	mov	r6, r1
 80151fe:	2900      	cmp	r1, #0
 8015200:	f000 80d2 	beq.w	80153a8 <rmw_init+0x1b8>
 8015204:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015206:	4605      	mov	r5, r0
 8015208:	2b00      	cmp	r3, #0
 801520a:	f000 80cd 	beq.w	80153a8 <rmw_init+0x1b8>
 801520e:	4b79      	ldr	r3, [pc, #484]	; (80153f4 <rmw_init+0x204>)
 8015210:	6880      	ldr	r0, [r0, #8]
 8015212:	f8d3 9000 	ldr.w	r9, [r3]
 8015216:	b128      	cbz	r0, 8015224 <rmw_init+0x34>
 8015218:	4649      	mov	r1, r9
 801521a:	f7ea ffe1 	bl	80001e0 <strcmp>
 801521e:	2800      	cmp	r0, #0
 8015220:	f040 80cc 	bne.w	80153bc <rmw_init+0x1cc>
 8015224:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015228:	68eb      	ldr	r3, [r5, #12]
 801522a:	61f3      	str	r3, [r6, #28]
 801522c:	e9c6 0100 	strd	r0, r1, [r6]
 8015230:	2201      	movs	r2, #1
 8015232:	4971      	ldr	r1, [pc, #452]	; (80153f8 <rmw_init+0x208>)
 8015234:	4871      	ldr	r0, [pc, #452]	; (80153fc <rmw_init+0x20c>)
 8015236:	f8c6 9008 	str.w	r9, [r6, #8]
 801523a:	f7f9 f861 	bl	800e300 <rmw_uxrce_init_session_memory>
 801523e:	4870      	ldr	r0, [pc, #448]	; (8015400 <rmw_init+0x210>)
 8015240:	4970      	ldr	r1, [pc, #448]	; (8015404 <rmw_init+0x214>)
 8015242:	2204      	movs	r2, #4
 8015244:	f7f9 f896 	bl	800e374 <rmw_uxrce_init_static_input_buffer_memory>
 8015248:	486c      	ldr	r0, [pc, #432]	; (80153fc <rmw_init+0x20c>)
 801524a:	f7ff fe89 	bl	8014f60 <get_memory>
 801524e:	2800      	cmp	r0, #0
 8015250:	f000 80af 	beq.w	80153b2 <rmw_init+0x1c2>
 8015254:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8015256:	68c4      	ldr	r4, [r0, #12]
 8015258:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801525a:	7c39      	ldrb	r1, [r7, #16]
 801525c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8015260:	9001      	str	r0, [sp, #4]
 8015262:	6a38      	ldr	r0, [r7, #32]
 8015264:	9000      	str	r0, [sp, #0]
 8015266:	f104 0a10 	add.w	sl, r4, #16
 801526a:	4650      	mov	r0, sl
 801526c:	f000 ffe8 	bl	8016240 <uxr_set_custom_transport_callbacks>
 8015270:	f241 5294 	movw	r2, #5524	; 0x1594
 8015274:	f241 5398 	movw	r3, #5528	; 0x1598
 8015278:	f04f 0800 	mov.w	r8, #0
 801527c:	f241 509c 	movw	r0, #5532	; 0x159c
 8015280:	f504 51ad 	add.w	r1, r4, #5536	; 0x15a0
 8015284:	f844 8002 	str.w	r8, [r4, r2]
 8015288:	f844 8003 	str.w	r8, [r4, r3]
 801528c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015290:	f504 735e 	add.w	r3, r4, #888	; 0x378
 8015294:	f844 8000 	str.w	r8, [r4, r0]
 8015298:	e9c4 33e1 	strd	r3, r3, [r4, #900]	; 0x384
 801529c:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 80152a0:	4859      	ldr	r0, [pc, #356]	; (8015408 <rmw_init+0x218>)
 80152a2:	f8c1 8000 	str.w	r8, [r1]
 80152a6:	2201      	movs	r2, #1
 80152a8:	e9c4 98da 	strd	r9, r8, [r4, #872]	; 0x368
 80152ac:	4957      	ldr	r1, [pc, #348]	; (801540c <rmw_init+0x21c>)
 80152ae:	64b4      	str	r4, [r6, #72]	; 0x48
 80152b0:	f7f9 f80c 	bl	800e2cc <rmw_uxrce_init_node_memory>
 80152b4:	4956      	ldr	r1, [pc, #344]	; (8015410 <rmw_init+0x220>)
 80152b6:	4857      	ldr	r0, [pc, #348]	; (8015414 <rmw_init+0x224>)
 80152b8:	2205      	movs	r2, #5
 80152ba:	f7f8 ffed 	bl	800e298 <rmw_uxrce_init_subscription_memory>
 80152be:	4956      	ldr	r1, [pc, #344]	; (8015418 <rmw_init+0x228>)
 80152c0:	4856      	ldr	r0, [pc, #344]	; (801541c <rmw_init+0x22c>)
 80152c2:	220a      	movs	r2, #10
 80152c4:	f7f8 ffce 	bl	800e264 <rmw_uxrce_init_publisher_memory>
 80152c8:	4955      	ldr	r1, [pc, #340]	; (8015420 <rmw_init+0x230>)
 80152ca:	4856      	ldr	r0, [pc, #344]	; (8015424 <rmw_init+0x234>)
 80152cc:	2201      	movs	r2, #1
 80152ce:	f7f8 ff95 	bl	800e1fc <rmw_uxrce_init_service_memory>
 80152d2:	4955      	ldr	r1, [pc, #340]	; (8015428 <rmw_init+0x238>)
 80152d4:	4855      	ldr	r0, [pc, #340]	; (801542c <rmw_init+0x23c>)
 80152d6:	2201      	movs	r2, #1
 80152d8:	f7f8 ffaa 	bl	800e230 <rmw_uxrce_init_client_memory>
 80152dc:	4954      	ldr	r1, [pc, #336]	; (8015430 <rmw_init+0x240>)
 80152de:	4855      	ldr	r0, [pc, #340]	; (8015434 <rmw_init+0x244>)
 80152e0:	220f      	movs	r2, #15
 80152e2:	f7f9 f82b 	bl	800e33c <rmw_uxrce_init_topic_memory>
 80152e6:	4954      	ldr	r1, [pc, #336]	; (8015438 <rmw_init+0x248>)
 80152e8:	4854      	ldr	r0, [pc, #336]	; (801543c <rmw_init+0x24c>)
 80152ea:	2203      	movs	r2, #3
 80152ec:	f7f9 f860 	bl	800e3b0 <rmw_uxrce_init_init_options_impl_memory>
 80152f0:	4953      	ldr	r1, [pc, #332]	; (8015440 <rmw_init+0x250>)
 80152f2:	4854      	ldr	r0, [pc, #336]	; (8015444 <rmw_init+0x254>)
 80152f4:	2204      	movs	r2, #4
 80152f6:	f7f9 f875 	bl	800e3e4 <rmw_uxrce_init_wait_set_memory>
 80152fa:	4953      	ldr	r1, [pc, #332]	; (8015448 <rmw_init+0x258>)
 80152fc:	4853      	ldr	r0, [pc, #332]	; (801544c <rmw_init+0x25c>)
 80152fe:	2204      	movs	r2, #4
 8015300:	f7f9 f88c 	bl	800e41c <rmw_uxrce_init_guard_condition_memory>
 8015304:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8015306:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 8015308:	4642      	mov	r2, r8
 801530a:	f000 fbbd 	bl	8015a88 <rmw_uxrce_transport_init>
 801530e:	4607      	mov	r7, r0
 8015310:	2800      	cmp	r0, #0
 8015312:	d158      	bne.n	80153c6 <rmw_init+0x1d6>
 8015314:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8015316:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 801531a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801531c:	4628      	mov	r0, r5
 801531e:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8015322:	f7fa fefd 	bl	8010120 <uxr_init_session>
 8015326:	494a      	ldr	r1, [pc, #296]	; (8015450 <rmw_init+0x260>)
 8015328:	4622      	mov	r2, r4
 801532a:	4628      	mov	r0, r5
 801532c:	f7fa ff1a 	bl	8010164 <uxr_set_topic_callback>
 8015330:	4948      	ldr	r1, [pc, #288]	; (8015454 <rmw_init+0x264>)
 8015332:	463a      	mov	r2, r7
 8015334:	4628      	mov	r0, r5
 8015336:	f7fa ff11 	bl	801015c <uxr_set_status_callback>
 801533a:	4947      	ldr	r1, [pc, #284]	; (8015458 <rmw_init+0x268>)
 801533c:	463a      	mov	r2, r7
 801533e:	4628      	mov	r0, r5
 8015340:	f7fa ff14 	bl	801016c <uxr_set_request_callback>
 8015344:	4945      	ldr	r1, [pc, #276]	; (801545c <rmw_init+0x26c>)
 8015346:	463a      	mov	r2, r7
 8015348:	4628      	mov	r0, r5
 801534a:	f7fa ff13 	bl	8010174 <uxr_set_reply_callback>
 801534e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015352:	2304      	movs	r3, #4
 8015354:	0092      	lsls	r2, r2, #2
 8015356:	f504 7165 	add.w	r1, r4, #916	; 0x394
 801535a:	4628      	mov	r0, r5
 801535c:	f7fa ff4a 	bl	80101f4 <uxr_create_input_reliable_stream>
 8015360:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015364:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8015368:	0092      	lsls	r2, r2, #2
 801536a:	2304      	movs	r3, #4
 801536c:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8015370:	4628      	mov	r0, r5
 8015372:	f7fa ff15 	bl	80101a0 <uxr_create_output_reliable_stream>
 8015376:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 801537a:	4628      	mov	r0, r5
 801537c:	f7fa ff34 	bl	80101e8 <uxr_create_input_best_effort_stream>
 8015380:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 8015384:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8015388:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 801538c:	4628      	mov	r0, r5
 801538e:	3114      	adds	r1, #20
 8015390:	f7fa fef4 	bl	801017c <uxr_create_output_best_effort_stream>
 8015394:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8015398:	4628      	mov	r0, r5
 801539a:	f7fb fb85 	bl	8010aa8 <uxr_create_session>
 801539e:	b1f8      	cbz	r0, 80153e0 <rmw_init+0x1f0>
 80153a0:	4638      	mov	r0, r7
 80153a2:	b002      	add	sp, #8
 80153a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153a8:	270b      	movs	r7, #11
 80153aa:	4638      	mov	r0, r7
 80153ac:	b002      	add	sp, #8
 80153ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153b2:	2701      	movs	r7, #1
 80153b4:	4638      	mov	r0, r7
 80153b6:	b002      	add	sp, #8
 80153b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153bc:	270c      	movs	r7, #12
 80153be:	4638      	mov	r0, r7
 80153c0:	b002      	add	sp, #8
 80153c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153c6:	4650      	mov	r0, sl
 80153c8:	f000 ff7a 	bl	80162c0 <uxr_close_custom_transport>
 80153cc:	480b      	ldr	r0, [pc, #44]	; (80153fc <rmw_init+0x20c>)
 80153ce:	4621      	mov	r1, r4
 80153d0:	f7ff fdd6 	bl	8014f80 <put_memory>
 80153d4:	4638      	mov	r0, r7
 80153d6:	f8c6 8048 	str.w	r8, [r6, #72]	; 0x48
 80153da:	b002      	add	sp, #8
 80153dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153e0:	4650      	mov	r0, sl
 80153e2:	f000 ff6d 	bl	80162c0 <uxr_close_custom_transport>
 80153e6:	4805      	ldr	r0, [pc, #20]	; (80153fc <rmw_init+0x20c>)
 80153e8:	4621      	mov	r1, r4
 80153ea:	f7ff fdc9 	bl	8014f80 <put_memory>
 80153ee:	64b7      	str	r7, [r6, #72]	; 0x48
 80153f0:	2701      	movs	r7, #1
 80153f2:	e7d5      	b.n	80153a0 <rmw_init+0x1b0>
 80153f4:	08019e2c 	.word	0x08019e2c
 80153f8:	2000d298 	.word	0x2000d298
 80153fc:	2000d068 	.word	0x2000d068
 8015400:	20009ec0 	.word	0x20009ec0
 8015404:	2000aca0 	.word	0x2000aca0
 8015408:	2000ce94 	.word	0x2000ce94
 801540c:	2000d078 	.word	0x2000d078
 8015410:	2000a7c8 	.word	0x2000a7c8
 8015414:	2000d12c 	.word	0x2000d12c
 8015418:	20009ee0 	.word	0x20009ee0
 801541c:	20009ed0 	.word	0x20009ed0
 8015420:	2000d1d0 	.word	0x2000d1d0
 8015424:	2000d11c 	.word	0x2000d11c
 8015428:	2000abd8 	.word	0x2000abd8
 801542c:	2000a750 	.word	0x2000a750
 8015430:	2000cea4 	.word	0x2000cea4
 8015434:	2000d058 	.word	0x2000d058
 8015438:	2000ce10 	.word	0x2000ce10
 801543c:	2000d1bc 	.word	0x2000d1bc
 8015440:	2000cda0 	.word	0x2000cda0
 8015444:	2000e840 	.word	0x2000e840
 8015448:	2000d13c 	.word	0x2000d13c
 801544c:	2000d048 	.word	0x2000d048
 8015450:	08017811 	.word	0x08017811
 8015454:	08017809 	.word	0x08017809
 8015458:	080178a5 	.word	0x080178a5
 801545c:	0801793d 	.word	0x0801793d

08015460 <rmw_context_fini>:
 8015460:	4b17      	ldr	r3, [pc, #92]	; (80154c0 <rmw_context_fini+0x60>)
 8015462:	b570      	push	{r4, r5, r6, lr}
 8015464:	681c      	ldr	r4, [r3, #0]
 8015466:	4605      	mov	r5, r0
 8015468:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801546a:	b33c      	cbz	r4, 80154bc <rmw_context_fini+0x5c>
 801546c:	2600      	movs	r6, #0
 801546e:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 8015472:	691a      	ldr	r2, [r3, #16]
 8015474:	4282      	cmp	r2, r0
 8015476:	d018      	beq.n	80154aa <rmw_context_fini+0x4a>
 8015478:	2c00      	cmp	r4, #0
 801547a:	d1f8      	bne.n	801546e <rmw_context_fini+0xe>
 801547c:	b188      	cbz	r0, 80154a2 <rmw_context_fini+0x42>
 801547e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015482:	789b      	ldrb	r3, [r3, #2]
 8015484:	2b01      	cmp	r3, #1
 8015486:	bf14      	ite	ne
 8015488:	210a      	movne	r1, #10
 801548a:	2100      	moveq	r1, #0
 801548c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015490:	f7fb fccc 	bl	8010e2c <uxr_delete_session_retries>
 8015494:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8015496:	f7f8 ffdb 	bl	800e450 <rmw_uxrce_fini_session_memory>
 801549a:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 801549c:	3010      	adds	r0, #16
 801549e:	f000 ff0f 	bl	80162c0 <uxr_close_custom_transport>
 80154a2:	2300      	movs	r3, #0
 80154a4:	4630      	mov	r0, r6
 80154a6:	64ab      	str	r3, [r5, #72]	; 0x48
 80154a8:	bd70      	pop	{r4, r5, r6, pc}
 80154aa:	f103 0018 	add.w	r0, r3, #24
 80154ae:	f000 f91f 	bl	80156f0 <rmw_destroy_node>
 80154b2:	4606      	mov	r6, r0
 80154b4:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 80154b6:	2c00      	cmp	r4, #0
 80154b8:	d1d9      	bne.n	801546e <rmw_context_fini+0xe>
 80154ba:	e7df      	b.n	801547c <rmw_context_fini+0x1c>
 80154bc:	4626      	mov	r6, r4
 80154be:	e7dd      	b.n	801547c <rmw_context_fini+0x1c>
 80154c0:	2000ce94 	.word	0x2000ce94

080154c4 <create_topic>:
 80154c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154c8:	4605      	mov	r5, r0
 80154ca:	b084      	sub	sp, #16
 80154cc:	482b      	ldr	r0, [pc, #172]	; (801557c <create_topic+0xb8>)
 80154ce:	460f      	mov	r7, r1
 80154d0:	4616      	mov	r6, r2
 80154d2:	f7ff fd45 	bl	8014f60 <get_memory>
 80154d6:	4604      	mov	r4, r0
 80154d8:	2800      	cmp	r0, #0
 80154da:	d036      	beq.n	801554a <create_topic+0x86>
 80154dc:	692a      	ldr	r2, [r5, #16]
 80154de:	68c4      	ldr	r4, [r0, #12]
 80154e0:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8015584 <create_topic+0xc0>
 80154e4:	61a5      	str	r5, [r4, #24]
 80154e6:	f241 5396 	movw	r3, #5526	; 0x1596
 80154ea:	6166      	str	r6, [r4, #20]
 80154ec:	5ad0      	ldrh	r0, [r2, r3]
 80154ee:	1c41      	adds	r1, r0, #1
 80154f0:	52d1      	strh	r1, [r2, r3]
 80154f2:	2102      	movs	r1, #2
 80154f4:	f7fa fc32 	bl	800fd5c <uxr_object_id>
 80154f8:	4641      	mov	r1, r8
 80154fa:	6120      	str	r0, [r4, #16]
 80154fc:	223c      	movs	r2, #60	; 0x3c
 80154fe:	4638      	mov	r0, r7
 8015500:	f7f9 f97c 	bl	800e7fc <generate_topic_name>
 8015504:	4607      	mov	r7, r0
 8015506:	b320      	cbz	r0, 8015552 <create_topic+0x8e>
 8015508:	4f1d      	ldr	r7, [pc, #116]	; (8015580 <create_topic+0xbc>)
 801550a:	4630      	mov	r0, r6
 801550c:	4639      	mov	r1, r7
 801550e:	2264      	movs	r2, #100	; 0x64
 8015510:	f7f9 f944 	bl	800e79c <generate_type_name>
 8015514:	4606      	mov	r6, r0
 8015516:	b320      	cbz	r0, 8015562 <create_topic+0x9e>
 8015518:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
 801551c:	2106      	movs	r1, #6
 801551e:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8015522:	9701      	str	r7, [sp, #4]
 8015524:	f8cd 8000 	str.w	r8, [sp]
 8015528:	9102      	str	r1, [sp, #8]
 801552a:	6811      	ldr	r1, [r2, #0]
 801552c:	6922      	ldr	r2, [r4, #16]
 801552e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015532:	f7fa fa8f 	bl	800fa54 <uxr_buffer_create_topic_bin>
 8015536:	4602      	mov	r2, r0
 8015538:	6928      	ldr	r0, [r5, #16]
 801553a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801553e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8015542:	f7f9 f8f5 	bl	800e730 <run_xrce_session>
 8015546:	4605      	mov	r5, r0
 8015548:	b198      	cbz	r0, 8015572 <create_topic+0xae>
 801554a:	4620      	mov	r0, r4
 801554c:	b004      	add	sp, #16
 801554e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015552:	4620      	mov	r0, r4
 8015554:	f7f8 fff2 	bl	800e53c <rmw_uxrce_fini_topic_memory>
 8015558:	463c      	mov	r4, r7
 801555a:	4620      	mov	r0, r4
 801555c:	b004      	add	sp, #16
 801555e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015562:	4620      	mov	r0, r4
 8015564:	f7f8 ffea 	bl	800e53c <rmw_uxrce_fini_topic_memory>
 8015568:	4634      	mov	r4, r6
 801556a:	4620      	mov	r0, r4
 801556c:	b004      	add	sp, #16
 801556e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015572:	4620      	mov	r0, r4
 8015574:	f7f8 ffe2 	bl	800e53c <rmw_uxrce_fini_topic_memory>
 8015578:	462c      	mov	r4, r5
 801557a:	e7e6      	b.n	801554a <create_topic+0x86>
 801557c:	2000d058 	.word	0x2000d058
 8015580:	20009c80 	.word	0x20009c80
 8015584:	20009c44 	.word	0x20009c44

08015588 <destroy_topic>:
 8015588:	b538      	push	{r3, r4, r5, lr}
 801558a:	6985      	ldr	r5, [r0, #24]
 801558c:	b1d5      	cbz	r5, 80155c4 <destroy_topic+0x3c>
 801558e:	4604      	mov	r4, r0
 8015590:	6928      	ldr	r0, [r5, #16]
 8015592:	6922      	ldr	r2, [r4, #16]
 8015594:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015598:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801559c:	6819      	ldr	r1, [r3, #0]
 801559e:	f7fa f9db 	bl	800f958 <uxr_buffer_delete_entity>
 80155a2:	4602      	mov	r2, r0
 80155a4:	6928      	ldr	r0, [r5, #16]
 80155a6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80155aa:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80155ae:	f7f9 f8bf 	bl	800e730 <run_xrce_session>
 80155b2:	2800      	cmp	r0, #0
 80155b4:	4620      	mov	r0, r4
 80155b6:	bf14      	ite	ne
 80155b8:	2400      	movne	r4, #0
 80155ba:	2402      	moveq	r4, #2
 80155bc:	f7f8 ffbe 	bl	800e53c <rmw_uxrce_fini_topic_memory>
 80155c0:	4620      	mov	r0, r4
 80155c2:	bd38      	pop	{r3, r4, r5, pc}
 80155c4:	2401      	movs	r4, #1
 80155c6:	4620      	mov	r0, r4
 80155c8:	bd38      	pop	{r3, r4, r5, pc}
 80155ca:	bf00      	nop

080155cc <create_node>:
 80155cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80155d0:	b083      	sub	sp, #12
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d05f      	beq.n	8015696 <create_node+0xca>
 80155d6:	4606      	mov	r6, r0
 80155d8:	4835      	ldr	r0, [pc, #212]	; (80156b0 <create_node+0xe4>)
 80155da:	460f      	mov	r7, r1
 80155dc:	4690      	mov	r8, r2
 80155de:	461d      	mov	r5, r3
 80155e0:	f7ff fcbe 	bl	8014f60 <get_memory>
 80155e4:	2800      	cmp	r0, #0
 80155e6:	d056      	beq.n	8015696 <create_node+0xca>
 80155e8:	68c4      	ldr	r4, [r0, #12]
 80155ea:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80155ec:	6123      	str	r3, [r4, #16]
 80155ee:	f7ff fd1f 	bl	8015030 <rmw_get_implementation_identifier>
 80155f2:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 80155f6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80155fa:	f8c4 9020 	str.w	r9, [r4, #32]
 80155fe:	4630      	mov	r0, r6
 8015600:	f7ea fdf8 	bl	80001f4 <strlen>
 8015604:	1c42      	adds	r2, r0, #1
 8015606:	2a3c      	cmp	r2, #60	; 0x3c
 8015608:	f104 0518 	add.w	r5, r4, #24
 801560c:	d840      	bhi.n	8015690 <create_node+0xc4>
 801560e:	4648      	mov	r0, r9
 8015610:	4631      	mov	r1, r6
 8015612:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8015616:	f003 f846 	bl	80186a6 <memcpy>
 801561a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 801561e:	4638      	mov	r0, r7
 8015620:	f7ea fde8 	bl	80001f4 <strlen>
 8015624:	1c42      	adds	r2, r0, #1
 8015626:	2a3c      	cmp	r2, #60	; 0x3c
 8015628:	d832      	bhi.n	8015690 <create_node+0xc4>
 801562a:	4639      	mov	r1, r7
 801562c:	4648      	mov	r0, r9
 801562e:	f003 f83a 	bl	80186a6 <memcpy>
 8015632:	f241 5394 	movw	r3, #5524	; 0x1594
 8015636:	6922      	ldr	r2, [r4, #16]
 8015638:	5ad0      	ldrh	r0, [r2, r3]
 801563a:	2101      	movs	r1, #1
 801563c:	eb00 0c01 	add.w	ip, r0, r1
 8015640:	f822 c003 	strh.w	ip, [r2, r3]
 8015644:	f7fa fb8a 	bl	800fd5c <uxr_object_id>
 8015648:	6160      	str	r0, [r4, #20]
 801564a:	783b      	ldrb	r3, [r7, #0]
 801564c:	2b2f      	cmp	r3, #47	; 0x2f
 801564e:	d127      	bne.n	80156a0 <create_node+0xd4>
 8015650:	787b      	ldrb	r3, [r7, #1]
 8015652:	bb2b      	cbnz	r3, 80156a0 <create_node+0xd4>
 8015654:	4a17      	ldr	r2, [pc, #92]	; (80156b4 <create_node+0xe8>)
 8015656:	4818      	ldr	r0, [pc, #96]	; (80156b8 <create_node+0xec>)
 8015658:	4633      	mov	r3, r6
 801565a:	213c      	movs	r1, #60	; 0x3c
 801565c:	f002 fda4 	bl	80181a8 <sniprintf>
 8015660:	6920      	ldr	r0, [r4, #16]
 8015662:	4b15      	ldr	r3, [pc, #84]	; (80156b8 <create_node+0xec>)
 8015664:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8015668:	9300      	str	r3, [sp, #0]
 801566a:	2306      	movs	r3, #6
 801566c:	9301      	str	r3, [sp, #4]
 801566e:	6811      	ldr	r1, [r2, #0]
 8015670:	6962      	ldr	r2, [r4, #20]
 8015672:	fa1f f388 	uxth.w	r3, r8
 8015676:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801567a:	f7fa f9b9 	bl	800f9f0 <uxr_buffer_create_participant_bin>
 801567e:	4602      	mov	r2, r0
 8015680:	6920      	ldr	r0, [r4, #16]
 8015682:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8015686:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801568a:	f7f9 f851 	bl	800e730 <run_xrce_session>
 801568e:	b918      	cbnz	r0, 8015698 <create_node+0xcc>
 8015690:	4628      	mov	r0, r5
 8015692:	f7f8 fee3 	bl	800e45c <rmw_uxrce_fini_node_memory>
 8015696:	2500      	movs	r5, #0
 8015698:	4628      	mov	r0, r5
 801569a:	b003      	add	sp, #12
 801569c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80156a0:	4a06      	ldr	r2, [pc, #24]	; (80156bc <create_node+0xf0>)
 80156a2:	9600      	str	r6, [sp, #0]
 80156a4:	463b      	mov	r3, r7
 80156a6:	213c      	movs	r1, #60	; 0x3c
 80156a8:	4803      	ldr	r0, [pc, #12]	; (80156b8 <create_node+0xec>)
 80156aa:	f002 fd7d 	bl	80181a8 <sniprintf>
 80156ae:	e7d7      	b.n	8015660 <create_node+0x94>
 80156b0:	2000ce94 	.word	0x2000ce94
 80156b4:	08019924 	.word	0x08019924
 80156b8:	20009ce4 	.word	0x20009ce4
 80156bc:	08019964 	.word	0x08019964

080156c0 <rmw_create_node>:
 80156c0:	b199      	cbz	r1, 80156ea <rmw_create_node+0x2a>
 80156c2:	b430      	push	{r4, r5}
 80156c4:	4615      	mov	r5, r2
 80156c6:	461a      	mov	r2, r3
 80156c8:	780b      	ldrb	r3, [r1, #0]
 80156ca:	460c      	mov	r4, r1
 80156cc:	b153      	cbz	r3, 80156e4 <rmw_create_node+0x24>
 80156ce:	b14d      	cbz	r5, 80156e4 <rmw_create_node+0x24>
 80156d0:	782b      	ldrb	r3, [r5, #0]
 80156d2:	b13b      	cbz	r3, 80156e4 <rmw_create_node+0x24>
 80156d4:	b902      	cbnz	r2, 80156d8 <rmw_create_node+0x18>
 80156d6:	69c2      	ldr	r2, [r0, #28]
 80156d8:	4603      	mov	r3, r0
 80156da:	4629      	mov	r1, r5
 80156dc:	4620      	mov	r0, r4
 80156de:	bc30      	pop	{r4, r5}
 80156e0:	f7ff bf74 	b.w	80155cc <create_node>
 80156e4:	2000      	movs	r0, #0
 80156e6:	bc30      	pop	{r4, r5}
 80156e8:	4770      	bx	lr
 80156ea:	2000      	movs	r0, #0
 80156ec:	4770      	bx	lr
 80156ee:	bf00      	nop

080156f0 <rmw_destroy_node>:
 80156f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156f2:	2800      	cmp	r0, #0
 80156f4:	d066      	beq.n	80157c4 <rmw_destroy_node+0xd4>
 80156f6:	4607      	mov	r7, r0
 80156f8:	6800      	ldr	r0, [r0, #0]
 80156fa:	b128      	cbz	r0, 8015708 <rmw_destroy_node+0x18>
 80156fc:	4b34      	ldr	r3, [pc, #208]	; (80157d0 <rmw_destroy_node+0xe0>)
 80156fe:	6819      	ldr	r1, [r3, #0]
 8015700:	f7ea fd6e 	bl	80001e0 <strcmp>
 8015704:	2800      	cmp	r0, #0
 8015706:	d15d      	bne.n	80157c4 <rmw_destroy_node+0xd4>
 8015708:	687c      	ldr	r4, [r7, #4]
 801570a:	2c00      	cmp	r4, #0
 801570c:	d05a      	beq.n	80157c4 <rmw_destroy_node+0xd4>
 801570e:	4b31      	ldr	r3, [pc, #196]	; (80157d4 <rmw_destroy_node+0xe4>)
 8015710:	681d      	ldr	r5, [r3, #0]
 8015712:	2d00      	cmp	r5, #0
 8015714:	d059      	beq.n	80157ca <rmw_destroy_node+0xda>
 8015716:	2600      	movs	r6, #0
 8015718:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 801571c:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8015720:	429c      	cmp	r4, r3
 8015722:	d047      	beq.n	80157b4 <rmw_destroy_node+0xc4>
 8015724:	2d00      	cmp	r5, #0
 8015726:	d1f7      	bne.n	8015718 <rmw_destroy_node+0x28>
 8015728:	4b2b      	ldr	r3, [pc, #172]	; (80157d8 <rmw_destroy_node+0xe8>)
 801572a:	681d      	ldr	r5, [r3, #0]
 801572c:	b15d      	cbz	r5, 8015746 <rmw_destroy_node+0x56>
 801572e:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 8015732:	6a0b      	ldr	r3, [r1, #32]
 8015734:	429c      	cmp	r4, r3
 8015736:	d1f9      	bne.n	801572c <rmw_destroy_node+0x3c>
 8015738:	317c      	adds	r1, #124	; 0x7c
 801573a:	4638      	mov	r0, r7
 801573c:	f7f8 fcac 	bl	800e098 <rmw_destroy_subscription>
 8015740:	4606      	mov	r6, r0
 8015742:	2d00      	cmp	r5, #0
 8015744:	d1f3      	bne.n	801572e <rmw_destroy_node+0x3e>
 8015746:	4b25      	ldr	r3, [pc, #148]	; (80157dc <rmw_destroy_node+0xec>)
 8015748:	681d      	ldr	r5, [r3, #0]
 801574a:	b15d      	cbz	r5, 8015764 <rmw_destroy_node+0x74>
 801574c:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 8015750:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8015752:	429c      	cmp	r4, r3
 8015754:	d1f9      	bne.n	801574a <rmw_destroy_node+0x5a>
 8015756:	317c      	adds	r1, #124	; 0x7c
 8015758:	4638      	mov	r0, r7
 801575a:	f000 f951 	bl	8015a00 <rmw_destroy_service>
 801575e:	4606      	mov	r6, r0
 8015760:	2d00      	cmp	r5, #0
 8015762:	d1f3      	bne.n	801574c <rmw_destroy_node+0x5c>
 8015764:	4b1e      	ldr	r3, [pc, #120]	; (80157e0 <rmw_destroy_node+0xf0>)
 8015766:	681d      	ldr	r5, [r3, #0]
 8015768:	b15d      	cbz	r5, 8015782 <rmw_destroy_node+0x92>
 801576a:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 801576e:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8015770:	429c      	cmp	r4, r3
 8015772:	d1f9      	bne.n	8015768 <rmw_destroy_node+0x78>
 8015774:	317c      	adds	r1, #124	; 0x7c
 8015776:	4638      	mov	r0, r7
 8015778:	f7ff fc16 	bl	8014fa8 <rmw_destroy_client>
 801577c:	4606      	mov	r6, r0
 801577e:	2d00      	cmp	r5, #0
 8015780:	d1f3      	bne.n	801576a <rmw_destroy_node+0x7a>
 8015782:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8015786:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801578a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801578e:	6819      	ldr	r1, [r3, #0]
 8015790:	f7fa f8e2 	bl	800f958 <uxr_buffer_delete_entity>
 8015794:	4602      	mov	r2, r0
 8015796:	6920      	ldr	r0, [r4, #16]
 8015798:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801579c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80157a0:	f7f8 ffc6 	bl	800e730 <run_xrce_session>
 80157a4:	2800      	cmp	r0, #0
 80157a6:	bf08      	it	eq
 80157a8:	2602      	moveq	r6, #2
 80157aa:	4638      	mov	r0, r7
 80157ac:	f7f8 fe56 	bl	800e45c <rmw_uxrce_fini_node_memory>
 80157b0:	4630      	mov	r0, r6
 80157b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157b4:	3184      	adds	r1, #132	; 0x84
 80157b6:	4638      	mov	r0, r7
 80157b8:	f7f8 fb3c 	bl	800de34 <rmw_destroy_publisher>
 80157bc:	4606      	mov	r6, r0
 80157be:	2d00      	cmp	r5, #0
 80157c0:	d1aa      	bne.n	8015718 <rmw_destroy_node+0x28>
 80157c2:	e7b1      	b.n	8015728 <rmw_destroy_node+0x38>
 80157c4:	2601      	movs	r6, #1
 80157c6:	4630      	mov	r0, r6
 80157c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157ca:	462e      	mov	r6, r5
 80157cc:	e7ac      	b.n	8015728 <rmw_destroy_node+0x38>
 80157ce:	bf00      	nop
 80157d0:	08019e2c 	.word	0x08019e2c
 80157d4:	20009ed0 	.word	0x20009ed0
 80157d8:	2000d12c 	.word	0x2000d12c
 80157dc:	2000d11c 	.word	0x2000d11c
 80157e0:	2000a750 	.word	0x2000a750

080157e4 <rmw_node_get_graph_guard_condition>:
 80157e4:	6843      	ldr	r3, [r0, #4]
 80157e6:	6918      	ldr	r0, [r3, #16]
 80157e8:	f500 705a 	add.w	r0, r0, #872	; 0x368
 80157ec:	4770      	bx	lr
 80157ee:	bf00      	nop

080157f0 <rmw_take_request>:
 80157f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80157f4:	4605      	mov	r5, r0
 80157f6:	6800      	ldr	r0, [r0, #0]
 80157f8:	b089      	sub	sp, #36	; 0x24
 80157fa:	460c      	mov	r4, r1
 80157fc:	4690      	mov	r8, r2
 80157fe:	461e      	mov	r6, r3
 8015800:	b128      	cbz	r0, 801580e <rmw_take_request+0x1e>
 8015802:	4b28      	ldr	r3, [pc, #160]	; (80158a4 <rmw_take_request+0xb4>)
 8015804:	6819      	ldr	r1, [r3, #0]
 8015806:	f7ea fceb 	bl	80001e0 <strcmp>
 801580a:	2800      	cmp	r0, #0
 801580c:	d146      	bne.n	801589c <rmw_take_request+0xac>
 801580e:	b10e      	cbz	r6, 8015814 <rmw_take_request+0x24>
 8015810:	2300      	movs	r3, #0
 8015812:	7033      	strb	r3, [r6, #0]
 8015814:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8015818:	f7f8 ff12 	bl	800e640 <rmw_uxrce_clean_expired_static_input_buffer>
 801581c:	4648      	mov	r0, r9
 801581e:	f7f8 fee5 	bl	800e5ec <rmw_uxrce_find_static_input_buffer_by_owner>
 8015822:	4607      	mov	r7, r0
 8015824:	b3b0      	cbz	r0, 8015894 <rmw_take_request+0xa4>
 8015826:	68c5      	ldr	r5, [r0, #12]
 8015828:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 801582c:	f8d5 183c 	ldr.w	r1, [r5, #2108]	; 0x83c
 8015830:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8015834:	7423      	strb	r3, [r4, #16]
 8015836:	e9c4 1208 	strd	r1, r2, [r4, #32]
 801583a:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 801583e:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 8015842:	74e2      	strb	r2, [r4, #19]
 8015844:	f8a4 3011 	strh.w	r3, [r4, #17]
 8015848:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 801584c:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 8015850:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 8015854:	61e1      	str	r1, [r4, #28]
 8015856:	6162      	str	r2, [r4, #20]
 8015858:	61a3      	str	r3, [r4, #24]
 801585a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801585e:	689b      	ldr	r3, [r3, #8]
 8015860:	4798      	blx	r3
 8015862:	6844      	ldr	r4, [r0, #4]
 8015864:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8015868:	f105 0110 	add.w	r1, r5, #16
 801586c:	4668      	mov	r0, sp
 801586e:	f7fa f803 	bl	800f878 <ucdr_init_buffer>
 8015872:	68e3      	ldr	r3, [r4, #12]
 8015874:	4641      	mov	r1, r8
 8015876:	4668      	mov	r0, sp
 8015878:	4798      	blx	r3
 801587a:	4639      	mov	r1, r7
 801587c:	4604      	mov	r4, r0
 801587e:	480a      	ldr	r0, [pc, #40]	; (80158a8 <rmw_take_request+0xb8>)
 8015880:	f7ff fb7e 	bl	8014f80 <put_memory>
 8015884:	b106      	cbz	r6, 8015888 <rmw_take_request+0x98>
 8015886:	7034      	strb	r4, [r6, #0]
 8015888:	f084 0001 	eor.w	r0, r4, #1
 801588c:	b2c0      	uxtb	r0, r0
 801588e:	b009      	add	sp, #36	; 0x24
 8015890:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015894:	2001      	movs	r0, #1
 8015896:	b009      	add	sp, #36	; 0x24
 8015898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801589c:	200c      	movs	r0, #12
 801589e:	b009      	add	sp, #36	; 0x24
 80158a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80158a4:	08019e2c 	.word	0x08019e2c
 80158a8:	20009ec0 	.word	0x20009ec0

080158ac <rmw_send_response>:
 80158ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158ae:	4605      	mov	r5, r0
 80158b0:	6800      	ldr	r0, [r0, #0]
 80158b2:	b091      	sub	sp, #68	; 0x44
 80158b4:	460c      	mov	r4, r1
 80158b6:	4617      	mov	r7, r2
 80158b8:	b128      	cbz	r0, 80158c6 <rmw_send_response+0x1a>
 80158ba:	4b2a      	ldr	r3, [pc, #168]	; (8015964 <rmw_send_response+0xb8>)
 80158bc:	6819      	ldr	r1, [r3, #0]
 80158be:	f7ea fc8f 	bl	80001e0 <strcmp>
 80158c2:	2800      	cmp	r0, #0
 80158c4:	d143      	bne.n	801594e <rmw_send_response+0xa2>
 80158c6:	4623      	mov	r3, r4
 80158c8:	4626      	mov	r6, r4
 80158ca:	f853 0f04 	ldr.w	r0, [r3, #4]!
 80158ce:	f836 ef01 	ldrh.w	lr, [r6, #1]!
 80158d2:	6859      	ldr	r1, [r3, #4]
 80158d4:	686d      	ldr	r5, [r5, #4]
 80158d6:	689a      	ldr	r2, [r3, #8]
 80158d8:	78b3      	ldrb	r3, [r6, #2]
 80158da:	f894 c000 	ldrb.w	ip, [r4]
 80158de:	6966      	ldr	r6, [r4, #20]
 80158e0:	f88d 3016 	strb.w	r3, [sp, #22]
 80158e4:	ab02      	add	r3, sp, #8
 80158e6:	f8ad e014 	strh.w	lr, [sp, #20]
 80158ea:	f88d c017 	strb.w	ip, [sp, #23]
 80158ee:	9606      	str	r6, [sp, #24]
 80158f0:	c307      	stmia	r3!, {r0, r1, r2}
 80158f2:	696b      	ldr	r3, [r5, #20]
 80158f4:	6922      	ldr	r2, [r4, #16]
 80158f6:	9207      	str	r2, [sp, #28]
 80158f8:	68db      	ldr	r3, [r3, #12]
 80158fa:	6fae      	ldr	r6, [r5, #120]	; 0x78
 80158fc:	4798      	blx	r3
 80158fe:	4603      	mov	r3, r0
 8015900:	4638      	mov	r0, r7
 8015902:	685c      	ldr	r4, [r3, #4]
 8015904:	6923      	ldr	r3, [r4, #16]
 8015906:	4798      	blx	r3
 8015908:	6933      	ldr	r3, [r6, #16]
 801590a:	3018      	adds	r0, #24
 801590c:	9000      	str	r0, [sp, #0]
 801590e:	692a      	ldr	r2, [r5, #16]
 8015910:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8015912:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8015916:	ab08      	add	r3, sp, #32
 8015918:	f7fb fe56 	bl	80115c8 <uxr_prepare_output_stream>
 801591c:	b910      	cbnz	r0, 8015924 <rmw_send_response+0x78>
 801591e:	2001      	movs	r0, #1
 8015920:	b011      	add	sp, #68	; 0x44
 8015922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015924:	a902      	add	r1, sp, #8
 8015926:	a808      	add	r0, sp, #32
 8015928:	f7fc ff6c 	bl	8012804 <uxr_serialize_SampleIdentity>
 801592c:	68a3      	ldr	r3, [r4, #8]
 801592e:	a908      	add	r1, sp, #32
 8015930:	4638      	mov	r0, r7
 8015932:	4798      	blx	r3
 8015934:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8015938:	6930      	ldr	r0, [r6, #16]
 801593a:	2b01      	cmp	r3, #1
 801593c:	d00a      	beq.n	8015954 <rmw_send_response+0xa8>
 801593e:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8015940:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015944:	f7fb f838 	bl	80109b8 <uxr_run_session_until_confirm_delivery>
 8015948:	2000      	movs	r0, #0
 801594a:	b011      	add	sp, #68	; 0x44
 801594c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801594e:	200c      	movs	r0, #12
 8015950:	b011      	add	sp, #68	; 0x44
 8015952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015954:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015958:	f7fa fc72 	bl	8010240 <uxr_flash_output_streams>
 801595c:	2000      	movs	r0, #0
 801595e:	b011      	add	sp, #68	; 0x44
 8015960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015962:	bf00      	nop
 8015964:	08019e2c 	.word	0x08019e2c

08015968 <rmw_take_response>:
 8015968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801596c:	4604      	mov	r4, r0
 801596e:	6800      	ldr	r0, [r0, #0]
 8015970:	b089      	sub	sp, #36	; 0x24
 8015972:	4688      	mov	r8, r1
 8015974:	4617      	mov	r7, r2
 8015976:	461d      	mov	r5, r3
 8015978:	b120      	cbz	r0, 8015984 <rmw_take_response+0x1c>
 801597a:	4b1f      	ldr	r3, [pc, #124]	; (80159f8 <rmw_take_response+0x90>)
 801597c:	6819      	ldr	r1, [r3, #0]
 801597e:	f7ea fc2f 	bl	80001e0 <strcmp>
 8015982:	bb88      	cbnz	r0, 80159e8 <rmw_take_response+0x80>
 8015984:	b10d      	cbz	r5, 801598a <rmw_take_response+0x22>
 8015986:	2300      	movs	r3, #0
 8015988:	702b      	strb	r3, [r5, #0]
 801598a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801598e:	f7f8 fe57 	bl	800e640 <rmw_uxrce_clean_expired_static_input_buffer>
 8015992:	4648      	mov	r0, r9
 8015994:	f7f8 fe2a 	bl	800e5ec <rmw_uxrce_find_static_input_buffer_by_owner>
 8015998:	4606      	mov	r6, r0
 801599a:	b348      	cbz	r0, 80159f0 <rmw_take_response+0x88>
 801599c:	68c4      	ldr	r4, [r0, #12]
 801599e:	f8d9 1014 	ldr.w	r1, [r9, #20]
 80159a2:	f604 0328 	addw	r3, r4, #2088	; 0x828
 80159a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159aa:	68c9      	ldr	r1, [r1, #12]
 80159ac:	e9c8 2308 	strd	r2, r3, [r8, #32]
 80159b0:	4788      	blx	r1
 80159b2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80159b6:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 80159ba:	f104 0110 	add.w	r1, r4, #16
 80159be:	4668      	mov	r0, sp
 80159c0:	f7f9 ff5a 	bl	800f878 <ucdr_init_buffer>
 80159c4:	4639      	mov	r1, r7
 80159c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80159ca:	4668      	mov	r0, sp
 80159cc:	4798      	blx	r3
 80159ce:	4631      	mov	r1, r6
 80159d0:	4604      	mov	r4, r0
 80159d2:	480a      	ldr	r0, [pc, #40]	; (80159fc <rmw_take_response+0x94>)
 80159d4:	f7ff fad4 	bl	8014f80 <put_memory>
 80159d8:	b105      	cbz	r5, 80159dc <rmw_take_response+0x74>
 80159da:	702c      	strb	r4, [r5, #0]
 80159dc:	f084 0001 	eor.w	r0, r4, #1
 80159e0:	b2c0      	uxtb	r0, r0
 80159e2:	b009      	add	sp, #36	; 0x24
 80159e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80159e8:	200c      	movs	r0, #12
 80159ea:	b009      	add	sp, #36	; 0x24
 80159ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80159f0:	2001      	movs	r0, #1
 80159f2:	b009      	add	sp, #36	; 0x24
 80159f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80159f8:	08019e2c 	.word	0x08019e2c
 80159fc:	20009ec0 	.word	0x20009ec0

08015a00 <rmw_destroy_service>:
 8015a00:	b570      	push	{r4, r5, r6, lr}
 8015a02:	b128      	cbz	r0, 8015a10 <rmw_destroy_service+0x10>
 8015a04:	4604      	mov	r4, r0
 8015a06:	6800      	ldr	r0, [r0, #0]
 8015a08:	460d      	mov	r5, r1
 8015a0a:	f7f8 ff11 	bl	800e830 <is_uxrce_rmw_identifier_valid>
 8015a0e:	b910      	cbnz	r0, 8015a16 <rmw_destroy_service+0x16>
 8015a10:	2401      	movs	r4, #1
 8015a12:	4620      	mov	r0, r4
 8015a14:	bd70      	pop	{r4, r5, r6, pc}
 8015a16:	6863      	ldr	r3, [r4, #4]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d0f9      	beq.n	8015a10 <rmw_destroy_service+0x10>
 8015a1c:	2d00      	cmp	r5, #0
 8015a1e:	d0f7      	beq.n	8015a10 <rmw_destroy_service+0x10>
 8015a20:	6828      	ldr	r0, [r5, #0]
 8015a22:	f7f8 ff05 	bl	800e830 <is_uxrce_rmw_identifier_valid>
 8015a26:	2800      	cmp	r0, #0
 8015a28:	d0f2      	beq.n	8015a10 <rmw_destroy_service+0x10>
 8015a2a:	686e      	ldr	r6, [r5, #4]
 8015a2c:	2e00      	cmp	r6, #0
 8015a2e:	d0ef      	beq.n	8015a10 <rmw_destroy_service+0x10>
 8015a30:	6864      	ldr	r4, [r4, #4]
 8015a32:	6932      	ldr	r2, [r6, #16]
 8015a34:	6920      	ldr	r0, [r4, #16]
 8015a36:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015a3a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015a3e:	6819      	ldr	r1, [r3, #0]
 8015a40:	f7fa f9f4 	bl	800fe2c <uxr_buffer_cancel_data>
 8015a44:	4602      	mov	r2, r0
 8015a46:	6920      	ldr	r0, [r4, #16]
 8015a48:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015a4c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015a50:	f7f8 fe6e 	bl	800e730 <run_xrce_session>
 8015a54:	6920      	ldr	r0, [r4, #16]
 8015a56:	6932      	ldr	r2, [r6, #16]
 8015a58:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015a5c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015a60:	6819      	ldr	r1, [r3, #0]
 8015a62:	f7f9 ff79 	bl	800f958 <uxr_buffer_delete_entity>
 8015a66:	4602      	mov	r2, r0
 8015a68:	6920      	ldr	r0, [r4, #16]
 8015a6a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015a6e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015a72:	f7f8 fe5d 	bl	800e730 <run_xrce_session>
 8015a76:	2800      	cmp	r0, #0
 8015a78:	4628      	mov	r0, r5
 8015a7a:	bf14      	ite	ne
 8015a7c:	2400      	movne	r4, #0
 8015a7e:	2402      	moveq	r4, #2
 8015a80:	f7f8 fd30 	bl	800e4e4 <rmw_uxrce_fini_service_memory>
 8015a84:	e7c5      	b.n	8015a12 <rmw_destroy_service+0x12>
 8015a86:	bf00      	nop

08015a88 <rmw_uxrce_transport_init>:
 8015a88:	b508      	push	{r3, lr}
 8015a8a:	b108      	cbz	r0, 8015a90 <rmw_uxrce_transport_init+0x8>
 8015a8c:	f100 0210 	add.w	r2, r0, #16
 8015a90:	b139      	cbz	r1, 8015aa2 <rmw_uxrce_transport_init+0x1a>
 8015a92:	6949      	ldr	r1, [r1, #20]
 8015a94:	4610      	mov	r0, r2
 8015a96:	f000 fbdf 	bl	8016258 <uxr_init_custom_transport>
 8015a9a:	f080 0001 	eor.w	r0, r0, #1
 8015a9e:	b2c0      	uxtb	r0, r0
 8015aa0:	bd08      	pop	{r3, pc}
 8015aa2:	4b04      	ldr	r3, [pc, #16]	; (8015ab4 <rmw_uxrce_transport_init+0x2c>)
 8015aa4:	4610      	mov	r0, r2
 8015aa6:	6859      	ldr	r1, [r3, #4]
 8015aa8:	f000 fbd6 	bl	8016258 <uxr_init_custom_transport>
 8015aac:	f080 0001 	eor.w	r0, r0, #1
 8015ab0:	b2c0      	uxtb	r0, r0
 8015ab2:	bd08      	pop	{r3, pc}
 8015ab4:	20009ea0 	.word	0x20009ea0

08015ab8 <rmw_wait>:
 8015ab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015abc:	460f      	mov	r7, r1
 8015abe:	4606      	mov	r6, r0
 8015ac0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015ac2:	469a      	mov	sl, r3
 8015ac4:	4615      	mov	r5, r2
 8015ac6:	2a00      	cmp	r2, #0
 8015ac8:	f000 8122 	beq.w	8015d10 <rmw_wait+0x258>
 8015acc:	2900      	cmp	r1, #0
 8015ace:	f000 812a 	beq.w	8015d26 <rmw_wait+0x26e>
 8015ad2:	e9d1 2300 	ldrd	r2, r3, [r1]
 8015ad6:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8015ada:	015c      	lsls	r4, r3, #5
 8015adc:	ebbb 0b02 	subs.w	fp, fp, r2
 8015ae0:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
 8015ae4:	eb64 0403 	sbc.w	r4, r4, r3
 8015ae8:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8015aec:	00a4      	lsls	r4, r4, #2
 8015aee:	ea44 749b 	orr.w	r4, r4, fp, lsr #30
 8015af2:	eb10 0b02 	adds.w	fp, r0, r2
 8015af6:	eb43 0404 	adc.w	r4, r3, r4
 8015afa:	4aad      	ldr	r2, [pc, #692]	; (8015db0 <rmw_wait+0x2f8>)
 8015afc:	2300      	movs	r3, #0
 8015afe:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8015b02:	f7eb f843 	bl	8000b8c <__aeabi_uldivmod>
 8015b06:	00e4      	lsls	r4, r4, #3
 8015b08:	ea44 745b 	orr.w	r4, r4, fp, lsr #29
 8015b0c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8015b10:	eb1b 0800 	adds.w	r8, fp, r0
 8015b14:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8015b18:	eb44 0901 	adc.w	r9, r4, r1
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	4542      	cmp	r2, r8
 8015b20:	eb73 0109 	sbcs.w	r1, r3, r9
 8015b24:	f2c0 80f2 	blt.w	8015d0c <rmw_wait+0x254>
 8015b28:	f7f8 fd8a 	bl	800e640 <rmw_uxrce_clean_expired_static_input_buffer>
 8015b2c:	4ba1      	ldr	r3, [pc, #644]	; (8015db4 <rmw_wait+0x2fc>)
 8015b2e:	681c      	ldr	r4, [r3, #0]
 8015b30:	b144      	cbz	r4, 8015b44 <rmw_wait+0x8c>
 8015b32:	4623      	mov	r3, r4
 8015b34:	f241 50a4 	movw	r0, #5540	; 0x15a4
 8015b38:	2100      	movs	r1, #0
 8015b3a:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8015b3e:	5411      	strb	r1, [r2, r0]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d1fa      	bne.n	8015b3a <rmw_wait+0x82>
 8015b44:	b185      	cbz	r5, 8015b68 <rmw_wait+0xb0>
 8015b46:	6829      	ldr	r1, [r5, #0]
 8015b48:	b171      	cbz	r1, 8015b68 <rmw_wait+0xb0>
 8015b4a:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8015b4e:	2300      	movs	r3, #0
 8015b50:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8015b54:	2001      	movs	r0, #1
 8015b56:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8015b5a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8015b5c:	3301      	adds	r3, #1
 8015b5e:	6912      	ldr	r2, [r2, #16]
 8015b60:	4299      	cmp	r1, r3
 8015b62:	f802 000c 	strb.w	r0, [r2, ip]
 8015b66:	d1f6      	bne.n	8015b56 <rmw_wait+0x9e>
 8015b68:	f1ba 0f00 	cmp.w	sl, #0
 8015b6c:	d011      	beq.n	8015b92 <rmw_wait+0xda>
 8015b6e:	f8da 1000 	ldr.w	r1, [sl]
 8015b72:	b171      	cbz	r1, 8015b92 <rmw_wait+0xda>
 8015b74:	f8da e004 	ldr.w	lr, [sl, #4]
 8015b78:	2300      	movs	r3, #0
 8015b7a:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8015b7e:	2001      	movs	r0, #1
 8015b80:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8015b84:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8015b86:	3301      	adds	r3, #1
 8015b88:	6912      	ldr	r2, [r2, #16]
 8015b8a:	4299      	cmp	r1, r3
 8015b8c:	f802 000c 	strb.w	r0, [r2, ip]
 8015b90:	d1f6      	bne.n	8015b80 <rmw_wait+0xc8>
 8015b92:	b186      	cbz	r6, 8015bb6 <rmw_wait+0xfe>
 8015b94:	6831      	ldr	r1, [r6, #0]
 8015b96:	b171      	cbz	r1, 8015bb6 <rmw_wait+0xfe>
 8015b98:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8015b9c:	2300      	movs	r3, #0
 8015b9e:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8015ba2:	2001      	movs	r0, #1
 8015ba4:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8015ba8:	6a12      	ldr	r2, [r2, #32]
 8015baa:	3301      	adds	r3, #1
 8015bac:	6912      	ldr	r2, [r2, #16]
 8015bae:	4299      	cmp	r1, r3
 8015bb0:	f802 000c 	strb.w	r0, [r2, ip]
 8015bb4:	d1f6      	bne.n	8015ba4 <rmw_wait+0xec>
 8015bb6:	b34c      	cbz	r4, 8015c0c <rmw_wait+0x154>
 8015bb8:	4622      	mov	r2, r4
 8015bba:	2300      	movs	r3, #0
 8015bbc:	f241 50a4 	movw	r0, #5540	; 0x15a4
 8015bc0:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 8015bc4:	5c09      	ldrb	r1, [r1, r0]
 8015bc6:	440b      	add	r3, r1
 8015bc8:	b2db      	uxtb	r3, r3
 8015bca:	2a00      	cmp	r2, #0
 8015bcc:	d1f8      	bne.n	8015bc0 <rmw_wait+0x108>
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	f000 8082 	beq.w	8015cd8 <rmw_wait+0x220>
 8015bd4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8015bd8:	d00d      	beq.n	8015bf6 <rmw_wait+0x13e>
 8015bda:	ee07 8a90 	vmov	s15, r8
 8015bde:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015be2:	ee07 3a90 	vmov	s15, r3
 8015be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015bee:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8015bf2:	ee17 8a90 	vmov	r8, s15
 8015bf6:	f241 59a4 	movw	r9, #5540	; 0x15a4
 8015bfa:	68e0      	ldr	r0, [r4, #12]
 8015bfc:	f810 3009 	ldrb.w	r3, [r0, r9]
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	f040 8093 	bne.w	8015d2c <rmw_wait+0x274>
 8015c06:	68a4      	ldr	r4, [r4, #8]
 8015c08:	2c00      	cmp	r4, #0
 8015c0a:	d1f6      	bne.n	8015bfa <rmw_wait+0x142>
 8015c0c:	2d00      	cmp	r5, #0
 8015c0e:	f000 80ac 	beq.w	8015d6a <rmw_wait+0x2b2>
 8015c12:	682b      	ldr	r3, [r5, #0]
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	f000 8093 	beq.w	8015d40 <rmw_wait+0x288>
 8015c1a:	2400      	movs	r4, #0
 8015c1c:	46a0      	mov	r8, r4
 8015c1e:	686b      	ldr	r3, [r5, #4]
 8015c20:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015c24:	f7f8 fce2 	bl	800e5ec <rmw_uxrce_find_static_input_buffer_by_owner>
 8015c28:	2800      	cmp	r0, #0
 8015c2a:	d05f      	beq.n	8015cec <rmw_wait+0x234>
 8015c2c:	682b      	ldr	r3, [r5, #0]
 8015c2e:	3401      	adds	r4, #1
 8015c30:	42a3      	cmp	r3, r4
 8015c32:	f04f 0801 	mov.w	r8, #1
 8015c36:	d8f2      	bhi.n	8015c1e <rmw_wait+0x166>
 8015c38:	f1ba 0f00 	cmp.w	sl, #0
 8015c3c:	d012      	beq.n	8015c64 <rmw_wait+0x1ac>
 8015c3e:	f8da 3000 	ldr.w	r3, [sl]
 8015c42:	b17b      	cbz	r3, 8015c64 <rmw_wait+0x1ac>
 8015c44:	2400      	movs	r4, #0
 8015c46:	f8da 3004 	ldr.w	r3, [sl, #4]
 8015c4a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015c4e:	f7f8 fccd 	bl	800e5ec <rmw_uxrce_find_static_input_buffer_by_owner>
 8015c52:	2800      	cmp	r0, #0
 8015c54:	d052      	beq.n	8015cfc <rmw_wait+0x244>
 8015c56:	f8da 3000 	ldr.w	r3, [sl]
 8015c5a:	3401      	adds	r4, #1
 8015c5c:	42a3      	cmp	r3, r4
 8015c5e:	f04f 0801 	mov.w	r8, #1
 8015c62:	d8f0      	bhi.n	8015c46 <rmw_wait+0x18e>
 8015c64:	b1e6      	cbz	r6, 8015ca0 <rmw_wait+0x1e8>
 8015c66:	6833      	ldr	r3, [r6, #0]
 8015c68:	b1d3      	cbz	r3, 8015ca0 <rmw_wait+0x1e8>
 8015c6a:	2400      	movs	r4, #0
 8015c6c:	6873      	ldr	r3, [r6, #4]
 8015c6e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015c72:	f7f8 fcbb 	bl	800e5ec <rmw_uxrce_find_static_input_buffer_by_owner>
 8015c76:	b160      	cbz	r0, 8015c92 <rmw_wait+0x1da>
 8015c78:	6833      	ldr	r3, [r6, #0]
 8015c7a:	3401      	adds	r4, #1
 8015c7c:	42a3      	cmp	r3, r4
 8015c7e:	d96c      	bls.n	8015d5a <rmw_wait+0x2a2>
 8015c80:	6873      	ldr	r3, [r6, #4]
 8015c82:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015c86:	f04f 0801 	mov.w	r8, #1
 8015c8a:	f7f8 fcaf 	bl	800e5ec <rmw_uxrce_find_static_input_buffer_by_owner>
 8015c8e:	2800      	cmp	r0, #0
 8015c90:	d1f2      	bne.n	8015c78 <rmw_wait+0x1c0>
 8015c92:	e9d6 3200 	ldrd	r3, r2, [r6]
 8015c96:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015c9a:	3401      	adds	r4, #1
 8015c9c:	42a3      	cmp	r3, r4
 8015c9e:	d8e5      	bhi.n	8015c6c <rmw_wait+0x1b4>
 8015ca0:	b1a7      	cbz	r7, 8015ccc <rmw_wait+0x214>
 8015ca2:	683c      	ldr	r4, [r7, #0]
 8015ca4:	b194      	cbz	r4, 8015ccc <rmw_wait+0x214>
 8015ca6:	2300      	movs	r3, #0
 8015ca8:	461d      	mov	r5, r3
 8015caa:	e004      	b.n	8015cb6 <rmw_wait+0x1fe>
 8015cac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8015cb0:	3301      	adds	r3, #1
 8015cb2:	42a3      	cmp	r3, r4
 8015cb4:	d00a      	beq.n	8015ccc <rmw_wait+0x214>
 8015cb6:	6878      	ldr	r0, [r7, #4]
 8015cb8:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8015cbc:	7c0a      	ldrb	r2, [r1, #16]
 8015cbe:	2a00      	cmp	r2, #0
 8015cc0:	d0f4      	beq.n	8015cac <rmw_wait+0x1f4>
 8015cc2:	3301      	adds	r3, #1
 8015cc4:	42a3      	cmp	r3, r4
 8015cc6:	740d      	strb	r5, [r1, #16]
 8015cc8:	4690      	mov	r8, r2
 8015cca:	d1f4      	bne.n	8015cb6 <rmw_wait+0x1fe>
 8015ccc:	f1b8 0f00 	cmp.w	r8, #0
 8015cd0:	d040      	beq.n	8015d54 <rmw_wait+0x29c>
 8015cd2:	2000      	movs	r0, #0
 8015cd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cd8:	68e0      	ldr	r0, [r4, #12]
 8015cda:	2100      	movs	r1, #0
 8015cdc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015ce0:	f7fa fe30 	bl	8010944 <uxr_run_session_timeout>
 8015ce4:	68a4      	ldr	r4, [r4, #8]
 8015ce6:	2c00      	cmp	r4, #0
 8015ce8:	d1f6      	bne.n	8015cd8 <rmw_wait+0x220>
 8015cea:	e78f      	b.n	8015c0c <rmw_wait+0x154>
 8015cec:	e9d5 3200 	ldrd	r3, r2, [r5]
 8015cf0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015cf4:	3401      	adds	r4, #1
 8015cf6:	42a3      	cmp	r3, r4
 8015cf8:	d891      	bhi.n	8015c1e <rmw_wait+0x166>
 8015cfa:	e79d      	b.n	8015c38 <rmw_wait+0x180>
 8015cfc:	e9da 3200 	ldrd	r3, r2, [sl]
 8015d00:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015d04:	3401      	adds	r4, #1
 8015d06:	429c      	cmp	r4, r3
 8015d08:	d39d      	bcc.n	8015c46 <rmw_wait+0x18e>
 8015d0a:	e7ab      	b.n	8015c64 <rmw_wait+0x1ac>
 8015d0c:	4690      	mov	r8, r2
 8015d0e:	e70b      	b.n	8015b28 <rmw_wait+0x70>
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	f47f aedb 	bne.w	8015acc <rmw_wait+0x14>
 8015d16:	2800      	cmp	r0, #0
 8015d18:	f47f aed8 	bne.w	8015acc <rmw_wait+0x14>
 8015d1c:	2f00      	cmp	r7, #0
 8015d1e:	d0d8      	beq.n	8015cd2 <rmw_wait+0x21a>
 8015d20:	2900      	cmp	r1, #0
 8015d22:	f47f aed6 	bne.w	8015ad2 <rmw_wait+0x1a>
 8015d26:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8015d2a:	e6fd      	b.n	8015b28 <rmw_wait+0x70>
 8015d2c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015d30:	4641      	mov	r1, r8
 8015d32:	f7fa fe21 	bl	8010978 <uxr_run_session_until_data>
 8015d36:	68a4      	ldr	r4, [r4, #8]
 8015d38:	2c00      	cmp	r4, #0
 8015d3a:	f47f af5e 	bne.w	8015bfa <rmw_wait+0x142>
 8015d3e:	e765      	b.n	8015c0c <rmw_wait+0x154>
 8015d40:	f1ba 0f00 	cmp.w	sl, #0
 8015d44:	d11e      	bne.n	8015d84 <rmw_wait+0x2cc>
 8015d46:	b35e      	cbz	r6, 8015da0 <rmw_wait+0x2e8>
 8015d48:	6833      	ldr	r3, [r6, #0]
 8015d4a:	46d0      	mov	r8, sl
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d18c      	bne.n	8015c6a <rmw_wait+0x1b2>
 8015d50:	2f00      	cmp	r7, #0
 8015d52:	d1a6      	bne.n	8015ca2 <rmw_wait+0x1ea>
 8015d54:	2002      	movs	r0, #2
 8015d56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d5a:	2f00      	cmp	r7, #0
 8015d5c:	d0b9      	beq.n	8015cd2 <rmw_wait+0x21a>
 8015d5e:	683c      	ldr	r4, [r7, #0]
 8015d60:	f04f 0801 	mov.w	r8, #1
 8015d64:	2c00      	cmp	r4, #0
 8015d66:	d19e      	bne.n	8015ca6 <rmw_wait+0x1ee>
 8015d68:	e7b3      	b.n	8015cd2 <rmw_wait+0x21a>
 8015d6a:	f1ba 0f00 	cmp.w	sl, #0
 8015d6e:	d0ea      	beq.n	8015d46 <rmw_wait+0x28e>
 8015d70:	f8da 3000 	ldr.w	r3, [sl]
 8015d74:	46a8      	mov	r8, r5
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	f47f af64 	bne.w	8015c44 <rmw_wait+0x18c>
 8015d7c:	2e00      	cmp	r6, #0
 8015d7e:	f47f af72 	bne.w	8015c66 <rmw_wait+0x1ae>
 8015d82:	e009      	b.n	8015d98 <rmw_wait+0x2e0>
 8015d84:	f8da 2000 	ldr.w	r2, [sl]
 8015d88:	4698      	mov	r8, r3
 8015d8a:	2a00      	cmp	r2, #0
 8015d8c:	f47f af5a 	bne.w	8015c44 <rmw_wait+0x18c>
 8015d90:	4690      	mov	r8, r2
 8015d92:	2e00      	cmp	r6, #0
 8015d94:	f47f af67 	bne.w	8015c66 <rmw_wait+0x1ae>
 8015d98:	46b0      	mov	r8, r6
 8015d9a:	2f00      	cmp	r7, #0
 8015d9c:	d181      	bne.n	8015ca2 <rmw_wait+0x1ea>
 8015d9e:	e7d9      	b.n	8015d54 <rmw_wait+0x29c>
 8015da0:	2f00      	cmp	r7, #0
 8015da2:	d0d7      	beq.n	8015d54 <rmw_wait+0x29c>
 8015da4:	683c      	ldr	r4, [r7, #0]
 8015da6:	46b0      	mov	r8, r6
 8015da8:	2c00      	cmp	r4, #0
 8015daa:	f47f af7c 	bne.w	8015ca6 <rmw_wait+0x1ee>
 8015dae:	e7d1      	b.n	8015d54 <rmw_wait+0x29c>
 8015db0:	000f4240 	.word	0x000f4240
 8015db4:	2000d068 	.word	0x2000d068

08015db8 <rmw_create_wait_set>:
 8015db8:	b508      	push	{r3, lr}
 8015dba:	4803      	ldr	r0, [pc, #12]	; (8015dc8 <rmw_create_wait_set+0x10>)
 8015dbc:	f7ff f8d0 	bl	8014f60 <get_memory>
 8015dc0:	b108      	cbz	r0, 8015dc6 <rmw_create_wait_set+0xe>
 8015dc2:	68c0      	ldr	r0, [r0, #12]
 8015dc4:	3010      	adds	r0, #16
 8015dc6:	bd08      	pop	{r3, pc}
 8015dc8:	2000e840 	.word	0x2000e840

08015dcc <rmw_destroy_wait_set>:
 8015dcc:	b508      	push	{r3, lr}
 8015dce:	4b08      	ldr	r3, [pc, #32]	; (8015df0 <rmw_destroy_wait_set+0x24>)
 8015dd0:	6819      	ldr	r1, [r3, #0]
 8015dd2:	b911      	cbnz	r1, 8015dda <rmw_destroy_wait_set+0xe>
 8015dd4:	e00a      	b.n	8015dec <rmw_destroy_wait_set+0x20>
 8015dd6:	6889      	ldr	r1, [r1, #8]
 8015dd8:	b141      	cbz	r1, 8015dec <rmw_destroy_wait_set+0x20>
 8015dda:	68cb      	ldr	r3, [r1, #12]
 8015ddc:	3310      	adds	r3, #16
 8015dde:	4298      	cmp	r0, r3
 8015de0:	d1f9      	bne.n	8015dd6 <rmw_destroy_wait_set+0xa>
 8015de2:	4803      	ldr	r0, [pc, #12]	; (8015df0 <rmw_destroy_wait_set+0x24>)
 8015de4:	f7ff f8cc 	bl	8014f80 <put_memory>
 8015de8:	2000      	movs	r0, #0
 8015dea:	bd08      	pop	{r3, pc}
 8015dec:	2001      	movs	r0, #1
 8015dee:	bd08      	pop	{r3, pc}
 8015df0:	2000e840 	.word	0x2000e840

08015df4 <rmw_uros_epoch_nanos>:
 8015df4:	4b05      	ldr	r3, [pc, #20]	; (8015e0c <rmw_uros_epoch_nanos+0x18>)
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	b123      	cbz	r3, 8015e04 <rmw_uros_epoch_nanos+0x10>
 8015dfa:	68d8      	ldr	r0, [r3, #12]
 8015dfc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015e00:	f7fa ba14 	b.w	801022c <uxr_epoch_nanos>
 8015e04:	2000      	movs	r0, #0
 8015e06:	2100      	movs	r1, #0
 8015e08:	4770      	bx	lr
 8015e0a:	bf00      	nop
 8015e0c:	2000d068 	.word	0x2000d068

08015e10 <ucdr_serialize_endian_array_char>:
 8015e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e14:	4619      	mov	r1, r3
 8015e16:	461e      	mov	r6, r3
 8015e18:	4690      	mov	r8, r2
 8015e1a:	4604      	mov	r4, r0
 8015e1c:	f7f9 fcda 	bl	800f7d4 <ucdr_check_buffer_available_for>
 8015e20:	b9e0      	cbnz	r0, 8015e5c <ucdr_serialize_endian_array_char+0x4c>
 8015e22:	4637      	mov	r7, r6
 8015e24:	e009      	b.n	8015e3a <ucdr_serialize_endian_array_char+0x2a>
 8015e26:	68a0      	ldr	r0, [r4, #8]
 8015e28:	f002 fc3d 	bl	80186a6 <memcpy>
 8015e2c:	68a2      	ldr	r2, [r4, #8]
 8015e2e:	6923      	ldr	r3, [r4, #16]
 8015e30:	442a      	add	r2, r5
 8015e32:	442b      	add	r3, r5
 8015e34:	1b7f      	subs	r7, r7, r5
 8015e36:	60a2      	str	r2, [r4, #8]
 8015e38:	6123      	str	r3, [r4, #16]
 8015e3a:	2201      	movs	r2, #1
 8015e3c:	4639      	mov	r1, r7
 8015e3e:	4620      	mov	r0, r4
 8015e40:	f7f9 fd4e 	bl	800f8e0 <ucdr_check_final_buffer_behavior_array>
 8015e44:	1bf1      	subs	r1, r6, r7
 8015e46:	4441      	add	r1, r8
 8015e48:	4605      	mov	r5, r0
 8015e4a:	4602      	mov	r2, r0
 8015e4c:	2800      	cmp	r0, #0
 8015e4e:	d1ea      	bne.n	8015e26 <ucdr_serialize_endian_array_char+0x16>
 8015e50:	2301      	movs	r3, #1
 8015e52:	7da0      	ldrb	r0, [r4, #22]
 8015e54:	7563      	strb	r3, [r4, #21]
 8015e56:	4058      	eors	r0, r3
 8015e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e5c:	4632      	mov	r2, r6
 8015e5e:	68a0      	ldr	r0, [r4, #8]
 8015e60:	4641      	mov	r1, r8
 8015e62:	f002 fc20 	bl	80186a6 <memcpy>
 8015e66:	68a2      	ldr	r2, [r4, #8]
 8015e68:	6923      	ldr	r3, [r4, #16]
 8015e6a:	4432      	add	r2, r6
 8015e6c:	4433      	add	r3, r6
 8015e6e:	60a2      	str	r2, [r4, #8]
 8015e70:	6123      	str	r3, [r4, #16]
 8015e72:	e7ed      	b.n	8015e50 <ucdr_serialize_endian_array_char+0x40>

08015e74 <ucdr_deserialize_endian_array_char>:
 8015e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e78:	4619      	mov	r1, r3
 8015e7a:	461e      	mov	r6, r3
 8015e7c:	4690      	mov	r8, r2
 8015e7e:	4604      	mov	r4, r0
 8015e80:	f7f9 fca8 	bl	800f7d4 <ucdr_check_buffer_available_for>
 8015e84:	b9e0      	cbnz	r0, 8015ec0 <ucdr_deserialize_endian_array_char+0x4c>
 8015e86:	4637      	mov	r7, r6
 8015e88:	e009      	b.n	8015e9e <ucdr_deserialize_endian_array_char+0x2a>
 8015e8a:	68a1      	ldr	r1, [r4, #8]
 8015e8c:	f002 fc0b 	bl	80186a6 <memcpy>
 8015e90:	68a2      	ldr	r2, [r4, #8]
 8015e92:	6923      	ldr	r3, [r4, #16]
 8015e94:	442a      	add	r2, r5
 8015e96:	442b      	add	r3, r5
 8015e98:	1b7f      	subs	r7, r7, r5
 8015e9a:	60a2      	str	r2, [r4, #8]
 8015e9c:	6123      	str	r3, [r4, #16]
 8015e9e:	2201      	movs	r2, #1
 8015ea0:	4639      	mov	r1, r7
 8015ea2:	4620      	mov	r0, r4
 8015ea4:	f7f9 fd1c 	bl	800f8e0 <ucdr_check_final_buffer_behavior_array>
 8015ea8:	4605      	mov	r5, r0
 8015eaa:	1bf0      	subs	r0, r6, r7
 8015eac:	4440      	add	r0, r8
 8015eae:	462a      	mov	r2, r5
 8015eb0:	2d00      	cmp	r5, #0
 8015eb2:	d1ea      	bne.n	8015e8a <ucdr_deserialize_endian_array_char+0x16>
 8015eb4:	2301      	movs	r3, #1
 8015eb6:	7da0      	ldrb	r0, [r4, #22]
 8015eb8:	7563      	strb	r3, [r4, #21]
 8015eba:	4058      	eors	r0, r3
 8015ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ec0:	4632      	mov	r2, r6
 8015ec2:	68a1      	ldr	r1, [r4, #8]
 8015ec4:	4640      	mov	r0, r8
 8015ec6:	f002 fbee 	bl	80186a6 <memcpy>
 8015eca:	68a2      	ldr	r2, [r4, #8]
 8015ecc:	6923      	ldr	r3, [r4, #16]
 8015ece:	4432      	add	r2, r6
 8015ed0:	4433      	add	r3, r6
 8015ed2:	60a2      	str	r2, [r4, #8]
 8015ed4:	6123      	str	r3, [r4, #16]
 8015ed6:	e7ed      	b.n	8015eb4 <ucdr_deserialize_endian_array_char+0x40>

08015ed8 <ucdr_serialize_array_uint8_t>:
 8015ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015edc:	4688      	mov	r8, r1
 8015ede:	4611      	mov	r1, r2
 8015ee0:	4616      	mov	r6, r2
 8015ee2:	4604      	mov	r4, r0
 8015ee4:	f7f9 fc76 	bl	800f7d4 <ucdr_check_buffer_available_for>
 8015ee8:	b9e0      	cbnz	r0, 8015f24 <ucdr_serialize_array_uint8_t+0x4c>
 8015eea:	4637      	mov	r7, r6
 8015eec:	e009      	b.n	8015f02 <ucdr_serialize_array_uint8_t+0x2a>
 8015eee:	68a0      	ldr	r0, [r4, #8]
 8015ef0:	f002 fbd9 	bl	80186a6 <memcpy>
 8015ef4:	68a2      	ldr	r2, [r4, #8]
 8015ef6:	6923      	ldr	r3, [r4, #16]
 8015ef8:	442a      	add	r2, r5
 8015efa:	442b      	add	r3, r5
 8015efc:	1b7f      	subs	r7, r7, r5
 8015efe:	60a2      	str	r2, [r4, #8]
 8015f00:	6123      	str	r3, [r4, #16]
 8015f02:	2201      	movs	r2, #1
 8015f04:	4639      	mov	r1, r7
 8015f06:	4620      	mov	r0, r4
 8015f08:	f7f9 fcea 	bl	800f8e0 <ucdr_check_final_buffer_behavior_array>
 8015f0c:	1bf1      	subs	r1, r6, r7
 8015f0e:	4441      	add	r1, r8
 8015f10:	4605      	mov	r5, r0
 8015f12:	4602      	mov	r2, r0
 8015f14:	2800      	cmp	r0, #0
 8015f16:	d1ea      	bne.n	8015eee <ucdr_serialize_array_uint8_t+0x16>
 8015f18:	2301      	movs	r3, #1
 8015f1a:	7da0      	ldrb	r0, [r4, #22]
 8015f1c:	7563      	strb	r3, [r4, #21]
 8015f1e:	4058      	eors	r0, r3
 8015f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f24:	4632      	mov	r2, r6
 8015f26:	68a0      	ldr	r0, [r4, #8]
 8015f28:	4641      	mov	r1, r8
 8015f2a:	f002 fbbc 	bl	80186a6 <memcpy>
 8015f2e:	68a3      	ldr	r3, [r4, #8]
 8015f30:	6922      	ldr	r2, [r4, #16]
 8015f32:	4433      	add	r3, r6
 8015f34:	4432      	add	r2, r6
 8015f36:	60a3      	str	r3, [r4, #8]
 8015f38:	6122      	str	r2, [r4, #16]
 8015f3a:	e7ed      	b.n	8015f18 <ucdr_serialize_array_uint8_t+0x40>

08015f3c <ucdr_serialize_endian_array_uint8_t>:
 8015f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f40:	4619      	mov	r1, r3
 8015f42:	461e      	mov	r6, r3
 8015f44:	4690      	mov	r8, r2
 8015f46:	4604      	mov	r4, r0
 8015f48:	f7f9 fc44 	bl	800f7d4 <ucdr_check_buffer_available_for>
 8015f4c:	b9e0      	cbnz	r0, 8015f88 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8015f4e:	4637      	mov	r7, r6
 8015f50:	e009      	b.n	8015f66 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8015f52:	68a0      	ldr	r0, [r4, #8]
 8015f54:	f002 fba7 	bl	80186a6 <memcpy>
 8015f58:	68a2      	ldr	r2, [r4, #8]
 8015f5a:	6923      	ldr	r3, [r4, #16]
 8015f5c:	442a      	add	r2, r5
 8015f5e:	442b      	add	r3, r5
 8015f60:	1b7f      	subs	r7, r7, r5
 8015f62:	60a2      	str	r2, [r4, #8]
 8015f64:	6123      	str	r3, [r4, #16]
 8015f66:	2201      	movs	r2, #1
 8015f68:	4639      	mov	r1, r7
 8015f6a:	4620      	mov	r0, r4
 8015f6c:	f7f9 fcb8 	bl	800f8e0 <ucdr_check_final_buffer_behavior_array>
 8015f70:	1bf1      	subs	r1, r6, r7
 8015f72:	4441      	add	r1, r8
 8015f74:	4605      	mov	r5, r0
 8015f76:	4602      	mov	r2, r0
 8015f78:	2800      	cmp	r0, #0
 8015f7a:	d1ea      	bne.n	8015f52 <ucdr_serialize_endian_array_uint8_t+0x16>
 8015f7c:	2301      	movs	r3, #1
 8015f7e:	7da0      	ldrb	r0, [r4, #22]
 8015f80:	7563      	strb	r3, [r4, #21]
 8015f82:	4058      	eors	r0, r3
 8015f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f88:	4632      	mov	r2, r6
 8015f8a:	68a0      	ldr	r0, [r4, #8]
 8015f8c:	4641      	mov	r1, r8
 8015f8e:	f002 fb8a 	bl	80186a6 <memcpy>
 8015f92:	68a2      	ldr	r2, [r4, #8]
 8015f94:	6923      	ldr	r3, [r4, #16]
 8015f96:	4432      	add	r2, r6
 8015f98:	4433      	add	r3, r6
 8015f9a:	60a2      	str	r2, [r4, #8]
 8015f9c:	6123      	str	r3, [r4, #16]
 8015f9e:	e7ed      	b.n	8015f7c <ucdr_serialize_endian_array_uint8_t+0x40>

08015fa0 <ucdr_deserialize_array_uint8_t>:
 8015fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fa4:	4688      	mov	r8, r1
 8015fa6:	4611      	mov	r1, r2
 8015fa8:	4616      	mov	r6, r2
 8015faa:	4604      	mov	r4, r0
 8015fac:	f7f9 fc12 	bl	800f7d4 <ucdr_check_buffer_available_for>
 8015fb0:	b9e0      	cbnz	r0, 8015fec <ucdr_deserialize_array_uint8_t+0x4c>
 8015fb2:	4637      	mov	r7, r6
 8015fb4:	e009      	b.n	8015fca <ucdr_deserialize_array_uint8_t+0x2a>
 8015fb6:	68a1      	ldr	r1, [r4, #8]
 8015fb8:	f002 fb75 	bl	80186a6 <memcpy>
 8015fbc:	68a2      	ldr	r2, [r4, #8]
 8015fbe:	6923      	ldr	r3, [r4, #16]
 8015fc0:	442a      	add	r2, r5
 8015fc2:	442b      	add	r3, r5
 8015fc4:	1b7f      	subs	r7, r7, r5
 8015fc6:	60a2      	str	r2, [r4, #8]
 8015fc8:	6123      	str	r3, [r4, #16]
 8015fca:	2201      	movs	r2, #1
 8015fcc:	4639      	mov	r1, r7
 8015fce:	4620      	mov	r0, r4
 8015fd0:	f7f9 fc86 	bl	800f8e0 <ucdr_check_final_buffer_behavior_array>
 8015fd4:	4605      	mov	r5, r0
 8015fd6:	1bf0      	subs	r0, r6, r7
 8015fd8:	4440      	add	r0, r8
 8015fda:	462a      	mov	r2, r5
 8015fdc:	2d00      	cmp	r5, #0
 8015fde:	d1ea      	bne.n	8015fb6 <ucdr_deserialize_array_uint8_t+0x16>
 8015fe0:	2301      	movs	r3, #1
 8015fe2:	7da0      	ldrb	r0, [r4, #22]
 8015fe4:	7563      	strb	r3, [r4, #21]
 8015fe6:	4058      	eors	r0, r3
 8015fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fec:	4632      	mov	r2, r6
 8015fee:	68a1      	ldr	r1, [r4, #8]
 8015ff0:	4640      	mov	r0, r8
 8015ff2:	f002 fb58 	bl	80186a6 <memcpy>
 8015ff6:	68a3      	ldr	r3, [r4, #8]
 8015ff8:	6922      	ldr	r2, [r4, #16]
 8015ffa:	4433      	add	r3, r6
 8015ffc:	4432      	add	r2, r6
 8015ffe:	60a3      	str	r3, [r4, #8]
 8016000:	6122      	str	r2, [r4, #16]
 8016002:	e7ed      	b.n	8015fe0 <ucdr_deserialize_array_uint8_t+0x40>

08016004 <ucdr_deserialize_endian_array_uint8_t>:
 8016004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016008:	4619      	mov	r1, r3
 801600a:	461e      	mov	r6, r3
 801600c:	4690      	mov	r8, r2
 801600e:	4604      	mov	r4, r0
 8016010:	f7f9 fbe0 	bl	800f7d4 <ucdr_check_buffer_available_for>
 8016014:	b9e0      	cbnz	r0, 8016050 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8016016:	4637      	mov	r7, r6
 8016018:	e009      	b.n	801602e <ucdr_deserialize_endian_array_uint8_t+0x2a>
 801601a:	68a1      	ldr	r1, [r4, #8]
 801601c:	f002 fb43 	bl	80186a6 <memcpy>
 8016020:	68a2      	ldr	r2, [r4, #8]
 8016022:	6923      	ldr	r3, [r4, #16]
 8016024:	442a      	add	r2, r5
 8016026:	442b      	add	r3, r5
 8016028:	1b7f      	subs	r7, r7, r5
 801602a:	60a2      	str	r2, [r4, #8]
 801602c:	6123      	str	r3, [r4, #16]
 801602e:	2201      	movs	r2, #1
 8016030:	4639      	mov	r1, r7
 8016032:	4620      	mov	r0, r4
 8016034:	f7f9 fc54 	bl	800f8e0 <ucdr_check_final_buffer_behavior_array>
 8016038:	4605      	mov	r5, r0
 801603a:	1bf0      	subs	r0, r6, r7
 801603c:	4440      	add	r0, r8
 801603e:	462a      	mov	r2, r5
 8016040:	2d00      	cmp	r5, #0
 8016042:	d1ea      	bne.n	801601a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8016044:	2301      	movs	r3, #1
 8016046:	7da0      	ldrb	r0, [r4, #22]
 8016048:	7563      	strb	r3, [r4, #21]
 801604a:	4058      	eors	r0, r3
 801604c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016050:	4632      	mov	r2, r6
 8016052:	68a1      	ldr	r1, [r4, #8]
 8016054:	4640      	mov	r0, r8
 8016056:	f002 fb26 	bl	80186a6 <memcpy>
 801605a:	68a2      	ldr	r2, [r4, #8]
 801605c:	6923      	ldr	r3, [r4, #16]
 801605e:	4432      	add	r2, r6
 8016060:	4433      	add	r3, r6
 8016062:	60a2      	str	r2, [r4, #8]
 8016064:	6123      	str	r3, [r4, #16]
 8016066:	e7ed      	b.n	8016044 <ucdr_deserialize_endian_array_uint8_t+0x40>

08016068 <ucdr_serialize_sequence_char>:
 8016068:	b570      	push	{r4, r5, r6, lr}
 801606a:	460e      	mov	r6, r1
 801606c:	4615      	mov	r5, r2
 801606e:	7d01      	ldrb	r1, [r0, #20]
 8016070:	4604      	mov	r4, r0
 8016072:	f7f8 ff05 	bl	800ee80 <ucdr_serialize_endian_uint32_t>
 8016076:	b90d      	cbnz	r5, 801607c <ucdr_serialize_sequence_char+0x14>
 8016078:	2001      	movs	r0, #1
 801607a:	bd70      	pop	{r4, r5, r6, pc}
 801607c:	7d21      	ldrb	r1, [r4, #20]
 801607e:	462b      	mov	r3, r5
 8016080:	4632      	mov	r2, r6
 8016082:	4620      	mov	r0, r4
 8016084:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016088:	f7ff bec2 	b.w	8015e10 <ucdr_serialize_endian_array_char>

0801608c <ucdr_deserialize_sequence_char>:
 801608c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016090:	461d      	mov	r5, r3
 8016092:	4616      	mov	r6, r2
 8016094:	460f      	mov	r7, r1
 8016096:	461a      	mov	r2, r3
 8016098:	7d01      	ldrb	r1, [r0, #20]
 801609a:	4604      	mov	r4, r0
 801609c:	f7f9 f818 	bl	800f0d0 <ucdr_deserialize_endian_uint32_t>
 80160a0:	682b      	ldr	r3, [r5, #0]
 80160a2:	429e      	cmp	r6, r3
 80160a4:	bf3c      	itt	cc
 80160a6:	2201      	movcc	r2, #1
 80160a8:	75a2      	strbcc	r2, [r4, #22]
 80160aa:	b913      	cbnz	r3, 80160b2 <ucdr_deserialize_sequence_char+0x26>
 80160ac:	2001      	movs	r0, #1
 80160ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160b2:	7d21      	ldrb	r1, [r4, #20]
 80160b4:	463a      	mov	r2, r7
 80160b6:	4620      	mov	r0, r4
 80160b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80160bc:	f7ff beda 	b.w	8015e74 <ucdr_deserialize_endian_array_char>

080160c0 <ucdr_serialize_sequence_uint8_t>:
 80160c0:	b570      	push	{r4, r5, r6, lr}
 80160c2:	460e      	mov	r6, r1
 80160c4:	4615      	mov	r5, r2
 80160c6:	7d01      	ldrb	r1, [r0, #20]
 80160c8:	4604      	mov	r4, r0
 80160ca:	f7f8 fed9 	bl	800ee80 <ucdr_serialize_endian_uint32_t>
 80160ce:	b90d      	cbnz	r5, 80160d4 <ucdr_serialize_sequence_uint8_t+0x14>
 80160d0:	2001      	movs	r0, #1
 80160d2:	bd70      	pop	{r4, r5, r6, pc}
 80160d4:	7d21      	ldrb	r1, [r4, #20]
 80160d6:	462b      	mov	r3, r5
 80160d8:	4632      	mov	r2, r6
 80160da:	4620      	mov	r0, r4
 80160dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80160e0:	f7ff bf2c 	b.w	8015f3c <ucdr_serialize_endian_array_uint8_t>

080160e4 <ucdr_deserialize_sequence_uint8_t>:
 80160e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160e8:	461d      	mov	r5, r3
 80160ea:	4616      	mov	r6, r2
 80160ec:	460f      	mov	r7, r1
 80160ee:	461a      	mov	r2, r3
 80160f0:	7d01      	ldrb	r1, [r0, #20]
 80160f2:	4604      	mov	r4, r0
 80160f4:	f7f8 ffec 	bl	800f0d0 <ucdr_deserialize_endian_uint32_t>
 80160f8:	682b      	ldr	r3, [r5, #0]
 80160fa:	429e      	cmp	r6, r3
 80160fc:	bf3c      	itt	cc
 80160fe:	2201      	movcc	r2, #1
 8016100:	75a2      	strbcc	r2, [r4, #22]
 8016102:	b913      	cbnz	r3, 801610a <ucdr_deserialize_sequence_uint8_t+0x26>
 8016104:	2001      	movs	r0, #1
 8016106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801610a:	7d21      	ldrb	r1, [r4, #20]
 801610c:	463a      	mov	r2, r7
 801610e:	4620      	mov	r0, r4
 8016110:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016114:	f7ff bf76 	b.w	8016004 <ucdr_deserialize_endian_array_uint8_t>

08016118 <ucdr_serialize_string>:
 8016118:	b510      	push	{r4, lr}
 801611a:	b082      	sub	sp, #8
 801611c:	4604      	mov	r4, r0
 801611e:	4608      	mov	r0, r1
 8016120:	9101      	str	r1, [sp, #4]
 8016122:	f7ea f867 	bl	80001f4 <strlen>
 8016126:	9901      	ldr	r1, [sp, #4]
 8016128:	4602      	mov	r2, r0
 801612a:	3201      	adds	r2, #1
 801612c:	4620      	mov	r0, r4
 801612e:	b002      	add	sp, #8
 8016130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016134:	f7ff bf98 	b.w	8016068 <ucdr_serialize_sequence_char>

08016138 <ucdr_deserialize_string>:
 8016138:	b500      	push	{lr}
 801613a:	b083      	sub	sp, #12
 801613c:	ab01      	add	r3, sp, #4
 801613e:	f7ff ffa5 	bl	801608c <ucdr_deserialize_sequence_char>
 8016142:	b003      	add	sp, #12
 8016144:	f85d fb04 	ldr.w	pc, [sp], #4

08016148 <get_custom_error>:
 8016148:	4b01      	ldr	r3, [pc, #4]	; (8016150 <get_custom_error+0x8>)
 801614a:	7818      	ldrb	r0, [r3, #0]
 801614c:	4770      	bx	lr
 801614e:	bf00      	nop
 8016150:	20009d20 	.word	0x20009d20

08016154 <recv_custom_msg>:
 8016154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016158:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 801615c:	b089      	sub	sp, #36	; 0x24
 801615e:	2600      	movs	r6, #0
 8016160:	4604      	mov	r4, r0
 8016162:	9305      	str	r3, [sp, #20]
 8016164:	468a      	mov	sl, r1
 8016166:	4693      	mov	fp, r2
 8016168:	f88d 601e 	strb.w	r6, [sp, #30]
 801616c:	b325      	cbz	r5, 80161b8 <recv_custom_msg+0x64>
 801616e:	f200 2902 	addw	r9, r0, #514	; 0x202
 8016172:	f10d 081f 	add.w	r8, sp, #31
 8016176:	af05      	add	r7, sp, #20
 8016178:	f10d 061e 	add.w	r6, sp, #30
 801617c:	f44f 7500 	mov.w	r5, #512	; 0x200
 8016180:	e002      	b.n	8016188 <recv_custom_msg+0x34>
 8016182:	9b05      	ldr	r3, [sp, #20]
 8016184:	2b00      	cmp	r3, #0
 8016186:	dd0f      	ble.n	80161a8 <recv_custom_msg+0x54>
 8016188:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801618c:	e9cd 5600 	strd	r5, r6, [sp]
 8016190:	4623      	mov	r3, r4
 8016192:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8016196:	4622      	mov	r2, r4
 8016198:	4648      	mov	r0, r9
 801619a:	f000 ffc9 	bl	8017130 <uxr_read_framed_msg>
 801619e:	2800      	cmp	r0, #0
 80161a0:	d0ef      	beq.n	8016182 <recv_custom_msg+0x2e>
 80161a2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80161a6:	b1b3      	cbz	r3, 80161d6 <recv_custom_msg+0x82>
 80161a8:	4b0f      	ldr	r3, [pc, #60]	; (80161e8 <recv_custom_msg+0x94>)
 80161aa:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80161ae:	701a      	strb	r2, [r3, #0]
 80161b0:	2000      	movs	r0, #0
 80161b2:	b009      	add	sp, #36	; 0x24
 80161b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161b8:	f10d 021f 	add.w	r2, sp, #31
 80161bc:	9200      	str	r2, [sp, #0]
 80161be:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 80161c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80161c6:	4601      	mov	r1, r0
 80161c8:	47a8      	blx	r5
 80161ca:	2800      	cmp	r0, #0
 80161cc:	d0ec      	beq.n	80161a8 <recv_custom_msg+0x54>
 80161ce:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d1e8      	bne.n	80161a8 <recv_custom_msg+0x54>
 80161d6:	f8cb 0000 	str.w	r0, [fp]
 80161da:	2001      	movs	r0, #1
 80161dc:	f8ca 4000 	str.w	r4, [sl]
 80161e0:	b009      	add	sp, #36	; 0x24
 80161e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161e6:	bf00      	nop
 80161e8:	20009d20 	.word	0x20009d20

080161ec <send_custom_msg>:
 80161ec:	b570      	push	{r4, r5, r6, lr}
 80161ee:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 80161f2:	b086      	sub	sp, #24
 80161f4:	4616      	mov	r6, r2
 80161f6:	b975      	cbnz	r5, 8016216 <send_custom_msg+0x2a>
 80161f8:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 80161fc:	f10d 0317 	add.w	r3, sp, #23
 8016200:	47a0      	blx	r4
 8016202:	b108      	cbz	r0, 8016208 <send_custom_msg+0x1c>
 8016204:	42b0      	cmp	r0, r6
 8016206:	d015      	beq.n	8016234 <send_custom_msg+0x48>
 8016208:	4b0c      	ldr	r3, [pc, #48]	; (801623c <send_custom_msg+0x50>)
 801620a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801620e:	701a      	strb	r2, [r3, #0]
 8016210:	2000      	movs	r0, #0
 8016212:	b006      	add	sp, #24
 8016214:	bd70      	pop	{r4, r5, r6, pc}
 8016216:	460b      	mov	r3, r1
 8016218:	2200      	movs	r2, #0
 801621a:	f10d 0117 	add.w	r1, sp, #23
 801621e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8016222:	9600      	str	r6, [sp, #0]
 8016224:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8016228:	4602      	mov	r2, r0
 801622a:	f200 2002 	addw	r0, r0, #514	; 0x202
 801622e:	f000 fd97 	bl	8016d60 <uxr_write_framed_msg>
 8016232:	e7e6      	b.n	8016202 <send_custom_msg+0x16>
 8016234:	2001      	movs	r0, #1
 8016236:	b006      	add	sp, #24
 8016238:	bd70      	pop	{r4, r5, r6, pc}
 801623a:	bf00      	nop
 801623c:	20009d20 	.word	0x20009d20

08016240 <uxr_set_custom_transport_callbacks>:
 8016240:	b430      	push	{r4, r5}
 8016242:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 8016246:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 801624a:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 801624e:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8016252:	bc30      	pop	{r4, r5}
 8016254:	4770      	bx	lr
 8016256:	bf00      	nop

08016258 <uxr_init_custom_transport>:
 8016258:	b538      	push	{r3, r4, r5, lr}
 801625a:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 801625e:	b303      	cbz	r3, 80162a2 <uxr_init_custom_transport+0x4a>
 8016260:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8016264:	4604      	mov	r4, r0
 8016266:	b1e2      	cbz	r2, 80162a2 <uxr_init_custom_transport+0x4a>
 8016268:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 801626c:	b1ca      	cbz	r2, 80162a2 <uxr_init_custom_transport+0x4a>
 801626e:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8016272:	b1b2      	cbz	r2, 80162a2 <uxr_init_custom_transport+0x4a>
 8016274:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8016278:	4798      	blx	r3
 801627a:	4605      	mov	r5, r0
 801627c:	b188      	cbz	r0, 80162a2 <uxr_init_custom_transport+0x4a>
 801627e:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8016282:	b98b      	cbnz	r3, 80162a8 <uxr_init_custom_transport+0x50>
 8016284:	480b      	ldr	r0, [pc, #44]	; (80162b4 <uxr_init_custom_transport+0x5c>)
 8016286:	490c      	ldr	r1, [pc, #48]	; (80162b8 <uxr_init_custom_transport+0x60>)
 8016288:	4a0c      	ldr	r2, [pc, #48]	; (80162bc <uxr_init_custom_transport+0x64>)
 801628a:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 801628e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016292:	e9c4 019f 	strd	r0, r1, [r4, #636]	; 0x27c
 8016296:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 801629a:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 801629e:	4628      	mov	r0, r5
 80162a0:	bd38      	pop	{r3, r4, r5, pc}
 80162a2:	2500      	movs	r5, #0
 80162a4:	4628      	mov	r0, r5
 80162a6:	bd38      	pop	{r3, r4, r5, pc}
 80162a8:	2100      	movs	r1, #0
 80162aa:	f204 2002 	addw	r0, r4, #514	; 0x202
 80162ae:	f000 fd51 	bl	8016d54 <uxr_init_framing_io>
 80162b2:	e7e7      	b.n	8016284 <uxr_init_custom_transport+0x2c>
 80162b4:	080161ed 	.word	0x080161ed
 80162b8:	08016155 	.word	0x08016155
 80162bc:	08016149 	.word	0x08016149

080162c0 <uxr_close_custom_transport>:
 80162c0:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 80162c4:	4718      	bx	r3
 80162c6:	bf00      	nop

080162c8 <uxr_init_input_best_effort_stream>:
 80162c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80162cc:	8003      	strh	r3, [r0, #0]
 80162ce:	4770      	bx	lr

080162d0 <uxr_reset_input_best_effort_stream>:
 80162d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80162d4:	8003      	strh	r3, [r0, #0]
 80162d6:	4770      	bx	lr

080162d8 <uxr_receive_best_effort_message>:
 80162d8:	b538      	push	{r3, r4, r5, lr}
 80162da:	4604      	mov	r4, r0
 80162dc:	8800      	ldrh	r0, [r0, #0]
 80162de:	460d      	mov	r5, r1
 80162e0:	f000 fd20 	bl	8016d24 <uxr_seq_num_cmp>
 80162e4:	4603      	mov	r3, r0
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80162ec:	bfb8      	it	lt
 80162ee:	8025      	strhlt	r5, [r4, #0]
 80162f0:	bd38      	pop	{r3, r4, r5, pc}
 80162f2:	bf00      	nop

080162f4 <on_full_input_buffer>:
 80162f4:	b570      	push	{r4, r5, r6, lr}
 80162f6:	6802      	ldr	r2, [r0, #0]
 80162f8:	460d      	mov	r5, r1
 80162fa:	6809      	ldr	r1, [r1, #0]
 80162fc:	686c      	ldr	r4, [r5, #4]
 80162fe:	1a53      	subs	r3, r2, r1
 8016300:	4606      	mov	r6, r0
 8016302:	8928      	ldrh	r0, [r5, #8]
 8016304:	fbb4 f4f0 	udiv	r4, r4, r0
 8016308:	fbb3 f3f4 	udiv	r3, r3, r4
 801630c:	3301      	adds	r3, #1
 801630e:	b29b      	uxth	r3, r3
 8016310:	fbb3 f2f0 	udiv	r2, r3, r0
 8016314:	fb00 3312 	mls	r3, r0, r2, r3
 8016318:	b29b      	uxth	r3, r3
 801631a:	fb04 f403 	mul.w	r4, r4, r3
 801631e:	1d23      	adds	r3, r4, #4
 8016320:	440b      	add	r3, r1
 8016322:	7d28      	ldrb	r0, [r5, #20]
 8016324:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8016328:	b110      	cbz	r0, 8016330 <on_full_input_buffer+0x3c>
 801632a:	2000      	movs	r0, #0
 801632c:	f843 0c04 	str.w	r0, [r3, #-4]
 8016330:	2a03      	cmp	r2, #3
 8016332:	d801      	bhi.n	8016338 <on_full_input_buffer+0x44>
 8016334:	2001      	movs	r0, #1
 8016336:	bd70      	pop	{r4, r5, r6, pc}
 8016338:	3408      	adds	r4, #8
 801633a:	6933      	ldr	r3, [r6, #16]
 801633c:	4421      	add	r1, r4
 801633e:	4630      	mov	r0, r6
 8016340:	3a04      	subs	r2, #4
 8016342:	f7f9 fa91 	bl	800f868 <ucdr_init_buffer_origin>
 8016346:	4630      	mov	r0, r6
 8016348:	4902      	ldr	r1, [pc, #8]	; (8016354 <on_full_input_buffer+0x60>)
 801634a:	462a      	mov	r2, r5
 801634c:	f7f9 fa6a 	bl	800f824 <ucdr_set_on_full_buffer_callback>
 8016350:	2000      	movs	r0, #0
 8016352:	bd70      	pop	{r4, r5, r6, pc}
 8016354:	080162f5 	.word	0x080162f5

08016358 <uxr_init_input_reliable_stream>:
 8016358:	b470      	push	{r4, r5, r6}
 801635a:	9c03      	ldr	r4, [sp, #12]
 801635c:	6001      	str	r1, [r0, #0]
 801635e:	2600      	movs	r6, #0
 8016360:	8103      	strh	r3, [r0, #8]
 8016362:	6042      	str	r2, [r0, #4]
 8016364:	6104      	str	r4, [r0, #16]
 8016366:	7506      	strb	r6, [r0, #20]
 8016368:	b1ab      	cbz	r3, 8016396 <uxr_init_input_reliable_stream+0x3e>
 801636a:	600e      	str	r6, [r1, #0]
 801636c:	8901      	ldrh	r1, [r0, #8]
 801636e:	2901      	cmp	r1, #1
 8016370:	d911      	bls.n	8016396 <uxr_init_input_reliable_stream+0x3e>
 8016372:	2201      	movs	r2, #1
 8016374:	e9d0 5400 	ldrd	r5, r4, [r0]
 8016378:	fbb2 f3f1 	udiv	r3, r2, r1
 801637c:	fb01 2313 	mls	r3, r1, r3, r2
 8016380:	b29b      	uxth	r3, r3
 8016382:	fbb4 f1f1 	udiv	r1, r4, r1
 8016386:	fb03 f301 	mul.w	r3, r3, r1
 801638a:	3201      	adds	r2, #1
 801638c:	50ee      	str	r6, [r5, r3]
 801638e:	8901      	ldrh	r1, [r0, #8]
 8016390:	b292      	uxth	r2, r2
 8016392:	4291      	cmp	r1, r2
 8016394:	d8ee      	bhi.n	8016374 <uxr_init_input_reliable_stream+0x1c>
 8016396:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801639a:	bc70      	pop	{r4, r5, r6}
 801639c:	60c3      	str	r3, [r0, #12]
 801639e:	4770      	bx	lr

080163a0 <uxr_reset_input_reliable_stream>:
 80163a0:	8902      	ldrh	r2, [r0, #8]
 80163a2:	b1ca      	cbz	r2, 80163d8 <uxr_reset_input_reliable_stream+0x38>
 80163a4:	b470      	push	{r4, r5, r6}
 80163a6:	2400      	movs	r4, #0
 80163a8:	4621      	mov	r1, r4
 80163aa:	4626      	mov	r6, r4
 80163ac:	fbb1 f3f2 	udiv	r3, r1, r2
 80163b0:	fb02 1313 	mls	r3, r2, r3, r1
 80163b4:	e9d0 5100 	ldrd	r5, r1, [r0]
 80163b8:	b29b      	uxth	r3, r3
 80163ba:	fbb1 f2f2 	udiv	r2, r1, r2
 80163be:	fb03 f302 	mul.w	r3, r3, r2
 80163c2:	3401      	adds	r4, #1
 80163c4:	50ee      	str	r6, [r5, r3]
 80163c6:	8902      	ldrh	r2, [r0, #8]
 80163c8:	b2a1      	uxth	r1, r4
 80163ca:	428a      	cmp	r2, r1
 80163cc:	d8ee      	bhi.n	80163ac <uxr_reset_input_reliable_stream+0xc>
 80163ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80163d2:	bc70      	pop	{r4, r5, r6}
 80163d4:	60c3      	str	r3, [r0, #12]
 80163d6:	4770      	bx	lr
 80163d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80163dc:	60c3      	str	r3, [r0, #12]
 80163de:	4770      	bx	lr

080163e0 <uxr_receive_reliable_message>:
 80163e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80163e4:	4604      	mov	r4, r0
 80163e6:	460d      	mov	r5, r1
 80163e8:	8901      	ldrh	r1, [r0, #8]
 80163ea:	8980      	ldrh	r0, [r0, #12]
 80163ec:	4690      	mov	r8, r2
 80163ee:	461f      	mov	r7, r3
 80163f0:	f000 fc90 	bl	8016d14 <uxr_seq_num_add>
 80163f4:	4629      	mov	r1, r5
 80163f6:	4606      	mov	r6, r0
 80163f8:	89a0      	ldrh	r0, [r4, #12]
 80163fa:	f000 fc93 	bl	8016d24 <uxr_seq_num_cmp>
 80163fe:	2800      	cmp	r0, #0
 8016400:	db0a      	blt.n	8016418 <uxr_receive_reliable_message+0x38>
 8016402:	2600      	movs	r6, #0
 8016404:	89e0      	ldrh	r0, [r4, #14]
 8016406:	4629      	mov	r1, r5
 8016408:	f000 fc8c 	bl	8016d24 <uxr_seq_num_cmp>
 801640c:	2800      	cmp	r0, #0
 801640e:	bfb8      	it	lt
 8016410:	81e5      	strhlt	r5, [r4, #14]
 8016412:	4630      	mov	r0, r6
 8016414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016418:	4630      	mov	r0, r6
 801641a:	4629      	mov	r1, r5
 801641c:	f000 fc82 	bl	8016d24 <uxr_seq_num_cmp>
 8016420:	2800      	cmp	r0, #0
 8016422:	dbee      	blt.n	8016402 <uxr_receive_reliable_message+0x22>
 8016424:	6923      	ldr	r3, [r4, #16]
 8016426:	4640      	mov	r0, r8
 8016428:	4798      	blx	r3
 801642a:	2101      	movs	r1, #1
 801642c:	4681      	mov	r9, r0
 801642e:	89a0      	ldrh	r0, [r4, #12]
 8016430:	f000 fc70 	bl	8016d14 <uxr_seq_num_add>
 8016434:	f1b9 0f00 	cmp.w	r9, #0
 8016438:	d101      	bne.n	801643e <uxr_receive_reliable_message+0x5e>
 801643a:	4285      	cmp	r5, r0
 801643c:	d049      	beq.n	80164d2 <uxr_receive_reliable_message+0xf2>
 801643e:	8921      	ldrh	r1, [r4, #8]
 8016440:	fbb5 f3f1 	udiv	r3, r5, r1
 8016444:	fb01 5313 	mls	r3, r1, r3, r5
 8016448:	b29b      	uxth	r3, r3
 801644a:	6862      	ldr	r2, [r4, #4]
 801644c:	6820      	ldr	r0, [r4, #0]
 801644e:	fbb2 f2f1 	udiv	r2, r2, r1
 8016452:	fb03 f302 	mul.w	r3, r3, r2
 8016456:	3304      	adds	r3, #4
 8016458:	4418      	add	r0, r3
 801645a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801645e:	2b00      	cmp	r3, #0
 8016460:	d1cf      	bne.n	8016402 <uxr_receive_reliable_message+0x22>
 8016462:	4641      	mov	r1, r8
 8016464:	463a      	mov	r2, r7
 8016466:	f002 f91e 	bl	80186a6 <memcpy>
 801646a:	8921      	ldrh	r1, [r4, #8]
 801646c:	fbb5 f3f1 	udiv	r3, r5, r1
 8016470:	fb01 5313 	mls	r3, r1, r3, r5
 8016474:	b29b      	uxth	r3, r3
 8016476:	6862      	ldr	r2, [r4, #4]
 8016478:	fbb2 f2f1 	udiv	r2, r2, r1
 801647c:	6821      	ldr	r1, [r4, #0]
 801647e:	fb03 f302 	mul.w	r3, r3, r2
 8016482:	2201      	movs	r2, #1
 8016484:	50cf      	str	r7, [r1, r3]
 8016486:	9b08      	ldr	r3, [sp, #32]
 8016488:	701a      	strb	r2, [r3, #0]
 801648a:	f1b9 0f00 	cmp.w	r9, #0
 801648e:	d0b8      	beq.n	8016402 <uxr_receive_reliable_message+0x22>
 8016490:	89a6      	ldrh	r6, [r4, #12]
 8016492:	e001      	b.n	8016498 <uxr_receive_reliable_message+0xb8>
 8016494:	2801      	cmp	r0, #1
 8016496:	d1b4      	bne.n	8016402 <uxr_receive_reliable_message+0x22>
 8016498:	4630      	mov	r0, r6
 801649a:	2101      	movs	r1, #1
 801649c:	f000 fc3a 	bl	8016d14 <uxr_seq_num_add>
 80164a0:	8921      	ldrh	r1, [r4, #8]
 80164a2:	fbb0 f3f1 	udiv	r3, r0, r1
 80164a6:	fb01 0313 	mls	r3, r1, r3, r0
 80164aa:	b29b      	uxth	r3, r3
 80164ac:	6862      	ldr	r2, [r4, #4]
 80164ae:	fbb2 f2f1 	udiv	r2, r2, r1
 80164b2:	4606      	mov	r6, r0
 80164b4:	fb03 f302 	mul.w	r3, r3, r2
 80164b8:	6820      	ldr	r0, [r4, #0]
 80164ba:	3304      	adds	r3, #4
 80164bc:	4418      	add	r0, r3
 80164be:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d09d      	beq.n	8016402 <uxr_receive_reliable_message+0x22>
 80164c6:	6923      	ldr	r3, [r4, #16]
 80164c8:	4798      	blx	r3
 80164ca:	2802      	cmp	r0, #2
 80164cc:	d1e2      	bne.n	8016494 <uxr_receive_reliable_message+0xb4>
 80164ce:	2601      	movs	r6, #1
 80164d0:	e798      	b.n	8016404 <uxr_receive_reliable_message+0x24>
 80164d2:	9b08      	ldr	r3, [sp, #32]
 80164d4:	81a5      	strh	r5, [r4, #12]
 80164d6:	2601      	movs	r6, #1
 80164d8:	f883 9000 	strb.w	r9, [r3]
 80164dc:	e792      	b.n	8016404 <uxr_receive_reliable_message+0x24>
 80164de:	bf00      	nop

080164e0 <uxr_next_input_reliable_buffer_available>:
 80164e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164e4:	4604      	mov	r4, r0
 80164e6:	460e      	mov	r6, r1
 80164e8:	8980      	ldrh	r0, [r0, #12]
 80164ea:	2101      	movs	r1, #1
 80164ec:	4617      	mov	r7, r2
 80164ee:	f000 fc11 	bl	8016d14 <uxr_seq_num_add>
 80164f2:	8921      	ldrh	r1, [r4, #8]
 80164f4:	fbb0 f3f1 	udiv	r3, r0, r1
 80164f8:	fb01 0313 	mls	r3, r1, r3, r0
 80164fc:	b29b      	uxth	r3, r3
 80164fe:	6862      	ldr	r2, [r4, #4]
 8016500:	fbb2 f2f1 	udiv	r2, r2, r1
 8016504:	fb03 f302 	mul.w	r3, r3, r2
 8016508:	6822      	ldr	r2, [r4, #0]
 801650a:	3304      	adds	r3, #4
 801650c:	eb02 0803 	add.w	r8, r2, r3
 8016510:	f858 9c04 	ldr.w	r9, [r8, #-4]
 8016514:	f1b9 0f00 	cmp.w	r9, #0
 8016518:	d025      	beq.n	8016566 <uxr_next_input_reliable_buffer_available+0x86>
 801651a:	6923      	ldr	r3, [r4, #16]
 801651c:	4605      	mov	r5, r0
 801651e:	4640      	mov	r0, r8
 8016520:	4798      	blx	r3
 8016522:	4682      	mov	sl, r0
 8016524:	b310      	cbz	r0, 801656c <uxr_next_input_reliable_buffer_available+0x8c>
 8016526:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801652a:	e005      	b.n	8016538 <uxr_next_input_reliable_buffer_available+0x58>
 801652c:	6923      	ldr	r3, [r4, #16]
 801652e:	4798      	blx	r3
 8016530:	2802      	cmp	r0, #2
 8016532:	d032      	beq.n	801659a <uxr_next_input_reliable_buffer_available+0xba>
 8016534:	2801      	cmp	r0, #1
 8016536:	d116      	bne.n	8016566 <uxr_next_input_reliable_buffer_available+0x86>
 8016538:	4650      	mov	r0, sl
 801653a:	2101      	movs	r1, #1
 801653c:	f000 fbea 	bl	8016d14 <uxr_seq_num_add>
 8016540:	8921      	ldrh	r1, [r4, #8]
 8016542:	fbb0 f3f1 	udiv	r3, r0, r1
 8016546:	fb01 0313 	mls	r3, r1, r3, r0
 801654a:	b29b      	uxth	r3, r3
 801654c:	6862      	ldr	r2, [r4, #4]
 801654e:	fbb2 f2f1 	udiv	r2, r2, r1
 8016552:	4682      	mov	sl, r0
 8016554:	fb03 f302 	mul.w	r3, r3, r2
 8016558:	6820      	ldr	r0, [r4, #0]
 801655a:	3304      	adds	r3, #4
 801655c:	4418      	add	r0, r3
 801655e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016562:	2b00      	cmp	r3, #0
 8016564:	d1e2      	bne.n	801652c <uxr_next_input_reliable_buffer_available+0x4c>
 8016566:	2000      	movs	r0, #0
 8016568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801656c:	464a      	mov	r2, r9
 801656e:	4641      	mov	r1, r8
 8016570:	4630      	mov	r0, r6
 8016572:	f7f9 f981 	bl	800f878 <ucdr_init_buffer>
 8016576:	8921      	ldrh	r1, [r4, #8]
 8016578:	fbb5 f3f1 	udiv	r3, r5, r1
 801657c:	fb01 5313 	mls	r3, r1, r3, r5
 8016580:	b29b      	uxth	r3, r3
 8016582:	6862      	ldr	r2, [r4, #4]
 8016584:	fbb2 f2f1 	udiv	r2, r2, r1
 8016588:	6821      	ldr	r1, [r4, #0]
 801658a:	fb03 f302 	mul.w	r3, r3, r2
 801658e:	2001      	movs	r0, #1
 8016590:	f841 a003 	str.w	sl, [r1, r3]
 8016594:	81a5      	strh	r5, [r4, #12]
 8016596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801659a:	8922      	ldrh	r2, [r4, #8]
 801659c:	fbb5 f0f2 	udiv	r0, r5, r2
 80165a0:	fb02 5510 	mls	r5, r2, r0, r5
 80165a4:	b2ad      	uxth	r5, r5
 80165a6:	6863      	ldr	r3, [r4, #4]
 80165a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80165ac:	fb05 f503 	mul.w	r5, r5, r3
 80165b0:	6823      	ldr	r3, [r4, #0]
 80165b2:	2000      	movs	r0, #0
 80165b4:	5158      	str	r0, [r3, r5]
 80165b6:	eba9 0207 	sub.w	r2, r9, r7
 80165ba:	eb08 0107 	add.w	r1, r8, r7
 80165be:	4630      	mov	r0, r6
 80165c0:	f7f9 f95a 	bl	800f878 <ucdr_init_buffer>
 80165c4:	4630      	mov	r0, r6
 80165c6:	4904      	ldr	r1, [pc, #16]	; (80165d8 <uxr_next_input_reliable_buffer_available+0xf8>)
 80165c8:	4622      	mov	r2, r4
 80165ca:	f7f9 f92b 	bl	800f824 <ucdr_set_on_full_buffer_callback>
 80165ce:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80165d2:	2001      	movs	r0, #1
 80165d4:	e7c8      	b.n	8016568 <uxr_next_input_reliable_buffer_available+0x88>
 80165d6:	bf00      	nop
 80165d8:	080162f5 	.word	0x080162f5

080165dc <uxr_process_heartbeat>:
 80165dc:	b538      	push	{r3, r4, r5, lr}
 80165de:	4611      	mov	r1, r2
 80165e0:	4604      	mov	r4, r0
 80165e2:	89c0      	ldrh	r0, [r0, #14]
 80165e4:	4615      	mov	r5, r2
 80165e6:	f000 fb9d 	bl	8016d24 <uxr_seq_num_cmp>
 80165ea:	2800      	cmp	r0, #0
 80165ec:	bfb8      	it	lt
 80165ee:	81e5      	strhlt	r5, [r4, #14]
 80165f0:	bd38      	pop	{r3, r4, r5, pc}
 80165f2:	bf00      	nop

080165f4 <uxr_compute_acknack>:
 80165f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80165f8:	8903      	ldrh	r3, [r0, #8]
 80165fa:	8986      	ldrh	r6, [r0, #12]
 80165fc:	4604      	mov	r4, r0
 80165fe:	460d      	mov	r5, r1
 8016600:	b1d3      	cbz	r3, 8016638 <uxr_compute_acknack+0x44>
 8016602:	4630      	mov	r0, r6
 8016604:	2701      	movs	r7, #1
 8016606:	e003      	b.n	8016610 <uxr_compute_acknack+0x1c>
 8016608:	4567      	cmp	r7, ip
 801660a:	d215      	bcs.n	8016638 <uxr_compute_acknack+0x44>
 801660c:	89a0      	ldrh	r0, [r4, #12]
 801660e:	3701      	adds	r7, #1
 8016610:	b2b9      	uxth	r1, r7
 8016612:	f000 fb7f 	bl	8016d14 <uxr_seq_num_add>
 8016616:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801661a:	fbb0 f2fc 	udiv	r2, r0, ip
 801661e:	e9d4 1300 	ldrd	r1, r3, [r4]
 8016622:	fb0c 0212 	mls	r2, ip, r2, r0
 8016626:	b292      	uxth	r2, r2
 8016628:	fbb3 f3fc 	udiv	r3, r3, ip
 801662c:	fb02 1303 	mla	r3, r2, r3, r1
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d1e8      	bne.n	8016608 <uxr_compute_acknack+0x14>
 8016636:	4606      	mov	r6, r0
 8016638:	802e      	strh	r6, [r5, #0]
 801663a:	4630      	mov	r0, r6
 801663c:	2101      	movs	r1, #1
 801663e:	89e6      	ldrh	r6, [r4, #14]
 8016640:	f000 fb6c 	bl	8016d1c <uxr_seq_num_sub>
 8016644:	4601      	mov	r1, r0
 8016646:	4630      	mov	r0, r6
 8016648:	f000 fb68 	bl	8016d1c <uxr_seq_num_sub>
 801664c:	4606      	mov	r6, r0
 801664e:	b318      	cbz	r0, 8016698 <uxr_compute_acknack+0xa4>
 8016650:	f04f 0900 	mov.w	r9, #0
 8016654:	464f      	mov	r7, r9
 8016656:	f04f 0801 	mov.w	r8, #1
 801665a:	fa1f f189 	uxth.w	r1, r9
 801665e:	8828      	ldrh	r0, [r5, #0]
 8016660:	f000 fb58 	bl	8016d14 <uxr_seq_num_add>
 8016664:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016668:	6822      	ldr	r2, [r4, #0]
 801666a:	fbb0 f1fc 	udiv	r1, r0, ip
 801666e:	fb01 011c 	mls	r1, r1, ip, r0
 8016672:	b289      	uxth	r1, r1
 8016674:	6863      	ldr	r3, [r4, #4]
 8016676:	fbb3 f3fc 	udiv	r3, r3, ip
 801667a:	fb01 2303 	mla	r3, r1, r3, r2
 801667e:	fa08 f209 	lsl.w	r2, r8, r9
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	f109 0901 	add.w	r9, r9, #1
 8016688:	b90b      	cbnz	r3, 801668e <uxr_compute_acknack+0x9a>
 801668a:	4317      	orrs	r7, r2
 801668c:	b2bf      	uxth	r7, r7
 801668e:	454e      	cmp	r6, r9
 8016690:	d1e3      	bne.n	801665a <uxr_compute_acknack+0x66>
 8016692:	4638      	mov	r0, r7
 8016694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016698:	4607      	mov	r7, r0
 801669a:	4638      	mov	r0, r7
 801669c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080166a0 <uxr_init_output_best_effort_stream>:
 80166a0:	b410      	push	{r4}
 80166a2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80166a6:	81c4      	strh	r4, [r0, #14]
 80166a8:	e9c0 1300 	strd	r1, r3, [r0]
 80166ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80166b0:	7303      	strb	r3, [r0, #12]
 80166b2:	6082      	str	r2, [r0, #8]
 80166b4:	4770      	bx	lr
 80166b6:	bf00      	nop

080166b8 <uxr_reset_output_best_effort_stream>:
 80166b8:	7b02      	ldrb	r2, [r0, #12]
 80166ba:	6042      	str	r2, [r0, #4]
 80166bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80166c0:	81c3      	strh	r3, [r0, #14]
 80166c2:	4770      	bx	lr

080166c4 <uxr_prepare_best_effort_buffer_to_write>:
 80166c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166c6:	4604      	mov	r4, r0
 80166c8:	b083      	sub	sp, #12
 80166ca:	6840      	ldr	r0, [r0, #4]
 80166cc:	460d      	mov	r5, r1
 80166ce:	4616      	mov	r6, r2
 80166d0:	f7fa feb8 	bl	8011444 <uxr_submessage_padding>
 80166d4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80166d8:	4410      	add	r0, r2
 80166da:	1942      	adds	r2, r0, r5
 80166dc:	4293      	cmp	r3, r2
 80166de:	bf2c      	ite	cs
 80166e0:	2701      	movcs	r7, #1
 80166e2:	2700      	movcc	r7, #0
 80166e4:	d202      	bcs.n	80166ec <uxr_prepare_best_effort_buffer_to_write+0x28>
 80166e6:	4638      	mov	r0, r7
 80166e8:	b003      	add	sp, #12
 80166ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166ec:	9000      	str	r0, [sp, #0]
 80166ee:	6821      	ldr	r1, [r4, #0]
 80166f0:	4630      	mov	r0, r6
 80166f2:	2300      	movs	r3, #0
 80166f4:	f7f9 f8ae 	bl	800f854 <ucdr_init_buffer_origin_offset>
 80166f8:	6861      	ldr	r1, [r4, #4]
 80166fa:	4638      	mov	r0, r7
 80166fc:	4429      	add	r1, r5
 80166fe:	6061      	str	r1, [r4, #4]
 8016700:	b003      	add	sp, #12
 8016702:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016704 <uxr_prepare_best_effort_buffer_to_send>:
 8016704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016708:	6845      	ldr	r5, [r0, #4]
 801670a:	4604      	mov	r4, r0
 801670c:	7b00      	ldrb	r0, [r0, #12]
 801670e:	4285      	cmp	r5, r0
 8016710:	bf8c      	ite	hi
 8016712:	2701      	movhi	r7, #1
 8016714:	2700      	movls	r7, #0
 8016716:	d802      	bhi.n	801671e <uxr_prepare_best_effort_buffer_to_send+0x1a>
 8016718:	4638      	mov	r0, r7
 801671a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801671e:	4688      	mov	r8, r1
 8016720:	89e0      	ldrh	r0, [r4, #14]
 8016722:	2101      	movs	r1, #1
 8016724:	4615      	mov	r5, r2
 8016726:	461e      	mov	r6, r3
 8016728:	f000 faf4 	bl	8016d14 <uxr_seq_num_add>
 801672c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016730:	81e0      	strh	r0, [r4, #14]
 8016732:	8030      	strh	r0, [r6, #0]
 8016734:	f8c8 2000 	str.w	r2, [r8]
 8016738:	602b      	str	r3, [r5, #0]
 801673a:	7b23      	ldrb	r3, [r4, #12]
 801673c:	6063      	str	r3, [r4, #4]
 801673e:	4638      	mov	r0, r7
 8016740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016744 <on_full_output_buffer>:
 8016744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016746:	6802      	ldr	r2, [r0, #0]
 8016748:	460d      	mov	r5, r1
 801674a:	6809      	ldr	r1, [r1, #0]
 801674c:	892f      	ldrh	r7, [r5, #8]
 801674e:	686c      	ldr	r4, [r5, #4]
 8016750:	fbb4 f4f7 	udiv	r4, r4, r7
 8016754:	1a53      	subs	r3, r2, r1
 8016756:	fbb3 f3f4 	udiv	r3, r3, r4
 801675a:	3301      	adds	r3, #1
 801675c:	b29b      	uxth	r3, r3
 801675e:	fbb3 f2f7 	udiv	r2, r3, r7
 8016762:	fb07 3312 	mls	r3, r7, r2, r3
 8016766:	b29b      	uxth	r3, r3
 8016768:	fb04 f403 	mul.w	r4, r4, r3
 801676c:	7b2f      	ldrb	r7, [r5, #12]
 801676e:	590a      	ldr	r2, [r1, r4]
 8016770:	6903      	ldr	r3, [r0, #16]
 8016772:	443c      	add	r4, r7
 8016774:	3408      	adds	r4, #8
 8016776:	1bd2      	subs	r2, r2, r7
 8016778:	4606      	mov	r6, r0
 801677a:	4421      	add	r1, r4
 801677c:	3a04      	subs	r2, #4
 801677e:	f7f9 f873 	bl	800f868 <ucdr_init_buffer_origin>
 8016782:	4630      	mov	r0, r6
 8016784:	4902      	ldr	r1, [pc, #8]	; (8016790 <on_full_output_buffer+0x4c>)
 8016786:	462a      	mov	r2, r5
 8016788:	f7f9 f84c 	bl	800f824 <ucdr_set_on_full_buffer_callback>
 801678c:	2000      	movs	r0, #0
 801678e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016790:	08016745 	.word	0x08016745

08016794 <uxr_init_output_reliable_stream>:
 8016794:	b430      	push	{r4, r5}
 8016796:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801679a:	6001      	str	r1, [r0, #0]
 801679c:	8103      	strh	r3, [r0, #8]
 801679e:	6042      	str	r2, [r0, #4]
 80167a0:	7304      	strb	r4, [r0, #12]
 80167a2:	b1b3      	cbz	r3, 80167d2 <uxr_init_output_reliable_stream+0x3e>
 80167a4:	600c      	str	r4, [r1, #0]
 80167a6:	8901      	ldrh	r1, [r0, #8]
 80167a8:	2901      	cmp	r1, #1
 80167aa:	d912      	bls.n	80167d2 <uxr_init_output_reliable_stream+0x3e>
 80167ac:	2201      	movs	r2, #1
 80167ae:	e9d0 5400 	ldrd	r5, r4, [r0]
 80167b2:	fbb2 f3f1 	udiv	r3, r2, r1
 80167b6:	fb01 2313 	mls	r3, r1, r3, r2
 80167ba:	b29b      	uxth	r3, r3
 80167bc:	fbb4 f1f1 	udiv	r1, r4, r1
 80167c0:	fb03 f301 	mul.w	r3, r3, r1
 80167c4:	7b01      	ldrb	r1, [r0, #12]
 80167c6:	50e9      	str	r1, [r5, r3]
 80167c8:	3201      	adds	r2, #1
 80167ca:	8901      	ldrh	r1, [r0, #8]
 80167cc:	b292      	uxth	r2, r2
 80167ce:	4291      	cmp	r1, r2
 80167d0:	d8ed      	bhi.n	80167ae <uxr_init_output_reliable_stream+0x1a>
 80167d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80167d6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80167da:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80167de:	4b05      	ldr	r3, [pc, #20]	; (80167f4 <uxr_init_output_reliable_stream+0x60>)
 80167e0:	f8c0 300e 	str.w	r3, [r0, #14]
 80167e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80167e8:	2300      	movs	r3, #0
 80167ea:	bc30      	pop	{r4, r5}
 80167ec:	8242      	strh	r2, [r0, #18]
 80167ee:	8403      	strh	r3, [r0, #32]
 80167f0:	4770      	bx	lr
 80167f2:	bf00      	nop
 80167f4:	ffff0000 	.word	0xffff0000

080167f8 <uxr_reset_output_reliable_stream>:
 80167f8:	8902      	ldrh	r2, [r0, #8]
 80167fa:	b430      	push	{r4, r5}
 80167fc:	b19a      	cbz	r2, 8016826 <uxr_reset_output_reliable_stream+0x2e>
 80167fe:	2400      	movs	r4, #0
 8016800:	4621      	mov	r1, r4
 8016802:	fbb1 f3f2 	udiv	r3, r1, r2
 8016806:	fb02 1313 	mls	r3, r2, r3, r1
 801680a:	e9d0 5100 	ldrd	r5, r1, [r0]
 801680e:	b29b      	uxth	r3, r3
 8016810:	fbb1 f2f2 	udiv	r2, r1, r2
 8016814:	fb03 f302 	mul.w	r3, r3, r2
 8016818:	7b02      	ldrb	r2, [r0, #12]
 801681a:	50ea      	str	r2, [r5, r3]
 801681c:	3401      	adds	r4, #1
 801681e:	8902      	ldrh	r2, [r0, #8]
 8016820:	b2a1      	uxth	r1, r4
 8016822:	428a      	cmp	r2, r1
 8016824:	d8ed      	bhi.n	8016802 <uxr_reset_output_reliable_stream+0xa>
 8016826:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801682a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801682e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8016832:	4b05      	ldr	r3, [pc, #20]	; (8016848 <uxr_reset_output_reliable_stream+0x50>)
 8016834:	f8c0 300e 	str.w	r3, [r0, #14]
 8016838:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801683c:	2300      	movs	r3, #0
 801683e:	bc30      	pop	{r4, r5}
 8016840:	8242      	strh	r2, [r0, #18]
 8016842:	8403      	strh	r3, [r0, #32]
 8016844:	4770      	bx	lr
 8016846:	bf00      	nop
 8016848:	ffff0000 	.word	0xffff0000

0801684c <uxr_prepare_reliable_buffer_to_write>:
 801684c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016850:	89c5      	ldrh	r5, [r0, #14]
 8016852:	4604      	mov	r4, r0
 8016854:	8900      	ldrh	r0, [r0, #8]
 8016856:	fbb5 f3f0 	udiv	r3, r5, r0
 801685a:	4688      	mov	r8, r1
 801685c:	e9d4 1600 	ldrd	r1, r6, [r4]
 8016860:	fb00 5313 	mls	r3, r0, r3, r5
 8016864:	b29b      	uxth	r3, r3
 8016866:	fbb6 f0f0 	udiv	r0, r6, r0
 801686a:	fb00 f303 	mul.w	r3, r0, r3
 801686e:	3304      	adds	r3, #4
 8016870:	18cb      	adds	r3, r1, r3
 8016872:	b091      	sub	sp, #68	; 0x44
 8016874:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8016878:	9004      	str	r0, [sp, #16]
 801687a:	2104      	movs	r1, #4
 801687c:	4630      	mov	r0, r6
 801687e:	9305      	str	r3, [sp, #20]
 8016880:	9206      	str	r2, [sp, #24]
 8016882:	f7f8 fffd 	bl	800f880 <ucdr_alignment>
 8016886:	1833      	adds	r3, r6, r0
 8016888:	9804      	ldr	r0, [sp, #16]
 801688a:	9303      	str	r3, [sp, #12]
 801688c:	eb03 0708 	add.w	r7, r3, r8
 8016890:	1f06      	subs	r6, r0, #4
 8016892:	42b7      	cmp	r7, r6
 8016894:	f240 80dc 	bls.w	8016a50 <uxr_prepare_reliable_buffer_to_write+0x204>
 8016898:	f894 e00c 	ldrb.w	lr, [r4, #12]
 801689c:	eb0e 0308 	add.w	r3, lr, r8
 80168a0:	42b3      	cmp	r3, r6
 80168a2:	f240 80c2 	bls.w	8016a2a <uxr_prepare_reliable_buffer_to_write+0x1de>
 80168a6:	9b03      	ldr	r3, [sp, #12]
 80168a8:	3304      	adds	r3, #4
 80168aa:	42b3      	cmp	r3, r6
 80168ac:	f080 8112 	bcs.w	8016ad4 <uxr_prepare_reliable_buffer_to_write+0x288>
 80168b0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80168b4:	f1bc 0f00 	cmp.w	ip, #0
 80168b8:	f000 8127 	beq.w	8016b0a <uxr_prepare_reliable_buffer_to_write+0x2be>
 80168bc:	e9d4 7300 	ldrd	r7, r3, [r4]
 80168c0:	2100      	movs	r1, #0
 80168c2:	4608      	mov	r0, r1
 80168c4:	460a      	mov	r2, r1
 80168c6:	fbb3 f9fc 	udiv	r9, r3, ip
 80168ca:	fbb2 f3fc 	udiv	r3, r2, ip
 80168ce:	fb0c 2313 	mls	r3, ip, r3, r2
 80168d2:	b29b      	uxth	r3, r3
 80168d4:	fb09 7303 	mla	r3, r9, r3, r7
 80168d8:	3101      	adds	r1, #1
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	459e      	cmp	lr, r3
 80168de:	bf08      	it	eq
 80168e0:	3001      	addeq	r0, #1
 80168e2:	b28a      	uxth	r2, r1
 80168e4:	bf08      	it	eq
 80168e6:	b280      	uxtheq	r0, r0
 80168e8:	4562      	cmp	r2, ip
 80168ea:	d3ee      	bcc.n	80168ca <uxr_prepare_reliable_buffer_to_write+0x7e>
 80168ec:	9b03      	ldr	r3, [sp, #12]
 80168ee:	1f37      	subs	r7, r6, #4
 80168f0:	b2bf      	uxth	r7, r7
 80168f2:	eba7 0903 	sub.w	r9, r7, r3
 80168f6:	fa1f f989 	uxth.w	r9, r9
 80168fa:	eba7 070e 	sub.w	r7, r7, lr
 80168fe:	b2bf      	uxth	r7, r7
 8016900:	eba8 0809 	sub.w	r8, r8, r9
 8016904:	fbb8 faf7 	udiv	sl, r8, r7
 8016908:	fb07 831a 	mls	r3, r7, sl, r8
 801690c:	9707      	str	r7, [sp, #28]
 801690e:	2b00      	cmp	r3, #0
 8016910:	f040 80bf 	bne.w	8016a92 <uxr_prepare_reliable_buffer_to_write+0x246>
 8016914:	fa1f fa8a 	uxth.w	sl, sl
 8016918:	4582      	cmp	sl, r0
 801691a:	f200 8095 	bhi.w	8016a48 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 801691e:	f10d 0b20 	add.w	fp, sp, #32
 8016922:	f1ba 0f00 	cmp.w	sl, #0
 8016926:	d03a      	beq.n	801699e <uxr_prepare_reliable_buffer_to_write+0x152>
 8016928:	f04f 0800 	mov.w	r8, #0
 801692c:	f10d 0b20 	add.w	fp, sp, #32
 8016930:	e000      	b.n	8016934 <uxr_prepare_reliable_buffer_to_write+0xe8>
 8016932:	46b9      	mov	r9, r7
 8016934:	e9d4 3200 	ldrd	r3, r2, [r4]
 8016938:	fbb5 f1fc 	udiv	r1, r5, ip
 801693c:	fb0c 5111 	mls	r1, ip, r1, r5
 8016940:	b289      	uxth	r1, r1
 8016942:	fbb2 f2fc 	udiv	r2, r2, ip
 8016946:	fb01 f102 	mul.w	r1, r1, r2
 801694a:	3104      	adds	r1, #4
 801694c:	4419      	add	r1, r3
 801694e:	4632      	mov	r2, r6
 8016950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016954:	9300      	str	r3, [sp, #0]
 8016956:	4658      	mov	r0, fp
 8016958:	2300      	movs	r3, #0
 801695a:	f7f8 ff7b 	bl	800f854 <ucdr_init_buffer_origin_offset>
 801695e:	464a      	mov	r2, r9
 8016960:	2300      	movs	r3, #0
 8016962:	210d      	movs	r1, #13
 8016964:	4658      	mov	r0, fp
 8016966:	f7fa fd2d 	bl	80113c4 <uxr_buffer_submessage_header>
 801696a:	8920      	ldrh	r0, [r4, #8]
 801696c:	fbb5 f3f0 	udiv	r3, r5, r0
 8016970:	e9d4 2100 	ldrd	r2, r1, [r4]
 8016974:	fb00 5313 	mls	r3, r0, r3, r5
 8016978:	b29b      	uxth	r3, r3
 801697a:	fbb1 f1f0 	udiv	r1, r1, r0
 801697e:	fb03 f301 	mul.w	r3, r3, r1
 8016982:	4628      	mov	r0, r5
 8016984:	50d6      	str	r6, [r2, r3]
 8016986:	2101      	movs	r1, #1
 8016988:	f000 f9c4 	bl	8016d14 <uxr_seq_num_add>
 801698c:	f108 0801 	add.w	r8, r8, #1
 8016990:	fa1f f388 	uxth.w	r3, r8
 8016994:	459a      	cmp	sl, r3
 8016996:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801699a:	4605      	mov	r5, r0
 801699c:	d8c9      	bhi.n	8016932 <uxr_prepare_reliable_buffer_to_write+0xe6>
 801699e:	fbb5 f1fc 	udiv	r1, r5, ip
 80169a2:	fb0c 5111 	mls	r1, ip, r1, r5
 80169a6:	b289      	uxth	r1, r1
 80169a8:	6863      	ldr	r3, [r4, #4]
 80169aa:	fbb3 fcfc 	udiv	ip, r3, ip
 80169ae:	6823      	ldr	r3, [r4, #0]
 80169b0:	fb01 f10c 	mul.w	r1, r1, ip
 80169b4:	3104      	adds	r1, #4
 80169b6:	4419      	add	r1, r3
 80169b8:	4632      	mov	r2, r6
 80169ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80169be:	9300      	str	r3, [sp, #0]
 80169c0:	4658      	mov	r0, fp
 80169c2:	2300      	movs	r3, #0
 80169c4:	f7f8 ff46 	bl	800f854 <ucdr_init_buffer_origin_offset>
 80169c8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80169cc:	4658      	mov	r0, fp
 80169ce:	fa1f f288 	uxth.w	r2, r8
 80169d2:	2302      	movs	r3, #2
 80169d4:	210d      	movs	r1, #13
 80169d6:	f7fa fcf5 	bl	80113c4 <uxr_buffer_submessage_header>
 80169da:	e9d4 3200 	ldrd	r3, r2, [r4]
 80169de:	8921      	ldrh	r1, [r4, #8]
 80169e0:	9f03      	ldr	r7, [sp, #12]
 80169e2:	9307      	str	r3, [sp, #28]
 80169e4:	9b05      	ldr	r3, [sp, #20]
 80169e6:	7b26      	ldrb	r6, [r4, #12]
 80169e8:	fbb5 f0f1 	udiv	r0, r5, r1
 80169ec:	fbb2 f2f1 	udiv	r2, r2, r1
 80169f0:	fb01 5010 	mls	r0, r1, r0, r5
 80169f4:	1d39      	adds	r1, r7, #4
 80169f6:	440b      	add	r3, r1
 80169f8:	b280      	uxth	r0, r0
 80169fa:	fb00 f002 	mul.w	r0, r0, r2
 80169fe:	4619      	mov	r1, r3
 8016a00:	3604      	adds	r6, #4
 8016a02:	9b07      	ldr	r3, [sp, #28]
 8016a04:	9a04      	ldr	r2, [sp, #16]
 8016a06:	4446      	add	r6, r8
 8016a08:	501e      	str	r6, [r3, r0]
 8016a0a:	9e06      	ldr	r6, [sp, #24]
 8016a0c:	3a08      	subs	r2, #8
 8016a0e:	1bd2      	subs	r2, r2, r7
 8016a10:	4630      	mov	r0, r6
 8016a12:	f7f8 ff31 	bl	800f878 <ucdr_init_buffer>
 8016a16:	4630      	mov	r0, r6
 8016a18:	493d      	ldr	r1, [pc, #244]	; (8016b10 <uxr_prepare_reliable_buffer_to_write+0x2c4>)
 8016a1a:	4622      	mov	r2, r4
 8016a1c:	f7f8 ff02 	bl	800f824 <ucdr_set_on_full_buffer_callback>
 8016a20:	2001      	movs	r0, #1
 8016a22:	81e5      	strh	r5, [r4, #14]
 8016a24:	b011      	add	sp, #68	; 0x44
 8016a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a2a:	2101      	movs	r1, #1
 8016a2c:	89e0      	ldrh	r0, [r4, #14]
 8016a2e:	f000 f971 	bl	8016d14 <uxr_seq_num_add>
 8016a32:	8921      	ldrh	r1, [r4, #8]
 8016a34:	4605      	mov	r5, r0
 8016a36:	8a60      	ldrh	r0, [r4, #18]
 8016a38:	f000 f96c 	bl	8016d14 <uxr_seq_num_add>
 8016a3c:	4601      	mov	r1, r0
 8016a3e:	4628      	mov	r0, r5
 8016a40:	f000 f970 	bl	8016d24 <uxr_seq_num_cmp>
 8016a44:	2800      	cmp	r0, #0
 8016a46:	dd2a      	ble.n	8016a9e <uxr_prepare_reliable_buffer_to_write+0x252>
 8016a48:	2000      	movs	r0, #0
 8016a4a:	b011      	add	sp, #68	; 0x44
 8016a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a50:	8921      	ldrh	r1, [r4, #8]
 8016a52:	8a60      	ldrh	r0, [r4, #18]
 8016a54:	f000 f95e 	bl	8016d14 <uxr_seq_num_add>
 8016a58:	4601      	mov	r1, r0
 8016a5a:	4628      	mov	r0, r5
 8016a5c:	f000 f962 	bl	8016d24 <uxr_seq_num_cmp>
 8016a60:	2800      	cmp	r0, #0
 8016a62:	dcf1      	bgt.n	8016a48 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 8016a64:	8921      	ldrh	r1, [r4, #8]
 8016a66:	fbb5 f3f1 	udiv	r3, r5, r1
 8016a6a:	e9d4 4200 	ldrd	r4, r2, [r4]
 8016a6e:	fb01 5313 	mls	r3, r1, r3, r5
 8016a72:	b29b      	uxth	r3, r3
 8016a74:	fbb2 f2f1 	udiv	r2, r2, r1
 8016a78:	fb03 f302 	mul.w	r3, r3, r2
 8016a7c:	e9dd 1005 	ldrd	r1, r0, [sp, #20]
 8016a80:	50e7      	str	r7, [r4, r3]
 8016a82:	9b03      	ldr	r3, [sp, #12]
 8016a84:	9300      	str	r3, [sp, #0]
 8016a86:	463a      	mov	r2, r7
 8016a88:	2300      	movs	r3, #0
 8016a8a:	f7f8 fee3 	bl	800f854 <ucdr_init_buffer_origin_offset>
 8016a8e:	2001      	movs	r0, #1
 8016a90:	e7db      	b.n	8016a4a <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8016a92:	f10a 0a01 	add.w	sl, sl, #1
 8016a96:	fa1f fa8a 	uxth.w	sl, sl
 8016a9a:	9307      	str	r3, [sp, #28]
 8016a9c:	e73c      	b.n	8016918 <uxr_prepare_reliable_buffer_to_write+0xcc>
 8016a9e:	8920      	ldrh	r0, [r4, #8]
 8016aa0:	fbb5 f3f0 	udiv	r3, r5, r0
 8016aa4:	fb00 5313 	mls	r3, r0, r3, r5
 8016aa8:	b29b      	uxth	r3, r3
 8016aaa:	6862      	ldr	r2, [r4, #4]
 8016aac:	6821      	ldr	r1, [r4, #0]
 8016aae:	fbb2 f0f0 	udiv	r0, r2, r0
 8016ab2:	fb03 f300 	mul.w	r3, r3, r0
 8016ab6:	7b22      	ldrb	r2, [r4, #12]
 8016ab8:	9806      	ldr	r0, [sp, #24]
 8016aba:	3304      	adds	r3, #4
 8016abc:	4419      	add	r1, r3
 8016abe:	4442      	add	r2, r8
 8016ac0:	f841 2c04 	str.w	r2, [r1, #-4]
 8016ac4:	7b23      	ldrb	r3, [r4, #12]
 8016ac6:	9300      	str	r3, [sp, #0]
 8016ac8:	2300      	movs	r3, #0
 8016aca:	f7f8 fec3 	bl	800f854 <ucdr_init_buffer_origin_offset>
 8016ace:	81e5      	strh	r5, [r4, #14]
 8016ad0:	2001      	movs	r0, #1
 8016ad2:	e7ba      	b.n	8016a4a <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8016ad4:	4628      	mov	r0, r5
 8016ad6:	2101      	movs	r1, #1
 8016ad8:	f000 f91c 	bl	8016d14 <uxr_seq_num_add>
 8016adc:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016ae0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016ae4:	fbb3 f1fc 	udiv	r1, r3, ip
 8016ae8:	fbb0 f3fc 	udiv	r3, r0, ip
 8016aec:	fb0c 0313 	mls	r3, ip, r3, r0
 8016af0:	b29b      	uxth	r3, r3
 8016af2:	fb03 f301 	mul.w	r3, r3, r1
 8016af6:	3304      	adds	r3, #4
 8016af8:	18d3      	adds	r3, r2, r3
 8016afa:	9305      	str	r3, [sp, #20]
 8016afc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016b00:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8016b04:	9303      	str	r3, [sp, #12]
 8016b06:	4605      	mov	r5, r0
 8016b08:	e6d4      	b.n	80168b4 <uxr_prepare_reliable_buffer_to_write+0x68>
 8016b0a:	4660      	mov	r0, ip
 8016b0c:	e6ee      	b.n	80168ec <uxr_prepare_reliable_buffer_to_write+0xa0>
 8016b0e:	bf00      	nop
 8016b10:	08016745 	.word	0x08016745

08016b14 <uxr_prepare_next_reliable_buffer_to_send>:
 8016b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b18:	4605      	mov	r5, r0
 8016b1a:	4688      	mov	r8, r1
 8016b1c:	8a00      	ldrh	r0, [r0, #16]
 8016b1e:	2101      	movs	r1, #1
 8016b20:	4617      	mov	r7, r2
 8016b22:	461e      	mov	r6, r3
 8016b24:	f000 f8f6 	bl	8016d14 <uxr_seq_num_add>
 8016b28:	8030      	strh	r0, [r6, #0]
 8016b2a:	892a      	ldrh	r2, [r5, #8]
 8016b2c:	fbb0 f3f2 	udiv	r3, r0, r2
 8016b30:	fb02 0413 	mls	r4, r2, r3, r0
 8016b34:	b2a4      	uxth	r4, r4
 8016b36:	686b      	ldr	r3, [r5, #4]
 8016b38:	fbb3 f2f2 	udiv	r2, r3, r2
 8016b3c:	682b      	ldr	r3, [r5, #0]
 8016b3e:	89e9      	ldrh	r1, [r5, #14]
 8016b40:	fb04 f402 	mul.w	r4, r4, r2
 8016b44:	3404      	adds	r4, #4
 8016b46:	4423      	add	r3, r4
 8016b48:	f8c8 3000 	str.w	r3, [r8]
 8016b4c:	682b      	ldr	r3, [r5, #0]
 8016b4e:	441c      	add	r4, r3
 8016b50:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016b54:	603b      	str	r3, [r7, #0]
 8016b56:	f000 f8e5 	bl	8016d24 <uxr_seq_num_cmp>
 8016b5a:	2800      	cmp	r0, #0
 8016b5c:	dd02      	ble.n	8016b64 <uxr_prepare_next_reliable_buffer_to_send+0x50>
 8016b5e:	2000      	movs	r0, #0
 8016b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b64:	683a      	ldr	r2, [r7, #0]
 8016b66:	7b2b      	ldrb	r3, [r5, #12]
 8016b68:	429a      	cmp	r2, r3
 8016b6a:	d9f8      	bls.n	8016b5e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016b6c:	8a69      	ldrh	r1, [r5, #18]
 8016b6e:	8a28      	ldrh	r0, [r5, #16]
 8016b70:	f000 f8d4 	bl	8016d1c <uxr_seq_num_sub>
 8016b74:	892b      	ldrh	r3, [r5, #8]
 8016b76:	4283      	cmp	r3, r0
 8016b78:	d0f1      	beq.n	8016b5e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016b7a:	8830      	ldrh	r0, [r6, #0]
 8016b7c:	89eb      	ldrh	r3, [r5, #14]
 8016b7e:	8228      	strh	r0, [r5, #16]
 8016b80:	4298      	cmp	r0, r3
 8016b82:	d002      	beq.n	8016b8a <uxr_prepare_next_reliable_buffer_to_send+0x76>
 8016b84:	2001      	movs	r0, #1
 8016b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b8a:	2101      	movs	r1, #1
 8016b8c:	f000 f8c2 	bl	8016d14 <uxr_seq_num_add>
 8016b90:	81e8      	strh	r0, [r5, #14]
 8016b92:	2001      	movs	r0, #1
 8016b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016b98 <uxr_update_output_stream_heartbeat_timestamp>:
 8016b98:	b5d0      	push	{r4, r6, r7, lr}
 8016b9a:	8a01      	ldrh	r1, [r0, #16]
 8016b9c:	4604      	mov	r4, r0
 8016b9e:	8a40      	ldrh	r0, [r0, #18]
 8016ba0:	4616      	mov	r6, r2
 8016ba2:	461f      	mov	r7, r3
 8016ba4:	f000 f8be 	bl	8016d24 <uxr_seq_num_cmp>
 8016ba8:	2800      	cmp	r0, #0
 8016baa:	db07      	blt.n	8016bbc <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8016bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016bb0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016bb4:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8016bb8:	2000      	movs	r0, #0
 8016bba:	bdd0      	pop	{r4, r6, r7, pc}
 8016bbc:	f894 0020 	ldrb.w	r0, [r4, #32]
 8016bc0:	b948      	cbnz	r0, 8016bd6 <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 8016bc2:	2301      	movs	r3, #1
 8016bc4:	f884 3020 	strb.w	r3, [r4, #32]
 8016bc8:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 8016bcc:	f147 0200 	adc.w	r2, r7, #0
 8016bd0:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8016bd4:	bdd0      	pop	{r4, r6, r7, pc}
 8016bd6:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016bda:	4296      	cmp	r6, r2
 8016bdc:	eb77 0303 	sbcs.w	r3, r7, r3
 8016be0:	bfa5      	ittet	ge
 8016be2:	3001      	addge	r0, #1
 8016be4:	f884 0020 	strbge.w	r0, [r4, #32]
 8016be8:	2000      	movlt	r0, #0
 8016bea:	2001      	movge	r0, #1
 8016bec:	e7ec      	b.n	8016bc8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8016bee:	bf00      	nop

08016bf0 <uxr_begin_output_nack_buffer_it>:
 8016bf0:	8a40      	ldrh	r0, [r0, #18]
 8016bf2:	4770      	bx	lr

08016bf4 <uxr_next_reliable_nack_buffer_to_send>:
 8016bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016bf8:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 8016bfc:	f1b9 0f00 	cmp.w	r9, #0
 8016c00:	d011      	beq.n	8016c26 <uxr_next_reliable_nack_buffer_to_send+0x32>
 8016c02:	4605      	mov	r5, r0
 8016c04:	8818      	ldrh	r0, [r3, #0]
 8016c06:	460f      	mov	r7, r1
 8016c08:	4690      	mov	r8, r2
 8016c0a:	461e      	mov	r6, r3
 8016c0c:	2101      	movs	r1, #1
 8016c0e:	f000 f881 	bl	8016d14 <uxr_seq_num_add>
 8016c12:	8030      	strh	r0, [r6, #0]
 8016c14:	8a29      	ldrh	r1, [r5, #16]
 8016c16:	f000 f885 	bl	8016d24 <uxr_seq_num_cmp>
 8016c1a:	2800      	cmp	r0, #0
 8016c1c:	dd06      	ble.n	8016c2c <uxr_next_reliable_nack_buffer_to_send+0x38>
 8016c1e:	f04f 0900 	mov.w	r9, #0
 8016c22:	f885 9021 	strb.w	r9, [r5, #33]	; 0x21
 8016c26:	4648      	mov	r0, r9
 8016c28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c2c:	892a      	ldrh	r2, [r5, #8]
 8016c2e:	8830      	ldrh	r0, [r6, #0]
 8016c30:	fbb0 f4f2 	udiv	r4, r0, r2
 8016c34:	fb02 0414 	mls	r4, r2, r4, r0
 8016c38:	b2a4      	uxth	r4, r4
 8016c3a:	686b      	ldr	r3, [r5, #4]
 8016c3c:	fbb3 f2f2 	udiv	r2, r3, r2
 8016c40:	682b      	ldr	r3, [r5, #0]
 8016c42:	fb04 f402 	mul.w	r4, r4, r2
 8016c46:	3404      	adds	r4, #4
 8016c48:	4423      	add	r3, r4
 8016c4a:	603b      	str	r3, [r7, #0]
 8016c4c:	682b      	ldr	r3, [r5, #0]
 8016c4e:	441c      	add	r4, r3
 8016c50:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016c54:	f8c8 3000 	str.w	r3, [r8]
 8016c58:	7b2a      	ldrb	r2, [r5, #12]
 8016c5a:	429a      	cmp	r2, r3
 8016c5c:	d0d6      	beq.n	8016c0c <uxr_next_reliable_nack_buffer_to_send+0x18>
 8016c5e:	4648      	mov	r0, r9
 8016c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016c64 <uxr_process_acknack>:
 8016c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c66:	4604      	mov	r4, r0
 8016c68:	460e      	mov	r6, r1
 8016c6a:	4610      	mov	r0, r2
 8016c6c:	2101      	movs	r1, #1
 8016c6e:	f000 f855 	bl	8016d1c <uxr_seq_num_sub>
 8016c72:	8a61      	ldrh	r1, [r4, #18]
 8016c74:	f000 f852 	bl	8016d1c <uxr_seq_num_sub>
 8016c78:	b1c0      	cbz	r0, 8016cac <uxr_process_acknack+0x48>
 8016c7a:	4605      	mov	r5, r0
 8016c7c:	2700      	movs	r7, #0
 8016c7e:	2101      	movs	r1, #1
 8016c80:	8a60      	ldrh	r0, [r4, #18]
 8016c82:	f000 f847 	bl	8016d14 <uxr_seq_num_add>
 8016c86:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016c8a:	fbb0 f3fc 	udiv	r3, r0, ip
 8016c8e:	e9d4 2100 	ldrd	r2, r1, [r4]
 8016c92:	fb0c 0313 	mls	r3, ip, r3, r0
 8016c96:	b29b      	uxth	r3, r3
 8016c98:	fbb1 f1fc 	udiv	r1, r1, ip
 8016c9c:	3701      	adds	r7, #1
 8016c9e:	fb03 f301 	mul.w	r3, r3, r1
 8016ca2:	42bd      	cmp	r5, r7
 8016ca4:	7b21      	ldrb	r1, [r4, #12]
 8016ca6:	8260      	strh	r0, [r4, #18]
 8016ca8:	50d1      	str	r1, [r2, r3]
 8016caa:	d1e8      	bne.n	8016c7e <uxr_process_acknack+0x1a>
 8016cac:	3e00      	subs	r6, #0
 8016cae:	f04f 0300 	mov.w	r3, #0
 8016cb2:	bf18      	it	ne
 8016cb4:	2601      	movne	r6, #1
 8016cb6:	f884 3020 	strb.w	r3, [r4, #32]
 8016cba:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8016cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016cc0 <uxr_is_output_up_to_date>:
 8016cc0:	8a01      	ldrh	r1, [r0, #16]
 8016cc2:	8a40      	ldrh	r0, [r0, #18]
 8016cc4:	b508      	push	{r3, lr}
 8016cc6:	f000 f82d 	bl	8016d24 <uxr_seq_num_cmp>
 8016cca:	fab0 f080 	clz	r0, r0
 8016cce:	0940      	lsrs	r0, r0, #5
 8016cd0:	bd08      	pop	{r3, pc}
 8016cd2:	bf00      	nop

08016cd4 <get_available_free_slots>:
 8016cd4:	8901      	ldrh	r1, [r0, #8]
 8016cd6:	b1d9      	cbz	r1, 8016d10 <get_available_free_slots+0x3c>
 8016cd8:	b4f0      	push	{r4, r5, r6, r7}
 8016cda:	2400      	movs	r4, #0
 8016cdc:	6845      	ldr	r5, [r0, #4]
 8016cde:	6807      	ldr	r7, [r0, #0]
 8016ce0:	7b06      	ldrb	r6, [r0, #12]
 8016ce2:	fbb5 f5f1 	udiv	r5, r5, r1
 8016ce6:	4620      	mov	r0, r4
 8016ce8:	4622      	mov	r2, r4
 8016cea:	fbb2 f3f1 	udiv	r3, r2, r1
 8016cee:	fb01 2313 	mls	r3, r1, r3, r2
 8016cf2:	b29b      	uxth	r3, r3
 8016cf4:	fb05 7303 	mla	r3, r5, r3, r7
 8016cf8:	3401      	adds	r4, #1
 8016cfa:	681b      	ldr	r3, [r3, #0]
 8016cfc:	429e      	cmp	r6, r3
 8016cfe:	bf08      	it	eq
 8016d00:	3001      	addeq	r0, #1
 8016d02:	b2a2      	uxth	r2, r4
 8016d04:	bf08      	it	eq
 8016d06:	b280      	uxtheq	r0, r0
 8016d08:	428a      	cmp	r2, r1
 8016d0a:	d3ee      	bcc.n	8016cea <get_available_free_slots+0x16>
 8016d0c:	bcf0      	pop	{r4, r5, r6, r7}
 8016d0e:	4770      	bx	lr
 8016d10:	4608      	mov	r0, r1
 8016d12:	4770      	bx	lr

08016d14 <uxr_seq_num_add>:
 8016d14:	4408      	add	r0, r1
 8016d16:	b280      	uxth	r0, r0
 8016d18:	4770      	bx	lr
 8016d1a:	bf00      	nop

08016d1c <uxr_seq_num_sub>:
 8016d1c:	1a40      	subs	r0, r0, r1
 8016d1e:	b280      	uxth	r0, r0
 8016d20:	4770      	bx	lr
 8016d22:	bf00      	nop

08016d24 <uxr_seq_num_cmp>:
 8016d24:	4288      	cmp	r0, r1
 8016d26:	d011      	beq.n	8016d4c <uxr_seq_num_cmp+0x28>
 8016d28:	d309      	bcc.n	8016d3e <uxr_seq_num_cmp+0x1a>
 8016d2a:	4288      	cmp	r0, r1
 8016d2c:	d910      	bls.n	8016d50 <uxr_seq_num_cmp+0x2c>
 8016d2e:	1a40      	subs	r0, r0, r1
 8016d30:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8016d34:	bfd4      	ite	le
 8016d36:	2001      	movle	r0, #1
 8016d38:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8016d3c:	4770      	bx	lr
 8016d3e:	1a0b      	subs	r3, r1, r0
 8016d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016d44:	daf1      	bge.n	8016d2a <uxr_seq_num_cmp+0x6>
 8016d46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016d4a:	4770      	bx	lr
 8016d4c:	2000      	movs	r0, #0
 8016d4e:	4770      	bx	lr
 8016d50:	2001      	movs	r0, #1
 8016d52:	4770      	bx	lr

08016d54 <uxr_init_framing_io>:
 8016d54:	2300      	movs	r3, #0
 8016d56:	7041      	strb	r1, [r0, #1]
 8016d58:	7003      	strb	r3, [r0, #0]
 8016d5a:	8583      	strh	r3, [r0, #44]	; 0x2c
 8016d5c:	4770      	bx	lr
 8016d5e:	bf00      	nop

08016d60 <uxr_write_framed_msg>:
 8016d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d64:	7845      	ldrb	r5, [r0, #1]
 8016d66:	b085      	sub	sp, #20
 8016d68:	4604      	mov	r4, r0
 8016d6a:	f1a5 0c7d 	sub.w	ip, r5, #125	; 0x7d
 8016d6e:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 8016d72:	f1bc 0f01 	cmp.w	ip, #1
 8016d76:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8016d7a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8016d7e:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
 8016d82:	460e      	mov	r6, r1
 8016d84:	4617      	mov	r7, r2
 8016d86:	469b      	mov	fp, r3
 8016d88:	f240 8116 	bls.w	8016fb8 <uxr_write_framed_msg+0x258>
 8016d8c:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8016d90:	2302      	movs	r3, #2
 8016d92:	2a01      	cmp	r2, #1
 8016d94:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8016d98:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8016d9c:	f240 8091 	bls.w	8016ec2 <uxr_write_framed_msg+0x162>
 8016da0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016da2:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8016da6:	b2d9      	uxtb	r1, r3
 8016da8:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8016dac:	2203      	movs	r2, #3
 8016dae:	2b01      	cmp	r3, #1
 8016db0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016db4:	f240 809a 	bls.w	8016eec <uxr_write_framed_msg+0x18c>
 8016db8:	18a3      	adds	r3, r4, r2
 8016dba:	3201      	adds	r2, #1
 8016dbc:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8016dc0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016dc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016dc6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016dca:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8016dce:	2901      	cmp	r1, #1
 8016dd0:	eb04 0102 	add.w	r1, r4, r2
 8016dd4:	f240 8101 	bls.w	8016fda <uxr_write_framed_msg+0x27a>
 8016dd8:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8016ddc:	3201      	adds	r2, #1
 8016dde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016de0:	b2d2      	uxtb	r2, r2
 8016de2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	f000 8106 	beq.w	8016ff8 <uxr_write_framed_msg+0x298>
 8016dec:	f04f 0a00 	mov.w	sl, #0
 8016df0:	46d1      	mov	r9, sl
 8016df2:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8016df6:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8016dfa:	2901      	cmp	r1, #1
 8016dfc:	f240 80a3 	bls.w	8016f46 <uxr_write_framed_msg+0x1e6>
 8016e00:	2a29      	cmp	r2, #41	; 0x29
 8016e02:	d87f      	bhi.n	8016f04 <uxr_write_framed_msg+0x1a4>
 8016e04:	18a1      	adds	r1, r4, r2
 8016e06:	3201      	adds	r2, #1
 8016e08:	b2d2      	uxtb	r2, r2
 8016e0a:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8016e0e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016e12:	ea8a 0303 	eor.w	r3, sl, r3
 8016e16:	4984      	ldr	r1, [pc, #528]	; (8017028 <uxr_write_framed_msg+0x2c8>)
 8016e18:	b2db      	uxtb	r3, r3
 8016e1a:	f109 0901 	add.w	r9, r9, #1
 8016e1e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016e22:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 8016e26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016e28:	454b      	cmp	r3, r9
 8016e2a:	d8e2      	bhi.n	8016df2 <uxr_write_framed_msg+0x92>
 8016e2c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8016e30:	fa5f f98a 	uxtb.w	r9, sl
 8016e34:	9301      	str	r3, [sp, #4]
 8016e36:	f04f 0b00 	mov.w	fp, #0
 8016e3a:	f88d 900c 	strb.w	r9, [sp, #12]
 8016e3e:	f88d 300d 	strb.w	r3, [sp, #13]
 8016e42:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 8016e46:	fa5f f18a 	uxtb.w	r1, sl
 8016e4a:	2901      	cmp	r1, #1
 8016e4c:	d920      	bls.n	8016e90 <uxr_write_framed_msg+0x130>
 8016e4e:	2a29      	cmp	r2, #41	; 0x29
 8016e50:	f240 808b 	bls.w	8016f6a <uxr_write_framed_msg+0x20a>
 8016e54:	2500      	movs	r5, #0
 8016e56:	e000      	b.n	8016e5a <uxr_write_framed_msg+0xfa>
 8016e58:	b160      	cbz	r0, 8016e74 <uxr_write_framed_msg+0x114>
 8016e5a:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8016e5e:	1b52      	subs	r2, r2, r5
 8016e60:	4421      	add	r1, r4
 8016e62:	4643      	mov	r3, r8
 8016e64:	4638      	mov	r0, r7
 8016e66:	47b0      	blx	r6
 8016e68:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8016e6c:	4405      	add	r5, r0
 8016e6e:	4295      	cmp	r5, r2
 8016e70:	d3f2      	bcc.n	8016e58 <uxr_write_framed_msg+0xf8>
 8016e72:	d003      	beq.n	8016e7c <uxr_write_framed_msg+0x11c>
 8016e74:	2000      	movs	r0, #0
 8016e76:	b005      	add	sp, #20
 8016e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e7c:	fa5f f18a 	uxtb.w	r1, sl
 8016e80:	f04f 0300 	mov.w	r3, #0
 8016e84:	2901      	cmp	r1, #1
 8016e86:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8016e8a:	f04f 0200 	mov.w	r2, #0
 8016e8e:	d86c      	bhi.n	8016f6a <uxr_write_framed_msg+0x20a>
 8016e90:	1c51      	adds	r1, r2, #1
 8016e92:	b2c9      	uxtb	r1, r1
 8016e94:	2929      	cmp	r1, #41	; 0x29
 8016e96:	d8dd      	bhi.n	8016e54 <uxr_write_framed_msg+0xf4>
 8016e98:	18a0      	adds	r0, r4, r2
 8016e9a:	3202      	adds	r2, #2
 8016e9c:	f089 0920 	eor.w	r9, r9, #32
 8016ea0:	b2d2      	uxtb	r2, r2
 8016ea2:	4659      	mov	r1, fp
 8016ea4:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8016ea8:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 8016eac:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8016eb0:	f04f 0b01 	mov.w	fp, #1
 8016eb4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016eb8:	2900      	cmp	r1, #0
 8016eba:	d162      	bne.n	8016f82 <uxr_write_framed_msg+0x222>
 8016ebc:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8016ec0:	e7bf      	b.n	8016e42 <uxr_write_framed_msg+0xe2>
 8016ec2:	2204      	movs	r2, #4
 8016ec4:	2503      	movs	r5, #3
 8016ec6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016ec8:	4423      	add	r3, r4
 8016eca:	b2c9      	uxtb	r1, r1
 8016ecc:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8016ed0:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 8016ed4:	4425      	add	r5, r4
 8016ed6:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8016eda:	f080 0020 	eor.w	r0, r0, #32
 8016ede:	2b01      	cmp	r3, #1
 8016ee0:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 8016ee4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016ee8:	f63f af66 	bhi.w	8016db8 <uxr_write_framed_msg+0x58>
 8016eec:	18a3      	adds	r3, r4, r2
 8016eee:	f081 0120 	eor.w	r1, r1, #32
 8016ef2:	3202      	adds	r2, #2
 8016ef4:	207d      	movs	r0, #125	; 0x7d
 8016ef6:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 8016efa:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
 8016efe:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016f02:	e75f      	b.n	8016dc4 <uxr_write_framed_msg+0x64>
 8016f04:	2500      	movs	r5, #0
 8016f06:	e001      	b.n	8016f0c <uxr_write_framed_msg+0x1ac>
 8016f08:	2800      	cmp	r0, #0
 8016f0a:	d0b3      	beq.n	8016e74 <uxr_write_framed_msg+0x114>
 8016f0c:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8016f10:	1b52      	subs	r2, r2, r5
 8016f12:	4421      	add	r1, r4
 8016f14:	4643      	mov	r3, r8
 8016f16:	4638      	mov	r0, r7
 8016f18:	47b0      	blx	r6
 8016f1a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8016f1e:	4405      	add	r5, r0
 8016f20:	4295      	cmp	r5, r2
 8016f22:	d3f1      	bcc.n	8016f08 <uxr_write_framed_msg+0x1a8>
 8016f24:	d1a6      	bne.n	8016e74 <uxr_write_framed_msg+0x114>
 8016f26:	f04f 0300 	mov.w	r3, #0
 8016f2a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8016f2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f30:	454b      	cmp	r3, r9
 8016f32:	d971      	bls.n	8017018 <uxr_write_framed_msg+0x2b8>
 8016f34:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8016f38:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8016f3c:	2901      	cmp	r1, #1
 8016f3e:	f04f 0200 	mov.w	r2, #0
 8016f42:	f63f af5d 	bhi.w	8016e00 <uxr_write_framed_msg+0xa0>
 8016f46:	1c51      	adds	r1, r2, #1
 8016f48:	b2c9      	uxtb	r1, r1
 8016f4a:	2929      	cmp	r1, #41	; 0x29
 8016f4c:	d8da      	bhi.n	8016f04 <uxr_write_framed_msg+0x1a4>
 8016f4e:	18a0      	adds	r0, r4, r2
 8016f50:	3202      	adds	r2, #2
 8016f52:	b2d2      	uxtb	r2, r2
 8016f54:	f083 0120 	eor.w	r1, r3, #32
 8016f58:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8016f5c:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8016f60:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 8016f64:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016f68:	e753      	b.n	8016e12 <uxr_write_framed_msg+0xb2>
 8016f6a:	18a0      	adds	r0, r4, r2
 8016f6c:	3201      	adds	r2, #1
 8016f6e:	b2d2      	uxtb	r2, r2
 8016f70:	4659      	mov	r1, fp
 8016f72:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 8016f76:	f04f 0b01 	mov.w	fp, #1
 8016f7a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016f7e:	2900      	cmp	r1, #0
 8016f80:	d09c      	beq.n	8016ebc <uxr_write_framed_msg+0x15c>
 8016f82:	2500      	movs	r5, #0
 8016f84:	e002      	b.n	8016f8c <uxr_write_framed_msg+0x22c>
 8016f86:	2800      	cmp	r0, #0
 8016f88:	f43f af74 	beq.w	8016e74 <uxr_write_framed_msg+0x114>
 8016f8c:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8016f90:	1b52      	subs	r2, r2, r5
 8016f92:	4421      	add	r1, r4
 8016f94:	4643      	mov	r3, r8
 8016f96:	4638      	mov	r0, r7
 8016f98:	47b0      	blx	r6
 8016f9a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8016f9e:	4405      	add	r5, r0
 8016fa0:	4295      	cmp	r5, r2
 8016fa2:	d3f0      	bcc.n	8016f86 <uxr_write_framed_msg+0x226>
 8016fa4:	f47f af66 	bne.w	8016e74 <uxr_write_framed_msg+0x114>
 8016fa8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016faa:	2300      	movs	r3, #0
 8016fac:	b290      	uxth	r0, r2
 8016fae:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8016fb2:	b005      	add	sp, #20
 8016fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fb8:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8016fbc:	f085 0520 	eor.w	r5, r5, #32
 8016fc0:	2303      	movs	r3, #3
 8016fc2:	217d      	movs	r1, #125	; 0x7d
 8016fc4:	2a01      	cmp	r2, #1
 8016fc6:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
 8016fca:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8016fce:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8016fd2:	d814      	bhi.n	8016ffe <uxr_write_framed_msg+0x29e>
 8016fd4:	2205      	movs	r2, #5
 8016fd6:	2504      	movs	r5, #4
 8016fd8:	e775      	b.n	8016ec6 <uxr_write_framed_msg+0x166>
 8016fda:	f083 0320 	eor.w	r3, r3, #32
 8016fde:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
 8016fe2:	3202      	adds	r2, #2
 8016fe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016fe6:	b2d2      	uxtb	r2, r2
 8016fe8:	207d      	movs	r0, #125	; 0x7d
 8016fea:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8016fee:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	f47f aefa 	bne.w	8016dec <uxr_write_framed_msg+0x8c>
 8016ff8:	9301      	str	r3, [sp, #4]
 8016ffa:	4699      	mov	r9, r3
 8016ffc:	e71b      	b.n	8016e36 <uxr_write_framed_msg+0xd6>
 8016ffe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017000:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8017004:	b2d9      	uxtb	r1, r3
 8017006:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 801700a:	2204      	movs	r2, #4
 801700c:	2b01      	cmp	r3, #1
 801700e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8017012:	f63f aed1 	bhi.w	8016db8 <uxr_write_framed_msg+0x58>
 8017016:	e769      	b.n	8016eec <uxr_write_framed_msg+0x18c>
 8017018:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801701c:	fa5f f98a 	uxtb.w	r9, sl
 8017020:	9301      	str	r3, [sp, #4]
 8017022:	2200      	movs	r2, #0
 8017024:	e707      	b.n	8016e36 <uxr_write_framed_msg+0xd6>
 8017026:	bf00      	nop
 8017028:	08019e30 	.word	0x08019e30

0801702c <uxr_framing_read_transport>:
 801702c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017030:	4604      	mov	r4, r0
 8017032:	b083      	sub	sp, #12
 8017034:	461f      	mov	r7, r3
 8017036:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 801703a:	4689      	mov	r9, r1
 801703c:	4692      	mov	sl, r2
 801703e:	f7fa fa07 	bl	8011450 <uxr_millis>
 8017042:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8017046:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 801704a:	42b3      	cmp	r3, r6
 801704c:	4680      	mov	r8, r0
 801704e:	d05f      	beq.n	8017110 <uxr_framing_read_transport+0xe4>
 8017050:	d81b      	bhi.n	801708a <uxr_framing_read_transport+0x5e>
 8017052:	1e75      	subs	r5, r6, #1
 8017054:	1aed      	subs	r5, r5, r3
 8017056:	b2ed      	uxtb	r5, r5
 8017058:	2600      	movs	r6, #0
 801705a:	455d      	cmp	r5, fp
 801705c:	d81e      	bhi.n	801709c <uxr_framing_read_transport+0x70>
 801705e:	19ab      	adds	r3, r5, r6
 8017060:	455b      	cmp	r3, fp
 8017062:	bf84      	itt	hi
 8017064:	ebab 0605 	subhi.w	r6, fp, r5
 8017068:	b2f6      	uxtbhi	r6, r6
 801706a:	b9e5      	cbnz	r5, 80170a6 <uxr_framing_read_transport+0x7a>
 801706c:	f04f 0b00 	mov.w	fp, #0
 8017070:	f7fa f9ee 	bl	8011450 <uxr_millis>
 8017074:	683b      	ldr	r3, [r7, #0]
 8017076:	eba0 0008 	sub.w	r0, r0, r8
 801707a:	1a1b      	subs	r3, r3, r0
 801707c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017080:	4658      	mov	r0, fp
 8017082:	603b      	str	r3, [r7, #0]
 8017084:	b003      	add	sp, #12
 8017086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801708a:	2e00      	cmp	r6, #0
 801708c:	d048      	beq.n	8017120 <uxr_framing_read_transport+0xf4>
 801708e:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8017092:	b2ed      	uxtb	r5, r5
 8017094:	3e01      	subs	r6, #1
 8017096:	455d      	cmp	r5, fp
 8017098:	b2f6      	uxtb	r6, r6
 801709a:	d9e0      	bls.n	801705e <uxr_framing_read_transport+0x32>
 801709c:	fa5f f58b 	uxtb.w	r5, fp
 80170a0:	2600      	movs	r6, #0
 80170a2:	2d00      	cmp	r5, #0
 80170a4:	d0e2      	beq.n	801706c <uxr_framing_read_transport+0x40>
 80170a6:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80170aa:	3102      	adds	r1, #2
 80170ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80170ae:	9300      	str	r3, [sp, #0]
 80170b0:	683b      	ldr	r3, [r7, #0]
 80170b2:	4421      	add	r1, r4
 80170b4:	462a      	mov	r2, r5
 80170b6:	4650      	mov	r0, sl
 80170b8:	47c8      	blx	r9
 80170ba:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80170be:	4a1b      	ldr	r2, [pc, #108]	; (801712c <uxr_framing_read_transport+0x100>)
 80170c0:	4403      	add	r3, r0
 80170c2:	0859      	lsrs	r1, r3, #1
 80170c4:	fba2 2101 	umull	r2, r1, r2, r1
 80170c8:	0889      	lsrs	r1, r1, #2
 80170ca:	222a      	movs	r2, #42	; 0x2a
 80170cc:	fb02 3111 	mls	r1, r2, r1, r3
 80170d0:	4683      	mov	fp, r0
 80170d2:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 80170d6:	2800      	cmp	r0, #0
 80170d8:	d0c8      	beq.n	801706c <uxr_framing_read_transport+0x40>
 80170da:	42a8      	cmp	r0, r5
 80170dc:	d1c8      	bne.n	8017070 <uxr_framing_read_transport+0x44>
 80170de:	b31e      	cbz	r6, 8017128 <uxr_framing_read_transport+0xfc>
 80170e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80170e2:	9300      	str	r3, [sp, #0]
 80170e4:	3102      	adds	r1, #2
 80170e6:	4421      	add	r1, r4
 80170e8:	4632      	mov	r2, r6
 80170ea:	2300      	movs	r3, #0
 80170ec:	4650      	mov	r0, sl
 80170ee:	47c8      	blx	r9
 80170f0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80170f4:	490d      	ldr	r1, [pc, #52]	; (801712c <uxr_framing_read_transport+0x100>)
 80170f6:	181a      	adds	r2, r3, r0
 80170f8:	0853      	lsrs	r3, r2, #1
 80170fa:	fba1 1303 	umull	r1, r3, r1, r3
 80170fe:	089b      	lsrs	r3, r3, #2
 8017100:	212a      	movs	r1, #42	; 0x2a
 8017102:	fb01 2313 	mls	r3, r1, r3, r2
 8017106:	eb00 0b05 	add.w	fp, r0, r5
 801710a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801710e:	e7af      	b.n	8017070 <uxr_framing_read_transport+0x44>
 8017110:	2600      	movs	r6, #0
 8017112:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8017116:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8017118:	d9c0      	bls.n	801709c <uxr_framing_read_transport+0x70>
 801711a:	2102      	movs	r1, #2
 801711c:	2529      	movs	r5, #41	; 0x29
 801711e:	e7c5      	b.n	80170ac <uxr_framing_read_transport+0x80>
 8017120:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8017124:	b2ed      	uxtb	r5, r5
 8017126:	e798      	b.n	801705a <uxr_framing_read_transport+0x2e>
 8017128:	46ab      	mov	fp, r5
 801712a:	e7a1      	b.n	8017070 <uxr_framing_read_transport+0x44>
 801712c:	30c30c31 	.word	0x30c30c31

08017130 <uxr_read_framed_msg>:
 8017130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017134:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 8017138:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 801713c:	42ae      	cmp	r6, r5
 801713e:	b083      	sub	sp, #12
 8017140:	4604      	mov	r4, r0
 8017142:	461f      	mov	r7, r3
 8017144:	4689      	mov	r9, r1
 8017146:	4692      	mov	sl, r2
 8017148:	f000 817d 	beq.w	8017446 <uxr_read_framed_msg+0x316>
 801714c:	7823      	ldrb	r3, [r4, #0]
 801714e:	4ecc      	ldr	r6, [pc, #816]	; (8017480 <uxr_read_framed_msg+0x350>)
 8017150:	f8df 8330 	ldr.w	r8, [pc, #816]	; 8017484 <uxr_read_framed_msg+0x354>
 8017154:	2b07      	cmp	r3, #7
 8017156:	d8fd      	bhi.n	8017154 <uxr_read_framed_msg+0x24>
 8017158:	e8df f013 	tbh	[pc, r3, lsl #1]
 801715c:	00f40113 	.word	0x00f40113
 8017160:	00b700d4 	.word	0x00b700d4
 8017164:	004d008e 	.word	0x004d008e
 8017168:	00080030 	.word	0x00080030
 801716c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8017170:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8017174:	4298      	cmp	r0, r3
 8017176:	f000 8141 	beq.w	80173fc <uxr_read_framed_msg+0x2cc>
 801717a:	18e2      	adds	r2, r4, r3
 801717c:	7891      	ldrb	r1, [r2, #2]
 801717e:	297d      	cmp	r1, #125	; 0x7d
 8017180:	f000 81a2 	beq.w	80174c8 <uxr_read_framed_msg+0x398>
 8017184:	3301      	adds	r3, #1
 8017186:	085a      	lsrs	r2, r3, #1
 8017188:	fba6 0202 	umull	r0, r2, r6, r2
 801718c:	0892      	lsrs	r2, r2, #2
 801718e:	202a      	movs	r0, #42	; 0x2a
 8017190:	fb00 3312 	mls	r3, r0, r2, r3
 8017194:	297e      	cmp	r1, #126	; 0x7e
 8017196:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801719a:	f000 8251 	beq.w	8017640 <uxr_read_framed_msg+0x510>
 801719e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80171a0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80171a2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80171a6:	b29b      	uxth	r3, r3
 80171a8:	2100      	movs	r1, #0
 80171aa:	429a      	cmp	r2, r3
 80171ac:	86a3      	strh	r3, [r4, #52]	; 0x34
 80171ae:	7021      	strb	r1, [r4, #0]
 80171b0:	f000 8182 	beq.w	80174b8 <uxr_read_framed_msg+0x388>
 80171b4:	2000      	movs	r0, #0
 80171b6:	b003      	add	sp, #12
 80171b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171bc:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80171c0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80171c4:	4298      	cmp	r0, r3
 80171c6:	f000 8128 	beq.w	801741a <uxr_read_framed_msg+0x2ea>
 80171ca:	18e2      	adds	r2, r4, r3
 80171cc:	7891      	ldrb	r1, [r2, #2]
 80171ce:	297d      	cmp	r1, #125	; 0x7d
 80171d0:	f000 8196 	beq.w	8017500 <uxr_read_framed_msg+0x3d0>
 80171d4:	3301      	adds	r3, #1
 80171d6:	085a      	lsrs	r2, r3, #1
 80171d8:	fba6 0202 	umull	r0, r2, r6, r2
 80171dc:	0892      	lsrs	r2, r2, #2
 80171de:	202a      	movs	r0, #42	; 0x2a
 80171e0:	fb00 3312 	mls	r3, r0, r2, r3
 80171e4:	297e      	cmp	r1, #126	; 0x7e
 80171e6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80171ea:	f000 8219 	beq.w	8017620 <uxr_read_framed_msg+0x4f0>
 80171ee:	2307      	movs	r3, #7
 80171f0:	86a1      	strh	r1, [r4, #52]	; 0x34
 80171f2:	7023      	strb	r3, [r4, #0]
 80171f4:	e7ae      	b.n	8017154 <uxr_read_framed_msg+0x24>
 80171f6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80171f8:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 80171fa:	429d      	cmp	r5, r3
 80171fc:	d937      	bls.n	801726e <uxr_read_framed_msg+0x13e>
 80171fe:	ee07 9a90 	vmov	s15, r9
 8017202:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8017206:	e01e      	b.n	8017246 <uxr_read_framed_msg+0x116>
 8017208:	f89e e002 	ldrb.w	lr, [lr, #2]
 801720c:	f1be 0f7d 	cmp.w	lr, #125	; 0x7d
 8017210:	f000 80d2 	beq.w	80173b8 <uxr_read_framed_msg+0x288>
 8017214:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8017218:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801721c:	f000 8214 	beq.w	8017648 <uxr_read_framed_msg+0x518>
 8017220:	f807 e003 	strb.w	lr, [r7, r3]
 8017224:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8017226:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8017228:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 801722a:	ea80 010e 	eor.w	r1, r0, lr
 801722e:	b2c9      	uxtb	r1, r1
 8017230:	3301      	adds	r3, #1
 8017232:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 8017236:	b29b      	uxth	r3, r3
 8017238:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 801723c:	42ab      	cmp	r3, r5
 801723e:	86e2      	strh	r2, [r4, #54]	; 0x36
 8017240:	8663      	strh	r3, [r4, #50]	; 0x32
 8017242:	f080 8121 	bcs.w	8017488 <uxr_read_framed_msg+0x358>
 8017246:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 801724a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801724e:	f101 0b01 	add.w	fp, r1, #1
 8017252:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8017256:	fba6 9202 	umull	r9, r2, r6, r2
 801725a:	0892      	lsrs	r2, r2, #2
 801725c:	4288      	cmp	r0, r1
 801725e:	eb04 0e01 	add.w	lr, r4, r1
 8017262:	fb0c b212 	mls	r2, ip, r2, fp
 8017266:	d1cf      	bne.n	8017208 <uxr_read_framed_msg+0xd8>
 8017268:	ee17 9a90 	vmov	r9, s15
 801726c:	429d      	cmp	r5, r3
 801726e:	f040 8112 	bne.w	8017496 <uxr_read_framed_msg+0x366>
 8017272:	2306      	movs	r3, #6
 8017274:	7023      	strb	r3, [r4, #0]
 8017276:	e76d      	b.n	8017154 <uxr_read_framed_msg+0x24>
 8017278:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801727c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8017280:	4298      	cmp	r0, r3
 8017282:	f000 80bb 	beq.w	80173fc <uxr_read_framed_msg+0x2cc>
 8017286:	18e2      	adds	r2, r4, r3
 8017288:	7891      	ldrb	r1, [r2, #2]
 801728a:	297d      	cmp	r1, #125	; 0x7d
 801728c:	f000 8153 	beq.w	8017536 <uxr_read_framed_msg+0x406>
 8017290:	3301      	adds	r3, #1
 8017292:	085a      	lsrs	r2, r3, #1
 8017294:	fba6 0202 	umull	r0, r2, r6, r2
 8017298:	0892      	lsrs	r2, r2, #2
 801729a:	202a      	movs	r0, #42	; 0x2a
 801729c:	fb00 3212 	mls	r2, r0, r2, r3
 80172a0:	297e      	cmp	r1, #126	; 0x7e
 80172a2:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80172a6:	f000 81cb 	beq.w	8017640 <uxr_read_framed_msg+0x510>
 80172aa:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80172ac:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80172b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80172b2:	b29b      	uxth	r3, r3
 80172b4:	2000      	movs	r0, #0
 80172b6:	428b      	cmp	r3, r1
 80172b8:	8623      	strh	r3, [r4, #48]	; 0x30
 80172ba:	8660      	strh	r0, [r4, #50]	; 0x32
 80172bc:	86e0      	strh	r0, [r4, #54]	; 0x36
 80172be:	f240 80db 	bls.w	8017478 <uxr_read_framed_msg+0x348>
 80172c2:	7020      	strb	r0, [r4, #0]
 80172c4:	b003      	add	sp, #12
 80172c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172ca:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80172ce:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80172d2:	4298      	cmp	r0, r3
 80172d4:	f000 80a1 	beq.w	801741a <uxr_read_framed_msg+0x2ea>
 80172d8:	18e2      	adds	r2, r4, r3
 80172da:	7891      	ldrb	r1, [r2, #2]
 80172dc:	297d      	cmp	r1, #125	; 0x7d
 80172de:	f000 8167 	beq.w	80175b0 <uxr_read_framed_msg+0x480>
 80172e2:	3301      	adds	r3, #1
 80172e4:	085a      	lsrs	r2, r3, #1
 80172e6:	fba6 0202 	umull	r0, r2, r6, r2
 80172ea:	0892      	lsrs	r2, r2, #2
 80172ec:	202a      	movs	r0, #42	; 0x2a
 80172ee:	fb00 3312 	mls	r3, r0, r2, r3
 80172f2:	297e      	cmp	r1, #126	; 0x7e
 80172f4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80172f8:	f000 8192 	beq.w	8017620 <uxr_read_framed_msg+0x4f0>
 80172fc:	2304      	movs	r3, #4
 80172fe:	8621      	strh	r1, [r4, #48]	; 0x30
 8017300:	7023      	strb	r3, [r4, #0]
 8017302:	e727      	b.n	8017154 <uxr_read_framed_msg+0x24>
 8017304:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8017308:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801730c:	4290      	cmp	r0, r2
 801730e:	f000 80b1 	beq.w	8017474 <uxr_read_framed_msg+0x344>
 8017312:	18a3      	adds	r3, r4, r2
 8017314:	7899      	ldrb	r1, [r3, #2]
 8017316:	297d      	cmp	r1, #125	; 0x7d
 8017318:	f000 8166 	beq.w	80175e8 <uxr_read_framed_msg+0x4b8>
 801731c:	3201      	adds	r2, #1
 801731e:	0850      	lsrs	r0, r2, #1
 8017320:	fba6 3000 	umull	r3, r0, r6, r0
 8017324:	0880      	lsrs	r0, r0, #2
 8017326:	232a      	movs	r3, #42	; 0x2a
 8017328:	fb03 2210 	mls	r2, r3, r0, r2
 801732c:	297e      	cmp	r1, #126	; 0x7e
 801732e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8017332:	f000 8187 	beq.w	8017644 <uxr_read_framed_msg+0x514>
 8017336:	7863      	ldrb	r3, [r4, #1]
 8017338:	428b      	cmp	r3, r1
 801733a:	bf0c      	ite	eq
 801733c:	2303      	moveq	r3, #3
 801733e:	2300      	movne	r3, #0
 8017340:	7023      	strb	r3, [r4, #0]
 8017342:	e707      	b.n	8017154 <uxr_read_framed_msg+0x24>
 8017344:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8017348:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801734c:	2200      	movs	r2, #0
 801734e:	4299      	cmp	r1, r3
 8017350:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8017354:	d063      	beq.n	801741e <uxr_read_framed_msg+0x2ee>
 8017356:	18e2      	adds	r2, r4, r3
 8017358:	7892      	ldrb	r2, [r2, #2]
 801735a:	2a7d      	cmp	r2, #125	; 0x7d
 801735c:	f000 8107 	beq.w	801756e <uxr_read_framed_msg+0x43e>
 8017360:	1c59      	adds	r1, r3, #1
 8017362:	084b      	lsrs	r3, r1, #1
 8017364:	fba6 0303 	umull	r0, r3, r6, r3
 8017368:	089b      	lsrs	r3, r3, #2
 801736a:	202a      	movs	r0, #42	; 0x2a
 801736c:	fb00 1313 	mls	r3, r0, r3, r1
 8017370:	2a7e      	cmp	r2, #126	; 0x7e
 8017372:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8017376:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801737a:	d050      	beq.n	801741e <uxr_read_framed_msg+0x2ee>
 801737c:	2302      	movs	r3, #2
 801737e:	7023      	strb	r3, [r4, #0]
 8017380:	e6e8      	b.n	8017154 <uxr_read_framed_msg+0x24>
 8017382:	f894 e02c 	ldrb.w	lr, [r4, #44]	; 0x2c
 8017386:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801738a:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801738e:	1c51      	adds	r1, r2, #1
 8017390:	084b      	lsrs	r3, r1, #1
 8017392:	fba6 5303 	umull	r5, r3, r6, r3
 8017396:	089b      	lsrs	r3, r3, #2
 8017398:	fb0c 1313 	mls	r3, ip, r3, r1
 801739c:	4596      	cmp	lr, r2
 801739e:	eb04 0002 	add.w	r0, r4, r2
 80173a2:	b2da      	uxtb	r2, r3
 80173a4:	f43f af06 	beq.w	80171b4 <uxr_read_framed_msg+0x84>
 80173a8:	7883      	ldrb	r3, [r0, #2]
 80173aa:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80173ae:	2b7e      	cmp	r3, #126	; 0x7e
 80173b0:	d1ed      	bne.n	801738e <uxr_read_framed_msg+0x25e>
 80173b2:	2301      	movs	r3, #1
 80173b4:	7023      	strb	r3, [r4, #0]
 80173b6:	e6cd      	b.n	8017154 <uxr_read_framed_msg+0x24>
 80173b8:	f101 0b01 	add.w	fp, r1, #1
 80173bc:	ea4f 025b 	mov.w	r2, fp, lsr #1
 80173c0:	fba6 e202 	umull	lr, r2, r6, r2
 80173c4:	3102      	adds	r1, #2
 80173c6:	0892      	lsrs	r2, r2, #2
 80173c8:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 80173cc:	fb0c b212 	mls	r2, ip, r2, fp
 80173d0:	fba6 9e0e 	umull	r9, lr, r6, lr
 80173d4:	eb04 0b02 	add.w	fp, r4, r2
 80173d8:	b2d2      	uxtb	r2, r2
 80173da:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 80173de:	4290      	cmp	r0, r2
 80173e0:	fb0c 111e 	mls	r1, ip, lr, r1
 80173e4:	f43f af40 	beq.w	8017268 <uxr_read_framed_msg+0x138>
 80173e8:	f89b e002 	ldrb.w	lr, [fp, #2]
 80173ec:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 80173f0:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 80173f4:	d036      	beq.n	8017464 <uxr_read_framed_msg+0x334>
 80173f6:	f08e 0e20 	eor.w	lr, lr, #32
 80173fa:	e711      	b.n	8017220 <uxr_read_framed_msg+0xf0>
 80173fc:	2301      	movs	r3, #1
 80173fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017400:	4649      	mov	r1, r9
 8017402:	e9cd 2300 	strd	r2, r3, [sp]
 8017406:	4620      	mov	r0, r4
 8017408:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801740a:	4652      	mov	r2, sl
 801740c:	f7ff fe0e 	bl	801702c <uxr_framing_read_transport>
 8017410:	2800      	cmp	r0, #0
 8017412:	f43f aecf 	beq.w	80171b4 <uxr_read_framed_msg+0x84>
 8017416:	7823      	ldrb	r3, [r4, #0]
 8017418:	e69c      	b.n	8017154 <uxr_read_framed_msg+0x24>
 801741a:	2302      	movs	r3, #2
 801741c:	e7ef      	b.n	80173fe <uxr_read_framed_msg+0x2ce>
 801741e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017420:	2304      	movs	r3, #4
 8017422:	e9cd 2300 	strd	r2, r3, [sp]
 8017426:	4649      	mov	r1, r9
 8017428:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801742a:	4652      	mov	r2, sl
 801742c:	4620      	mov	r0, r4
 801742e:	f7ff fdfd 	bl	801702c <uxr_framing_read_transport>
 8017432:	2800      	cmp	r0, #0
 8017434:	d1ef      	bne.n	8017416 <uxr_read_framed_msg+0x2e6>
 8017436:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 801743a:	387e      	subs	r0, #126	; 0x7e
 801743c:	bf18      	it	ne
 801743e:	2001      	movne	r0, #1
 8017440:	2800      	cmp	r0, #0
 8017442:	d0e8      	beq.n	8017416 <uxr_read_framed_msg+0x2e6>
 8017444:	e6b6      	b.n	80171b4 <uxr_read_framed_msg+0x84>
 8017446:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8017448:	2305      	movs	r3, #5
 801744a:	e9cd 5300 	strd	r5, r3, [sp]
 801744e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017450:	f7ff fdec 	bl	801702c <uxr_framing_read_transport>
 8017454:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8017458:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801745c:	429a      	cmp	r2, r3
 801745e:	f43f aea9 	beq.w	80171b4 <uxr_read_framed_msg+0x84>
 8017462:	e673      	b.n	801714c <uxr_read_framed_msg+0x1c>
 8017464:	429d      	cmp	r5, r3
 8017466:	ee17 9a90 	vmov	r9, s15
 801746a:	f43f af02 	beq.w	8017272 <uxr_read_framed_msg+0x142>
 801746e:	2301      	movs	r3, #1
 8017470:	7023      	strb	r3, [r4, #0]
 8017472:	e66f      	b.n	8017154 <uxr_read_framed_msg+0x24>
 8017474:	2303      	movs	r3, #3
 8017476:	e7c2      	b.n	80173fe <uxr_read_framed_msg+0x2ce>
 8017478:	2305      	movs	r3, #5
 801747a:	7023      	strb	r3, [r4, #0]
 801747c:	e66a      	b.n	8017154 <uxr_read_framed_msg+0x24>
 801747e:	bf00      	nop
 8017480:	30c30c31 	.word	0x30c30c31
 8017484:	08019e30 	.word	0x08019e30
 8017488:	ee17 9a90 	vmov	r9, s15
 801748c:	f43f aef1 	beq.w	8017272 <uxr_read_framed_msg+0x142>
 8017490:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8017494:	d08d      	beq.n	80173b2 <uxr_read_framed_msg+0x282>
 8017496:	1aeb      	subs	r3, r5, r3
 8017498:	3302      	adds	r3, #2
 801749a:	9301      	str	r3, [sp, #4]
 801749c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801749e:	9300      	str	r3, [sp, #0]
 80174a0:	4652      	mov	r2, sl
 80174a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80174a4:	4649      	mov	r1, r9
 80174a6:	4620      	mov	r0, r4
 80174a8:	f7ff fdc0 	bl	801702c <uxr_framing_read_transport>
 80174ac:	fab0 f080 	clz	r0, r0
 80174b0:	0940      	lsrs	r0, r0, #5
 80174b2:	2800      	cmp	r0, #0
 80174b4:	d0af      	beq.n	8017416 <uxr_read_framed_msg+0x2e6>
 80174b6:	e67d      	b.n	80171b4 <uxr_read_framed_msg+0x84>
 80174b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80174ba:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80174be:	7013      	strb	r3, [r2, #0]
 80174c0:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 80174c2:	b003      	add	sp, #12
 80174c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174c8:	1c59      	adds	r1, r3, #1
 80174ca:	084a      	lsrs	r2, r1, #1
 80174cc:	fba6 5202 	umull	r5, r2, r6, r2
 80174d0:	0892      	lsrs	r2, r2, #2
 80174d2:	252a      	movs	r5, #42	; 0x2a
 80174d4:	fb05 1212 	mls	r2, r5, r2, r1
 80174d8:	b2d1      	uxtb	r1, r2
 80174da:	4288      	cmp	r0, r1
 80174dc:	d08e      	beq.n	80173fc <uxr_read_framed_msg+0x2cc>
 80174de:	3302      	adds	r3, #2
 80174e0:	4422      	add	r2, r4
 80174e2:	0858      	lsrs	r0, r3, #1
 80174e4:	fba6 1000 	umull	r1, r0, r6, r0
 80174e8:	7891      	ldrb	r1, [r2, #2]
 80174ea:	0882      	lsrs	r2, r0, #2
 80174ec:	fb05 3312 	mls	r3, r5, r2, r3
 80174f0:	297e      	cmp	r1, #126	; 0x7e
 80174f2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80174f6:	f000 80a3 	beq.w	8017640 <uxr_read_framed_msg+0x510>
 80174fa:	f081 0120 	eor.w	r1, r1, #32
 80174fe:	e64e      	b.n	801719e <uxr_read_framed_msg+0x6e>
 8017500:	1c59      	adds	r1, r3, #1
 8017502:	084a      	lsrs	r2, r1, #1
 8017504:	fba6 5202 	umull	r5, r2, r6, r2
 8017508:	0892      	lsrs	r2, r2, #2
 801750a:	252a      	movs	r5, #42	; 0x2a
 801750c:	fb05 1212 	mls	r2, r5, r2, r1
 8017510:	b2d1      	uxtb	r1, r2
 8017512:	4288      	cmp	r0, r1
 8017514:	d081      	beq.n	801741a <uxr_read_framed_msg+0x2ea>
 8017516:	3302      	adds	r3, #2
 8017518:	4422      	add	r2, r4
 801751a:	0858      	lsrs	r0, r3, #1
 801751c:	fba6 1000 	umull	r1, r0, r6, r0
 8017520:	7891      	ldrb	r1, [r2, #2]
 8017522:	0882      	lsrs	r2, r0, #2
 8017524:	fb05 3312 	mls	r3, r5, r2, r3
 8017528:	297e      	cmp	r1, #126	; 0x7e
 801752a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801752e:	d077      	beq.n	8017620 <uxr_read_framed_msg+0x4f0>
 8017530:	f081 0120 	eor.w	r1, r1, #32
 8017534:	e65b      	b.n	80171ee <uxr_read_framed_msg+0xbe>
 8017536:	1c59      	adds	r1, r3, #1
 8017538:	084a      	lsrs	r2, r1, #1
 801753a:	fba6 5202 	umull	r5, r2, r6, r2
 801753e:	0892      	lsrs	r2, r2, #2
 8017540:	252a      	movs	r5, #42	; 0x2a
 8017542:	fb05 1212 	mls	r2, r5, r2, r1
 8017546:	b2d1      	uxtb	r1, r2
 8017548:	4288      	cmp	r0, r1
 801754a:	f43f af57 	beq.w	80173fc <uxr_read_framed_msg+0x2cc>
 801754e:	3302      	adds	r3, #2
 8017550:	4422      	add	r2, r4
 8017552:	0858      	lsrs	r0, r3, #1
 8017554:	fba6 1000 	umull	r1, r0, r6, r0
 8017558:	7891      	ldrb	r1, [r2, #2]
 801755a:	0882      	lsrs	r2, r0, #2
 801755c:	fb05 3312 	mls	r3, r5, r2, r3
 8017560:	297e      	cmp	r1, #126	; 0x7e
 8017562:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017566:	d06b      	beq.n	8017640 <uxr_read_framed_msg+0x510>
 8017568:	f081 0120 	eor.w	r1, r1, #32
 801756c:	e69d      	b.n	80172aa <uxr_read_framed_msg+0x17a>
 801756e:	1c5d      	adds	r5, r3, #1
 8017570:	086a      	lsrs	r2, r5, #1
 8017572:	fba6 0202 	umull	r0, r2, r6, r2
 8017576:	0892      	lsrs	r2, r2, #2
 8017578:	202a      	movs	r0, #42	; 0x2a
 801757a:	fb00 5212 	mls	r2, r0, r2, r5
 801757e:	b2d5      	uxtb	r5, r2
 8017580:	42a9      	cmp	r1, r5
 8017582:	f43f af4c 	beq.w	801741e <uxr_read_framed_msg+0x2ee>
 8017586:	3302      	adds	r3, #2
 8017588:	4422      	add	r2, r4
 801758a:	0859      	lsrs	r1, r3, #1
 801758c:	fba6 5101 	umull	r5, r1, r6, r1
 8017590:	7895      	ldrb	r5, [r2, #2]
 8017592:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 8017596:	088a      	lsrs	r2, r1, #2
 8017598:	fb00 3312 	mls	r3, r0, r2, r3
 801759c:	2d7e      	cmp	r5, #126	; 0x7e
 801759e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80175a2:	f43f af3c 	beq.w	801741e <uxr_read_framed_msg+0x2ee>
 80175a6:	f085 0520 	eor.w	r5, r5, #32
 80175aa:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 80175ae:	e6e5      	b.n	801737c <uxr_read_framed_msg+0x24c>
 80175b0:	1c59      	adds	r1, r3, #1
 80175b2:	084a      	lsrs	r2, r1, #1
 80175b4:	fba6 5202 	umull	r5, r2, r6, r2
 80175b8:	0892      	lsrs	r2, r2, #2
 80175ba:	252a      	movs	r5, #42	; 0x2a
 80175bc:	fb05 1212 	mls	r2, r5, r2, r1
 80175c0:	b2d1      	uxtb	r1, r2
 80175c2:	4288      	cmp	r0, r1
 80175c4:	f43f af29 	beq.w	801741a <uxr_read_framed_msg+0x2ea>
 80175c8:	3302      	adds	r3, #2
 80175ca:	4422      	add	r2, r4
 80175cc:	0858      	lsrs	r0, r3, #1
 80175ce:	fba6 1000 	umull	r1, r0, r6, r0
 80175d2:	7891      	ldrb	r1, [r2, #2]
 80175d4:	0882      	lsrs	r2, r0, #2
 80175d6:	fb05 3312 	mls	r3, r5, r2, r3
 80175da:	297e      	cmp	r1, #126	; 0x7e
 80175dc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80175e0:	d01e      	beq.n	8017620 <uxr_read_framed_msg+0x4f0>
 80175e2:	f081 0120 	eor.w	r1, r1, #32
 80175e6:	e689      	b.n	80172fc <uxr_read_framed_msg+0x1cc>
 80175e8:	1c51      	adds	r1, r2, #1
 80175ea:	084b      	lsrs	r3, r1, #1
 80175ec:	fba6 5303 	umull	r5, r3, r6, r3
 80175f0:	089b      	lsrs	r3, r3, #2
 80175f2:	252a      	movs	r5, #42	; 0x2a
 80175f4:	fb05 1313 	mls	r3, r5, r3, r1
 80175f8:	b2d9      	uxtb	r1, r3
 80175fa:	4288      	cmp	r0, r1
 80175fc:	f43f af3a 	beq.w	8017474 <uxr_read_framed_msg+0x344>
 8017600:	3202      	adds	r2, #2
 8017602:	4423      	add	r3, r4
 8017604:	0850      	lsrs	r0, r2, #1
 8017606:	789b      	ldrb	r3, [r3, #2]
 8017608:	fba6 1000 	umull	r1, r0, r6, r0
 801760c:	0880      	lsrs	r0, r0, #2
 801760e:	fb05 2210 	mls	r2, r5, r0, r2
 8017612:	2b7e      	cmp	r3, #126	; 0x7e
 8017614:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8017618:	d014      	beq.n	8017644 <uxr_read_framed_msg+0x514>
 801761a:	f083 0120 	eor.w	r1, r3, #32
 801761e:	e68a      	b.n	8017336 <uxr_read_framed_msg+0x206>
 8017620:	2302      	movs	r3, #2
 8017622:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017624:	4649      	mov	r1, r9
 8017626:	e9cd 2300 	strd	r2, r3, [sp]
 801762a:	4620      	mov	r0, r4
 801762c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801762e:	4652      	mov	r2, sl
 8017630:	f7ff fcfc 	bl	801702c <uxr_framing_read_transport>
 8017634:	2800      	cmp	r0, #0
 8017636:	f47f aeee 	bne.w	8017416 <uxr_read_framed_msg+0x2e6>
 801763a:	2301      	movs	r3, #1
 801763c:	7023      	strb	r3, [r4, #0]
 801763e:	e589      	b.n	8017154 <uxr_read_framed_msg+0x24>
 8017640:	2301      	movs	r3, #1
 8017642:	e7ee      	b.n	8017622 <uxr_read_framed_msg+0x4f2>
 8017644:	2303      	movs	r3, #3
 8017646:	e7ec      	b.n	8017622 <uxr_read_framed_msg+0x4f2>
 8017648:	ee17 9a90 	vmov	r9, s15
 801764c:	e6b1      	b.n	80173b2 <uxr_read_framed_msg+0x282>
 801764e:	bf00      	nop

08017650 <rcl_get_default_domain_id>:
 8017650:	b530      	push	{r4, r5, lr}
 8017652:	b083      	sub	sp, #12
 8017654:	2300      	movs	r3, #0
 8017656:	9300      	str	r3, [sp, #0]
 8017658:	b1d0      	cbz	r0, 8017690 <rcl_get_default_domain_id+0x40>
 801765a:	4604      	mov	r4, r0
 801765c:	4669      	mov	r1, sp
 801765e:	4815      	ldr	r0, [pc, #84]	; (80176b4 <rcl_get_default_domain_id+0x64>)
 8017660:	f7fd fa6a 	bl	8014b38 <rcutils_get_env>
 8017664:	4602      	mov	r2, r0
 8017666:	b110      	cbz	r0, 801766e <rcl_get_default_domain_id+0x1e>
 8017668:	2001      	movs	r0, #1
 801766a:	b003      	add	sp, #12
 801766c:	bd30      	pop	{r4, r5, pc}
 801766e:	9b00      	ldr	r3, [sp, #0]
 8017670:	b18b      	cbz	r3, 8017696 <rcl_get_default_domain_id+0x46>
 8017672:	7818      	ldrb	r0, [r3, #0]
 8017674:	2800      	cmp	r0, #0
 8017676:	d0f8      	beq.n	801766a <rcl_get_default_domain_id+0x1a>
 8017678:	4618      	mov	r0, r3
 801767a:	a901      	add	r1, sp, #4
 801767c:	9201      	str	r2, [sp, #4]
 801767e:	f000 fc07 	bl	8017e90 <strtoul>
 8017682:	4605      	mov	r5, r0
 8017684:	b150      	cbz	r0, 801769c <rcl_get_default_domain_id+0x4c>
 8017686:	1c43      	adds	r3, r0, #1
 8017688:	d00d      	beq.n	80176a6 <rcl_get_default_domain_id+0x56>
 801768a:	6025      	str	r5, [r4, #0]
 801768c:	2000      	movs	r0, #0
 801768e:	e7ec      	b.n	801766a <rcl_get_default_domain_id+0x1a>
 8017690:	200b      	movs	r0, #11
 8017692:	b003      	add	sp, #12
 8017694:	bd30      	pop	{r4, r5, pc}
 8017696:	4618      	mov	r0, r3
 8017698:	b003      	add	sp, #12
 801769a:	bd30      	pop	{r4, r5, pc}
 801769c:	9b01      	ldr	r3, [sp, #4]
 801769e:	781b      	ldrb	r3, [r3, #0]
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d0f2      	beq.n	801768a <rcl_get_default_domain_id+0x3a>
 80176a4:	e7e0      	b.n	8017668 <rcl_get_default_domain_id+0x18>
 80176a6:	f000 ffc9 	bl	801863c <__errno>
 80176aa:	6803      	ldr	r3, [r0, #0]
 80176ac:	2b22      	cmp	r3, #34	; 0x22
 80176ae:	d1ec      	bne.n	801768a <rcl_get_default_domain_id+0x3a>
 80176b0:	e7da      	b.n	8017668 <rcl_get_default_domain_id+0x18>
 80176b2:	bf00      	nop
 80176b4:	0801a030 	.word	0x0801a030

080176b8 <rcl_get_zero_initialized_guard_condition>:
 80176b8:	4a03      	ldr	r2, [pc, #12]	; (80176c8 <rcl_get_zero_initialized_guard_condition+0x10>)
 80176ba:	4603      	mov	r3, r0
 80176bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80176c0:	e883 0003 	stmia.w	r3, {r0, r1}
 80176c4:	4618      	mov	r0, r3
 80176c6:	4770      	bx	lr
 80176c8:	0801a040 	.word	0x0801a040

080176cc <rcl_guard_condition_init_from_rmw>:
 80176cc:	b082      	sub	sp, #8
 80176ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176d2:	b086      	sub	sp, #24
 80176d4:	ac0c      	add	r4, sp, #48	; 0x30
 80176d6:	4684      	mov	ip, r0
 80176d8:	f844 3f04 	str.w	r3, [r4, #4]!
 80176dc:	460f      	mov	r7, r1
 80176de:	4690      	mov	r8, r2
 80176e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80176e2:	ad01      	add	r5, sp, #4
 80176e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80176e6:	6823      	ldr	r3, [r4, #0]
 80176e8:	602b      	str	r3, [r5, #0]
 80176ea:	a801      	add	r0, sp, #4
 80176ec:	4664      	mov	r4, ip
 80176ee:	f7f5 ffed 	bl	800d6cc <rcutils_allocator_is_valid>
 80176f2:	b328      	cbz	r0, 8017740 <rcl_guard_condition_init_from_rmw+0x74>
 80176f4:	b324      	cbz	r4, 8017740 <rcl_guard_condition_init_from_rmw+0x74>
 80176f6:	6866      	ldr	r6, [r4, #4]
 80176f8:	b9e6      	cbnz	r6, 8017734 <rcl_guard_condition_init_from_rmw+0x68>
 80176fa:	f1b8 0f00 	cmp.w	r8, #0
 80176fe:	d01f      	beq.n	8017740 <rcl_guard_condition_init_from_rmw+0x74>
 8017700:	4640      	mov	r0, r8
 8017702:	f7fb f92f 	bl	8012964 <rcl_context_is_valid>
 8017706:	b308      	cbz	r0, 801774c <rcl_guard_condition_init_from_rmw+0x80>
 8017708:	9b01      	ldr	r3, [sp, #4]
 801770a:	9905      	ldr	r1, [sp, #20]
 801770c:	201c      	movs	r0, #28
 801770e:	4798      	blx	r3
 8017710:	4605      	mov	r5, r0
 8017712:	6060      	str	r0, [r4, #4]
 8017714:	b340      	cbz	r0, 8017768 <rcl_guard_condition_init_from_rmw+0x9c>
 8017716:	b1df      	cbz	r7, 8017750 <rcl_guard_condition_init_from_rmw+0x84>
 8017718:	6007      	str	r7, [r0, #0]
 801771a:	7106      	strb	r6, [r0, #4]
 801771c:	ac01      	add	r4, sp, #4
 801771e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017720:	3508      	adds	r5, #8
 8017722:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017724:	6823      	ldr	r3, [r4, #0]
 8017726:	602b      	str	r3, [r5, #0]
 8017728:	2000      	movs	r0, #0
 801772a:	b006      	add	sp, #24
 801772c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017730:	b002      	add	sp, #8
 8017732:	4770      	bx	lr
 8017734:	2064      	movs	r0, #100	; 0x64
 8017736:	b006      	add	sp, #24
 8017738:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801773c:	b002      	add	sp, #8
 801773e:	4770      	bx	lr
 8017740:	200b      	movs	r0, #11
 8017742:	b006      	add	sp, #24
 8017744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017748:	b002      	add	sp, #8
 801774a:	4770      	bx	lr
 801774c:	2065      	movs	r0, #101	; 0x65
 801774e:	e7f2      	b.n	8017736 <rcl_guard_condition_init_from_rmw+0x6a>
 8017750:	f8d8 0000 	ldr.w	r0, [r8]
 8017754:	3028      	adds	r0, #40	; 0x28
 8017756:	f000 f93b 	bl	80179d0 <rmw_create_guard_condition>
 801775a:	6028      	str	r0, [r5, #0]
 801775c:	6865      	ldr	r5, [r4, #4]
 801775e:	682e      	ldr	r6, [r5, #0]
 8017760:	b126      	cbz	r6, 801776c <rcl_guard_condition_init_from_rmw+0xa0>
 8017762:	2301      	movs	r3, #1
 8017764:	712b      	strb	r3, [r5, #4]
 8017766:	e7d9      	b.n	801771c <rcl_guard_condition_init_from_rmw+0x50>
 8017768:	200a      	movs	r0, #10
 801776a:	e7e4      	b.n	8017736 <rcl_guard_condition_init_from_rmw+0x6a>
 801776c:	4628      	mov	r0, r5
 801776e:	9b02      	ldr	r3, [sp, #8]
 8017770:	9905      	ldr	r1, [sp, #20]
 8017772:	4798      	blx	r3
 8017774:	6066      	str	r6, [r4, #4]
 8017776:	2001      	movs	r0, #1
 8017778:	e7dd      	b.n	8017736 <rcl_guard_condition_init_from_rmw+0x6a>
 801777a:	bf00      	nop

0801777c <rcl_guard_condition_fini>:
 801777c:	b570      	push	{r4, r5, r6, lr}
 801777e:	b082      	sub	sp, #8
 8017780:	b1f0      	cbz	r0, 80177c0 <rcl_guard_condition_fini+0x44>
 8017782:	4604      	mov	r4, r0
 8017784:	6840      	ldr	r0, [r0, #4]
 8017786:	b158      	cbz	r0, 80177a0 <rcl_guard_condition_fini+0x24>
 8017788:	6803      	ldr	r3, [r0, #0]
 801778a:	68c6      	ldr	r6, [r0, #12]
 801778c:	6981      	ldr	r1, [r0, #24]
 801778e:	b15b      	cbz	r3, 80177a8 <rcl_guard_condition_fini+0x2c>
 8017790:	7905      	ldrb	r5, [r0, #4]
 8017792:	b95d      	cbnz	r5, 80177ac <rcl_guard_condition_fini+0x30>
 8017794:	47b0      	blx	r6
 8017796:	2300      	movs	r3, #0
 8017798:	4628      	mov	r0, r5
 801779a:	6063      	str	r3, [r4, #4]
 801779c:	b002      	add	sp, #8
 801779e:	bd70      	pop	{r4, r5, r6, pc}
 80177a0:	4605      	mov	r5, r0
 80177a2:	4628      	mov	r0, r5
 80177a4:	b002      	add	sp, #8
 80177a6:	bd70      	pop	{r4, r5, r6, pc}
 80177a8:	461d      	mov	r5, r3
 80177aa:	e7f3      	b.n	8017794 <rcl_guard_condition_fini+0x18>
 80177ac:	4618      	mov	r0, r3
 80177ae:	9101      	str	r1, [sp, #4]
 80177b0:	f000 f922 	bl	80179f8 <rmw_destroy_guard_condition>
 80177b4:	1e05      	subs	r5, r0, #0
 80177b6:	9901      	ldr	r1, [sp, #4]
 80177b8:	6860      	ldr	r0, [r4, #4]
 80177ba:	bf18      	it	ne
 80177bc:	2501      	movne	r5, #1
 80177be:	e7e9      	b.n	8017794 <rcl_guard_condition_fini+0x18>
 80177c0:	250b      	movs	r5, #11
 80177c2:	4628      	mov	r0, r5
 80177c4:	b002      	add	sp, #8
 80177c6:	bd70      	pop	{r4, r5, r6, pc}

080177c8 <rcl_guard_condition_get_default_options>:
 80177c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80177ca:	b087      	sub	sp, #28
 80177cc:	4607      	mov	r7, r0
 80177ce:	466c      	mov	r4, sp
 80177d0:	4668      	mov	r0, sp
 80177d2:	f7f5 ff6d 	bl	800d6b0 <rcutils_get_default_allocator>
 80177d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80177d8:	4d07      	ldr	r5, [pc, #28]	; (80177f8 <rcl_guard_condition_get_default_options+0x30>)
 80177da:	f8d4 c000 	ldr.w	ip, [r4]
 80177de:	462e      	mov	r6, r5
 80177e0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80177e2:	462c      	mov	r4, r5
 80177e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80177e6:	463c      	mov	r4, r7
 80177e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80177ea:	4638      	mov	r0, r7
 80177ec:	f8c6 c000 	str.w	ip, [r6]
 80177f0:	f8c4 c000 	str.w	ip, [r4]
 80177f4:	b007      	add	sp, #28
 80177f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80177f8:	20009d24 	.word	0x20009d24

080177fc <rcl_guard_condition_get_rmw_handle>:
 80177fc:	b110      	cbz	r0, 8017804 <rcl_guard_condition_get_rmw_handle+0x8>
 80177fe:	6840      	ldr	r0, [r0, #4]
 8017800:	b100      	cbz	r0, 8017804 <rcl_guard_condition_get_rmw_handle+0x8>
 8017802:	6800      	ldr	r0, [r0, #0]
 8017804:	4770      	bx	lr
 8017806:	bf00      	nop

08017808 <on_status>:
 8017808:	b082      	sub	sp, #8
 801780a:	b002      	add	sp, #8
 801780c:	4770      	bx	lr
 801780e:	bf00      	nop

08017810 <on_topic>:
 8017810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017814:	4a21      	ldr	r2, [pc, #132]	; (801789c <on_topic+0x8c>)
 8017816:	b094      	sub	sp, #80	; 0x50
 8017818:	6812      	ldr	r2, [r2, #0]
 801781a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801781c:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8017820:	9113      	str	r1, [sp, #76]	; 0x4c
 8017822:	9312      	str	r3, [sp, #72]	; 0x48
 8017824:	b3ba      	cbz	r2, 8017896 <on_topic+0x86>
 8017826:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801782a:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801782e:	e001      	b.n	8017834 <on_topic+0x24>
 8017830:	6892      	ldr	r2, [r2, #8]
 8017832:	b382      	cbz	r2, 8017896 <on_topic+0x86>
 8017834:	68d4      	ldr	r4, [r2, #12]
 8017836:	8aa3      	ldrh	r3, [r4, #20]
 8017838:	428b      	cmp	r3, r1
 801783a:	d1f9      	bne.n	8017830 <on_topic+0x20>
 801783c:	7da3      	ldrb	r3, [r4, #22]
 801783e:	4283      	cmp	r3, r0
 8017840:	d1f6      	bne.n	8017830 <on_topic+0x20>
 8017842:	2248      	movs	r2, #72	; 0x48
 8017844:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8017848:	4668      	mov	r0, sp
 801784a:	f000 ff2c 	bl	80186a6 <memcpy>
 801784e:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8017852:	4620      	mov	r0, r4
 8017854:	f7f6 fe7e 	bl	800e554 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017858:	4607      	mov	r7, r0
 801785a:	b1e0      	cbz	r0, 8017896 <on_topic+0x86>
 801785c:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8017860:	462a      	mov	r2, r5
 8017862:	4630      	mov	r0, r6
 8017864:	f108 0110 	add.w	r1, r8, #16
 8017868:	f7fe fb9a 	bl	8015fa0 <ucdr_deserialize_array_uint8_t>
 801786c:	b930      	cbnz	r0, 801787c <on_topic+0x6c>
 801786e:	480c      	ldr	r0, [pc, #48]	; (80178a0 <on_topic+0x90>)
 8017870:	4639      	mov	r1, r7
 8017872:	b014      	add	sp, #80	; 0x50
 8017874:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017878:	f7fd bb82 	b.w	8014f80 <put_memory>
 801787c:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8017880:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 8017884:	f7fe fab6 	bl	8015df4 <rmw_uros_epoch_nanos>
 8017888:	f608 0218 	addw	r2, r8, #2072	; 0x818
 801788c:	2305      	movs	r3, #5
 801788e:	e9c2 0100 	strd	r0, r1, [r2]
 8017892:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8017896:	b014      	add	sp, #80	; 0x50
 8017898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801789c:	2000d12c 	.word	0x2000d12c
 80178a0:	20009ec0 	.word	0x20009ec0

080178a4 <on_request>:
 80178a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80178a8:	4822      	ldr	r0, [pc, #136]	; (8017934 <on_request+0x90>)
 80178aa:	b095      	sub	sp, #84	; 0x54
 80178ac:	9113      	str	r1, [sp, #76]	; 0x4c
 80178ae:	6801      	ldr	r1, [r0, #0]
 80178b0:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80178b2:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 80178b6:	2900      	cmp	r1, #0
 80178b8:	d039      	beq.n	801792e <on_request+0x8a>
 80178ba:	461d      	mov	r5, r3
 80178bc:	e001      	b.n	80178c2 <on_request+0x1e>
 80178be:	6889      	ldr	r1, [r1, #8]
 80178c0:	b3a9      	cbz	r1, 801792e <on_request+0x8a>
 80178c2:	68cc      	ldr	r4, [r1, #12]
 80178c4:	8b20      	ldrh	r0, [r4, #24]
 80178c6:	4290      	cmp	r0, r2
 80178c8:	d1f9      	bne.n	80178be <on_request+0x1a>
 80178ca:	2248      	movs	r2, #72	; 0x48
 80178cc:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80178d0:	4668      	mov	r0, sp
 80178d2:	f000 fee8 	bl	80186a6 <memcpy>
 80178d6:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80178da:	4620      	mov	r0, r4
 80178dc:	f7f6 fe3a 	bl	800e554 <rmw_uxrce_get_static_input_buffer_for_entity>
 80178e0:	4680      	mov	r8, r0
 80178e2:	b320      	cbz	r0, 801792e <on_request+0x8a>
 80178e4:	f8d0 900c 	ldr.w	r9, [r0, #12]
 80178e8:	4632      	mov	r2, r6
 80178ea:	4638      	mov	r0, r7
 80178ec:	f109 0110 	add.w	r1, r9, #16
 80178f0:	f7fe fb56 	bl	8015fa0 <ucdr_deserialize_array_uint8_t>
 80178f4:	b930      	cbnz	r0, 8017904 <on_request+0x60>
 80178f6:	4810      	ldr	r0, [pc, #64]	; (8017938 <on_request+0x94>)
 80178f8:	4641      	mov	r1, r8
 80178fa:	b015      	add	sp, #84	; 0x54
 80178fc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017900:	f7fd bb3e 	b.w	8014f80 <put_memory>
 8017904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017906:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 801790a:	f609 0428 	addw	r4, r9, #2088	; 0x828
 801790e:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 8017912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017914:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017918:	e884 0003 	stmia.w	r4, {r0, r1}
 801791c:	f7fe fa6a 	bl	8015df4 <rmw_uros_epoch_nanos>
 8017920:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8017924:	2303      	movs	r3, #3
 8017926:	e9c2 0100 	strd	r0, r1, [r2]
 801792a:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 801792e:	b015      	add	sp, #84	; 0x54
 8017930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017934:	2000d11c 	.word	0x2000d11c
 8017938:	20009ec0 	.word	0x20009ec0

0801793c <on_reply>:
 801793c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017940:	4821      	ldr	r0, [pc, #132]	; (80179c8 <on_reply+0x8c>)
 8017942:	b095      	sub	sp, #84	; 0x54
 8017944:	9113      	str	r1, [sp, #76]	; 0x4c
 8017946:	6801      	ldr	r1, [r0, #0]
 8017948:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801794a:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 801794e:	b3b9      	cbz	r1, 80179c0 <on_reply+0x84>
 8017950:	461d      	mov	r5, r3
 8017952:	e001      	b.n	8017958 <on_reply+0x1c>
 8017954:	6889      	ldr	r1, [r1, #8]
 8017956:	b399      	cbz	r1, 80179c0 <on_reply+0x84>
 8017958:	68cc      	ldr	r4, [r1, #12]
 801795a:	8b20      	ldrh	r0, [r4, #24]
 801795c:	4290      	cmp	r0, r2
 801795e:	d1f9      	bne.n	8017954 <on_reply+0x18>
 8017960:	2248      	movs	r2, #72	; 0x48
 8017962:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8017966:	4668      	mov	r0, sp
 8017968:	f000 fe9d 	bl	80186a6 <memcpy>
 801796c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8017970:	4620      	mov	r0, r4
 8017972:	f7f6 fdef 	bl	800e554 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017976:	4680      	mov	r8, r0
 8017978:	b310      	cbz	r0, 80179c0 <on_reply+0x84>
 801797a:	f8d0 900c 	ldr.w	r9, [r0, #12]
 801797e:	4632      	mov	r2, r6
 8017980:	4638      	mov	r0, r7
 8017982:	f109 0110 	add.w	r1, r9, #16
 8017986:	f7fe fb0b 	bl	8015fa0 <ucdr_deserialize_array_uint8_t>
 801798a:	b930      	cbnz	r0, 801799a <on_reply+0x5e>
 801798c:	480f      	ldr	r0, [pc, #60]	; (80179cc <on_reply+0x90>)
 801798e:	4641      	mov	r1, r8
 8017990:	b015      	add	sp, #84	; 0x54
 8017992:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017996:	f7fd baf3 	b.w	8014f80 <put_memory>
 801799a:	b2aa      	uxth	r2, r5
 801799c:	2300      	movs	r3, #0
 801799e:	f609 0128 	addw	r1, r9, #2088	; 0x828
 80179a2:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 80179a6:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 80179aa:	e9c1 2300 	strd	r2, r3, [r1]
 80179ae:	f7fe fa21 	bl	8015df4 <rmw_uros_epoch_nanos>
 80179b2:	f609 0218 	addw	r2, r9, #2072	; 0x818
 80179b6:	2304      	movs	r3, #4
 80179b8:	e9c2 0100 	strd	r0, r1, [r2]
 80179bc:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 80179c0:	b015      	add	sp, #84	; 0x54
 80179c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80179c6:	bf00      	nop
 80179c8:	2000a750 	.word	0x2000a750
 80179cc:	20009ec0 	.word	0x20009ec0

080179d0 <rmw_create_guard_condition>:
 80179d0:	b538      	push	{r3, r4, r5, lr}
 80179d2:	4605      	mov	r5, r0
 80179d4:	4807      	ldr	r0, [pc, #28]	; (80179f4 <rmw_create_guard_condition+0x24>)
 80179d6:	f7fd fac3 	bl	8014f60 <get_memory>
 80179da:	b148      	cbz	r0, 80179f0 <rmw_create_guard_condition+0x20>
 80179dc:	68c4      	ldr	r4, [r0, #12]
 80179de:	2300      	movs	r3, #0
 80179e0:	61e5      	str	r5, [r4, #28]
 80179e2:	7423      	strb	r3, [r4, #16]
 80179e4:	f7fd fb24 	bl	8015030 <rmw_get_implementation_identifier>
 80179e8:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80179ec:	f104 0014 	add.w	r0, r4, #20
 80179f0:	bd38      	pop	{r3, r4, r5, pc}
 80179f2:	bf00      	nop
 80179f4:	2000d048 	.word	0x2000d048

080179f8 <rmw_destroy_guard_condition>:
 80179f8:	b508      	push	{r3, lr}
 80179fa:	4b08      	ldr	r3, [pc, #32]	; (8017a1c <rmw_destroy_guard_condition+0x24>)
 80179fc:	6819      	ldr	r1, [r3, #0]
 80179fe:	b911      	cbnz	r1, 8017a06 <rmw_destroy_guard_condition+0xe>
 8017a00:	e00a      	b.n	8017a18 <rmw_destroy_guard_condition+0x20>
 8017a02:	6889      	ldr	r1, [r1, #8]
 8017a04:	b141      	cbz	r1, 8017a18 <rmw_destroy_guard_condition+0x20>
 8017a06:	68cb      	ldr	r3, [r1, #12]
 8017a08:	3314      	adds	r3, #20
 8017a0a:	4298      	cmp	r0, r3
 8017a0c:	d1f9      	bne.n	8017a02 <rmw_destroy_guard_condition+0xa>
 8017a0e:	4803      	ldr	r0, [pc, #12]	; (8017a1c <rmw_destroy_guard_condition+0x24>)
 8017a10:	f7fd fab6 	bl	8014f80 <put_memory>
 8017a14:	2000      	movs	r0, #0
 8017a16:	bd08      	pop	{r3, pc}
 8017a18:	2001      	movs	r0, #1
 8017a1a:	bd08      	pop	{r3, pc}
 8017a1c:	2000d048 	.word	0x2000d048

08017a20 <calloc>:
 8017a20:	4b02      	ldr	r3, [pc, #8]	; (8017a2c <calloc+0xc>)
 8017a22:	460a      	mov	r2, r1
 8017a24:	4601      	mov	r1, r0
 8017a26:	6818      	ldr	r0, [r3, #0]
 8017a28:	f000 b802 	b.w	8017a30 <_calloc_r>
 8017a2c:	200000d0 	.word	0x200000d0

08017a30 <_calloc_r>:
 8017a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017a32:	fba1 2402 	umull	r2, r4, r1, r2
 8017a36:	b94c      	cbnz	r4, 8017a4c <_calloc_r+0x1c>
 8017a38:	4611      	mov	r1, r2
 8017a3a:	9201      	str	r2, [sp, #4]
 8017a3c:	f000 f886 	bl	8017b4c <_malloc_r>
 8017a40:	9a01      	ldr	r2, [sp, #4]
 8017a42:	4605      	mov	r5, r0
 8017a44:	b930      	cbnz	r0, 8017a54 <_calloc_r+0x24>
 8017a46:	4628      	mov	r0, r5
 8017a48:	b003      	add	sp, #12
 8017a4a:	bd30      	pop	{r4, r5, pc}
 8017a4c:	220c      	movs	r2, #12
 8017a4e:	6002      	str	r2, [r0, #0]
 8017a50:	2500      	movs	r5, #0
 8017a52:	e7f8      	b.n	8017a46 <_calloc_r+0x16>
 8017a54:	4621      	mov	r1, r4
 8017a56:	f000 fd07 	bl	8018468 <memset>
 8017a5a:	e7f4      	b.n	8017a46 <_calloc_r+0x16>

08017a5c <getenv>:
 8017a5c:	b507      	push	{r0, r1, r2, lr}
 8017a5e:	4b04      	ldr	r3, [pc, #16]	; (8017a70 <getenv+0x14>)
 8017a60:	4601      	mov	r1, r0
 8017a62:	aa01      	add	r2, sp, #4
 8017a64:	6818      	ldr	r0, [r3, #0]
 8017a66:	f000 f805 	bl	8017a74 <_findenv_r>
 8017a6a:	b003      	add	sp, #12
 8017a6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017a70:	200000d0 	.word	0x200000d0

08017a74 <_findenv_r>:
 8017a74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a78:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8017ae8 <_findenv_r+0x74>
 8017a7c:	4607      	mov	r7, r0
 8017a7e:	4689      	mov	r9, r1
 8017a80:	4616      	mov	r6, r2
 8017a82:	f000 fe3d 	bl	8018700 <__env_lock>
 8017a86:	f8da 4000 	ldr.w	r4, [sl]
 8017a8a:	b134      	cbz	r4, 8017a9a <_findenv_r+0x26>
 8017a8c:	464b      	mov	r3, r9
 8017a8e:	4698      	mov	r8, r3
 8017a90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017a94:	b13a      	cbz	r2, 8017aa6 <_findenv_r+0x32>
 8017a96:	2a3d      	cmp	r2, #61	; 0x3d
 8017a98:	d1f9      	bne.n	8017a8e <_findenv_r+0x1a>
 8017a9a:	4638      	mov	r0, r7
 8017a9c:	f000 fe36 	bl	801870c <__env_unlock>
 8017aa0:	2000      	movs	r0, #0
 8017aa2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017aa6:	eba8 0809 	sub.w	r8, r8, r9
 8017aaa:	46a3      	mov	fp, r4
 8017aac:	f854 0b04 	ldr.w	r0, [r4], #4
 8017ab0:	2800      	cmp	r0, #0
 8017ab2:	d0f2      	beq.n	8017a9a <_findenv_r+0x26>
 8017ab4:	4642      	mov	r2, r8
 8017ab6:	4649      	mov	r1, r9
 8017ab8:	f000 fceb 	bl	8018492 <strncmp>
 8017abc:	2800      	cmp	r0, #0
 8017abe:	d1f4      	bne.n	8017aaa <_findenv_r+0x36>
 8017ac0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017ac4:	eb03 0508 	add.w	r5, r3, r8
 8017ac8:	f813 3008 	ldrb.w	r3, [r3, r8]
 8017acc:	2b3d      	cmp	r3, #61	; 0x3d
 8017ace:	d1ec      	bne.n	8017aaa <_findenv_r+0x36>
 8017ad0:	f8da 3000 	ldr.w	r3, [sl]
 8017ad4:	ebab 0303 	sub.w	r3, fp, r3
 8017ad8:	109b      	asrs	r3, r3, #2
 8017ada:	4638      	mov	r0, r7
 8017adc:	6033      	str	r3, [r6, #0]
 8017ade:	f000 fe15 	bl	801870c <__env_unlock>
 8017ae2:	1c68      	adds	r0, r5, #1
 8017ae4:	e7dd      	b.n	8017aa2 <_findenv_r+0x2e>
 8017ae6:	bf00      	nop
 8017ae8:	200000d4 	.word	0x200000d4

08017aec <malloc>:
 8017aec:	4b02      	ldr	r3, [pc, #8]	; (8017af8 <malloc+0xc>)
 8017aee:	4601      	mov	r1, r0
 8017af0:	6818      	ldr	r0, [r3, #0]
 8017af2:	f000 b82b 	b.w	8017b4c <_malloc_r>
 8017af6:	bf00      	nop
 8017af8:	200000d0 	.word	0x200000d0

08017afc <free>:
 8017afc:	4b02      	ldr	r3, [pc, #8]	; (8017b08 <free+0xc>)
 8017afe:	4601      	mov	r1, r0
 8017b00:	6818      	ldr	r0, [r3, #0]
 8017b02:	f000 be09 	b.w	8018718 <_free_r>
 8017b06:	bf00      	nop
 8017b08:	200000d0 	.word	0x200000d0

08017b0c <sbrk_aligned>:
 8017b0c:	b570      	push	{r4, r5, r6, lr}
 8017b0e:	4e0e      	ldr	r6, [pc, #56]	; (8017b48 <sbrk_aligned+0x3c>)
 8017b10:	460c      	mov	r4, r1
 8017b12:	6831      	ldr	r1, [r6, #0]
 8017b14:	4605      	mov	r5, r0
 8017b16:	b911      	cbnz	r1, 8017b1e <sbrk_aligned+0x12>
 8017b18:	f000 fd6e 	bl	80185f8 <_sbrk_r>
 8017b1c:	6030      	str	r0, [r6, #0]
 8017b1e:	4621      	mov	r1, r4
 8017b20:	4628      	mov	r0, r5
 8017b22:	f000 fd69 	bl	80185f8 <_sbrk_r>
 8017b26:	1c43      	adds	r3, r0, #1
 8017b28:	d00a      	beq.n	8017b40 <sbrk_aligned+0x34>
 8017b2a:	1cc4      	adds	r4, r0, #3
 8017b2c:	f024 0403 	bic.w	r4, r4, #3
 8017b30:	42a0      	cmp	r0, r4
 8017b32:	d007      	beq.n	8017b44 <sbrk_aligned+0x38>
 8017b34:	1a21      	subs	r1, r4, r0
 8017b36:	4628      	mov	r0, r5
 8017b38:	f000 fd5e 	bl	80185f8 <_sbrk_r>
 8017b3c:	3001      	adds	r0, #1
 8017b3e:	d101      	bne.n	8017b44 <sbrk_aligned+0x38>
 8017b40:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8017b44:	4620      	mov	r0, r4
 8017b46:	bd70      	pop	{r4, r5, r6, pc}
 8017b48:	20009d3c 	.word	0x20009d3c

08017b4c <_malloc_r>:
 8017b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b50:	1ccd      	adds	r5, r1, #3
 8017b52:	f025 0503 	bic.w	r5, r5, #3
 8017b56:	3508      	adds	r5, #8
 8017b58:	2d0c      	cmp	r5, #12
 8017b5a:	bf38      	it	cc
 8017b5c:	250c      	movcc	r5, #12
 8017b5e:	2d00      	cmp	r5, #0
 8017b60:	4607      	mov	r7, r0
 8017b62:	db01      	blt.n	8017b68 <_malloc_r+0x1c>
 8017b64:	42a9      	cmp	r1, r5
 8017b66:	d905      	bls.n	8017b74 <_malloc_r+0x28>
 8017b68:	230c      	movs	r3, #12
 8017b6a:	603b      	str	r3, [r7, #0]
 8017b6c:	2600      	movs	r6, #0
 8017b6e:	4630      	mov	r0, r6
 8017b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017b74:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017c48 <_malloc_r+0xfc>
 8017b78:	f000 f868 	bl	8017c4c <__malloc_lock>
 8017b7c:	f8d8 3000 	ldr.w	r3, [r8]
 8017b80:	461c      	mov	r4, r3
 8017b82:	bb5c      	cbnz	r4, 8017bdc <_malloc_r+0x90>
 8017b84:	4629      	mov	r1, r5
 8017b86:	4638      	mov	r0, r7
 8017b88:	f7ff ffc0 	bl	8017b0c <sbrk_aligned>
 8017b8c:	1c43      	adds	r3, r0, #1
 8017b8e:	4604      	mov	r4, r0
 8017b90:	d155      	bne.n	8017c3e <_malloc_r+0xf2>
 8017b92:	f8d8 4000 	ldr.w	r4, [r8]
 8017b96:	4626      	mov	r6, r4
 8017b98:	2e00      	cmp	r6, #0
 8017b9a:	d145      	bne.n	8017c28 <_malloc_r+0xdc>
 8017b9c:	2c00      	cmp	r4, #0
 8017b9e:	d048      	beq.n	8017c32 <_malloc_r+0xe6>
 8017ba0:	6823      	ldr	r3, [r4, #0]
 8017ba2:	4631      	mov	r1, r6
 8017ba4:	4638      	mov	r0, r7
 8017ba6:	eb04 0903 	add.w	r9, r4, r3
 8017baa:	f000 fd25 	bl	80185f8 <_sbrk_r>
 8017bae:	4581      	cmp	r9, r0
 8017bb0:	d13f      	bne.n	8017c32 <_malloc_r+0xe6>
 8017bb2:	6821      	ldr	r1, [r4, #0]
 8017bb4:	1a6d      	subs	r5, r5, r1
 8017bb6:	4629      	mov	r1, r5
 8017bb8:	4638      	mov	r0, r7
 8017bba:	f7ff ffa7 	bl	8017b0c <sbrk_aligned>
 8017bbe:	3001      	adds	r0, #1
 8017bc0:	d037      	beq.n	8017c32 <_malloc_r+0xe6>
 8017bc2:	6823      	ldr	r3, [r4, #0]
 8017bc4:	442b      	add	r3, r5
 8017bc6:	6023      	str	r3, [r4, #0]
 8017bc8:	f8d8 3000 	ldr.w	r3, [r8]
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d038      	beq.n	8017c42 <_malloc_r+0xf6>
 8017bd0:	685a      	ldr	r2, [r3, #4]
 8017bd2:	42a2      	cmp	r2, r4
 8017bd4:	d12b      	bne.n	8017c2e <_malloc_r+0xe2>
 8017bd6:	2200      	movs	r2, #0
 8017bd8:	605a      	str	r2, [r3, #4]
 8017bda:	e00f      	b.n	8017bfc <_malloc_r+0xb0>
 8017bdc:	6822      	ldr	r2, [r4, #0]
 8017bde:	1b52      	subs	r2, r2, r5
 8017be0:	d41f      	bmi.n	8017c22 <_malloc_r+0xd6>
 8017be2:	2a0b      	cmp	r2, #11
 8017be4:	d917      	bls.n	8017c16 <_malloc_r+0xca>
 8017be6:	1961      	adds	r1, r4, r5
 8017be8:	42a3      	cmp	r3, r4
 8017bea:	6025      	str	r5, [r4, #0]
 8017bec:	bf18      	it	ne
 8017bee:	6059      	strne	r1, [r3, #4]
 8017bf0:	6863      	ldr	r3, [r4, #4]
 8017bf2:	bf08      	it	eq
 8017bf4:	f8c8 1000 	streq.w	r1, [r8]
 8017bf8:	5162      	str	r2, [r4, r5]
 8017bfa:	604b      	str	r3, [r1, #4]
 8017bfc:	4638      	mov	r0, r7
 8017bfe:	f104 060b 	add.w	r6, r4, #11
 8017c02:	f000 f829 	bl	8017c58 <__malloc_unlock>
 8017c06:	f026 0607 	bic.w	r6, r6, #7
 8017c0a:	1d23      	adds	r3, r4, #4
 8017c0c:	1af2      	subs	r2, r6, r3
 8017c0e:	d0ae      	beq.n	8017b6e <_malloc_r+0x22>
 8017c10:	1b9b      	subs	r3, r3, r6
 8017c12:	50a3      	str	r3, [r4, r2]
 8017c14:	e7ab      	b.n	8017b6e <_malloc_r+0x22>
 8017c16:	42a3      	cmp	r3, r4
 8017c18:	6862      	ldr	r2, [r4, #4]
 8017c1a:	d1dd      	bne.n	8017bd8 <_malloc_r+0x8c>
 8017c1c:	f8c8 2000 	str.w	r2, [r8]
 8017c20:	e7ec      	b.n	8017bfc <_malloc_r+0xb0>
 8017c22:	4623      	mov	r3, r4
 8017c24:	6864      	ldr	r4, [r4, #4]
 8017c26:	e7ac      	b.n	8017b82 <_malloc_r+0x36>
 8017c28:	4634      	mov	r4, r6
 8017c2a:	6876      	ldr	r6, [r6, #4]
 8017c2c:	e7b4      	b.n	8017b98 <_malloc_r+0x4c>
 8017c2e:	4613      	mov	r3, r2
 8017c30:	e7cc      	b.n	8017bcc <_malloc_r+0x80>
 8017c32:	230c      	movs	r3, #12
 8017c34:	603b      	str	r3, [r7, #0]
 8017c36:	4638      	mov	r0, r7
 8017c38:	f000 f80e 	bl	8017c58 <__malloc_unlock>
 8017c3c:	e797      	b.n	8017b6e <_malloc_r+0x22>
 8017c3e:	6025      	str	r5, [r4, #0]
 8017c40:	e7dc      	b.n	8017bfc <_malloc_r+0xb0>
 8017c42:	605b      	str	r3, [r3, #4]
 8017c44:	deff      	udf	#255	; 0xff
 8017c46:	bf00      	nop
 8017c48:	20009d38 	.word	0x20009d38

08017c4c <__malloc_lock>:
 8017c4c:	4801      	ldr	r0, [pc, #4]	; (8017c54 <__malloc_lock+0x8>)
 8017c4e:	f000 bd20 	b.w	8018692 <__retarget_lock_acquire_recursive>
 8017c52:	bf00      	nop
 8017c54:	20009e81 	.word	0x20009e81

08017c58 <__malloc_unlock>:
 8017c58:	4801      	ldr	r0, [pc, #4]	; (8017c60 <__malloc_unlock+0x8>)
 8017c5a:	f000 bd1b 	b.w	8018694 <__retarget_lock_release_recursive>
 8017c5e:	bf00      	nop
 8017c60:	20009e81 	.word	0x20009e81

08017c64 <srand>:
 8017c64:	b538      	push	{r3, r4, r5, lr}
 8017c66:	4b10      	ldr	r3, [pc, #64]	; (8017ca8 <srand+0x44>)
 8017c68:	681d      	ldr	r5, [r3, #0]
 8017c6a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017c6c:	4604      	mov	r4, r0
 8017c6e:	b9b3      	cbnz	r3, 8017c9e <srand+0x3a>
 8017c70:	2018      	movs	r0, #24
 8017c72:	f7ff ff3b 	bl	8017aec <malloc>
 8017c76:	4602      	mov	r2, r0
 8017c78:	6328      	str	r0, [r5, #48]	; 0x30
 8017c7a:	b920      	cbnz	r0, 8017c86 <srand+0x22>
 8017c7c:	4b0b      	ldr	r3, [pc, #44]	; (8017cac <srand+0x48>)
 8017c7e:	480c      	ldr	r0, [pc, #48]	; (8017cb0 <srand+0x4c>)
 8017c80:	2146      	movs	r1, #70	; 0x46
 8017c82:	f000 fd1f 	bl	80186c4 <__assert_func>
 8017c86:	490b      	ldr	r1, [pc, #44]	; (8017cb4 <srand+0x50>)
 8017c88:	4b0b      	ldr	r3, [pc, #44]	; (8017cb8 <srand+0x54>)
 8017c8a:	e9c0 1300 	strd	r1, r3, [r0]
 8017c8e:	4b0b      	ldr	r3, [pc, #44]	; (8017cbc <srand+0x58>)
 8017c90:	6083      	str	r3, [r0, #8]
 8017c92:	230b      	movs	r3, #11
 8017c94:	8183      	strh	r3, [r0, #12]
 8017c96:	2100      	movs	r1, #0
 8017c98:	2001      	movs	r0, #1
 8017c9a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017c9e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017ca0:	2200      	movs	r2, #0
 8017ca2:	611c      	str	r4, [r3, #16]
 8017ca4:	615a      	str	r2, [r3, #20]
 8017ca6:	bd38      	pop	{r3, r4, r5, pc}
 8017ca8:	200000d0 	.word	0x200000d0
 8017cac:	0801a048 	.word	0x0801a048
 8017cb0:	0801a05f 	.word	0x0801a05f
 8017cb4:	abcd330e 	.word	0xabcd330e
 8017cb8:	e66d1234 	.word	0xe66d1234
 8017cbc:	0005deec 	.word	0x0005deec

08017cc0 <rand>:
 8017cc0:	4b16      	ldr	r3, [pc, #88]	; (8017d1c <rand+0x5c>)
 8017cc2:	b510      	push	{r4, lr}
 8017cc4:	681c      	ldr	r4, [r3, #0]
 8017cc6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017cc8:	b9b3      	cbnz	r3, 8017cf8 <rand+0x38>
 8017cca:	2018      	movs	r0, #24
 8017ccc:	f7ff ff0e 	bl	8017aec <malloc>
 8017cd0:	4602      	mov	r2, r0
 8017cd2:	6320      	str	r0, [r4, #48]	; 0x30
 8017cd4:	b920      	cbnz	r0, 8017ce0 <rand+0x20>
 8017cd6:	4b12      	ldr	r3, [pc, #72]	; (8017d20 <rand+0x60>)
 8017cd8:	4812      	ldr	r0, [pc, #72]	; (8017d24 <rand+0x64>)
 8017cda:	2152      	movs	r1, #82	; 0x52
 8017cdc:	f000 fcf2 	bl	80186c4 <__assert_func>
 8017ce0:	4911      	ldr	r1, [pc, #68]	; (8017d28 <rand+0x68>)
 8017ce2:	4b12      	ldr	r3, [pc, #72]	; (8017d2c <rand+0x6c>)
 8017ce4:	e9c0 1300 	strd	r1, r3, [r0]
 8017ce8:	4b11      	ldr	r3, [pc, #68]	; (8017d30 <rand+0x70>)
 8017cea:	6083      	str	r3, [r0, #8]
 8017cec:	230b      	movs	r3, #11
 8017cee:	8183      	strh	r3, [r0, #12]
 8017cf0:	2100      	movs	r1, #0
 8017cf2:	2001      	movs	r0, #1
 8017cf4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017cf8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017cfa:	480e      	ldr	r0, [pc, #56]	; (8017d34 <rand+0x74>)
 8017cfc:	690b      	ldr	r3, [r1, #16]
 8017cfe:	694c      	ldr	r4, [r1, #20]
 8017d00:	4a0d      	ldr	r2, [pc, #52]	; (8017d38 <rand+0x78>)
 8017d02:	4358      	muls	r0, r3
 8017d04:	fb02 0004 	mla	r0, r2, r4, r0
 8017d08:	fba3 3202 	umull	r3, r2, r3, r2
 8017d0c:	3301      	adds	r3, #1
 8017d0e:	eb40 0002 	adc.w	r0, r0, r2
 8017d12:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8017d16:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017d1a:	bd10      	pop	{r4, pc}
 8017d1c:	200000d0 	.word	0x200000d0
 8017d20:	0801a048 	.word	0x0801a048
 8017d24:	0801a05f 	.word	0x0801a05f
 8017d28:	abcd330e 	.word	0xabcd330e
 8017d2c:	e66d1234 	.word	0xe66d1234
 8017d30:	0005deec 	.word	0x0005deec
 8017d34:	5851f42d 	.word	0x5851f42d
 8017d38:	4c957f2d 	.word	0x4c957f2d

08017d3c <realloc>:
 8017d3c:	4b02      	ldr	r3, [pc, #8]	; (8017d48 <realloc+0xc>)
 8017d3e:	460a      	mov	r2, r1
 8017d40:	4601      	mov	r1, r0
 8017d42:	6818      	ldr	r0, [r3, #0]
 8017d44:	f000 b802 	b.w	8017d4c <_realloc_r>
 8017d48:	200000d0 	.word	0x200000d0

08017d4c <_realloc_r>:
 8017d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d50:	4680      	mov	r8, r0
 8017d52:	4614      	mov	r4, r2
 8017d54:	460e      	mov	r6, r1
 8017d56:	b921      	cbnz	r1, 8017d62 <_realloc_r+0x16>
 8017d58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d5c:	4611      	mov	r1, r2
 8017d5e:	f7ff bef5 	b.w	8017b4c <_malloc_r>
 8017d62:	b92a      	cbnz	r2, 8017d70 <_realloc_r+0x24>
 8017d64:	f000 fcd8 	bl	8018718 <_free_r>
 8017d68:	4625      	mov	r5, r4
 8017d6a:	4628      	mov	r0, r5
 8017d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d70:	f000 fd1e 	bl	80187b0 <_malloc_usable_size_r>
 8017d74:	4284      	cmp	r4, r0
 8017d76:	4607      	mov	r7, r0
 8017d78:	d802      	bhi.n	8017d80 <_realloc_r+0x34>
 8017d7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017d7e:	d812      	bhi.n	8017da6 <_realloc_r+0x5a>
 8017d80:	4621      	mov	r1, r4
 8017d82:	4640      	mov	r0, r8
 8017d84:	f7ff fee2 	bl	8017b4c <_malloc_r>
 8017d88:	4605      	mov	r5, r0
 8017d8a:	2800      	cmp	r0, #0
 8017d8c:	d0ed      	beq.n	8017d6a <_realloc_r+0x1e>
 8017d8e:	42bc      	cmp	r4, r7
 8017d90:	4622      	mov	r2, r4
 8017d92:	4631      	mov	r1, r6
 8017d94:	bf28      	it	cs
 8017d96:	463a      	movcs	r2, r7
 8017d98:	f000 fc85 	bl	80186a6 <memcpy>
 8017d9c:	4631      	mov	r1, r6
 8017d9e:	4640      	mov	r0, r8
 8017da0:	f000 fcba 	bl	8018718 <_free_r>
 8017da4:	e7e1      	b.n	8017d6a <_realloc_r+0x1e>
 8017da6:	4635      	mov	r5, r6
 8017da8:	e7df      	b.n	8017d6a <_realloc_r+0x1e>
	...

08017dac <_strtoul_l.constprop.0>:
 8017dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017db0:	4f36      	ldr	r7, [pc, #216]	; (8017e8c <_strtoul_l.constprop.0+0xe0>)
 8017db2:	4686      	mov	lr, r0
 8017db4:	460d      	mov	r5, r1
 8017db6:	4628      	mov	r0, r5
 8017db8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017dbc:	5d3e      	ldrb	r6, [r7, r4]
 8017dbe:	f016 0608 	ands.w	r6, r6, #8
 8017dc2:	d1f8      	bne.n	8017db6 <_strtoul_l.constprop.0+0xa>
 8017dc4:	2c2d      	cmp	r4, #45	; 0x2d
 8017dc6:	d130      	bne.n	8017e2a <_strtoul_l.constprop.0+0x7e>
 8017dc8:	782c      	ldrb	r4, [r5, #0]
 8017dca:	2601      	movs	r6, #1
 8017dcc:	1c85      	adds	r5, r0, #2
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d057      	beq.n	8017e82 <_strtoul_l.constprop.0+0xd6>
 8017dd2:	2b10      	cmp	r3, #16
 8017dd4:	d109      	bne.n	8017dea <_strtoul_l.constprop.0+0x3e>
 8017dd6:	2c30      	cmp	r4, #48	; 0x30
 8017dd8:	d107      	bne.n	8017dea <_strtoul_l.constprop.0+0x3e>
 8017dda:	7828      	ldrb	r0, [r5, #0]
 8017ddc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8017de0:	2858      	cmp	r0, #88	; 0x58
 8017de2:	d149      	bne.n	8017e78 <_strtoul_l.constprop.0+0xcc>
 8017de4:	786c      	ldrb	r4, [r5, #1]
 8017de6:	2310      	movs	r3, #16
 8017de8:	3502      	adds	r5, #2
 8017dea:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8017dee:	2700      	movs	r7, #0
 8017df0:	fbb8 f8f3 	udiv	r8, r8, r3
 8017df4:	fb03 f908 	mul.w	r9, r3, r8
 8017df8:	ea6f 0909 	mvn.w	r9, r9
 8017dfc:	4638      	mov	r0, r7
 8017dfe:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8017e02:	f1bc 0f09 	cmp.w	ip, #9
 8017e06:	d815      	bhi.n	8017e34 <_strtoul_l.constprop.0+0x88>
 8017e08:	4664      	mov	r4, ip
 8017e0a:	42a3      	cmp	r3, r4
 8017e0c:	dd23      	ble.n	8017e56 <_strtoul_l.constprop.0+0xaa>
 8017e0e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8017e12:	d007      	beq.n	8017e24 <_strtoul_l.constprop.0+0x78>
 8017e14:	4580      	cmp	r8, r0
 8017e16:	d31b      	bcc.n	8017e50 <_strtoul_l.constprop.0+0xa4>
 8017e18:	d101      	bne.n	8017e1e <_strtoul_l.constprop.0+0x72>
 8017e1a:	45a1      	cmp	r9, r4
 8017e1c:	db18      	blt.n	8017e50 <_strtoul_l.constprop.0+0xa4>
 8017e1e:	fb00 4003 	mla	r0, r0, r3, r4
 8017e22:	2701      	movs	r7, #1
 8017e24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017e28:	e7e9      	b.n	8017dfe <_strtoul_l.constprop.0+0x52>
 8017e2a:	2c2b      	cmp	r4, #43	; 0x2b
 8017e2c:	bf04      	itt	eq
 8017e2e:	782c      	ldrbeq	r4, [r5, #0]
 8017e30:	1c85      	addeq	r5, r0, #2
 8017e32:	e7cc      	b.n	8017dce <_strtoul_l.constprop.0+0x22>
 8017e34:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8017e38:	f1bc 0f19 	cmp.w	ip, #25
 8017e3c:	d801      	bhi.n	8017e42 <_strtoul_l.constprop.0+0x96>
 8017e3e:	3c37      	subs	r4, #55	; 0x37
 8017e40:	e7e3      	b.n	8017e0a <_strtoul_l.constprop.0+0x5e>
 8017e42:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8017e46:	f1bc 0f19 	cmp.w	ip, #25
 8017e4a:	d804      	bhi.n	8017e56 <_strtoul_l.constprop.0+0xaa>
 8017e4c:	3c57      	subs	r4, #87	; 0x57
 8017e4e:	e7dc      	b.n	8017e0a <_strtoul_l.constprop.0+0x5e>
 8017e50:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8017e54:	e7e6      	b.n	8017e24 <_strtoul_l.constprop.0+0x78>
 8017e56:	1c7b      	adds	r3, r7, #1
 8017e58:	d106      	bne.n	8017e68 <_strtoul_l.constprop.0+0xbc>
 8017e5a:	2322      	movs	r3, #34	; 0x22
 8017e5c:	f8ce 3000 	str.w	r3, [lr]
 8017e60:	4638      	mov	r0, r7
 8017e62:	b932      	cbnz	r2, 8017e72 <_strtoul_l.constprop.0+0xc6>
 8017e64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e68:	b106      	cbz	r6, 8017e6c <_strtoul_l.constprop.0+0xc0>
 8017e6a:	4240      	negs	r0, r0
 8017e6c:	2a00      	cmp	r2, #0
 8017e6e:	d0f9      	beq.n	8017e64 <_strtoul_l.constprop.0+0xb8>
 8017e70:	b107      	cbz	r7, 8017e74 <_strtoul_l.constprop.0+0xc8>
 8017e72:	1e69      	subs	r1, r5, #1
 8017e74:	6011      	str	r1, [r2, #0]
 8017e76:	e7f5      	b.n	8017e64 <_strtoul_l.constprop.0+0xb8>
 8017e78:	2430      	movs	r4, #48	; 0x30
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d1b5      	bne.n	8017dea <_strtoul_l.constprop.0+0x3e>
 8017e7e:	2308      	movs	r3, #8
 8017e80:	e7b3      	b.n	8017dea <_strtoul_l.constprop.0+0x3e>
 8017e82:	2c30      	cmp	r4, #48	; 0x30
 8017e84:	d0a9      	beq.n	8017dda <_strtoul_l.constprop.0+0x2e>
 8017e86:	230a      	movs	r3, #10
 8017e88:	e7af      	b.n	8017dea <_strtoul_l.constprop.0+0x3e>
 8017e8a:	bf00      	nop
 8017e8c:	0801a0b8 	.word	0x0801a0b8

08017e90 <strtoul>:
 8017e90:	4613      	mov	r3, r2
 8017e92:	460a      	mov	r2, r1
 8017e94:	4601      	mov	r1, r0
 8017e96:	4802      	ldr	r0, [pc, #8]	; (8017ea0 <strtoul+0x10>)
 8017e98:	6800      	ldr	r0, [r0, #0]
 8017e9a:	f7ff bf87 	b.w	8017dac <_strtoul_l.constprop.0>
 8017e9e:	bf00      	nop
 8017ea0:	200000d0 	.word	0x200000d0

08017ea4 <std>:
 8017ea4:	2300      	movs	r3, #0
 8017ea6:	b510      	push	{r4, lr}
 8017ea8:	4604      	mov	r4, r0
 8017eaa:	e9c0 3300 	strd	r3, r3, [r0]
 8017eae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017eb2:	6083      	str	r3, [r0, #8]
 8017eb4:	8181      	strh	r1, [r0, #12]
 8017eb6:	6643      	str	r3, [r0, #100]	; 0x64
 8017eb8:	81c2      	strh	r2, [r0, #14]
 8017eba:	6183      	str	r3, [r0, #24]
 8017ebc:	4619      	mov	r1, r3
 8017ebe:	2208      	movs	r2, #8
 8017ec0:	305c      	adds	r0, #92	; 0x5c
 8017ec2:	f000 fad1 	bl	8018468 <memset>
 8017ec6:	4b0d      	ldr	r3, [pc, #52]	; (8017efc <std+0x58>)
 8017ec8:	6263      	str	r3, [r4, #36]	; 0x24
 8017eca:	4b0d      	ldr	r3, [pc, #52]	; (8017f00 <std+0x5c>)
 8017ecc:	62a3      	str	r3, [r4, #40]	; 0x28
 8017ece:	4b0d      	ldr	r3, [pc, #52]	; (8017f04 <std+0x60>)
 8017ed0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017ed2:	4b0d      	ldr	r3, [pc, #52]	; (8017f08 <std+0x64>)
 8017ed4:	6323      	str	r3, [r4, #48]	; 0x30
 8017ed6:	4b0d      	ldr	r3, [pc, #52]	; (8017f0c <std+0x68>)
 8017ed8:	6224      	str	r4, [r4, #32]
 8017eda:	429c      	cmp	r4, r3
 8017edc:	d006      	beq.n	8017eec <std+0x48>
 8017ede:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8017ee2:	4294      	cmp	r4, r2
 8017ee4:	d002      	beq.n	8017eec <std+0x48>
 8017ee6:	33d0      	adds	r3, #208	; 0xd0
 8017ee8:	429c      	cmp	r4, r3
 8017eea:	d105      	bne.n	8017ef8 <std+0x54>
 8017eec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ef4:	f000 bbcc 	b.w	8018690 <__retarget_lock_init_recursive>
 8017ef8:	bd10      	pop	{r4, pc}
 8017efa:	bf00      	nop
 8017efc:	08018211 	.word	0x08018211
 8017f00:	08018233 	.word	0x08018233
 8017f04:	0801826b 	.word	0x0801826b
 8017f08:	0801828f 	.word	0x0801828f
 8017f0c:	20009d40 	.word	0x20009d40

08017f10 <stdio_exit_handler>:
 8017f10:	4a02      	ldr	r2, [pc, #8]	; (8017f1c <stdio_exit_handler+0xc>)
 8017f12:	4903      	ldr	r1, [pc, #12]	; (8017f20 <stdio_exit_handler+0x10>)
 8017f14:	4803      	ldr	r0, [pc, #12]	; (8017f24 <stdio_exit_handler+0x14>)
 8017f16:	f000 b869 	b.w	8017fec <_fwalk_sglue>
 8017f1a:	bf00      	nop
 8017f1c:	20000078 	.word	0x20000078
 8017f20:	08019125 	.word	0x08019125
 8017f24:	20000084 	.word	0x20000084

08017f28 <cleanup_stdio>:
 8017f28:	6841      	ldr	r1, [r0, #4]
 8017f2a:	4b0c      	ldr	r3, [pc, #48]	; (8017f5c <cleanup_stdio+0x34>)
 8017f2c:	4299      	cmp	r1, r3
 8017f2e:	b510      	push	{r4, lr}
 8017f30:	4604      	mov	r4, r0
 8017f32:	d001      	beq.n	8017f38 <cleanup_stdio+0x10>
 8017f34:	f001 f8f6 	bl	8019124 <_fflush_r>
 8017f38:	68a1      	ldr	r1, [r4, #8]
 8017f3a:	4b09      	ldr	r3, [pc, #36]	; (8017f60 <cleanup_stdio+0x38>)
 8017f3c:	4299      	cmp	r1, r3
 8017f3e:	d002      	beq.n	8017f46 <cleanup_stdio+0x1e>
 8017f40:	4620      	mov	r0, r4
 8017f42:	f001 f8ef 	bl	8019124 <_fflush_r>
 8017f46:	68e1      	ldr	r1, [r4, #12]
 8017f48:	4b06      	ldr	r3, [pc, #24]	; (8017f64 <cleanup_stdio+0x3c>)
 8017f4a:	4299      	cmp	r1, r3
 8017f4c:	d004      	beq.n	8017f58 <cleanup_stdio+0x30>
 8017f4e:	4620      	mov	r0, r4
 8017f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f54:	f001 b8e6 	b.w	8019124 <_fflush_r>
 8017f58:	bd10      	pop	{r4, pc}
 8017f5a:	bf00      	nop
 8017f5c:	20009d40 	.word	0x20009d40
 8017f60:	20009da8 	.word	0x20009da8
 8017f64:	20009e10 	.word	0x20009e10

08017f68 <global_stdio_init.part.0>:
 8017f68:	b510      	push	{r4, lr}
 8017f6a:	4b0b      	ldr	r3, [pc, #44]	; (8017f98 <global_stdio_init.part.0+0x30>)
 8017f6c:	4c0b      	ldr	r4, [pc, #44]	; (8017f9c <global_stdio_init.part.0+0x34>)
 8017f6e:	4a0c      	ldr	r2, [pc, #48]	; (8017fa0 <global_stdio_init.part.0+0x38>)
 8017f70:	601a      	str	r2, [r3, #0]
 8017f72:	4620      	mov	r0, r4
 8017f74:	2200      	movs	r2, #0
 8017f76:	2104      	movs	r1, #4
 8017f78:	f7ff ff94 	bl	8017ea4 <std>
 8017f7c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8017f80:	2201      	movs	r2, #1
 8017f82:	2109      	movs	r1, #9
 8017f84:	f7ff ff8e 	bl	8017ea4 <std>
 8017f88:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8017f8c:	2202      	movs	r2, #2
 8017f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f92:	2112      	movs	r1, #18
 8017f94:	f7ff bf86 	b.w	8017ea4 <std>
 8017f98:	20009e78 	.word	0x20009e78
 8017f9c:	20009d40 	.word	0x20009d40
 8017fa0:	08017f11 	.word	0x08017f11

08017fa4 <__sfp_lock_acquire>:
 8017fa4:	4801      	ldr	r0, [pc, #4]	; (8017fac <__sfp_lock_acquire+0x8>)
 8017fa6:	f000 bb74 	b.w	8018692 <__retarget_lock_acquire_recursive>
 8017faa:	bf00      	nop
 8017fac:	20009e82 	.word	0x20009e82

08017fb0 <__sfp_lock_release>:
 8017fb0:	4801      	ldr	r0, [pc, #4]	; (8017fb8 <__sfp_lock_release+0x8>)
 8017fb2:	f000 bb6f 	b.w	8018694 <__retarget_lock_release_recursive>
 8017fb6:	bf00      	nop
 8017fb8:	20009e82 	.word	0x20009e82

08017fbc <__sinit>:
 8017fbc:	b510      	push	{r4, lr}
 8017fbe:	4604      	mov	r4, r0
 8017fc0:	f7ff fff0 	bl	8017fa4 <__sfp_lock_acquire>
 8017fc4:	6a23      	ldr	r3, [r4, #32]
 8017fc6:	b11b      	cbz	r3, 8017fd0 <__sinit+0x14>
 8017fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017fcc:	f7ff bff0 	b.w	8017fb0 <__sfp_lock_release>
 8017fd0:	4b04      	ldr	r3, [pc, #16]	; (8017fe4 <__sinit+0x28>)
 8017fd2:	6223      	str	r3, [r4, #32]
 8017fd4:	4b04      	ldr	r3, [pc, #16]	; (8017fe8 <__sinit+0x2c>)
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d1f5      	bne.n	8017fc8 <__sinit+0xc>
 8017fdc:	f7ff ffc4 	bl	8017f68 <global_stdio_init.part.0>
 8017fe0:	e7f2      	b.n	8017fc8 <__sinit+0xc>
 8017fe2:	bf00      	nop
 8017fe4:	08017f29 	.word	0x08017f29
 8017fe8:	20009e78 	.word	0x20009e78

08017fec <_fwalk_sglue>:
 8017fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017ff0:	4607      	mov	r7, r0
 8017ff2:	4688      	mov	r8, r1
 8017ff4:	4614      	mov	r4, r2
 8017ff6:	2600      	movs	r6, #0
 8017ff8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017ffc:	f1b9 0901 	subs.w	r9, r9, #1
 8018000:	d505      	bpl.n	801800e <_fwalk_sglue+0x22>
 8018002:	6824      	ldr	r4, [r4, #0]
 8018004:	2c00      	cmp	r4, #0
 8018006:	d1f7      	bne.n	8017ff8 <_fwalk_sglue+0xc>
 8018008:	4630      	mov	r0, r6
 801800a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801800e:	89ab      	ldrh	r3, [r5, #12]
 8018010:	2b01      	cmp	r3, #1
 8018012:	d907      	bls.n	8018024 <_fwalk_sglue+0x38>
 8018014:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018018:	3301      	adds	r3, #1
 801801a:	d003      	beq.n	8018024 <_fwalk_sglue+0x38>
 801801c:	4629      	mov	r1, r5
 801801e:	4638      	mov	r0, r7
 8018020:	47c0      	blx	r8
 8018022:	4306      	orrs	r6, r0
 8018024:	3568      	adds	r5, #104	; 0x68
 8018026:	e7e9      	b.n	8017ffc <_fwalk_sglue+0x10>

08018028 <iprintf>:
 8018028:	b40f      	push	{r0, r1, r2, r3}
 801802a:	b507      	push	{r0, r1, r2, lr}
 801802c:	4906      	ldr	r1, [pc, #24]	; (8018048 <iprintf+0x20>)
 801802e:	ab04      	add	r3, sp, #16
 8018030:	6808      	ldr	r0, [r1, #0]
 8018032:	f853 2b04 	ldr.w	r2, [r3], #4
 8018036:	6881      	ldr	r1, [r0, #8]
 8018038:	9301      	str	r3, [sp, #4]
 801803a:	f000 fd43 	bl	8018ac4 <_vfiprintf_r>
 801803e:	b003      	add	sp, #12
 8018040:	f85d eb04 	ldr.w	lr, [sp], #4
 8018044:	b004      	add	sp, #16
 8018046:	4770      	bx	lr
 8018048:	200000d0 	.word	0x200000d0

0801804c <setvbuf>:
 801804c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018050:	461d      	mov	r5, r3
 8018052:	4b54      	ldr	r3, [pc, #336]	; (80181a4 <setvbuf+0x158>)
 8018054:	681f      	ldr	r7, [r3, #0]
 8018056:	4604      	mov	r4, r0
 8018058:	460e      	mov	r6, r1
 801805a:	4690      	mov	r8, r2
 801805c:	b127      	cbz	r7, 8018068 <setvbuf+0x1c>
 801805e:	6a3b      	ldr	r3, [r7, #32]
 8018060:	b913      	cbnz	r3, 8018068 <setvbuf+0x1c>
 8018062:	4638      	mov	r0, r7
 8018064:	f7ff ffaa 	bl	8017fbc <__sinit>
 8018068:	f1b8 0f02 	cmp.w	r8, #2
 801806c:	d006      	beq.n	801807c <setvbuf+0x30>
 801806e:	f1b8 0f01 	cmp.w	r8, #1
 8018072:	f200 8094 	bhi.w	801819e <setvbuf+0x152>
 8018076:	2d00      	cmp	r5, #0
 8018078:	f2c0 8091 	blt.w	801819e <setvbuf+0x152>
 801807c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801807e:	07da      	lsls	r2, r3, #31
 8018080:	d405      	bmi.n	801808e <setvbuf+0x42>
 8018082:	89a3      	ldrh	r3, [r4, #12]
 8018084:	059b      	lsls	r3, r3, #22
 8018086:	d402      	bmi.n	801808e <setvbuf+0x42>
 8018088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801808a:	f000 fb02 	bl	8018692 <__retarget_lock_acquire_recursive>
 801808e:	4621      	mov	r1, r4
 8018090:	4638      	mov	r0, r7
 8018092:	f001 f847 	bl	8019124 <_fflush_r>
 8018096:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018098:	b141      	cbz	r1, 80180ac <setvbuf+0x60>
 801809a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801809e:	4299      	cmp	r1, r3
 80180a0:	d002      	beq.n	80180a8 <setvbuf+0x5c>
 80180a2:	4638      	mov	r0, r7
 80180a4:	f000 fb38 	bl	8018718 <_free_r>
 80180a8:	2300      	movs	r3, #0
 80180aa:	6363      	str	r3, [r4, #52]	; 0x34
 80180ac:	2300      	movs	r3, #0
 80180ae:	61a3      	str	r3, [r4, #24]
 80180b0:	6063      	str	r3, [r4, #4]
 80180b2:	89a3      	ldrh	r3, [r4, #12]
 80180b4:	0618      	lsls	r0, r3, #24
 80180b6:	d503      	bpl.n	80180c0 <setvbuf+0x74>
 80180b8:	6921      	ldr	r1, [r4, #16]
 80180ba:	4638      	mov	r0, r7
 80180bc:	f000 fb2c 	bl	8018718 <_free_r>
 80180c0:	89a3      	ldrh	r3, [r4, #12]
 80180c2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80180c6:	f023 0303 	bic.w	r3, r3, #3
 80180ca:	f1b8 0f02 	cmp.w	r8, #2
 80180ce:	81a3      	strh	r3, [r4, #12]
 80180d0:	d05f      	beq.n	8018192 <setvbuf+0x146>
 80180d2:	ab01      	add	r3, sp, #4
 80180d4:	466a      	mov	r2, sp
 80180d6:	4621      	mov	r1, r4
 80180d8:	4638      	mov	r0, r7
 80180da:	f001 f85d 	bl	8019198 <__swhatbuf_r>
 80180de:	89a3      	ldrh	r3, [r4, #12]
 80180e0:	4318      	orrs	r0, r3
 80180e2:	81a0      	strh	r0, [r4, #12]
 80180e4:	bb2d      	cbnz	r5, 8018132 <setvbuf+0xe6>
 80180e6:	9d00      	ldr	r5, [sp, #0]
 80180e8:	4628      	mov	r0, r5
 80180ea:	f7ff fcff 	bl	8017aec <malloc>
 80180ee:	4606      	mov	r6, r0
 80180f0:	2800      	cmp	r0, #0
 80180f2:	d150      	bne.n	8018196 <setvbuf+0x14a>
 80180f4:	f8dd 9000 	ldr.w	r9, [sp]
 80180f8:	45a9      	cmp	r9, r5
 80180fa:	d13e      	bne.n	801817a <setvbuf+0x12e>
 80180fc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8018100:	2200      	movs	r2, #0
 8018102:	60a2      	str	r2, [r4, #8]
 8018104:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8018108:	6022      	str	r2, [r4, #0]
 801810a:	6122      	str	r2, [r4, #16]
 801810c:	2201      	movs	r2, #1
 801810e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018112:	6162      	str	r2, [r4, #20]
 8018114:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018116:	f043 0302 	orr.w	r3, r3, #2
 801811a:	07d1      	lsls	r1, r2, #31
 801811c:	81a3      	strh	r3, [r4, #12]
 801811e:	d404      	bmi.n	801812a <setvbuf+0xde>
 8018120:	059b      	lsls	r3, r3, #22
 8018122:	d402      	bmi.n	801812a <setvbuf+0xde>
 8018124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018126:	f000 fab5 	bl	8018694 <__retarget_lock_release_recursive>
 801812a:	4628      	mov	r0, r5
 801812c:	b003      	add	sp, #12
 801812e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018132:	2e00      	cmp	r6, #0
 8018134:	d0d8      	beq.n	80180e8 <setvbuf+0x9c>
 8018136:	6a3b      	ldr	r3, [r7, #32]
 8018138:	b913      	cbnz	r3, 8018140 <setvbuf+0xf4>
 801813a:	4638      	mov	r0, r7
 801813c:	f7ff ff3e 	bl	8017fbc <__sinit>
 8018140:	f1b8 0f01 	cmp.w	r8, #1
 8018144:	bf08      	it	eq
 8018146:	89a3      	ldrheq	r3, [r4, #12]
 8018148:	6026      	str	r6, [r4, #0]
 801814a:	bf04      	itt	eq
 801814c:	f043 0301 	orreq.w	r3, r3, #1
 8018150:	81a3      	strheq	r3, [r4, #12]
 8018152:	89a3      	ldrh	r3, [r4, #12]
 8018154:	f013 0208 	ands.w	r2, r3, #8
 8018158:	e9c4 6504 	strd	r6, r5, [r4, #16]
 801815c:	d01d      	beq.n	801819a <setvbuf+0x14e>
 801815e:	07da      	lsls	r2, r3, #31
 8018160:	bf41      	itttt	mi
 8018162:	2200      	movmi	r2, #0
 8018164:	426d      	negmi	r5, r5
 8018166:	60a2      	strmi	r2, [r4, #8]
 8018168:	61a5      	strmi	r5, [r4, #24]
 801816a:	bf58      	it	pl
 801816c:	60a5      	strpl	r5, [r4, #8]
 801816e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8018170:	f015 0501 	ands.w	r5, r5, #1
 8018174:	d0d4      	beq.n	8018120 <setvbuf+0xd4>
 8018176:	2500      	movs	r5, #0
 8018178:	e7d7      	b.n	801812a <setvbuf+0xde>
 801817a:	4648      	mov	r0, r9
 801817c:	f7ff fcb6 	bl	8017aec <malloc>
 8018180:	4606      	mov	r6, r0
 8018182:	2800      	cmp	r0, #0
 8018184:	d0ba      	beq.n	80180fc <setvbuf+0xb0>
 8018186:	89a3      	ldrh	r3, [r4, #12]
 8018188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801818c:	81a3      	strh	r3, [r4, #12]
 801818e:	464d      	mov	r5, r9
 8018190:	e7d1      	b.n	8018136 <setvbuf+0xea>
 8018192:	2500      	movs	r5, #0
 8018194:	e7b4      	b.n	8018100 <setvbuf+0xb4>
 8018196:	46a9      	mov	r9, r5
 8018198:	e7f5      	b.n	8018186 <setvbuf+0x13a>
 801819a:	60a2      	str	r2, [r4, #8]
 801819c:	e7e7      	b.n	801816e <setvbuf+0x122>
 801819e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80181a2:	e7c2      	b.n	801812a <setvbuf+0xde>
 80181a4:	200000d0 	.word	0x200000d0

080181a8 <sniprintf>:
 80181a8:	b40c      	push	{r2, r3}
 80181aa:	b530      	push	{r4, r5, lr}
 80181ac:	4b17      	ldr	r3, [pc, #92]	; (801820c <sniprintf+0x64>)
 80181ae:	1e0c      	subs	r4, r1, #0
 80181b0:	681d      	ldr	r5, [r3, #0]
 80181b2:	b09d      	sub	sp, #116	; 0x74
 80181b4:	da08      	bge.n	80181c8 <sniprintf+0x20>
 80181b6:	238b      	movs	r3, #139	; 0x8b
 80181b8:	602b      	str	r3, [r5, #0]
 80181ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80181be:	b01d      	add	sp, #116	; 0x74
 80181c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80181c4:	b002      	add	sp, #8
 80181c6:	4770      	bx	lr
 80181c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80181cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80181d0:	bf14      	ite	ne
 80181d2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80181d6:	4623      	moveq	r3, r4
 80181d8:	9304      	str	r3, [sp, #16]
 80181da:	9307      	str	r3, [sp, #28]
 80181dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80181e0:	9002      	str	r0, [sp, #8]
 80181e2:	9006      	str	r0, [sp, #24]
 80181e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80181e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80181ea:	ab21      	add	r3, sp, #132	; 0x84
 80181ec:	a902      	add	r1, sp, #8
 80181ee:	4628      	mov	r0, r5
 80181f0:	9301      	str	r3, [sp, #4]
 80181f2:	f000 fb3f 	bl	8018874 <_svfiprintf_r>
 80181f6:	1c43      	adds	r3, r0, #1
 80181f8:	bfbc      	itt	lt
 80181fa:	238b      	movlt	r3, #139	; 0x8b
 80181fc:	602b      	strlt	r3, [r5, #0]
 80181fe:	2c00      	cmp	r4, #0
 8018200:	d0dd      	beq.n	80181be <sniprintf+0x16>
 8018202:	9b02      	ldr	r3, [sp, #8]
 8018204:	2200      	movs	r2, #0
 8018206:	701a      	strb	r2, [r3, #0]
 8018208:	e7d9      	b.n	80181be <sniprintf+0x16>
 801820a:	bf00      	nop
 801820c:	200000d0 	.word	0x200000d0

08018210 <__sread>:
 8018210:	b510      	push	{r4, lr}
 8018212:	460c      	mov	r4, r1
 8018214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018218:	f000 f9dc 	bl	80185d4 <_read_r>
 801821c:	2800      	cmp	r0, #0
 801821e:	bfab      	itete	ge
 8018220:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018222:	89a3      	ldrhlt	r3, [r4, #12]
 8018224:	181b      	addge	r3, r3, r0
 8018226:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801822a:	bfac      	ite	ge
 801822c:	6563      	strge	r3, [r4, #84]	; 0x54
 801822e:	81a3      	strhlt	r3, [r4, #12]
 8018230:	bd10      	pop	{r4, pc}

08018232 <__swrite>:
 8018232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018236:	461f      	mov	r7, r3
 8018238:	898b      	ldrh	r3, [r1, #12]
 801823a:	05db      	lsls	r3, r3, #23
 801823c:	4605      	mov	r5, r0
 801823e:	460c      	mov	r4, r1
 8018240:	4616      	mov	r6, r2
 8018242:	d505      	bpl.n	8018250 <__swrite+0x1e>
 8018244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018248:	2302      	movs	r3, #2
 801824a:	2200      	movs	r2, #0
 801824c:	f000 f9b0 	bl	80185b0 <_lseek_r>
 8018250:	89a3      	ldrh	r3, [r4, #12]
 8018252:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018256:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801825a:	81a3      	strh	r3, [r4, #12]
 801825c:	4632      	mov	r2, r6
 801825e:	463b      	mov	r3, r7
 8018260:	4628      	mov	r0, r5
 8018262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018266:	f000 b9d7 	b.w	8018618 <_write_r>

0801826a <__sseek>:
 801826a:	b510      	push	{r4, lr}
 801826c:	460c      	mov	r4, r1
 801826e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018272:	f000 f99d 	bl	80185b0 <_lseek_r>
 8018276:	1c43      	adds	r3, r0, #1
 8018278:	89a3      	ldrh	r3, [r4, #12]
 801827a:	bf15      	itete	ne
 801827c:	6560      	strne	r0, [r4, #84]	; 0x54
 801827e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018282:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018286:	81a3      	strheq	r3, [r4, #12]
 8018288:	bf18      	it	ne
 801828a:	81a3      	strhne	r3, [r4, #12]
 801828c:	bd10      	pop	{r4, pc}

0801828e <__sclose>:
 801828e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018292:	f000 b927 	b.w	80184e4 <_close_r>

08018296 <_vsniprintf_r>:
 8018296:	b530      	push	{r4, r5, lr}
 8018298:	4614      	mov	r4, r2
 801829a:	2c00      	cmp	r4, #0
 801829c:	b09b      	sub	sp, #108	; 0x6c
 801829e:	4605      	mov	r5, r0
 80182a0:	461a      	mov	r2, r3
 80182a2:	da05      	bge.n	80182b0 <_vsniprintf_r+0x1a>
 80182a4:	238b      	movs	r3, #139	; 0x8b
 80182a6:	6003      	str	r3, [r0, #0]
 80182a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80182ac:	b01b      	add	sp, #108	; 0x6c
 80182ae:	bd30      	pop	{r4, r5, pc}
 80182b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80182b4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80182b8:	bf14      	ite	ne
 80182ba:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80182be:	4623      	moveq	r3, r4
 80182c0:	9302      	str	r3, [sp, #8]
 80182c2:	9305      	str	r3, [sp, #20]
 80182c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80182c8:	9100      	str	r1, [sp, #0]
 80182ca:	9104      	str	r1, [sp, #16]
 80182cc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80182d0:	4669      	mov	r1, sp
 80182d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80182d4:	f000 face 	bl	8018874 <_svfiprintf_r>
 80182d8:	1c43      	adds	r3, r0, #1
 80182da:	bfbc      	itt	lt
 80182dc:	238b      	movlt	r3, #139	; 0x8b
 80182de:	602b      	strlt	r3, [r5, #0]
 80182e0:	2c00      	cmp	r4, #0
 80182e2:	d0e3      	beq.n	80182ac <_vsniprintf_r+0x16>
 80182e4:	9b00      	ldr	r3, [sp, #0]
 80182e6:	2200      	movs	r2, #0
 80182e8:	701a      	strb	r2, [r3, #0]
 80182ea:	e7df      	b.n	80182ac <_vsniprintf_r+0x16>

080182ec <vsniprintf>:
 80182ec:	b507      	push	{r0, r1, r2, lr}
 80182ee:	9300      	str	r3, [sp, #0]
 80182f0:	4613      	mov	r3, r2
 80182f2:	460a      	mov	r2, r1
 80182f4:	4601      	mov	r1, r0
 80182f6:	4803      	ldr	r0, [pc, #12]	; (8018304 <vsniprintf+0x18>)
 80182f8:	6800      	ldr	r0, [r0, #0]
 80182fa:	f7ff ffcc 	bl	8018296 <_vsniprintf_r>
 80182fe:	b003      	add	sp, #12
 8018300:	f85d fb04 	ldr.w	pc, [sp], #4
 8018304:	200000d0 	.word	0x200000d0

08018308 <__swbuf_r>:
 8018308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801830a:	460e      	mov	r6, r1
 801830c:	4614      	mov	r4, r2
 801830e:	4605      	mov	r5, r0
 8018310:	b118      	cbz	r0, 801831a <__swbuf_r+0x12>
 8018312:	6a03      	ldr	r3, [r0, #32]
 8018314:	b90b      	cbnz	r3, 801831a <__swbuf_r+0x12>
 8018316:	f7ff fe51 	bl	8017fbc <__sinit>
 801831a:	69a3      	ldr	r3, [r4, #24]
 801831c:	60a3      	str	r3, [r4, #8]
 801831e:	89a3      	ldrh	r3, [r4, #12]
 8018320:	071a      	lsls	r2, r3, #28
 8018322:	d525      	bpl.n	8018370 <__swbuf_r+0x68>
 8018324:	6923      	ldr	r3, [r4, #16]
 8018326:	b31b      	cbz	r3, 8018370 <__swbuf_r+0x68>
 8018328:	6823      	ldr	r3, [r4, #0]
 801832a:	6922      	ldr	r2, [r4, #16]
 801832c:	1a98      	subs	r0, r3, r2
 801832e:	6963      	ldr	r3, [r4, #20]
 8018330:	b2f6      	uxtb	r6, r6
 8018332:	4283      	cmp	r3, r0
 8018334:	4637      	mov	r7, r6
 8018336:	dc04      	bgt.n	8018342 <__swbuf_r+0x3a>
 8018338:	4621      	mov	r1, r4
 801833a:	4628      	mov	r0, r5
 801833c:	f000 fef2 	bl	8019124 <_fflush_r>
 8018340:	b9e0      	cbnz	r0, 801837c <__swbuf_r+0x74>
 8018342:	68a3      	ldr	r3, [r4, #8]
 8018344:	3b01      	subs	r3, #1
 8018346:	60a3      	str	r3, [r4, #8]
 8018348:	6823      	ldr	r3, [r4, #0]
 801834a:	1c5a      	adds	r2, r3, #1
 801834c:	6022      	str	r2, [r4, #0]
 801834e:	701e      	strb	r6, [r3, #0]
 8018350:	6962      	ldr	r2, [r4, #20]
 8018352:	1c43      	adds	r3, r0, #1
 8018354:	429a      	cmp	r2, r3
 8018356:	d004      	beq.n	8018362 <__swbuf_r+0x5a>
 8018358:	89a3      	ldrh	r3, [r4, #12]
 801835a:	07db      	lsls	r3, r3, #31
 801835c:	d506      	bpl.n	801836c <__swbuf_r+0x64>
 801835e:	2e0a      	cmp	r6, #10
 8018360:	d104      	bne.n	801836c <__swbuf_r+0x64>
 8018362:	4621      	mov	r1, r4
 8018364:	4628      	mov	r0, r5
 8018366:	f000 fedd 	bl	8019124 <_fflush_r>
 801836a:	b938      	cbnz	r0, 801837c <__swbuf_r+0x74>
 801836c:	4638      	mov	r0, r7
 801836e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018370:	4621      	mov	r1, r4
 8018372:	4628      	mov	r0, r5
 8018374:	f000 f806 	bl	8018384 <__swsetup_r>
 8018378:	2800      	cmp	r0, #0
 801837a:	d0d5      	beq.n	8018328 <__swbuf_r+0x20>
 801837c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018380:	e7f4      	b.n	801836c <__swbuf_r+0x64>
	...

08018384 <__swsetup_r>:
 8018384:	b538      	push	{r3, r4, r5, lr}
 8018386:	4b2a      	ldr	r3, [pc, #168]	; (8018430 <__swsetup_r+0xac>)
 8018388:	4605      	mov	r5, r0
 801838a:	6818      	ldr	r0, [r3, #0]
 801838c:	460c      	mov	r4, r1
 801838e:	b118      	cbz	r0, 8018398 <__swsetup_r+0x14>
 8018390:	6a03      	ldr	r3, [r0, #32]
 8018392:	b90b      	cbnz	r3, 8018398 <__swsetup_r+0x14>
 8018394:	f7ff fe12 	bl	8017fbc <__sinit>
 8018398:	89a3      	ldrh	r3, [r4, #12]
 801839a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801839e:	0718      	lsls	r0, r3, #28
 80183a0:	d422      	bmi.n	80183e8 <__swsetup_r+0x64>
 80183a2:	06d9      	lsls	r1, r3, #27
 80183a4:	d407      	bmi.n	80183b6 <__swsetup_r+0x32>
 80183a6:	2309      	movs	r3, #9
 80183a8:	602b      	str	r3, [r5, #0]
 80183aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80183ae:	81a3      	strh	r3, [r4, #12]
 80183b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80183b4:	e034      	b.n	8018420 <__swsetup_r+0x9c>
 80183b6:	0758      	lsls	r0, r3, #29
 80183b8:	d512      	bpl.n	80183e0 <__swsetup_r+0x5c>
 80183ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80183bc:	b141      	cbz	r1, 80183d0 <__swsetup_r+0x4c>
 80183be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80183c2:	4299      	cmp	r1, r3
 80183c4:	d002      	beq.n	80183cc <__swsetup_r+0x48>
 80183c6:	4628      	mov	r0, r5
 80183c8:	f000 f9a6 	bl	8018718 <_free_r>
 80183cc:	2300      	movs	r3, #0
 80183ce:	6363      	str	r3, [r4, #52]	; 0x34
 80183d0:	89a3      	ldrh	r3, [r4, #12]
 80183d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80183d6:	81a3      	strh	r3, [r4, #12]
 80183d8:	2300      	movs	r3, #0
 80183da:	6063      	str	r3, [r4, #4]
 80183dc:	6923      	ldr	r3, [r4, #16]
 80183de:	6023      	str	r3, [r4, #0]
 80183e0:	89a3      	ldrh	r3, [r4, #12]
 80183e2:	f043 0308 	orr.w	r3, r3, #8
 80183e6:	81a3      	strh	r3, [r4, #12]
 80183e8:	6923      	ldr	r3, [r4, #16]
 80183ea:	b94b      	cbnz	r3, 8018400 <__swsetup_r+0x7c>
 80183ec:	89a3      	ldrh	r3, [r4, #12]
 80183ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80183f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80183f6:	d003      	beq.n	8018400 <__swsetup_r+0x7c>
 80183f8:	4621      	mov	r1, r4
 80183fa:	4628      	mov	r0, r5
 80183fc:	f000 fef2 	bl	80191e4 <__smakebuf_r>
 8018400:	89a0      	ldrh	r0, [r4, #12]
 8018402:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018406:	f010 0301 	ands.w	r3, r0, #1
 801840a:	d00a      	beq.n	8018422 <__swsetup_r+0x9e>
 801840c:	2300      	movs	r3, #0
 801840e:	60a3      	str	r3, [r4, #8]
 8018410:	6963      	ldr	r3, [r4, #20]
 8018412:	425b      	negs	r3, r3
 8018414:	61a3      	str	r3, [r4, #24]
 8018416:	6923      	ldr	r3, [r4, #16]
 8018418:	b943      	cbnz	r3, 801842c <__swsetup_r+0xa8>
 801841a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801841e:	d1c4      	bne.n	80183aa <__swsetup_r+0x26>
 8018420:	bd38      	pop	{r3, r4, r5, pc}
 8018422:	0781      	lsls	r1, r0, #30
 8018424:	bf58      	it	pl
 8018426:	6963      	ldrpl	r3, [r4, #20]
 8018428:	60a3      	str	r3, [r4, #8]
 801842a:	e7f4      	b.n	8018416 <__swsetup_r+0x92>
 801842c:	2000      	movs	r0, #0
 801842e:	e7f7      	b.n	8018420 <__swsetup_r+0x9c>
 8018430:	200000d0 	.word	0x200000d0

08018434 <memmove>:
 8018434:	4288      	cmp	r0, r1
 8018436:	b510      	push	{r4, lr}
 8018438:	eb01 0402 	add.w	r4, r1, r2
 801843c:	d902      	bls.n	8018444 <memmove+0x10>
 801843e:	4284      	cmp	r4, r0
 8018440:	4623      	mov	r3, r4
 8018442:	d807      	bhi.n	8018454 <memmove+0x20>
 8018444:	1e43      	subs	r3, r0, #1
 8018446:	42a1      	cmp	r1, r4
 8018448:	d008      	beq.n	801845c <memmove+0x28>
 801844a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801844e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018452:	e7f8      	b.n	8018446 <memmove+0x12>
 8018454:	4402      	add	r2, r0
 8018456:	4601      	mov	r1, r0
 8018458:	428a      	cmp	r2, r1
 801845a:	d100      	bne.n	801845e <memmove+0x2a>
 801845c:	bd10      	pop	{r4, pc}
 801845e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018462:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018466:	e7f7      	b.n	8018458 <memmove+0x24>

08018468 <memset>:
 8018468:	4402      	add	r2, r0
 801846a:	4603      	mov	r3, r0
 801846c:	4293      	cmp	r3, r2
 801846e:	d100      	bne.n	8018472 <memset+0xa>
 8018470:	4770      	bx	lr
 8018472:	f803 1b01 	strb.w	r1, [r3], #1
 8018476:	e7f9      	b.n	801846c <memset+0x4>

08018478 <strchr>:
 8018478:	b2c9      	uxtb	r1, r1
 801847a:	4603      	mov	r3, r0
 801847c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018480:	b11a      	cbz	r2, 801848a <strchr+0x12>
 8018482:	428a      	cmp	r2, r1
 8018484:	d1f9      	bne.n	801847a <strchr+0x2>
 8018486:	4618      	mov	r0, r3
 8018488:	4770      	bx	lr
 801848a:	2900      	cmp	r1, #0
 801848c:	bf18      	it	ne
 801848e:	2300      	movne	r3, #0
 8018490:	e7f9      	b.n	8018486 <strchr+0xe>

08018492 <strncmp>:
 8018492:	b510      	push	{r4, lr}
 8018494:	b16a      	cbz	r2, 80184b2 <strncmp+0x20>
 8018496:	3901      	subs	r1, #1
 8018498:	1884      	adds	r4, r0, r2
 801849a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801849e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80184a2:	429a      	cmp	r2, r3
 80184a4:	d103      	bne.n	80184ae <strncmp+0x1c>
 80184a6:	42a0      	cmp	r0, r4
 80184a8:	d001      	beq.n	80184ae <strncmp+0x1c>
 80184aa:	2a00      	cmp	r2, #0
 80184ac:	d1f5      	bne.n	801849a <strncmp+0x8>
 80184ae:	1ad0      	subs	r0, r2, r3
 80184b0:	bd10      	pop	{r4, pc}
 80184b2:	4610      	mov	r0, r2
 80184b4:	e7fc      	b.n	80184b0 <strncmp+0x1e>

080184b6 <strstr>:
 80184b6:	780a      	ldrb	r2, [r1, #0]
 80184b8:	b570      	push	{r4, r5, r6, lr}
 80184ba:	b96a      	cbnz	r2, 80184d8 <strstr+0x22>
 80184bc:	bd70      	pop	{r4, r5, r6, pc}
 80184be:	429a      	cmp	r2, r3
 80184c0:	d109      	bne.n	80184d6 <strstr+0x20>
 80184c2:	460c      	mov	r4, r1
 80184c4:	4605      	mov	r5, r0
 80184c6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d0f6      	beq.n	80184bc <strstr+0x6>
 80184ce:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80184d2:	429e      	cmp	r6, r3
 80184d4:	d0f7      	beq.n	80184c6 <strstr+0x10>
 80184d6:	3001      	adds	r0, #1
 80184d8:	7803      	ldrb	r3, [r0, #0]
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d1ef      	bne.n	80184be <strstr+0x8>
 80184de:	4618      	mov	r0, r3
 80184e0:	e7ec      	b.n	80184bc <strstr+0x6>
	...

080184e4 <_close_r>:
 80184e4:	b538      	push	{r3, r4, r5, lr}
 80184e6:	4d06      	ldr	r5, [pc, #24]	; (8018500 <_close_r+0x1c>)
 80184e8:	2300      	movs	r3, #0
 80184ea:	4604      	mov	r4, r0
 80184ec:	4608      	mov	r0, r1
 80184ee:	602b      	str	r3, [r5, #0]
 80184f0:	f7ea fc82 	bl	8002df8 <_close>
 80184f4:	1c43      	adds	r3, r0, #1
 80184f6:	d102      	bne.n	80184fe <_close_r+0x1a>
 80184f8:	682b      	ldr	r3, [r5, #0]
 80184fa:	b103      	cbz	r3, 80184fe <_close_r+0x1a>
 80184fc:	6023      	str	r3, [r4, #0]
 80184fe:	bd38      	pop	{r3, r4, r5, pc}
 8018500:	20009e7c 	.word	0x20009e7c

08018504 <_reclaim_reent>:
 8018504:	4b29      	ldr	r3, [pc, #164]	; (80185ac <_reclaim_reent+0xa8>)
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	4283      	cmp	r3, r0
 801850a:	b570      	push	{r4, r5, r6, lr}
 801850c:	4604      	mov	r4, r0
 801850e:	d04b      	beq.n	80185a8 <_reclaim_reent+0xa4>
 8018510:	69c3      	ldr	r3, [r0, #28]
 8018512:	b143      	cbz	r3, 8018526 <_reclaim_reent+0x22>
 8018514:	68db      	ldr	r3, [r3, #12]
 8018516:	2b00      	cmp	r3, #0
 8018518:	d144      	bne.n	80185a4 <_reclaim_reent+0xa0>
 801851a:	69e3      	ldr	r3, [r4, #28]
 801851c:	6819      	ldr	r1, [r3, #0]
 801851e:	b111      	cbz	r1, 8018526 <_reclaim_reent+0x22>
 8018520:	4620      	mov	r0, r4
 8018522:	f000 f8f9 	bl	8018718 <_free_r>
 8018526:	6961      	ldr	r1, [r4, #20]
 8018528:	b111      	cbz	r1, 8018530 <_reclaim_reent+0x2c>
 801852a:	4620      	mov	r0, r4
 801852c:	f000 f8f4 	bl	8018718 <_free_r>
 8018530:	69e1      	ldr	r1, [r4, #28]
 8018532:	b111      	cbz	r1, 801853a <_reclaim_reent+0x36>
 8018534:	4620      	mov	r0, r4
 8018536:	f000 f8ef 	bl	8018718 <_free_r>
 801853a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801853c:	b111      	cbz	r1, 8018544 <_reclaim_reent+0x40>
 801853e:	4620      	mov	r0, r4
 8018540:	f000 f8ea 	bl	8018718 <_free_r>
 8018544:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018546:	b111      	cbz	r1, 801854e <_reclaim_reent+0x4a>
 8018548:	4620      	mov	r0, r4
 801854a:	f000 f8e5 	bl	8018718 <_free_r>
 801854e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018550:	b111      	cbz	r1, 8018558 <_reclaim_reent+0x54>
 8018552:	4620      	mov	r0, r4
 8018554:	f000 f8e0 	bl	8018718 <_free_r>
 8018558:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801855a:	b111      	cbz	r1, 8018562 <_reclaim_reent+0x5e>
 801855c:	4620      	mov	r0, r4
 801855e:	f000 f8db 	bl	8018718 <_free_r>
 8018562:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8018564:	b111      	cbz	r1, 801856c <_reclaim_reent+0x68>
 8018566:	4620      	mov	r0, r4
 8018568:	f000 f8d6 	bl	8018718 <_free_r>
 801856c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801856e:	b111      	cbz	r1, 8018576 <_reclaim_reent+0x72>
 8018570:	4620      	mov	r0, r4
 8018572:	f000 f8d1 	bl	8018718 <_free_r>
 8018576:	6a23      	ldr	r3, [r4, #32]
 8018578:	b1b3      	cbz	r3, 80185a8 <_reclaim_reent+0xa4>
 801857a:	4620      	mov	r0, r4
 801857c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018580:	4718      	bx	r3
 8018582:	5949      	ldr	r1, [r1, r5]
 8018584:	b941      	cbnz	r1, 8018598 <_reclaim_reent+0x94>
 8018586:	3504      	adds	r5, #4
 8018588:	69e3      	ldr	r3, [r4, #28]
 801858a:	2d80      	cmp	r5, #128	; 0x80
 801858c:	68d9      	ldr	r1, [r3, #12]
 801858e:	d1f8      	bne.n	8018582 <_reclaim_reent+0x7e>
 8018590:	4620      	mov	r0, r4
 8018592:	f000 f8c1 	bl	8018718 <_free_r>
 8018596:	e7c0      	b.n	801851a <_reclaim_reent+0x16>
 8018598:	680e      	ldr	r6, [r1, #0]
 801859a:	4620      	mov	r0, r4
 801859c:	f000 f8bc 	bl	8018718 <_free_r>
 80185a0:	4631      	mov	r1, r6
 80185a2:	e7ef      	b.n	8018584 <_reclaim_reent+0x80>
 80185a4:	2500      	movs	r5, #0
 80185a6:	e7ef      	b.n	8018588 <_reclaim_reent+0x84>
 80185a8:	bd70      	pop	{r4, r5, r6, pc}
 80185aa:	bf00      	nop
 80185ac:	200000d0 	.word	0x200000d0

080185b0 <_lseek_r>:
 80185b0:	b538      	push	{r3, r4, r5, lr}
 80185b2:	4d07      	ldr	r5, [pc, #28]	; (80185d0 <_lseek_r+0x20>)
 80185b4:	4604      	mov	r4, r0
 80185b6:	4608      	mov	r0, r1
 80185b8:	4611      	mov	r1, r2
 80185ba:	2200      	movs	r2, #0
 80185bc:	602a      	str	r2, [r5, #0]
 80185be:	461a      	mov	r2, r3
 80185c0:	f7ea fc31 	bl	8002e26 <_lseek>
 80185c4:	1c43      	adds	r3, r0, #1
 80185c6:	d102      	bne.n	80185ce <_lseek_r+0x1e>
 80185c8:	682b      	ldr	r3, [r5, #0]
 80185ca:	b103      	cbz	r3, 80185ce <_lseek_r+0x1e>
 80185cc:	6023      	str	r3, [r4, #0]
 80185ce:	bd38      	pop	{r3, r4, r5, pc}
 80185d0:	20009e7c 	.word	0x20009e7c

080185d4 <_read_r>:
 80185d4:	b538      	push	{r3, r4, r5, lr}
 80185d6:	4d07      	ldr	r5, [pc, #28]	; (80185f4 <_read_r+0x20>)
 80185d8:	4604      	mov	r4, r0
 80185da:	4608      	mov	r0, r1
 80185dc:	4611      	mov	r1, r2
 80185de:	2200      	movs	r2, #0
 80185e0:	602a      	str	r2, [r5, #0]
 80185e2:	461a      	mov	r2, r3
 80185e4:	f7ea fc30 	bl	8002e48 <_read>
 80185e8:	1c43      	adds	r3, r0, #1
 80185ea:	d102      	bne.n	80185f2 <_read_r+0x1e>
 80185ec:	682b      	ldr	r3, [r5, #0]
 80185ee:	b103      	cbz	r3, 80185f2 <_read_r+0x1e>
 80185f0:	6023      	str	r3, [r4, #0]
 80185f2:	bd38      	pop	{r3, r4, r5, pc}
 80185f4:	20009e7c 	.word	0x20009e7c

080185f8 <_sbrk_r>:
 80185f8:	b538      	push	{r3, r4, r5, lr}
 80185fa:	4d06      	ldr	r5, [pc, #24]	; (8018614 <_sbrk_r+0x1c>)
 80185fc:	2300      	movs	r3, #0
 80185fe:	4604      	mov	r4, r0
 8018600:	4608      	mov	r0, r1
 8018602:	602b      	str	r3, [r5, #0]
 8018604:	f7eb f8ba 	bl	800377c <_sbrk>
 8018608:	1c43      	adds	r3, r0, #1
 801860a:	d102      	bne.n	8018612 <_sbrk_r+0x1a>
 801860c:	682b      	ldr	r3, [r5, #0]
 801860e:	b103      	cbz	r3, 8018612 <_sbrk_r+0x1a>
 8018610:	6023      	str	r3, [r4, #0]
 8018612:	bd38      	pop	{r3, r4, r5, pc}
 8018614:	20009e7c 	.word	0x20009e7c

08018618 <_write_r>:
 8018618:	b538      	push	{r3, r4, r5, lr}
 801861a:	4d07      	ldr	r5, [pc, #28]	; (8018638 <_write_r+0x20>)
 801861c:	4604      	mov	r4, r0
 801861e:	4608      	mov	r0, r1
 8018620:	4611      	mov	r1, r2
 8018622:	2200      	movs	r2, #0
 8018624:	602a      	str	r2, [r5, #0]
 8018626:	461a      	mov	r2, r3
 8018628:	f7ea fbba 	bl	8002da0 <_write>
 801862c:	1c43      	adds	r3, r0, #1
 801862e:	d102      	bne.n	8018636 <_write_r+0x1e>
 8018630:	682b      	ldr	r3, [r5, #0]
 8018632:	b103      	cbz	r3, 8018636 <_write_r+0x1e>
 8018634:	6023      	str	r3, [r4, #0]
 8018636:	bd38      	pop	{r3, r4, r5, pc}
 8018638:	20009e7c 	.word	0x20009e7c

0801863c <__errno>:
 801863c:	4b01      	ldr	r3, [pc, #4]	; (8018644 <__errno+0x8>)
 801863e:	6818      	ldr	r0, [r3, #0]
 8018640:	4770      	bx	lr
 8018642:	bf00      	nop
 8018644:	200000d0 	.word	0x200000d0

08018648 <__libc_init_array>:
 8018648:	b570      	push	{r4, r5, r6, lr}
 801864a:	4d0d      	ldr	r5, [pc, #52]	; (8018680 <__libc_init_array+0x38>)
 801864c:	4c0d      	ldr	r4, [pc, #52]	; (8018684 <__libc_init_array+0x3c>)
 801864e:	1b64      	subs	r4, r4, r5
 8018650:	10a4      	asrs	r4, r4, #2
 8018652:	2600      	movs	r6, #0
 8018654:	42a6      	cmp	r6, r4
 8018656:	d109      	bne.n	801866c <__libc_init_array+0x24>
 8018658:	4d0b      	ldr	r5, [pc, #44]	; (8018688 <__libc_init_array+0x40>)
 801865a:	4c0c      	ldr	r4, [pc, #48]	; (801868c <__libc_init_array+0x44>)
 801865c:	f000 fe6e 	bl	801933c <_init>
 8018660:	1b64      	subs	r4, r4, r5
 8018662:	10a4      	asrs	r4, r4, #2
 8018664:	2600      	movs	r6, #0
 8018666:	42a6      	cmp	r6, r4
 8018668:	d105      	bne.n	8018676 <__libc_init_array+0x2e>
 801866a:	bd70      	pop	{r4, r5, r6, pc}
 801866c:	f855 3b04 	ldr.w	r3, [r5], #4
 8018670:	4798      	blx	r3
 8018672:	3601      	adds	r6, #1
 8018674:	e7ee      	b.n	8018654 <__libc_init_array+0xc>
 8018676:	f855 3b04 	ldr.w	r3, [r5], #4
 801867a:	4798      	blx	r3
 801867c:	3601      	adds	r6, #1
 801867e:	e7f2      	b.n	8018666 <__libc_init_array+0x1e>
 8018680:	0801a230 	.word	0x0801a230
 8018684:	0801a230 	.word	0x0801a230
 8018688:	0801a230 	.word	0x0801a230
 801868c:	0801a234 	.word	0x0801a234

08018690 <__retarget_lock_init_recursive>:
 8018690:	4770      	bx	lr

08018692 <__retarget_lock_acquire_recursive>:
 8018692:	4770      	bx	lr

08018694 <__retarget_lock_release_recursive>:
 8018694:	4770      	bx	lr

08018696 <strcpy>:
 8018696:	4603      	mov	r3, r0
 8018698:	f811 2b01 	ldrb.w	r2, [r1], #1
 801869c:	f803 2b01 	strb.w	r2, [r3], #1
 80186a0:	2a00      	cmp	r2, #0
 80186a2:	d1f9      	bne.n	8018698 <strcpy+0x2>
 80186a4:	4770      	bx	lr

080186a6 <memcpy>:
 80186a6:	440a      	add	r2, r1
 80186a8:	4291      	cmp	r1, r2
 80186aa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80186ae:	d100      	bne.n	80186b2 <memcpy+0xc>
 80186b0:	4770      	bx	lr
 80186b2:	b510      	push	{r4, lr}
 80186b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80186b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80186bc:	4291      	cmp	r1, r2
 80186be:	d1f9      	bne.n	80186b4 <memcpy+0xe>
 80186c0:	bd10      	pop	{r4, pc}
	...

080186c4 <__assert_func>:
 80186c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80186c6:	4614      	mov	r4, r2
 80186c8:	461a      	mov	r2, r3
 80186ca:	4b09      	ldr	r3, [pc, #36]	; (80186f0 <__assert_func+0x2c>)
 80186cc:	681b      	ldr	r3, [r3, #0]
 80186ce:	4605      	mov	r5, r0
 80186d0:	68d8      	ldr	r0, [r3, #12]
 80186d2:	b14c      	cbz	r4, 80186e8 <__assert_func+0x24>
 80186d4:	4b07      	ldr	r3, [pc, #28]	; (80186f4 <__assert_func+0x30>)
 80186d6:	9100      	str	r1, [sp, #0]
 80186d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80186dc:	4906      	ldr	r1, [pc, #24]	; (80186f8 <__assert_func+0x34>)
 80186de:	462b      	mov	r3, r5
 80186e0:	f000 fd48 	bl	8019174 <fiprintf>
 80186e4:	f000 fddc 	bl	80192a0 <abort>
 80186e8:	4b04      	ldr	r3, [pc, #16]	; (80186fc <__assert_func+0x38>)
 80186ea:	461c      	mov	r4, r3
 80186ec:	e7f3      	b.n	80186d6 <__assert_func+0x12>
 80186ee:	bf00      	nop
 80186f0:	200000d0 	.word	0x200000d0
 80186f4:	0801a1b8 	.word	0x0801a1b8
 80186f8:	0801a1c5 	.word	0x0801a1c5
 80186fc:	0801a1f3 	.word	0x0801a1f3

08018700 <__env_lock>:
 8018700:	4801      	ldr	r0, [pc, #4]	; (8018708 <__env_lock+0x8>)
 8018702:	f7ff bfc6 	b.w	8018692 <__retarget_lock_acquire_recursive>
 8018706:	bf00      	nop
 8018708:	20009e80 	.word	0x20009e80

0801870c <__env_unlock>:
 801870c:	4801      	ldr	r0, [pc, #4]	; (8018714 <__env_unlock+0x8>)
 801870e:	f7ff bfc1 	b.w	8018694 <__retarget_lock_release_recursive>
 8018712:	bf00      	nop
 8018714:	20009e80 	.word	0x20009e80

08018718 <_free_r>:
 8018718:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801871a:	2900      	cmp	r1, #0
 801871c:	d044      	beq.n	80187a8 <_free_r+0x90>
 801871e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018722:	9001      	str	r0, [sp, #4]
 8018724:	2b00      	cmp	r3, #0
 8018726:	f1a1 0404 	sub.w	r4, r1, #4
 801872a:	bfb8      	it	lt
 801872c:	18e4      	addlt	r4, r4, r3
 801872e:	f7ff fa8d 	bl	8017c4c <__malloc_lock>
 8018732:	4a1e      	ldr	r2, [pc, #120]	; (80187ac <_free_r+0x94>)
 8018734:	9801      	ldr	r0, [sp, #4]
 8018736:	6813      	ldr	r3, [r2, #0]
 8018738:	b933      	cbnz	r3, 8018748 <_free_r+0x30>
 801873a:	6063      	str	r3, [r4, #4]
 801873c:	6014      	str	r4, [r2, #0]
 801873e:	b003      	add	sp, #12
 8018740:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018744:	f7ff ba88 	b.w	8017c58 <__malloc_unlock>
 8018748:	42a3      	cmp	r3, r4
 801874a:	d908      	bls.n	801875e <_free_r+0x46>
 801874c:	6825      	ldr	r5, [r4, #0]
 801874e:	1961      	adds	r1, r4, r5
 8018750:	428b      	cmp	r3, r1
 8018752:	bf01      	itttt	eq
 8018754:	6819      	ldreq	r1, [r3, #0]
 8018756:	685b      	ldreq	r3, [r3, #4]
 8018758:	1949      	addeq	r1, r1, r5
 801875a:	6021      	streq	r1, [r4, #0]
 801875c:	e7ed      	b.n	801873a <_free_r+0x22>
 801875e:	461a      	mov	r2, r3
 8018760:	685b      	ldr	r3, [r3, #4]
 8018762:	b10b      	cbz	r3, 8018768 <_free_r+0x50>
 8018764:	42a3      	cmp	r3, r4
 8018766:	d9fa      	bls.n	801875e <_free_r+0x46>
 8018768:	6811      	ldr	r1, [r2, #0]
 801876a:	1855      	adds	r5, r2, r1
 801876c:	42a5      	cmp	r5, r4
 801876e:	d10b      	bne.n	8018788 <_free_r+0x70>
 8018770:	6824      	ldr	r4, [r4, #0]
 8018772:	4421      	add	r1, r4
 8018774:	1854      	adds	r4, r2, r1
 8018776:	42a3      	cmp	r3, r4
 8018778:	6011      	str	r1, [r2, #0]
 801877a:	d1e0      	bne.n	801873e <_free_r+0x26>
 801877c:	681c      	ldr	r4, [r3, #0]
 801877e:	685b      	ldr	r3, [r3, #4]
 8018780:	6053      	str	r3, [r2, #4]
 8018782:	440c      	add	r4, r1
 8018784:	6014      	str	r4, [r2, #0]
 8018786:	e7da      	b.n	801873e <_free_r+0x26>
 8018788:	d902      	bls.n	8018790 <_free_r+0x78>
 801878a:	230c      	movs	r3, #12
 801878c:	6003      	str	r3, [r0, #0]
 801878e:	e7d6      	b.n	801873e <_free_r+0x26>
 8018790:	6825      	ldr	r5, [r4, #0]
 8018792:	1961      	adds	r1, r4, r5
 8018794:	428b      	cmp	r3, r1
 8018796:	bf04      	itt	eq
 8018798:	6819      	ldreq	r1, [r3, #0]
 801879a:	685b      	ldreq	r3, [r3, #4]
 801879c:	6063      	str	r3, [r4, #4]
 801879e:	bf04      	itt	eq
 80187a0:	1949      	addeq	r1, r1, r5
 80187a2:	6021      	streq	r1, [r4, #0]
 80187a4:	6054      	str	r4, [r2, #4]
 80187a6:	e7ca      	b.n	801873e <_free_r+0x26>
 80187a8:	b003      	add	sp, #12
 80187aa:	bd30      	pop	{r4, r5, pc}
 80187ac:	20009d38 	.word	0x20009d38

080187b0 <_malloc_usable_size_r>:
 80187b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80187b4:	1f18      	subs	r0, r3, #4
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	bfbc      	itt	lt
 80187ba:	580b      	ldrlt	r3, [r1, r0]
 80187bc:	18c0      	addlt	r0, r0, r3
 80187be:	4770      	bx	lr

080187c0 <__ssputs_r>:
 80187c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80187c4:	688e      	ldr	r6, [r1, #8]
 80187c6:	461f      	mov	r7, r3
 80187c8:	42be      	cmp	r6, r7
 80187ca:	680b      	ldr	r3, [r1, #0]
 80187cc:	4682      	mov	sl, r0
 80187ce:	460c      	mov	r4, r1
 80187d0:	4690      	mov	r8, r2
 80187d2:	d82c      	bhi.n	801882e <__ssputs_r+0x6e>
 80187d4:	898a      	ldrh	r2, [r1, #12]
 80187d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80187da:	d026      	beq.n	801882a <__ssputs_r+0x6a>
 80187dc:	6965      	ldr	r5, [r4, #20]
 80187de:	6909      	ldr	r1, [r1, #16]
 80187e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80187e4:	eba3 0901 	sub.w	r9, r3, r1
 80187e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80187ec:	1c7b      	adds	r3, r7, #1
 80187ee:	444b      	add	r3, r9
 80187f0:	106d      	asrs	r5, r5, #1
 80187f2:	429d      	cmp	r5, r3
 80187f4:	bf38      	it	cc
 80187f6:	461d      	movcc	r5, r3
 80187f8:	0553      	lsls	r3, r2, #21
 80187fa:	d527      	bpl.n	801884c <__ssputs_r+0x8c>
 80187fc:	4629      	mov	r1, r5
 80187fe:	f7ff f9a5 	bl	8017b4c <_malloc_r>
 8018802:	4606      	mov	r6, r0
 8018804:	b360      	cbz	r0, 8018860 <__ssputs_r+0xa0>
 8018806:	6921      	ldr	r1, [r4, #16]
 8018808:	464a      	mov	r2, r9
 801880a:	f7ff ff4c 	bl	80186a6 <memcpy>
 801880e:	89a3      	ldrh	r3, [r4, #12]
 8018810:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018818:	81a3      	strh	r3, [r4, #12]
 801881a:	6126      	str	r6, [r4, #16]
 801881c:	6165      	str	r5, [r4, #20]
 801881e:	444e      	add	r6, r9
 8018820:	eba5 0509 	sub.w	r5, r5, r9
 8018824:	6026      	str	r6, [r4, #0]
 8018826:	60a5      	str	r5, [r4, #8]
 8018828:	463e      	mov	r6, r7
 801882a:	42be      	cmp	r6, r7
 801882c:	d900      	bls.n	8018830 <__ssputs_r+0x70>
 801882e:	463e      	mov	r6, r7
 8018830:	6820      	ldr	r0, [r4, #0]
 8018832:	4632      	mov	r2, r6
 8018834:	4641      	mov	r1, r8
 8018836:	f7ff fdfd 	bl	8018434 <memmove>
 801883a:	68a3      	ldr	r3, [r4, #8]
 801883c:	1b9b      	subs	r3, r3, r6
 801883e:	60a3      	str	r3, [r4, #8]
 8018840:	6823      	ldr	r3, [r4, #0]
 8018842:	4433      	add	r3, r6
 8018844:	6023      	str	r3, [r4, #0]
 8018846:	2000      	movs	r0, #0
 8018848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801884c:	462a      	mov	r2, r5
 801884e:	f7ff fa7d 	bl	8017d4c <_realloc_r>
 8018852:	4606      	mov	r6, r0
 8018854:	2800      	cmp	r0, #0
 8018856:	d1e0      	bne.n	801881a <__ssputs_r+0x5a>
 8018858:	6921      	ldr	r1, [r4, #16]
 801885a:	4650      	mov	r0, sl
 801885c:	f7ff ff5c 	bl	8018718 <_free_r>
 8018860:	230c      	movs	r3, #12
 8018862:	f8ca 3000 	str.w	r3, [sl]
 8018866:	89a3      	ldrh	r3, [r4, #12]
 8018868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801886c:	81a3      	strh	r3, [r4, #12]
 801886e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018872:	e7e9      	b.n	8018848 <__ssputs_r+0x88>

08018874 <_svfiprintf_r>:
 8018874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018878:	4698      	mov	r8, r3
 801887a:	898b      	ldrh	r3, [r1, #12]
 801887c:	061b      	lsls	r3, r3, #24
 801887e:	b09d      	sub	sp, #116	; 0x74
 8018880:	4607      	mov	r7, r0
 8018882:	460d      	mov	r5, r1
 8018884:	4614      	mov	r4, r2
 8018886:	d50e      	bpl.n	80188a6 <_svfiprintf_r+0x32>
 8018888:	690b      	ldr	r3, [r1, #16]
 801888a:	b963      	cbnz	r3, 80188a6 <_svfiprintf_r+0x32>
 801888c:	2140      	movs	r1, #64	; 0x40
 801888e:	f7ff f95d 	bl	8017b4c <_malloc_r>
 8018892:	6028      	str	r0, [r5, #0]
 8018894:	6128      	str	r0, [r5, #16]
 8018896:	b920      	cbnz	r0, 80188a2 <_svfiprintf_r+0x2e>
 8018898:	230c      	movs	r3, #12
 801889a:	603b      	str	r3, [r7, #0]
 801889c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80188a0:	e0d0      	b.n	8018a44 <_svfiprintf_r+0x1d0>
 80188a2:	2340      	movs	r3, #64	; 0x40
 80188a4:	616b      	str	r3, [r5, #20]
 80188a6:	2300      	movs	r3, #0
 80188a8:	9309      	str	r3, [sp, #36]	; 0x24
 80188aa:	2320      	movs	r3, #32
 80188ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80188b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80188b4:	2330      	movs	r3, #48	; 0x30
 80188b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8018a5c <_svfiprintf_r+0x1e8>
 80188ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80188be:	f04f 0901 	mov.w	r9, #1
 80188c2:	4623      	mov	r3, r4
 80188c4:	469a      	mov	sl, r3
 80188c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80188ca:	b10a      	cbz	r2, 80188d0 <_svfiprintf_r+0x5c>
 80188cc:	2a25      	cmp	r2, #37	; 0x25
 80188ce:	d1f9      	bne.n	80188c4 <_svfiprintf_r+0x50>
 80188d0:	ebba 0b04 	subs.w	fp, sl, r4
 80188d4:	d00b      	beq.n	80188ee <_svfiprintf_r+0x7a>
 80188d6:	465b      	mov	r3, fp
 80188d8:	4622      	mov	r2, r4
 80188da:	4629      	mov	r1, r5
 80188dc:	4638      	mov	r0, r7
 80188de:	f7ff ff6f 	bl	80187c0 <__ssputs_r>
 80188e2:	3001      	adds	r0, #1
 80188e4:	f000 80a9 	beq.w	8018a3a <_svfiprintf_r+0x1c6>
 80188e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80188ea:	445a      	add	r2, fp
 80188ec:	9209      	str	r2, [sp, #36]	; 0x24
 80188ee:	f89a 3000 	ldrb.w	r3, [sl]
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	f000 80a1 	beq.w	8018a3a <_svfiprintf_r+0x1c6>
 80188f8:	2300      	movs	r3, #0
 80188fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80188fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018902:	f10a 0a01 	add.w	sl, sl, #1
 8018906:	9304      	str	r3, [sp, #16]
 8018908:	9307      	str	r3, [sp, #28]
 801890a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801890e:	931a      	str	r3, [sp, #104]	; 0x68
 8018910:	4654      	mov	r4, sl
 8018912:	2205      	movs	r2, #5
 8018914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018918:	4850      	ldr	r0, [pc, #320]	; (8018a5c <_svfiprintf_r+0x1e8>)
 801891a:	f7e7 fc79 	bl	8000210 <memchr>
 801891e:	9a04      	ldr	r2, [sp, #16]
 8018920:	b9d8      	cbnz	r0, 801895a <_svfiprintf_r+0xe6>
 8018922:	06d0      	lsls	r0, r2, #27
 8018924:	bf44      	itt	mi
 8018926:	2320      	movmi	r3, #32
 8018928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801892c:	0711      	lsls	r1, r2, #28
 801892e:	bf44      	itt	mi
 8018930:	232b      	movmi	r3, #43	; 0x2b
 8018932:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018936:	f89a 3000 	ldrb.w	r3, [sl]
 801893a:	2b2a      	cmp	r3, #42	; 0x2a
 801893c:	d015      	beq.n	801896a <_svfiprintf_r+0xf6>
 801893e:	9a07      	ldr	r2, [sp, #28]
 8018940:	4654      	mov	r4, sl
 8018942:	2000      	movs	r0, #0
 8018944:	f04f 0c0a 	mov.w	ip, #10
 8018948:	4621      	mov	r1, r4
 801894a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801894e:	3b30      	subs	r3, #48	; 0x30
 8018950:	2b09      	cmp	r3, #9
 8018952:	d94d      	bls.n	80189f0 <_svfiprintf_r+0x17c>
 8018954:	b1b0      	cbz	r0, 8018984 <_svfiprintf_r+0x110>
 8018956:	9207      	str	r2, [sp, #28]
 8018958:	e014      	b.n	8018984 <_svfiprintf_r+0x110>
 801895a:	eba0 0308 	sub.w	r3, r0, r8
 801895e:	fa09 f303 	lsl.w	r3, r9, r3
 8018962:	4313      	orrs	r3, r2
 8018964:	9304      	str	r3, [sp, #16]
 8018966:	46a2      	mov	sl, r4
 8018968:	e7d2      	b.n	8018910 <_svfiprintf_r+0x9c>
 801896a:	9b03      	ldr	r3, [sp, #12]
 801896c:	1d19      	adds	r1, r3, #4
 801896e:	681b      	ldr	r3, [r3, #0]
 8018970:	9103      	str	r1, [sp, #12]
 8018972:	2b00      	cmp	r3, #0
 8018974:	bfbb      	ittet	lt
 8018976:	425b      	neglt	r3, r3
 8018978:	f042 0202 	orrlt.w	r2, r2, #2
 801897c:	9307      	strge	r3, [sp, #28]
 801897e:	9307      	strlt	r3, [sp, #28]
 8018980:	bfb8      	it	lt
 8018982:	9204      	strlt	r2, [sp, #16]
 8018984:	7823      	ldrb	r3, [r4, #0]
 8018986:	2b2e      	cmp	r3, #46	; 0x2e
 8018988:	d10c      	bne.n	80189a4 <_svfiprintf_r+0x130>
 801898a:	7863      	ldrb	r3, [r4, #1]
 801898c:	2b2a      	cmp	r3, #42	; 0x2a
 801898e:	d134      	bne.n	80189fa <_svfiprintf_r+0x186>
 8018990:	9b03      	ldr	r3, [sp, #12]
 8018992:	1d1a      	adds	r2, r3, #4
 8018994:	681b      	ldr	r3, [r3, #0]
 8018996:	9203      	str	r2, [sp, #12]
 8018998:	2b00      	cmp	r3, #0
 801899a:	bfb8      	it	lt
 801899c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80189a0:	3402      	adds	r4, #2
 80189a2:	9305      	str	r3, [sp, #20]
 80189a4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8018a6c <_svfiprintf_r+0x1f8>
 80189a8:	7821      	ldrb	r1, [r4, #0]
 80189aa:	2203      	movs	r2, #3
 80189ac:	4650      	mov	r0, sl
 80189ae:	f7e7 fc2f 	bl	8000210 <memchr>
 80189b2:	b138      	cbz	r0, 80189c4 <_svfiprintf_r+0x150>
 80189b4:	9b04      	ldr	r3, [sp, #16]
 80189b6:	eba0 000a 	sub.w	r0, r0, sl
 80189ba:	2240      	movs	r2, #64	; 0x40
 80189bc:	4082      	lsls	r2, r0
 80189be:	4313      	orrs	r3, r2
 80189c0:	3401      	adds	r4, #1
 80189c2:	9304      	str	r3, [sp, #16]
 80189c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80189c8:	4825      	ldr	r0, [pc, #148]	; (8018a60 <_svfiprintf_r+0x1ec>)
 80189ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80189ce:	2206      	movs	r2, #6
 80189d0:	f7e7 fc1e 	bl	8000210 <memchr>
 80189d4:	2800      	cmp	r0, #0
 80189d6:	d038      	beq.n	8018a4a <_svfiprintf_r+0x1d6>
 80189d8:	4b22      	ldr	r3, [pc, #136]	; (8018a64 <_svfiprintf_r+0x1f0>)
 80189da:	bb1b      	cbnz	r3, 8018a24 <_svfiprintf_r+0x1b0>
 80189dc:	9b03      	ldr	r3, [sp, #12]
 80189de:	3307      	adds	r3, #7
 80189e0:	f023 0307 	bic.w	r3, r3, #7
 80189e4:	3308      	adds	r3, #8
 80189e6:	9303      	str	r3, [sp, #12]
 80189e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189ea:	4433      	add	r3, r6
 80189ec:	9309      	str	r3, [sp, #36]	; 0x24
 80189ee:	e768      	b.n	80188c2 <_svfiprintf_r+0x4e>
 80189f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80189f4:	460c      	mov	r4, r1
 80189f6:	2001      	movs	r0, #1
 80189f8:	e7a6      	b.n	8018948 <_svfiprintf_r+0xd4>
 80189fa:	2300      	movs	r3, #0
 80189fc:	3401      	adds	r4, #1
 80189fe:	9305      	str	r3, [sp, #20]
 8018a00:	4619      	mov	r1, r3
 8018a02:	f04f 0c0a 	mov.w	ip, #10
 8018a06:	4620      	mov	r0, r4
 8018a08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018a0c:	3a30      	subs	r2, #48	; 0x30
 8018a0e:	2a09      	cmp	r2, #9
 8018a10:	d903      	bls.n	8018a1a <_svfiprintf_r+0x1a6>
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d0c6      	beq.n	80189a4 <_svfiprintf_r+0x130>
 8018a16:	9105      	str	r1, [sp, #20]
 8018a18:	e7c4      	b.n	80189a4 <_svfiprintf_r+0x130>
 8018a1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8018a1e:	4604      	mov	r4, r0
 8018a20:	2301      	movs	r3, #1
 8018a22:	e7f0      	b.n	8018a06 <_svfiprintf_r+0x192>
 8018a24:	ab03      	add	r3, sp, #12
 8018a26:	9300      	str	r3, [sp, #0]
 8018a28:	462a      	mov	r2, r5
 8018a2a:	4b0f      	ldr	r3, [pc, #60]	; (8018a68 <_svfiprintf_r+0x1f4>)
 8018a2c:	a904      	add	r1, sp, #16
 8018a2e:	4638      	mov	r0, r7
 8018a30:	f3af 8000 	nop.w
 8018a34:	1c42      	adds	r2, r0, #1
 8018a36:	4606      	mov	r6, r0
 8018a38:	d1d6      	bne.n	80189e8 <_svfiprintf_r+0x174>
 8018a3a:	89ab      	ldrh	r3, [r5, #12]
 8018a3c:	065b      	lsls	r3, r3, #25
 8018a3e:	f53f af2d 	bmi.w	801889c <_svfiprintf_r+0x28>
 8018a42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018a44:	b01d      	add	sp, #116	; 0x74
 8018a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a4a:	ab03      	add	r3, sp, #12
 8018a4c:	9300      	str	r3, [sp, #0]
 8018a4e:	462a      	mov	r2, r5
 8018a50:	4b05      	ldr	r3, [pc, #20]	; (8018a68 <_svfiprintf_r+0x1f4>)
 8018a52:	a904      	add	r1, sp, #16
 8018a54:	4638      	mov	r0, r7
 8018a56:	f000 f9bd 	bl	8018dd4 <_printf_i>
 8018a5a:	e7eb      	b.n	8018a34 <_svfiprintf_r+0x1c0>
 8018a5c:	0801a1f4 	.word	0x0801a1f4
 8018a60:	0801a1fe 	.word	0x0801a1fe
 8018a64:	00000000 	.word	0x00000000
 8018a68:	080187c1 	.word	0x080187c1
 8018a6c:	0801a1fa 	.word	0x0801a1fa

08018a70 <__sfputc_r>:
 8018a70:	6893      	ldr	r3, [r2, #8]
 8018a72:	3b01      	subs	r3, #1
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	b410      	push	{r4}
 8018a78:	6093      	str	r3, [r2, #8]
 8018a7a:	da08      	bge.n	8018a8e <__sfputc_r+0x1e>
 8018a7c:	6994      	ldr	r4, [r2, #24]
 8018a7e:	42a3      	cmp	r3, r4
 8018a80:	db01      	blt.n	8018a86 <__sfputc_r+0x16>
 8018a82:	290a      	cmp	r1, #10
 8018a84:	d103      	bne.n	8018a8e <__sfputc_r+0x1e>
 8018a86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018a8a:	f7ff bc3d 	b.w	8018308 <__swbuf_r>
 8018a8e:	6813      	ldr	r3, [r2, #0]
 8018a90:	1c58      	adds	r0, r3, #1
 8018a92:	6010      	str	r0, [r2, #0]
 8018a94:	7019      	strb	r1, [r3, #0]
 8018a96:	4608      	mov	r0, r1
 8018a98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018a9c:	4770      	bx	lr

08018a9e <__sfputs_r>:
 8018a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018aa0:	4606      	mov	r6, r0
 8018aa2:	460f      	mov	r7, r1
 8018aa4:	4614      	mov	r4, r2
 8018aa6:	18d5      	adds	r5, r2, r3
 8018aa8:	42ac      	cmp	r4, r5
 8018aaa:	d101      	bne.n	8018ab0 <__sfputs_r+0x12>
 8018aac:	2000      	movs	r0, #0
 8018aae:	e007      	b.n	8018ac0 <__sfputs_r+0x22>
 8018ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ab4:	463a      	mov	r2, r7
 8018ab6:	4630      	mov	r0, r6
 8018ab8:	f7ff ffda 	bl	8018a70 <__sfputc_r>
 8018abc:	1c43      	adds	r3, r0, #1
 8018abe:	d1f3      	bne.n	8018aa8 <__sfputs_r+0xa>
 8018ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018ac4 <_vfiprintf_r>:
 8018ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ac8:	460d      	mov	r5, r1
 8018aca:	b09d      	sub	sp, #116	; 0x74
 8018acc:	4614      	mov	r4, r2
 8018ace:	4698      	mov	r8, r3
 8018ad0:	4606      	mov	r6, r0
 8018ad2:	b118      	cbz	r0, 8018adc <_vfiprintf_r+0x18>
 8018ad4:	6a03      	ldr	r3, [r0, #32]
 8018ad6:	b90b      	cbnz	r3, 8018adc <_vfiprintf_r+0x18>
 8018ad8:	f7ff fa70 	bl	8017fbc <__sinit>
 8018adc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018ade:	07d9      	lsls	r1, r3, #31
 8018ae0:	d405      	bmi.n	8018aee <_vfiprintf_r+0x2a>
 8018ae2:	89ab      	ldrh	r3, [r5, #12]
 8018ae4:	059a      	lsls	r2, r3, #22
 8018ae6:	d402      	bmi.n	8018aee <_vfiprintf_r+0x2a>
 8018ae8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018aea:	f7ff fdd2 	bl	8018692 <__retarget_lock_acquire_recursive>
 8018aee:	89ab      	ldrh	r3, [r5, #12]
 8018af0:	071b      	lsls	r3, r3, #28
 8018af2:	d501      	bpl.n	8018af8 <_vfiprintf_r+0x34>
 8018af4:	692b      	ldr	r3, [r5, #16]
 8018af6:	b99b      	cbnz	r3, 8018b20 <_vfiprintf_r+0x5c>
 8018af8:	4629      	mov	r1, r5
 8018afa:	4630      	mov	r0, r6
 8018afc:	f7ff fc42 	bl	8018384 <__swsetup_r>
 8018b00:	b170      	cbz	r0, 8018b20 <_vfiprintf_r+0x5c>
 8018b02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018b04:	07dc      	lsls	r4, r3, #31
 8018b06:	d504      	bpl.n	8018b12 <_vfiprintf_r+0x4e>
 8018b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018b0c:	b01d      	add	sp, #116	; 0x74
 8018b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b12:	89ab      	ldrh	r3, [r5, #12]
 8018b14:	0598      	lsls	r0, r3, #22
 8018b16:	d4f7      	bmi.n	8018b08 <_vfiprintf_r+0x44>
 8018b18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018b1a:	f7ff fdbb 	bl	8018694 <__retarget_lock_release_recursive>
 8018b1e:	e7f3      	b.n	8018b08 <_vfiprintf_r+0x44>
 8018b20:	2300      	movs	r3, #0
 8018b22:	9309      	str	r3, [sp, #36]	; 0x24
 8018b24:	2320      	movs	r3, #32
 8018b26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018b2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8018b2e:	2330      	movs	r3, #48	; 0x30
 8018b30:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8018ce4 <_vfiprintf_r+0x220>
 8018b34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018b38:	f04f 0901 	mov.w	r9, #1
 8018b3c:	4623      	mov	r3, r4
 8018b3e:	469a      	mov	sl, r3
 8018b40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018b44:	b10a      	cbz	r2, 8018b4a <_vfiprintf_r+0x86>
 8018b46:	2a25      	cmp	r2, #37	; 0x25
 8018b48:	d1f9      	bne.n	8018b3e <_vfiprintf_r+0x7a>
 8018b4a:	ebba 0b04 	subs.w	fp, sl, r4
 8018b4e:	d00b      	beq.n	8018b68 <_vfiprintf_r+0xa4>
 8018b50:	465b      	mov	r3, fp
 8018b52:	4622      	mov	r2, r4
 8018b54:	4629      	mov	r1, r5
 8018b56:	4630      	mov	r0, r6
 8018b58:	f7ff ffa1 	bl	8018a9e <__sfputs_r>
 8018b5c:	3001      	adds	r0, #1
 8018b5e:	f000 80a9 	beq.w	8018cb4 <_vfiprintf_r+0x1f0>
 8018b62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018b64:	445a      	add	r2, fp
 8018b66:	9209      	str	r2, [sp, #36]	; 0x24
 8018b68:	f89a 3000 	ldrb.w	r3, [sl]
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	f000 80a1 	beq.w	8018cb4 <_vfiprintf_r+0x1f0>
 8018b72:	2300      	movs	r3, #0
 8018b74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018b78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018b7c:	f10a 0a01 	add.w	sl, sl, #1
 8018b80:	9304      	str	r3, [sp, #16]
 8018b82:	9307      	str	r3, [sp, #28]
 8018b84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018b88:	931a      	str	r3, [sp, #104]	; 0x68
 8018b8a:	4654      	mov	r4, sl
 8018b8c:	2205      	movs	r2, #5
 8018b8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b92:	4854      	ldr	r0, [pc, #336]	; (8018ce4 <_vfiprintf_r+0x220>)
 8018b94:	f7e7 fb3c 	bl	8000210 <memchr>
 8018b98:	9a04      	ldr	r2, [sp, #16]
 8018b9a:	b9d8      	cbnz	r0, 8018bd4 <_vfiprintf_r+0x110>
 8018b9c:	06d1      	lsls	r1, r2, #27
 8018b9e:	bf44      	itt	mi
 8018ba0:	2320      	movmi	r3, #32
 8018ba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018ba6:	0713      	lsls	r3, r2, #28
 8018ba8:	bf44      	itt	mi
 8018baa:	232b      	movmi	r3, #43	; 0x2b
 8018bac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8018bb4:	2b2a      	cmp	r3, #42	; 0x2a
 8018bb6:	d015      	beq.n	8018be4 <_vfiprintf_r+0x120>
 8018bb8:	9a07      	ldr	r2, [sp, #28]
 8018bba:	4654      	mov	r4, sl
 8018bbc:	2000      	movs	r0, #0
 8018bbe:	f04f 0c0a 	mov.w	ip, #10
 8018bc2:	4621      	mov	r1, r4
 8018bc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018bc8:	3b30      	subs	r3, #48	; 0x30
 8018bca:	2b09      	cmp	r3, #9
 8018bcc:	d94d      	bls.n	8018c6a <_vfiprintf_r+0x1a6>
 8018bce:	b1b0      	cbz	r0, 8018bfe <_vfiprintf_r+0x13a>
 8018bd0:	9207      	str	r2, [sp, #28]
 8018bd2:	e014      	b.n	8018bfe <_vfiprintf_r+0x13a>
 8018bd4:	eba0 0308 	sub.w	r3, r0, r8
 8018bd8:	fa09 f303 	lsl.w	r3, r9, r3
 8018bdc:	4313      	orrs	r3, r2
 8018bde:	9304      	str	r3, [sp, #16]
 8018be0:	46a2      	mov	sl, r4
 8018be2:	e7d2      	b.n	8018b8a <_vfiprintf_r+0xc6>
 8018be4:	9b03      	ldr	r3, [sp, #12]
 8018be6:	1d19      	adds	r1, r3, #4
 8018be8:	681b      	ldr	r3, [r3, #0]
 8018bea:	9103      	str	r1, [sp, #12]
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	bfbb      	ittet	lt
 8018bf0:	425b      	neglt	r3, r3
 8018bf2:	f042 0202 	orrlt.w	r2, r2, #2
 8018bf6:	9307      	strge	r3, [sp, #28]
 8018bf8:	9307      	strlt	r3, [sp, #28]
 8018bfa:	bfb8      	it	lt
 8018bfc:	9204      	strlt	r2, [sp, #16]
 8018bfe:	7823      	ldrb	r3, [r4, #0]
 8018c00:	2b2e      	cmp	r3, #46	; 0x2e
 8018c02:	d10c      	bne.n	8018c1e <_vfiprintf_r+0x15a>
 8018c04:	7863      	ldrb	r3, [r4, #1]
 8018c06:	2b2a      	cmp	r3, #42	; 0x2a
 8018c08:	d134      	bne.n	8018c74 <_vfiprintf_r+0x1b0>
 8018c0a:	9b03      	ldr	r3, [sp, #12]
 8018c0c:	1d1a      	adds	r2, r3, #4
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	9203      	str	r2, [sp, #12]
 8018c12:	2b00      	cmp	r3, #0
 8018c14:	bfb8      	it	lt
 8018c16:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018c1a:	3402      	adds	r4, #2
 8018c1c:	9305      	str	r3, [sp, #20]
 8018c1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8018cf4 <_vfiprintf_r+0x230>
 8018c22:	7821      	ldrb	r1, [r4, #0]
 8018c24:	2203      	movs	r2, #3
 8018c26:	4650      	mov	r0, sl
 8018c28:	f7e7 faf2 	bl	8000210 <memchr>
 8018c2c:	b138      	cbz	r0, 8018c3e <_vfiprintf_r+0x17a>
 8018c2e:	9b04      	ldr	r3, [sp, #16]
 8018c30:	eba0 000a 	sub.w	r0, r0, sl
 8018c34:	2240      	movs	r2, #64	; 0x40
 8018c36:	4082      	lsls	r2, r0
 8018c38:	4313      	orrs	r3, r2
 8018c3a:	3401      	adds	r4, #1
 8018c3c:	9304      	str	r3, [sp, #16]
 8018c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c42:	4829      	ldr	r0, [pc, #164]	; (8018ce8 <_vfiprintf_r+0x224>)
 8018c44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018c48:	2206      	movs	r2, #6
 8018c4a:	f7e7 fae1 	bl	8000210 <memchr>
 8018c4e:	2800      	cmp	r0, #0
 8018c50:	d03f      	beq.n	8018cd2 <_vfiprintf_r+0x20e>
 8018c52:	4b26      	ldr	r3, [pc, #152]	; (8018cec <_vfiprintf_r+0x228>)
 8018c54:	bb1b      	cbnz	r3, 8018c9e <_vfiprintf_r+0x1da>
 8018c56:	9b03      	ldr	r3, [sp, #12]
 8018c58:	3307      	adds	r3, #7
 8018c5a:	f023 0307 	bic.w	r3, r3, #7
 8018c5e:	3308      	adds	r3, #8
 8018c60:	9303      	str	r3, [sp, #12]
 8018c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c64:	443b      	add	r3, r7
 8018c66:	9309      	str	r3, [sp, #36]	; 0x24
 8018c68:	e768      	b.n	8018b3c <_vfiprintf_r+0x78>
 8018c6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8018c6e:	460c      	mov	r4, r1
 8018c70:	2001      	movs	r0, #1
 8018c72:	e7a6      	b.n	8018bc2 <_vfiprintf_r+0xfe>
 8018c74:	2300      	movs	r3, #0
 8018c76:	3401      	adds	r4, #1
 8018c78:	9305      	str	r3, [sp, #20]
 8018c7a:	4619      	mov	r1, r3
 8018c7c:	f04f 0c0a 	mov.w	ip, #10
 8018c80:	4620      	mov	r0, r4
 8018c82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018c86:	3a30      	subs	r2, #48	; 0x30
 8018c88:	2a09      	cmp	r2, #9
 8018c8a:	d903      	bls.n	8018c94 <_vfiprintf_r+0x1d0>
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	d0c6      	beq.n	8018c1e <_vfiprintf_r+0x15a>
 8018c90:	9105      	str	r1, [sp, #20]
 8018c92:	e7c4      	b.n	8018c1e <_vfiprintf_r+0x15a>
 8018c94:	fb0c 2101 	mla	r1, ip, r1, r2
 8018c98:	4604      	mov	r4, r0
 8018c9a:	2301      	movs	r3, #1
 8018c9c:	e7f0      	b.n	8018c80 <_vfiprintf_r+0x1bc>
 8018c9e:	ab03      	add	r3, sp, #12
 8018ca0:	9300      	str	r3, [sp, #0]
 8018ca2:	462a      	mov	r2, r5
 8018ca4:	4b12      	ldr	r3, [pc, #72]	; (8018cf0 <_vfiprintf_r+0x22c>)
 8018ca6:	a904      	add	r1, sp, #16
 8018ca8:	4630      	mov	r0, r6
 8018caa:	f3af 8000 	nop.w
 8018cae:	4607      	mov	r7, r0
 8018cb0:	1c78      	adds	r0, r7, #1
 8018cb2:	d1d6      	bne.n	8018c62 <_vfiprintf_r+0x19e>
 8018cb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018cb6:	07d9      	lsls	r1, r3, #31
 8018cb8:	d405      	bmi.n	8018cc6 <_vfiprintf_r+0x202>
 8018cba:	89ab      	ldrh	r3, [r5, #12]
 8018cbc:	059a      	lsls	r2, r3, #22
 8018cbe:	d402      	bmi.n	8018cc6 <_vfiprintf_r+0x202>
 8018cc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018cc2:	f7ff fce7 	bl	8018694 <__retarget_lock_release_recursive>
 8018cc6:	89ab      	ldrh	r3, [r5, #12]
 8018cc8:	065b      	lsls	r3, r3, #25
 8018cca:	f53f af1d 	bmi.w	8018b08 <_vfiprintf_r+0x44>
 8018cce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018cd0:	e71c      	b.n	8018b0c <_vfiprintf_r+0x48>
 8018cd2:	ab03      	add	r3, sp, #12
 8018cd4:	9300      	str	r3, [sp, #0]
 8018cd6:	462a      	mov	r2, r5
 8018cd8:	4b05      	ldr	r3, [pc, #20]	; (8018cf0 <_vfiprintf_r+0x22c>)
 8018cda:	a904      	add	r1, sp, #16
 8018cdc:	4630      	mov	r0, r6
 8018cde:	f000 f879 	bl	8018dd4 <_printf_i>
 8018ce2:	e7e4      	b.n	8018cae <_vfiprintf_r+0x1ea>
 8018ce4:	0801a1f4 	.word	0x0801a1f4
 8018ce8:	0801a1fe 	.word	0x0801a1fe
 8018cec:	00000000 	.word	0x00000000
 8018cf0:	08018a9f 	.word	0x08018a9f
 8018cf4:	0801a1fa 	.word	0x0801a1fa

08018cf8 <_printf_common>:
 8018cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018cfc:	4616      	mov	r6, r2
 8018cfe:	4699      	mov	r9, r3
 8018d00:	688a      	ldr	r2, [r1, #8]
 8018d02:	690b      	ldr	r3, [r1, #16]
 8018d04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018d08:	4293      	cmp	r3, r2
 8018d0a:	bfb8      	it	lt
 8018d0c:	4613      	movlt	r3, r2
 8018d0e:	6033      	str	r3, [r6, #0]
 8018d10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018d14:	4607      	mov	r7, r0
 8018d16:	460c      	mov	r4, r1
 8018d18:	b10a      	cbz	r2, 8018d1e <_printf_common+0x26>
 8018d1a:	3301      	adds	r3, #1
 8018d1c:	6033      	str	r3, [r6, #0]
 8018d1e:	6823      	ldr	r3, [r4, #0]
 8018d20:	0699      	lsls	r1, r3, #26
 8018d22:	bf42      	ittt	mi
 8018d24:	6833      	ldrmi	r3, [r6, #0]
 8018d26:	3302      	addmi	r3, #2
 8018d28:	6033      	strmi	r3, [r6, #0]
 8018d2a:	6825      	ldr	r5, [r4, #0]
 8018d2c:	f015 0506 	ands.w	r5, r5, #6
 8018d30:	d106      	bne.n	8018d40 <_printf_common+0x48>
 8018d32:	f104 0a19 	add.w	sl, r4, #25
 8018d36:	68e3      	ldr	r3, [r4, #12]
 8018d38:	6832      	ldr	r2, [r6, #0]
 8018d3a:	1a9b      	subs	r3, r3, r2
 8018d3c:	42ab      	cmp	r3, r5
 8018d3e:	dc26      	bgt.n	8018d8e <_printf_common+0x96>
 8018d40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018d44:	1e13      	subs	r3, r2, #0
 8018d46:	6822      	ldr	r2, [r4, #0]
 8018d48:	bf18      	it	ne
 8018d4a:	2301      	movne	r3, #1
 8018d4c:	0692      	lsls	r2, r2, #26
 8018d4e:	d42b      	bmi.n	8018da8 <_printf_common+0xb0>
 8018d50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018d54:	4649      	mov	r1, r9
 8018d56:	4638      	mov	r0, r7
 8018d58:	47c0      	blx	r8
 8018d5a:	3001      	adds	r0, #1
 8018d5c:	d01e      	beq.n	8018d9c <_printf_common+0xa4>
 8018d5e:	6823      	ldr	r3, [r4, #0]
 8018d60:	6922      	ldr	r2, [r4, #16]
 8018d62:	f003 0306 	and.w	r3, r3, #6
 8018d66:	2b04      	cmp	r3, #4
 8018d68:	bf02      	ittt	eq
 8018d6a:	68e5      	ldreq	r5, [r4, #12]
 8018d6c:	6833      	ldreq	r3, [r6, #0]
 8018d6e:	1aed      	subeq	r5, r5, r3
 8018d70:	68a3      	ldr	r3, [r4, #8]
 8018d72:	bf0c      	ite	eq
 8018d74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018d78:	2500      	movne	r5, #0
 8018d7a:	4293      	cmp	r3, r2
 8018d7c:	bfc4      	itt	gt
 8018d7e:	1a9b      	subgt	r3, r3, r2
 8018d80:	18ed      	addgt	r5, r5, r3
 8018d82:	2600      	movs	r6, #0
 8018d84:	341a      	adds	r4, #26
 8018d86:	42b5      	cmp	r5, r6
 8018d88:	d11a      	bne.n	8018dc0 <_printf_common+0xc8>
 8018d8a:	2000      	movs	r0, #0
 8018d8c:	e008      	b.n	8018da0 <_printf_common+0xa8>
 8018d8e:	2301      	movs	r3, #1
 8018d90:	4652      	mov	r2, sl
 8018d92:	4649      	mov	r1, r9
 8018d94:	4638      	mov	r0, r7
 8018d96:	47c0      	blx	r8
 8018d98:	3001      	adds	r0, #1
 8018d9a:	d103      	bne.n	8018da4 <_printf_common+0xac>
 8018d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018da4:	3501      	adds	r5, #1
 8018da6:	e7c6      	b.n	8018d36 <_printf_common+0x3e>
 8018da8:	18e1      	adds	r1, r4, r3
 8018daa:	1c5a      	adds	r2, r3, #1
 8018dac:	2030      	movs	r0, #48	; 0x30
 8018dae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018db2:	4422      	add	r2, r4
 8018db4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018db8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018dbc:	3302      	adds	r3, #2
 8018dbe:	e7c7      	b.n	8018d50 <_printf_common+0x58>
 8018dc0:	2301      	movs	r3, #1
 8018dc2:	4622      	mov	r2, r4
 8018dc4:	4649      	mov	r1, r9
 8018dc6:	4638      	mov	r0, r7
 8018dc8:	47c0      	blx	r8
 8018dca:	3001      	adds	r0, #1
 8018dcc:	d0e6      	beq.n	8018d9c <_printf_common+0xa4>
 8018dce:	3601      	adds	r6, #1
 8018dd0:	e7d9      	b.n	8018d86 <_printf_common+0x8e>
	...

08018dd4 <_printf_i>:
 8018dd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018dd8:	7e0f      	ldrb	r7, [r1, #24]
 8018dda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018ddc:	2f78      	cmp	r7, #120	; 0x78
 8018dde:	4691      	mov	r9, r2
 8018de0:	4680      	mov	r8, r0
 8018de2:	460c      	mov	r4, r1
 8018de4:	469a      	mov	sl, r3
 8018de6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018dea:	d807      	bhi.n	8018dfc <_printf_i+0x28>
 8018dec:	2f62      	cmp	r7, #98	; 0x62
 8018dee:	d80a      	bhi.n	8018e06 <_printf_i+0x32>
 8018df0:	2f00      	cmp	r7, #0
 8018df2:	f000 80d4 	beq.w	8018f9e <_printf_i+0x1ca>
 8018df6:	2f58      	cmp	r7, #88	; 0x58
 8018df8:	f000 80c0 	beq.w	8018f7c <_printf_i+0x1a8>
 8018dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018e00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018e04:	e03a      	b.n	8018e7c <_printf_i+0xa8>
 8018e06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018e0a:	2b15      	cmp	r3, #21
 8018e0c:	d8f6      	bhi.n	8018dfc <_printf_i+0x28>
 8018e0e:	a101      	add	r1, pc, #4	; (adr r1, 8018e14 <_printf_i+0x40>)
 8018e10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018e14:	08018e6d 	.word	0x08018e6d
 8018e18:	08018e81 	.word	0x08018e81
 8018e1c:	08018dfd 	.word	0x08018dfd
 8018e20:	08018dfd 	.word	0x08018dfd
 8018e24:	08018dfd 	.word	0x08018dfd
 8018e28:	08018dfd 	.word	0x08018dfd
 8018e2c:	08018e81 	.word	0x08018e81
 8018e30:	08018dfd 	.word	0x08018dfd
 8018e34:	08018dfd 	.word	0x08018dfd
 8018e38:	08018dfd 	.word	0x08018dfd
 8018e3c:	08018dfd 	.word	0x08018dfd
 8018e40:	08018f85 	.word	0x08018f85
 8018e44:	08018ead 	.word	0x08018ead
 8018e48:	08018f3f 	.word	0x08018f3f
 8018e4c:	08018dfd 	.word	0x08018dfd
 8018e50:	08018dfd 	.word	0x08018dfd
 8018e54:	08018fa7 	.word	0x08018fa7
 8018e58:	08018dfd 	.word	0x08018dfd
 8018e5c:	08018ead 	.word	0x08018ead
 8018e60:	08018dfd 	.word	0x08018dfd
 8018e64:	08018dfd 	.word	0x08018dfd
 8018e68:	08018f47 	.word	0x08018f47
 8018e6c:	682b      	ldr	r3, [r5, #0]
 8018e6e:	1d1a      	adds	r2, r3, #4
 8018e70:	681b      	ldr	r3, [r3, #0]
 8018e72:	602a      	str	r2, [r5, #0]
 8018e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018e78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018e7c:	2301      	movs	r3, #1
 8018e7e:	e09f      	b.n	8018fc0 <_printf_i+0x1ec>
 8018e80:	6820      	ldr	r0, [r4, #0]
 8018e82:	682b      	ldr	r3, [r5, #0]
 8018e84:	0607      	lsls	r7, r0, #24
 8018e86:	f103 0104 	add.w	r1, r3, #4
 8018e8a:	6029      	str	r1, [r5, #0]
 8018e8c:	d501      	bpl.n	8018e92 <_printf_i+0xbe>
 8018e8e:	681e      	ldr	r6, [r3, #0]
 8018e90:	e003      	b.n	8018e9a <_printf_i+0xc6>
 8018e92:	0646      	lsls	r6, r0, #25
 8018e94:	d5fb      	bpl.n	8018e8e <_printf_i+0xba>
 8018e96:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018e9a:	2e00      	cmp	r6, #0
 8018e9c:	da03      	bge.n	8018ea6 <_printf_i+0xd2>
 8018e9e:	232d      	movs	r3, #45	; 0x2d
 8018ea0:	4276      	negs	r6, r6
 8018ea2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018ea6:	485a      	ldr	r0, [pc, #360]	; (8019010 <_printf_i+0x23c>)
 8018ea8:	230a      	movs	r3, #10
 8018eaa:	e012      	b.n	8018ed2 <_printf_i+0xfe>
 8018eac:	682b      	ldr	r3, [r5, #0]
 8018eae:	6820      	ldr	r0, [r4, #0]
 8018eb0:	1d19      	adds	r1, r3, #4
 8018eb2:	6029      	str	r1, [r5, #0]
 8018eb4:	0605      	lsls	r5, r0, #24
 8018eb6:	d501      	bpl.n	8018ebc <_printf_i+0xe8>
 8018eb8:	681e      	ldr	r6, [r3, #0]
 8018eba:	e002      	b.n	8018ec2 <_printf_i+0xee>
 8018ebc:	0641      	lsls	r1, r0, #25
 8018ebe:	d5fb      	bpl.n	8018eb8 <_printf_i+0xe4>
 8018ec0:	881e      	ldrh	r6, [r3, #0]
 8018ec2:	4853      	ldr	r0, [pc, #332]	; (8019010 <_printf_i+0x23c>)
 8018ec4:	2f6f      	cmp	r7, #111	; 0x6f
 8018ec6:	bf0c      	ite	eq
 8018ec8:	2308      	moveq	r3, #8
 8018eca:	230a      	movne	r3, #10
 8018ecc:	2100      	movs	r1, #0
 8018ece:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018ed2:	6865      	ldr	r5, [r4, #4]
 8018ed4:	60a5      	str	r5, [r4, #8]
 8018ed6:	2d00      	cmp	r5, #0
 8018ed8:	bfa2      	ittt	ge
 8018eda:	6821      	ldrge	r1, [r4, #0]
 8018edc:	f021 0104 	bicge.w	r1, r1, #4
 8018ee0:	6021      	strge	r1, [r4, #0]
 8018ee2:	b90e      	cbnz	r6, 8018ee8 <_printf_i+0x114>
 8018ee4:	2d00      	cmp	r5, #0
 8018ee6:	d04b      	beq.n	8018f80 <_printf_i+0x1ac>
 8018ee8:	4615      	mov	r5, r2
 8018eea:	fbb6 f1f3 	udiv	r1, r6, r3
 8018eee:	fb03 6711 	mls	r7, r3, r1, r6
 8018ef2:	5dc7      	ldrb	r7, [r0, r7]
 8018ef4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018ef8:	4637      	mov	r7, r6
 8018efa:	42bb      	cmp	r3, r7
 8018efc:	460e      	mov	r6, r1
 8018efe:	d9f4      	bls.n	8018eea <_printf_i+0x116>
 8018f00:	2b08      	cmp	r3, #8
 8018f02:	d10b      	bne.n	8018f1c <_printf_i+0x148>
 8018f04:	6823      	ldr	r3, [r4, #0]
 8018f06:	07de      	lsls	r6, r3, #31
 8018f08:	d508      	bpl.n	8018f1c <_printf_i+0x148>
 8018f0a:	6923      	ldr	r3, [r4, #16]
 8018f0c:	6861      	ldr	r1, [r4, #4]
 8018f0e:	4299      	cmp	r1, r3
 8018f10:	bfde      	ittt	le
 8018f12:	2330      	movle	r3, #48	; 0x30
 8018f14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018f18:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8018f1c:	1b52      	subs	r2, r2, r5
 8018f1e:	6122      	str	r2, [r4, #16]
 8018f20:	f8cd a000 	str.w	sl, [sp]
 8018f24:	464b      	mov	r3, r9
 8018f26:	aa03      	add	r2, sp, #12
 8018f28:	4621      	mov	r1, r4
 8018f2a:	4640      	mov	r0, r8
 8018f2c:	f7ff fee4 	bl	8018cf8 <_printf_common>
 8018f30:	3001      	adds	r0, #1
 8018f32:	d14a      	bne.n	8018fca <_printf_i+0x1f6>
 8018f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018f38:	b004      	add	sp, #16
 8018f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f3e:	6823      	ldr	r3, [r4, #0]
 8018f40:	f043 0320 	orr.w	r3, r3, #32
 8018f44:	6023      	str	r3, [r4, #0]
 8018f46:	4833      	ldr	r0, [pc, #204]	; (8019014 <_printf_i+0x240>)
 8018f48:	2778      	movs	r7, #120	; 0x78
 8018f4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018f4e:	6823      	ldr	r3, [r4, #0]
 8018f50:	6829      	ldr	r1, [r5, #0]
 8018f52:	061f      	lsls	r7, r3, #24
 8018f54:	f851 6b04 	ldr.w	r6, [r1], #4
 8018f58:	d402      	bmi.n	8018f60 <_printf_i+0x18c>
 8018f5a:	065f      	lsls	r7, r3, #25
 8018f5c:	bf48      	it	mi
 8018f5e:	b2b6      	uxthmi	r6, r6
 8018f60:	07df      	lsls	r7, r3, #31
 8018f62:	bf48      	it	mi
 8018f64:	f043 0320 	orrmi.w	r3, r3, #32
 8018f68:	6029      	str	r1, [r5, #0]
 8018f6a:	bf48      	it	mi
 8018f6c:	6023      	strmi	r3, [r4, #0]
 8018f6e:	b91e      	cbnz	r6, 8018f78 <_printf_i+0x1a4>
 8018f70:	6823      	ldr	r3, [r4, #0]
 8018f72:	f023 0320 	bic.w	r3, r3, #32
 8018f76:	6023      	str	r3, [r4, #0]
 8018f78:	2310      	movs	r3, #16
 8018f7a:	e7a7      	b.n	8018ecc <_printf_i+0xf8>
 8018f7c:	4824      	ldr	r0, [pc, #144]	; (8019010 <_printf_i+0x23c>)
 8018f7e:	e7e4      	b.n	8018f4a <_printf_i+0x176>
 8018f80:	4615      	mov	r5, r2
 8018f82:	e7bd      	b.n	8018f00 <_printf_i+0x12c>
 8018f84:	682b      	ldr	r3, [r5, #0]
 8018f86:	6826      	ldr	r6, [r4, #0]
 8018f88:	6961      	ldr	r1, [r4, #20]
 8018f8a:	1d18      	adds	r0, r3, #4
 8018f8c:	6028      	str	r0, [r5, #0]
 8018f8e:	0635      	lsls	r5, r6, #24
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	d501      	bpl.n	8018f98 <_printf_i+0x1c4>
 8018f94:	6019      	str	r1, [r3, #0]
 8018f96:	e002      	b.n	8018f9e <_printf_i+0x1ca>
 8018f98:	0670      	lsls	r0, r6, #25
 8018f9a:	d5fb      	bpl.n	8018f94 <_printf_i+0x1c0>
 8018f9c:	8019      	strh	r1, [r3, #0]
 8018f9e:	2300      	movs	r3, #0
 8018fa0:	6123      	str	r3, [r4, #16]
 8018fa2:	4615      	mov	r5, r2
 8018fa4:	e7bc      	b.n	8018f20 <_printf_i+0x14c>
 8018fa6:	682b      	ldr	r3, [r5, #0]
 8018fa8:	1d1a      	adds	r2, r3, #4
 8018faa:	602a      	str	r2, [r5, #0]
 8018fac:	681d      	ldr	r5, [r3, #0]
 8018fae:	6862      	ldr	r2, [r4, #4]
 8018fb0:	2100      	movs	r1, #0
 8018fb2:	4628      	mov	r0, r5
 8018fb4:	f7e7 f92c 	bl	8000210 <memchr>
 8018fb8:	b108      	cbz	r0, 8018fbe <_printf_i+0x1ea>
 8018fba:	1b40      	subs	r0, r0, r5
 8018fbc:	6060      	str	r0, [r4, #4]
 8018fbe:	6863      	ldr	r3, [r4, #4]
 8018fc0:	6123      	str	r3, [r4, #16]
 8018fc2:	2300      	movs	r3, #0
 8018fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018fc8:	e7aa      	b.n	8018f20 <_printf_i+0x14c>
 8018fca:	6923      	ldr	r3, [r4, #16]
 8018fcc:	462a      	mov	r2, r5
 8018fce:	4649      	mov	r1, r9
 8018fd0:	4640      	mov	r0, r8
 8018fd2:	47d0      	blx	sl
 8018fd4:	3001      	adds	r0, #1
 8018fd6:	d0ad      	beq.n	8018f34 <_printf_i+0x160>
 8018fd8:	6823      	ldr	r3, [r4, #0]
 8018fda:	079b      	lsls	r3, r3, #30
 8018fdc:	d413      	bmi.n	8019006 <_printf_i+0x232>
 8018fde:	68e0      	ldr	r0, [r4, #12]
 8018fe0:	9b03      	ldr	r3, [sp, #12]
 8018fe2:	4298      	cmp	r0, r3
 8018fe4:	bfb8      	it	lt
 8018fe6:	4618      	movlt	r0, r3
 8018fe8:	e7a6      	b.n	8018f38 <_printf_i+0x164>
 8018fea:	2301      	movs	r3, #1
 8018fec:	4632      	mov	r2, r6
 8018fee:	4649      	mov	r1, r9
 8018ff0:	4640      	mov	r0, r8
 8018ff2:	47d0      	blx	sl
 8018ff4:	3001      	adds	r0, #1
 8018ff6:	d09d      	beq.n	8018f34 <_printf_i+0x160>
 8018ff8:	3501      	adds	r5, #1
 8018ffa:	68e3      	ldr	r3, [r4, #12]
 8018ffc:	9903      	ldr	r1, [sp, #12]
 8018ffe:	1a5b      	subs	r3, r3, r1
 8019000:	42ab      	cmp	r3, r5
 8019002:	dcf2      	bgt.n	8018fea <_printf_i+0x216>
 8019004:	e7eb      	b.n	8018fde <_printf_i+0x20a>
 8019006:	2500      	movs	r5, #0
 8019008:	f104 0619 	add.w	r6, r4, #25
 801900c:	e7f5      	b.n	8018ffa <_printf_i+0x226>
 801900e:	bf00      	nop
 8019010:	0801a205 	.word	0x0801a205
 8019014:	0801a216 	.word	0x0801a216

08019018 <__sflush_r>:
 8019018:	898a      	ldrh	r2, [r1, #12]
 801901a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801901e:	4605      	mov	r5, r0
 8019020:	0710      	lsls	r0, r2, #28
 8019022:	460c      	mov	r4, r1
 8019024:	d458      	bmi.n	80190d8 <__sflush_r+0xc0>
 8019026:	684b      	ldr	r3, [r1, #4]
 8019028:	2b00      	cmp	r3, #0
 801902a:	dc05      	bgt.n	8019038 <__sflush_r+0x20>
 801902c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801902e:	2b00      	cmp	r3, #0
 8019030:	dc02      	bgt.n	8019038 <__sflush_r+0x20>
 8019032:	2000      	movs	r0, #0
 8019034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019038:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801903a:	2e00      	cmp	r6, #0
 801903c:	d0f9      	beq.n	8019032 <__sflush_r+0x1a>
 801903e:	2300      	movs	r3, #0
 8019040:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019044:	682f      	ldr	r7, [r5, #0]
 8019046:	6a21      	ldr	r1, [r4, #32]
 8019048:	602b      	str	r3, [r5, #0]
 801904a:	d032      	beq.n	80190b2 <__sflush_r+0x9a>
 801904c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801904e:	89a3      	ldrh	r3, [r4, #12]
 8019050:	075a      	lsls	r2, r3, #29
 8019052:	d505      	bpl.n	8019060 <__sflush_r+0x48>
 8019054:	6863      	ldr	r3, [r4, #4]
 8019056:	1ac0      	subs	r0, r0, r3
 8019058:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801905a:	b10b      	cbz	r3, 8019060 <__sflush_r+0x48>
 801905c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801905e:	1ac0      	subs	r0, r0, r3
 8019060:	2300      	movs	r3, #0
 8019062:	4602      	mov	r2, r0
 8019064:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019066:	6a21      	ldr	r1, [r4, #32]
 8019068:	4628      	mov	r0, r5
 801906a:	47b0      	blx	r6
 801906c:	1c43      	adds	r3, r0, #1
 801906e:	89a3      	ldrh	r3, [r4, #12]
 8019070:	d106      	bne.n	8019080 <__sflush_r+0x68>
 8019072:	6829      	ldr	r1, [r5, #0]
 8019074:	291d      	cmp	r1, #29
 8019076:	d82b      	bhi.n	80190d0 <__sflush_r+0xb8>
 8019078:	4a29      	ldr	r2, [pc, #164]	; (8019120 <__sflush_r+0x108>)
 801907a:	410a      	asrs	r2, r1
 801907c:	07d6      	lsls	r6, r2, #31
 801907e:	d427      	bmi.n	80190d0 <__sflush_r+0xb8>
 8019080:	2200      	movs	r2, #0
 8019082:	6062      	str	r2, [r4, #4]
 8019084:	04d9      	lsls	r1, r3, #19
 8019086:	6922      	ldr	r2, [r4, #16]
 8019088:	6022      	str	r2, [r4, #0]
 801908a:	d504      	bpl.n	8019096 <__sflush_r+0x7e>
 801908c:	1c42      	adds	r2, r0, #1
 801908e:	d101      	bne.n	8019094 <__sflush_r+0x7c>
 8019090:	682b      	ldr	r3, [r5, #0]
 8019092:	b903      	cbnz	r3, 8019096 <__sflush_r+0x7e>
 8019094:	6560      	str	r0, [r4, #84]	; 0x54
 8019096:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019098:	602f      	str	r7, [r5, #0]
 801909a:	2900      	cmp	r1, #0
 801909c:	d0c9      	beq.n	8019032 <__sflush_r+0x1a>
 801909e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80190a2:	4299      	cmp	r1, r3
 80190a4:	d002      	beq.n	80190ac <__sflush_r+0x94>
 80190a6:	4628      	mov	r0, r5
 80190a8:	f7ff fb36 	bl	8018718 <_free_r>
 80190ac:	2000      	movs	r0, #0
 80190ae:	6360      	str	r0, [r4, #52]	; 0x34
 80190b0:	e7c0      	b.n	8019034 <__sflush_r+0x1c>
 80190b2:	2301      	movs	r3, #1
 80190b4:	4628      	mov	r0, r5
 80190b6:	47b0      	blx	r6
 80190b8:	1c41      	adds	r1, r0, #1
 80190ba:	d1c8      	bne.n	801904e <__sflush_r+0x36>
 80190bc:	682b      	ldr	r3, [r5, #0]
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d0c5      	beq.n	801904e <__sflush_r+0x36>
 80190c2:	2b1d      	cmp	r3, #29
 80190c4:	d001      	beq.n	80190ca <__sflush_r+0xb2>
 80190c6:	2b16      	cmp	r3, #22
 80190c8:	d101      	bne.n	80190ce <__sflush_r+0xb6>
 80190ca:	602f      	str	r7, [r5, #0]
 80190cc:	e7b1      	b.n	8019032 <__sflush_r+0x1a>
 80190ce:	89a3      	ldrh	r3, [r4, #12]
 80190d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80190d4:	81a3      	strh	r3, [r4, #12]
 80190d6:	e7ad      	b.n	8019034 <__sflush_r+0x1c>
 80190d8:	690f      	ldr	r7, [r1, #16]
 80190da:	2f00      	cmp	r7, #0
 80190dc:	d0a9      	beq.n	8019032 <__sflush_r+0x1a>
 80190de:	0793      	lsls	r3, r2, #30
 80190e0:	680e      	ldr	r6, [r1, #0]
 80190e2:	bf08      	it	eq
 80190e4:	694b      	ldreq	r3, [r1, #20]
 80190e6:	600f      	str	r7, [r1, #0]
 80190e8:	bf18      	it	ne
 80190ea:	2300      	movne	r3, #0
 80190ec:	eba6 0807 	sub.w	r8, r6, r7
 80190f0:	608b      	str	r3, [r1, #8]
 80190f2:	f1b8 0f00 	cmp.w	r8, #0
 80190f6:	dd9c      	ble.n	8019032 <__sflush_r+0x1a>
 80190f8:	6a21      	ldr	r1, [r4, #32]
 80190fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80190fc:	4643      	mov	r3, r8
 80190fe:	463a      	mov	r2, r7
 8019100:	4628      	mov	r0, r5
 8019102:	47b0      	blx	r6
 8019104:	2800      	cmp	r0, #0
 8019106:	dc06      	bgt.n	8019116 <__sflush_r+0xfe>
 8019108:	89a3      	ldrh	r3, [r4, #12]
 801910a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801910e:	81a3      	strh	r3, [r4, #12]
 8019110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019114:	e78e      	b.n	8019034 <__sflush_r+0x1c>
 8019116:	4407      	add	r7, r0
 8019118:	eba8 0800 	sub.w	r8, r8, r0
 801911c:	e7e9      	b.n	80190f2 <__sflush_r+0xda>
 801911e:	bf00      	nop
 8019120:	dfbffffe 	.word	0xdfbffffe

08019124 <_fflush_r>:
 8019124:	b538      	push	{r3, r4, r5, lr}
 8019126:	690b      	ldr	r3, [r1, #16]
 8019128:	4605      	mov	r5, r0
 801912a:	460c      	mov	r4, r1
 801912c:	b913      	cbnz	r3, 8019134 <_fflush_r+0x10>
 801912e:	2500      	movs	r5, #0
 8019130:	4628      	mov	r0, r5
 8019132:	bd38      	pop	{r3, r4, r5, pc}
 8019134:	b118      	cbz	r0, 801913e <_fflush_r+0x1a>
 8019136:	6a03      	ldr	r3, [r0, #32]
 8019138:	b90b      	cbnz	r3, 801913e <_fflush_r+0x1a>
 801913a:	f7fe ff3f 	bl	8017fbc <__sinit>
 801913e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019142:	2b00      	cmp	r3, #0
 8019144:	d0f3      	beq.n	801912e <_fflush_r+0xa>
 8019146:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019148:	07d0      	lsls	r0, r2, #31
 801914a:	d404      	bmi.n	8019156 <_fflush_r+0x32>
 801914c:	0599      	lsls	r1, r3, #22
 801914e:	d402      	bmi.n	8019156 <_fflush_r+0x32>
 8019150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019152:	f7ff fa9e 	bl	8018692 <__retarget_lock_acquire_recursive>
 8019156:	4628      	mov	r0, r5
 8019158:	4621      	mov	r1, r4
 801915a:	f7ff ff5d 	bl	8019018 <__sflush_r>
 801915e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019160:	07da      	lsls	r2, r3, #31
 8019162:	4605      	mov	r5, r0
 8019164:	d4e4      	bmi.n	8019130 <_fflush_r+0xc>
 8019166:	89a3      	ldrh	r3, [r4, #12]
 8019168:	059b      	lsls	r3, r3, #22
 801916a:	d4e1      	bmi.n	8019130 <_fflush_r+0xc>
 801916c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801916e:	f7ff fa91 	bl	8018694 <__retarget_lock_release_recursive>
 8019172:	e7dd      	b.n	8019130 <_fflush_r+0xc>

08019174 <fiprintf>:
 8019174:	b40e      	push	{r1, r2, r3}
 8019176:	b503      	push	{r0, r1, lr}
 8019178:	4601      	mov	r1, r0
 801917a:	ab03      	add	r3, sp, #12
 801917c:	4805      	ldr	r0, [pc, #20]	; (8019194 <fiprintf+0x20>)
 801917e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019182:	6800      	ldr	r0, [r0, #0]
 8019184:	9301      	str	r3, [sp, #4]
 8019186:	f7ff fc9d 	bl	8018ac4 <_vfiprintf_r>
 801918a:	b002      	add	sp, #8
 801918c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019190:	b003      	add	sp, #12
 8019192:	4770      	bx	lr
 8019194:	200000d0 	.word	0x200000d0

08019198 <__swhatbuf_r>:
 8019198:	b570      	push	{r4, r5, r6, lr}
 801919a:	460c      	mov	r4, r1
 801919c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80191a0:	2900      	cmp	r1, #0
 80191a2:	b096      	sub	sp, #88	; 0x58
 80191a4:	4615      	mov	r5, r2
 80191a6:	461e      	mov	r6, r3
 80191a8:	da0d      	bge.n	80191c6 <__swhatbuf_r+0x2e>
 80191aa:	89a3      	ldrh	r3, [r4, #12]
 80191ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80191b0:	f04f 0100 	mov.w	r1, #0
 80191b4:	bf0c      	ite	eq
 80191b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80191ba:	2340      	movne	r3, #64	; 0x40
 80191bc:	2000      	movs	r0, #0
 80191be:	6031      	str	r1, [r6, #0]
 80191c0:	602b      	str	r3, [r5, #0]
 80191c2:	b016      	add	sp, #88	; 0x58
 80191c4:	bd70      	pop	{r4, r5, r6, pc}
 80191c6:	466a      	mov	r2, sp
 80191c8:	f000 f848 	bl	801925c <_fstat_r>
 80191cc:	2800      	cmp	r0, #0
 80191ce:	dbec      	blt.n	80191aa <__swhatbuf_r+0x12>
 80191d0:	9901      	ldr	r1, [sp, #4]
 80191d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80191d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80191da:	4259      	negs	r1, r3
 80191dc:	4159      	adcs	r1, r3
 80191de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80191e2:	e7eb      	b.n	80191bc <__swhatbuf_r+0x24>

080191e4 <__smakebuf_r>:
 80191e4:	898b      	ldrh	r3, [r1, #12]
 80191e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80191e8:	079d      	lsls	r5, r3, #30
 80191ea:	4606      	mov	r6, r0
 80191ec:	460c      	mov	r4, r1
 80191ee:	d507      	bpl.n	8019200 <__smakebuf_r+0x1c>
 80191f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80191f4:	6023      	str	r3, [r4, #0]
 80191f6:	6123      	str	r3, [r4, #16]
 80191f8:	2301      	movs	r3, #1
 80191fa:	6163      	str	r3, [r4, #20]
 80191fc:	b002      	add	sp, #8
 80191fe:	bd70      	pop	{r4, r5, r6, pc}
 8019200:	ab01      	add	r3, sp, #4
 8019202:	466a      	mov	r2, sp
 8019204:	f7ff ffc8 	bl	8019198 <__swhatbuf_r>
 8019208:	9900      	ldr	r1, [sp, #0]
 801920a:	4605      	mov	r5, r0
 801920c:	4630      	mov	r0, r6
 801920e:	f7fe fc9d 	bl	8017b4c <_malloc_r>
 8019212:	b948      	cbnz	r0, 8019228 <__smakebuf_r+0x44>
 8019214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019218:	059a      	lsls	r2, r3, #22
 801921a:	d4ef      	bmi.n	80191fc <__smakebuf_r+0x18>
 801921c:	f023 0303 	bic.w	r3, r3, #3
 8019220:	f043 0302 	orr.w	r3, r3, #2
 8019224:	81a3      	strh	r3, [r4, #12]
 8019226:	e7e3      	b.n	80191f0 <__smakebuf_r+0xc>
 8019228:	89a3      	ldrh	r3, [r4, #12]
 801922a:	6020      	str	r0, [r4, #0]
 801922c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019230:	81a3      	strh	r3, [r4, #12]
 8019232:	9b00      	ldr	r3, [sp, #0]
 8019234:	6163      	str	r3, [r4, #20]
 8019236:	9b01      	ldr	r3, [sp, #4]
 8019238:	6120      	str	r0, [r4, #16]
 801923a:	b15b      	cbz	r3, 8019254 <__smakebuf_r+0x70>
 801923c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019240:	4630      	mov	r0, r6
 8019242:	f000 f81d 	bl	8019280 <_isatty_r>
 8019246:	b128      	cbz	r0, 8019254 <__smakebuf_r+0x70>
 8019248:	89a3      	ldrh	r3, [r4, #12]
 801924a:	f023 0303 	bic.w	r3, r3, #3
 801924e:	f043 0301 	orr.w	r3, r3, #1
 8019252:	81a3      	strh	r3, [r4, #12]
 8019254:	89a3      	ldrh	r3, [r4, #12]
 8019256:	431d      	orrs	r5, r3
 8019258:	81a5      	strh	r5, [r4, #12]
 801925a:	e7cf      	b.n	80191fc <__smakebuf_r+0x18>

0801925c <_fstat_r>:
 801925c:	b538      	push	{r3, r4, r5, lr}
 801925e:	4d07      	ldr	r5, [pc, #28]	; (801927c <_fstat_r+0x20>)
 8019260:	2300      	movs	r3, #0
 8019262:	4604      	mov	r4, r0
 8019264:	4608      	mov	r0, r1
 8019266:	4611      	mov	r1, r2
 8019268:	602b      	str	r3, [r5, #0]
 801926a:	f7e9 fe15 	bl	8002e98 <_fstat>
 801926e:	1c43      	adds	r3, r0, #1
 8019270:	d102      	bne.n	8019278 <_fstat_r+0x1c>
 8019272:	682b      	ldr	r3, [r5, #0]
 8019274:	b103      	cbz	r3, 8019278 <_fstat_r+0x1c>
 8019276:	6023      	str	r3, [r4, #0]
 8019278:	bd38      	pop	{r3, r4, r5, pc}
 801927a:	bf00      	nop
 801927c:	20009e7c 	.word	0x20009e7c

08019280 <_isatty_r>:
 8019280:	b538      	push	{r3, r4, r5, lr}
 8019282:	4d06      	ldr	r5, [pc, #24]	; (801929c <_isatty_r+0x1c>)
 8019284:	2300      	movs	r3, #0
 8019286:	4604      	mov	r4, r0
 8019288:	4608      	mov	r0, r1
 801928a:	602b      	str	r3, [r5, #0]
 801928c:	f7e9 fd72 	bl	8002d74 <_isatty>
 8019290:	1c43      	adds	r3, r0, #1
 8019292:	d102      	bne.n	801929a <_isatty_r+0x1a>
 8019294:	682b      	ldr	r3, [r5, #0]
 8019296:	b103      	cbz	r3, 801929a <_isatty_r+0x1a>
 8019298:	6023      	str	r3, [r4, #0]
 801929a:	bd38      	pop	{r3, r4, r5, pc}
 801929c:	20009e7c 	.word	0x20009e7c

080192a0 <abort>:
 80192a0:	b508      	push	{r3, lr}
 80192a2:	2006      	movs	r0, #6
 80192a4:	f000 f82c 	bl	8019300 <raise>
 80192a8:	2001      	movs	r0, #1
 80192aa:	f000 f845 	bl	8019338 <_exit>

080192ae <_raise_r>:
 80192ae:	291f      	cmp	r1, #31
 80192b0:	b538      	push	{r3, r4, r5, lr}
 80192b2:	4604      	mov	r4, r0
 80192b4:	460d      	mov	r5, r1
 80192b6:	d904      	bls.n	80192c2 <_raise_r+0x14>
 80192b8:	2316      	movs	r3, #22
 80192ba:	6003      	str	r3, [r0, #0]
 80192bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80192c0:	bd38      	pop	{r3, r4, r5, pc}
 80192c2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80192c4:	b112      	cbz	r2, 80192cc <_raise_r+0x1e>
 80192c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80192ca:	b94b      	cbnz	r3, 80192e0 <_raise_r+0x32>
 80192cc:	4620      	mov	r0, r4
 80192ce:	f000 f831 	bl	8019334 <_getpid_r>
 80192d2:	462a      	mov	r2, r5
 80192d4:	4601      	mov	r1, r0
 80192d6:	4620      	mov	r0, r4
 80192d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80192dc:	f000 b818 	b.w	8019310 <_kill_r>
 80192e0:	2b01      	cmp	r3, #1
 80192e2:	d00a      	beq.n	80192fa <_raise_r+0x4c>
 80192e4:	1c59      	adds	r1, r3, #1
 80192e6:	d103      	bne.n	80192f0 <_raise_r+0x42>
 80192e8:	2316      	movs	r3, #22
 80192ea:	6003      	str	r3, [r0, #0]
 80192ec:	2001      	movs	r0, #1
 80192ee:	e7e7      	b.n	80192c0 <_raise_r+0x12>
 80192f0:	2400      	movs	r4, #0
 80192f2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80192f6:	4628      	mov	r0, r5
 80192f8:	4798      	blx	r3
 80192fa:	2000      	movs	r0, #0
 80192fc:	e7e0      	b.n	80192c0 <_raise_r+0x12>
	...

08019300 <raise>:
 8019300:	4b02      	ldr	r3, [pc, #8]	; (801930c <raise+0xc>)
 8019302:	4601      	mov	r1, r0
 8019304:	6818      	ldr	r0, [r3, #0]
 8019306:	f7ff bfd2 	b.w	80192ae <_raise_r>
 801930a:	bf00      	nop
 801930c:	200000d0 	.word	0x200000d0

08019310 <_kill_r>:
 8019310:	b538      	push	{r3, r4, r5, lr}
 8019312:	4d07      	ldr	r5, [pc, #28]	; (8019330 <_kill_r+0x20>)
 8019314:	2300      	movs	r3, #0
 8019316:	4604      	mov	r4, r0
 8019318:	4608      	mov	r0, r1
 801931a:	4611      	mov	r1, r2
 801931c:	602b      	str	r3, [r5, #0]
 801931e:	f7e9 fdde 	bl	8002ede <_kill>
 8019322:	1c43      	adds	r3, r0, #1
 8019324:	d102      	bne.n	801932c <_kill_r+0x1c>
 8019326:	682b      	ldr	r3, [r5, #0]
 8019328:	b103      	cbz	r3, 801932c <_kill_r+0x1c>
 801932a:	6023      	str	r3, [r4, #0]
 801932c:	bd38      	pop	{r3, r4, r5, pc}
 801932e:	bf00      	nop
 8019330:	20009e7c 	.word	0x20009e7c

08019334 <_getpid_r>:
 8019334:	f7e9 bdcb 	b.w	8002ece <_getpid>

08019338 <_exit>:
 8019338:	e7fe      	b.n	8019338 <_exit>
	...

0801933c <_init>:
 801933c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801933e:	bf00      	nop
 8019340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019342:	bc08      	pop	{r3}
 8019344:	469e      	mov	lr, r3
 8019346:	4770      	bx	lr

08019348 <_fini>:
 8019348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801934a:	bf00      	nop
 801934c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801934e:	bc08      	pop	{r3}
 8019350:	469e      	mov	lr, r3
 8019352:	4770      	bx	lr
