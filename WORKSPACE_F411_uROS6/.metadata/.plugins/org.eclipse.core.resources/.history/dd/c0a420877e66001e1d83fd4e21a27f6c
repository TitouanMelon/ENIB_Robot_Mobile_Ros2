// https://github.com/lFatality/stm32_micro_ros_setup
#include "main.h"


#include "motorCommand.h"
#include "quadEncoder.h"
#include "captDistIR.h"
#include "VL53L0X.h"
#include "groveLCD.h"

#define ARRAY_LEN 100
#define SAMPLING_PERIOD_ms 5


extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;
extern DMA_HandleTypeDef hdma_usart1_rx;
extern DMA_HandleTypeDef hdma_usart1_tx;
extern DMA_HandleTypeDef hdma_usart2_rx;
extern DMA_HandleTypeDef hdma_usart2_tx;

extern I2C_HandleTypeDef hi2c1;

/* Definitions for defaultTask */
osThreadId_t defaultTaskHandle;
const osThreadAttr_t defaultTask_attributes = {
  .name = "defaultTask",
  .stack_size = 3000 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};


xSemaphoreHandle xSem_Supervision = NULL;
xQueueHandle q_mot_G = NULL;
xQueueHandle q_mot_D = NULL;


void SystemClock_Config(void);
void microros_task(void *argument);
//========================================================================
static void task_Supervision(void *pvParameters)
{
	int16_t consigne_G=0;
	int16_t consigne_D=0;

	int tab_mes_ir[2];
	uint16_t mes_vl53=0;

	vTaskDelay(100);
	for (;;)
	{
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);

	    captDistIR_Get(tab_mes_ir);
	    //mes_vl53 = readRangeSingleMillimeters()/10;

	    if((tab_mes_ir[0]>2000)||(tab_mes_ir[1]>2000))
	    { // !! obstacle
	    	consigne_G=0;
	    	consigne_D=0;
	    }
	    else
	    {
	    	consigne_G=1000;
	    	consigne_D=500;
	    }

		xQueueSend( q_mot_G, ( void * ) &consigne_G,  portMAX_DELAY );
		xSemaphoreTake( xSem_Supervision, portMAX_DELAY );

		xQueueSend( q_mot_D, ( void * ) &consigne_D,  portMAX_DELAY );
		xSemaphoreTake( xSem_Supervision, portMAX_DELAY );

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
		vTaskDelay(SAMPLING_PERIOD_ms);

	}
}
//=========================================================================
#define Kp 0.01
#define Ki (5.0/(0.1*40.0))

int16_t tab_speed[200];

static void task_Moteur_L(void *pvParameters)
{
	int16_t consigne;

	float ui=0.0;
	float up;
	int err;
	int speed;
	int i=0;

	for (;;)
	{
		xQueueReceive( q_mot_G,  &consigne , portMAX_DELAY );

		speed = quadEncoder_GetSpeedL();
		err=consigne-speed;
		up=Kp*(float)err;
		ui=ui+Kp*Ki*(float)err;

		motorLeft_SetDuty(100+(int)(up+ui));

		if(i<200)
		{
			tab_speed[i]=speed;
			i++;

		}

		xSemaphoreGive(  xSem_Supervision );
	}
}
//=========================================================================
static void task_Moteur_R(void *pvParameters)
{
	int16_t consigne;

	for (;;)
	{
		xQueueReceive( q_mot_D,  &consigne, portMAX_DELAY );

		xSemaphoreGive(  xSem_Supervision );
	}
}
//=========================================================================
static void task_Grove_LCD(void *pvParameters)
{
	for (;;)
	{
		 groveLCD_setCursor(0,0);
		 groveLCD_term_printf("TEST LCD");
		 vTaskDelay(100);
	}
}
//=========================================================================
int main(void)
{
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  MX_USART1_UART_Init();

  motorCommand_Init();
  quadEncoder_Init();
  captDistIR_Init();

  initVL53L0X();

  HAL_Delay(500);

  int a, b;
  groveLCD_begin(16,2,0); // !! cette fonction prend du temps
  HAL_Delay(100);
  groveLCD_setColor(2);
  groveLCD_setCursor(0,0);
  a=5; b=2;
  groveLCD_term_printf("%d+%d=%d",a,b,a+b);

  // TEST VL53L0X ###################################
 /* uint8_t i;
  uint16_t val;
  i2c1_ReadRegBuffer(0x53,0xC2,&i,1);

  initVL53L0X();
  while(1){
	  val = readRangeSingleMillimeters()/10;
	  HAL_Delay(200);
  }*/
  //#################################################

  HAL_Delay(50);

  osKernelInitialize();
  //defaultTaskHandle = osThreadNew(microros_task, NULL, &defaultTask_attributes);

  xTaskCreate( microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL,  24, NULL );
  xTaskCreate( task_Supervision, ( const portCHAR * ) "task Supervision", 128 /* stack size */, NULL,  27, NULL );
  xTaskCreate( task_Moteur_L, ( const portCHAR * ) "task Mot L", 128 /* stack size */, NULL,  25, NULL );
  xTaskCreate( task_Moteur_R, ( const portCHAR * ) "task Mot R", 128 /* stack size */, NULL,  26, NULL );
  xTaskCreate( task_Grove_LCD, ( const portCHAR * ) "task Mot R", 128 /* stack size */, NULL,  23, NULL );

  vSemaphoreCreateBinary(xSem_Supervision);
  xSemaphoreTake( xSem_Supervision, portMAX_DELAY );

  q_mot_G = xQueueCreate( 1, 4 );
  q_mot_D = xQueueCreate( 1, 4 );

  osKernelStart();

  while (1)
  {

  }

}
//=========================================================================
bool cubemx_transport_open(struct uxrCustomTransport * transport);
bool cubemx_transport_close(struct uxrCustomTransport * transport);
size_t cubemx_transport_write(struct uxrCustomTransport* transport, const uint8_t * buf, size_t len, uint8_t * err);
size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err);

void * microros_allocate(size_t size, void * state);
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void microros_task(void *argument)
{
  // micro-ROS configuration
  rmw_uros_set_custom_transport(
    true,
    (void *) &huart1,
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
  freeRTOS_allocator.allocate = microros_allocate;
  freeRTOS_allocator.deallocate = microros_deallocate;
  freeRTOS_allocator.reallocate = microros_reallocate;
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
      printf("Error on default allocators (line %d)\n", __LINE__);
  }

  // micro-ROS app
  rcl_publisher_t publisher;
  std_msgs__msg__String msg;
  rclc_support_t support;
  rcl_allocator_t allocator;
  rcl_node_t node;

  allocator = rcl_get_default_allocator();

  //create init_options
  rclc_support_init(&support, 0, NULL, &allocator);

  // create node
  rclc_node_init_default(&node, "STM32_node", "", &support);

  // create publisher
  rclc_publisher_init_default(
    &publisher,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
    "cubemx_publisher");

  //msg.data = 0;

  msg.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
  	msg.data.size = 0;
  	msg.data.capacity = ARRAY_LEN;

static int counter = 0;
  for(;;)
  {
	  sprintf(msg.data.data, "Hello from micro-ROS #%d", counter++);
	  		msg.data.size = strlen(msg.data.data);

    rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
    if (ret != RCL_RET_OK)
    {
      printf("Error publishing (line %d)\n", __LINE__);
    }

    osDelay(10);
  }
}
//=========================================================================
/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM1 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if (htim->Instance == TIM4)
  {
    HAL_IncTick();
  }
}
//=========================================================================
void Error_Handler(void)
{
  __disable_irq();
  while (1)
  {}
}
//=========================================================================
#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
